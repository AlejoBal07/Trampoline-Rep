/**
 * @file tpl_invoque.S
 *
 * @section descr File description
 *
 * System call user level invoque API.
 *
 * @warning this file is generated by gen_invoque.sh based on the 
 * tpl_os_service_ids.h header file.
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005+
 * Copyright ESEO for function and data structures documentation and ARM port
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $$Date$$
 * $$Rev$$
 * $$Author$$
 * $$URL$$
 */
#include "tpl_os_application_def.h"
#include "tpl_service_ids.h"

#if WITH_SYSTEM_CALL == NO
#error "This file should not be part of your project since WITH_SYSTEM_CALL is not defined"
#endif


#if WITH_MEMMAP == NO

#endif /* WITH_MEMMAP == NO */

#define API_START_SEC_CODE
#include "tpl_as_memmap.h"

  .global ActivateTask
  .type   ActivateTask, %function
ActivateTask:
  mov r3,#0
  svc #0
  bx  lr

  .global TerminateTask
  .type   TerminateTask, %function
TerminateTask:
  mov r3,#1
  svc #1
  bx  lr

  .global ChainTask
  .type   ChainTask, %function
ChainTask:
  mov r3,#2
  svc #2
  bx  lr

  .global Schedule
  .type   Schedule, %function
Schedule:
  mov r3,#3
  svc #3
  bx  lr

  .global GetTaskID
  .type   GetTaskID, %function
GetTaskID:
  mov r3,#4
  svc #4
  bx  lr

  .global GetTaskState
  .type   GetTaskState, %function
GetTaskState:
  mov r3,#5
  svc #5
  bx  lr

  .global EnableAllInterrupts
  .type   EnableAllInterrupts, %function
EnableAllInterrupts:
  mov r3,#6
  svc #6
  bx  lr

  .global DisableAllInterrupts
  .type   DisableAllInterrupts, %function
DisableAllInterrupts:
  mov r3,#7
  svc #7
  bx  lr

  .global ResumeAllInterrupts
  .type   ResumeAllInterrupts, %function
ResumeAllInterrupts:
  mov r3,#8
  svc #8
  bx  lr

  .global SuspendAllInterrupts
  .type   SuspendAllInterrupts, %function
SuspendAllInterrupts:
  mov r3,#9
  svc #9
  bx  lr

  .global ResumeOSInterrupts
  .type   ResumeOSInterrupts, %function
ResumeOSInterrupts:
  mov r3,#10
  svc #10
  bx  lr

  .global SuspendOSInterrupts
  .type   SuspendOSInterrupts, %function
SuspendOSInterrupts:
  mov r3,#11
  svc #11
  bx  lr

  .global GetResource
  .type   GetResource, %function
GetResource:
  mov r3,#12
  svc #12
  bx  lr

  .global ReleaseResource
  .type   ReleaseResource, %function
ReleaseResource:
  mov r3,#13
  svc #13
  bx  lr

  .global SetEvent
  .type   SetEvent, %function
SetEvent:
  mov r3,#14
  svc #14
  bx  lr

  .global ClearEvent
  .type   ClearEvent, %function
ClearEvent:
  mov r3,#15
  svc #15
  bx  lr

  .global GetEvent
  .type   GetEvent, %function
GetEvent:
  mov r3,#16
  svc #16
  bx  lr

  .global WaitEvent
  .type   WaitEvent, %function
WaitEvent:
  mov r3,#17
  svc #17
  bx  lr

  .global GetAlarmBase
  .type   GetAlarmBase, %function
GetAlarmBase:
  mov r3,#18
  svc #18
  bx  lr

  .global GetAlarm
  .type   GetAlarm, %function
GetAlarm:
  mov r3,#19
  svc #19
  bx  lr

  .global SetRelAlarm
  .type   SetRelAlarm, %function
SetRelAlarm:
  mov r3,#20
  svc #20
  bx  lr

  .global SetAbsAlarm
  .type   SetAbsAlarm, %function
SetAbsAlarm:
  mov r3,#21
  svc #21
  bx  lr

  .global CancelAlarm
  .type   CancelAlarm, %function
CancelAlarm:
  mov r3,#22
  svc #22
  bx  lr

  .global GetActiveApplicationMode
  .type   GetActiveApplicationMode, %function
GetActiveApplicationMode:
  mov r3,#23
  svc #23
  bx  lr

  .global tpl_start_os
  .type   tpl_start_os, %function		  
tpl_start_os:
  mov r3,#24
  svc #24
  bx  lr

  .global ShutdownOS
  .type   ShutdownOS, %function
ShutdownOS:
  mov r3,#25
  svc #25
  bx  lr

  .global CallTerminateTask
  .type   CallTerminateTask, %function
CallTerminateTask:
  mov r3,#26
  svc #26
  bx  lr

  .global CallTerminateISR2
  .type   CallTerminateISR2, %function
CallTerminateISR2:
  mov r3,#27
  svc #27
  bx  lr



#define API_STOP_SEC_CODE
#include "tpl_as_memmap.h"


/* End of file tpl_invoque. S */

