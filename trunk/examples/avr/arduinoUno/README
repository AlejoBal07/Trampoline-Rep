AVR sample project for AVR : ATMega328P (Arduino Uno boards)
see the README in the parent folder for general information.

[avr-gcc cross-compiler]
Linux (Debian/Ubuntu) -> sudo apt-get install avr-lic gcc-avr avrdude
MacOSX  -> AVR CrossPack (http://www.obdev.at/products/crosspack/download.html)
Windows -> Winavr (integrated in Atmel Studio, or http://winavr.sourceforge.net)

[first run]
Build oil related generated .c and .h files and the Makefile. If file.oil is the main oil file, and TRAMPOLINE_ROOT is the path to the root of trampoline.
$goil --target=avr/arduino --templates=$TRAMPOLINE_ROOT/goil/templates/ file.oil
(The generated file .aps is an AVR Studio 4 project for Windows users).

[Build]
$make -s
Both a .elf and a .hex files are generated. goil will now be called directly from the Makefile if the .oil file is updated.

[flash]
The serial device name should be defined in the oil file (CPU -> OS -> ARDUINO section). For example:
      PORT = "/dev/tty.usbmodem1411";
$make -s flash

or using avrdude directly:
$avrdude -c arduino -p m328p -P /dev/tty.usbmodem1421 -U flash:w:AVRTrampolineBin.hex
In this example:
  * -p m328p is for the ATMega328p
  * -c avrispmkII is the (ISP programmer on the Arduino Mega) on the USB interface. 
    Type 'avrdude -c toto' to get the full programer list
  * -P the device name used in the Arduino User Interface.

[using Atmel Studio]
In order to use an Atmel Studio project (allow to use debugger (breakpoints...) in the IDE), you should:
* create a new C++ project (ATMega328P device)
* add all the files compiled using the 'make' command line
* update project properties (projet-> toolchain->C compiler -> directories) with the directories defined in the compilation rules of the 'make' command line (directories starting with -I...)
* copy and paste these directories in 'C++ compiler-> directories' and 'assembler/General'
* add the symbols used in the 'make' command line (starting with -D...) in the 'symbols' part (without the -D)
* That's all!
