semantics goil_target_c166 :

import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;

routine init_c166_prefixes ?!@prefix_map prefix :
    [!?prefix insert_prefix ![@lstring new !"c166_sys_stack" !here]
              !"sys_stack_zone_of_" !"$SYS_STACK_ZONE$"] ;
    [!?prefix insert_prefix ![@lstring new !"c166_usr_stack" !here]
              !"usr_stack_zone_of_" !"$USR_STACK_ZONE$"] ;
    [!?prefix insert_prefix ![@lstring new !"c166_int_context" !here]
              !"integer_context_of_" !"$EXEC_INTEGER_CONTEXT$"] ;
end routine ;

routine generate_target_c166
    ?@lstring name
    ?@ident_map others
    ?@prefix_map p
    ?@oil_obj exe
    ?!@string result :

    replace !p !"c166_sys_stack" ![name string] !?result ;
    replace !p !"c166_usr_stack" ![name string] !?result ;
    replace !p !"c166_int_context" ![name string] !?result ;
    
    additional_int_key_required !"USRSTACKSIZE" !"$USR_STACK_SIZE$" !others !name !?result;
    additional_int_key_required !"SYSSTACKSIZE" !"$SYS_STACK_SIZE$" !others !name !?result;
    extract exe :
    when @isr_obj (6*) ->
      #object is an isr.
      additional_int_key_required !"TRAP" !"$TRAP_NUMBER$" !others !name !?result;
    else
    end extract ;


end routine ;
routine generate_counter_c166
  ?? @counter_map counters
  ?? @prefix_map p
  ?! @string code
:
  @string result := "";
  foreach counters (@lstring counter_name @counter_obj counter) :
    @string tmp;
    template ?tmp !"counter_list_specific";
    replace !p !"counter" ![counter_name string] !?tmp;
    result .= tmp;
  end foreach ;

  code := [code stringByReplacingStringByString !"$COUNTER_LIST$" !result] ;
end routine ;

end semantics ;
