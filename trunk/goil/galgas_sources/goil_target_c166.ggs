semantics goil_target_c166 :

import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;
import semantics goil_types_isr in "goil_types_isr.ggs" ;
import semantics goil_types_counter in "goil_types_counter.ggs" ;

routine generate_target_c166
    ?@lstring         name
    ?@ident_map       others
    ?@oil_obj         exe
    ?!@string         result :

  doReplace !?result !"$SYS_STACK_ZONE$" ![name string]."_sys_stack" ;
  doReplace !?result !"$USR_STACK_ZONE$" ![name string]."_usr_stack" ;
  doReplace !?result !"$EXEC_INTEGER_CONTEXT$" ![name string]."_int_context" ;

    @uint usr_stack_size ;
    @uint sys_stack_size ;
    additional_int_key_required !"USRSTACKSIZE" !others !name ?usr_stack_size ;
    additional_int_key_required !"SYSSTACKSIZE" !others !name ?sys_stack_size ;
    doReplace !?result !"$USR_STACK_SIZE$" ![usr_stack_size string] ;
    doReplace !?result !"$SYS_STACK_SIZE$" ![sys_stack_size string] ;

    cast exe :
    when == @isr_obj do
        #object is an isr.
        @uint trap ;
        additional_int_key_required !"TRAP" !others !name ?trap ;
        doReplace !?result !"$TRAP_NUMBER$" ![trap string] ;
    else
    end cast ;
end routine ;

routine generate_isr_c166
  ?? @isr_map    unused isrs
  ?! @string     unused code
:
end routine ;

routine generate_counter_c166
  ?? @counter_map counters
  ?! @string code
:
  @string result := "";
  foreach counters (@lstring counter_name @counter_obj counter) do
    @string tmp;
    retrieveTemplateString ?tmp !"counter_list_specific";
    doReplace !?tmp !"$COUNTER$" ![counter_name string]."_counter_desc" ;
    result .= tmp;
  end foreach ;

  doReplace !?code !"$COUNTER_LIST$" !result ;
end routine ;

end semantics ;
# vim:ft=ggs:ts=4:sw=4
