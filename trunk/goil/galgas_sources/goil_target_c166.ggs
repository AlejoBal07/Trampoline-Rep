semantics goil_target_c166 :

import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;

routine init_c166_prefixes ?!@prefix_map prefix :
    [!?prefix insert_prefix ![@lstring new !"c166_sys_stack" !here]
              !"sys_stack_zone_of_" !"$SYS_STACK_ZONE$"] ;
    [!?prefix insert_prefix ![@lstring new !"c166_usr_stack" !here]
              !"usr_stack_zone_of_" !"$USR_STACK_ZONE$"] ;
    [!?prefix insert_prefix ![@lstring new !"c166_int_context" !here]
              !"integer_context_of_" !"$EXEC_INTEGER_CONTEXT$"] ;
end routine ;

routine generate_target_c166
    ?@lstring name
    ?@ident_map others
    ?@prefix_map p
    ?!@string result :

    replace !p !"c166_sys_stack" ![name string] !?result ;
    replace !p !"c166_usr_stack" ![name string] !?result ;
    replace !p !"c166_int_context" ![name string] !?result ;
    
    if [others hasKey !"USRSTACKSIZE"]
    then
        @basic_type value ;
        [others searchIdent ![@lstring new !"USRSTACKSIZE" !here] ?value] ;
        extract value :
        when @uint_class (@uint64 stack_size) ->
            result := [result stringByReplacingStringByString !"$USR_STACK_SIZE$" ![stack_size string]] ;
        else error name : "USRSTACKSIZE should be an integer" ;
        end extract ;
    else
        error name : "no USRSTACKSIZE specified for task %K" ;
    end if ;
    if [others hasKey !"SYSSTACKSIZE"]
    then
        @basic_type value ;
        [others searchIdent ![@lstring new !"SYSSTACKSIZE" !here] ?value] ;
        extract value :
        when @uint_class (@uint64 stack_size) ->
            result := [result stringByReplacingStringByString !"$SYS_STACK_SIZE$" ![stack_size string]] ;
        else error name : "SYSSTACKSIZE should be an integer" ;
        end extract ;
    else
        error name : "no SYSSTACKSIZE specified for task %K" ;
    end if ;


end routine ;

end semantics ;