#
# @file goil_proc_generation.ggs
#
# @section File description
#
# This file contains routines to generate the process table.
#
# @section Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline is protected by the french intellectual property law.
#
# goil is distributed under the GNU Public Licence V2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics goil_proc_generation :

import semantics goil_types_task in "goil_types_task.ggs" ;
import semantics goil_types_isr in "goil_types_isr.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;
import option goil_options in "goil_options.gOption" ;

routine generate_proc_table
  ??@task_map tasks
  ??@isr_map  isrs
  ?!@string   head
  ?!@string   imp
  ?!@string   obj_head
:
  @string names_head ;
  @string names_imp ;
  @string proc_ids := "" ;
  @string proc_stat_imp := "" ;
  @string proc_dyn_imp := "" ;
  @string event_imp := "" ;
  @string isr_stat_imp := "" ;
  @string isr_ena_imp := "" ;
  @uint id := 0 ; # ids start at 0
  @uint ex_t_ct := 0 ;

  @tasks_by_type stasks [emptySortedList];
  # sort tasks according to type (basic or extended)
  foreach tasks do
    if [[task events] length] > 0 then
      stasks += !0 ![key string] ;
      ex_t_ct++ ;
    else
      stasks += !1 ![key string] ;
    end if ;
  end foreach ;
  
  doReplace !?obj_head !"$EXTENDED_TASK_COUNT$" ![ex_t_ct string] ;

  names_head := "#if !defined(NO_TASK) || !defined(NO_ISR)\n";
  names_head .= "#define API_START_SEC_CONST_UNSPECIFIED\n";
  names_head .= "#include \"tpl_memmap.h\"\n"; 
  names_head .= "extern CONSTP2CONST(char, AUTOMATIC, OS_APPL_DATA) proc_name_table[TASK_COUNT + ISR_COUNT];\n" ;
  names_head .= "#define API_STOP_SEC_CONST_UNSPECIFIED\n";
  names_head .= "#include \"tpl_memmap.h\"\n"; 
  names_head .= "#endif\n" ;
  names_imp := "#if !defined(NO_TASK) || !defined(NO_ISR)\n" ;
  names_imp .= "#define API_START_SEC_CONST_UNSPECIFIED\n";
  names_imp .= "#include \"tpl_memmap.h\"\n"; 
  names_imp .= "CONSTP2CONST(char, AUTOMATIC, OS_APPL_DATA) proc_name_table[TASK_COUNT + ISR_COUNT] = {\n" ;
  # start with tasks, extended first
  foreach stasks do
    names_imp .= "  \"".name."\",\n" ;
#    task_head .= "#define ".name."  ".[id string]."\n" ;
    proc_ids .= "#define ".name."_id  ".[id string]."\n" ;
    proc_ids .= "CONST(TaskType, AUTOMATIC) ".name." = ".name."_id;\n" ;
    id++ ;
  end foreach ;

  # continue with isrs
  foreach isrs do
    names_imp .= "  \"".[key string]."\",\n" ;
#    isr_head .= "#define ".[key string]."  ".[id string]."\n" ;
    proc_ids .= "#define ".[key string]."_id  ".[id string]."\n" ;
    if [option goil_options.autosar_on] then
      proc_ids .= "CONST(ISRType, AUTOMATIC) ".[key string]." = ".[key string]."_id;\n" ;
    end if ;
    id++ ;
 end foreach ;

  names_imp .= "};\n";
  names_imp .= "#define API_STOP_SEC_CONST_UNSPECIFIED\n";
  names_imp .= "#include \"tpl_memmap.h\"\n"; 
  names_imp .= "#endif\n" ;

  proc_stat_imp := "CONSTP2CONST(tpl_proc_static, AUTOMATIC, OS_APPL_DATA)\ntpl_stat_proc_table[TASK_COUNT+ISR_COUNT+1] = {\n" ;
  proc_dyn_imp := "CONSTP2VAR(tpl_proc, AUTOMATIC, OS_APPL_DATA)\ntpl_dyn_proc_table[TASK_COUNT+ISR_COUNT+1] = {\n" ;
  event_imp := "CONSTP2VAR(tpl_task_events, AUTOMATIC, OS_APPL_DATA)\ntpl_task_events_table[EXTENDED_TASK_COUNT] = {\n" ;

  # generate the table in the implementation part
  foreach stasks do
    proc_stat_imp .= "  &".name."_task_stat_desc,\n" ;
    proc_dyn_imp .= "  &".name."_task_desc,\n" ;
  end foreach ;

  # generate the event masks table
  @uint ct := 0 ;
  foreach stasks do
    if type == 0 then
      ct++ ;
      event_imp .= "  &".name."_task_evts" ;
      if (ct < ex_t_ct) then
        event_imp .= ",\n" ;
      end if ;
    end if ;
  after
    event_imp .= "\n};" ;
  end foreach ;

  foreach isrs do
    proc_stat_imp .= "  &".[key string]."_isr_stat_desc,\n" ;
    proc_dyn_imp .= "  &".[key string]."_isr_desc,\n" ;
  end foreach ;

  proc_stat_imp .= "  &idle_task_static\n};\n" ;
  proc_dyn_imp .= "  &idle_task\n};\n" ;

  foreach isrs
  before
    isr_ena_imp := "VAR(tpl_isr2_enable_state, OS_VAR)\ntpl_isr2_enable_table[ISR_COUNT] = {\n" ;
    isr_stat_imp := "CONSTP2CONST(tpl_isr_static, AUTOMATIC, OS_APPL_DATA)\ntpl_isr_stat_table[ISR_COUNT] = {\n" ;
  do
    isr_stat_imp .= "  &".[key string]."_isr_helper" ;
    isr_ena_imp .= "  ENABLED" ;
  between
    isr_stat_imp .= ",\n" ;
    isr_ena_imp .= ",\n" ;
  after
    isr_stat_imp .= "\n};" ;
    isr_ena_imp .= "\n};" ;
  end foreach ;


  doReplace !?imp  !"$PROCIDS$" !proc_ids ;
  doReplace !?head !"$PROC_NAMES$" !names_head ;
  doReplace !?imp !"$PROC_NAMES$" !names_imp ;
  doReplace !?imp !"$PROC_STATIC_TABLE$" !proc_stat_imp ;
  doReplace !?imp !"$PROC_DYNAMIC_TABLE$" !proc_dyn_imp ;
  doReplace !?imp !"$TASK_EVENTS_TABLE$" !event_imp ;
  doReplace !?imp !"$ISR_HELPER_TABLE$" !isr_stat_imp ;
  doReplace !?imp !"$ISR_ENABLE_TABLE$" ! isr_ena_imp ;
end routine ;

end semantics ;

