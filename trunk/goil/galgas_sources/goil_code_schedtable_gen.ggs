semantics goil_code_schedtable_gen :

import semantics goil_routines in "goil_routines.ggs" ;
import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_types_scheduletable in "goil_types_scheduletable.ggs" ;

#--------------------------------------------------------------------
# Schedule tables generation
#--------------------------------------------------------------------
routine generate_schedule_tables
    ?@scheduletable_map sts
    ?@string_map        app_for_obj
    ?!@string unused    header
    ?!@string           obj_header
    ?!@string           implementation
:
    @string h_result := "" ;
    @string i_result := "" ;
    @string st_table := "CONSTP2VAR(tpl_schedule_table, AUTOMATIC, OS_APPL_DATA)\n" ;
    st_table .= "  tpl_schedtable_table[SCHEDTABLE_COUNT] = {\n" ;
    foreach sts (@lstring name @scheduletable_obj st) index i do
      @string app_name := "";
      if [app_for_obj count] > 0 then
        [app_for_obj get !name ?app_name] ;
      end if ;
      [st generate !name !app_name !?i_result] ;
      h_result .= "#define ".[name string]."_id ".[i string]."\n" ;
      h_result .= "CONST(ScheduleTableType, AUTOMATIC) ".[name string]." = ".[name string]."_id;\n" ;
      st_table .= "    &".[name string]."_sched_table" ;
    between
      st_table .= ",\n" ;
    end foreach ;
    st_table .= "\n};\n" ;

    if [sts count] != 0 then
        i_result .= st_table ;
    end if ;

    doReplace !?obj_header !"$SCHEDTABLE_COUNT$" ![[sts count] string] ;
    doReplace !?implementation !"$SCHEDTABLEIDS$" !h_result ;
    doReplace !?implementation !"$SCHEDULETABLES$" !i_result ;
end routine ;

end semantics ;