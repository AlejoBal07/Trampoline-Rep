semantics goil_targets :

import semantics goil_target_c166 in "goil_target_c166.ggs";
import semantics goil_target_libpcl in "goil_target_libpcl.ggs";
import semantics goil_target_posix in "goil_target_posix.ggs";
import semantics goil_target_posix_vp2 in "goil_target_posix_vp2.ggs";
import semantics goil_target_hcs12 in "goil_target_hcs12.ggs";
import semantics goil_target_v850e in "goil_target_v850e.ggs";
import semantics goil_target_h8300h in "goil_target_h8300h.ggs";
import semantics goil_target_arm7 in "goil_target_arm7.ggs";
import semantics goil_target_avr in "goil_target_avr.ggs";
import semantics goil_target_ppc in "goil_target_ppc.ggs";

import semantics goil_routines in "goil_routines.ggs";
import semantics goil_types_task in "goil_types_task.ggs";
import semantics goil_types_isr in "goil_types_isr.ggs";
import semantics goil_types_os in "goil_types_os.ggs";

import semantics cfg_types in "cfg_types.ggs";

import option goil_options in "goil_options.ggs";

#routine init_targets_prefixes ?!@prefix_map prefix :
#    @string target;
#    target ?target;
#
#    if target == "c166" then
##        init_c166_prefixes !?prefix;
#    elsif target == "libpcl" then
##        init_libpcl_prefixes !?prefix;
#    elsif target == "hcs12" then
##        init_hcs12_prefixes !?prefix;
#    elsif target == "ppc" then
##        init_ppc_prefixes !?prefix;
#    elsif target == "v850e" then
##        init_v850e_prefixes !?prefix;
#    elsif target == "h8300h" then
##        init_h8300h_prefixes !?prefix;
#    elsif target == "arm7" then
##        init_arm7_prefixes !?prefix;
#    elsif target == "avr" then
##        init_avr_prefixes !?prefix;
#    else 
#      error here : "unknown target: ".target;
#    end if;
#end routine;

#--------------------------------------------------------------------
# Context and Stack generation
#--------------------------------------------------------------------
routine generate_context_and_stack
    ?@config          cfg
    ?@lstring         name
    ?@oil_obj         exe
    ?!@string         result :

    @string tpl_context_and_stack := "";
    @string context_and_stack := "";
    @ident_map idents [emptyMap];
    @attrs attrs := [@attrs new !here ![@cfg_attrs emptyMap]];

    @string target := arch();

    cast exe :
    when == @task_obj tk do
        retrieveTemplateString ?tpl_context_and_stack !"each_task_specific";
        context_and_stack := tpl_context_and_stack;
        idents := [tk others];
        @basic_type b_attrs;
        [cfg get ![@lstring new !"task_attrs" !here] ?b_attrs];
        cast b_attrs :
        when == @attrs at do attrs := at;
        else error here : "Internal error, unknown config task attributes";
        end cast;
    when == @isr_obj isr do
        retrieveTemplateString ?tpl_context_and_stack !"each_isr_specific";
        context_and_stack := tpl_context_and_stack;
        idents := [isr other_fields];
        @basic_type b_attrs;
        [cfg get ![@lstring new !"isr_attrs" !here] ?b_attrs];
        cast b_attrs :
        when == @attrs at do attrs := at;
        else error here : "Internal error, unknown config isr attributes";
        end cast;
    else
        error name : "Unknown executable object";
    end cast;

    if target == "c166" then 
      generate_target_c166   !name !idents !exe !?context_and_stack;
    elsif target == "libpcl" then
      generate_target_libpcl !name !idents !exe !?context_and_stack;
    elsif target == "posix" then
      generate_target_posix !name !idents !exe !?context_and_stack;
    elsif target == "posix_vp2" then
      generate_target_posix_vp2 !name !idents !exe !?context_and_stack;
    elsif target == "hcs12" then
      generate_target_hcs12  !name !idents !exe !?context_and_stack;
    elsif target == "ppc" then
      generate_target_ppc  !name !idents !exe !?context_and_stack;
    elsif target == "v850e" then
      generate_target_v850e  !name !idents !exe !?context_and_stack;
    elsif target == "h8300h" then
      generate_target_h8300h  !name !idents !exe !?context_and_stack;
    elsif target == "arm" then
      generate_target_arm7  !name !idents !exe !?context_and_stack;
    elsif target == "avr" then
      generate_target_avr  !name !idents !exe !?context_and_stack;
    else 
      error here : "unknown target: ".target;
    end if;
    
    result := result . context_and_stack;
end routine;

routine generate_isr_specific 
    ??@isr_map        isrs 
    !@string          code
:
    @string target := arch();

    retrieveTemplateString ?code !"isr_specific";

    if target == "c166" then
      generate_isr_c166   !isrs !?code;
    elsif target == "libpcl" then
      generate_isr_libpcl !isrs !?code;
    elsif target == "posix" then
      generate_isr_posix !isrs !?code;
    elsif target == "posix_vp2" then
      generate_isr_posix_vp2 !isrs !?code;
    elsif target == "hcs12" then
      generate_isr_hcs12  !isrs !?code;
    elsif target == "ppc" then
      generate_isr_ppc  !isrs !?code;
    elsif target == "v850e" then
      generate_isr_v850e  !isrs !?code;
    elsif target == "h8300h" then
      generate_isr_h8300h  !isrs !?code;
    elsif target == "arm" then
      generate_isr_arm7  !isrs !?code;
    elsif target == "avr" then
      generate_isr_avr  !isrs !?code;
    else 
      error here : "unknown target: ".target;
    end if;
end routine;

routine generate_counter_for_target
  ??@string      target
  ??@counter_map counters
  ?!@string      code
:
  if target == "c166" then
    generate_counter_c166 !counters !?code;
  elsif target == "libpcl" then
    generate_counter_libpcl !counters !?code;
  elsif target == "posix" then
    generate_counter_posix !counters !?code;
	elsif target =="posix_vp2" then
		generate_counter_posix_vp2 !counters !?code;
  elsif target == "hcs12" then
    generate_counter_hcs12 !counters !?code;
  elsif target == "ppc" then
    generate_counter_ppc !counters !?code;
  elsif target == "v850e" then
    generate_counter_v850e !counters !?code;
  elsif target == "h8300h" then
    generate_counter_h8300h !counters !?code;
  elsif target == "arm" then
    generate_counter_arm7 !counters !?code;
  elsif target == "avr" then
    generate_counter_avr !counters !?code;
  else 
    error here : "unknown target: ".target;
  end if;
end routine;

routine generate_counter_specific
  ??@counter_map counters 
  !@string       code
:

  @string target := arch();

  if [option goil_options.posix_it] then
    @counter_by_source cbs [emptySortedList];
    foreach counters do
      cbs += ![[counter source] string] !key !counter;
    end foreach;
    @string prev_src := "";
    @counter_map cnt_set [emptyMap];
    code := "";
    foreach cbs do
      if source != prev_src then
        if [cnt_set count] > 0 then
          @string cnt_set_code;
          retrieveTemplateString ?cnt_set_code !"counter_specific";
          doReplace !?cnt_set_code !"$TICK_FUNC$" !"tpl_tick_";
          doReplace !?cnt_set_code !"$IT_SOURCE$" !source;
          generate_counter_for_target !target !cnt_set !?cnt_set_code;
          code .= cnt_set_code;
          cnt_set := [@counter_map emptyMap];
        end if;
        [!?cnt_set put !name !counter];
      end if;
    end foreach;
    if [cnt_set count] > 0 then
      @string cnt_set_code;
      retrieveTemplateString ?cnt_set_code !"counter_specific";
      doReplace !?cnt_set_code !"$TICK_FUNC$" !"tpl_tick_";
      doReplace !?cnt_set_code !"$IT_SOURCE$" !prev_src;
      generate_counter_for_target !target !cnt_set !?cnt_set_code;
      code .= cnt_set_code;
    end if;
  else
    retrieveTemplateString ?code !"counter_specific";
    doReplace !?code !"$TICK_FUNC$" !"tpl_call_counter_tick";
    doReplace !?code !"$IT_SOURCE$" !"";
    generate_counter_for_target !target !counters !?code;
  end if;

end routine;

end semantics;
# vim:ft=ggs:ts=4:sw=4
