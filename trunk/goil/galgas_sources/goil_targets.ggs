semantics goil_targets :

import semantics goil_target_c166 in "goil_target_c166.ggs" ;
import semantics goil_target_libpcl in "goil_target_libpcl.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;

routine init_targets_prefixes ?!@prefix_map prefix :
    @string target ;
    target ?target ;

    if target == "c166" then
        init_c166_prefixes !?prefix ;
    end if ;
    if target == "libpcl" then
        init_libpcl_prefixes !?prefix ;
    end if ;
end routine ;

#--------------------------------------------------------------------
# Context and Stack generation
#--------------------------------------------------------------------
routine generate_context_and_stack
    ?@lstring name
    ?@oil_obj exe
    ?@prefix_map p
    ?!@string result :

    @string tpl_context_and_stack := "" ;
    @string context_and_stack := "" ;
    @ident_map idents [emptyMap] ;

    @string target ;
    target ?target ;

    extract exe :
    when @task_obj (8* @ident_map ids) ->
        template ?tpl_context_and_stack !"each_task_specific" ;
        context_and_stack := tpl_context_and_stack ;
        idents := ids ;
    when @isr_obj (5* @ident_map ids) ->
        template ?tpl_context_and_stack !"each_isr_specific" ;
        context_and_stack := tpl_context_and_stack ;
        idents := ids ;
    else 
        error name : "Unknown executable object" ;
    end extract ;

    if target == "c166"
    then generate_target_c166 !name !idents !p !exe !?context_and_stack ;
    end if ;
    if target == "libpcl"
    then generate_target_libpcl !name !idents !p !exe !?context_and_stack ;
    end if ;

    result := result . context_and_stack ;
end routine ;

routine generate_isr_specific 
    ??@isr_map isrs 
    ??@prefix_map p
    !@string code
:
    @string target ;
    target ?target ;

    template ?code !"isr_specific" ;

    if target == "c166" then
    	generate_isr_c166 !isrs !p !?code;
    end if ;
    if target == "libpcl" then
    	generate_isr_libpcl !isrs !p !?code;
    end if ;
end routine;

routine generate_counter_specific 
    ??@counter_map counters 
    ??@prefix_map p
    !@string code
:

    @string target ;
    target ?target ;

    template ?code !"counter_specific" ;

    if target == "c166" then
    	generate_counter_c166 !counters !p !?code;
    end if ;
    if target == "libpcl" then
    	generate_counter_libpcl !counters !p !?code;
    end if ;

end routine ;
end semantics ;
# vim:ft=ggs:ts=4:sw=4
