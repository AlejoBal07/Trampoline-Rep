semantics goil_targets :

import semantics goil_target_ppc in "goil_target_ppc.ggs" ;
import semantics goil_target_c166 in "goil_target_c166.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;

routine init_targets_prefixes ?!@prefix_map prefix :
    @string target ;
    target ?target ;

    if target == "ppc" then
        init_ppc_prefixes !?prefix ;
    end if ;
    if target == "c166" then
        init_c166_prefixes !?prefix ;
    end if ;
end routine ;

#--------------------------------------------------------------------
# Context and Stack generation
#--------------------------------------------------------------------
routine generate_context_and_stack
    ?@lstring name
    ?@oil_obj exe
    ?@prefix_map p
    ?!@string result :

    @string tpl_context_and_stack ;
    @string context_and_stack ;
    @ident_map idents [emptyMap] ;

    template ?tpl_context_and_stack !"context_stack" ;

    context_and_stack := tpl_context_and_stack ;

    @string target ;
    target ?target ;

    extract exe :
    when @task_obj (7* @ident_map ids) ->
        idents := ids ;
    when @isr_obj (5* @ident_map ids) ->
        idents := ids ;
    else 
        error name : "Unknown executable object" ;
    end extract ;

    if target == "ppc"
    then generate_target_ppc !name !idents !p !?context_and_stack ;
    end if ;
    if target == "c166"
    then generate_target_c166 !name !idents !p !?context_and_stack ;
    end if ;

    result := result . context_and_stack ;
end routine ;

end semantics ;