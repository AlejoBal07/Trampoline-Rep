semantics goil_types_action :

import semantics goil_basic_types in "goil_basic_types.ggs" ;
import semantics goil_routines in "goil_routines.ggs" ;

abstract class @action_obj {
    @location location ;

    abstract method generate
        ?@prefix_map unused p
        ?@lstring    unused name
        ?@string     unused err
        ?@string     unused key
        ?!@string    unused h_res
        ?!@string    unused i_res ;

    method flag ?!@stringset unused f :
    end method ;
}

class @void_action extends @action_obj {
    override method generate
        ?@prefix_map p
        ?@lstring    unused name
        ?@string     unused err
        ?@string     key
        ?!@string    unused h_res
        ?!@string    i_res :

        @lstring lkey := [@lstring new !key !here] ;
        @string prefix ;
        @string tag_to_rep ;
        [p prefix !lkey ?prefix ?tag_to_rep] ;
        i_res := [i_res stringByReplacingStringByString !tag_to_rep !"NULL_PTR"] ;
    end method ;
}

class @setevent_action extends @action_obj {
    @lstring task_name ;
    @lstring event_name ;

    override method generate
        ?@prefix_map p
        ?@lstring    name
        ?@string     err
        ?@string     key
        ?!@string    unused h_res
        ?!@string    i_res :

        @string res ;
        retrieveTemplateString ?res !"notification_setevent" ;

        performReplace !p !err."notif_name"   ![name string] !?res ;
        performReplace !p !err."notification" ![name string] !?res ;
        performReplace !p !"task" ![task_name string] !?res ;
        performReplace !p !"event" ![event_name string] !?res ;

        performReplace !p !key ![name string] !?i_res ;

        i_res := res."\n".i_res ;
   end method ;
}

class @activatetask_action extends @action_obj {
    @lstring task_name ;

    override method generate
        ?@prefix_map p
        ?@lstring    name
        ?@string     err
        ?@string     key
        ?!@string    unused h_res
        ?!@string    i_res :

        @string res ;
        retrieveTemplateString ?res !"notification_activatetask" ;

        performReplace !p !err."notif_name"   ![name string]      !?res ;
        performReplace !p !err."notification" ![name string]      !?res ;
        performReplace !p !"task"         ![task_name string] !?res ;

        performReplace !p !key ![name string] !?i_res ;

        i_res := res."\n".i_res ;
   end method ;
}

class @callback_action extends @action_obj {
    @lstring function_name ;
    override method generate
        ?@prefix_map p
        ?@lstring    name
        ?@string     err
        ?@string     key
        ?!@string    unused h_res
        ?!@string    i_res :

        @string res ;
        retrieveTemplateString ?res !"notification_activatetask" ;

        performReplace !p !err."notif_name"   ![name string] !?res ;
        performReplace !p !err."notification" ![name string] !?res ;
        performReplace !p !"callback" ![function_name string] !?res ;

        performReplace !p !key ![name string] !?i_res ;

        i_res := res."\n".i_res ;
   end method ;
}

class @flag_action extends @action_obj {
    @lstring flag_name ;
    override method generate
        ?@prefix_map p
        ?@lstring    name
        ?@string     err
        ?@string     key
        ?!@string    unused h_res
        ?!@string    i_res :

        @string res ;
        retrieveTemplateString ?res !"notification_flag" ;

        performReplace !p !err."notif_name"   ![name string] !?res ;
        performReplace !p !err."notification" ![name string] !?res ;
        performReplace !p !"flag_fct" ![flag_name string] !?res ;

        performReplace !p !key ![name string] !?i_res ;

        i_res := res."\n".i_res ;
    end method ;

    override method flag ?!@stringset f :
        f += ![flag_name string] ;
    end method ;
}

class @incrementcounter_action extends @action_obj {
    @lstring counter_name ;
    override method generate
        ?@prefix_map unused p
        ?@lstring    unused name
        ?@string     unused err
        ?@string     unused key
        ?!@string    unused h_res
        ?!@string    unused i_res :

    end method ;
}

end semantics ;
# vim:ft=ggs:ts=4:sw=4
