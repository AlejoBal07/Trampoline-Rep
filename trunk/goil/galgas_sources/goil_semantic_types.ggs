semantics goil_semantic_types :

list @number_list {
    @luint64 number ;
}

abstract class @number_set {}

class @uint_range extends @number_set {
    @luint64 first ;
    @luint64 last ;
}

class @uint_list extends @number_set {
    @number_list numbers ;
}

map @implementationSpec {
    @lstring type ;
}

map @implementation {
    @implementationSpec spec ;
    insert insertSpec error message "%K is duplicated in %L";
}

#action generateHeader
#    ?@lstring version
#    ?@lstring description
#;
#
map @os_imp {
    @lstring type ;
    
}

abstract class @basic_type {}

class @uint_class extends @basic_type {
    @uint64 value ;
}

class @sint_class extends @basic_type {
    @sint64 value ;
}

class @string_class extends @basic_type {
    @string value ;
}

class @bool_class extends @basic_type {
    @bool value ;
}

map @ident_map {
    @basic_type value ;
    insert insertIdent error message "%K is duplicated in %L";
    search searchIdent error message "Identifier %K is not defined" ;
}

abstract class @oil_obj {
    @lstring description ;
	method get_description !@lstring desc :
		desc := description ;
	end method ;
}

#
# Map to store string constants used
# for code generation
#
map @prefix_map {
    @string prefix ;
    @string tag_to_rep ;
    insert insert_prefix error message "prefix %K duplicated %L" ;
    search prefix error message "prefix %K is not defined" ;
}

#
# Task classes
#
abstract class @task_autostart_obj {
}

class @task_autostart_void extends @task_autostart_obj {
}

class @task_autostart_false extends @task_autostart_obj {
}

class @task_autostart_true extends @task_autostart_obj {
	@stringset appmodes ;
}

class @task_obj extends @oil_obj {
    @luint64 priority ;
    @lstring schedule ;
    @luint64 activation ;
    @task_autostart_obj autostart ;
    @stringset resources ;
    @stringset events;
    @ident_map other_fields;

    method get_priority !@uint64 out_priority :
        out_priority := [priority uint64] ;
    end method ;

    method get_activation !@string out_act :
        out_act := [[activation uint64] string] ;
    end method ;

    method get_autostart !@task_autostart_obj out_auto :
        out_auto := autostart ;
    end method ;

    method get_resources !@stringset out_resources :
        out_resources := resources ;
    end method ;

    method get_events !@stringset out_events :
        out_events := events ;
    end method ;

    method get_other_fields !@ident_map out_others :
        out_others := other_fields ;
    end method ;
}

map @task_map {
    @task_obj task ;
    insert insertTask error message "Task %K is already defined in %L" ;
}

map @task_mask {
    @uint64 mask ;
    insert insert_mask error message "Task %K has already its mask" ;
    search get_mask error message "No mask for task %K" ;
}

#
# Resource classes
#

abstract class @resource_property_obj {
}

class @resource_property_standard_obj extends @resource_property_obj {
}

class @resource_property_linked_obj extends @resource_property_obj {
	@lstring linked_resource ;
}

class @resource_property_internal_obj extends @resource_property_obj {
}

class @resource_obj extends @oil_obj {
	@resource_property_obj resource_property ;
	
	method get_property !@resource_property_obj out :
		out := resource_property;
	end method ;
}

map @resource_map {
	@resource_obj resource ;
	insert insertResource error message "Resource %K is already defined in %L" ;
	search getResource error message "Resource %K is not defined" ;
}

map @linked_resources {
	@lstring linked_resource ;
	insert insertLinked error message "Resource %K (%L) is part of a cycle of linked resources" ;
}

#
# Event classes
#
abstract class @event_mask_obj {
}

class @event_mask_user_obj extends @event_mask_obj {
	@luint64 mask ;
}

class @event_mask_auto_obj extends @event_mask_obj {
}

class @event_obj extends @oil_obj {
	@event_mask_obj mask ;

	method get_mask !@event_mask_obj out_mask :
		out_mask := mask ;
	end method ;
}

map @event_map {
    @event_obj event ;
    insert insertEvent error message "Event %K is already defined in %L" ;
    search get_event error message "Event %K is not defined" ;
}

map @event_usage_map {
    @uint count ;
    insert insert_count error message "Key %K is already there" ;
    search get_count error message "Key %K is not there" ;
    remove delete error message "Key %K cannot be deleted" ;
}

list @events {
    @lstring event_name ;
}

map @tasks_for_event {
    @stringset tasks ;
    insert insert_tasks error message "Key %K is already used there";
    search get_tasks error message "Key %K is not there" ;
    remove delete error message "Key %K cannot be deleted" ;
}

#
# Alarm classes
#
abstract class @action_obj {}
abstract class @autostart_obj {}

class @void_action extends @action_obj {
}

class @setevent_action extends @action_obj {
    @lstring task_name ;
    @lstring event_name ;
}

class @activatetask_action extends @action_obj {
    @lstring task_name ;
}

class @callback_action extends @action_obj {
    @lstring function_name ;
}

class @autostart_void extends @autostart_obj {
}

class @autostart_true_params extends @autostart_obj {
    @luint64   alarm_time ;
    @luint64   cycle_time ;
    @stringset app_modes ;
}

class @alarm_obj extends @oil_obj {
    @lstring        counter_name ;
    @action_obj     action_params ;
    @autostart_obj  autostart_params ;

    method get_action !@action_obj out_action :
        out_action := action_params ;
    end method ;

    method get_autostart !@autostart_obj out_autostart :
        out_autostart := autostart_params ;
    end method ;

    method get_counter !@lstring out_counter :
        out_counter := counter_name ;
    end method ;
}

map @alarm_map {
    @alarm_obj  alarm ;
    insert insertAlarm error message "Alarm %K is duplicated in %L";
}

#
# ISR classes
#

class @isr_obj extends @oil_obj {
    @luint64   category ;
    @luint64   priority ;
    @stringset resources ;
    @stringset messages ;
    @ident_map other_fields;

    method get_priority !@uint64 out_priority :
        out_priority := [priority uint64];
    end method ;

    method get_activation !@string out_act :
        out_act := "1" ;
    end method ;

    method get_resources !@stringset out_resources :
        out_resources := resources ;
    end method ;

    method get_other_fields !@ident_map out_others :
        out_others := other_fields ;
    end method ;
}

map @isr_map {
    @isr_obj isr ;
    insert insertISR error message "ISR %K is duplicated in %L" ;
}

#
# Counter classes
#

class @counter_obj extends @oil_obj {
    @luint64 max_allowed_value ;
    @luint64 ticks_per_base ;
    @luint64 min_cycle ;

    method get_ticks_per_base !@string out_tpb :
        out_tpb := [[ticks_per_base uint64] string] ;
    end method ;
}

map @counter_map {
    @counter_obj counter ;
    insert insertCounter error message "Counter %K is duplicated in %L" ;
}

#
# Message classes
#

abstract class @mess_prop_obj {}
abstract class @filter_prop_obj {}
abstract class @link_obj {}

class @void_mess_prop extends @mess_prop_obj {}

class @ssi_mess_prop extends @mess_prop_obj {
    @lstring cdatatype ;
}

class @sse_mess_prop extends @mess_prop_obj {
    @lstring cdatatype ;
    @lstring tranferproperty ;
    @filter_prop_obj filter ;
    @lstring networkordercallout ;
    @lstring cpuordercallout ;
    @luint64 initialvalue ;
    @lstring networkmessage ;
}

class @sde_mess_prop extends @mess_prop_obj {
    @lstring tranferproperty ;
    @lstring networkordercallout ;
    @lstring cpuordercallout ;
    @luint64 initialvalue ;
    @lstring networkmessage ;
}
class @szi_mess_prop extends @mess_prop_obj {}

class @sze_mess_prop extends @mess_prop_obj {
    @lstring networkordercallout ;
    @lstring cpuordercallout ;
    @lstring networkmessage ;
}

class @rzi_mess_prop extends @mess_prop_obj {
    @lstring sendingmessage ;
}

class @rze_mess_prop extends @mess_prop_obj {
    @lstring networkordercallout ;
    @lstring cpuordercallout ;
    @lstring networkmessage ;
}

class @rui_mess_prop extends @mess_prop_obj {
    @lstring sendingmessage ;
    @filter_prop_obj filter ;
    @luint64 initialvalue ;
}

class @rqi_mess_prop extends @mess_prop_obj {
    @lstring sendingmessage ;
    @filter_prop_obj filter ;
    @luint64 initialvalue ;
    @luint64 queuesize ;
}

class @rue_mess_prop extends @mess_prop_obj {
    @lstring cdatatype ;
    @filter_prop_obj filter ;
    @link_obj link ;
    @luint64 initialvalue ;
}

class @rqe_mess_prop extends @mess_prop_obj {
    @lstring cdatatype ;
    @luint64 queuesize ;
    @filter_prop_obj filter ;
    @link_obj link ;
    @luint64 initialvalue ;
}

class @rde_mess_prop extends @mess_prop_obj {
    @link_obj link ;
    @luint64 initialvalue ;
}

class @rzs_mess_prop extends @mess_prop_obj {
    @lstring cdatatype ;
    @luint64 initialvalue ;
}

class @void_filter extends @filter_prop_obj {}
class @always_filter extends @filter_prop_obj {}
class @never_filter extends @filter_prop_obj {}
class @makednewequalsx_filter extends @filter_prop_obj {
    @luint64 mask ;
    @luint64 x ;
}
class @makednewdiffersx_filter extends @filter_prop_obj {
    @luint64 mask ;
    @luint64 x ;
}
class @newisequal_filter extends @filter_prop_obj {}
class @newisdifferent_filter extends @filter_prop_obj {}
class @makednewequalsmaskedold_filter extends @filter_prop_obj {
    @luint64 mask ;
}
class @makednewdiffersmaskedold_filter extends @filter_prop_obj {
    @luint64 mask ;
}
class @newiswithin extends @filter_prop_obj {
    @luint64 min ;
    @luint64 max ;
}
class @newisoutside extends @filter_prop_obj {
    @luint64 min ;
    @luint64 max ;
}
class @newisgreater_filter extends @filter_prop_obj {}
class @newislessorequal_filter extends @filter_prop_obj {}
class @newisless_filter extends @filter_prop_obj {}
class @newisgreaterorequal_filter extends @filter_prop_obj {}
class @oneeveryn_filter extends @filter_prop_obj {
    @luint64 period ;
    @luint64 offset ;
}

#
# Link attribute management
#
class @void_link extends @link_obj {}

class @true_link extends @link_obj {
    @lstring receivemessage ;
}

class @false_link extends @link_obj {}

class @nmcallback_action extends @action_obj {
    @lstring function_name ;
    @luint64 ipdu ;
}


class @message_obj extends @oil_obj {
    @mess_prop_obj messageproperty ;
    @action_obj notification ;
    @action_obj notificationerror ;
    @ident_map other_fields;
}

map @message_map {
    @message_obj mess ;
    insert insert_message error message "Message %K is duplicated in %L" ;
}

end semantics ;
