#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protege par la loi sur la propriete intellectuelle
#
# This software is distributed under the Lesser GNU Public Licence
#
# GOIL parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_syntax("goil_lexique.gLexique"):

import "goil_semantics.gSemantics";
import "com_type.gSemantics";
import "goil_types_app.gSemantics";
import "goil_types_networkmessage.gSemantics";
import "cfg_types.gSemantics";
import "goil_env_verification.gSemantics";
import "config_type.gSemantics";
import "goil_cpu_level_include.gGrammar";
import "goil_file_level_include.gGrammar";

nonterminal <start>;
nonterminal <file>
  ?!@implementation imp
  ?!@root_obj cpu
label check_appli_exist
  ?!@root_obj cpu_check 
  !@bool appli_exist
;
nonterminal <OIL_version> !@lstring version !@lstring desc
;
nonterminal <description> !@lstring desc
;

nonterminal <application_definition>
  ?!@root_obj file
label check_appli_exist
  ?!@root_obj file_check
  !@bool appli_exist
;
nonterminal <object_definition_list>
    ?!@os_obj            os
    ?!@com               com
    ?!@task_map          tasks
    ?!@counter_map       counters
    ?!@alarm_map         alarms
    ?!@resource_map      resources
    ?!@event_map         events
    ?!@isr_map           isrs
    ?!@message_map       messages
    ?!@netmess_map       net_messages
    ?!@scheduletable_map scheduletables
    ?!@app_map           applis
label check_appli_exist
    ?!@app_map           applis_check
    !@bool appli_exist
;
nonterminal <nm>
;

nonterminal <boolean> !@lbool val 
;
nonterminal <free_field> ?!@ident_map ids 
;
nonterminal <include_file_level>
    ?!@implementation imp
    ?!@root_obj cpu
;
nonterminal <include_cpu_level>
    ?!@os_obj            os
    ?!@com               com
    ?!@task_map          tasks
    ?!@counter_map       counters
    ?!@alarm_map         alarms
    ?!@resource_map      resources
    ?!@event_map         events
    ?!@isr_map           isrs
    ?!@message_map       messages
    ?!@netmess_map       net_messages
    ?!@scheduletable_map scheduletables
    ?!@app_map           applis
;

#--------------------------------------------------------------------
# extern nonterminals
#--------------------------------------------------------------------
nonterminal <implementation_definition> ?!@implementation imp
;

nonterminal <os>
    ?!@os_obj os
;

nonterminal <appmode>
;
nonterminal <task> 
    ?!@task_map outTask
;

nonterminal <counter>
    ?!@counter_map counters
;

nonterminal <alarm>
    ?!@alarm_map alarms
;

nonterminal <resource>
    ?!@resource_map resources
;

nonterminal <event> 
    ?!@event_map events
;

nonterminal <isr>
    ?!@isr_map isrs
;

nonterminal <mess>
    ?!@message_map messages
;

nonterminal <scheduletable>
    ?!@scheduletable_map stm
;

nonterminal <appli>
    ?!@app_map applis
label check_appli_exist
    ?!@app_map applis_check
    !@bool appli_exist
;

nonterminal <networkmess>
  ?!@netmess_map netmess
;

nonterminal <com>
  ?!@com com
;

nonterminal <ipdu>
;

#
# root
#

rule <start>:
  parse do
    @void     void_obj_check := [@void new !here];
    @root_obj cpu_check := void_root_obj[];
    @bool appli_exist := false;
    
    <file> check_appli_exist !?cpu_check ?appli_exist;
    
  rewind
    @implementation imp [emptyMap];
    @void     void_obj := [@void new !here];
    @root_obj cpu := void_root_obj[];
   
    # includes a config.oil file if it exists
    @string oilConfigFile := templateFilePath[!"config" !"config.oil"];
    if oilConfigFile != "" then
      grammar goil_file_level_include in lstringWith[!oilConfigFile] !?imp !?cpu;

      #check if applications exist in oil file and import config_applications.oil (applications of the config.oil objects import previously)
      if appli_exist == true then
        @string oilConfigApplicationsFile := templateFilePath[!"config" !"config_applications.oil"];
        grammar goil_file_level_include in lstringWith[!oilConfigApplicationsFile] !?imp !?cpu;
      end if;
            
   end if;

    <file> !?imp !?cpu;

    # log imp;
    #
    # semantics constraint checking
    #
    # per object static verification

#    @os_obj            os             := [cpu os];
#    @com               com            := [cpu com];
#    @task_map          tasks          := [cpu tasks];
#    @counter_map       counters       := [cpu counters];
#    @alarm_map         alarms         := [cpu alarms];
#    @resource_map      resources      := [cpu resources];
#    @event_map         events         := [cpu events];
#    @isr_map           isrs           := [cpu isrs];
#    @message_map       messages       := [cpu messages];
#    @netmess_map       net_messages   := [cpu net_messages];
#    @scheduletable_map scheduletables := [cpu scheduletables];
#    @app_map           applis         := [cpu applis];
  end parse ;

    set_defaults !imp !?cpu;
    @string trampoline_base_path := [[[cpu os] tpl_base_path] string];
    check_target !trampoline_base_path;
    verify_all !?cpu;
#    generate_all !cpu;

    if [@uint errorCount] == 0 then
      generate_all !cpu;
    end if;

end rule;

rule <file>
    ?!@implementation imp
    ?!@root_obj cpu
:
    @lstring version := [@lstring new !"" !here];
    @lstring desc := [@lstring new !"" !here];
    repeat
    while
        <include_file_level> !?imp !?cpu;
    while
        <OIL_version> ?version ?desc;
    while
        <implementation_definition> !?imp;
    while
        <application_definition> !?cpu;
    end repeat;
label check_appli_exist
    ?!@root_obj cpu_check
    !@bool appli_exist
:
    @bool appli_exist_temp := false;
    
    repeat
    while
        <include_file_level> parse ;
    while
        <OIL_version> parse ;
    while
        <implementation_definition> parse ;
    while
        <application_definition> check_appli_exist !?cpu_check ?appli_exist_temp;
    end repeat;
    appli_exist := appli_exist_temp;
    
end rule;

#
# Description of an OIL declaration
#
rule <description> !@lstring desc:
    select
        desc := [@lstring new !"" !here];
    or
        $:$;
        $string$ ?desc;
    end select;
end rule;

#
# OIL version appears at the beginning of OIL files
#
rule <OIL_version> !@lstring version !@lstring desc:
    $OIL_VERSION$;
    $=$;
    $string$ ?version;
    <description> ?desc;
    $;$;
end rule;

#--------------------------------------------------------------------
# Application definition part
#--------------------------------------------------------------------
rule <application_definition>
    ?!@root_obj file
:
    @os_obj            os              := [file os];
    @com               com             := [file com];
    @task_map          tasks           := [file tasks];
    @counter_map       counters        := [file counters];
    @alarm_map         alarms          := [file alarms];
    @resource_map      resources       := [file resources];
    @event_map         events          := [file events];
    @isr_map           isrs            := [file isrs];
    @message_map       messages        := [file messages];
    @netmess_map       net_messages    := [file net_messages];
    @scheduletable_map scheduletables  := [file scheduletables];
    @app_map           applis          := [file applis];

    $CPU$;
    $idf$ ?@lstring cpuName;
    ${$;
    <object_definition_list>
        !?os
        !?com
        !?tasks
        !?counters
        !?alarms
        !?resources
        !?events
        !?isrs
        !?messages
        !?net_messages
        !?scheduletables
        !?applis
   ;
    $}$;
    <description> ?*;
    $;$;

    file := [@root_obj new
        !cpuName
        !os
        !com
        !tasks
        !counters
        !alarms
        !resources
        !events
        !isrs
        !messages
        !net_messages
        !scheduletables
        !applis
    ];

label check_appli_exist
    ?!@root_obj file_check
    !@bool appli_exist
:
    @os_obj            os              := [file_check os];
    @com               com             := [file_check com];
    @task_map          tasks           := [file_check tasks];
    @counter_map       counters        := [file_check counters];
    @alarm_map         alarms          := [file_check alarms];
    @resource_map      resources       := [file_check resources];
    @event_map         events          := [file_check events];
    @isr_map           isrs            := [file_check isrs];
    @message_map       messages        := [file_check messages];
    @netmess_map       net_messages    := [file_check net_messages];
    @scheduletable_map scheduletables  := [file_check scheduletables];
    @app_map           applis          := [file_check applis];
    
    $CPU$;
    $idf$ ?@lstring cpuName;
    ${$;
    <object_definition_list> check_appli_exist !?applis ?appli_exist;
    $}$;
    <description> ?*;
    $;$;

    file_check := [@root_obj new
        !cpuName
        !os
        !com
        !tasks
        !counters
        !alarms
        !resources
        !events
        !isrs
        !messages
        !net_messages
        !scheduletables
        !applis
    ];

end rule;

rule <object_definition_list>
    ?!@os_obj            os
    ?!@com               com
    ?!@task_map          tasks
    ?!@counter_map       counters
    ?!@alarm_map         alarms
    ?!@resource_map      resources
    ?!@event_map         events
    ?!@isr_map           isrs
    ?!@message_map       messages
    ?!@netmess_map       net_messages
    ?!@scheduletable_map scheduletables
    ?!@app_map           applis
:

   repeat
    while <os> !?os;
    while <appmode>; <description> ?*;
    while <task> !?tasks;
    while <counter> !?counters;
    while <alarm> !?alarms; <description> ?*;
    while <resource> !?resources; <description> ?*;
    while <event> !?events; <description> ?*;
    while <isr> !?isrs; <description> ?*;
    while <mess> !?messages; <description> ?*;
    while <networkmess> !?net_messages; <description> ?*;
    while <com> !?com; <description> ?*;
    while <ipdu>; <description> ?*;
    while <nm>; <description> ?*;
    while <scheduletable> !?scheduletables; <description> ?*;
    while <appli> !?applis; <description> ?*;
    while <include_cpu_level>
        !?os
        !?com
        !?tasks
        !?counters
        !?alarms
        !?resources
        !?events
        !?isrs
        !?messages
        !?net_messages
        !?scheduletables
        !?applis
   ;
    end repeat;

label check_appli_exist
    ?!@app_map           applis_check
    !@bool appli_exist
:
   @bool appli_exist_temp := false;

   repeat
    while <os> parse;
    while <appmode> parse; <description> parse;
    while <task> parse;
    while <counter> parse;
    while <alarm> parse; <description> parse;
    while <resource> parse; <description> parse;
    while <event> parse; <description> parse;
    while <isr> parse; <description> parse;
    while <mess> parse; <description> parse;
    while <networkmess> parse; <description> parse;
    while <com> parse; <description> parse;
    while <ipdu> parse; <description> parse;
    while <nm> parse; <description> parse;
    while <scheduletable> parse; <description> parse;
    while <appli> check_appli_exist !?applis_check ?appli_exist_temp; <description> parse;
    while <include_cpu_level> parse;
   end repeat;
   appli_exist := appli_exist_temp;
    
end rule;

rule <nm>:
   $NM$;
   $idf$ ?*;
   ${$;
   $}$;
   $;$;
end rule;

#--------------------------------------------------------------------
# Miscellaneous non terminals
#--------------------------------------------------------------------
rule <boolean> !@lbool val:
    select
        $TRUE$;
        val := [@lbool new !true !here];
    or
        $FALSE$;
        val := [@lbool new !false !here];
    end select;
end rule;

rule <free_field> ?!@ident_map ids:
    @lstring idf;
    @basic_type val;
    $idf$ ?idf;
    $=$;
    select
        @lstring value;
        $idf$ ?value;
        val := [@string_class new  ![value location] ![value string]];
    or
        @luint64 value;
        $uint_number$ ?value;
        val := [@uint64_class new  ![value location] ![value uint64]];
    or
        @lbool value;
        <boolean> ?value;
        val := [@bool_class new ![idf location] ![value bool]];
    end select;
#    log idf;
#    log val;
    [!?ids put !idf !val]; 
end rule;

rule <include_file_level>
    ?!@implementation imp
    ?!@root_obj cpu
:
    $include$;
    @lstring file_name;
    select
        $g_string$ ?file_name;
        file_in_path !?file_name;
#        message [file_name string]."\n";
    or
        $string$ ?file_name;
    end select;
    grammar goil_file_level_include in file_name
        !?imp
        !?cpu
   ;
end rule;

rule <include_cpu_level>
    ?!@os_obj            os
    ?!@com               com
    ?!@task_map          tasks
    ?!@counter_map       counters
    ?!@alarm_map         alarms
    ?!@resource_map      resources
    ?!@event_map         events
    ?!@isr_map           isrs
    ?!@message_map       messages
    ?!@netmess_map       net_messages
    ?!@scheduletable_map scheduletables
    ?!@app_map           applis
:
    $include$;
    @lstring file_name;
    select
        $g_string$ ?file_name;
        file_in_path !?file_name;
    or
        $string$ ?file_name;
    end select;
    grammar goil_cpu_level_include in file_name
        !?os
        !?com
        !?tasks
        !?counters
        !?alarms
        !?resources
        !?events
        !?isrs
        !?messages
        !?net_messages
        !?scheduletables
        !?applis
   ;
end rule;

end syntax;
# vim:ft=ggs:ts=4:sw=4
