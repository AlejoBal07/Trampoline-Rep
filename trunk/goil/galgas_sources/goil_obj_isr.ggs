#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protégé par la loi sur la propriété intellectuelle
#
# This software is distributed under the Lesser GNU Public Licence
#
# GOIL isr object parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_isr :

import lexique goil_lexique in "goil_lexique.ggs" ;
import option goil_options in "goil_options.ggs" ;
import semantics goil_semantics in "goil_semantics.ggs" ;

#
# local nonterminals declaration
#
nonterminal <isr>
    ?!@isr_map isrs ;

nonterminal <isr_attributes>
    ?!@basic_type category
    ?!@basic_type priority
    ?!@stringset  resources
    ?!@stringset  messages
    ?!@ident_map  other_fields ;

#
# external nonterminals
#
nonterminal <description>
    !@lstring desc ;

nonterminal <free_field> ?!@ident_map ids ;

#
# isr rules implementation
#
rule <isr>
    ?!@isr_map isrs :

    @lstring isr_name ;
    @isr_obj isr ;
    @basic_type category ;
    @basic_type priority ;
    @lstring desc ;
    @stringset resources ;
    @stringset messages ;
    @ident_map other_fields ;

    $ISR$ ;
    $idf$ ?isr_name ;
    if [isrs hasKey ![isr_name string]] then
        [!?isrs del !isr_name ?isr] ;
        category := [isr category] ;
        priority := [isr priority] ;
        desc := [isr desc] ;
        resources := [isr resources] ;
        messages := [isr messages] ;
        other_fields := [isr other_fields] ;
    else # isr must also be written in this branch to comply with galgas static verification policy
        category := [@void new !here] ;
        priority := [@void new !here] ;
        desc := [@lstring new !"" !here] ;
        resources := [@stringset emptySet] ;
        messages := [@stringset emptySet] ;
        other_fields := [@ident_map emptyMap] ;
        isr := [@isr_obj new !desc !category !priority !resources !messages !other_fields] ;
    end if ;
    ${$ ;
    <isr_attributes> !?category !?priority !?resources !?messages !?other_fields;
    $}$ ;
    <description> ?desc ;
    $;$ ;

    isr := [@isr_obj new !desc !category !priority !resources !messages !other_fields] ;
    [!?isrs put !isr_name !isr] ;
end rule ;

rule <isr_attributes>
    ?!@basic_type   category
    ?!@basic_type   priority
    ?!@stringset resources
    ?!@stringset messages
    ?!@ident_map other_fields
:

    repeat
    while
        @luint64 cat ;
        $CATEGORY$ ; $=$ ; $uint_number$ ?cat ; <description> ?* ; $;$ ;
        extract category :
        when @uint_class(@location l @uint64 i) ->
            error here : "ISR category attribute already defined for this ISR" ;
            error l : "was previously defined here" ;
        else
        end extract ;
        if ([cat uint64] != 1L) & ([cat uint64] != 2L) then
            error here : "ISR category should be 1 ou 2" ;
        end if ;
        category := [@uint_class new !here ![cat uint64]] ;
    while
        @luint64 prio ;
        $PRIORITY$ ; $=$ ; $uint_number$ ?prio ; <description> ?* ; $;$ ;
        extract priority :
        when @uint_class(@location l @uint64 i) ->
            error here : "PRIORITY already defined for this ISR" ;
            error l : "was previouly defined here" ;
        else
        end extract ;
        priority := [@uint_class new !here ![prio uint64]] ;
    while
        @lstring rez ;
        $RESOURCE$ ; $=$ ; $idf$ ?rez ; <description> ?* ; $;$ ;
        resources += ![rez string] ;
    while
        @lstring mess ;
        $MESSAGE$ ; $=$ ; $idf$ ?mess ; <description> ?* ; $;$ ;
        messages += ![mess string] ;
    while
        <free_field> !?other_fields ; <description> ?* ; $;$ ;
    end repeat ;
end rule ;

end syntax ;
# vim:ft=ggs:ts=4:sw=4
