#
# @file goil_types_os.ggs
#
# @section File description
#
# Semantic types for os object.
#
# @section Copyright
#
# Goil OIL compiler for Trampoline
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protege par la loi sur la propriete intellectuelle
#
# This software is distributed under the GNU Public Licence v2
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics goil_types_os :

import semantics goil_basic_types in "goil_basic_types.ggs";

abstract class @trace_method {
  @location loc;
  abstract method generate_c !@string res;
}

class @trace_void extends @trace_method {
  override method generate_c !@string res :
    res := "#error \"TRACE_METHOD is not defined\"\n";
  end method;
}

class @trace_file extends @trace_method {
  @lstring name;
  override method generate_c !@string res :
    res := "#define    TRACE_FILE             \"".[name string]."\"\n";
  end method;
}

class @trace {
  @location loc;
  method generate_c !@string res :
    res := "#define    WITH_TRACE             NO\n";
  end method;
  method generate_make !@string res :
    res := "WITH_TRACE=false\n";
  end method;
}

class @trace_off extends @trace {
  override method generate_c !@string res :
    res := "#define    WITH_TRACE             NO\n";
  end method;
  override method generate_make !@string res :
    res := "WITH_TRACE=false\n";
  end method;
}

class @trace_on extends @trace {
  @lstring      form;
  @trace_method meth;
  @basic_type   trace_task;
  @basic_type   trace_isr;
  @basic_type   trace_resource;
  @basic_type   trace_alarm;
  @basic_type   trace_user_event;
  @basic_type   desc;
  override method generate_c !@string res :
    res := "#define    WITH_TRACE             YES\n";
    res .= bool_class_define(!"TRACE_TASK" !trace_task !true);
    res .= bool_class_define(!"TRACE_ISR" !trace_isr !true);
    res .= bool_class_define(!"TRACE_RES" !trace_resource !true);
    res .= bool_class_define(!"TRACE_ALARM" !trace_alarm !true);
    res .= bool_class_define(!"TRACE_U_EVENT" !trace_user_event !true);
    res .= "#define    TRACE_FORMAT()         tpl_trace_format_".[form string]."();\n";
    @string m;
    [meth generate_c ?m];
    res .= m;
  end method;
  override method generate_make !@string res :
    res := "WITH_TRACE=true\n";
  end method;
}

#
# set_method sets it first argument as the second one
# if it is unset (ie @void). Otherwise
# it outputs an error.
#
# @param  t     The method to set
# @param  s     The method used as source
# @param  att   The name of the attribute.
#               Used in the error message
#
routine set_method
  ?!@trace_method t
  ?@trace_method  s
  ?@string        att
:
  cast t :
  when == @trace_void do
    t := s;
  else
    error [s loc] : "Redefinition of ".att;
    error [t loc] : "was defined here";
  end cast;
end routine;

class @os_obj extends @oil_obj {
  @lstring     status             feature setter;
  @basic_type  startuphook        feature setter;
  @basic_type  shutdownhook       feature setter;
  @basic_type  errorhook          feature setter;
  @basic_type  pretaskhook        feature setter;
  @basic_type  posttaskhook       feature setter;
  @basic_type  protectionhook     feature setter; # AUTOSAR
  @lstring     scalabilityclass   feature setter; # AUTOSAR
  @basic_type  stackmonitoring    feature setter; # AUTOSAR
  @basic_type  usegetserviceid    feature setter;
  @basic_type  useparameteraccess feature setter;
  @basic_type  useresscheduler    feature setter;
  @basic_type  systemcall         feature setter;
  @lstringlist app_src            feature setter;
  @lstringlist cflags             feature setter;
  @lstringlist asflags            feature setter;
  @lstringlist ldflags            feature setter;
  @lstring     app_name           feature setter;
  @lstring     tpl_base_path      feature setter;
  @trace       trace              feature setter;
  @ident_map   others             feature setter;
}

function void_os_obj
  ->@os_obj os
:
  @void    void_obj := [@void new !here];
  @lstring emptyString := [@lstring new !"" !here];
  os := [@os_obj new
    !emptyString
    !emptyString
    !void_obj
    !void_obj
    !void_obj
    !void_obj
    !void_obj
    !void_obj
    !emptyString
    !void_obj
    !void_obj
    !void_obj
    !void_obj
    !void_obj
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    ![@lstringlist emptyList]
    !emptyString
    !emptyString
    ![@trace new !here]
    ![@ident_map emptyMap]
  ];
end function;

end semantics;