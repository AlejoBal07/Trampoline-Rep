semantics goil_code_msg_gen :

import semantics goil_routines in "goil_routines.ggs" ;
import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_targets in "goil_targets.ggs" ;

#--------------------------------------------------------------------
# Messages generation
#--------------------------------------------------------------------
routine generate_messages
    ?@message_map    messages
    ?@prefix_map     p
    ?!@string unused header
    ?!@string unused implementation :

    @string h_res := "" ;
    @string i_res := "" ;

    #
    # first, build a map of destination message list keyed by
    # source message list.
    #
    @message_map mm := messages ;
    @ident_list_map dests [emptyMap] ;
    
    foreach mm (@lstring name @message_obj mess) :
        @mess_prop_obj mp := [mess messageproperty] ;
        @lstring src ;
        [mp s_mess ?src] ;

        if ([src string] != "") & (not [dests hasKey ![src string]]) then
           @ident_list dest_list [emptyList] ;
           foreach mm (@lstring same_name @message_obj same_mess) :
                @mess_prop_obj same_mp := [same_mess messageproperty] ;
                @lstring same_src ;
                [same_mp s_mess ?same_src] ;
                if [same_src string] == [src string] then
                    dest_list += !same_name;
                end if ;
            end foreach ;
            [!?dests add !src !dest_list] ;
        end if ;
    end foreach ;

#    foreach dests (@lstring src @ident_list d_mess) :
##        message [src string].": " ;
#        foreach d_mess (@lstring dst) :
#            message "[".[dst string]."] ";
#        end foreach ;
##        message "\n" ;
#    end foreach ;

    foreach messages (@lstring name @message_obj mess) :
       @mess_prop_obj mp := [mess messageproperty] ;
       [mp generate !p !name !mess !messages !dests ?h_res ?i_res] ;
#       message i_res ;
    end foreach ;

end routine ;

end semantics ;