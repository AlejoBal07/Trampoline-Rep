semantics goil_code_msg_gen :

import semantics goil_routines in "goil_routines.ggs" ;
import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_targets in "goil_targets.ggs" ;

routine init_msg_prefixes ?!@prefix_map p :
    [!?p insert_prefix ![@lstring new !"msg_name" !here] !"" !"$MESSAGE_NAME$"] ;
    [!?p insert_prefix ![@lstring new !"msg" !here] !"message_object_of" !"$MESSAGE$"] ;
    [!?p insert_prefix ![@lstring new !"target" !here] !"message_object_of" !"$TARGET$"] ;
end routine ;

routine generate_ssi
    ?@lstring name
    ?@message_obj unused mess
    ?@prefix_map p
    !@string h_res
    !@string i_res :

    @string tpl_msg ;
    template ?tpl_msg !"message_ssi" ;

    h_res := "" ;
    i_res := tpl_msg ;

    replace !p !"msg_name" ![name string] !?i_res ;
end routine ;

#--------------------------------------------------------------------
# Messages generation
#--------------------------------------------------------------------
routine generate_messages
    ?@message_map messages
    ?!@string unused header
    ?!@string unused implementation :

    @string h_res := "" ;
    @string i_res := "" ;
    @prefix_map p [emptyMap] ;

    init_msg_prefixes !?p ;

    #
    # first, build a map of destination message list keyed by
    # source message list.
    #
#    @message_map mm := messages ;
#   foreach mm (@lstring name @message_obj mess) :
#        @mess_prop_obj mp := [mess messageproperty] ;
#        @string src := "" ;
#        extract mp :
#        when @rzi_mess_prop (@lstring sender) -> src := [sender string] ;
#        when @rui_mess_prop (@lstring sender ...) -> src := [sender string] ;
#        when @rqi_mess_prop (@lstring sender ...) -> src := [sender string] ;
#        else end extract ;
#
#        if not [dests hasKey !src] then
#            @stringset_map dests [emptyMap] ;
#            foreach mm (@lstring same_name @message_obj same_mess) :
#                @mess_prop_obj same_mp := [same_mess messageproperty] ;
#                @string same_src := "" ;
#                extract mp :
#                when @rzi_mess_prop (@lstring sender) -> same_src := [sender string] ;
#                when @rui_mess_prop (@lstring sender ...) -> same_src := [sender string] ;
#                when @rqi_mess_prop (@lstring sender ...) -> same_src := [sender string] ;
#                else end extract ;
#                if src == same_src then
#                    
#                end if ;
#            end foreach ;
#        end if ;
#    end foreach ;

    foreach messages (@lstring name @message_obj mess) :
       @mess_prop_obj mp := [mess messageproperty] ;
       extract mp :
       when @ssi_mess_prop (...) -> generate_ssi !name !mess !p ?h_res ?i_res ;
       else
       end extract ;
    end foreach ;

end routine ;

end semantics ;