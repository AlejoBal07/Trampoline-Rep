semantics goil_app_verif :

#import semantics goil_semantics in "goil_semantics.ggs" ;
import semantics goil_types_root     in "goil_types_root.ggs";

#import semantics goil_types_app in "goil_types_app.ggs" ;
#import semantics goil_types_task in "goil_types_task.ggs" ;
#import semantics goil_types_scheduletable in "goil_types_scheduletable.ggs" ;

routine object_exists
  ?@stringset   def
  ?@lstringlist ref
  ?@string      obj_type
:
  foreach ref (@lstring s) do
    if not [def hasKey ![s string]] then
      error s : obj_type." ".[s string]." referenced does not exist" ;
    end if ;
  end foreach ;
end routine ;

routine object_in_one
  ?!@lstringlist objects
  ?@lstring      sName
  ?@string       kind
:
  @bool not_found := true ;
  foreach objects (@lstring name) do
#    message [name string]."\n" ;
    if [name string] == [sName string] then
      not_found := false ;
      error sName : kind." ".[sName string]." is already part of an OS Application" ;
      error name : "It has been declared here" ;
    end if ;
  end foreach ;

  if not_found then
    objects += !sName ;
  end if ;
end routine ;

routine object_not_in_any
  ?@lstringlist objs
  ?@stringset   app_objs
  ?@string      obj_kind
:
  foreach objs (@lstring lname) do
    @string name := [lname string] ;
    if not [app_objs hasKey !name] then
      error lname : obj_kind." ".name." does not belong to any OS Application" ;
    end if ;
  end foreach ;
end routine ;

routine apps_well_formed
  ??@root_obj cpu
#  ?@app_map           apps
#  ?@task_map          tasks
#  ?@isr_map           isrs
#  ?@alarm_map         alarms
#  ?@scheduletable_map schedtables
#  ?@counter_map       counters
#  ?@resource_map      resources
#  ?@message_map       messages
:
  @app_map           apps        := [cpu applis];
  @task_map          tasks       := [cpu tasks];
  @isr_map           isrs        := [cpu isrs];
  @alarm_map         alarms      := [cpu alarms];
  @scheduletable_map schedtables := [cpu scheduletables];
  @counter_map       counters    := [cpu counters];
  @resource_map      resources   := [cpu resources];
  @message_map       messages    := [cpu messages];

  if [apps count] > 0 then
    # Verify the objects referenced from an application exists
    foreach apps do
      object_exists ![tasks allKeys] ![[app tasks] keyList] !"Task" ;
      object_exists ![isrs allKeys] ![[app isrs] keyList] !"ISR" ;
      object_exists ![alarms allKeys] ![[app alarms] keyList] !"Alarm" ;
      object_exists ![schedtables allKeys] ![[app schedtables] keyList] !"Schedule Table" ;
      object_exists ![counters allKeys] ![[app counters] keyList] !"Counter" ;
      object_exists ![resources allKeys] ![[app resources] keyList] !"Resource" ;
#    object_exists ![messages allKeys] ![[app messages] allKeys] !"Message" !key ;
    end foreach ;

    # verify accessing applications of each object exist
    @stringset all_apps := [apps allKeys] ;
    foreach tasks do
      object_exists !all_apps ![task acc_apps] !"Application" ;
    end foreach ;
    foreach isrs do
      object_exists !all_apps ![isr acc_apps] !"Application" ;
    end foreach ;
    foreach alarms do
      object_exists !all_apps ![alarm acc_apps] !"Application" ;
    end foreach ;
    foreach schedtables do
      object_exists !all_apps ![st acc_apps] !"Application" ;
    end foreach ;
    foreach counters do
      object_exists !all_apps ![counter acc_apps] !"Application" ;
    end foreach ;
    foreach resources do
      object_exists !all_apps ![resource acc_apps] !"Application" ;
    end foreach ;
    foreach messages do
      object_exists !all_apps ![mess acc_apps] !"Application" ;
    end foreach ;

    # verify objects are not in 2 OS Applications
    @lstringlist objects [emptyList] ;
    foreach apps do
      foreach [app tasks] do object_in_one !?objects !key !"TASK" ; end foreach ;
      foreach [app isrs] do object_in_one !?objects !key !"ISR" ; end foreach ;
      foreach [app alarms] do object_in_one !?objects !key !"ALARM" ; end foreach ;
      foreach [app schedtables] do object_in_one !?objects !key !"SCHEDULETABLE" ; end foreach ;
      foreach [app counters] do object_in_one !?objects !key !"COUNTER" ; end foreach ;
      foreach [app resources] do object_in_one !?objects !key !"RESOURCE" ; end foreach ;
    end foreach ;

    # verify all objects are in an OS Application
    # Build a big stringset of all objects referenced in
    # OS Applications.
    @stringset all_tasks_in_app  [emptySet] ;
    @stringset all_isrs_in_app   [emptySet] ;
    @stringset all_alarms_in_app [emptySet] ;
    @stringset all_sts_in_app    [emptySet] ;
    @stringset all_cnts_in_app   [emptySet] ;
    @stringset all_rezs_in_app   [emptySet] ;
    foreach apps do
      all_tasks_in_app  := all_tasks_in_app  | [[app tasks]       allKeys] ;
      all_isrs_in_app   := all_isrs_in_app   | [[app isrs]        allKeys] ;
      all_alarms_in_app := all_alarms_in_app | [[app alarms]      allKeys] ;
      all_sts_in_app    := all_sts_in_app    | [[app schedtables] allKeys] ;
      all_cnts_in_app   := all_cnts_in_app   | [[app counters]    allKeys] ;
      all_rezs_in_app   := all_rezs_in_app   | [[app resources]   allKeys] ;
    end foreach ;

    # tasks
    object_not_in_any ![tasks keyList]       !all_tasks_in_app  !"TASK" ;
    # isrs
    object_not_in_any ![isrs keyList]        !all_isrs_in_app   !"ISR" ;
    # alarms
    object_not_in_any ![alarms keyList]      !all_alarms_in_app !"ALARM" ;
    # schedule tables
    object_not_in_any ![schedtables keyList] !all_sts_in_app    !"SCHEDULETABLE" ;
    # counters
    object_not_in_any ![counters keyList]    !all_cnts_in_app   !"COUNTER" ;
    # resources
    object_not_in_any ![resources keyList]   !all_rezs_in_app   !"RESOURCE" ;
  end if ;
end routine ;

end semantics ;