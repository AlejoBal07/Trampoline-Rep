#
# GOIL oil parser
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline is protected by
# the french law on intellectuel property
#
# This software is distributed under the GNU Public Licence
#
# GOIL parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_imp_def :

import lexique goil_lexique in "goil_lexique.ggs" ;
import option goil_options in "goil_options.ggs" ;
import semantics goil_semantics in "goil_semantics.ggs" ;

#
# Local rules declarations
#
nonterminal <implementation_definition> ?!@implementation imp ;
nonterminal <implementation_spec_list> ?!@implementation imp ;
nonterminal <implementation_spec> ?!@implementation imp ;
nonterminal <implementation_list>
    ?@string          obj_kind
    ?!@implementation imp
;
nonterminal <impl_attr_def>
    ?@string          obj_kind
    ?!@implementation imp
;
nonterminal <auto_specifier> !@bool auto ;
nonterminal <number_range_or_nil> !@bool has_range !@number_set set ;
nonterminal <number_range> !@number_set set ;
nonterminal <attribute_name> !@lstring name ;
nonterminal <multiple_specifier> !@bool multiple ;
nonterminal <default_number> !@bool has_default !@luint64 default_number ;
nonterminal <default_name> !@bool has_default !@lstring default_name ;
nonterminal <enumeration> ;
nonterminal <enumerator> ;
nonterminal <impl_parameter_list> ;
nonterminal <implementation_def> ;

#
# External rules
#
nonterminal <description> !@lstring desc ;

#
# implementation definition is the part of OIL files
# that specify the data size used for various types
# as well as default values
#
rule <implementation_definition>
    ?!@implementation imp
:
    @lstring imp_name ;
    $IMPLEMENTATION$ ;
    $idf$ ?imp_name ;
    ${$ ;
    <implementation_spec_list> !?imp ;
    $}$ ;
    <description> ?* ;
    $;$ ;
end rule ;

rule <implementation_spec_list> ?!@implementation imp :
    repeat
    while <implementation_spec> !?imp ;
    end repeat ;
end rule ;

rule <implementation_spec>
    ?!@implementation imp
:
    select  $OS$ ;       <implementation_list> !"os"       !?imp ;
        or  $TASK$ ;     <implementation_list> !"task"     !?imp ;
        or  $COUNTER$ ;  <implementation_list> !"counter"  !?imp ;
        or  $ALARM$ ;    <implementation_list> !"alarm"    !?imp ;
        or  $RESOURCE$ ; <implementation_list> !"resource" !?imp ;
        or  $EVENT$ ;    <implementation_list> !"event"    !?imp ;
        or  $ISR$ ;      <implementation_list> !"isr"      !?imp ;
        or  $MESSAGE$ ;  <implementation_list> !"message"  !?imp ;
        or  $COM$ ;      <implementation_list> !"com"      !?imp ;
        or  $NM$ ;       <implementation_list> !"nm"       !?imp ;
        or  $APPMODE$ ;  <implementation_list> !"appmode"  !?imp ;
        or  $IPDU$ ;     <implementation_list> !"ipdu"     !?imp ;
    end select ;
    <description> ?* ;
    $;$ ;
end rule ;

rule <implementation_list>
    ?@string          obj_kind
    ?!@implementation imp
:
    ${$ ;
    repeat
    while
        <impl_attr_def> !obj_kind !?imp ;
        $;$ ;
    end repeat ;
    $}$ ;
end rule ;

rule <impl_attr_def>
    ?@string          obj_kind
    ?!@implementation imp
:
    @bool       auto ;
    @number_set set ;
    @bool       has_set ;
    @lstring    attr_name ;
    @bool       multiple ;
    @luint64    default_number;
    @bool       has_default ;

    select  $UINT32$ ?type ;
        or  $INT32$  ?type ;
        or  $UINT64$ ?type ;
        or  $INT64$  ?type ;
    end select ;
    <auto_specifier> ?auto ;
    <number_range_or_nil> ?has_range ?range ;
    <attribute_name> ?attr_name ;
    <multiple_specifier> ?multiple ;
    <default_number> ?has_default ?default_number ;
end rule ;

rule <impl_attr_def> ?!@implementationSpec unused spec :
    @lstring type ;    
    @bool auto ;
    $FLOAT$ ?type ;
    <auto_specifier> ?auto ;
#    <float_range> ?range ;
#    <attribute_name> ?name ;
#    <multiple_specifier> ?multiple ;
#    <default_float> ?default_float ;
end rule ;

rule <impl_attr_def> ?!@implementationSpec unused spec :
    @lstring type ;
    @bool auto ;

    $ENUM$ ?type ;
      <auto_specifier> ?auto ;
    <enumeration> ;
    <attribute_name> ?* ;
    <multiple_specifier> ?* ;
    <default_name> ?* ?* ;
end rule ;

rule <auto_specifier> !@bool auto :
    select
        $WITH_AUTO$ ; auto := true ;
    or
        auto := false ;
    end select ;
end rule ;

rule <number_range_or_nil> !@bool has_range !@number_set set :
    select
        <number_range> ?set ;
        has_range := true ;
    or
        @luint64 zero := [@luint64 new !0L !here] ;
        set := [@uint_range new !zero !zero] ;
        has_range := false ;
    end select ;
end rule ;

rule <number_range> !@number_set set :
    @luint64 first ;
    $[$ ;
    select
        @luint64 last ;
        $set_start_uint_number$ ?first ;
       $uint_number$ ?last;
        set := [@uint_range new !first !last] ;
    or
        $uint_number$ ?first ;
        select
            @luint64 last ;
            $..$ ;
            $uint_number$ ?last ;
            set := [@uint_range new !first !last] ;
        or
            @number_list numList := [@number_list emptyList];
            numList += !first ;
             repeat
             while
                $,$ ;
                $uint_number$ ?first;
                numList += !first ;
                end repeat ;
            set := [@uint_list new !numList];
        end select ;
    end select ;
      $]$ ;
end rule ;  

rule <attribute_name> !@lstring name :
    $idf$ ?name;
end rule ;

rule <multiple_specifier> !@bool multiple :
    select
        $[$ ; $]$ ;
        multiple := true;
    or
        multiple := false;
    end select ;
end rule ;

rule <default_number> !@bool has_default !@luint64 default_number :
    select
        $=$ ;
        $uint_number$ ?default_number ;
        has_default := true ;
    or
        default_number := [@luint64 new !0L !here] ;
        has_default := false ;
    end select ;
end rule ;

rule <default_name> !@bool has_default !@lstring default_name :
    select
        $=$ ;
        $idf$ ?default_name ;
        has_default := true ;
    or
        default_name := [@lstring new !"" !here] ;
        has_default := false ;
    end select ;
end rule ;

#
# Enumeration.
#
rule <enumeration> :
    $[$ ;
    <enumerator> ;
    repeat
    while
        $,$ ;
        <enumerator> ;
    end repeat ;
    $]$ ;
end rule ;

rule <enumerator> :
    $idf$ ?* ;
    <impl_parameter_list> ;
    <description> ?* ;
end rule ;

rule <impl_parameter_list> :
    select
        ${$ ;
        repeat
        while
            <implementation_def> ;
        end repeat ;
        $}$ ;
    or
    end select ;
end rule ;

rule <implementation_def> :
    $idf$ ?* ;
    $idf$ ?* ;
    $;$ ;
end rule ;

end syntax ;

