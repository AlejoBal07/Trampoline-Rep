//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_obj_scheduletable.cpp'                      *
//                        Generated by version 1.8.5                         *
//                      june 19th, 2009, at 17h48'14"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 515
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_scheduletable.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_scheduletable.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'scheduletable'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_scheduletable_goil_obj_scheduletable_49_20_ (goil_lexique & inLexique,
                                GGS_scheduletable_map  &var_cas_stm) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SCHEDULETABLE) COMMA_HERE) ;
  if (((GGS_bool (inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (53)))).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("AUTOSAR flag is off, turn it on to use SCHEDULETABLE objects") COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
  GGS_lstring  var_cas_name ;
  inLexique.assignFromAttribute_att_token (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
  GGS_scheduletable_obj  var_cas_st ;
  if ((var_cas_stm.reader_hasKey (inLexique, var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) COMMA_SOURCE_FILE_AT_LINE (62))).isBuiltAndTrue ()) {
    var_cas_stm.modifier_del (inLexique, var_cas_name, var_cas_st COMMA_SOURCE_FILE_AT_LINE (63)) ;
  }else{
    var_cas_st = GGS_scheduletable_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_autostart_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_ltgt_sync_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_action_list ::constructor_emptySortedList (), GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
  }
  nt_scheduletable_parameters_ (inLexique, var_cas_st, var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  nt_description_ (inLexique, var_cas_desc) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
  var_cas_stm.modifier_put (inLexique, var_cas_name, var_cas_st COMMA_SOURCE_FILE_AT_LINE (83)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'scheduletable_parameters'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_scheduletable_parameters_goil_obj_scheduletable_86_31_ (goil_lexique & inLexique,
                                GGS_scheduletable_obj  &var_cas_st,
                                GGS_lstring  var_cas_name) {
  GGS_lstring  var_cas_st_description ;
  var_cas_st_description = var_cas_st.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
  GGS_lstring  var_cas_st_counter ;
  var_cas_st_counter = var_cas_st.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
  GGS_autostart_obj  var_cas_st_autostart ;
  var_cas_st_autostart = var_cas_st.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ;
  GGS_ltgt_sync_obj  var_cas_st_ltgt_sync ;
  var_cas_st_ltgt_sync = var_cas_st.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
  GGS_basic_type  var_cas_st_periodic ;
  var_cas_st_periodic = var_cas_st.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (94)) ;
  GGS_basic_type  var_cas_st_length ;
  var_cas_st_length = var_cas_st.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
  GGS_action_list  var_cas_st_actions ;
  var_cas_st_actions = var_cas_st.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
  GGS_lstringlist  var_cas_st_acc_apps ;
  var_cas_st_acc_apps = var_cas_st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (97)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_scheduletable_0 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_counter ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COUNTER) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_token (var_cas_counter) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_0 ;
          nt_description_ (inLexique, automatic_var_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          if (((var_cas_st_counter.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS409 - COUNTER attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) COMMA_SOURCE_FILE_AT_LINE (105)) ;
            var_cas_st_counter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (105)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (106)) ;
          }else{
            var_cas_st_counter = var_cas_counter ;
          }
          } break ;
        case 3 : {
          GGS_autostart_obj  var_cas_autostart ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTOSTART) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          switch (select_goil_obj_scheduletable_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ABSOLUTE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
              nt_st_autostart_abs_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RELATIVE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
              nt_st_autostart_rel_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SYNCHRON) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
              nt_st_autostart_sync_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
              nt_st_autostart_rel_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
              var_cas_autostart = GGS_sd_autostart_false ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NONE) COMMA_HERE) ;
              var_cas_autostart = GGS_sd_autostart_false ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_1 ;
          nt_description_ (inLexique, automatic_var_1) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          { const GGS_autostart_obj _var_3938 = var_cas_st_autostart ; // CAST instruction
            if (_var_3938.getPtr () != NULL) {
              macroValidPointer (_var_3938.getPtr ()) ;
              if (typeid (cPtr_autostart_void) == typeid (* (_var_3938.getPtr ()))) {
                var_cas_st_autostart = var_cas_autostart ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("AUTOSTART attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (143))) COMMA_SOURCE_FILE_AT_LINE (144)) ;
                var_cas_st_autostart.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (144)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (145)) ;
              }
            }
          }
          } break ;
        case 4 : {
          GGS_ltgt_sync_obj  var_cas_sync ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          switch (select_goil_obj_scheduletable_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
              nt_ltgt_sync_params_ (inLexique, var_cas_sync) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
              var_cas_sync = GGS_ltgt_sync_false ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_2 ;
          nt_description_ (inLexique, automatic_var_2) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          { const GGS_ltgt_sync_obj _var_4498 = var_cas_st_ltgt_sync ; // CAST instruction
            if (_var_4498.getPtr () != NULL) {
              macroValidPointer (_var_4498.getPtr ()) ;
              if (typeid (cPtr_ltgt_sync_void) == typeid (* (_var_4498.getPtr ()))) {
                var_cas_st_ltgt_sync = var_cas_sync ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (164))) COMMA_SOURCE_FILE_AT_LINE (165)) ;
                var_cas_st_ltgt_sync.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (165)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (166)) ;
              }
            }
          }
          } break ;
        case 5 : {
          GGS_lbool  var_cas_periodic ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PERIODIC) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          nt_boolean_ (inLexique, var_cas_periodic) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (inLexique, automatic_var_3) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_4900 = var_cas_st_periodic ; // CAST instruction
            if (_var_4900.getPtr () != NULL) {
              macroValidPointer (_var_4900.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_4900.getPtr ()))) {
                var_cas_st_periodic = GGS_bool_class ::constructor_new (inLexique, var_cas_periodic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (173)), var_cas_periodic.reader_bool (inLexique COMMA_SOURCE_FILE_AT_LINE (173)) COMMA_HERE) ;
              }else{
                var_cas_periodic.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("PERIODIC attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (175))) COMMA_SOURCE_FILE_AT_LINE (176)) ;
                var_cas_st_periodic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (177)) ;
              }
            }
          }
          } break ;
        case 6 : {
          GGS_luint64  var_cas_length ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LENGTH) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_length) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (inLexique, automatic_var_4) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_5279 = var_cas_st_length ; // CAST instruction
            if (_var_5279.getPtr () != NULL) {
              macroValidPointer (_var_5279.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_5279.getPtr ()))) {
                var_cas_st_length = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) COMMA_HERE) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("LENGTH attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186))) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                var_cas_st_periodic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (188)) ;
              }
            }
          }
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACTION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          nt_st_action_params_ (inLexique, var_cas_st_actions) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (inLexique, automatic_var_5) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          GGS_lstring  var_cas_app ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACCESSING_5F_APPLICATION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_token (var_cas_app) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_6 ;
          nt_description_ (inLexique, automatic_var_6) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          ::routine_add_lstring_unique (inLexique,  var_cas_st_acc_apps,  var_cas_app,  GGS_string ("ACCESSING_APPLICATION") COMMA_SOURCE_FILE_AT_LINE (195)) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          switch (select_goil_obj_scheduletable_3 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_7 ;
          nt_description_ (inLexique, automatic_var_7) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  var_cas_st = GGS_scheduletable_obj ::constructor_new (inLexique, var_cas_st_description, var_cas_st_counter, var_cas_st_autostart, var_cas_st_ltgt_sync, var_cas_st_periodic, var_cas_st_length, var_cas_st_actions, var_cas_st_acc_apps COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'st_autostart_rel_params'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_st_autostart_rel_params_goil_obj_scheduletable_213_30_ (goil_lexique & inLexique,
                                GGS_autostart_obj  &var_cas_autostart) {
  GGS_bool var_cas_offset_known ;
  var_cas_offset_known = GGS_bool (false) ;
  GGS_luint64  var_cas_offset ;
  var_cas_offset = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0U), GGS_location (inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_app_mode ;
  var_cas_app_mode = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_stringset  var_cas_app_modes ;
  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_goil_obj_scheduletable_4 (inLexique)) {
        case 2 : {
          if ((var_cas_offset_known).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table autostart") COMMA_SOURCE_FILE_AT_LINE (226)) ;
            var_cas_offset.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (226)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (227)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_offset) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          GGS_lstring  automatic_var_8 ;
          nt_description_ (inLexique, automatic_var_8) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          var_cas_offset_known = GGS_bool (true) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_token (var_cas_app_mode) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_9 ;
          nt_description_ (inLexique, automatic_var_9) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          var_cas_app_modes._addAssign_operation (var_cas_app_mode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  if (((var_cas_offset_known).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OFFSET attribute is missing") COMMA_SOURCE_FILE_AT_LINE (239)) ;
  }
  var_cas_autostart = GGS_sd_autostart_relative ::constructor_new (inLexique, GGS_location (inLexique), var_cas_app_modes, var_cas_offset COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'st_autostart_abs_params'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_st_autostart_abs_params_goil_obj_scheduletable_244_30_ (goil_lexique & inLexique,
                                GGS_autostart_obj  &var_cas_autostart) {
  GGS_bool var_cas_start_known ;
  var_cas_start_known = GGS_bool (false) ;
  GGS_luint64  var_cas_start ;
  var_cas_start = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0U), GGS_location (inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_app_mode ;
  var_cas_app_mode = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_stringset  var_cas_app_modes ;
  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_goil_obj_scheduletable_5 (inLexique)) {
        case 2 : {
          if ((var_cas_start_known).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table autostart") COMMA_SOURCE_FILE_AT_LINE (257)) ;
            var_cas_start.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (258)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_START) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_start) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          GGS_lstring  automatic_var_10 ;
          nt_description_ (inLexique, automatic_var_10) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          var_cas_start_known = GGS_bool (true) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_token (var_cas_app_mode) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_11 ;
          nt_description_ (inLexique, automatic_var_11) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          var_cas_app_modes._addAssign_operation (var_cas_app_mode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (264))) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  if (((var_cas_start_known).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("START attribute is missing") COMMA_SOURCE_FILE_AT_LINE (270)) ;
  }
  var_cas_autostart = GGS_sd_autostart_absolute ::constructor_new (inLexique, GGS_location (inLexique), var_cas_app_modes, var_cas_start COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'st_autostart_sync_params'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_st_autostart_sync_params_goil_obj_scheduletable_275_31_ (goil_lexique & inLexique,
                                GGS_autostart_obj  &var_cas_autostart) {
  GGS_lstring  var_cas_app_mode ;
  var_cas_app_mode = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  GGS_stringset  var_cas_app_modes ;
  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_goil_obj_scheduletable_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_token (var_cas_app_mode) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_12 ;
          nt_description_ (inLexique, automatic_var_12) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          var_cas_app_modes._addAssign_operation (var_cas_app_mode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (284))) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  var_cas_autostart = GGS_sd_autostart_synchron ::constructor_new (inLexique, GGS_location (inLexique), var_cas_app_modes COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'ltgt_sync_params'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_ltgt_sync_params_goil_obj_scheduletable_290_23_ (goil_lexique & inLexique,
                                GGS_ltgt_sync_obj  &var_cas_sync) {
  GGS_basic_type  var_cas_precision ;
  var_cas_precision = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_strategy ;
  var_cas_strategy = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_repeat_goil_obj_scheduletable_7 (inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_prec ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PRECISION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_prec) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          { const GGS_basic_type _var_8454 = var_cas_precision ; // CAST instruction
            if (_var_8454.getPtr () != NULL) {
              macroValidPointer (_var_8454.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_8454.getPtr ()))) {
                var_cas_precision = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_prec.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_HERE) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("PRECISION attribute already defined") COMMA_SOURCE_FILE_AT_LINE (305)) ;
                var_cas_precision.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (305)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (306)) ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_strat ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SYNC_5F_STRATEGY) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_token (var_cas_strat) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          if (((var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (311))).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_strategy = var_cas_strat ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("SYNC_STRATEGY attribute already defined") COMMA_SOURCE_FILE_AT_LINE (315)) ;
            var_cas_strategy.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (316)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  { const GGS_basic_type _var_8966 = var_cas_precision ; // CAST instruction
    if (_var_8966.getPtr () != NULL) {
      macroValidPointer (_var_8966.getPtr ()) ;
      if (typeid (cPtr_void) == typeid (* (_var_8966.getPtr ()))) {
        if (((var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (322))).operator_isEqual (GGS_string ("IMPLICIT"))).isBuiltAndTrue ()) {
          var_cas_precision = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint64 (0U) COMMA_HERE) ;
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("PRECISION attribute is missing ") COMMA_SOURCE_FILE_AT_LINE (326)) ;
        }
      }else{
      }
    }
  }
  if (((var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("SYNC_STRATEGY attribute is missing") COMMA_SOURCE_FILE_AT_LINE (331)) ;
  }
  var_cas_sync = GGS_ltgt_sync_true ::constructor_new (inLexique, GGS_location (inLexique), var_cas_strategy, var_cas_precision COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'st_action_params'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_st_action_params_goil_obj_scheduletable_336_23_ (goil_lexique & inLexique,
                                GGS_action_list  &var_cas_actions) {
  switch (select_goil_obj_scheduletable_8 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACTIVATETASK) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
      GGS_bool var_cas_offset_known ;
      var_cas_offset_known = GGS_bool (false) ;
      GGS_bool var_cas_task_known ;
      var_cas_task_known = GGS_bool (false) ;
      GGS_luint64  var_cas_offset ;
      var_cas_offset = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0U), GGS_location (inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_task ;
      var_cas_task = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      { bool syntaxRepeat_9 = true ;
        while (syntaxRepeat_9) {
          switch (select_repeat_goil_obj_scheduletable_9 (inLexique)) {
            case 2 : {
              GGS_luint64  var_cas_new_offset ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_integerNumber (var_cas_new_offset) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_offset_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (352)) ;
                var_cas_offset.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (353)) ;
              }else{
                var_cas_offset = var_cas_new_offset ;
                var_cas_offset_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_task ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TASK) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_token (var_cas_new_task) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_task_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (362)) ;
                var_cas_task.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (362)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (363)) ;
              }else{
                var_cas_task = var_cas_new_task ;
                var_cas_task_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_9 = false ;
              break ;
          }
        }
      }
      if (((var_cas_task_known).operator_and (var_cas_offset_known)).isBuiltAndTrue ()) {
        GGS_activatetask_action  var_cas_sdata ;
        var_cas_sdata = GGS_activatetask_action ::constructor_new (inLexique, GGS_location (inLexique), var_cas_task COMMA_HERE) ;
        var_cas_actions._addAssign_operation (var_cas_offset.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (370)), GGS_uint (1U), var_cas_sdata) ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("incomplete expiry point") COMMA_SOURCE_FILE_AT_LINE (373)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_bool var_cas_offset_known ;
      var_cas_offset_known = GGS_bool (false) ;
      GGS_bool var_cas_task_known ;
      var_cas_task_known = GGS_bool (false) ;
      GGS_bool var_cas_event_known ;
      var_cas_event_known = GGS_bool (false) ;
      GGS_luint64  var_cas_offset ;
      var_cas_offset = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0U), GGS_location (inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_task ;
      var_cas_task = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_event ;
      var_cas_event = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SETEVENT) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_10 = true ;
        while (syntaxRepeat_10) {
          switch (select_repeat_goil_obj_scheduletable_10 (inLexique)) {
            case 2 : {
              GGS_luint64  var_cas_new_offset ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_integerNumber (var_cas_new_offset) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_offset_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table SETEVENT action") COMMA_SOURCE_FILE_AT_LINE (390)) ;
                var_cas_offset.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (390)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (391)) ;
              }else{
                var_cas_offset = var_cas_new_offset ;
                var_cas_offset_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_task ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TASK) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_token (var_cas_new_task) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_task_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute already defined for this schedule table SETEVENT action") COMMA_SOURCE_FILE_AT_LINE (400)) ;
                var_cas_task.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (400)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (401)) ;
              }else{
                var_cas_task = var_cas_new_task ;
                var_cas_task_known = GGS_bool (true) ;
              }
              } break ;
            case 4 : {
              GGS_lstring  var_cas_new_event ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EVENT) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_token (var_cas_new_event) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_event_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("EVENT attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (410)) ;
                var_cas_event.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (410)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (411)) ;
              }else{
                var_cas_event = var_cas_new_event ;
                var_cas_event_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_10 = false ;
              break ;
          }
        }
      }
      if ((((var_cas_task_known).operator_and (var_cas_offset_known)).operator_and (var_cas_event_known)).isBuiltAndTrue ()) {
        GGS_setevent_action  var_cas_sdata ;
        var_cas_sdata = GGS_setevent_action ::constructor_new (inLexique, GGS_location (inLexique), var_cas_task, var_cas_event COMMA_HERE) ;
        var_cas_actions._addAssign_operation (var_cas_offset.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (418)), GGS_uint (2U), var_cas_sdata) ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("incomplete expiry point") COMMA_SOURCE_FILE_AT_LINE (421)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_INCREMENTCOUNTER) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
      GGS_bool var_cas_offset_known ;
      var_cas_offset_known = GGS_bool (false) ;
      GGS_bool var_cas_counter_known ;
      var_cas_counter_known = GGS_bool (false) ;
      GGS_luint64  var_cas_offset ;
      var_cas_offset = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0U), GGS_location (inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_counter ;
      var_cas_counter = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      { bool syntaxRepeat_11 = true ;
        while (syntaxRepeat_11) {
          switch (select_repeat_goil_obj_scheduletable_11 (inLexique)) {
            case 2 : {
              GGS_luint64  var_cas_new_offset ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_integerNumber (var_cas_new_offset) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_offset_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table INCREMENTCOUNTER action") COMMA_SOURCE_FILE_AT_LINE (436)) ;
                var_cas_offset.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (436)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (437)) ;
              }else{
                var_cas_offset = var_cas_new_offset ;
                var_cas_offset_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_counter ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COUNTER) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_token (var_cas_new_counter) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
              if ((var_cas_counter_known).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("COUNTER attribute already defined for this schedule table INCREMENTCOUNTER action") COMMA_SOURCE_FILE_AT_LINE (446)) ;
                var_cas_counter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (446)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (447)) ;
              }else{
                var_cas_counter = var_cas_new_counter ;
                var_cas_counter_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_11 = false ;
              break ;
          }
        }
      }
      if (((var_cas_counter_known).operator_and (var_cas_offset_known)).isBuiltAndTrue ()) {
        GGS_incrementcounter_action  var_cas_sdata ;
        var_cas_sdata = GGS_incrementcounter_action ::constructor_new (inLexique, GGS_location (inLexique), var_cas_counter COMMA_HERE) ;
        var_cas_actions._addAssign_operation (var_cas_offset.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (454)), GGS_uint (3U), var_cas_sdata) ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("incomplete expiry point") COMMA_SOURCE_FILE_AT_LINE (457)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

