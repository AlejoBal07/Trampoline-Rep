//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_obj_scheduletable.cpp'                      *
//                    Generated by version 1.8.3 [debug]                     *
//                       june 11th, 2009, at 9h34'39"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_scheduletable.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_scheduletable.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'scheduletable'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_scheduletable_goil_obj_scheduletable_45_20_ (goil_lexique & _inLexique,
                                GGS_scheduletable_map  &var_cas_stm) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SCHEDULETABLE) COMMA_HERE) ;
  if (((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (49))))._operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("AUTOSAR flag is off, turn it on to use SCHEDULETABLE objects") COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
  GGS_lstring  var_cas_name ;
  _inLexique._assignFromAttribute_att_token (var_cas_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  GGS_scheduletable_obj  var_cas_st ;
  if ((var_cas_stm.reader_hasKey (_inLexique, var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)) COMMA_SOURCE_FILE_AT_LINE (58))).isBuiltAndTrue ()) {
    var_cas_stm.modifier_del (_inLexique, var_cas_name, var_cas_st COMMA_SOURCE_FILE_AT_LINE (59)) ;
  }else{
    var_cas_st = GGS_scheduletable_obj ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_autostart_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE), GGS_ltgt_sync_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE), GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE), GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE), GGS_action_list ::constructor_emptySortedList (), GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
  }
  nt_scheduletable_parameters_ (_inLexique, var_cas_st, var_cas_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_stm.modifier_put (_inLexique, var_cas_name, var_cas_st COMMA_SOURCE_FILE_AT_LINE (79)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'scheduletable_parameters'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_scheduletable_parameters_goil_obj_scheduletable_82_31_ (goil_lexique & _inLexique,
                                GGS_scheduletable_obj  &var_cas_st,
                                GGS_lstring  var_cas_name) {
  GGS_lstring  var_cas_st_description ;
  var_cas_st_description = var_cas_st.reader_desc (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ;
  GGS_lstring  var_cas_st_counter ;
  var_cas_st_counter = var_cas_st.reader_counter (_inLexique COMMA_SOURCE_FILE_AT_LINE (87)) ;
  GGS_autostart_obj  var_cas_st_autostart ;
  var_cas_st_autostart = var_cas_st.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
  GGS_ltgt_sync_obj  var_cas_st_ltgt_sync ;
  var_cas_st_ltgt_sync = var_cas_st.reader_ltgt_sync (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)) ;
  GGS_basic_type  var_cas_st_periodic ;
  var_cas_st_periodic = var_cas_st.reader_periodic (_inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
  GGS_basic_type  var_cas_st_length ;
  var_cas_st_length = var_cas_st.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
  GGS_action_list  var_cas_st_actions ;
  var_cas_st_actions = var_cas_st.reader_actions (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ;
  GGS_lstringlist  var_cas_st_acc_apps ;
  var_cas_st_acc_apps = var_cas_st.reader_acc_apps (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_scheduletable_0 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_counter ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COUNTER) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_counter) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_0 ;
          nt_description_ (_inLexique, automatic_var_0) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          if (((var_cas_st_counter.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (99)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("OS409 - COUNTER attribute already defined for Schedule Table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (100))) COMMA_SOURCE_FILE_AT_LINE (101)) ;
            var_cas_st_counter.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (101)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (102)) ;
          }else{
            var_cas_st_counter = var_cas_counter ;
          }
          } break ;
        case 3 : {
          GGS_autostart_obj  var_cas_autostart ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTOSTART) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_scheduletable_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ABSOLUTE) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
              nt_st_autostart_params_ (_inLexique, var_cas_autostart, GGS_uint (1U)) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RELATIVE) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
              nt_st_autostart_params_ (_inLexique, var_cas_autostart, GGS_uint (2U)) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SYNCHRON) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
              nt_st_autostart_params_ (_inLexique, var_cas_autostart, GGS_uint (3U)) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
              var_cas_autostart = GGS_sd_autostart_false ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_1 ;
          nt_description_ (_inLexique, automatic_var_1) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_autostart_obj _var_3722 = var_cas_st_autostart ; // CAST instruction
            if (_var_3722.getPtr () != NULL) {
              macroValidPointer (_var_3722.getPtr ()) ;
              if (typeid (cPtr_autostart_void) == typeid (* (_var_3722.getPtr ()))) {
                var_cas_st_autostart = var_cas_autostart ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("AUTOSTART attribute already defined for Schedule Table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (132))) COMMA_SOURCE_FILE_AT_LINE (133)) ;
                var_cas_st_autostart.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (134)) ;
              }
            }
          }
          } break ;
        case 4 : {
          GGS_ltgt_sync_obj  var_cas_sync ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_scheduletable_2 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
              nt_ltgt_sync_params_ (_inLexique, var_cas_sync) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
              var_cas_sync = GGS_ltgt_sync_false ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_2 ;
          nt_description_ (_inLexique, automatic_var_2) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_ltgt_sync_obj _var_4298 = var_cas_st_ltgt_sync ; // CAST instruction
            if (_var_4298.getPtr () != NULL) {
              macroValidPointer (_var_4298.getPtr ()) ;
              if (typeid (cPtr_ltgt_sync_void) == typeid (* (_var_4298.getPtr ()))) {
                var_cas_st_ltgt_sync = var_cas_sync ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION attribute already defined for Schedule Table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (153))) COMMA_SOURCE_FILE_AT_LINE (154)) ;
                var_cas_st_ltgt_sync.reader_loc (_inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (155)) ;
              }
            }
          }
          } break ;
        case 5 : {
          GGS_lbool  var_cas_periodic ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PERIODIC) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_periodic) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (_inLexique, automatic_var_3) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_basic_type _var_4710 = var_cas_st_periodic ; // CAST instruction
            if (_var_4710.getPtr () != NULL) {
              macroValidPointer (_var_4710.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_4710.getPtr ()))) {
                var_cas_st_periodic = GGS_bool_class ::constructor_new (_inLexique, var_cas_periodic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)), var_cas_periodic.reader_bool (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)) COMMA_HERE) ;
              }else{
                var_cas_periodic.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("PERIODIC attribute already defined for Schedule Table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (164))) COMMA_SOURCE_FILE_AT_LINE (165)) ;
                var_cas_st_periodic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (166)) ;
              }
            }
          }
          } break ;
        case 6 : {
          GGS_luint64  var_cas_length ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LENGTH) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_integerNumber (var_cas_length) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (_inLexique, automatic_var_4) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_basic_type _var_5099 = var_cas_st_length ; // CAST instruction
            if (_var_5099.getPtr () != NULL) {
              macroValidPointer (_var_5099.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_5099.getPtr ()))) {
                var_cas_st_length = GGS_uint64_class ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_length.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (173)) COMMA_HERE) ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("LENGTH attribute already defined for Schedule Table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (175))) COMMA_SOURCE_FILE_AT_LINE (176)) ;
                var_cas_st_periodic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (177)) ;
              }
            }
          }
          } break ;
        case 7 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACTION) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_st_action_params_ (_inLexique, var_cas_st_actions) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (_inLexique, automatic_var_5) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 8 : {
          GGS_lstring  var_cas_app ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACCESSING_5FAPPLICATION) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_app) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_6 ;
          nt_description_ (_inLexique, automatic_var_6) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_add_lstring_unique (_inLexique,  var_cas_st_acc_apps,  var_cas_app,  GGS_string ("ACCESSING_APPLICATION") COMMA_SOURCE_FILE_AT_LINE (184)) ;
          } break ;
        case 9 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_scheduletable_3 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_7 ;
          nt_description_ (_inLexique, automatic_var_7) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  var_cas_st = GGS_scheduletable_obj ::constructor_new (_inLexique, var_cas_st_description, var_cas_st_counter, var_cas_st_autostart, var_cas_st_ltgt_sync, var_cas_st_periodic, var_cas_st_length, var_cas_st_actions, var_cas_st_acc_apps COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'st_autostart_params'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_st_autostart_params_goil_obj_scheduletable_202_26_ (goil_lexique & _inLexique,
                                GGS_autostart_obj  &var_cas_autostart,
                                GGS_uint  var_cas_mode) {
  GGS_bool var_cas_offset_known ;
  var_cas_offset_known = GGS_bool (false) ;
  GGS_luint64  var_cas_offset ;
  var_cas_offset = GGS_luint64 ::constructor_new (_inLexique, GGS_uint64 (0U), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_app_mode ;
  var_cas_app_mode = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_stringset  var_cas_app_modes ;
  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_goil_obj_scheduletable_4 (_inLexique)) {
        case 2 : {
          if ((var_cas_offset_known).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table autostart") COMMA_SOURCE_FILE_AT_LINE (216)) ;
            var_cas_offset.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (217)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_integerNumber (var_cas_offset) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
          GGS_lstring  automatic_var_8 ;
          nt_description_ (_inLexique, automatic_var_8) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_offset_known = GGS_bool (true) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APPMODE) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_app_mode) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_9 ;
          nt_description_ (_inLexique, automatic_var_9) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_app_modes._addAssign_operation (var_cas_app_mode.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (223))) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  if (((var_cas_mode)._operator_isEqual (GGS_uint (3U))).isBuiltAndTrue ()) {
    var_cas_offset_known = GGS_bool (true) ;
  }
  if (((var_cas_offset_known)._operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("OFFSET attribute is missing") COMMA_SOURCE_FILE_AT_LINE (233)) ;
  }
  var_cas_autostart = GGS_sd_autostart_true ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_offset, var_cas_app_modes, var_cas_mode COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'ltgt_sync_params'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_ltgt_sync_params_goil_obj_scheduletable_239_23_ (goil_lexique & _inLexique,
                                GGS_ltgt_sync_obj  &var_cas_sync) {
  GGS_basic_type  var_cas_precision ;
  var_cas_precision = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_strategy ;
  var_cas_strategy = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_repeat_goil_obj_scheduletable_5 (_inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_prec ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PRECISION) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_integerNumber (var_cas_prec) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
          { const GGS_basic_type _var_7154 = var_cas_precision ; // CAST instruction
            if (_var_7154.getPtr () != NULL) {
              macroValidPointer (_var_7154.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_7154.getPtr ()))) {
                var_cas_precision = GGS_uint64_class ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_prec.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (251)) COMMA_HERE) ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("PRECISION attribute already defined") COMMA_SOURCE_FILE_AT_LINE (254)) ;
                var_cas_precision.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (254)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (255)) ;
              }
            }
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_strat ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SYNC_5FSTRATEGY) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_strat) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          if (((var_cas_strategy.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (260)))._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_strategy = var_cas_strat ;
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("SYNC_STRATEGY attribute already defined") COMMA_SOURCE_FILE_AT_LINE (264)) ;
            var_cas_strategy.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (265)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  { const GGS_basic_type _var_7574 = var_cas_precision ; // CAST instruction
    if (_var_7574.getPtr () != NULL) {
      macroValidPointer (_var_7574.getPtr ()) ;
      if (typeid (cPtr_void) == typeid (* (_var_7574.getPtr ()))) {
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("PRECISION attribute is missing") COMMA_SOURCE_FILE_AT_LINE (272)) ;
      }else{
      }
    }
  }
  if (((var_cas_strategy.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)))._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("SYNC_STRATEGY attribute is missing") COMMA_SOURCE_FILE_AT_LINE (276)) ;
  }
  var_cas_sync = GGS_ltgt_sync_true ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_strategy, var_cas_precision COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'st_action_params'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::
pr_st_action_params_goil_obj_scheduletable_281_23_ (goil_lexique & _inLexique,
                                GGS_action_list  &var_cas_actions) {
  switch (select_goil_obj_scheduletable_6 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACTIVATETASK) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
      GGS_bool var_cas_offset_known ;
      var_cas_offset_known = GGS_bool (false) ;
      GGS_bool var_cas_task_known ;
      var_cas_task_known = GGS_bool (false) ;
      GGS_luint64  var_cas_offset ;
      var_cas_offset = GGS_luint64 ::constructor_new (_inLexique, GGS_uint64 (0U), GGS_location (_inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_task ;
      var_cas_task = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
      { bool syntaxRepeat_7 = true ;
        while (syntaxRepeat_7) {
          switch (select_repeat_goil_obj_scheduletable_7 (_inLexique)) {
            case 2 : {
              GGS_luint64  var_cas_new_offset ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_integerNumber (var_cas_new_offset) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_offset_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (297)) ;
                var_cas_offset.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (297)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (298)) ;
              }else{
                var_cas_offset = var_cas_new_offset ;
                var_cas_offset_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_task ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TASK) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_att_token (var_cas_new_task) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_task_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("TASK attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (307)) ;
                var_cas_task.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (307)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (308)) ;
              }else{
                var_cas_task = var_cas_new_task ;
                var_cas_task_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_7 = false ;
              break ;
          }
        }
      }
      if (((var_cas_task_known)._operator_and (var_cas_offset_known)).isBuiltAndTrue ()) {
        GGS_activatetask_action  var_cas_sdata ;
        var_cas_sdata = GGS_activatetask_action ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_task COMMA_HERE) ;
        var_cas_actions._addAssign_operation (var_cas_offset.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (315)), GGS_uint (1U), var_cas_sdata) ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("incomplete expiry point") COMMA_SOURCE_FILE_AT_LINE (318)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_bool var_cas_offset_known ;
      var_cas_offset_known = GGS_bool (false) ;
      GGS_bool var_cas_task_known ;
      var_cas_task_known = GGS_bool (false) ;
      GGS_bool var_cas_event_known ;
      var_cas_event_known = GGS_bool (false) ;
      GGS_luint64  var_cas_offset ;
      var_cas_offset = GGS_luint64 ::constructor_new (_inLexique, GGS_uint64 (0U), GGS_location (_inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_task ;
      var_cas_task = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_event ;
      var_cas_event = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SETEVENT) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_goil_obj_scheduletable_8 (_inLexique)) {
            case 2 : {
              GGS_luint64  var_cas_new_offset ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_integerNumber (var_cas_new_offset) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_offset_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table SETEVENT action") COMMA_SOURCE_FILE_AT_LINE (335)) ;
                var_cas_offset.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (335)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (336)) ;
              }else{
                var_cas_offset = var_cas_new_offset ;
                var_cas_offset_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_task ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TASK) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_att_token (var_cas_new_task) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_task_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("TASK attribute already defined for this schedule table SETEVENT action") COMMA_SOURCE_FILE_AT_LINE (345)) ;
                var_cas_task.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (345)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (346)) ;
              }else{
                var_cas_task = var_cas_new_task ;
                var_cas_task_known = GGS_bool (true) ;
              }
              } break ;
            case 4 : {
              GGS_lstring  var_cas_new_event ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EVENT) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_att_token (var_cas_new_event) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_event_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("EVENT attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (355)) ;
                var_cas_event.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (356)) ;
              }else{
                var_cas_event = var_cas_new_event ;
                var_cas_event_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      if ((((var_cas_task_known)._operator_and (var_cas_offset_known))._operator_and (var_cas_event_known)).isBuiltAndTrue ()) {
        GGS_setevent_action  var_cas_sdata ;
        var_cas_sdata = GGS_setevent_action ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_task, var_cas_event COMMA_HERE) ;
        var_cas_actions._addAssign_operation (var_cas_offset.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (363)), GGS_uint (2U), var_cas_sdata) ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("incomplete expiry point") COMMA_SOURCE_FILE_AT_LINE (366)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_INCREMENTCOUNTER) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
      GGS_bool var_cas_offset_known ;
      var_cas_offset_known = GGS_bool (false) ;
      GGS_bool var_cas_counter_known ;
      var_cas_counter_known = GGS_bool (false) ;
      GGS_luint64  var_cas_offset ;
      var_cas_offset = GGS_luint64 ::constructor_new (_inLexique, GGS_uint64 (0U), GGS_location (_inLexique) COMMA_HERE) ;
      GGS_lstring  var_cas_counter ;
      var_cas_counter = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
      { bool syntaxRepeat_9 = true ;
        while (syntaxRepeat_9) {
          switch (select_repeat_goil_obj_scheduletable_9 (_inLexique)) {
            case 2 : {
              GGS_luint64  var_cas_new_offset ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OFFSET) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_integerNumber (var_cas_new_offset) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_offset_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("OS442 - OFFSET attribute already defined for this schedule table INCREMENTCOUNTER action") COMMA_SOURCE_FILE_AT_LINE (381)) ;
                var_cas_offset.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (381)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (382)) ;
              }else{
                var_cas_offset = var_cas_new_offset ;
                var_cas_offset_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_counter ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COUNTER) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
              _inLexique._assignFromAttribute_att_token (var_cas_new_counter) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
              if ((var_cas_counter_known).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("COUNTER attribute already defined for this schedule table INCREMENTCOUNTER action") COMMA_SOURCE_FILE_AT_LINE (391)) ;
                var_cas_counter.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (391)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (392)) ;
              }else{
                var_cas_counter = var_cas_new_counter ;
                var_cas_counter_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_9 = false ;
              break ;
          }
        }
      }
      if (((var_cas_counter_known)._operator_and (var_cas_offset_known)).isBuiltAndTrue ()) {
        GGS_incrementcounter_action  var_cas_sdata ;
        var_cas_sdata = GGS_incrementcounter_action ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_counter COMMA_HERE) ;
        var_cas_actions._addAssign_operation (var_cas_offset.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (399)), GGS_uint (3U), var_cas_sdata) ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("incomplete expiry point") COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

