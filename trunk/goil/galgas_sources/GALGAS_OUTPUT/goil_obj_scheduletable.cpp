//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_obj_scheduletable.cpp'                      *
//                       Generated by version 1.9.11                         *
//                      april 30th, 2010, at 16h49'47"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 725
  #error "This file has been compiled with a version of GALGAS that uses libpm version 725, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_obj_scheduletable.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_scheduletable.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'scheduletable'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_scheduletable_i0_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_scheduletable_map  &var_cas_stm) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SCHEDULETABLE) COMMA_HERE) ;
  const GGS_bool cond_1845 = (gOption_goil_5F_options_autosar_5F_on.reader_value ()).operator_isEqual (GGS_bool (false)) ;
  if (cond_1845.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("AUTOSAR flag is off, turn it on to use SCHEDULETABLE objects") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  }
  GGS_lstring  var_cas_name ;
  inLexique.assignFromAttribute_att_5F_token (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
  GGS_scheduletable_obj  var_cas_st ;
  const GGS_bool cond_2041 = var_cas_stm.reader_hasKey (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))) ;
  if (cond_2041.isBuiltAndTrue ()) {
    var_cas_stm.modifier_del (inLexique, var_cas_name, var_cas_st COMMA_SOURCE_FILE_AT_LINE (88)) ;
  }else if (cond_2041.isBuiltAndFalse ()) {
    var_cas_st = function_default_scheduletable_obj (inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
  }
  nt_scheduletable_5F_parameters_ (inLexique, var_cas_st, var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  nt_description_ (inLexique, var_cas_desc) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
  var_cas_stm.modifier_put (inLexique, var_cas_name, var_cas_st COMMA_SOURCE_FILE_AT_LINE (99)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_scheduletable_i0_parse (C_Lexique_goil_5F_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SCHEDULETABLE) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
  nt_scheduletable_5F_parameters_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
  nt_description_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'scheduletable_parameters'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_scheduletable_5F_parameters_i1_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_scheduletable_obj  &var_cas_st,
                                GGS_lstring  var_cas_name) {
  GGS_lstring  var_cas_st_description = var_cas_st.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (106)) ;
  GGS_lstring  var_cas_st_counter = var_cas_st.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
  GGS_autostart_obj  var_cas_st_autostart = var_cas_st.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
  GGS_ltgt_sync_obj  var_cas_st_ltgt_sync = var_cas_st.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (109)) ;
  GGS_basic_type  var_cas_st_periodic = var_cas_st.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
  GGS_basic_type  var_cas_st_length = var_cas_st.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
  GGS_expiry_point_list  var_cas_st_exp_pts = var_cas_st.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
  GGS_lstringlist  var_cas_st_acc_apps = var_cas_st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (113)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_5F_obj_5F_scheduletable_0 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_counter ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_COUNTER) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_counter) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_2824_0 ;
          nt_description_ (inLexique, automatic_var_2824_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          const GGS_bool cond_3040 = (var_cas_st_counter.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (119))).operator_isNotEqual (GGS_string ("")) ;
          if (cond_3040.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS409 - COUNTER attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (120))) COMMA_SOURCE_FILE_AT_LINE (121)) ;
            var_cas_st_counter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (121)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (122)) ;
          }else if (cond_3040.isBuiltAndFalse ()) {
            var_cas_st_counter = var_cas_counter ;
          }
          } break ;
        case 3 : {
          GGS_autostart_obj  var_cas_autostart ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTOSTART) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ABSOLUTE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_abs_5F_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_RELATIVE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_rel_5F_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SYNCHRON) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_sync_5F_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_rel_5F_params_ (inLexique, var_cas_autostart) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_HERE) ;
              var_cas_autostart = GGS_sd_autostart_false ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (149)) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NONE) COMMA_HERE) ;
              var_cas_autostart = GGS_sd_autostart_false ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (151)) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_3680_0 ;
          nt_description_ (inLexique, automatic_var_3680_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_autostart_obj _var_3951 = var_cas_st_autostart ; // CAST instruction
            if (_var_3951.getPtr () != NULL) {
              macroValidPointer (_var_3951.getPtr ()) ;
              if (typeid (cPtr_autostart_void) == typeid (* (_var_3951.getPtr ()))) {
                var_cas_st_autostart = var_cas_autostart ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("AUTOSTART attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159))) COMMA_SOURCE_FILE_AT_LINE (160)) ;
                var_cas_st_autostart.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (160)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (161)) ;
              }
            }
          }
          } break ;
        case 4 : {
          GGS_ltgt_sync_obj  var_cas_sync ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_ltgt_5F_sync_5F_params_ (inLexique, var_cas_sync) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_HERE) ;
              var_cas_sync = GGS_ltgt_sync_false ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (172)) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_4222_0 ;
          nt_description_ (inLexique, automatic_var_4222_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_ltgt_sync_obj _var_4511 = var_cas_st_ltgt_sync ; // CAST instruction
            if (_var_4511.getPtr () != NULL) {
              macroValidPointer (_var_4511.getPtr ()) ;
              if (typeid (cPtr_ltgt_sync_void) == typeid (* (_var_4511.getPtr ()))) {
                var_cas_st_ltgt_sync = var_cas_sync ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180))) COMMA_SOURCE_FILE_AT_LINE (181)) ;
                var_cas_st_ltgt_sync.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (182)) ;
              }
            }
          }
          } break ;
        case 5 : {
          GGS_lbool  var_cas_periodic ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_PERIODIC) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          nt_boolean_ (inLexique, var_cas_periodic) ;
          GGS_lstring  automatic_var_4606_0 ;
          nt_description_ (inLexique, automatic_var_4606_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_4915 = var_cas_st_periodic ; // CAST instruction
            if (_var_4915.getPtr () != NULL) {
              macroValidPointer (_var_4915.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_4915.getPtr ()))) {
                var_cas_st_periodic = GGS_bool_class ::constructor_new (inLexique, var_cas_periodic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (189)), var_cas_periodic.reader_bool (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) COMMA_SOURCE_FILE_AT_LINE (189)) ;
              }else{
                var_cas_periodic.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("PERIODIC attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191))) COMMA_SOURCE_FILE_AT_LINE (192)) ;
                var_cas_st_periodic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (193)) ;
              }
            }
          }
          } break ;
        case 6 : {
          GGS_luint64  var_cas_length ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_LENGTH) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_length) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          GGS_lstring  automatic_var_5010_0 ;
          nt_description_ (inLexique, automatic_var_5010_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_5294 = var_cas_st_length ; // CAST instruction
            if (_var_5294.getPtr () != NULL) {
              macroValidPointer (_var_5294.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_5294.getPtr ()))) {
                var_cas_st_length = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) COMMA_SOURCE_FILE_AT_LINE (200)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("LENGTH attribute already defined for Schedule Table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202))) COMMA_SOURCE_FILE_AT_LINE (203)) ;
                var_cas_st_periodic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously define here") COMMA_SOURCE_FILE_AT_LINE (204)) ;
              }
            }
          }
          } break ;
        case 7 : {
          GGS_lstring  var_cas_exp_name ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EXPIRY_5F_POINT) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_exp_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
          GGS_expiry_point_obj  var_cas_ep ;
          nt_st_5F_expiry_5F_pt_5F_params_ (inLexique, var_cas_exp_name, var_cas_ep) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
          GGS_lstring  automatic_var_5558_0 ;
          nt_description_ (inLexique, automatic_var_5558_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          { const GGS_basic_type _var_5760 = var_cas_ep.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (214)) ; // CAST instruction
            if (_var_5760.getPtr () != NULL) {
              macroValidPointer (_var_5760.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_5760.getPtr ()))) {
                const GGS_uint64_class var_cas_off (_var_5760.getPtr ()) ;
                var_cas_st_exp_pts.addAssign_operation (var_cas_off.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (216)), var_cas_ep) ;
              }else{
                var_cas_exp_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS404 - OFFSET is missing for expiry point ")).operator_concat (var_cas_exp_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (218))) COMMA_SOURCE_FILE_AT_LINE (219)) ;
              }
            }
          }
          } break ;
        case 8 : {
          GGS_lstring  var_cas_app ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ACCESSING_5F_APPLICATION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_app) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_5856_0 ;
          nt_description_ (inLexique, automatic_var_5856_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          ::routine_add_lstring_unique (inLexique,  var_cas_st_acc_apps,  var_cas_app,  GGS_string ("ACCESSING_APPLICATION") COMMA_SOURCE_FILE_AT_LINE (223)) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_3 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_6032_0 ;
          nt_description_ (inLexique, automatic_var_6032_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  var_cas_st = GGS_scheduletable_obj ::constructor_new (inLexique, var_cas_st_description, var_cas_st_counter, var_cas_st_autostart, var_cas_st_ltgt_sync, var_cas_st_periodic, var_cas_st_length, var_cas_st_exp_pts, var_cas_st_acc_apps COMMA_SOURCE_FILE_AT_LINE (229)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_scheduletable_5F_parameters_i1_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_5F_obj_5F_scheduletable_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_COUNTER) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTOSTART) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ABSOLUTE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_abs_5F_params_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_RELATIVE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_rel_5F_params_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SYNCHRON) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_sync_5F_params_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_st_5F_autostart_5F_rel_5F_params_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 5 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_HERE) ;
              } break ;
            case 6 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NONE) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_LOCAL_5F_TO_5F_GLOBAL_5F_TIME_5F_SYNCHRONIZATION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              nt_ltgt_5F_sync_5F_params_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_PERIODIC) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          nt_boolean_parse (inLexique) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_LENGTH) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 7 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EXPIRY_5F_POINT) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
          nt_st_5F_expiry_5F_pt_5F_params_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 8 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ACCESSING_5F_APPLICATION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_3 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'st_autostart_rel_params'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_autostart_5F_rel_5F_params_i2_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_autostart_obj  &var_cas_autostart) {
  GGS_bool var_cas_offset_known = GGS_bool (false) ;
  GGS_luint64  var_cas_offset = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (247)) ;
  GGS_lstring  var_cas_app_mode = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (248)) ;
  GGS_stringset  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_5F_obj_5F_scheduletable_4 (inLexique)) {
        case 2 : {
          const GGS_bool cond_6683 = var_cas_offset_known ;
          if (cond_6683.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OFFSET attribute already defined for this schedule table autostart") COMMA_SOURCE_FILE_AT_LINE (255)) ;
            var_cas_offset.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (255)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (256)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_OFFSET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_offset) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          GGS_lstring  automatic_var_6748_0 ;
          nt_description_ (inLexique, automatic_var_6748_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          var_cas_offset_known = GGS_bool (true) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_app_mode) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_6843_0 ;
          nt_description_ (inLexique, automatic_var_6843_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          var_cas_app_modes.addAssign_operation (var_cas_app_mode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  const GGS_bool cond_7044 = (var_cas_offset_known).operator_isEqual (GGS_bool (false)) ;
  if (cond_7044.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OFFSET attribute is missing") COMMA_SOURCE_FILE_AT_LINE (268)) ;
  }
  var_cas_autostart = GGS_sd_autostart_relative ::constructor_new (inLexique, GGS_location (inLexique), var_cas_app_modes, var_cas_offset COMMA_SOURCE_FILE_AT_LINE (270)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_autostart_5F_rel_5F_params_i2_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_5F_obj_5F_scheduletable_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_OFFSET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'st_autostart_abs_params'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_autostart_5F_abs_5F_params_i3_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_autostart_obj  &var_cas_autostart) {
  GGS_bool var_cas_start_known = GGS_bool (false) ;
  GGS_luint64  var_cas_start = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (278)) ;
  GGS_lstring  var_cas_app_mode = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (279)) ;
  GGS_stringset  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_goil_5F_obj_5F_scheduletable_5 (inLexique)) {
        case 2 : {
          const GGS_bool cond_7567 = var_cas_start_known ;
          if (cond_7567.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OFFSET attribute already defined for this schedule table autostart") COMMA_SOURCE_FILE_AT_LINE (286)) ;
            var_cas_start.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (286)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (287)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_START) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_start) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          GGS_lstring  automatic_var_7630_0 ;
          nt_description_ (inLexique, automatic_var_7630_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          var_cas_start_known = GGS_bool (true) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_app_mode) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_7724_0 ;
          nt_description_ (inLexique, automatic_var_7724_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          var_cas_app_modes.addAssign_operation (var_cas_app_mode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  const GGS_bool cond_7923 = (var_cas_start_known).operator_isEqual (GGS_bool (false)) ;
  if (cond_7923.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("START attribute is missing") COMMA_SOURCE_FILE_AT_LINE (299)) ;
  }
  var_cas_autostart = GGS_sd_autostart_absolute ::constructor_new (inLexique, GGS_location (inLexique), var_cas_app_modes, var_cas_start COMMA_SOURCE_FILE_AT_LINE (301)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_autostart_5F_abs_5F_params_i3_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_goil_5F_obj_5F_scheduletable_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_START) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'st_autostart_sync_params'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_autostart_5F_sync_5F_params_i4_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_autostart_obj  &var_cas_autostart) {
  GGS_lstring  var_cas_app_mode = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (307)) ;
  GGS_stringset  var_cas_app_modes = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_goil_5F_obj_5F_scheduletable_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_app_mode) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_8241_0 ;
          nt_description_ (inLexique, automatic_var_8241_0) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          var_cas_app_modes.addAssign_operation (var_cas_app_mode.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (313))) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  var_cas_autostart = GGS_sd_autostart_synchron ::constructor_new (inLexique, GGS_location (inLexique), var_cas_app_modes COMMA_SOURCE_FILE_AT_LINE (316)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_autostart_5F_sync_5F_params_i4_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_goil_5F_obj_5F_scheduletable_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_APPMODE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          nt_description_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'ltgt_sync_params'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_ltgt_5F_sync_5F_params_i5_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_ltgt_sync_obj  &var_cas_sync) {
  GGS_basic_type  var_cas_precision = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (322)) ;
  GGS_lstring  var_cas_strategy = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (323)) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_goil_5F_obj_5F_scheduletable_7 (inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_prec ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_PRECISION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_prec) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          { const GGS_basic_type _var_8840 = var_cas_precision ; // CAST instruction
            if (_var_8840.getPtr () != NULL) {
              macroValidPointer (_var_8840.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_8840.getPtr ()))) {
                var_cas_precision = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_prec.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (331)) ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("PRECISION attribute already defined") COMMA_SOURCE_FILE_AT_LINE (334)) ;
                var_cas_precision.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (334)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (335)) ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_strat ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SYNC_5F_STRATEGY) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_att_5F_token (var_cas_strat) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          const GGS_bool cond_8993 = (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340))).operator_isEqual (GGS_string ("")) ;
          if (cond_8993.isBuiltAndTrue ()) {
            var_cas_strategy = var_cas_strat ;
          }else if (cond_8993.isBuiltAndFalse ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("SYNC_STRATEGY attribute already defined") COMMA_SOURCE_FILE_AT_LINE (344)) ;
            var_cas_strategy.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Was previously defined here") COMMA_SOURCE_FILE_AT_LINE (345)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  { const GGS_basic_type _var_9352 = var_cas_precision ; // CAST instruction
    if (_var_9352.getPtr () != NULL) {
      macroValidPointer (_var_9352.getPtr ()) ;
      if (typeid (cPtr_void) == typeid (* (_var_9352.getPtr ()))) {
        const GGS_bool cond_9281 = (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (351))).operator_isEqual (GGS_string ("IMPLICIT")) ;
        if (cond_9281.isBuiltAndTrue ()) {
          var_cas_precision = GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint64 (0ULL) COMMA_SOURCE_FILE_AT_LINE (352)) ;
        }else if (cond_9281.isBuiltAndFalse ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("PRECISION attribute is missing ") COMMA_SOURCE_FILE_AT_LINE (355)) ;
        }
      }else{
      }
    }
  }
  const GGS_bool cond_9457 = (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (358))).operator_isEqual (GGS_string ("")) ;
  if (cond_9457.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("SYNC_STRATEGY attribute is missing") COMMA_SOURCE_FILE_AT_LINE (360)) ;
  }
  var_cas_sync = GGS_ltgt_sync_true ::constructor_new (inLexique, GGS_location (inLexique), var_cas_strategy, var_cas_precision COMMA_SOURCE_FILE_AT_LINE (362)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_ltgt_5F_sync_5F_params_i5_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_goil_5F_obj_5F_scheduletable_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_PRECISION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SYNC_5F_STRATEGY) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'st_expiry_pt_params'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_expiry_5F_pt_5F_params_i6_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_lstring  var_cas_ep_name,
                                GGS_expiry_point_obj  &var_cas_epl) {
  GGS_adjustable_obj  var_cas_adjust = GGS_adjustable_void ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (369)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (369)) ;
  GGS_basic_type  var_cas_offset = function_void_obj (inLexique COMMA_SOURCE_FILE_AT_LINE (370)) ;
  GGS_action_list  var_cas_actions = GGS_action_list ::constructor_emptySortedList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
      switch (select_goil_5F_obj_5F_scheduletable_8 (inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_off ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_OFFSET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_off) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          ::routine_set_uint64 (inLexique,  var_cas_offset,  var_cas_off,  GGS_string ("OS442 - OFFSET") COMMA_SOURCE_FILE_AT_LINE (376)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ACTION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          nt_st_5F_action_5F_params_ (inLexique, var_cas_actions) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ADJUSTABLE) COMMA_HERE) ;
          GGS_location  var_cas_adj_loc = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_9 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              GGS_basic_type  var_cas_max_retard = function_void_obj (inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
              GGS_basic_type  var_cas_max_advance = function_void_obj (inLexique COMMA_SOURCE_FILE_AT_LINE (387)) ;
              { bool syntaxRepeat_10 = true ;
                while (syntaxRepeat_10) {
                  switch (select_goil_5F_obj_5F_scheduletable_10 (inLexique)) {
                    case 2 : {
                      GGS_luint64  var_cas_ret ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAX_5F_RETARD) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                      inLexique.assignFromAttribute_integerNumber (var_cas_ret) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                      ::routine_set_uint64 (inLexique,  var_cas_max_retard,  var_cas_ret,  GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (392)) ;
                      } break ;
                    case 3 : {
                      GGS_luint64  var_cas_adv ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAX_5F_ADVANCE) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                      inLexique.assignFromAttribute_integerNumber (var_cas_adv) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                      ::routine_set_uint64 (inLexique,  var_cas_max_advance,  var_cas_adv,  GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (396)) ;
                      } break ;
                    default :
                      syntaxRepeat_10 = false ;
                      break ;
                  }
                }
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              ::routine_set_adjustable (inLexique,  var_cas_adjust,  GGS_adjustable_true ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (401)), var_cas_adj_loc, var_cas_max_retard, var_cas_max_advance COMMA_SOURCE_FILE_AT_LINE (401)) COMMA_SOURCE_FILE_AT_LINE (399)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_HERE) ;
              ::routine_set_adjustable (inLexique,  var_cas_adjust,  GGS_adjustable_false ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (404)), var_cas_adj_loc COMMA_SOURCE_FILE_AT_LINE (404)) COMMA_SOURCE_FILE_AT_LINE (404)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  var_cas_epl = GGS_expiry_point_obj ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (409)), var_cas_offset, var_cas_ep_name, var_cas_adjust, var_cas_actions COMMA_SOURCE_FILE_AT_LINE (408)) ;
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_expiry_5F_pt_5F_params_i6_parse (C_Lexique_goil_5F_lexique & inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
      switch (select_goil_5F_obj_5F_scheduletable_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_OFFSET) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ACTION) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          nt_st_5F_action_5F_params_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ADJUSTABLE) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
          switch (select_goil_5F_obj_5F_scheduletable_9 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
              { bool syntaxRepeat_10 = true ;
                while (syntaxRepeat_10) {
                  switch (select_goil_5F_obj_5F_scheduletable_10 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAX_5F_RETARD) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                      } break ;
                    case 3 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_MAX_5F_ADVANCE) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_HERE) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_10 = false ;
                      break ;
                  }
                }
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'st_action_params'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_action_5F_params_i7_ (C_Lexique_goil_5F_lexique & inLexique,
                                GGS_action_list  &var_cas_actions) {
  switch (select_goil_5F_obj_5F_scheduletable_11 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ACTIVATETASK) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
      GGS_bool var_cas_task_known = GGS_bool (false) ;
      GGS_lstring  var_cas_task = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (424)) ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
          switch (select_goil_5F_obj_5F_scheduletable_12 (inLexique)) {
            case 2 : {
              GGS_lstring  var_cas_new_task ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TASK) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_5F_token (var_cas_new_task) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
              const GGS_bool cond_11327 = var_cas_task_known ;
              if (cond_11327.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (431)) ;
                var_cas_task.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (431)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (432)) ;
              }else if (cond_11327.isBuiltAndFalse ()) {
                var_cas_task = var_cas_new_task ;
                var_cas_task_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      const GGS_bool cond_11547 = var_cas_task_known ;
      if (cond_11547.isBuiltAndTrue ()) {
        GGS_activatetask_action  var_cas_sdata = GGS_activatetask_action ::constructor_new (inLexique, GGS_location (inLexique), var_cas_task COMMA_SOURCE_FILE_AT_LINE (438)) ;
        var_cas_actions.addAssign_operation (GGS_uint (1U), var_cas_sdata) ;
      }else if (cond_11547.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("incomplete action") COMMA_SOURCE_FILE_AT_LINE (442)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_bool var_cas_task_known = GGS_bool (false) ;
      GGS_bool var_cas_event_known = GGS_bool (false) ;
      GGS_lstring  var_cas_task = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (447)) ;
      GGS_lstring  var_cas_event = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (448)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SETEVENT) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_13 = true ;
        while (syntaxRepeat_13) {
          switch (select_goil_5F_obj_5F_scheduletable_13 (inLexique)) {
            case 2 : {
              GGS_lstring  var_cas_new_task ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TASK) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_5F_token (var_cas_new_task) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
              const GGS_bool cond_12083 = var_cas_task_known ;
              if (cond_12083.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute already defined for this schedule table SETEVENT action") COMMA_SOURCE_FILE_AT_LINE (457)) ;
                var_cas_task.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (457)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (458)) ;
              }else if (cond_12083.isBuiltAndFalse ()) {
                var_cas_task = var_cas_new_task ;
                var_cas_task_known = GGS_bool (true) ;
              }
              } break ;
            case 3 : {
              GGS_lstring  var_cas_new_event ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EVENT) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
              inLexique.assignFromAttribute_att_5F_token (var_cas_new_event) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
              const GGS_bool cond_12429 = var_cas_event_known ;
              if (cond_12429.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("EVENT attribute already defined for this schedule table ACTIVATETASK action") COMMA_SOURCE_FILE_AT_LINE (467)) ;
                var_cas_event.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (467)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (468)) ;
              }else if (cond_12429.isBuiltAndFalse ()) {
                var_cas_event = var_cas_new_event ;
                var_cas_event_known = GGS_bool (true) ;
              }
              } break ;
            default :
              syntaxRepeat_13 = false ;
              break ;
          }
        }
      }
      const GGS_bool cond_12665 = (var_cas_task_known).operator_and (var_cas_event_known) ;
      if (cond_12665.isBuiltAndTrue ()) {
        GGS_setevent_action  var_cas_sdata = GGS_setevent_action ::constructor_new (inLexique, GGS_location (inLexique), var_cas_task, var_cas_event COMMA_SOURCE_FILE_AT_LINE (474)) ;
        var_cas_actions.addAssign_operation (GGS_uint (2U), var_cas_sdata) ;
      }else if (cond_12665.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("incomplete action") COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_obj_scheduletable::rule_goil_5F_obj_5F_scheduletable_st_5F_action_5F_params_i7_parse (C_Lexique_goil_5F_lexique & inLexique) {
  switch (select_goil_5F_obj_5F_scheduletable_11 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ACTIVATETASK) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_12 = true ;
        while (syntaxRepeat_12) {
          switch (select_goil_5F_obj_5F_scheduletable_12 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TASK) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_12 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_SETEVENT) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_13 = true ;
        while (syntaxRepeat_13) {
          switch (select_goil_5F_obj_5F_scheduletable_13 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TASK) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_EVENT) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_13 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

