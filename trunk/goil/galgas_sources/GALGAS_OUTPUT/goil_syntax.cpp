//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_syntax.cpp'                           *
//                Generated by version 1.3.1 (LL(1) grammar)                 *
//                     october 10th, 2006, at 11h4'28"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "goil_syntax.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'file'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_file_goil_syntax_37_12_ (goil_lexique & _inLexique) {
  GGS_lstring  var_cas_version ;
  GGS_lstring  var_cas_description ;
  GGS_implementation  var_cas_imp ;
  var_cas_imp = GGS_implementation::constructor_emptyMap (_inLexique COMMA_HERE) ;
  nt_OIL_version_ (_inLexique, var_cas_version, var_cas_description) ;
  nt_implementation_definition_ (_inLexique, var_cas_imp) ;
  _inLexique.printMessage (var_cas_version.reader_value (_inLexique SOURCE_FILE_AT_LINE (43)) SOURCE_FILE_AT_LINE (43)) ;
  _inLexique.printMessage (var_cas_description.reader_value (_inLexique SOURCE_FILE_AT_LINE (44)) SOURCE_FILE_AT_LINE (44)) ;
  _inLexique.printMessage (var_cas_imp.reader_description (_inLexique SOURCE_FILE_AT_LINE (45)) SOURCE_FILE_AT_LINE (45)) ;
  if (var_cas_version.isBuilt () &&
      var_cas_description.isBuilt ()) {
    ::routine_generateHeader (_inLexique,  var_cas_version,  var_cas_description SOURCE_FILE_AT_LINE (47)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'description'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_description_goil_syntax_53_19_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_description) {
  switch (select_goil_syntax_0 (_inLexique)) {
    case 1 : {
      var_cas_description = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__3A) ;
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_string) ;
      var_cas_description.defineAttribute (_inLexique.a_string, _inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'OIL_version'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_OIL_version_goil_syntax_65_19_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_version,
                                GGS_lstring  &var_cas_description) {
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_OIL_5FVERSION) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__3D) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_string) ;
  var_cas_version.defineAttribute (_inLexique.a_string, _inLexique) ;
  nt_description_ (_inLexique, var_cas_description) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'implementation_definition'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_implementation_definition_goil_syntax_77_33_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp) {
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_IMPLEMENTATION) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_idf) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__7B) ;
  nt_implementation_spec_list_ (_inLexique, var_cas_imp) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__7D) ;
  GGS_lstring  var_cas_2053 ;
  nt_description_ (_inLexique, var_cas_2053) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'implementation_spec_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_implementation_spec_list_goil_syntax_87_32_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp) {
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_goil_syntax_1 (_inLexique)) {
        case 2 : {
          nt_implementation_spec_ (_inLexique, var_cas_imp) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'implementation_spec'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_implementation_spec_goil_syntax_93_27_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp) {
  GGS_implementationSpec  var_cas_spec ;
  var_cas_spec = GGS_implementationSpec::constructor_emptyMap (_inLexique COMMA_HERE) ;
  switch (select_goil_syntax_2 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_OS) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "OS"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (96)) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_TASK) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "TASK"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (98)) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_COUNTER) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "COUNTER"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (100)) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_ALARM) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "ALARM"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (102)) ;
      } break ;
    case 5 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_RESOURCE) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "RESOURCE"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (104)) ;
      } break ;
    case 6 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_EVENT) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "EVENT"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (106)) ;
      } break ;
    case 7 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_ISR) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "ISR"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (108)) ;
      } break ;
    case 8 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_MESSAGE) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "MESSAGE"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (110)) ;
      } break ;
    case 9 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_COM) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "COM"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (112)) ;
      } break ;
    case 10 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_NM) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "NM"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (114)) ;
      } break ;
    case 11 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_APPMODE) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "APPMODE"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (116)) ;
      } break ;
    case 12 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_IPDU) ;
      nt_implementation_list_ (_inLexique, var_cas_spec) ;
      var_cas_imp.method_insertSpec (_inLexique, GGS_lstring::constructor_new (_inLexique, GGS_string (true, "IPDU"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec SOURCE_FILE_AT_LINE (118)) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_3889 ;
  nt_description_ (_inLexique, var_cas_3889) ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__3B) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'implementation_list'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_implementation_list_goil_syntax_124_27_ (goil_lexique & _inLexique,
                                GGS_implementationSpec  &var_cas_spec) {
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__7B) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
      switch (select_repeat_goil_syntax_3 (_inLexique)) {
        case 2 : {
          nt_impl_attr_def_ (_inLexique, var_cas_spec) ;
          _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__3B) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1__7D) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_impl_attr_def_goil_syntax_134_21_ (goil_lexique & _inLexique,
                                GGS_implementationSpec  &/* var_cas_spec */) {
  GGS_string var_cas_type ;
  GGS_bool var_cas_auto ;
  GGS_number_set  var_cas_range ;
  switch (select_goil_syntax_4 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_UINT32) ;
      var_cas_type = GGS_string (true, "UINT32") ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_INT32) ;
      var_cas_type = GGS_string (true, "INT32") ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_UINT64) ;
      var_cas_type = GGS_string (true, "UINT64") ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_INT64) ;
      var_cas_type = GGS_string (true, "INT64") ;
      } break ;
    default :
      break ;
  }
  nt_auto_specifier_ (_inLexique, var_cas_auto) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_impl_attr_def_goil_syntax_150_21_ (goil_lexique & _inLexique,
                                GGS_implementationSpec  &/* var_cas_spec */) {
  GGS_bool var_cas_auto ;
  _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_FLOAT) ;
  nt_auto_specifier_ (_inLexique, var_cas_auto) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'auto_specifier'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
goil_syntax::
pr_auto_specifier_goil_syntax_160_22_ (goil_lexique & _inLexique,
                                GGS_bool &var_cas_auto) {
  switch (select_goil_syntax_5 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (goil_lexique::goil_lexique_1_WITH_5FAUTO) ;
      var_cas_auto = GGS_bool (true, true) ;
      } break ;
    case 2 : {
      var_cas_auto = GGS_bool (true, false) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

