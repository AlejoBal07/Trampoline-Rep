//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_syntax.cpp'                           *
//                        Generated by version 1.8.3                         *
//                       june 3rd, 2009, at 11h4'37"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_syntax.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "goil_cpu_level_include.h"
#include "goil_file_level_include.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'start'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_start_goil_syntax_133_12_ (goil_lexique & _inLexique) {
  GGS_implementation  var_cas_imp ;
  var_cas_imp = GGS_implementation ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_void  var_cas_void_obj ;
  var_cas_void_obj = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_root_obj  var_cas_cpu ;
  var_cas_cpu = GGS_root_obj ::constructor_new (_inLexique, GGS_os_obj ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstringlist ::constructor_emptyList (), GGS_lstringlist ::constructor_emptyList (), GGS_lstringlist ::constructor_emptyList (), GGS_lstringlist ::constructor_emptyList (), GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_trace ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE), GGS_ident_map ::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_HERE), GGS_com ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_bool (false), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstringlist ::constructor_emptyList (), GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE), GGS_lstringlist ::constructor_emptyList () COMMA_HERE), GGS_task_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_counter_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_alarm_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_resource_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_event_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_isr_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_message_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_netmess_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_scheduletable_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_app_map ::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_HERE) ;
  nt_file_ (_inLexique, var_cas_imp, var_cas_cpu) ;
  ::routine_set_defaults (_inLexique,  var_cas_imp,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (205)) ;
  ::routine_verify_all (_inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (206)) ;
  ::routine_generate_all (_inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (207)) ;
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    ::routine_generate_all (_inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (210)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'file'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_file_goil_syntax_215_11_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp,
                                GGS_root_obj  &var_cas_cpu) {
  GGS_lstring  var_cas_version ;
  var_cas_version = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  var_cas_desc = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_syntax_0 (_inLexique)) {
        case 2 : {
          nt_include_file_level_ (_inLexique, var_cas_imp, var_cas_cpu) ;
          } break ;
        case 3 : {
          nt_OIL_version_ (_inLexique, var_cas_version, var_cas_desc) ;
          } break ;
        case 4 : {
          nt_implementation_definition_ (_inLexique, var_cas_imp) ;
          } break ;
        case 5 : {
          nt_application_definition_ (_inLexique, var_cas_cpu) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'description'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_description_goil_syntax_237_18_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_desc) {
  switch (select_goil_syntax_1 (_inLexique)) {
    case 1 : {
      var_cas_desc = GGS_lstring ::constructor_new (_inLexique, GGS_string (""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3A) COMMA_HERE) ;
      _inLexique._assignFromAttribute_a_string (var_cas_desc) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'OIL_version'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_OIL_version_goil_syntax_249_18_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_version,
                                GGS_lstring  &var_cas_desc) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OIL_5FVERSION) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  _inLexique._assignFromAttribute_a_string (var_cas_version) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'application_definition'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_application_definition_goil_syntax_260_29_ (goil_lexique & _inLexique,
                                GGS_root_obj  &var_cas_file) {
  GGS_os_obj  var_cas_os ;
  var_cas_os = var_cas_file.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
  GGS_com  var_cas_com ;
  var_cas_com = var_cas_file.reader_com (_inLexique COMMA_SOURCE_FILE_AT_LINE (264)) ;
  GGS_task_map  var_cas_tasks ;
  var_cas_tasks = var_cas_file.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (265)) ;
  GGS_counter_map  var_cas_counters ;
  var_cas_counters = var_cas_file.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ;
  GGS_alarm_map  var_cas_alarms ;
  var_cas_alarms = var_cas_file.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (267)) ;
  GGS_resource_map  var_cas_resources ;
  var_cas_resources = var_cas_file.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (268)) ;
  GGS_event_map  var_cas_events ;
  var_cas_events = var_cas_file.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (269)) ;
  GGS_isr_map  var_cas_isrs ;
  var_cas_isrs = var_cas_file.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
  GGS_message_map  var_cas_messages ;
  var_cas_messages = var_cas_file.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (271)) ;
  GGS_netmess_map  var_cas_net_messages ;
  var_cas_net_messages = var_cas_file.reader_net_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (272)) ;
  GGS_scheduletable_map  var_cas_scheduletables ;
  var_cas_scheduletables = var_cas_file.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ;
  GGS_app_map  var_cas_applis ;
  var_cas_applis = var_cas_file.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_CPU) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  nt_object_definition_list_ (_inLexique, var_cas_os, var_cas_com, var_cas_tasks, var_cas_counters, var_cas_alarms, var_cas_resources, var_cas_events, var_cas_isrs, var_cas_messages, var_cas_net_messages, var_cas_scheduletables, var_cas_applis) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  GGS_lstring  automatic_var_0 ;
  nt_description_ (_inLexique, automatic_var_0) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_file = GGS_root_obj ::constructor_new (_inLexique, var_cas_os, var_cas_com, var_cas_tasks, var_cas_counters, var_cas_alarms, var_cas_resources, var_cas_events, var_cas_isrs, var_cas_messages, var_cas_net_messages, var_cas_scheduletables, var_cas_applis COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'object_definition_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_object_definition_list_goil_syntax_313_29_ (goil_lexique & _inLexique,
                                GGS_os_obj  &var_cas_os,
                                GGS_com  &var_cas_com,
                                GGS_task_map  &var_cas_tasks,
                                GGS_counter_map  &var_cas_counters,
                                GGS_alarm_map  &var_cas_alarms,
                                GGS_resource_map  &var_cas_resources,
                                GGS_event_map  &var_cas_events,
                                GGS_isr_map  &var_cas_isrs,
                                GGS_message_map  &var_cas_messages,
                                GGS_netmess_map  &var_cas_net_messages,
                                GGS_scheduletable_map  &var_cas_scheduletables,
                                GGS_app_map  &var_cas_applis) {
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_goil_syntax_2 (_inLexique)) {
        case 2 : {
          nt_os_ (_inLexique, var_cas_os) ;
          } break ;
        case 3 : {
          nt_appmode_ (_inLexique) ;
          GGS_lstring  automatic_var_1 ;
          nt_description_ (_inLexique, automatic_var_1) ;
          } break ;
        case 4 : {
          nt_task_ (_inLexique, var_cas_tasks) ;
          } break ;
        case 5 : {
          nt_counter_ (_inLexique, var_cas_counters) ;
          } break ;
        case 6 : {
          nt_alarm_ (_inLexique, var_cas_alarms) ;
          GGS_lstring  automatic_var_2 ;
          nt_description_ (_inLexique, automatic_var_2) ;
          } break ;
        case 7 : {
          nt_resource_ (_inLexique, var_cas_resources) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (_inLexique, automatic_var_3) ;
          } break ;
        case 8 : {
          nt_event_ (_inLexique, var_cas_events) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (_inLexique, automatic_var_4) ;
          } break ;
        case 9 : {
          nt_isr_ (_inLexique, var_cas_isrs) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (_inLexique, automatic_var_5) ;
          } break ;
        case 10 : {
          nt_mess_ (_inLexique, var_cas_messages) ;
          GGS_lstring  automatic_var_6 ;
          nt_description_ (_inLexique, automatic_var_6) ;
          } break ;
        case 11 : {
          nt_networkmess_ (_inLexique, var_cas_net_messages) ;
          GGS_lstring  automatic_var_7 ;
          nt_description_ (_inLexique, automatic_var_7) ;
          } break ;
        case 12 : {
          nt_com_ (_inLexique, var_cas_com) ;
          GGS_lstring  automatic_var_8 ;
          nt_description_ (_inLexique, automatic_var_8) ;
          } break ;
        case 13 : {
          nt_ipdu_ (_inLexique) ;
          GGS_lstring  automatic_var_9 ;
          nt_description_ (_inLexique, automatic_var_9) ;
          } break ;
        case 14 : {
          nt_nm_ (_inLexique) ;
          GGS_lstring  automatic_var_10 ;
          nt_description_ (_inLexique, automatic_var_10) ;
          } break ;
        case 15 : {
          nt_scheduletable_ (_inLexique, var_cas_scheduletables) ;
          GGS_lstring  automatic_var_11 ;
          nt_description_ (_inLexique, automatic_var_11) ;
          } break ;
        case 16 : {
          nt_appli_ (_inLexique, var_cas_applis) ;
          GGS_lstring  automatic_var_12 ;
          nt_description_ (_inLexique, automatic_var_12) ;
          } break ;
        case 17 : {
          nt_include_cpu_level_ (_inLexique, var_cas_os, var_cas_com, var_cas_tasks, var_cas_counters, var_cas_alarms, var_cas_resources, var_cas_events, var_cas_isrs, var_cas_messages, var_cas_net_messages, var_cas_scheduletables, var_cas_applis) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of production rule 'nm'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_nm_goil_syntax_361_9_ (goil_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NM) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'boolean'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_boolean_goil_syntax_372_14_ (goil_lexique & _inLexique,
                                GGS_lbool  &var_cas_val) {
  switch (select_goil_syntax_3 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
      var_cas_val = GGS_lbool ::constructor_new (_inLexique, GGS_bool (true), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
      var_cas_val = GGS_lbool ::constructor_new (_inLexique, GGS_bool (false), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'free_field'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_free_field_goil_syntax_382_17_ (goil_lexique & _inLexique,
                                GGS_ident_map  &var_cas_ids) {
  GGS_lstring  var_cas_idf ;
  GGS_basic_type  var_cas_val ;
  _inLexique._assignFromAttribute_att_token (var_cas_idf) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  switch (select_goil_syntax_4 (_inLexique)) {
    case 1 : {
      GGS_lstring  var_cas_value ;
      _inLexique._assignFromAttribute_att_token (var_cas_value) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
      var_cas_val = GGS_string_class ::constructor_new (_inLexique, var_cas_value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (390)), var_cas_value.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (390)) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_luint64  var_cas_value ;
      _inLexique._assignFromAttribute_integerNumber (var_cas_value) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
      var_cas_val = GGS_uint64_class ::constructor_new (_inLexique, var_cas_value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)), var_cas_value.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lbool  var_cas_value ;
      nt_boolean_ (_inLexique, var_cas_value) ;
      var_cas_val = GGS_bool_class ::constructor_new (_inLexique, var_cas_idf.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)), var_cas_value.reader_bool (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ids.modifier_put (_inLexique, var_cas_idf, var_cas_val COMMA_SOURCE_FILE_AT_LINE (400)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'include_file_level'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_include_file_level_goil_syntax_403_25_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp,
                                GGS_root_obj  &var_cas_cpu) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_include) COMMA_HERE) ;
  GGS_lstring  var_cas_file_name ;
  switch (select_goil_syntax_5 (_inLexique)) {
    case 1 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_g_5Fstring) COMMA_HERE) ;
      ::routine_file_in_path (_inLexique,  var_cas_file_name COMMA_SOURCE_FILE_AT_LINE (411)) ;
      } break ;
    case 2 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    goil_file_level_include::_performSourceFileParsing_ (_inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_file_name,
                                  var_cas_imp,
                                  var_cas_cpu
                                  COMMA_SOURCE_FILE_AT_LINE (415)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'include_cpu_level'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_include_cpu_level_goil_syntax_421_24_ (goil_lexique & _inLexique,
                                GGS_os_obj  &var_cas_os,
                                GGS_com  &var_cas_com,
                                GGS_task_map  &var_cas_tasks,
                                GGS_counter_map  &var_cas_counters,
                                GGS_alarm_map  &var_cas_alarms,
                                GGS_resource_map  &var_cas_resources,
                                GGS_event_map  &var_cas_events,
                                GGS_isr_map  &var_cas_isrs,
                                GGS_message_map  &var_cas_messages,
                                GGS_netmess_map  &var_cas_net_messages,
                                GGS_scheduletable_map  &var_cas_scheduletables,
                                GGS_app_map  &var_cas_applis) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_include) COMMA_HERE) ;
  GGS_lstring  var_cas_file_name ;
  switch (select_goil_syntax_6 (_inLexique)) {
    case 1 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_g_5Fstring) COMMA_HERE) ;
      ::routine_file_in_path (_inLexique,  var_cas_file_name COMMA_SOURCE_FILE_AT_LINE (439)) ;
      } break ;
    case 2 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    goil_cpu_level_include::_performSourceFileParsing_ (_inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_file_name,
                                  var_cas_os,
                                  var_cas_com,
                                  var_cas_tasks,
                                  var_cas_counters,
                                  var_cas_alarms,
                                  var_cas_resources,
                                  var_cas_events,
                                  var_cas_isrs,
                                  var_cas_messages,
                                  var_cas_net_messages,
                                  var_cas_scheduletables,
                                  var_cas_applis
                                  COMMA_SOURCE_FILE_AT_LINE (443)) ;
  }
}

//---------------------------------------------------------------------------*

