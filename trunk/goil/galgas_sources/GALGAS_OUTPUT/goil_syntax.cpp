//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_syntax.cpp'                           *
//                        Generated by version 1.8.1                         *
//                      april 20th, 2009, at 17h0'16"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 456
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_syntax.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"
#include "goil_cpu_level_include.h"
#include "goil_file_level_include.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'start'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_start_goil_syntax_130_12_ (goil_lexique & _inLexique) {
  GGS_implementation  var_cas_imp ;
  var_cas_imp = GGS_implementation ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_void  var_cas_void_obj ;
  var_cas_void_obj = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_root_obj  var_cas_cpu ;
  var_cas_cpu = GGS_root_obj ::constructor_new (_inLexique, GGS_os_obj ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstringlist ::constructor_emptyList (), GGS_lstringlist ::constructor_emptyList (), GGS_lstringlist ::constructor_emptyList (), GGS_lstringlist ::constructor_emptyList (), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_trace ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE), GGS_ident_map ::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_HERE), GGS_com ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_bool (true, false), var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, var_cas_void_obj, GGS_lstringlist ::constructor_emptyList (), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstringlist ::constructor_emptyList () COMMA_HERE), GGS_task_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_counter_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_alarm_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_resource_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_event_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_isr_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_message_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_netmess_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_scheduletable_map ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_app_map ::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_HERE) ;
  nt_file_ (_inLexique, var_cas_imp, var_cas_cpu) ;
  GGS_os_obj  var_cas_os ;
  var_cas_os = var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  GGS_com  var_cas_com ;
  var_cas_com = var_cas_cpu.reader_com (_inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
  GGS_task_map  var_cas_tasks ;
  var_cas_tasks = var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (191)) ;
  GGS_counter_map  var_cas_counters ;
  var_cas_counters = var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
  GGS_alarm_map  var_cas_alarms ;
  var_cas_alarms = var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (193)) ;
  GGS_resource_map  var_cas_resources ;
  var_cas_resources = var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ;
  GGS_event_map  var_cas_events ;
  var_cas_events = var_cas_cpu.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (195)) ;
  GGS_isr_map  var_cas_isrs ;
  var_cas_isrs = var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  GGS_message_map  var_cas_messages ;
  var_cas_messages = var_cas_cpu.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ;
  GGS_netmess_map  var_cas_net_messages ;
  var_cas_net_messages = var_cas_cpu.reader_net_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ;
  GGS_scheduletable_map  var_cas_scheduletables ;
  var_cas_scheduletables = var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
  GGS_app_map  var_cas_applis ;
  var_cas_applis = var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
  if ((var_cas_imp.reader_hasKey (_inLexique, GGS_string (true, "task") COMMA_SOURCE_FILE_AT_LINE (202))).isBuiltAndTrue ()) {
    GGS_implementation_spec  var_cas_spec ;
    const GGS_implementation  _temp_6014 = var_cas_imp ;
    if (_temp_6014._isBuilt ()) {
      _temp_6014 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "task"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (204)) ;
    }
    ::routine_verify_and_set_tasks_defaults (_inLexique,  var_cas_tasks,  var_cas_spec COMMA_SOURCE_FILE_AT_LINE (205)) ;
  }
  if ((var_cas_imp.reader_hasKey (_inLexique, GGS_string (true, "isr") COMMA_SOURCE_FILE_AT_LINE (208))).isBuiltAndTrue ()) {
    GGS_implementation_spec  var_cas_spec ;
    const GGS_implementation  _temp_6206 = var_cas_imp ;
    if (_temp_6206._isBuilt ()) {
      _temp_6206 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "isr"), GGS_location (_inLexique) COMMA_HERE), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (210)) ;
    }
    ::routine_verify_and_set_isrs_defaults (_inLexique,  var_cas_isrs,  var_cas_spec COMMA_SOURCE_FILE_AT_LINE (211)) ;
  }
  ::routine_tasks_well_formed (_inLexique,  var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (214)) ;
  ::routine_counters_well_formed (_inLexique,  var_cas_counters COMMA_SOURCE_FILE_AT_LINE (215)) ;
  ::routine_alarms_well_formed (_inLexique,  var_cas_alarms COMMA_SOURCE_FILE_AT_LINE (216)) ;
  ::routine_resources_well_formed (_inLexique,  var_cas_resources COMMA_SOURCE_FILE_AT_LINE (217)) ;
  ::routine_isrs_well_formed (_inLexique,  var_cas_isrs COMMA_SOURCE_FILE_AT_LINE (218)) ;
  ::routine_events_well_formed (_inLexique,  var_cas_events COMMA_SOURCE_FILE_AT_LINE (219)) ;
  ::routine_networkmessages_well_formed (_inLexique,  var_cas_net_messages COMMA_SOURCE_FILE_AT_LINE (220)) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (224)))).isBuiltAndTrue ()) {
    ::routine_schedule_tables_well_formed (_inLexique,  var_cas_scheduletables COMMA_SOURCE_FILE_AT_LINE (225)) ;
  }
  ::routine_resolve_linked_resources (_inLexique,  var_cas_resources COMMA_SOURCE_FILE_AT_LINE (229)) ;
  ::routine_all_events_and_resources_and_messages_defined_and_used (_inLexique,  var_cas_tasks,  var_cas_isrs,  var_cas_events,  var_cas_resources,  var_cas_messages COMMA_SOURCE_FILE_AT_LINE (230)) ;
  ::routine_all_alarm_actions_correct (_inLexique,  var_cas_alarms,  var_cas_tasks,  var_cas_counters COMMA_SOURCE_FILE_AT_LINE (232)) ;
  ::routine_counters_of_alarms_defined (_inLexique,  var_cas_alarms,  var_cas_counters COMMA_SOURCE_FILE_AT_LINE (233)) ;
  ::routine_networkmessages_exist_and_ok (_inLexique,  var_cas_messages,  var_cas_net_messages COMMA_SOURCE_FILE_AT_LINE (234)) ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (238)))).isBuiltAndTrue ()) {
    ::routine_schedule_tables_counters_exist_and_compatible (_inLexique,  var_cas_scheduletables,  var_cas_counters COMMA_SOURCE_FILE_AT_LINE (239)) ;
    ::routine_schedule_tables_tasks_and_events_exist (_inLexique,  var_cas_scheduletables,  var_cas_tasks,  var_cas_events COMMA_SOURCE_FILE_AT_LINE (240)) ;
    ::routine_apps_well_formed (_inLexique,  var_cas_applis,  var_cas_tasks,  var_cas_isrs,  var_cas_alarms,  var_cas_scheduletables,  var_cas_counters,  var_cas_resources,  var_cas_messages COMMA_SOURCE_FILE_AT_LINE (241)) ;
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_string var_cas_timestamp ;
    var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (_inLexique COMMA_HERE) ;
    GGS_string var_cas_temp_dir ;
    ::routine_templates_directory (_inLexique,  var_cas_temp_dir COMMA_SOURCE_FILE_AT_LINE (249)) ;
    if (((var_cas_temp_dir)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
      GGS_string var_cas_target ;
      var_cas_target = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (252))) ;
      if (((var_cas_target)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        GGS_string var_cas_header ;
        GGS_string var_cas_obj_header ;
        GGS_string var_cas_implementation ;
        GGS_string var_cas_types ;
        GGS_config  var_cas_cfg ;
        var_cas_cfg = GGS_config ::constructor_emptyMap (_inLexique COMMA_HERE) ;
        GGS_lstring  var_cas_cfg_file ;
        ::routine_config_file (_inLexique,  var_cas_cfg_file COMMA_SOURCE_FILE_AT_LINE (261)) ;
        if (((var_cas_cfg_file.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (262)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
          const GGS_string _depExtension = GGS_string (true, "") ;
          const GGS_string _depPath = GGS_string (true, "") ;
          if (_depExtension._isBuilt () && _depPath._isBuilt ()) {
            cfg_grammar::_performSourceFileParsing_ (_inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          var_cas_cfg_file,
                                          var_cas_cfg
                                          COMMA_SOURCE_FILE_AT_LINE (263)) ;
          }
        }
        ::routine_retrieveTemplateString (_inLexique,  var_cas_header,  GGS_string (true, "app_header") COMMA_SOURCE_FILE_AT_LINE (267)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_obj_header,  GGS_string (true, "obj_header") COMMA_SOURCE_FILE_AT_LINE (268)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_implementation,  GGS_string (true, "app_implementation") COMMA_SOURCE_FILE_AT_LINE (269)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_types,  GGS_string (true, "types") COMMA_SOURCE_FILE_AT_LINE (270)) ;
        GGS_prefix_map  var_cas_prefix ;
        var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
        ::routine_init_prefixes (_inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (273)) ;
        GGS_uint  var_cas_max_task_prio ;
        GGS_uint  var_cas_max_prio ;
        GGS_prio_map  var_cas_tasks_actual_prio ;
        ::routine_compute_actual_task_priority (_inLexique,  var_cas_tasks,  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (278)) ;
        GGS_prio_map  var_cas_isrs_actual_prio ;
        ::routine_compute_actual_isr_priority (_inLexique,  var_cas_isrs,  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (284)) ;
        GGS_prio_map  var_cas_rez_actual_prio ;
        GGS_string_map  var_cas_rez_comments ;
        ::routine_compute_rez_priority (_inLexique,  var_cas_resources,  var_cas_tasks,  var_cas_tasks_actual_prio,  var_cas_isrs,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (292)) ;
        GGS_prio_list  var_cas_ready_list ;
        ::routine_compute_ready_list (_inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (302)) ;
        GGS_string_map  var_cas_app_for_obj ;
        ::routine_compute_app_for_obj (_inLexique,  var_cas_applis,  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (311)) ;
        ::routine_generate_flags (_inLexique,  var_cas_os,  var_cas_tasks,  var_cas_isrs,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (315)) ;
        const GGS_com  _temp_10002 = var_cas_com ;
        if (_temp_10002._isBuilt ()) {
          _temp_10002 (HERE)->method_generate (_inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (321)) ;
        }
        ::routine_generate_events (_inLexique,  var_cas_events,  var_cas_tasks,  var_cas_prefix,  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (323)) ;
        ::routine_generate_counters (_inLexique,  var_cas_counters,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (330)) ;
        ::routine_generate_alarms (_inLexique,  var_cas_alarms,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (337)) ;
        ::routine_generate_tasks (_inLexique,  var_cas_cfg,  var_cas_tasks,  var_cas_resources,  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (344)) ;
        ::routine_generate_isrs (_inLexique,  var_cas_cfg,  var_cas_isrs,  var_cas_resources,  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (354)) ;
        ::routine_generate_proc_table (_inLexique,  var_cas_tasks,  var_cas_isrs,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (366)) ;
        ::routine_generate_mp (_inLexique,  var_cas_tasks,  var_cas_isrs,  var_cas_applis,  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (373)) ;
        ::routine_generate_resources (_inLexique,  var_cas_resources,  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (379)) ;
        ::routine_generate_messages (_inLexique,  var_cas_messages,  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (388)) ;
        ::routine_generate_network_messages (_inLexique,  var_cas_net_messages,  var_cas_messages,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (395)) ;
        if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (402)))).isBuiltAndTrue ()) {
          ::routine_generate_schedule_tables (_inLexique,  var_cas_scheduletables,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (403)) ;
          ::routine_generate_timing_prot (_inLexique,  var_cas_tasks,  var_cas_resources,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (409)) ;
          ::routine_generate_apps (_inLexique,  var_cas_applis,  var_cas_tasks,  var_cas_isrs,  var_cas_alarms,  var_cas_resources,  var_cas_scheduletables,  var_cas_counters,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (413)) ;
        }
        ::routine_generate_ready_list (_inLexique,  var_cas_os,  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (426)) ;
        ::routine_generate_types (_inLexique,  var_cas_tasks,  var_cas_isrs,  var_cas_alarms,  var_cas_counters,  var_cas_resources,  var_cas_scheduletables,  var_cas_applis,  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (433)) ;
        GGS_string var_cas_directory ;
        ::routine_getProjectName (_inLexique,  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (450)) ;
        GGS_string var_cas_header_file ;
        var_cas_header_file = GGS_string (true, "tpl_os_generated_configuration.h") ;
        GGS_string var_cas_obj_header_file ;
        var_cas_obj_header_file = GGS_string (true, "tpl_app_objects.h") ;
        GGS_string var_cas_implementation_file ;
        var_cas_implementation_file = GGS_string (true, "tpl_os_generated_configuration.c") ;
        GGS_string var_cas_types_file ;
        var_cas_types_file = GGS_string (true, "tpl_app_custom_types.h") ;
        var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (457)) ;
        var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (458)) ;
        var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (459)) ;
        var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (460)) ;
        var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (461)) ;
        var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (462)) ;
        var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (463)) ;
        var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (464)) ;
        var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (465)) ;
        GGS_uint  var_cas_error_count ;
        var_cas_error_count = GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE) ;
        var_cas_header_file = ((var_cas_directory)._operator_concat (GGS_string (true, "/")))._operator_concat (var_cas_header_file) ;
        var_cas_obj_header_file = ((var_cas_directory)._operator_concat (GGS_string (true, "/")))._operator_concat (var_cas_obj_header_file) ;
        var_cas_implementation_file = ((var_cas_directory)._operator_concat (GGS_string (true, "/")))._operator_concat (var_cas_implementation_file) ;
        var_cas_types_file = ((var_cas_directory)._operator_concat (GGS_string (true, "/")))._operator_concat (var_cas_types_file) ;
        if (((var_cas_error_count)._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (475)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string (true, "creating "))._operator_concat (var_cas_header_file))._operator_concat (GGS_string (true, "\n")) COMMA_SOURCE_FILE_AT_LINE (476)) ;
          }
          const GGS_string _temp_15617 = var_cas_header ;
          if (_temp_15617._isBuilt ()) {
            _temp_15617 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (478)) ;
          }
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (479)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string (true, "creating "))._operator_concat (var_cas_obj_header_file))._operator_concat (GGS_string (true, "\n")) COMMA_SOURCE_FILE_AT_LINE (480)) ;
          }
          const GGS_string _temp_15845 = var_cas_obj_header ;
          if (_temp_15845._isBuilt ()) {
            _temp_15845 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (482)) ;
          }
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (483)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string (true, "creating "))._operator_concat (var_cas_implementation_file))._operator_concat (GGS_string (true, "\n")) COMMA_SOURCE_FILE_AT_LINE (484)) ;
          }
          const GGS_string _temp_16085 = var_cas_implementation ;
          if (_temp_16085._isBuilt ()) {
            _temp_16085 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (486)) ;
          }
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (487)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string (true, "creating "))._operator_concat (var_cas_types_file))._operator_concat (GGS_string (true, "\n")) COMMA_SOURCE_FILE_AT_LINE (488)) ;
          }
          const GGS_string _temp_16312 = var_cas_types ;
          if (_temp_16312._isBuilt ()) {
            _temp_16312 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (490)) ;
          }
          if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "generate_makefile" COMMA_SOURCE_FILE_AT_LINE (492)))).isBuiltAndTrue ()) {
            GGS_string var_cas_makefile_dir ;
            var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (493)) ;
            if (((var_cas_makefile_dir)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
              var_cas_makefile_dir = GGS_string (true, ".") ;
            }
            if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (497)))).isBuiltAndTrue ()) {
              _inLexique.printMessage (((GGS_string (true, "creating "))._operator_concat (var_cas_makefile_dir))._operator_concat (GGS_string (true, "/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (498)) ;
            }
            ::routine_generate_makefile (_inLexique,  var_cas_os,  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)) COMMA_SOURCE_FILE_AT_LINE (500)) ;
          }
        }
      }else{
        _inLexique.printMessage (GGS_string (true, "No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (508)) ;
      }
    }else{
      _inLexique.printMessage (GGS_string (true, "No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (511)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'file'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_file_goil_syntax_517_11_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp,
                                GGS_root_obj  &var_cas_cpu) {
  GGS_lstring  var_cas_version ;
  var_cas_version = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  var_cas_desc = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_syntax_0 (_inLexique)) {
        case 2 : {
          nt_include_file_level_ (_inLexique, var_cas_imp, var_cas_cpu) ;
          } break ;
        case 3 : {
          nt_OIL_version_ (_inLexique, var_cas_version, var_cas_desc) ;
          } break ;
        case 4 : {
          nt_implementation_definition_ (_inLexique, var_cas_imp) ;
          } break ;
        case 5 : {
          nt_application_definition_ (_inLexique, var_cas_cpu) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'description'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_description_goil_syntax_539_18_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_desc) {
  switch (select_goil_syntax_1 (_inLexique)) {
    case 1 : {
      var_cas_desc = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3A) COMMA_HERE) ;
      _inLexique._assignFromAttribute_a_string (var_cas_desc) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'OIL_version'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_OIL_version_goil_syntax_551_18_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_version,
                                GGS_lstring  &var_cas_desc) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OIL_5FVERSION) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  _inLexique._assignFromAttribute_a_string (var_cas_version) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'application_definition'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_application_definition_goil_syntax_562_29_ (goil_lexique & _inLexique,
                                GGS_root_obj  &var_cas_file) {
  GGS_os_obj  var_cas_os ;
  var_cas_os = var_cas_file.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (565)) ;
  GGS_com  var_cas_com ;
  var_cas_com = var_cas_file.reader_com (_inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ;
  GGS_task_map  var_cas_tasks ;
  var_cas_tasks = var_cas_file.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (567)) ;
  GGS_counter_map  var_cas_counters ;
  var_cas_counters = var_cas_file.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (568)) ;
  GGS_alarm_map  var_cas_alarms ;
  var_cas_alarms = var_cas_file.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (569)) ;
  GGS_resource_map  var_cas_resources ;
  var_cas_resources = var_cas_file.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (570)) ;
  GGS_event_map  var_cas_events ;
  var_cas_events = var_cas_file.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
  GGS_isr_map  var_cas_isrs ;
  var_cas_isrs = var_cas_file.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (572)) ;
  GGS_message_map  var_cas_messages ;
  var_cas_messages = var_cas_file.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (573)) ;
  GGS_netmess_map  var_cas_net_messages ;
  var_cas_net_messages = var_cas_file.reader_net_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (574)) ;
  GGS_scheduletable_map  var_cas_scheduletables ;
  var_cas_scheduletables = var_cas_file.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (575)) ;
  GGS_app_map  var_cas_applis ;
  var_cas_applis = var_cas_file.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (576)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_CPU) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  nt_object_definition_list_ (_inLexique, var_cas_os, var_cas_com, var_cas_tasks, var_cas_counters, var_cas_alarms, var_cas_resources, var_cas_events, var_cas_isrs, var_cas_messages, var_cas_net_messages, var_cas_scheduletables, var_cas_applis) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  GGS_lstring  automatic_var_0 ;
  nt_description_ (_inLexique, automatic_var_0) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_file = GGS_root_obj ::constructor_new (_inLexique, var_cas_os, var_cas_com, var_cas_tasks, var_cas_counters, var_cas_alarms, var_cas_resources, var_cas_events, var_cas_isrs, var_cas_messages, var_cas_net_messages, var_cas_scheduletables, var_cas_applis COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'object_definition_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_object_definition_list_goil_syntax_615_29_ (goil_lexique & _inLexique,
                                GGS_os_obj  &var_cas_os,
                                GGS_com  &var_cas_com,
                                GGS_task_map  &var_cas_tasks,
                                GGS_counter_map  &var_cas_counters,
                                GGS_alarm_map  &var_cas_alarms,
                                GGS_resource_map  &var_cas_resources,
                                GGS_event_map  &var_cas_events,
                                GGS_isr_map  &var_cas_isrs,
                                GGS_message_map  &var_cas_messages,
                                GGS_netmess_map  &var_cas_net_messages,
                                GGS_scheduletable_map  &var_cas_scheduletables,
                                GGS_app_map  &var_cas_applis) {
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_goil_syntax_2 (_inLexique)) {
        case 2 : {
          nt_os_ (_inLexique, var_cas_os) ;
          } break ;
        case 3 : {
          nt_appmode_ (_inLexique) ;
          GGS_lstring  automatic_var_1 ;
          nt_description_ (_inLexique, automatic_var_1) ;
          } break ;
        case 4 : {
          nt_task_ (_inLexique, var_cas_tasks) ;
          } break ;
        case 5 : {
          nt_counter_ (_inLexique, var_cas_counters) ;
          } break ;
        case 6 : {
          nt_alarm_ (_inLexique, var_cas_alarms) ;
          GGS_lstring  automatic_var_2 ;
          nt_description_ (_inLexique, automatic_var_2) ;
          } break ;
        case 7 : {
          nt_resource_ (_inLexique, var_cas_resources) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (_inLexique, automatic_var_3) ;
          } break ;
        case 8 : {
          nt_event_ (_inLexique, var_cas_events) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (_inLexique, automatic_var_4) ;
          } break ;
        case 9 : {
          nt_isr_ (_inLexique, var_cas_isrs) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (_inLexique, automatic_var_5) ;
          } break ;
        case 10 : {
          nt_mess_ (_inLexique, var_cas_messages) ;
          GGS_lstring  automatic_var_6 ;
          nt_description_ (_inLexique, automatic_var_6) ;
          } break ;
        case 11 : {
          nt_networkmess_ (_inLexique, var_cas_net_messages) ;
          GGS_lstring  automatic_var_7 ;
          nt_description_ (_inLexique, automatic_var_7) ;
          } break ;
        case 12 : {
          nt_com_ (_inLexique, var_cas_com) ;
          GGS_lstring  automatic_var_8 ;
          nt_description_ (_inLexique, automatic_var_8) ;
          } break ;
        case 13 : {
          nt_ipdu_ (_inLexique) ;
          GGS_lstring  automatic_var_9 ;
          nt_description_ (_inLexique, automatic_var_9) ;
          } break ;
        case 14 : {
          nt_nm_ (_inLexique) ;
          GGS_lstring  automatic_var_10 ;
          nt_description_ (_inLexique, automatic_var_10) ;
          } break ;
        case 15 : {
          nt_scheduletable_ (_inLexique, var_cas_scheduletables) ;
          GGS_lstring  automatic_var_11 ;
          nt_description_ (_inLexique, automatic_var_11) ;
          } break ;
        case 16 : {
          nt_appli_ (_inLexique, var_cas_applis) ;
          GGS_lstring  automatic_var_12 ;
          nt_description_ (_inLexique, automatic_var_12) ;
          } break ;
        case 17 : {
          nt_include_cpu_level_ (_inLexique, var_cas_os, var_cas_com, var_cas_tasks, var_cas_counters, var_cas_alarms, var_cas_resources, var_cas_events, var_cas_isrs, var_cas_messages, var_cas_net_messages, var_cas_scheduletables, var_cas_applis) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of production rule 'nm'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_nm_goil_syntax_663_9_ (goil_lexique & _inLexique) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NM) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'boolean'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_boolean_goil_syntax_674_14_ (goil_lexique & _inLexique,
                                GGS_lbool  &var_cas_val) {
  switch (select_goil_syntax_3 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
      var_cas_val = GGS_lbool ::constructor_new (_inLexique, GGS_bool (true, true), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
      var_cas_val = GGS_lbool ::constructor_new (_inLexique, GGS_bool (true, false), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'free_field'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_free_field_goil_syntax_684_17_ (goil_lexique & _inLexique,
                                GGS_ident_map  &var_cas_ids) {
  GGS_lstring  var_cas_idf ;
  GGS_basic_type  var_cas_val ;
  _inLexique._assignFromAttribute_att_token (var_cas_idf) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  switch (select_goil_syntax_4 (_inLexique)) {
    case 1 : {
      GGS_lstring  var_cas_value ;
      _inLexique._assignFromAttribute_att_token (var_cas_value) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
      var_cas_val = GGS_string_class ::constructor_new (_inLexique, var_cas_value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)), var_cas_value.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_luint64  var_cas_value ;
      _inLexique._assignFromAttribute_integerNumber (var_cas_value) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
      var_cas_val = GGS_uint64_class ::constructor_new (_inLexique, var_cas_value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (696)), var_cas_value.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (696)) COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lbool  var_cas_value ;
      nt_boolean_ (_inLexique, var_cas_value) ;
      var_cas_val = GGS_bool_class ::constructor_new (_inLexique, var_cas_idf.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (700)), var_cas_value.reader_bool (_inLexique COMMA_SOURCE_FILE_AT_LINE (700)) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ids.modifier_put (_inLexique, var_cas_idf, var_cas_val COMMA_SOURCE_FILE_AT_LINE (702)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'include_file_level'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_include_file_level_goil_syntax_705_25_ (goil_lexique & _inLexique,
                                GGS_implementation  &var_cas_imp,
                                GGS_root_obj  &var_cas_cpu) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_include) COMMA_HERE) ;
  GGS_lstring  var_cas_file_name ;
  switch (select_goil_syntax_5 (_inLexique)) {
    case 1 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_g_5Fstring) COMMA_HERE) ;
      ::routine_file_in_path (_inLexique,  var_cas_file_name COMMA_SOURCE_FILE_AT_LINE (713)) ;
      } break ;
    case 2 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  const GGS_string _depExtension = GGS_string (true, "") ;
  const GGS_string _depPath = GGS_string (true, "") ;
  if (_depExtension._isBuilt () && _depPath._isBuilt ()) {
    goil_file_level_include::_performSourceFileParsing_ (_inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_file_name,
                                  var_cas_imp,
                                  var_cas_cpu
                                  COMMA_SOURCE_FILE_AT_LINE (717)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'include_cpu_level'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_syntax::
pr_include_cpu_level_goil_syntax_723_24_ (goil_lexique & _inLexique,
                                GGS_os_obj  &var_cas_os,
                                GGS_com  &var_cas_com,
                                GGS_task_map  &var_cas_tasks,
                                GGS_counter_map  &var_cas_counters,
                                GGS_alarm_map  &var_cas_alarms,
                                GGS_resource_map  &var_cas_resources,
                                GGS_event_map  &var_cas_events,
                                GGS_isr_map  &var_cas_isrs,
                                GGS_message_map  &var_cas_messages,
                                GGS_netmess_map  &var_cas_net_messages,
                                GGS_scheduletable_map  &var_cas_scheduletables,
                                GGS_app_map  &var_cas_applis) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_include) COMMA_HERE) ;
  GGS_lstring  var_cas_file_name ;
  switch (select_goil_syntax_6 (_inLexique)) {
    case 1 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_g_5Fstring) COMMA_HERE) ;
      ::routine_file_in_path (_inLexique,  var_cas_file_name COMMA_SOURCE_FILE_AT_LINE (741)) ;
      } break ;
    case 2 : {
      _inLexique._assignFromAttribute_a_string (var_cas_file_name) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  const GGS_string _depExtension = GGS_string (true, "") ;
  const GGS_string _depPath = GGS_string (true, "") ;
  if (_depExtension._isBuilt () && _depPath._isBuilt ()) {
    goil_cpu_level_include::_performSourceFileParsing_ (_inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_file_name,
                                  var_cas_os,
                                  var_cas_com,
                                  var_cas_tasks,
                                  var_cas_counters,
                                  var_cas_alarms,
                                  var_cas_resources,
                                  var_cas_events,
                                  var_cas_isrs,
                                  var_cas_messages,
                                  var_cas_net_messages,
                                  var_cas_scheduletables,
                                  var_cas_applis
                                  COMMA_SOURCE_FILE_AT_LINE (745)) ;
  }
}

//---------------------------------------------------------------------------*

