//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_types_os.h'                           *
//                        Generated by version 1.8.0                         *
//                      april 15th, 2009, at 11h4'46"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef goil_types_os_DEFINED
#define goil_types_os_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "goil_basic_types.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_os_obj ;
class cPtr_os_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_os_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_os_obj : public GGS_oil_obj {
//--- Default constructor
  public : inline GGS_os_obj (void) :
  GGS_oil_obj () {}

//--- Pointer assignment constructor
  public : GGS_os_obj (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_os_obj (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_os_obj
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_os_obj constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_basic_type & argument_6,
                                const GGS_basic_type & argument_7,
                                const GGS_lstring & argument_8,
                                const GGS_basic_type & argument_9,
                                const GGS_basic_type & argument_10,
                                const GGS_basic_type & argument_11,
                                const GGS_basic_type & argument_12,
                                const GGS_basic_type & argument_13,
                                const GGS_lstringlist & argument_14,
                                const GGS_lstringlist & argument_15,
                                const GGS_lstringlist & argument_16,
                                const GGS_lstringlist & argument_17,
                                const GGS_lstring & argument_18,
                                const GGS_lstring & argument_19,
                                const GGS_ident_map & argument_20
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_os_obj * getPtr (void) const {
    return (cPtr_os_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_status (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_startuphook (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_shutdownhook (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_errorhook (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_pretaskhook (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_posttaskhook (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_protectionhook (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_scalabilityclass (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_stackmonitoring (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_usegetserviceid (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_useparameteraccess (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_useresscheduler (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_systemcall (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_app_src (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_cflags (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_asflags (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_ldflags (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_app_name (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_tpl_base_path (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ident_map  reader_others (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_os_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_os_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_os_obj *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__os_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       abstract class 'cPtr_os_obj'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_os_obj : public cPtr_oil_obj {
  private : typedef cPtr_oil_obj inherited ;
//--- Constructor
  public : cPtr_os_obj (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_lstring & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_lstringlist & ,
                                const GGS_lstringlist & ,
                                const GGS_lstringlist & ,
                                const GGS_lstringlist & ,
                                const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_ident_map & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_os_obj (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  status ;
  public : GGS_basic_type  startuphook ;
  public : GGS_basic_type  shutdownhook ;
  public : GGS_basic_type  errorhook ;
  public : GGS_basic_type  pretaskhook ;
  public : GGS_basic_type  posttaskhook ;
  public : GGS_basic_type  protectionhook ;
  public : GGS_lstring  scalabilityclass ;
  public : GGS_basic_type  stackmonitoring ;
  public : GGS_basic_type  usegetserviceid ;
  public : GGS_basic_type  useparameteraccess ;
  public : GGS_basic_type  useresscheduler ;
  public : GGS_basic_type  systemcall ;
  public : GGS_lstringlist  app_src ;
  public : GGS_lstringlist  cflags ;
  public : GGS_lstringlist  asflags ;
  public : GGS_lstringlist  ldflags ;
  public : GGS_lstring  app_name ;
  public : GGS_lstring  tpl_base_path ;
  public : GGS_ident_map  others ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*

#endif
