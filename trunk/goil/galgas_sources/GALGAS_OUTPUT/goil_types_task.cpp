//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_types_task.cpp'                         *
//                        Generated by version 1.8.1                         *
//                      april 17th, 2009, at 9h43'31"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 456
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_types_task.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_task.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_task_autostart_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_task_autostart_obj::
cPtr_task_autostart_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
location (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_task_autostart_obj * GGS_task_autostart_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_autostart_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_task_autostart_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_task_autostart_obj::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@task_autostart_obj:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_task_autostart_obj (& typeid (cPtr_task_autostart_obj), NULL
, "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_task_autostart_obj::galgasRTTI (void) const {
  return & gClassInfoFor__task_autostart_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_task_autostart_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_task_autostart_obj::
GGS_task_autostart_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_obj::
GGS_task_autostart_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_task_autostart_obj GGS_task_autostart_obj::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_task_autostart_obj _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_task_autostart_obj *> (inPointer) != NULL)
      : (typeid (cPtr_task_autostart_obj) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_task_autostart_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_task_autostart_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_task_autostart_obj::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_autostart_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_autostart_obj *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_task_autostart_obj::actualTypeName (void) const {
  return "task_autostart_obj" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_task_autostart_obj::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__task_autostart_obj ("task_autostart_obj") ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_task_autostart_void'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_task_autostart_void::
cPtr_task_autostart_void (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_task_autostart_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_task_autostart_void * GGS_task_autostart_void::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_autostart_void *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_task_autostart_void *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_task_autostart_void::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_task_autostart_void * _p = dynamic_cast <const cPtr_task_autostart_void *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_task_autostart_void::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@task_autostart_void:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_void::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_void::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_task_autostart_void (& typeid (cPtr_task_autostart_void), & typeid (cPtr_task_autostart_obj), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_task_autostart_void::galgasRTTI (void) const {
  return & gClassInfoFor__task_autostart_void ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_task_autostart_void'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_task_autostart_void::
GGS_task_autostart_void (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_void::
GGS_task_autostart_void (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_task_autostart_void GGS_task_autostart_void::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_task_autostart_void _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_task_autostart_void *> (inPointer) != NULL)
      : (typeid (cPtr_task_autostart_void) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_task_autostart_void (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_task_autostart_void),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_void GGS_task_autostart_void::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_task_autostart_void result ;
  macroMyNew (result.mPointer, cPtr_task_autostart_void (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_task_autostart_void::actualTypeName (void) const {
  return "task_autostart_void" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__task_autostart_void ("task_autostart_void", gClassInfoFor__task_autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_task_autostart_false'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_task_autostart_false::
cPtr_task_autostart_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_task_autostart_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_task_autostart_false * GGS_task_autostart_false::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_autostart_false *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_task_autostart_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_task_autostart_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_task_autostart_false * _p = dynamic_cast <const cPtr_task_autostart_false *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_task_autostart_false::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@task_autostart_false:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_false::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_task_autostart_false (& typeid (cPtr_task_autostart_false), & typeid (cPtr_task_autostart_obj), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_task_autostart_false::galgasRTTI (void) const {
  return & gClassInfoFor__task_autostart_false ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_task_autostart_false'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_task_autostart_false::
GGS_task_autostart_false (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_false::
GGS_task_autostart_false (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_task_autostart_false GGS_task_autostart_false::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_task_autostart_false _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_task_autostart_false *> (inPointer) != NULL)
      : (typeid (cPtr_task_autostart_false) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_task_autostart_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_task_autostart_false),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_false GGS_task_autostart_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_task_autostart_false result ;
  macroMyNew (result.mPointer, cPtr_task_autostart_false (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_task_autostart_false::actualTypeName (void) const {
  return "task_autostart_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__task_autostart_false ("task_autostart_false", gClassInfoFor__task_autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_task_autostart_true'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_task_autostart_true::
cPtr_task_autostart_true (const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_task_autostart_obj (argument_0 COMMA_THERE),
appmodes (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_task_autostart_true * GGS_task_autostart_true::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_task_autostart_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_task_autostart_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_task_autostart_true * _p = dynamic_cast <const cPtr_task_autostart_true *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue ()
         && appmodes._operator_isEqual (_p->appmodes).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_task_autostart_true::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@task_autostart_true:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << appmodes.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_true::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_task_autostart_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_task_autostart_true (& typeid (cPtr_task_autostart_true), & typeid (cPtr_task_autostart_obj), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_task_autostart_true::galgasRTTI (void) const {
  return & gClassInfoFor__task_autostart_true ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_task_autostart_true'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_task_autostart_true::
GGS_task_autostart_true (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_true::
GGS_task_autostart_true (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_task_autostart_true GGS_task_autostart_true::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_task_autostart_true _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_task_autostart_true *> (inPointer) != NULL)
      : (typeid (cPtr_task_autostart_true) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_task_autostart_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_task_autostart_true),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_true GGS_task_autostart_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_task_autostart_true result ;
  macroMyNew (result.mPointer, cPtr_task_autostart_true (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset  GGS_task_autostart_true::
reader_appmodes (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringset   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_autostart_true *) mPointer)->appmodes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_task_autostart_true::actualTypeName (void) const {
  return "task_autostart_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__task_autostart_true ("task_autostart_true", gClassInfoFor__task_autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'cPtr_task_obj'                            *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_task_obj::
cPtr_task_obj (const GGS_lstring & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_task_autostart_obj & argument_4,
                                const GGS_lstringlist & argument_5,
                                const GGS_lstringlist & argument_6,
                                const GGS_lstringlist & argument_7,
                                const GGS_lstringlist & argument_8,
                                const GGS_timing_prot & argument_9,
                                const GGS_ident_map & argument_10
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
priority (argument_1),
schedule (argument_2),
activation (argument_3),
autostart (argument_4),
resources (argument_5),
events (argument_6),
messages (argument_7),
acc_apps (argument_8),
timing_prot (argument_9),
others (argument_10) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_task_obj * GGS_task_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_task_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_task_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_task_obj * _p = dynamic_cast <const cPtr_task_obj *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = desc._operator_isEqual (_p->desc).boolValue ()
         && priority._operator_isEqual (_p->priority).boolValue ()
         && schedule._operator_isEqual (_p->schedule).boolValue ()
         && activation._operator_isEqual (_p->activation).boolValue ()
         && autostart._operator_isEqual (_p->autostart).boolValue ()
         && resources._operator_isEqual (_p->resources).boolValue ()
         && events._operator_isEqual (_p->events).boolValue ()
         && messages._operator_isEqual (_p->messages).boolValue ()
         && acc_apps._operator_isEqual (_p->acc_apps).boolValue ()
         && timing_prot._operator_isEqual (_p->timing_prot).boolValue ()
         && others._operator_isEqual (_p->others).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_task_obj::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@task_obj:"
           << desc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << priority.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << schedule.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << activation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << autostart.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << resources.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << events.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << messages.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << acc_apps.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << timing_prot.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << others.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_task_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_task_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_task_obj (& typeid (cPtr_task_obj), & typeid (cPtr_oil_obj), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_task_obj::galgasRTTI (void) const {
  return & gClassInfoFor__task_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       GALGAS class 'GGS_task_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_task_obj::
GGS_task_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_task_obj::
GGS_task_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_task_obj GGS_task_obj::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_task_obj _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_task_obj *> (inPointer) != NULL)
      : (typeid (cPtr_task_obj) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_task_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_task_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_task_obj GGS_task_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_task_autostart_obj & argument_4,
                 const GGS_lstringlist & argument_5,
                 const GGS_lstringlist & argument_6,
                 const GGS_lstringlist & argument_7,
                 const GGS_lstringlist & argument_8,
                 const GGS_timing_prot & argument_9,
                 const GGS_ident_map & argument_10
                                COMMA_LOCATION_ARGS) {
  GGS_task_obj result ;
  macroMyNew (result.mPointer, cPtr_task_obj (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7,
                                argument_8,
                                argument_9,
                                argument_10 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_task_obj::
reader_priority (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->priority ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_task_obj::
reader_schedule (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->schedule ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_task_obj::
reader_activation (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->activation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_task_autostart_obj  GGS_task_obj::
reader_autostart (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_task_autostart_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->autostart ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_task_obj::
reader_resources (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->resources ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_task_obj::
reader_events (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->events ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_task_obj::
reader_messages (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->messages ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_task_obj::
reader_acc_apps (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->acc_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot  GGS_task_obj::
reader_timing_prot (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_timing_prot   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->timing_prot ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ident_map  GGS_task_obj::
reader_others (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ident_map   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_task_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_task_obj *) mPointer)->others ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_task_obj::actualTypeName (void) const {
  return "task_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__task_obj ("task_obj", gClassInfoFor__oil_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            class 'e_task_map'                             *
//                                                                           *
//---------------------------------------------------------------------------*

e_task_map::e_task_map (void) :
task () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class map '@task_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_task_map::
elementOf_GGS_task_map (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_task_map & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_task_map::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.task.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_task_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_task_map * _p = dynamic_cast <const elementOf_GGS_task_map *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.task._operator_isEqual (_p->mInfo.task)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_task_map::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_task_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_task_map * info = (e_task_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_task_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_task_map * info = (e_task_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_task_map GGS_task_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_task_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_task_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_task_map::
_operator_isEqual (const GGS_task_map & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_task_map::
_operator_isNotEqual (const GGS_task_map & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_task_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (_isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0._drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.task ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_task_obj & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_task_map info  ;
    info.task = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_task_map::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_task_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.task ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_task_map::
modifier_setTaskForKey (C_Compiler & inLexique,
                        const GGS_task_obj & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setTaskForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.task = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_task_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_task_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "Task %K is unkown",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
modifier_del (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_task_obj & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "Task %K is unkown",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_task_map::
modifier_put (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_task_obj & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "Task %K is already defined in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_task_map GGS_task_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_task_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_task_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_task_map GGS_task_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_task_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_task_map::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @task_map " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_task_obj  & GGS_task_map::cEnumerator::_task (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.task ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_task_mask'                             *
//                                                                           *
//---------------------------------------------------------------------------*

e_task_mask::e_task_mask (void) :
mask () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class map '@task_mask'                           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_task_mask::
elementOf_GGS_task_mask (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_task_mask & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_task_mask::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.mask.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_task_mask::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_task_mask * _p = dynamic_cast <const elementOf_GGS_task_mask *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.mask._operator_isEqual (_p->mInfo.mask)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_task_mask::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_task_mask *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_task_mask * info = (e_task_mask *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_task_mask *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_task_mask * info = (e_task_mask *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_task_mask GGS_task_mask::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_task_mask result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_task_mask info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_task_mask::
_operator_isEqual (const GGS_task_mask & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_task_mask::
_operator_isNotEqual (const GGS_task_mask & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_uint64 & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (_isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0._drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.mask ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint64 & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_task_mask info  ;
    info.mask = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint64   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.mask ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
modifier_setMaskForKey (C_Compiler & inLexique,
                        const GGS_uint64 & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setMaskForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.mask = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
method_get_mask (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "No mask for task %K",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
modifier_del_mask (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64 & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "No mask for task %K",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_task_mask::
modifier_insert_mask (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint64 & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "Task %K has already its mask",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_task_mask GGS_task_mask::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_task_mask & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_task_mask result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_task_mask GGS_task_mask::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_task_mask result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_task_mask::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @task_mask " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_task_mask::cEnumerator::_mask (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mask ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@objs_by_prio'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_objs_by_prio::
elementOf_GGS_objs_by_prio (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_lstring & argument_2):
prio (argument_0),
act (argument_1),
name (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_objs_by_prio::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_objs_by_prio * _p = dynamic_cast <const elementOf_GGS_objs_by_prio *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = prio._operator_isEqual (_p->prio).boolValue ()
         && act._operator_isEqual (_p->act).boolValue ()
         && name._operator_isEqual (_p->name).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

sint32 elementOf_GGS_objs_by_prio::
compareForSorting (const cSortedListElement * inOperand) const {
  elementOf_GGS_objs_by_prio * operand = (elementOf_GGS_objs_by_prio *) inOperand ;
  sint32 result = prio.compareForSortedList (operand->prio) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_objs_by_prio::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << prio.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << act.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << name.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           List '@objs_by_prio'                            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_objs_by_prio::GGS_objs_by_prio (void): AC_galgas_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_objs_by_prio::
GGS_objs_by_prio (const GGS_objs_by_prio & inSource): AC_galgas_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_objs_by_prio::
_operator_isEqual (const GGS_objs_by_prio & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_objs_by_prio::
_operator_isNotEqual (const GGS_objs_by_prio & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
_internalAppendValues (const GGS_uint & argument_0,
                    const GGS_uint & argument_1,
                    const GGS_lstring & argument_2) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
_addAssign_operation (const GGS_uint & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_lstring & argument_2) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

GGS_objs_by_prio GGS_objs_by_prio::
_operator_concat (const GGS_objs_by_prio & inOperand) const {
  GGS_objs_by_prio result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
_dotAssign_operation (const GGS_objs_by_prio inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_objs_by_prio * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint  p_0 = p->prio ;
          GGS_uint  p_1 = p->act ;
          GGS_lstring  p_2 = p->name ;
          _internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->prio,
                                _p->act,
                                _p->name) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_objs_by_prio  GGS_objs_by_prio::
constructor_emptySortedList (void) {
  GGS_objs_by_prio result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_objs_by_prio  GGS_objs_by_prio::
constructor_sortedListWithValue (const GGS_uint & argument_0,
                           const GGS_uint & argument_1,
                           const GGS_lstring & argument_2) {
  GGS_objs_by_prio result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_objs_by_prio::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@objs_by_prio", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
method_smallest (C_Compiler & _inLexique,
                 GGS_uint & _out_0,
                 GGS_uint & _out_1,
                 GGS_lstring & _out_2
                 COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->prio ;
    _out_1 = _p->act ;
    _out_2 = _p->name ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
method_greatest (C_Compiler & _inLexique,
             GGS_uint & _out_0,
             GGS_uint & _out_1,
             GGS_lstring & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->prio ;
    _out_1 = _p->act ;
    _out_2 = _p->name ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
modifier_popSmallest (C_Compiler & _inLexique,
                 GGS_uint & _out_0,
                 GGS_uint & _out_1,
                 GGS_lstring & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->prio ;
    _out_1 = _p->act ;
    _out_2 = _p->name ;
    _insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_objs_by_prio::
modifier_popGreatest (C_Compiler & _inLexique,
                GGS_uint & _out_0,
                GGS_uint & _out_1,
                GGS_lstring & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->prio ;
    _out_1 = _p->act ;
    _out_2 = _p->name ;
    _insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_objs_by_prio::cEnumerator::_prio (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->prio ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_objs_by_prio::cEnumerator::_act (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->act ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_objs_by_prio::cEnumerator::_name (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@tasks_by_type'                      *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_tasks_by_type::
elementOf_GGS_tasks_by_type (const GGS_uint & argument_0,
                                const GGS_string& argument_1):
type (argument_0),
name (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_tasks_by_type::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_tasks_by_type * _p = dynamic_cast <const elementOf_GGS_tasks_by_type *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = type._operator_isEqual (_p->type).boolValue ()
         && name._operator_isEqual (_p->name).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

sint32 elementOf_GGS_tasks_by_type::
compareForSorting (const cSortedListElement * inOperand) const {
  elementOf_GGS_tasks_by_type * operand = (elementOf_GGS_tasks_by_type *) inOperand ;
  sint32 result = type.compareForSortedList (operand->type) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_tasks_by_type::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << type.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << name.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          List '@tasks_by_type'                            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tasks_by_type::GGS_tasks_by_type (void): AC_galgas_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_tasks_by_type::
GGS_tasks_by_type (const GGS_tasks_by_type & inSource): AC_galgas_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_tasks_by_type::
_operator_isEqual (const GGS_tasks_by_type & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_tasks_by_type::
_operator_isNotEqual (const GGS_tasks_by_type & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
_internalAppendValues (const GGS_uint & argument_0,
                    const GGS_string& argument_1) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
_addAssign_operation (const GGS_uint & argument_0,
                                const GGS_string& argument_1) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

GGS_tasks_by_type GGS_tasks_by_type::
_operator_concat (const GGS_tasks_by_type & inOperand) const {
  GGS_tasks_by_type result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
_dotAssign_operation (const GGS_tasks_by_type inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_tasks_by_type * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint  p_0 = p->type ;
          GGS_string p_1 = p->name ;
          _internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->type,
                                _p->name) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_tasks_by_type  GGS_tasks_by_type::
constructor_emptySortedList (void) {
  GGS_tasks_by_type result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_tasks_by_type  GGS_tasks_by_type::
constructor_sortedListWithValue (const GGS_uint & argument_0,
                           const GGS_string& argument_1) {
  GGS_tasks_by_type result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_tasks_by_type::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@tasks_by_type", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
method_smallest (C_Compiler & _inLexique,
                 GGS_uint & _out_0,
                 GGS_string& _out_1
                 COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->type ;
    _out_1 = _p->name ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
method_greatest (C_Compiler & _inLexique,
             GGS_uint & _out_0,
             GGS_string& _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->type ;
    _out_1 = _p->name ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
modifier_popSmallest (C_Compiler & _inLexique,
                 GGS_uint & _out_0,
                 GGS_string& _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->type ;
    _out_1 = _p->name ;
    _insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_tasks_by_type::
modifier_popGreatest (C_Compiler & _inLexique,
                GGS_uint & _out_0,
                GGS_string& _out_1
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->type ;
    _out_1 = _p->name ;
    _insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_tasks_by_type::cEnumerator::_type (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->type ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_tasks_by_type::cEnumerator::_name (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Element of list '@prio_list'                        *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_prio_list::
elementOf_GGS_prio_list (const GGS_uint & argument_0
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
fifosize (argument_0) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_prio_list::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_prio_list * _p = dynamic_cast <const elementOf_GGS_prio_list *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = fifosize._operator_isEqual (_p->fifosize).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_prio_list::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << fifosize.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            List '@prio_list'                              *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_prio_list::
_internalAppendValues (const GGS_uint & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
_internalPrependValues (const GGS_uint & argument_0
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
_addAssign_operation (const GGS_uint & argument_0) {
  if (_isBuilt ()&& argument_0._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_prio_list GGS_prio_list::
_operator_concat (const GGS_prio_list & inOperand) const {
  GGS_prio_list result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
_dotAssign_operation (const GGS_prio_list inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_prio_list * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint  p_0 = p->fifosize ;
          _internalAppendValues (p_0 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_uint & argument_0
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->fifosize
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_prio_list  GGS_prio_list::
constructor_emptyList (void) {
  GGS_prio_list result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_prio_list  GGS_prio_list::
constructor_listWithValue (const GGS_uint & argument_0) {
  GGS_prio_list result ;
  result._alloc () ;
  result._addAssign_operation (argument_0) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
internalSubListWithRange (GGS_prio_list & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->fifosize) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_prio_list GGS_prio_list::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_prio_list result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_prio_list GGS_prio_list::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_prio_list result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_prio_list::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@prio_list", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
method_first (C_Compiler & _inLexique,
              GGS_uint & _out_0
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->fifosize ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
method_last (C_Compiler & _inLexique,
             GGS_uint & _out_0
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->fifosize ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_uint & _out_0
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->fifosize ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
modifier_popLast (C_Compiler & _inLexique,
                GGS_uint & _out_0
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->fifosize ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_uint  GGS_prio_list::
reader_fifosizeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_uint  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->fifosize ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_prio_list::
modifier_setFifosizeAtIndex (C_Compiler & inLexique,
                              const GGS_uint  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->fifosize = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_prio_list::cEnumerator::_fifosize (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->fifosize ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            class 'e_prio_map'                             *
//                                                                           *
//---------------------------------------------------------------------------*

e_prio_map::e_prio_map (void) :
prio (),
act () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class map '@prio_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_prio_map::
elementOf_GGS_prio_map (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_prio_map & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_prio_map::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.prio.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.act.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_prio_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_prio_map * _p = dynamic_cast <const elementOf_GGS_prio_map *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.prio._operator_isEqual (_p->mInfo.prio)).boolValue ()
           && (mInfo.act._operator_isEqual (_p->mInfo.act)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_prio_map::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_prio_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_prio_map * info = (e_prio_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_prio_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_prio_map * info = (e_prio_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_prio_map GGS_prio_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_prio_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_prio_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_prio_map::
_operator_isEqual (const GGS_prio_map & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_prio_map::
_operator_isNotEqual (const GGS_prio_map & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint & inParameter0,
                const GGS_uint & inParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inParameter1._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_prio_map info  ;
    info.prio = inParameter0 ;
    info.act = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint   & outParameter0,
               GGS_uint   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    outParameter1._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.prio ;
    outParameter1 = node->mInfo.act ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
modifier_setPrioForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setPrioForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.prio = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
modifier_setActForKey (C_Compiler & inLexique,
                        const GGS_uint & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setActForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.act = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint   & outParameter0,
                                GGS_uint   & outParameter1 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "Object %K is unkown",
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_prio_map::
modifier_put (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint & inParameter0,
                                const GGS_uint & inParameter1 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "Object %K is already defined in %L",
                 inKey,
                 inParameter0,
                 inParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_prio_map GGS_prio_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_prio_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_prio_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_prio_map GGS_prio_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_prio_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_prio_map::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @prio_map " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_prio_map::cEnumerator::_prio (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.prio ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_prio_map::cEnumerator::_act (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.act ;
}

//---------------------------------------------------------------------------*

