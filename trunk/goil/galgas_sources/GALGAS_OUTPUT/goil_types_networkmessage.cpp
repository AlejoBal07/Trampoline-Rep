//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_types_networkmessage.cpp'                    *
//                        Generated by version 1.8.3                         *
//                       may 29th, 2009, at 11h47'31"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_types_networkmessage.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_networkmessage.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_base_netprop'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_base_netprop::
cPtr_base_netprop (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
loc (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_base_netprop * GGS_base_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_base_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_base_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_base_netprop::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@base_netprop:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_base_netprop::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_base_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_base_netprop (& typeid (cPtr_base_netprop), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_base_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__base_netprop ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_base_netprop'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_base_netprop::
GGS_base_netprop (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_base_netprop::
GGS_base_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_base_netprop GGS_base_netprop::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_base_netprop _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_base_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_base_netprop) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_base_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_base_netprop),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_base_netprop::
reader_loc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_base_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_base_netprop *) mPointer)->loc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_base_netprop::actualTypeName (void) const {
  return "base_netprop" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_base_netprop::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__base_netprop ("base_netprop") ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_void_netprop'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_void_netprop::
cPtr_void_netprop (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_void_netprop * GGS_void_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_void_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_void_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_void_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_void_netprop * _p = dynamic_cast <const cPtr_void_netprop *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_void_netprop::
method_generate (C_Compiler & /* _inLexique */,
                                GGS_string& var_cas_res COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_res = GGS_string ("") ;
}

//---------------------------------------------------------------------------*

void cPtr_void_netprop::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@void_netprop:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_void_netprop::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_void_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_void_netprop (& typeid (cPtr_void_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_void_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__void_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_void_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_void_netprop (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_void_netprop'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_void_netprop::
GGS_void_netprop (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_void_netprop::
GGS_void_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_void_netprop GGS_void_netprop::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_void_netprop _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_void_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_void_netprop) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_void_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_void_netprop),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_void_netprop GGS_void_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_void_netprop result ;
  macroMyNew (result.mPointer, cPtr_void_netprop (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_void_netprop::actualTypeName (void) const {
  return "void_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__void_netprop ("void_netprop", gClassInfoFor__base_netprop) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_static_netprop'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_static_netprop::
cPtr_static_netprop (const GGS_location & argument_0,
                                const GGS_lsint & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lsint & argument_3,
                                const GGS_lstring & argument_4,
                                const GGS_luint64 & argument_5,
                                const GGS_lstring & argument_6
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE),
size_in_bits (argument_1),
bit_ordering (argument_2),
bit_position (argument_3),
data_interpretation (argument_4),
initial_value (argument_5),
direction (argument_6) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_static_netprop * GGS_static_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_static_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_static_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_static_netprop * _p = dynamic_cast <const cPtr_static_netprop *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue ()
         && size_in_bits._operator_isEqual (_p->size_in_bits).boolValue ()
         && bit_ordering._operator_isEqual (_p->bit_ordering).boolValue ()
         && bit_position._operator_isEqual (_p->bit_position).boolValue ()
         && data_interpretation._operator_isEqual (_p->data_interpretation).boolValue ()
         && initial_value._operator_isEqual (_p->initial_value).boolValue ()
         && direction._operator_isEqual (_p->direction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_static_netprop::
method_generate (C_Compiler & _inLexique,
                                GGS_string& var_cas_res COMMA_UNUSED_LOCATION_ARGS) const {
  ::routine_retrieveTemplateString (_inLexique,  var_cas_res,  (direction.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (25)))._operator_concat (GGS_string ("_nm")) COMMA_SOURCE_FILE_AT_LINE (25)) ;
}

//---------------------------------------------------------------------------*

void cPtr_static_netprop::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@static_netprop:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << size_in_bits.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << bit_ordering.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << bit_position.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << data_interpretation.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << initial_value.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << direction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_static_netprop::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_static_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_static_netprop (& typeid (cPtr_static_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_static_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__static_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_static_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_static_netprop (loc, size_in_bits, bit_ordering, bit_position, data_interpretation, initial_value, direction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_static_netprop'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_static_netprop::
GGS_static_netprop (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_static_netprop::
GGS_static_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_static_netprop GGS_static_netprop::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_static_netprop _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_static_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_static_netprop) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_static_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_static_netprop),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_static_netprop GGS_static_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lsint & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_lsint & argument_3,
                 const GGS_lstring & argument_4,
                 const GGS_luint64 & argument_5,
                 const GGS_lstring & argument_6
                                COMMA_LOCATION_ARGS) {
  GGS_static_netprop result ;
  macroMyNew (result.mPointer, cPtr_static_netprop (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_static_netprop::
reader_size_in_bits (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->size_in_bits ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_static_netprop::
reader_bit_ordering (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->bit_ordering ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_static_netprop::
reader_bit_position (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->bit_position ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_static_netprop::
reader_data_interpretation (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->data_interpretation ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_static_netprop::
reader_initial_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->initial_value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_static_netprop::
reader_direction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_static_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_static_netprop *) mPointer)->direction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_static_netprop::actualTypeName (void) const {
  return "static_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__static_netprop ("static_netprop", gClassInfoFor__base_netprop) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_dynamic_netprop'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_dynamic_netprop::
cPtr_dynamic_netprop (const GGS_location & argument_0,
                                const GGS_lsint & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lsint & argument_3,
                                const GGS_luint64 & argument_4,
                                const GGS_lstring & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE),
max_size_in_bits (argument_1),
bit_ordering (argument_2),
bit_position (argument_3),
initial_value (argument_4),
direction (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_dynamic_netprop * GGS_dynamic_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_dynamic_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_dynamic_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_dynamic_netprop * _p = dynamic_cast <const cPtr_dynamic_netprop *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue ()
         && max_size_in_bits._operator_isEqual (_p->max_size_in_bits).boolValue ()
         && bit_ordering._operator_isEqual (_p->bit_ordering).boolValue ()
         && bit_position._operator_isEqual (_p->bit_position).boolValue ()
         && initial_value._operator_isEqual (_p->initial_value).boolValue ()
         && direction._operator_isEqual (_p->direction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_dynamic_netprop::
method_generate (C_Compiler & /* _inLexique */,
                                GGS_string& var_cas_res COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_res = GGS_string ("") ;
}

//---------------------------------------------------------------------------*

void cPtr_dynamic_netprop::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@dynamic_netprop:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << max_size_in_bits.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << bit_ordering.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << bit_position.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << initial_value.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << direction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_dynamic_netprop::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_dynamic_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_dynamic_netprop (& typeid (cPtr_dynamic_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_dynamic_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__dynamic_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_dynamic_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_dynamic_netprop (loc, max_size_in_bits, bit_ordering, bit_position, initial_value, direction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_dynamic_netprop'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_dynamic_netprop::
GGS_dynamic_netprop (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_dynamic_netprop::
GGS_dynamic_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_dynamic_netprop GGS_dynamic_netprop::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_dynamic_netprop _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_dynamic_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_dynamic_netprop) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_dynamic_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_dynamic_netprop),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_dynamic_netprop GGS_dynamic_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lsint & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_lsint & argument_3,
                 const GGS_luint64 & argument_4,
                 const GGS_lstring & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_dynamic_netprop result ;
  macroMyNew (result.mPointer, cPtr_dynamic_netprop (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_dynamic_netprop::
reader_max_size_in_bits (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->max_size_in_bits ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_dynamic_netprop::
reader_bit_ordering (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->bit_ordering ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lsint  GGS_dynamic_netprop::
reader_bit_position (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lsint   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->bit_position ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_dynamic_netprop::
reader_initial_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->initial_value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_dynamic_netprop::
reader_direction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_dynamic_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_dynamic_netprop *) mPointer)->direction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_dynamic_netprop::actualTypeName (void) const {
  return "dynamic_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__dynamic_netprop ("dynamic_netprop", gClassInfoFor__base_netprop) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_zero_netprop'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_zero_netprop::
cPtr_zero_netprop (const GGS_location & argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_base_netprop (argument_0 COMMA_THERE),
direction (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_zero_netprop * GGS_zero_netprop::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_zero_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_zero_netprop *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_zero_netprop::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_zero_netprop * _p = dynamic_cast <const cPtr_zero_netprop *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue ()
         && direction._operator_isEqual (_p->direction).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_zero_netprop::
method_generate (C_Compiler & _inLexique,
                                GGS_string& var_cas_res COMMA_UNUSED_LOCATION_ARGS) const {
  ::routine_retrieveTemplateString (_inLexique,  var_cas_res,  (direction.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)))._operator_concat (GGS_string ("_nm")) COMMA_SOURCE_FILE_AT_LINE (43)) ;
}

//---------------------------------------------------------------------------*

void cPtr_zero_netprop::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@zero_netprop:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << direction.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_zero_netprop::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_zero_netprop::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_zero_netprop (& typeid (cPtr_zero_netprop), & typeid (cPtr_base_netprop), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_zero_netprop::galgasRTTI (void) const {
  return & gClassInfoFor__zero_netprop ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_zero_netprop::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_zero_netprop (loc, direction COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_zero_netprop'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_zero_netprop::
GGS_zero_netprop (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_zero_netprop::
GGS_zero_netprop (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_zero_netprop GGS_zero_netprop::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_zero_netprop _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_zero_netprop *> (inPointer) != NULL)
      : (typeid (cPtr_zero_netprop) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_zero_netprop (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_zero_netprop),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_zero_netprop GGS_zero_netprop::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_zero_netprop result ;
  macroMyNew (result.mPointer, cPtr_zero_netprop (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_zero_netprop::
reader_direction (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_zero_netprop *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_zero_netprop *) mPointer)->direction ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_zero_netprop::actualTypeName (void) const {
  return "zero_netprop" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__zero_netprop ("zero_netprop", gClassInfoFor__base_netprop) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_netmess_obj'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_netmess_obj::
cPtr_netmess_obj (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_base_netprop & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
ipdu (argument_1),
netprop (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_netmess_obj * GGS_netmess_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_netmess_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_netmess_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_netmess_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_netmess_obj * _p = dynamic_cast <const cPtr_netmess_obj *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = desc._operator_isEqual (_p->desc).boolValue ()
         && ipdu._operator_isEqual (_p->ipdu).boolValue ()
         && netprop._operator_isEqual (_p->netprop).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_netmess_obj::
method_generate (C_Compiler & _inLexique,
                                GGS_lstring  var_cas_name,
                                GGS_string var_cas_ctype,
                                GGS_string var_cas_inval,
                                GGS_string& var_cas_res COMMA_UNUSED_LOCATION_ARGS) const {
  const GGS_base_netprop  _temp_1349 = netprop ;
  if (_temp_1349.isBuilt ()) {
    _temp_1349 (HERE)->method_generate (_inLexique, var_cas_res COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_res,  GGS_string ("$NAME$"),  var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (52)) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  ::routine_doReplace (_inLexique,  var_cas_res,  GGS_string ("$CTYPE$"),  var_cas_ctype COMMA_SOURCE_FILE_AT_LINE (53)) ;
  if (((var_cas_inval)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_inval = (GGS_string (" = "))._operator_concat (var_cas_inval) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_res,  GGS_string ("$INITIALVALUE$"),  var_cas_inval COMMA_SOURCE_FILE_AT_LINE (57)) ;
}

//---------------------------------------------------------------------------*

void cPtr_netmess_obj::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@netmess_obj:"
           << desc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << ipdu.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << netprop.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_netmess_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_netmess_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_netmess_obj (& typeid (cPtr_netmess_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_netmess_obj::galgasRTTI (void) const {
  return & gClassInfoFor__netmess_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_netmess_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_netmess_obj (desc, ipdu, netprop COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_netmess_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_netmess_obj::
GGS_netmess_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_netmess_obj::
GGS_netmess_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_netmess_obj GGS_netmess_obj::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_netmess_obj _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_netmess_obj *> (inPointer) != NULL)
      : (typeid (cPtr_netmess_obj) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_netmess_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_netmess_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_netmess_obj GGS_netmess_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_base_netprop & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_netmess_obj result ;
  macroMyNew (result.mPointer, cPtr_netmess_obj (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_netmess_obj::
reader_ipdu (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_netmess_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_netmess_obj *) mPointer)->ipdu ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_base_netprop  GGS_netmess_obj::
reader_netprop (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_base_netprop   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_netmess_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_netmess_obj *) mPointer)->netprop ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_netmess_obj::actualTypeName (void) const {
  return "netmess_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__netmess_obj ("netmess_obj", gClassInfoFor__oil_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_netmess_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_netmess_map::e_netmess_map (void) :
netmess () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@netmess_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_netmess_map::
elementOf_GGS_netmess_map (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_netmess_map & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_netmess_map::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.netmess.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_netmess_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_netmess_map * _p = dynamic_cast <const elementOf_GGS_netmess_map *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.netmess._operator_isEqual (_p->mInfo.netmess)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_netmess_map::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_netmess_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_netmess_map * info = (e_netmess_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_netmess_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_netmess_map * info = (e_netmess_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_netmess_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_netmess_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_netmess_map::
_operator_isEqual (const GGS_netmess_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_netmess_map::
_operator_isNotEqual (const GGS_netmess_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_netmess_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.netmess ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_netmess_obj & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_netmess_map info  ;
    info.netmess = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_netmess_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.netmess ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
modifier_setNetmessForKey (C_Compiler & inLexique,
                        const GGS_netmess_obj & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (isBuilt () && inValue.isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setNetmessForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.netmess = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_netmess_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "Network message %K is unkown",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
modifier_del (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_netmess_obj & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "Netmork message %K is unkown",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_netmess_map::
modifier_put (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_netmess_obj & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "Network message %K is already defined in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_netmess_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_netmess_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_netmess_map GGS_netmess_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_netmess_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_netmess_map::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @netmess_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_netmess_obj  & GGS_netmess_map::cEnumerator::_netmess (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.netmess ;
}

//---------------------------------------------------------------------------*

