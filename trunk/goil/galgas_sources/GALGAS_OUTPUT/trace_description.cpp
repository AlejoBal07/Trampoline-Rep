//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'trace_description.cpp'                        *
//                        Generated by version 1.8.2                         *
//                       may 18th, 2009, at 17h49'26"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "trace_description.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "trace_description.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_description"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_description (C_Compiler & _inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_description at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_trace  var_cas_tr ;
  var_cas_tr = var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (34)).reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (34)) ;
  { const GGS_trace _var_2848 = var_cas_tr ; // CAST instruction
    if (_var_2848.getPtr () != NULL) {
      macroValidPointer (_var_2848.getPtr ()) ;
      if (typeid (cPtr_trace_on) == typeid (* (_var_2848.getPtr ()))) {
        const GGS_trace_on var_cas_to (_var_2848.getPtr ()) ;
        if ((function_get_bool (_inLexique, var_cas_to.reader_desc (_inLexique COMMA_SOURCE_FILE_AT_LINE (37)), GGS_bool (true, false) COMMA_SOURCE_FILE_AT_LINE (37))).isBuiltAndTrue ()) {
          GGS_string var_cas_res ;
          var_cas_res = GGS_string (true, "<\?xml version=\"1.0\" encoding=\"ISO-8859-1\"\?>\n") ;
          var_cas_res.appendCstring ("<app name=\"") ;
          var_cas_res._dotAssign_operation (function_getProjectName (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)).reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (39))) ;
          var_cas_res.appendCstring ("\">\n") ;
          GGS_tasks_by_type  var_cas_stasks ;
          var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
          {
            GGS_task_map::cEnumerator enumerator_1021 (var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)), true) ;
            const GGS_task_map::cElement * operand_1021 = NULL ;
            while (((operand_1021 = enumerator_1021.nextObject ()))) {
              macroValidPointer (operand_1021) ;
              if (((operand_1021->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (44)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (44)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
                var_cas_stasks._addAssign_operation (GGS_uint (true, 0U), operand_1021->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (45))) ;
              }else{
                var_cas_stasks._addAssign_operation (GGS_uint (true, 1U), operand_1021->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (47))) ;
              }
            }
          }
          GGS_uint  var_cas_id ;
          var_cas_id = GGS_uint (true, 0U) ;
          if ((function_get_bool (_inLexique, var_cas_to.reader_trace_task (_inLexique COMMA_SOURCE_FILE_AT_LINE (52)), GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (52))).isBuiltAndTrue ()) {
            var_cas_res.appendCstring ("<tasks>\n") ;
            GGS_tasks_by_type  var_cas_stasks ;
            var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
            {
              GGS_task_map::cEnumerator enumerator_1426 (var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (56)), true) ;
              const GGS_task_map::cElement * operand_1426 = NULL ;
              while (((operand_1426 = enumerator_1426.nextObject ()))) {
                macroValidPointer (operand_1426) ;
                if (((operand_1426->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (57)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (57)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
                  var_cas_stasks._addAssign_operation (GGS_uint (true, 0U), operand_1426->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (58))) ;
                }else{
                  var_cas_stasks._addAssign_operation (GGS_uint (true, 1U), operand_1426->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
                }
              }
            }
            {
              GGS_tasks_by_type::cEnumerator enumerator_1649 (var_cas_stasks, true) ;
              const GGS_tasks_by_type::cElement * operand_1649 = NULL ;
              while (((operand_1649 = enumerator_1649.nextObject ()))) {
                macroValidPointer (operand_1649) ;
                var_cas_res.appendCstring ("  <task name=\"") ;
                var_cas_res._dotAssign_operation (operand_1649->name) ;
                var_cas_res.appendCstring ("\" id=\"") ;
                var_cas_res._dotAssign_operation (var_cas_id.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (65))) ;
                var_cas_res.appendCstring ("\"/>\n") ;
                var_cas_id._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
              }
            }
            var_cas_res.appendCstring ("</tasks>\n") ;
          }
          var_cas_id = var_cas_stasks.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
          if ((function_get_bool (_inLexique, var_cas_to.reader_trace_isr (_inLexique COMMA_SOURCE_FILE_AT_LINE (72)), GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (72))).isBuiltAndTrue ()) {
            var_cas_res.appendCstring ("<isrs>\n") ;
            {
              GGS_isr_map::cEnumerator enumerator_1930 (var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (74)), true) ;
              const GGS_isr_map::cElement * operand_1930 = NULL ;
              while (((operand_1930 = enumerator_1930.nextObject ()))) {
                macroValidPointer (operand_1930) ;
                var_cas_res.appendCstring ("  <isr name=\"") ;
                var_cas_res._dotAssign_operation (operand_1930->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
                var_cas_res.appendCstring ("\" id=\"") ;
                var_cas_res._dotAssign_operation (var_cas_id.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (75))) ;
                var_cas_res.appendCstring ("\"/>\n") ;
                var_cas_id._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
              }
            }
            var_cas_res.appendCstring ("</isrs>\n") ;
          }
          if ((function_get_bool (_inLexique, var_cas_to.reader_trace_resource (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)), GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (81))).isBuiltAndTrue ()) {
            var_cas_id = GGS_uint (true, 0U) ;
            var_cas_res.appendCstring ("<resources>\n") ;
            {
              GGS_resource_map::cEnumerator enumerator_2224 (var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (84)), true) ;
              const GGS_resource_map::cElement * operand_2224 = NULL ;
              while (((operand_2224 = enumerator_2224.nextObject ()))) {
                macroValidPointer (operand_2224) ;
                var_cas_res.appendCstring ("  <resource name=\"") ;
                var_cas_res._dotAssign_operation (operand_2224->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (85))) ;
                var_cas_res.appendCstring ("\" id=\"") ;
                var_cas_res._dotAssign_operation (var_cas_id.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (85))) ;
                var_cas_res.appendCstring ("\"/>\n") ;
                var_cas_id._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ;
              }
            }
            var_cas_res.appendCstring ("</resources>\n") ;
          }
          if ((function_get_bool (_inLexique, var_cas_to.reader_trace_alarm (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)), GGS_bool (true, true) COMMA_SOURCE_FILE_AT_LINE (91))).isBuiltAndTrue ()) {
            var_cas_id = GGS_uint (true, 0U) ;
            var_cas_res.appendCstring ("<alarms>\n") ;
            {
              GGS_alarm_map::cEnumerator enumerator_2523 (var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)), true) ;
              const GGS_alarm_map::cElement * operand_2523 = NULL ;
              while (((operand_2523 = enumerator_2523.nextObject ()))) {
                macroValidPointer (operand_2523) ;
                var_cas_res.appendCstring ("  <alarm name=\"") ;
                var_cas_res._dotAssign_operation (operand_2523->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
                var_cas_res.appendCstring ("\" id=\"") ;
                var_cas_res._dotAssign_operation (var_cas_id.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
                var_cas_res.appendCstring ("\"/>\n") ;
                var_cas_id._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (96)) ;
              }
            }
            var_cas_res.appendCstring ("</alarms>\n") ;
          }
          var_cas_res.appendCstring ("</app>\n") ;
          GGS_string var_cas_desc_file_name ;
          var_cas_desc_file_name = (function_getProjectName (_inLexique COMMA_SOURCE_FILE_AT_LINE (103)))._operator_concat (GGS_string (true, ".desc")) ;
          const GGS_string _temp_2808 = var_cas_res ;
          if (_temp_2808._isBuilt ()) {
            _temp_2808 (HERE)->method_writeToFile (_inLexique, var_cas_desc_file_name COMMA_SOURCE_FILE_AT_LINE (104)) ;
          }
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_description\n") ;
  #endif
}

//---------------------------------------------------------------------------*

