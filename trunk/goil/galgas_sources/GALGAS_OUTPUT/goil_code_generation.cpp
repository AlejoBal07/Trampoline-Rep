//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.1                         *
//                    september 21th, 2009, at 18h19'9"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 572
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  if (((var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7455 = var_cas_startuphook ; // CAST instruction
    if (_var_7455.getPtr () != NULL) {
      macroValidPointer (_var_7455.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7455.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7455.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7696 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7696.getPtr () != NULL) {
      macroValidPointer (_var_7696.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7696.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7696.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7922 = var_cas_errorhook ; // CAST instruction
    if (_var_7922.getPtr () != NULL) {
      macroValidPointer (_var_7922.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7922.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7922.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8159 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8159.getPtr () != NULL) {
      macroValidPointer (_var_8159.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8159.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8159.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8401 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8401.getPtr () != NULL) {
      macroValidPointer (_var_8401.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8401.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8401.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8656 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8656.getPtr () != NULL) {
      macroValidPointer (_var_8656.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8656.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8656.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8926 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8926.getPtr () != NULL) {
      macroValidPointer (_var_8926.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8926.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8926.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9181 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9181.getPtr () != NULL) {
      macroValidPointer (_var_9181.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9181.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9181.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9367 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9367.getPtr () != NULL) {
      macroValidPointer (_var_9367.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9367.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9367.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
  if (((var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (238))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else{
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10045 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ; // CAST instruction
      if (_var_10045.getPtr () != NULL) {
        macroValidPointer (_var_10045.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10045.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10045.getPtr ()) ;
          if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (251))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10223 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ; // CAST instruction
      if (_var_10223.getPtr () != NULL) {
        macroValidPointer (_var_10223.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10223.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10223.getPtr ()) ;
          if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (256))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10531 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10531 = NULL ;
      while (((operand_10531 = enumerator_10531.nextObject ()))) {
        macroValidPointer (operand_10531) ;
        { const GGS_timing_prot _var_10729 = operand_10531->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ; // CAST instruction
          if (_var_10729.getPtr () != NULL) {
            macroValidPointer (_var_10729.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10729.getPtr ()))) {
            }else{
              if (((var_cas_use_tp).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10778 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10778 = NULL ;
      while (((operand_10778 = enumerator_10778.nextObject ()))) {
        macroValidPointer (operand_10778) ;
        { const GGS_timing_prot _var_10973 = operand_10778->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ; // CAST instruction
          if (_var_10973.getPtr () != NULL) {
            macroValidPointer (_var_10973.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10973.getPtr ()))) {
            }else{
              if (((var_cas_use_tp).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp).operator_isEqual (GGS_bool (true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11239 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
  if (temp_11239.isBuilt ()) {
    temp_11239 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (289)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (293)) COMMA_SOURCE_FILE_AT_LINE (293))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11405 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (296)), true) ;
    const GGS_ident_map::cElement * operand_11405 = NULL ;
    while (((operand_11405 = enumerator_11405.nextObject ()))) {
      macroValidPointer (operand_11405) ;
      { const GGS_basic_type _var_11643 = operand_11405->mInfo.value ; // CAST instruction
        if (_var_11643.getPtr () != NULL) {
          macroValidPointer (_var_11643.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11643.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11643.getPtr ()) ;
            if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (299))).isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11405->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (300))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (308)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (318)) ;
  if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("arm"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("avr"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("avr") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("c166"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("c166") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("h8300h") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("hcs12") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("libpcl") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("posix"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix_vp2") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("ppc") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("v850e") ;
  }else{
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (331)) ;
    var_cas_trampoline_target = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13206 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13206 = NULL ;
    while (((operand_13206 = enumerator_13206.nextObject ()))) {
      macroValidPointer (operand_13206) ;
      if (((var_cas_first).operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13206->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (inLexique,  var_cas_makefileSpecStr,  GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (358)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_makefileStr,  GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (359)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (360)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (361)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (361)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (362)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (362)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (363)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (363)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (364)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (364)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (367)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
  if (((var_cas_app_name_str).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (369)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (369)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (369)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (370)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (373)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  if (((var_cas_tpl_base_path_str).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (375)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (376)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
  GGS_string var_cas_autosarStr ;
  if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else{
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15233 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
  if (temp_15233.isBuilt ()) {
    temp_15233 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (388)) ;
  GGS_string var_cas_i_option ;
  var_cas_i_option = GGS_string ("") ;
  if ((gOption_goil_5F_options_posix_5F_it.value ()).isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (392)) ;
  const GGS_string temp_15499 = var_cas_makefileStr ;
  if (temp_15499.isBuilt ()) {
    temp_15499 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (394)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_makerulesStr,  GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (398)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory).operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  var_cas_trampolineTarget = function_trampoline_target_name (inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (401)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (402)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (405)) ;
  GGS_string var_cas_arch_chip_board ;
  var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (408)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (409)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (411)) ;
  { const GGS_basic_type _var_16565 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (413)) ; // CAST instruction
    if (_var_16565.getPtr () != NULL) {
      macroValidPointer (_var_16565.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_16565.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_16565.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  temp_16449 = var_cas_b ;
        if (temp_16449.isBuilt ()) {
          temp_16449 (HERE)->method_string (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (416)) ;
        }
        ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (417)) ;
      }else{
        ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  GGS_string ("false") COMMA_SOURCE_FILE_AT_LINE (419)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (431)) ;
  if (((var_cas_filename.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (432))).operator_not ()).isBuiltAndTrue ()) {
    const GGS_string temp_17044 = var_cas_makerulesStr ;
    if (temp_17044.isBuilt ()) {
      temp_17044 (HERE)->method_writeToFile (inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (433)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (450)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (452)) ;
  if (((var_cas_count).operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else{
    if (((var_cas_count).operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else{
      if (((var_cas_count).operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (465)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (476)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (477)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (478)) ;
  if (((var_cas_count).operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count).operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count).operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (491)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  if (((var_cas_count).operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count).operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count).operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (517)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (538)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (538)).add_operation (inLexique, var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (538)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (538)) COMMA_SOURCE_FILE_AT_LINE (538)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (540)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (541)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (544)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (544)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (546)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19735 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19735 = NULL ;
    while (((operand_19735 = enumerator_19735.nextObject ()))) {
      macroValidPointer (operand_19735) ;
      { const GGS_basic_type _var_20003 = operand_19735->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (552)) ; // CAST instruction
        if (_var_20003.getPtr () != NULL) {
          macroValidPointer (_var_20003.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20003.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20003.getPtr ()) ;
            if (((var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (553))).operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (553)) ;
            }
          }else{
            operand_19735->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_19735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (554)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (555)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (557)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (557)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (559)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20372 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20372 = NULL ;
    while (((operand_20372 = enumerator_20372.nextObject ()))) {
      macroValidPointer (operand_20372) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_20372->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (565)) ;
      if (((var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (566))).operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (568)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (569)) ;
  var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (572)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (572)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (574)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (576)) ;
  var_cas_c = var_cas_resources.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (579)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (579)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (581)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (583)) ;
  var_cas_c = var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (586)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (586)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (588)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (590)) ;
  var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (593)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (593)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (595)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (597)) ;
  if (((var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (601))).operator_strictSup (var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (601)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (602)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (604)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (604)) ;
  }
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (607)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (608)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (611)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (611)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (611)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (611)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22582 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22582 = NULL ;
    while (((operand_22582 = enumerator_22582.nextObject ()))) {
      macroValidPointer (operand_22582) ;
      { const GGS_app_trusted_obj _var_22742 = operand_22582->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (619)) ; // CAST instruction
        if (_var_22742.getPtr () != NULL) {
          macroValidPointer (_var_22742.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22742.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22742.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22661 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (621)), true) ;
              while (enumerator_22661.hasCurrentObject ()) {
                var_cas_tfs._addAssign_operation (enumerator_22661._key (HERE)) ;
                enumerator_22661.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (627)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (627)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (627)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (628)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (631)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (633)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (643)).add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (645)) COMMA_SOURCE_FILE_AT_LINE (645)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_setevent,  GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (665)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (666)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_callback,  GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (667)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (668)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_24286 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24286 = NULL ;
    while (((operand_24286 = enumerator_24286.nextObject ()))) {
      macroValidPointer (operand_24286) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24286->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) ;
      { const GGS_action_obj _var_25349 = var_cas_alarm_action ; // CAST instruction
        if (_var_25349.getPtr () != NULL) {
          macroValidPointer (_var_25349.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25349.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25349.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (679)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (679))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (680)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (680)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25349.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25349.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (683)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (683)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25349.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25349.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (686)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25349.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25349.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (689))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }else{
            operand_24286->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (691)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24286->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (695)) ;
      { const GGS_autostart_obj _var_26259 = var_cas_autostart ; // CAST instruction
        if (_var_26259.getPtr () != NULL) {
          macroValidPointer (_var_26259.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26259.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (698)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (699)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26259.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (702)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (703)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (704)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26259.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26259.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (706)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (707)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (707)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (707)) COMMA_SOURCE_FILE_AT_LINE (707)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
          }else{
            operand_24286->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (710)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24286->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24286->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715)) COMMA_SOURCE_FILE_AT_LINE (715)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24286->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (716)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (717))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (721))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_26784 = var_cas_app_for_obj ;
          if (temp_26784.isBuilt ()) {
            temp_26784 (HERE)->method_get (inLexique, operand_24286->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (724)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27074 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (734)), true) ;
    if (enumerator_27074 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27074 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_27074._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27074._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (740))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27074._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27074._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27074.next () ;
        _foreach_loop_27074 = (enumerator_27074 .hasCurrentObject ()) ;
        if (_foreach_loop_27074) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27074) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (750)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (751)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (752)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (752)) COMMA_SOURCE_FILE_AT_LINE (752)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28307 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28307 = NULL ;
    while (((operand_28307 = enumerator_28307.nextObject ()))) {
      macroValidPointer (operand_28307) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28307->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (776)) ;
      var_cas_act_as_basic = operand_28307->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
      { const GGS_basic_type _var_28730 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28730.getPtr () != NULL) {
          macroValidPointer (_var_28730.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28730.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28730.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (781)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (782)) ;
          }
        }
      }
      { const GGS_basic_type _var_28916 = var_cas_act_as_basic ; // CAST instruction
        if (_var_28916.getPtr () != NULL) {
          macroValidPointer (_var_28916.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28916.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28916.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (785)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (786)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (787)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_28307->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (0U) ;
  if (((var_cas_tl.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (797))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_29127 = var_cas_tl ;
    if (temp_29127.isBuilt ()) {
      temp_29127 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (798)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29252 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29252 = NULL ;
    while (((operand_29252 = enumerator_29252.nextObject ()))) {
      macroValidPointer (operand_29252) ;
      if (((operand_29252->prio).operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29252->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_29252->name, var_cas_actual_prio, operand_29252->act COMMA_SOURCE_FILE_AT_LINE (811)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (830))).operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30301 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30301 = NULL ;
      while (((operand_30301 = enumerator_30301.nextObject ()))) {
        macroValidPointer (operand_30301) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30301->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (842)) ;
        const GGS_isr_obj  temp_30549 = operand_30301->mInfo.isr ;
        if (temp_30549.isBuilt ()) {
          temp_30549 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (843)) ;
        }
        { const GGS_basic_type _var_30752 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30752.getPtr () != NULL) {
            macroValidPointer (_var_30752.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30752.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30752.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (846)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (847)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (848)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_30301->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (861)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (0U) ;
    if (((var_cas_il.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (863))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_31211 = var_cas_il ;
      if (temp_31211.isBuilt ()) {
        temp_31211 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (864)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31363 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31363 = NULL ;
      while (((operand_31363 = enumerator_31363.nextObject ()))) {
        macroValidPointer (operand_31363) ;
        if (((operand_31363->prio).operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31363->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (874)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_31363->name, var_cas_actual_prio, operand_31363->act COMMA_SOURCE_FILE_AT_LINE (877)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32747 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32747 = NULL ;
    while (((operand_32747 = enumerator_32747.nextObject ()))) {
      macroValidPointer (operand_32747) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_32888 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32888 = NULL ;
        while (((operand_32888 = enumerator_32888.nextObject ()))) {
          macroValidPointer (operand_32888) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32888->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (916)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32747->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (918)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33173 = var_cas_prio_for_task ;
            if (temp_33173.isBuilt ()) {
              temp_33173 (HERE)->method_get (inLexique, operand_32888->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (922)) ;
            }
            if (((var_cas_prio).operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (926)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_32888->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33482 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33482 = NULL ;
        while (((operand_33482 = enumerator_33482.nextObject ()))) {
          macroValidPointer (operand_33482) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33482->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (931)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32747->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (933)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33766 = var_cas_prio_for_isr ;
            if (temp_33766.isBuilt ()) {
              temp_33766 (HERE)->method_get (inLexique, operand_33482->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (937)) ;
            }
            if (((var_cas_prio).operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (941)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33482->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (942))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (942))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34329 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34329 = NULL ;
        while (((operand_34329 = enumerator_34329.nextObject ()))) {
          macroValidPointer (operand_34329) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34329->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (955)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32747->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (957)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34614 = var_cas_prio_for_task ;
            if (temp_34614.isBuilt ()) {
              temp_34614 (HERE)->method_get (inLexique, operand_34329->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (961)) ;
            }
            if (((var_cas_prio).operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (963)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34804 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34804 = NULL ;
        while (((operand_34804 = enumerator_34804.nextObject ()))) {
          macroValidPointer (operand_34804) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34804->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (968)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32747->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (970)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35088 = var_cas_prio_for_isr ;
            if (temp_35088.isBuilt ()) {
              temp_35088 (HERE)->method_get (inLexique, operand_34804->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (974)) ;
            }
            if (((var_cas_prio).operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (976)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_32747->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (981)) ;
      var_cas_comments.modifier_put (inLexique, operand_32747->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (982)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_36877 = var_cas_max_prio ;
  GGS_bool _condition_36877 (_variant_36877.isBuilt (), true) ;
  while (_condition_36877.isBuiltAndTrue ()) {
    _condition_36877 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36877.isBuiltAndTrue ()) {
      if (_variant_36877.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1027)) ;
        _condition_36877 = GGS_bool (false) ;
      }else{
        _variant_36877.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36234 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36234 = NULL ;
          while (((operand_36234 = enumerator_36234.nextObject ()))) {
            macroValidPointer (operand_36234) ;
            if (((operand_36234->mInfo.prio).operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36234->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1012)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36380 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36380 = NULL ;
          while (((operand_36380 = enumerator_36380.nextObject ()))) {
            macroValidPointer (operand_36380) ;
            if (((operand_36380->mInfo.prio).operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36380->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1015)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36526 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36526 = NULL ;
          while (((operand_36526 = enumerator_36526.nextObject ()))) {
            macroValidPointer (operand_36526) ;
            if (((operand_36526->mInfo.prio).operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36526->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1018)) ;
            }
          }
        }
        if (((var_cas_prio).operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1023)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37053 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37053 = NULL ;
    while (((operand_37053 = enumerator_37053.nextObject ()))) {
      macroValidPointer (operand_37053) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_37053->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37108 (operand_37053->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37108 = NULL ;
        while (((operand_37108 = enumerator_37108.nextObject ()))) {
          macroValidPointer (operand_37108) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37108->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)) COMMA_SOURCE_FILE_AT_LINE (1041))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37108->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37263 (operand_37053->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37263 = NULL ;
        while (((operand_37263 = enumerator_37263.nextObject ()))) {
          macroValidPointer (operand_37263) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37263->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) COMMA_SOURCE_FILE_AT_LINE (1046))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37263->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37417 (operand_37053->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_37417 = NULL ;
        while (((operand_37417 = enumerator_37417.nextObject ()))) {
          macroValidPointer (operand_37417) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37417->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) COMMA_SOURCE_FILE_AT_LINE (1051))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37417->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37573 (operand_37053->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)), true) ;
        const GGS_ident_map::cElement * operand_37573 = NULL ;
        while (((operand_37573 = enumerator_37573.nextObject ()))) {
          macroValidPointer (operand_37573) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37573->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) COMMA_SOURCE_FILE_AT_LINE (1056))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37573->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1057)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37734 (operand_37053->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)), true) ;
        const GGS_ident_map::cElement * operand_37734 = NULL ;
        while (((operand_37734 = enumerator_37734.nextObject ()))) {
          macroValidPointer (operand_37734) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37734->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) COMMA_SOURCE_FILE_AT_LINE (1061))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37734->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1062)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37892 (operand_37053->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)), true) ;
        const GGS_ident_map::cElement * operand_37892 = NULL ;
        while (((operand_37892 = enumerator_37892.nextObject ()))) {
          macroValidPointer (operand_37892) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)) COMMA_SOURCE_FILE_AT_LINE (1066))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37892->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1067)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_task,  GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1092)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_38826 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38826 = NULL ;
    while (((operand_38826 = enumerator_38826.nextObject ()))) {
      macroValidPointer (operand_38826) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_38826->mKey,  operand_38826->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1101)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)) COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1106))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1107))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1108))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1110))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1111))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string ("") ;
      if (((operand_38826->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1118)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1118))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1122)) ;
        ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_evt,  GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1124)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)) COMMA_SOURCE_FILE_AT_LINE (1125)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1126))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1126)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1129)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_40493 = var_cas_actual_priorities ;
      if (temp_40493.isBuilt ()) {
        temp_40493 (HERE)->method_get (inLexique, operand_38826->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1132)) ;
      }
      if (((var_cas_actual_prio).operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_38826->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1140))).operator_isEqual (GGS_string ("NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1142)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_38826->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41161 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41161 = NULL ;
          while (((operand_41161 = enumerator_41161.nextObject ()))) {
            macroValidPointer (operand_41161) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_41304 = var_cas_resources ;
              if (temp_41304.isBuilt ()) {
                temp_41304 (HERE)->method_get (inLexique, operand_41161->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1150)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)) ;
              { const GGS_resource_property_obj _var_41695 = var_cas_rez_prop ; // CAST instruction
                if (_var_41695.getPtr () != NULL) {
                  macroValidPointer (_var_41695.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41695.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_41161->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1154)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1154)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1161)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1166)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38826->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      { const GGS_basic_type _var_42302 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42302.getPtr () != NULL) {
          macroValidPointer (_var_42302.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42302.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42302.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1172)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1173)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1174)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38826->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) ;
      { const GGS_task_autostart_obj _var_42838 = var_cas_autostart ; // CAST instruction
        if (_var_42838.getPtr () != NULL) {
          macroValidPointer (_var_42838.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42838.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1180)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42838.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          }else{
            operand_38826->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1184)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_38826->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43016 = var_cas_timing_prot ;
      if (temp_43016.isBuilt ()) {
        temp_43016 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1190)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1191)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1196))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43432 = var_cas_app_for_obj ;
          if (temp_43432.isBuilt ()) {
            temp_43432 (HERE)->method_get (inLexique, operand_38826->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1198)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1199)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_43646 = var_cas_apps ;
          if (temp_43646.isBuilt ()) {
            temp_43646 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1203)) ;
          }
          { const GGS_app_trusted_obj _var_43789 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1204)) ; // CAST instruction
            if (_var_43789.getPtr () != NULL) {
              macroValidPointer (_var_43789.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43789.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1207)) COMMA_SOURCE_FILE_AT_LINE (1207)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1225)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1226)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1226)) COMMA_SOURCE_FILE_AT_LINE (1226)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1227)) COMMA_SOURCE_FILE_AT_LINE (1227)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_isr,  GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1249)) ;
  {
    GGS_isr_map::cEnumerator enumerator_45321 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45321 = NULL ;
    while (((operand_45321 = enumerator_45321.nextObject ()))) {
      macroValidPointer (operand_45321) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45321->mKey,  operand_45321->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1255)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1259)) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1260))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1261))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1262))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1263))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1263)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1264))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1265))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1267))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_46143 = var_cas_actual_priorities ;
      if (temp_46143.isBuilt ()) {
        temp_46143 (HERE)->method_get (inLexique, operand_45321->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46306 = operand_45321->mInfo.isr ;
      if (temp_46306.isBuilt ()) {
        temp_46306 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1274)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)) COMMA_SOURCE_FILE_AT_LINE (1275)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_45321->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_46549 = var_cas_timing_prot ;
      if (temp_46549.isBuilt ()) {
        temp_46549 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45321->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1282)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1283)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1287))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_46900 = var_cas_app_for_obj ;
          if (temp_46900.isBuilt ()) {
            temp_46900 (HERE)->method_get (inLexique, operand_45321->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1289)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1290)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_47113 = var_cas_apps ;
          if (temp_47113.isBuilt ()) {
            temp_47113 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1294)) ;
          }
          { const GGS_app_trusted_obj _var_47256 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)) ; // CAST instruction
            if (_var_47256.getPtr () != NULL) {
              macroValidPointer (_var_47256.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47256.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1296)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1298)) COMMA_SOURCE_FILE_AT_LINE (1298)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1313)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)) COMMA_SOURCE_FILE_AT_LINE (1317)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1318)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_counter,  GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1335)) ;
  {
    GGS_counter_map::cEnumerator enumerator_48451 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48451 = NULL ;
    while (((operand_48451 = enumerator_48451.nextObject ()))) {
      macroValidPointer (operand_48451) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48451->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)) COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48451->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1342))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1342)) ;
      GGS_string var_cas_name ;
      var_cas_name = (GGS_string ("_")).operator_concat (operand_48451->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1344))) ;
      if (((var_cas_name).operator_isEqual (GGS_string ("_SystemCounter"))).isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1349)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48451->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      { const GGS_basic_type _var_49182 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49182.getPtr () != NULL) {
          macroValidPointer (_var_49182.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49182.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49182.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1355)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1356)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1357)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_48451->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)) ;
      { const GGS_basic_type _var_49583 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49583.getPtr () != NULL) {
          macroValidPointer (_var_49583.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49583.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49583.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1364)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1365)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_48451->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)) ;
      { const GGS_basic_type _var_49975 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49975.getPtr () != NULL) {
          macroValidPointer (_var_49975.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49975.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49975.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1371)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1372)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1373)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_48451->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)) ;
        { const GGS_counter_type _var_50593 = var_cas_type ; // CAST instruction
          if (_var_50593.getPtr () != NULL) {
            macroValidPointer (_var_50593.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50593.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50593.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1385)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1386)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1387)) ;
        if (((operand_48451->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1389))).operator_isEqual (GGS_string ("SystemCounter"))).isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1390)) ;
        }else{
          if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1392))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_50918 = var_cas_app_for_obj ;
            if (temp_50918.isBuilt ()) {
              temp_50918 (HERE)->method_get (inLexique, operand_48451->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1394)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1395)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1404)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string ("") ;
  if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51580 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51580 = enumerator_51580.nextObject () ;
      if ((operand_51580 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51580 ;
        do{
          macroValidPointer (operand_51580) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_51580->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1420))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51580->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1421))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1421))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51580->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1422))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51580->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1422))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51580 = enumerator_51580.nextObject () ;
          _foreach_loop_51580 = ((operand_51580 != NULL)) ;
          if (_foreach_loop_51580) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51580) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)) COMMA_SOURCE_FILE_AT_LINE (1430)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1431)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1432)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1433)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_resource,  GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1453)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_internal_resource,  GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1454)) ;
  {
    GGS_resource_map::cEnumerator enumerator_53287 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53287 = NULL ;
    while (((operand_53287 = enumerator_53287.nextObject ()))) {
      macroValidPointer (operand_53287) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_53287->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53287->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_53568 = var_cas_rez_prio ;
      if (temp_53568.isBuilt ()) {
        temp_53568 (HERE)->method_get (inLexique, operand_53287->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1466)) ;
      }
      const GGS_string_map  temp_53620 = var_cas_rez_comments ;
      if (temp_53620.isBuilt ()) {
        temp_53620 (HERE)->method_get (inLexique, operand_53287->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1467)) ;
      }
      { const GGS_resource_property_obj _var_54116 = var_cas_rez_prop ; // CAST instruction
        if (_var_54116.getPtr () != NULL) {
          macroValidPointer (_var_54116.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54116.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54116.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54116.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53287->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1481)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53287->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1483)) COMMA_SOURCE_FILE_AT_LINE (1483)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53287->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1484))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1484)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1486)) COMMA_SOURCE_FILE_AT_LINE (1486)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1487)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1490))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_54532 = var_cas_app_for_obj ;
          if (temp_54532.isBuilt ()) {
            temp_54532 (HERE)->method_get (inLexique, operand_53287->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1492)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1493)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54841 (var_cas_regular_rez, true) ;
    while (enumerator_54841.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54841._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1505))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54841._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54841._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54841.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55072 (var_cas_regular_rez, true) ;
    if (enumerator_55072 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55072 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_55072._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55072.next () ;
        _foreach_loop_55072 = (enumerator_55072 .hasCurrentObject ()) ;
        if (_foreach_loop_55072) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55072) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1524)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1525)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1525)) COMMA_SOURCE_FILE_AT_LINE (1525)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1526)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_event,  GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1542)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56815 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56815 = NULL ;
    while (((operand_56815 = enumerator_56815.nextObject ()))) {
      macroValidPointer (operand_56815) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56815->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_56988 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_56988 = NULL ;
        while (((operand_56988 = enumerator_56988.nextObject ()))) {
          macroValidPointer (operand_56988) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_57065 = var_cas_events ;
          if (temp_57065.isBuilt ()) {
            temp_57065 (HERE)->method_get (inLexique, operand_56988->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1566)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)) ;
          { const GGS_event_mask_obj _var_57955 = var_cas_mask_obj ; // CAST instruction
            if (_var_57955.getPtr () != NULL) {
              macroValidPointer (_var_57955.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_57955.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_57955.getPtr ()) ;
                if ((((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1571)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1571)))).operator_isEqual (GGS_uint64 (0ULL))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1573)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1573))) ;
                }else{
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1575)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_56988->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1575)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1576)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_57955.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (inLexique, operand_56988->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1579)) COMMA_SOURCE_FILE_AT_LINE (1579))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_56988->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1581)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)) ;
                }else{
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_56988->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1586)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (inLexique, operand_56988->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)) COMMA_SOURCE_FILE_AT_LINE (1591))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_56988->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1593)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_56815->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1595))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_56988->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1596)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_56815->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1599)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58423 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58423 = NULL ;
    while (((operand_58423 = enumerator_58423.nextObject ()))) {
      macroValidPointer (operand_58423) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58423->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)) ;
      { const GGS_event_mask_obj _var_58861 = var_cas_evt_mask ; // CAST instruction
        if (_var_58861.getPtr () != NULL) {
          macroValidPointer (_var_58861.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58861.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_58861.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58423->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1611))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1611)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58423->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1612)) COMMA_SOURCE_FILE_AT_LINE (1612)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)) COMMA_SOURCE_FILE_AT_LINE (1613)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59022 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59022 = NULL ;
    while (((operand_59022 = enumerator_59022.nextObject ()))) {
      macroValidPointer (operand_59022) ;
      var_cas_sort_evts._addAssign_operation (operand_59022->mKey, operand_59022->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59192 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59192 = NULL ;
    while (((operand_59192 = enumerator_59192.nextObject ()))) {
      macroValidPointer (operand_59192) ;
      if ((var_cas_tasks_for_event.reader_hasKey (inLexique, operand_59192->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1635)) COMMA_SOURCE_FILE_AT_LINE (1635))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59304 = var_cas_tasks_for_event ;
        if (temp_59304.isBuilt ()) {
          temp_59304 (HERE)->method_get (inLexique, operand_59192->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1637)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59371 (var_cas_tasks, true) ;
          while (enumerator_59371.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59434 = var_cas_task_mask ;
            if (temp_59434.isBuilt ()) {
              temp_59434 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59371._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1641)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59371.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_59761 = GGS_uint (32U) ;
        GGS_bool _condition_59761 (_variant_59761.isBuilt (), true) ;
        while (_condition_59761.isBuiltAndTrue ()) {
          _condition_59761 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1648)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_59761.isBuiltAndTrue ()) {
            if (_variant_59761.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1650)) ;
              _condition_59761 = GGS_bool (false) ;
            }else{
              _variant_59761.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1649)) ;
            }
          }
        }
        if (((var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1651)))).isBuiltAndTrue ()) {
          operand_59192->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59192->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1652)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1653)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60056 (var_cas_tasks, true) ;
          while (enumerator_60056.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60056._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1658)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60056._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1660)) ;
            enumerator_60056.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59192->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1664))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1664)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59192->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1665)) COMMA_SOURCE_FILE_AT_LINE (1665)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1666)) COMMA_SOURCE_FILE_AT_LINE (1666)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1745)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1764)) ;
  if ((var_cas_config.reader_hasKey (inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1766))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_63699 = var_cas_config ;
    if (temp_63699.isBuilt ()) {
      temp_63699 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1768)) ;
    }
    { const GGS_basic_type _var_63926 = var_cas_pw ; // CAST instruction
      if (_var_63926.getPtr () != NULL) {
        macroValidPointer (_var_63926.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_63926.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_63926.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1771)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1773)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1774)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_63968 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_63968 = NULL ;
    while (((operand_63968 = enumerator_63968.nextObject ()))) {
      macroValidPointer (operand_63968) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64178 = GGS_uint (32U) ;
        GGS_bool _condition_64178 (_variant_64178.isBuilt (), true) ;
        while (_condition_64178.isBuiltAndTrue ()) {
          _condition_64178 = (operand_63968->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64178.isBuiltAndTrue ()) {
            if (_variant_64178.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1784)) ;
              _condition_64178 = GGS_bool (false) ;
            }else{
              _variant_64178.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1783)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_63968->fifosize ;
      }
      var_cas_fifo.appendCString ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1788))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1788))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1789)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1795)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1795))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_64667 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1796)) ;
  GGS_bool _condition_64667 (_variant_64667.isBuilt (), true) ;
  while (_condition_64667.isBuiltAndTrue ()) {
    _condition_64667 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64667.isBuiltAndTrue ()) {
      if (_variant_64667.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1802)) ;
        _condition_64667 = GGS_bool (false) ;
      }else{
        _variant_64667.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        if (((var_cas_prio).operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1806)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1806))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_64818 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64818 = NULL ;
    while (((operand_64818 = enumerator_64818.nextObject ()))) {
      macroValidPointer (operand_64818) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65028 = GGS_uint (32U) ;
        GGS_bool _condition_65028 (_variant_65028.isBuilt (), true) ;
        while (_condition_65028.isBuiltAndTrue ()) {
          _condition_65028 = (operand_64818->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65028.isBuiltAndTrue ()) {
            if (_variant_65028.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1814)) ;
              _condition_65028 = GGS_bool (false) ;
            }else{
              _variant_65028.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1813)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1815)) ;
      }else{
        var_cas_max_size = operand_64818->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1819))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1819))) ;
      var_cas_fifo.appendCString (" }") ;
      if (((var_cas_prio).operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1822)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1826)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1827)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1827)) COMMA_SOURCE_FILE_AT_LINE (1827)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp ;
  var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir ;
  ::routine_templates_directory (inLexique,  var_cas_temp_dir COMMA_SOURCE_FILE_AT_LINE (1844)) ;
  if (((var_cas_temp_dir).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    GGS_string var_cas_target ;
    var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    if (((var_cas_target).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      GGS_string var_cas_header ;
      GGS_string var_cas_obj_header ;
      GGS_string var_cas_implementation ;
      GGS_string var_cas_types ;
      GGS_config  var_cas_cfg ;
      var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file ;
      var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1855)) ;
      if (((var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1856))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1857)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file ;
      var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1860)) ;
      if (((var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1861))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1862)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf ;
      var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1865)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_header,  GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1867)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_obj_header,  GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1868)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_implementation,  GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1869)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_types,  GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1870)) ;
      GGS_prefix_map  var_cas_prefix ;
      var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1873)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1879)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1878)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1885)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1884)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1896)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1892)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1902)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1912)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1911)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1917)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1918)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1919)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1915)) ;
      const GGS_com  temp_68146 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1922)) ;
      if (temp_68146.isBuilt ()) {
        temp_68146 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1922)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1925)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1926)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1924)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1931)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1930)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1938)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1937)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1946)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1947)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1948)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1944)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1957)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1958)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1959)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1955)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1970)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1968)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1976)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1977)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1978)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1975)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1982)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1981)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1991)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1990)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1998)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1999)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1997)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2005)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2012)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2013)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (2011)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2016)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2017)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2018)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2019)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2020)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2021)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2022)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2015)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2026)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2034)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2033)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2041)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2042)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2043)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2044)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2045)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2047)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2040)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2051)) ;
      GGS_string var_cas_directory ;
      var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2062)) ;
      GGS_string var_cas_header_file ;
      var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file ;
      var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file ;
      var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file ;
      var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2069)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2071)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2072)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2073)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2074)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2075)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2076)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2077)) ;
      GGS_uint  var_cas_error_count ;
      var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      if (((var_cas_error_count).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2088)) ;
        }
        const GGS_string temp_73468 = var_cas_header ;
        if (temp_73468.isBuilt ()) {
          temp_73468 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2090)) ;
        }
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2092)) ;
        }
        const GGS_string temp_73670 = var_cas_obj_header ;
        if (temp_73670.isBuilt ()) {
          temp_73670 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2094)) ;
        }
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2096)) ;
        }
        const GGS_string temp_73884 = var_cas_implementation ;
        if (temp_73884.isBuilt ()) {
          temp_73884 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2098)) ;
        }
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2100)) ;
        }
        const GGS_string temp_74084 = var_cas_types ;
        if (temp_74084.isBuilt ()) {
          temp_74084 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2102)) ;
        }
        if ((gOption_goil_5F_options_generate_5F_makefile.value ()).isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir ;
          var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2105)) ;
          if (((var_cas_makefile_dir).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2110)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2113)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (2116)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2116)) COMMA_SOURCE_FILE_AT_LINE (2112)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2119)) ;
      }
    }else{
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2122)) ;
    }
  }else{
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2125)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

