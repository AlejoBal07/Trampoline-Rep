//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.5                         *
//                    november 26th, 2009, at 14h45'24"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 614
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString ()) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7222 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7222.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7452 = var_cas_startuphook ; // CAST instruction
    if (_var_7452.getPtr () != NULL) {
      macroValidPointer (_var_7452.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7452.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7452.getPtr ()) ;
        const GGS_bool cond_7435 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
        if (cond_7435.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7693 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7693.getPtr () != NULL) {
      macroValidPointer (_var_7693.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7693.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7693.getPtr ()) ;
        const GGS_bool cond_7676 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
        if (cond_7676.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7919 = var_cas_errorhook ; // CAST instruction
    if (_var_7919.getPtr () != NULL) {
      macroValidPointer (_var_7919.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7919.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7919.getPtr ()) ;
        const GGS_bool cond_7902 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
        if (cond_7902.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8156 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8156.getPtr () != NULL) {
      macroValidPointer (_var_8156.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8156.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8156.getPtr ()) ;
        const GGS_bool cond_8139 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
        if (cond_8139.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8398 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8398.getPtr () != NULL) {
      macroValidPointer (_var_8398.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8398.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8398.getPtr ()) ;
        const GGS_bool cond_8381 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        if (cond_8381.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8653 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8653.getPtr () != NULL) {
      macroValidPointer (_var_8653.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8653.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8653.getPtr ()) ;
        const GGS_bool cond_8636 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        if (cond_8636.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8923 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8923.getPtr () != NULL) {
      macroValidPointer (_var_8923.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8923.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8923.getPtr ()) ;
        const GGS_bool cond_8906 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        if (cond_8906.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9178 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9178.getPtr () != NULL) {
      macroValidPointer (_var_9178.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9178.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9178.getPtr ()) ;
        const GGS_bool cond_9161 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        if (cond_9161.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9364 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (237)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (241)) COMMA_SOURCE_FILE_AT_LINE (241))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
  const GGS_bool cond_9919 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9919.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_9919.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11462 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_11462.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10334 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ; // CAST instruction
      if (_var_10334.getPtr () != NULL) {
        macroValidPointer (_var_10334.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10334.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10334.getPtr ()) ;
          const GGS_bool cond_10313 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
          if (cond_10313.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10512 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ; // CAST instruction
      if (_var_10512.getPtr () != NULL) {
        macroValidPointer (_var_10512.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10512.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10512.getPtr ()) ;
          const GGS_bool cond_10491 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
          if (cond_10491.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10820 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10820 = NULL ;
      while (((operand_10820 = enumerator_10820.nextObject ()))) {
        macroValidPointer (operand_10820) ;
        { const GGS_timing_prot _var_11018 = operand_10820->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ; // CAST instruction
          if (_var_11018.getPtr () != NULL) {
            macroValidPointer (_var_11018.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11018.getPtr ()))) {
            }else{
              const GGS_bool cond_10998 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_10998.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11067 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_11067 = NULL ;
      while (((operand_11067 = enumerator_11067.nextObject ()))) {
        macroValidPointer (operand_11067) ;
        { const GGS_timing_prot _var_11262 = operand_11067->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ; // CAST instruction
          if (_var_11262.getPtr () != NULL) {
            macroValidPointer (_var_11262.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11262.getPtr ()))) {
            }else{
              const GGS_bool cond_11242 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11242.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11401 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11401.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11528 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
  if (temp_11528.isBuilt ()) {
    temp_11528 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11694 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), true) ;
    const GGS_ident_map::cElement * operand_11694 = NULL ;
    while (((operand_11694 = enumerator_11694.nextObject ()))) {
      macroValidPointer (operand_11694) ;
      { const GGS_basic_type _var_11932 = operand_11694->mInfo.value ; // CAST instruction
        if (_var_11932.getPtr () != NULL) {
          macroValidPointer (_var_11932.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11932.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11932.getPtr ()) ;
            const GGS_bool cond_11903 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
            if (cond_11903.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11694->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
  const GGS_bool cond_12497 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("arm")) ;
  if (cond_12497.isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (cond_12497.isBuiltAndFalse ()) {
    const GGS_bool cond_12568 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("avr")) ;
    if (cond_12568.isBuiltAndTrue ()) {
      var_cas_trampoline_target = GGS_string ("avr") ;
    }else if (cond_12568.isBuiltAndFalse ()) {
      const GGS_bool cond_12640 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("c166")) ;
      if (cond_12640.isBuiltAndTrue ()) {
        var_cas_trampoline_target = GGS_string ("c166") ;
      }else if (cond_12640.isBuiltAndFalse ()) {
        const GGS_bool cond_12714 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h")) ;
        if (cond_12714.isBuiltAndTrue ()) {
          var_cas_trampoline_target = GGS_string ("h8300h") ;
        }else if (cond_12714.isBuiltAndFalse ()) {
          const GGS_bool cond_12787 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12")) ;
          if (cond_12787.isBuiltAndTrue ()) {
            var_cas_trampoline_target = GGS_string ("hcs12") ;
          }else if (cond_12787.isBuiltAndFalse ()) {
            const GGS_bool cond_12861 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl")) ;
            if (cond_12861.isBuiltAndTrue ()) {
              var_cas_trampoline_target = GGS_string ("libpcl") ;
            }else if (cond_12861.isBuiltAndFalse ()) {
              const GGS_bool cond_12934 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix")) ;
              if (cond_12934.isBuiltAndTrue ()) {
                var_cas_trampoline_target = GGS_string ("posix") ;
              }else if (cond_12934.isBuiltAndFalse ()) {
                const GGS_bool cond_13011 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2")) ;
                if (cond_13011.isBuiltAndTrue ()) {
                  var_cas_trampoline_target = GGS_string ("posix_vp2") ;
                }else if (cond_13011.isBuiltAndFalse ()) {
                  const GGS_bool cond_13082 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc")) ;
                  if (cond_13082.isBuiltAndTrue ()) {
                    var_cas_trampoline_target = GGS_string ("ppc") ;
                  }else if (cond_13082.isBuiltAndFalse ()) {
                    const GGS_bool cond_13154 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e")) ;
                    if (cond_13154.isBuiltAndTrue ()) {
                      var_cas_trampoline_target = GGS_string ("v850e") ;
                    }else if (cond_13154.isBuiltAndFalse ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (338)) ;
                      var_cas_trampoline_target = GGS_string ("") ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_trampoline_target_name (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_trampoline_target_name (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptor kFunction_descriptor_trampoline_target_name ("trampoline_target_name",
                              functionForGenericCall_trampoline_target_name,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13495 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13495 = NULL ;
    while (((operand_13495 = enumerator_13495.nextObject ()))) {
      macroValidPointer (operand_13495) ;
      const GGS_bool cond_13560 = (var_cas_first).operator_not () ;
      if (cond_13560.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13495->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (351))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (354)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (362)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (365)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (366)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (366)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (367)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (368)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (368)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (369)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (369)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (372)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (372)) ;
  const GGS_bool cond_14546 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14546.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (374)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (374)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (374)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (375)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (378)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) ;
  const GGS_bool cond_14885 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14885.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (380)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (380)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (381)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (383)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_15284 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_15284.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_15284.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15498 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (391)) ;
  if (temp_15498.isBuilt ()) {
    temp_15498 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (394))) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_LINKSCRIPT"), (function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (395)) COMMA_SOURCE_FILE_AT_LINE (395))).operator_isNotEqual (GGS_string ("")) COMMA_SOURCE_FILE_AT_LINE (395))) ;
  var_cas_flags.dotAssign_operation (function_bool_class_make_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (397)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (397))) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (399)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$SCRIPT_FILE$"),  function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (402)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_16182 = gOption_goil_5F_options_posix_5F_it.value () ;
  if (cond_16182.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (412)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (413)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (421)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (423)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (423)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (423)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (424)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (424)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (424)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (425)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (425)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (428)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (430)) COMMA_SOURCE_FILE_AT_LINE (430)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (431)) COMMA_SOURCE_FILE_AT_LINE (431)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (432)) COMMA_SOURCE_FILE_AT_LINE (432)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (434)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (436)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (436)) COMMA_SOURCE_FILE_AT_LINE (436)) COMMA_SOURCE_FILE_AT_LINE (436)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (437)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (437)) COMMA_SOURCE_FILE_AT_LINE (437)) COMMA_SOURCE_FILE_AT_LINE (437)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_17792 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17792.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_17792.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (447)) ;
  const GGS_string temp_18104 = var_cas_makefileStr ;
  if (temp_18104.isBuilt ()) {
    temp_18104 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (465)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (466)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (467)) ;
  const GGS_bool cond_18651 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_18651.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_18651.isBuiltAndFalse ()) {
    const GGS_bool cond_18709 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_18709.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_18709.isBuiltAndFalse ()) {
      const GGS_bool cond_18773 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_18773.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_18773.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (480)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (491)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (492)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (493)) ;
  const GGS_bool cond_19127 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_19127.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19127.isBuiltAndFalse ()) {
    const GGS_bool cond_19185 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_19185.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19185.isBuiltAndFalse ()) {
      const GGS_bool cond_19249 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_19249.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19249.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (506)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_19585 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_19585.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19585.isBuiltAndFalse ()) {
    const GGS_bool cond_19644 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_19644.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19644.isBuiltAndFalse ()) {
      const GGS_bool cond_19709 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_19709.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19709.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (532)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (553)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (553)) COMMA_SOURCE_FILE_AT_LINE (553)) ;
  const GGS_bool cond_20274 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20274.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (555)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (559)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (559)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20795 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20795 = NULL ;
    while (((operand_20795 = enumerator_20795.nextObject ()))) {
      macroValidPointer (operand_20795) ;
      { const GGS_basic_type _var_21063 = operand_20795->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (567)) ; // CAST instruction
        if (_var_21063.getPtr () != NULL) {
          macroValidPointer (_var_21063.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_21063.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_21063.getPtr ()) ;
            const GGS_bool cond_20945 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (568))).operator_strictSup (var_cas_max_act) ;
            if (cond_20945.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (568)) ;
            }
          }else{
            operand_20795->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_20795->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (569)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (570)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (572)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (572)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (574)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_21432 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_21432 = NULL ;
    while (((operand_21432 = enumerator_21432.nextObject ()))) {
      macroValidPointer (operand_21432) ;
      GGS_lstringlist  var_cas_evts = operand_21432->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (580)) ;
      const GGS_bool cond_21569 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_21569.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (583)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (583)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (584)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (587)) ;
  const GGS_bool cond_21830 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21830.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (589)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (591)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
  const GGS_bool cond_22118 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22118.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (596)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (598)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) ;
  const GGS_bool cond_22410 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22410.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (603)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (605)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) ;
  const GGS_bool cond_22706 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22706.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (610)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (612)) ;
  const GGS_bool cond_23094 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_23094.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (617)) ;
  }else if (cond_23094.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (619)) ;
  }
  const GGS_bool cond_23175 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_23175.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (622)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (623)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (626)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (626)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (626)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (628)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_23642 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_23642 = NULL ;
    while (((operand_23642 = enumerator_23642.nextObject ()))) {
      macroValidPointer (operand_23642) ;
      { const GGS_app_trusted_obj _var_23802 = operand_23642->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (634)) ; // CAST instruction
        if (_var_23802.getPtr () != NULL) {
          macroValidPointer (_var_23802.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_23802.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_23802.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_23721 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (636)), true) ;
              while (enumerator_23721.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_23721._key (HERE)) ;
                enumerator_23721.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (642)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (642)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (643)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (646)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (648)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (658)) COMMA_SOURCE_FILE_AT_LINE (658)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (660)) COMMA_SOURCE_FILE_AT_LINE (660)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (673)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (674)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (675)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (676)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_25253 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_25253 = NULL ;
    while (((operand_25253 = enumerator_25253.nextObject ()))) {
      macroValidPointer (operand_25253) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_25253->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (685)) ;
      { const GGS_action_obj _var_26316 = var_cas_alarm_action ; // CAST instruction
        if (_var_26316.getPtr () != NULL) {
          macroValidPointer (_var_26316.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_26316.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_26316.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (689))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (690)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (690))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (690)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_26316.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_26316.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (693)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (693))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (693)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_26316.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_26316.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (696)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (696))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (696)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_26316.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_26316.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (699)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (699)) ;
          }else{
            operand_25253->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (701)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_25253->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (705)) ;
      { const GGS_autostart_obj _var_27226 = var_cas_autostart ; // CAST instruction
        if (_var_27226.getPtr () != NULL) {
          macroValidPointer (_var_27226.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_27226.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (708)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (709)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (710)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_27226.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (712)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (713)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (714)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_27226.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_27226.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (716)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (717)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (717)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (717)) COMMA_SOURCE_FILE_AT_LINE (717)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)) COMMA_SOURCE_FILE_AT_LINE (718)) ;
          }else{
            operand_25253->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (720)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_25253->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (724)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_25253->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (725)) COMMA_SOURCE_FILE_AT_LINE (725)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_25253->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (726))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (726)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (727))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (727)) ;
      const GGS_bool cond_27866 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_27866.isBuiltAndTrue ()) {
        const GGS_bool cond_27850 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_27850.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_27751 = var_cas_app_for_obj ;
          if (temp_27751.isBuilt ()) {
            temp_27751 (HERE)->method_get (inLexique, operand_25253->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (733)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (734)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_28041 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (744)), true) ;
    if (enumerator_28041 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_28041 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_28041._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_28041._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (750))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_28041._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_28041._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_28041.next () ;
        _foreach_loop_28041 = (enumerator_28041 .hasCurrentObject ()) ;
        if (_foreach_loop_28041) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_28041) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (760)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (761)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (762)) COMMA_SOURCE_FILE_AT_LINE (762)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_29279 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_29279 = NULL ;
    while (((operand_29279 = enumerator_29279.nextObject ()))) {
      macroValidPointer (operand_29279) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_29279->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (786)) ;
      var_cas_act_as_basic = operand_29279->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (787)) ;
      { const GGS_basic_type _var_29702 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_29702.getPtr () != NULL) {
          macroValidPointer (_var_29702.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29702.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29702.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (790)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (791)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (792)) ;
          }
        }
      }
      { const GGS_basic_type _var_29888 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29888.getPtr () != NULL) {
          macroValidPointer (_var_29888.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29888.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29888.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (795)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (796)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (797)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_29279->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_30129 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_30129.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_30099 = var_cas_tl ;
    if (temp_30099.isBuilt ()) {
      temp_30099 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (808)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_30224 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_30224 = NULL ;
    while (((operand_30224 = enumerator_30224.nextObject ()))) {
      macroValidPointer (operand_30224) ;
      const GGS_bool cond_30480 = (operand_30224->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_30480.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_30224->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (818)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_30224->name, var_cas_actual_prio, operand_30224->act COMMA_SOURCE_FILE_AT_LINE (821)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_32823 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_32823.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_31273 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_31273 = NULL ;
      while (((operand_31273 = enumerator_31273.nextObject ()))) {
        macroValidPointer (operand_31273) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_31273->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (852)) ;
        const GGS_isr_obj  temp_31521 = operand_31273->mInfo.isr ;
        if (temp_31521.isBuilt ()) {
          temp_31521 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (853)) ;
        }
        { const GGS_basic_type _var_31724 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_31724.getPtr () != NULL) {
            macroValidPointer (_var_31724.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_31724.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_31724.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (857)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (858)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_31273->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (871)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_32217 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_32217.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_32183 = var_cas_il ;
      if (temp_32183.isBuilt ()) {
        temp_32183 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (874)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_32335 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_32335 = NULL ;
      while (((operand_32335 = enumerator_32335.nextObject ()))) {
        macroValidPointer (operand_32335) ;
        const GGS_bool cond_32611 = (operand_32335->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_32611.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_32335->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (884)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_32335->name, var_cas_actual_prio, operand_32335->act COMMA_SOURCE_FILE_AT_LINE (887)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_32823.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_33719 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_33719 = NULL ;
    while (((operand_33719 = enumerator_33719.nextObject ()))) {
      macroValidPointer (operand_33719) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33860 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33860 = NULL ;
        while (((operand_33860 = enumerator_33860.nextObject ()))) {
          macroValidPointer (operand_33860) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33860->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (926)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33719->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (928)) ;
          const GGS_bool cond_34408 = var_cas_owned ;
          if (cond_34408.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34145 = var_cas_prio_for_task ;
            if (temp_34145.isBuilt ()) {
              temp_34145 (HERE)->method_get (inLexique, operand_33860->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (932)) ;
            }
            const GGS_bool cond_34260 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34260.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (936)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33860->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (937))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (937))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34454 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34454 = NULL ;
        while (((operand_34454 = enumerator_34454.nextObject ()))) {
          macroValidPointer (operand_34454) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34454->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (941)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33719->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (943)) ;
          const GGS_bool cond_35002 = var_cas_owned ;
          if (cond_35002.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34738 = var_cas_prio_for_isr ;
            if (temp_34738.isBuilt ()) {
              temp_34738 (HERE)->method_get (inLexique, operand_34454->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (947)) ;
            }
            const GGS_bool cond_34854 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34854.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (951)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_34454->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (952))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (952))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_35112 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_35112.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_35301 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_35301 = NULL ;
        while (((operand_35301 = enumerator_35301.nextObject ()))) {
          macroValidPointer (operand_35301) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35301->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (965)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33719->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (967)) ;
          const GGS_bool cond_35730 = var_cas_owned ;
          if (cond_35730.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35586 = var_cas_prio_for_task ;
            if (temp_35586.isBuilt ()) {
              temp_35586 (HERE)->method_get (inLexique, operand_35301->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (971)) ;
            }
            const GGS_bool cond_35710 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35710.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (973)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35776 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35776 = NULL ;
        while (((operand_35776 = enumerator_35776.nextObject ()))) {
          macroValidPointer (operand_35776) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35776->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (978)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33719->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (980)) ;
          const GGS_bool cond_36205 = var_cas_owned ;
          if (cond_36205.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_36060 = var_cas_prio_for_isr ;
            if (temp_36060.isBuilt ()) {
              temp_36060 (HERE)->method_get (inLexique, operand_35776->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (984)) ;
            }
            const GGS_bool cond_36185 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_36185.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (986)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_33719->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (991)) ;
      var_cas_comments.modifier_put (inLexique, operand_33719->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (992)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37849 = var_cas_max_prio ;
  GGS_bool _condition_37849 (_variant_37849.isBuilt (), true) ;
  while (_condition_37849.isBuiltAndTrue ()) {
    _condition_37849 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37849.isBuiltAndTrue ()) {
      if (_variant_37849.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1037)) ;
        _condition_37849 = GGS_bool (false) ;
      }else{
        _variant_37849.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_37206 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_37206 = NULL ;
          while (((operand_37206 = enumerator_37206.nextObject ()))) {
            macroValidPointer (operand_37206) ;
            const GGS_bool cond_37298 = (operand_37206->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37298.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37206->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1022)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37352 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_37352 = NULL ;
          while (((operand_37352 = enumerator_37352.nextObject ()))) {
            macroValidPointer (operand_37352) ;
            const GGS_bool cond_37444 = (operand_37352->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37444.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37352->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1025)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37498 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_37498 = NULL ;
          while (((operand_37498 = enumerator_37498.nextObject ()))) {
            macroValidPointer (operand_37498) ;
            const GGS_bool cond_37590 = (operand_37498->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37590.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37498->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1028)) ;
            }
          }
        }
        const GGS_bool cond_37787 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_37787.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1033)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1036)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_38025 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_38025 = NULL ;
    while (((operand_38025 = enumerator_38025.nextObject ()))) {
      macroValidPointer (operand_38025) ;
      GGS_string var_cas_app_name = operand_38025->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1049)) ;
      {
        GGS_ident_map::cEnumerator enumerator_38080 (operand_38025->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_38080 = NULL ;
        while (((operand_38080 = enumerator_38080.nextObject ()))) {
          macroValidPointer (operand_38080) ;
          const GGS_bool cond_38200 = (var_cas_app_for_obj.reader_hasKey (operand_38080->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)))).operator_not () ;
          if (cond_38200.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38080->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38235 (operand_38025->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)), true) ;
        const GGS_ident_map::cElement * operand_38235 = NULL ;
        while (((operand_38235 = enumerator_38235.nextObject ()))) {
          macroValidPointer (operand_38235) ;
          const GGS_bool cond_38354 = (var_cas_app_for_obj.reader_hasKey (operand_38235->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)))).operator_not () ;
          if (cond_38354.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38235->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1057)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38389 (operand_38025->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)), true) ;
        const GGS_ident_map::cElement * operand_38389 = NULL ;
        while (((operand_38389 = enumerator_38389.nextObject ()))) {
          macroValidPointer (operand_38389) ;
          const GGS_bool cond_38510 = (var_cas_app_for_obj.reader_hasKey (operand_38389->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)))).operator_not () ;
          if (cond_38510.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38389->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1062)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38545 (operand_38025->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)), true) ;
        const GGS_ident_map::cElement * operand_38545 = NULL ;
        while (((operand_38545 = enumerator_38545.nextObject ()))) {
          macroValidPointer (operand_38545) ;
          const GGS_bool cond_38671 = (var_cas_app_for_obj.reader_hasKey (operand_38545->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)))).operator_not () ;
          if (cond_38671.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38545->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1067)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38706 (operand_38025->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)), true) ;
        const GGS_ident_map::cElement * operand_38706 = NULL ;
        while (((operand_38706 = enumerator_38706.nextObject ()))) {
          macroValidPointer (operand_38706) ;
          const GGS_bool cond_38829 = (var_cas_app_for_obj.reader_hasKey (operand_38706->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)))).operator_not () ;
          if (cond_38829.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38706->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1072)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38864 (operand_38025->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1075)), true) ;
        const GGS_ident_map::cElement * operand_38864 = NULL ;
        while (((operand_38864 = enumerator_38864.nextObject ()))) {
          macroValidPointer (operand_38864) ;
          const GGS_bool cond_38988 = (var_cas_app_for_obj.reader_hasKey (operand_38864->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)))).operator_not () ;
          if (cond_38988.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38864->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1077)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1099)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39787 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39787 = NULL ;
    while (((operand_39787 = enumerator_39787.nextObject ()))) {
      macroValidPointer (operand_39787) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_39787->mKey,  operand_39787->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1113)) COMMA_SOURCE_FILE_AT_LINE (1113)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1114))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1115))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1116))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1117))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1118))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1118)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1119))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_40973 = (operand_39787->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_40973.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1128)) ;
      }else if (cond_40973.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1130)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1132)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)) COMMA_SOURCE_FILE_AT_LINE (1133)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1134))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1137)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_41458 = var_cas_actual_priorities ;
      if (temp_41458.isBuilt ()) {
        temp_41458 (HERE)->method_get (inLexique, operand_39787->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      }
      const GGS_bool cond_41729 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_41729.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_41918 = (operand_39787->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1148)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1148))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_41918.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1150)) ;
      }else if (cond_41918.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_39787->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_42126 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_42126 = NULL ;
          while (((operand_42126 = enumerator_42126.nextObject ()))) {
            macroValidPointer (operand_42126) ;
            const GGS_bool cond_42685 = var_cas_no_internal_rez_found ;
            if (cond_42685.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_42269 = var_cas_resources ;
              if (temp_42269.isBuilt ()) {
                temp_42269 (HERE)->method_get (inLexique, operand_42126->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1158)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
              { const GGS_resource_property_obj _var_42660 = var_cas_rez_prop ; // CAST instruction
                if (_var_42660.getPtr () != NULL) {
                  macroValidPointer (_var_42660.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_42660.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_42126->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1162)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1162)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_42834 = var_cas_no_internal_rez_found ;
        if (cond_42834.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1169)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1173)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1174)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39787->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) ;
      { const GGS_basic_type _var_43267 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_43267.getPtr () != NULL) {
          macroValidPointer (_var_43267.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_43267.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_43267.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1179)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1179)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1180)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1182)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39787->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) ;
      { const GGS_task_autostart_obj _var_43803 = var_cas_autostart ; // CAST instruction
        if (_var_43803.getPtr () != NULL) {
          macroValidPointer (_var_43803.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43803.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1188)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43803.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1190)) ;
          }else{
            operand_39787->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1192)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_39787->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43981 = var_cas_timing_prot ;
      if (temp_43981.isBuilt ()) {
        temp_43981 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1198)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1198)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1199)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1200)) ;
      const GGS_bool cond_44929 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_44929.isBuiltAndTrue ()) {
        const GGS_bool cond_44842 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_44842.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_44397 = var_cas_app_for_obj ;
          if (temp_44397.isBuilt ()) {
            temp_44397 (HERE)->method_get (inLexique, operand_39787->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1206)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1207)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_44611 = var_cas_apps ;
          if (temp_44611.isBuilt ()) {
            temp_44611 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1211)) ;
          }
          { const GGS_app_trusted_obj _var_44754 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1212)) ; // CAST instruction
            if (_var_44754.getPtr () != NULL) {
              macroValidPointer (_var_44754.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44754.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1215)) COMMA_SOURCE_FILE_AT_LINE (1215)) ;
        }else if (cond_44842.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1217)) ;
        }
      }else if (cond_44929.isBuiltAndFalse ()) {
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1220)) ;
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_45413 = var_cas_non_preemptable_exists ;
  if (cond_45413.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1237)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1238)) COMMA_SOURCE_FILE_AT_LINE (1238)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1239)) COMMA_SOURCE_FILE_AT_LINE (1239)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1256)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_46415 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_46415 = NULL ;
    while (((operand_46415 = enumerator_46415.nextObject ()))) {
      macroValidPointer (operand_46415) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_46415->mKey,  operand_46415->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1271))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1272))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1273))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1274))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1274)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1275))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1275)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1276))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1278))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_47237 = var_cas_actual_priorities ;
      if (temp_47237.isBuilt ()) {
        temp_47237 (HERE)->method_get (inLexique, operand_46415->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1282)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1283)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_47400 = operand_46415->mInfo.isr ;
      if (temp_47400.isBuilt ()) {
        temp_47400 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1285)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)) COMMA_SOURCE_FILE_AT_LINE (1286)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_46415->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1289)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_47643 = var_cas_timing_prot ;
      if (temp_47643.isBuilt ()) {
        temp_47643 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_46415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1292)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1292)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1293)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1294)) ;
      const GGS_bool cond_48453 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_48453.isBuiltAndTrue ()) {
        const GGS_bool cond_48437 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_48437.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_47994 = var_cas_app_for_obj ;
          if (temp_47994.isBuilt ()) {
            temp_47994 (HERE)->method_get (inLexique, operand_46415->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1300)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1301)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_48207 = var_cas_apps ;
          if (temp_48207.isBuilt ()) {
            temp_48207 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1305)) ;
          }
          { const GGS_app_trusted_obj _var_48350 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)) ; // CAST instruction
            if (_var_48350.getPtr () != NULL) {
              macroValidPointer (_var_48350.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_48350.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1307)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1309)) COMMA_SOURCE_FILE_AT_LINE (1309)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1324)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1328)) COMMA_SOURCE_FILE_AT_LINE (1328)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1329)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1342)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_49531 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_49531 = NULL ;
    while (((operand_49531 = enumerator_49531.nextObject ()))) {
      macroValidPointer (operand_49531) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_49531->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)) COMMA_SOURCE_FILE_AT_LINE (1350)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_49531->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1351))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_49531->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1353))) ;
      const GGS_bool cond_49925 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_49925.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1358)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_49531->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)) ;
      { const GGS_basic_type _var_50262 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_50262.getPtr () != NULL) {
          macroValidPointer (_var_50262.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50262.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50262.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1365)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1366)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_49531->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)) ;
      { const GGS_basic_type _var_50663 = var_cas_max_as_basic ; // CAST instruction
        if (_var_50663.getPtr () != NULL) {
          macroValidPointer (_var_50663.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50663.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50663.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1371)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1371)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1373)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1374)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_49531->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)) ;
      { const GGS_basic_type _var_51055 = var_cas_min_as_basic ; // CAST instruction
        if (_var_51055.getPtr () != NULL) {
          macroValidPointer (_var_51055.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_51055.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_51055.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1381)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1382)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_52143 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_52143.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_49531->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1390)) ;
        { const GGS_counter_type _var_51673 = var_cas_type ; // CAST instruction
          if (_var_51673.getPtr () != NULL) {
            macroValidPointer (_var_51673.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_51673.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_51673.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1394)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1395)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1396)) ;
        const GGS_bool cond_51885 = (operand_49531->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1398))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_51885.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1399)) ;
        }else if (cond_51885.isBuiltAndFalse ()) {
          const GGS_bool cond_52107 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_52107.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_51998 = var_cas_app_for_obj ;
            if (temp_51998.isBuilt ()) {
              temp_51998 (HERE)->method_get (inLexique, operand_49531->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1403)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1404)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1413)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_53403 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_53403.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_52660 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_52660 = enumerator_52660.nextObject () ;
      if ((operand_52660 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_52660 ;
        do{
          macroValidPointer (operand_52660) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_52660->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1429))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52660->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1430))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1430))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52660->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1431))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52660->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1431))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_52660 = enumerator_52660.nextObject () ;
          _foreach_loop_52660 = ((operand_52660 != NULL)) ;
          if (_foreach_loop_52660) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_52660) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)) COMMA_SOURCE_FILE_AT_LINE (1439)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1440)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1441)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1442)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1457)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1458)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_54334 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_54334 = NULL ;
    while (((operand_54334 = enumerator_54334.nextObject ()))) {
      macroValidPointer (operand_54334) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_54334->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_54334->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_54615 = var_cas_rez_prio ;
      if (temp_54615.isBuilt ()) {
        temp_54615 (HERE)->method_get (inLexique, operand_54334->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1472)) ;
      }
      const GGS_string_map  temp_54667 = var_cas_rez_comments ;
      if (temp_54667.isBuilt ()) {
        temp_54667 (HERE)->method_get (inLexique, operand_54334->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1473)) ;
      }
      { const GGS_resource_property_obj _var_55163 = var_cas_rez_prop ; // CAST instruction
        if (_var_55163.getPtr () != NULL) {
          macroValidPointer (_var_55163.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_55163.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_55163.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_55163.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_54334->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1487)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_54334->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) COMMA_SOURCE_FILE_AT_LINE (1489)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_54334->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1490))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1490)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) COMMA_SOURCE_FILE_AT_LINE (1492)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1493)) ;
      const GGS_bool cond_55697 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_55697.isBuiltAndTrue ()) {
        const GGS_bool cond_55681 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_55681.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_55579 = var_cas_app_for_obj ;
          if (temp_55579.isBuilt ()) {
            temp_55579 (HERE)->method_get (inLexique, operand_54334->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1498)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1499)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_55888 (var_cas_regular_rez, true) ;
    while (enumerator_55888.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55888._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1511))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55888._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55888._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_55888.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_56124 (var_cas_regular_rez, true) ;
    if (enumerator_56124 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("#define OS_START_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n") ;
      var_cas_rez_imp.appendCString ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_56124 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_56124._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_56124.next () ;
        _foreach_loop_56124 = (enumerator_56124 .hasCurrentObject ()) ;
        if (_foreach_loop_56124) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_56124) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
      var_cas_rez_imp.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n"
        "\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1534)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1535)) COMMA_SOURCE_FILE_AT_LINE (1535)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1536)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1548)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_58080 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_58080 = NULL ;
    while (((operand_58080 = enumerator_58080.nextObject ()))) {
      macroValidPointer (operand_58080) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_58080->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1571)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_58253 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_58253 = NULL ;
        while (((operand_58253 = enumerator_58253.nextObject ()))) {
          macroValidPointer (operand_58253) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_58330 = var_cas_events ;
          if (temp_58330.isBuilt ()) {
            temp_58330 (HERE)->method_get (inLexique, operand_58253->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1575)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)) ;
          { const GGS_event_mask_obj _var_59220 = var_cas_mask_obj ; // CAST instruction
            if (_var_59220.getPtr () != NULL) {
              macroValidPointer (_var_59220.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59220.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_59220.getPtr ()) ;
                const GGS_bool cond_58671 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_58671.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1582))) ;
                }else if (cond_58671.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1584)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_58253->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1584)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1585)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_59220.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_59070 = var_cas_evt_usage.reader_hasKey (operand_58253->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1588))) ;
                if (cond_59070.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_58253->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1590)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)) ;
                }else if (cond_59070.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_58253->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1595)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_59430 = var_cas_tasks_for_event.reader_hasKey (operand_58253->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1600))) ;
          if (cond_59430.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_58253->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1602)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_58080->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1604))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_58253->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1605)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_58080->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1608)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_59688 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_59688 = NULL ;
    while (((operand_59688 = enumerator_59688.nextObject ()))) {
      macroValidPointer (operand_59688) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_59688->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1616)) ;
      { const GGS_event_mask_obj _var_60126 = var_cas_evt_mask ; // CAST instruction
        if (_var_60126.getPtr () != NULL) {
          macroValidPointer (_var_60126.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_60126.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_60126.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59688->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1620))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1620)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59688->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1621)) COMMA_SOURCE_FILE_AT_LINE (1621)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1622)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1622)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1622)) COMMA_SOURCE_FILE_AT_LINE (1622)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_60287 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_60287 = NULL ;
    while (((operand_60287 = enumerator_60287.nextObject ()))) {
      macroValidPointer (operand_60287) ;
      var_cas_sort_evts.addAssign_operation (operand_60287->mKey, operand_60287->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_60457 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_60457 = NULL ;
    while (((operand_60457 = enumerator_60457.nextObject ()))) {
      macroValidPointer (operand_60457) ;
      const GGS_bool cond_61792 = var_cas_tasks_for_event.reader_hasKey (operand_60457->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1644))) ;
      if (cond_61792.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_60569 = var_cas_tasks_for_event ;
        if (temp_60569.isBuilt ()) {
          temp_60569 (HERE)->method_get (inLexique, operand_60457->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1646)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_60636 (var_cas_tasks, true) ;
          while (enumerator_60636.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_60699 = var_cas_task_mask ;
            if (temp_60699.isBuilt ()) {
              temp_60699 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60636._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1650)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_60636.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_61026 = GGS_uint (32U) ;
        GGS_bool _condition_61026 (_variant_61026.isBuilt (), true) ;
        while (_condition_61026.isBuiltAndTrue ()) {
          _condition_61026 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_61026.isBuiltAndTrue ()) {
            if (_variant_61026.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1659)) ;
              _condition_61026 = GGS_bool (false) ;
            }else{
              _variant_61026.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1658)) ;
            }
          }
        }
        const GGS_bool cond_61197 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1660))) ;
        if (cond_61197.isBuiltAndTrue ()) {
          operand_60457->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_60457->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1661)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1662)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_61321 (var_cas_tasks, true) ;
          while (enumerator_61321.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_61321._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1667)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_61321._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1669)) ;
            enumerator_61321.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_60457->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1673))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1673)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_60457->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1674)) COMMA_SOURCE_FILE_AT_LINE (1674)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1675)) COMMA_SOURCE_FILE_AT_LINE (1675)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1754)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1773)) ;
  const GGS_bool cond_65205 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_65205.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_64964 = var_cas_config ;
    if (temp_64964.isBuilt ()) {
      temp_64964 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1777)) ;
    }
    { const GGS_basic_type _var_65191 = var_cas_pw ; // CAST instruction
      if (_var_65191.getPtr () != NULL) {
        macroValidPointer (_var_65191.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_65191.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_65191.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1780)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1782)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1783)) ;
        }
      }
    }
  }
  var_cas_fifo.appendCString ("#define OS_START_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65315 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65315 = NULL ;
    while (((operand_65315 = enumerator_65315.nextObject ()))) {
      macroValidPointer (operand_65315) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65544 = var_cas_powerof2 ;
      if (cond_65544.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65525 = GGS_uint (32U) ;
        GGS_bool _condition_65525 (_variant_65525.isBuilt (), true) ;
        while (_condition_65525.isBuiltAndTrue ()) {
          _condition_65525 = (operand_65315->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65525.isBuiltAndTrue ()) {
            if (_variant_65525.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1795)) ;
              _condition_65525 = GGS_bool (false) ;
            }else{
              _variant_65525.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1794)) ;
            }
          }
        }
      }else if (cond_65544.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65315->fifosize ;
      }
      var_cas_fifo.appendCString ("VAR(tpl_proc_id, OS_VAR) tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1799))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1799))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1806)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1806))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_66040 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1807)) ;
  GGS_bool _condition_66040 (_variant_66040.isBuilt (), true) ;
  while (_condition_66040.isBuiltAndTrue ()) {
    _condition_66040 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_66040.isBuiltAndTrue ()) {
      if (_variant_66040.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1813)) ;
        _condition_66040 = GGS_bool (false) ;
      }else{
        _variant_66040.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_65990 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_65990.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1812)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_fifo.appendCString ("#define OS_START_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("CONST(tpl_priority_level, OS_CONST) tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1821)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1821))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_66373 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_66373 = NULL ;
    while (((operand_66373 = enumerator_66373.nextObject ()))) {
      macroValidPointer (operand_66373) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_66626 = var_cas_powerof2 ;
      if (cond_66626.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_66583 = GGS_uint (32U) ;
        GGS_bool _condition_66583 (_variant_66583.isBuilt (), true) ;
        while (_condition_66583.isBuiltAndTrue ()) {
          _condition_66583 = (operand_66373->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_66583.isBuiltAndTrue ()) {
            if (_variant_66583.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1829)) ;
              _condition_66583 = GGS_bool (false) ;
            }else{
              _variant_66583.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1828)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1830)) ;
      }else if (cond_66626.isBuiltAndFalse ()) {
        var_cas_max_size = operand_66373->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1834))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1834))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_66808 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_66808.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1837)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1843)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1844)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1844)) COMMA_SOURCE_FILE_AT_LINE (1844)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1860)) ;
  const GGS_bool cond_76694 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_76694.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    const GGS_bool cond_76606 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_76606.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1865)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1867)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1868)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1871)) ;
      const GGS_bool cond_68099 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1872))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_68099.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1873)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1876)) ;
      const GGS_bool cond_68282 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1877))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_68282.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1878)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1881)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1884)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1890)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1889)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1896)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1895)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1904)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1907)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1903)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1913)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1923)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1922)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1928)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1929)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1930)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1926)) ;
      const GGS_com  temp_69715 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1933)) ;
      if (temp_69715.isBuilt ()) {
        temp_69715 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1933)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1936)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1937)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1935)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1942)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1941)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1949)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1948)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1957)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1958)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1959)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1955)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1968)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1970)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1966)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1980)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1981)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1979)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1986)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1994)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1993)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2003)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2002)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2010)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2011)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2009)) ;
      const GGS_bool cond_72578 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_72578.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2018)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2017)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2024)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (2023)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2032)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2034)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2027)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2039)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2038)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2045)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2053)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2054)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2055)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2056)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2057)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2058)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2059)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2052)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2063)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2069)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2072)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2075)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2082)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2089)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2090)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2091)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2092)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2093)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2094)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2095)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2096)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2097)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_76591 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_76591.isBuiltAndTrue ()) {
        const GGS_bool cond_75157 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75157.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2108)) ;
        }
        const GGS_string temp_75211 = var_cas_header ;
        if (temp_75211.isBuilt ()) {
          temp_75211 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2110)) ;
        }
        const GGS_bool cond_75355 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75355.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2112)) ;
        }
        const GGS_string temp_75413 = var_cas_obj_header ;
        if (temp_75413.isBuilt ()) {
          temp_75413 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2114)) ;
        }
        const GGS_bool cond_75565 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75565.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2116)) ;
        }
        const GGS_string temp_75627 = var_cas_implementation ;
        if (temp_75627.isBuilt ()) {
          temp_75627 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2118)) ;
        }
        const GGS_bool cond_75774 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75774.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2120)) ;
        }
        const GGS_string temp_75827 = var_cas_types ;
        if (temp_75827.isBuilt ()) {
          temp_75827 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2122)) ;
        }
        const GGS_bool cond_76531 = gOption_goil_5F_options_generate_5F_makefile.value () ;
        if (cond_76531.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent () ;
          const GGS_bool cond_76113 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_76113.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_76261 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
          if (cond_76261.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2130)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2133)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ().reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (2132)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2139)) ;
      }
    }else if (cond_76606.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2142)) ;
    }
  }else if (cond_76694.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2145)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

