//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.2                         *
//                     october 7th, 2009, at 16h33'54"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 573
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  if (((var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7455 = var_cas_startuphook ; // CAST instruction
    if (_var_7455.getPtr () != NULL) {
      macroValidPointer (_var_7455.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7455.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7455.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7696 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7696.getPtr () != NULL) {
      macroValidPointer (_var_7696.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7696.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7696.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7922 = var_cas_errorhook ; // CAST instruction
    if (_var_7922.getPtr () != NULL) {
      macroValidPointer (_var_7922.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7922.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7922.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8159 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8159.getPtr () != NULL) {
      macroValidPointer (_var_8159.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8159.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8159.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8401 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8401.getPtr () != NULL) {
      macroValidPointer (_var_8401.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8401.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8401.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8656 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8656.getPtr () != NULL) {
      macroValidPointer (_var_8656.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8656.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8656.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8926 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8926.getPtr () != NULL) {
      macroValidPointer (_var_8926.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8926.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8926.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9181 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9181.getPtr () != NULL) {
      macroValidPointer (_var_9181.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9181.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9181.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9367 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9367.getPtr () != NULL) {
      macroValidPointer (_var_9367.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9367.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9367.getPtr ()) ;
        if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
  if (((var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (238))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else{
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10045 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ; // CAST instruction
      if (_var_10045.getPtr () != NULL) {
        macroValidPointer (_var_10045.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10045.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10045.getPtr ()) ;
          if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (251))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10223 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ; // CAST instruction
      if (_var_10223.getPtr () != NULL) {
        macroValidPointer (_var_10223.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10223.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10223.getPtr ()) ;
          if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (256))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10531 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10531 = NULL ;
      while (((operand_10531 = enumerator_10531.nextObject ()))) {
        macroValidPointer (operand_10531) ;
        { const GGS_timing_prot _var_10729 = operand_10531->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ; // CAST instruction
          if (_var_10729.getPtr () != NULL) {
            macroValidPointer (_var_10729.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10729.getPtr ()))) {
            }else{
              if (((var_cas_use_tp).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10778 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10778 = NULL ;
      while (((operand_10778 = enumerator_10778.nextObject ()))) {
        macroValidPointer (operand_10778) ;
        { const GGS_timing_prot _var_10973 = operand_10778->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ; // CAST instruction
          if (_var_10973.getPtr () != NULL) {
            macroValidPointer (_var_10973.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10973.getPtr ()))) {
            }else{
              if (((var_cas_use_tp).operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp).operator_isEqual (GGS_bool (true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11239 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
  if (temp_11239.isBuilt ()) {
    temp_11239 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (289)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (293)) COMMA_SOURCE_FILE_AT_LINE (293))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11405 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (296)), true) ;
    const GGS_ident_map::cElement * operand_11405 = NULL ;
    while (((operand_11405 = enumerator_11405.nextObject ()))) {
      macroValidPointer (operand_11405) ;
      { const GGS_basic_type _var_11643 = operand_11405->mInfo.value ; // CAST instruction
        if (_var_11643.getPtr () != NULL) {
          macroValidPointer (_var_11643.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11643.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11643.getPtr ()) ;
            if ((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (299))).isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11405->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (300))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (308)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (318)) ;
  if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("arm"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("avr"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("avr") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("c166"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("c166") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("h8300h") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("hcs12") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("libpcl") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("posix"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix_vp2") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("ppc") ;
  }else if (((var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("v850e") ;
  }else{
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (331)) ;
    var_cas_trampoline_target = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13206 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13206 = NULL ;
    while (((operand_13206 = enumerator_13206.nextObject ()))) {
      macroValidPointer (operand_13206) ;
      if (((var_cas_first).operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13206->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (inLexique,  var_cas_makefileSpecStr,  GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (358)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_makefileStr,  GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (359)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (360)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (361)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (361)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (362)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (362)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (363)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (363)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (364)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (364)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (367)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
  if (((var_cas_app_name_str).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (369)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (369)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (369)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (370)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (373)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  if (((var_cas_tpl_base_path_str).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (375)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (376)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
  GGS_string var_cas_autosarStr ;
  if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else{
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15233 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
  if (temp_15233.isBuilt ()) {
    temp_15233 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (388)) ;
  GGS_string var_cas_i_option ;
  var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep ;
  var_cas_target_cfg_dep = GGS_string ("") ;
  if ((gOption_goil_5F_options_posix_5F_it.value ()).isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (397)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (398)) ;
  const GGS_string temp_15651 = var_cas_makefileStr ;
  if (temp_15651.isBuilt ()) {
    temp_15651 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (400)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_makerulesStr,  GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (404)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory).operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  var_cas_trampolineTarget = function_trampoline_target_name (inLexique COMMA_SOURCE_FILE_AT_LINE (406)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (407)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (408)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (411)) ;
  GGS_string var_cas_arch_chip_board ;
  var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (413)) COMMA_SOURCE_FILE_AT_LINE (413)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (414)) COMMA_SOURCE_FILE_AT_LINE (414)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) COMMA_SOURCE_FILE_AT_LINE (415)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (417)) ;
  { const GGS_basic_type _var_16717 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (419)) ; // CAST instruction
    if (_var_16717.getPtr () != NULL) {
      macroValidPointer (_var_16717.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_16717.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_16717.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  temp_16601 = var_cas_b ;
        if (temp_16601.isBuilt ()) {
          temp_16601 (HERE)->method_string (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (422)) ;
        }
        ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (423)) ;
      }else{
        ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  GGS_string ("false") COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (437)) ;
  if (((var_cas_filename.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (438))).operator_not ()).isBuiltAndTrue ()) {
    const GGS_string temp_17196 = var_cas_makerulesStr ;
    if (temp_17196.isBuilt ()) {
      temp_17196 (HERE)->method_writeToFile (inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (439)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (456)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (457)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (458)) ;
  if (((var_cas_count).operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else{
    if (((var_cas_count).operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else{
      if (((var_cas_count).operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (471)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (482)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (483)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (484)) ;
  if (((var_cas_count).operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count).operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count).operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (497)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  if (((var_cas_count).operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count).operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count).operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (523)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (544)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (544)).add_operation (inLexique, var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (544)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (544)) COMMA_SOURCE_FILE_AT_LINE (544)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (546)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (547)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (550)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (550)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (552)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19887 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19887 = NULL ;
    while (((operand_19887 = enumerator_19887.nextObject ()))) {
      macroValidPointer (operand_19887) ;
      { const GGS_basic_type _var_20155 = operand_19887->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (558)) ; // CAST instruction
        if (_var_20155.getPtr () != NULL) {
          macroValidPointer (_var_20155.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20155.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20155.getPtr ()) ;
            if (((var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (559))).operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (559)) ;
            }
          }else{
            operand_19887->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_19887->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (560)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (561)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (563)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (563)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (565)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20524 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20524 = NULL ;
    while (((operand_20524 = enumerator_20524.nextObject ()))) {
      macroValidPointer (operand_20524) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_20524->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
      if (((var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (572))).operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (572)) ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (574)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (574)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (575)) ;
  var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (578)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (578)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (582)) ;
  var_cas_c = var_cas_resources.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (585)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (585)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (587)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (589)) ;
  var_cas_c = var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (592)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (592)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (594)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (596)) ;
  var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (599)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (599)) ;
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (601)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (603)) ;
  if (((var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (607))).operator_strictSup (var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (607)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (608)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (610)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (610)) ;
  }
  if (((var_cas_c).operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (614)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (617)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (617)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (617)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (617)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (619)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22734 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22734 = NULL ;
    while (((operand_22734 = enumerator_22734.nextObject ()))) {
      macroValidPointer (operand_22734) ;
      { const GGS_app_trusted_obj _var_22894 = operand_22734->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (625)) ; // CAST instruction
        if (_var_22894.getPtr () != NULL) {
          macroValidPointer (_var_22894.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22894.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22894.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22813 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (627)), true) ;
              while (enumerator_22813.hasCurrentObject ()) {
                var_cas_tfs._addAssign_operation (enumerator_22813._key (HERE)) ;
                enumerator_22813.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (633)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (633)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (633)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (634)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (637)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (639)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (649)).add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (649)) COMMA_SOURCE_FILE_AT_LINE (649)) COMMA_SOURCE_FILE_AT_LINE (649)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (651)) COMMA_SOURCE_FILE_AT_LINE (651)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_setevent,  GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (671)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (672)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_callback,  GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (673)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (674)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_24438 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24438 = NULL ;
    while (((operand_24438 = enumerator_24438.nextObject ()))) {
      macroValidPointer (operand_24438) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24438->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (681)) ;
      { const GGS_action_obj _var_25501 = var_cas_alarm_action ; // CAST instruction
        if (_var_25501.getPtr () != NULL) {
          macroValidPointer (_var_25501.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25501.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25501.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (685)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (685))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (685)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (686)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25501.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25501.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (689))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25501.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25501.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (692))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (692)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25501.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25501.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (695)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (695))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (695)) ;
          }else{
            operand_24438->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (697)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24438->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (701)) ;
      { const GGS_autostart_obj _var_26411 = var_cas_autostart ; // CAST instruction
        if (_var_26411.getPtr () != NULL) {
          macroValidPointer (_var_26411.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26411.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (704)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (705)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (706)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26411.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (708)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (709)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (710)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26411.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26411.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (712)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (713)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (713)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) COMMA_SOURCE_FILE_AT_LINE (713)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (714)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (714)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) COMMA_SOURCE_FILE_AT_LINE (714)) ;
          }else{
            operand_24438->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (716)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24438->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (720)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24438->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (721)) COMMA_SOURCE_FILE_AT_LINE (721)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24438->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (722))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (722)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (723))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (723)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (727))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_26936 = var_cas_app_for_obj ;
          if (temp_26936.isBuilt ()) {
            temp_26936 (HERE)->method_get (inLexique, operand_24438->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (729)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (730)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27226 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (740)), true) ;
    if (enumerator_27226 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27226 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_27226._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27226._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (746))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27226._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27226._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27226.next () ;
        _foreach_loop_27226 = (enumerator_27226 .hasCurrentObject ()) ;
        if (_foreach_loop_27226) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27226) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (756)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (757)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (758)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (758)) COMMA_SOURCE_FILE_AT_LINE (758)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28459 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28459 = NULL ;
    while (((operand_28459 = enumerator_28459.nextObject ()))) {
      macroValidPointer (operand_28459) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28459->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) ;
      var_cas_act_as_basic = operand_28459->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (783)) ;
      { const GGS_basic_type _var_28882 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28882.getPtr () != NULL) {
          macroValidPointer (_var_28882.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28882.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28882.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (786)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (787)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (788)) ;
          }
        }
      }
      { const GGS_basic_type _var_29068 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29068.getPtr () != NULL) {
          macroValidPointer (_var_29068.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29068.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29068.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (792)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (793)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_28459->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (0U) ;
  if (((var_cas_tl.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (803))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_29279 = var_cas_tl ;
    if (temp_29279.isBuilt ()) {
      temp_29279 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (804)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29404 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29404 = NULL ;
    while (((operand_29404 = enumerator_29404.nextObject ()))) {
      macroValidPointer (operand_29404) ;
      if (((operand_29404->prio).operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29404->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (814)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_29404->name, var_cas_actual_prio, operand_29404->act COMMA_SOURCE_FILE_AT_LINE (817)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (836))).operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30453 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30453 = NULL ;
      while (((operand_30453 = enumerator_30453.nextObject ()))) {
        macroValidPointer (operand_30453) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30453->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (848)) ;
        const GGS_isr_obj  temp_30701 = operand_30453->mInfo.isr ;
        if (temp_30701.isBuilt ()) {
          temp_30701 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (849)) ;
        }
        { const GGS_basic_type _var_30904 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30904.getPtr () != NULL) {
            macroValidPointer (_var_30904.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30904.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30904.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (852)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (853)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (854)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_30453->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (867)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (0U) ;
    if (((var_cas_il.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (869))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_31363 = var_cas_il ;
      if (temp_31363.isBuilt ()) {
        temp_31363 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31515 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31515 = NULL ;
      while (((operand_31515 = enumerator_31515.nextObject ()))) {
        macroValidPointer (operand_31515) ;
        if (((operand_31515->prio).operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31515->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_31515->name, var_cas_actual_prio, operand_31515->act COMMA_SOURCE_FILE_AT_LINE (883)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32899 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32899 = NULL ;
    while (((operand_32899 = enumerator_32899.nextObject ()))) {
      macroValidPointer (operand_32899) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33040 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33040 = NULL ;
        while (((operand_33040 = enumerator_33040.nextObject ()))) {
          macroValidPointer (operand_33040) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33040->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (922)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32899->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (924)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33325 = var_cas_prio_for_task ;
            if (temp_33325.isBuilt ()) {
              temp_33325 (HERE)->method_get (inLexique, operand_33040->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (928)) ;
            }
            if (((var_cas_prio).operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (932)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33040->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33634 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33634 = NULL ;
        while (((operand_33634 = enumerator_33634.nextObject ()))) {
          macroValidPointer (operand_33634) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33634->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32899->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (939)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33918 = var_cas_prio_for_isr ;
            if (temp_33918.isBuilt ()) {
              temp_33918 (HERE)->method_get (inLexique, operand_33634->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (943)) ;
            }
            if (((var_cas_prio).operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (947)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33634->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (948))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (948))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34481 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34481 = NULL ;
        while (((operand_34481 = enumerator_34481.nextObject ()))) {
          macroValidPointer (operand_34481) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34481->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (961)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32899->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (963)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34766 = var_cas_prio_for_task ;
            if (temp_34766.isBuilt ()) {
              temp_34766 (HERE)->method_get (inLexique, operand_34481->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (967)) ;
            }
            if (((var_cas_prio).operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (969)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34956 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34956 = NULL ;
        while (((operand_34956 = enumerator_34956.nextObject ()))) {
          macroValidPointer (operand_34956) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34956->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (974)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32899->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (976)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35240 = var_cas_prio_for_isr ;
            if (temp_35240.isBuilt ()) {
              temp_35240 (HERE)->method_get (inLexique, operand_34956->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (980)) ;
            }
            if (((var_cas_prio).operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (982)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_32899->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (987)) ;
      var_cas_comments.modifier_put (inLexique, operand_32899->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (988)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37029 = var_cas_max_prio ;
  GGS_bool _condition_37029 (_variant_37029.isBuilt (), true) ;
  while (_condition_37029.isBuiltAndTrue ()) {
    _condition_37029 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37029.isBuiltAndTrue ()) {
      if (_variant_37029.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1033)) ;
        _condition_37029 = GGS_bool (false) ;
      }else{
        _variant_37029.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36386 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36386 = NULL ;
          while (((operand_36386 = enumerator_36386.nextObject ()))) {
            macroValidPointer (operand_36386) ;
            if (((operand_36386->mInfo.prio).operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36386->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1018)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36532 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36532 = NULL ;
          while (((operand_36532 = enumerator_36532.nextObject ()))) {
            macroValidPointer (operand_36532) ;
            if (((operand_36532->mInfo.prio).operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36532->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1021)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36678 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36678 = NULL ;
          while (((operand_36678 = enumerator_36678.nextObject ()))) {
            macroValidPointer (operand_36678) ;
            if (((operand_36678->mInfo.prio).operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36678->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1024)) ;
            }
          }
        }
        if (((var_cas_prio).operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1029)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1032)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37205 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37205 = NULL ;
    while (((operand_37205 = enumerator_37205.nextObject ()))) {
      macroValidPointer (operand_37205) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_37205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37260 (operand_37205->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)), true) ;
        const GGS_ident_map::cElement * operand_37260 = NULL ;
        while (((operand_37260 = enumerator_37260.nextObject ()))) {
          macroValidPointer (operand_37260) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37260->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)) COMMA_SOURCE_FILE_AT_LINE (1047))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37260->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1048)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37415 (operand_37205->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
        const GGS_ident_map::cElement * operand_37415 = NULL ;
        while (((operand_37415 = enumerator_37415.nextObject ()))) {
          macroValidPointer (operand_37415) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37415->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) COMMA_SOURCE_FILE_AT_LINE (1052))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37415->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1053)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37569 (operand_37205->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), true) ;
        const GGS_ident_map::cElement * operand_37569 = NULL ;
        while (((operand_37569 = enumerator_37569.nextObject ()))) {
          macroValidPointer (operand_37569) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37569->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37569->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1058)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37725 (operand_37205->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), true) ;
        const GGS_ident_map::cElement * operand_37725 = NULL ;
        while (((operand_37725 = enumerator_37725.nextObject ()))) {
          macroValidPointer (operand_37725) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37725->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37725->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1063)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37886 (operand_37205->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)), true) ;
        const GGS_ident_map::cElement * operand_37886 = NULL ;
        while (((operand_37886 = enumerator_37886.nextObject ()))) {
          macroValidPointer (operand_37886) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_37886->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) COMMA_SOURCE_FILE_AT_LINE (1067))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37886->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1068)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38044 (operand_37205->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)), true) ;
        const GGS_ident_map::cElement * operand_38044 = NULL ;
        while (((operand_38044 = enumerator_38044.nextObject ()))) {
          macroValidPointer (operand_38044) ;
          if (((var_cas_app_for_obj.reader_hasKey (inLexique, operand_38044->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1072)) COMMA_SOURCE_FILE_AT_LINE (1072))).operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38044->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1073)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_task,  GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1098)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_38978 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38978 = NULL ;
    while (((operand_38978 = enumerator_38978.nextObject ()))) {
      macroValidPointer (operand_38978) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_38978->mKey,  operand_38978->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)) COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1112))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1113))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1113)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1114))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1115))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1116))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1117))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string ("") ;
      if (((operand_38978->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1124)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1124))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1126)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1128)) ;
        ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_evt,  GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1130)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) COMMA_SOURCE_FILE_AT_LINE (1131)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1132))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1132)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1135)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_40645 = var_cas_actual_priorities ;
      if (temp_40645.isBuilt ()) {
        temp_40645 (HERE)->method_get (inLexique, operand_38978->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1138)) ;
      }
      if (((var_cas_actual_prio).operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_38978->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1146)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1146))).operator_isEqual (GGS_string ("NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1148)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_38978->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41313 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41313 = NULL ;
          while (((operand_41313 = enumerator_41313.nextObject ()))) {
            macroValidPointer (operand_41313) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_41456 = var_cas_resources ;
              if (temp_41456.isBuilt ()) {
                temp_41456 (HERE)->method_get (inLexique, operand_41313->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1156)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1157)) ;
              { const GGS_resource_property_obj _var_41847 = var_cas_rez_prop ; // CAST instruction
                if (_var_41847.getPtr () != NULL) {
                  macroValidPointer (_var_41847.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41847.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_41313->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1160)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1160)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1167)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1172)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38978->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      { const GGS_basic_type _var_42454 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42454.getPtr () != NULL) {
          macroValidPointer (_var_42454.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42454.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42454.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1178)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1179)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1180)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38978->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      { const GGS_task_autostart_obj _var_42990 = var_cas_autostart ; // CAST instruction
        if (_var_42990.getPtr () != NULL) {
          macroValidPointer (_var_42990.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42990.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1186)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42990.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1188)) ;
          }else{
            operand_38978->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1190)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_38978->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1193)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43168 = var_cas_timing_prot ;
      if (temp_43168.isBuilt ()) {
        temp_43168 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1196)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1197)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1198)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1202))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43584 = var_cas_app_for_obj ;
          if (temp_43584.isBuilt ()) {
            temp_43584 (HERE)->method_get (inLexique, operand_38978->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1204)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1205)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_43798 = var_cas_apps ;
          if (temp_43798.isBuilt ()) {
            temp_43798 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1209)) ;
          }
          { const GGS_app_trusted_obj _var_43941 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) ; // CAST instruction
            if (_var_43941.getPtr () != NULL) {
              macroValidPointer (_var_43941.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43941.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1211)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)) COMMA_SOURCE_FILE_AT_LINE (1213)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1231)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)) COMMA_SOURCE_FILE_AT_LINE (1232)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1233)) COMMA_SOURCE_FILE_AT_LINE (1233)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_isr,  GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1255)) ;
  {
    GGS_isr_map::cEnumerator enumerator_45473 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45473 = NULL ;
    while (((operand_45473 = enumerator_45473.nextObject ()))) {
      macroValidPointer (operand_45473) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45473->mKey,  operand_45473->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1265)) COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1266))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1267))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1268))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1270))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1271))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1273))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_46295 = var_cas_actual_priorities ;
      if (temp_46295.isBuilt ()) {
        temp_46295 (HERE)->method_get (inLexique, operand_45473->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1277)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46458 = operand_45473->mInfo.isr ;
      if (temp_46458.isBuilt ()) {
        temp_46458 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1280)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_45473->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_46701 = var_cas_timing_prot ;
      if (temp_46701.isBuilt ()) {
        temp_46701 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1287)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1287)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1288)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1289)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1293))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_47052 = var_cas_app_for_obj ;
          if (temp_47052.isBuilt ()) {
            temp_47052 (HERE)->method_get (inLexique, operand_45473->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1295)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1296)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_47265 = var_cas_apps ;
          if (temp_47265.isBuilt ()) {
            temp_47265 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1300)) ;
          }
          { const GGS_app_trusted_obj _var_47408 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1301)) ; // CAST instruction
            if (_var_47408.getPtr () != NULL) {
              macroValidPointer (_var_47408.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47408.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1302)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1304)) COMMA_SOURCE_FILE_AT_LINE (1304)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1319)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1323)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1323)) COMMA_SOURCE_FILE_AT_LINE (1323)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1324)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_counter,  GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1341)) ;
  {
    GGS_counter_map::cEnumerator enumerator_48603 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48603 = NULL ;
    while (((operand_48603 = enumerator_48603.nextObject ()))) {
      macroValidPointer (operand_48603) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48603->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)) COMMA_SOURCE_FILE_AT_LINE (1347)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48603->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1348))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1348)) ;
      GGS_string var_cas_name ;
      var_cas_name = (GGS_string ("_")).operator_concat (operand_48603->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1350))) ;
      if (((var_cas_name).operator_isEqual (GGS_string ("_SystemCounter"))).isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1355)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48603->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)) ;
      { const GGS_basic_type _var_49334 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49334.getPtr () != NULL) {
          macroValidPointer (_var_49334.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49334.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49334.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1362)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1363)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_48603->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1366)) ;
      { const GGS_basic_type _var_49735 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49735.getPtr () != NULL) {
          macroValidPointer (_var_49735.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49735.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49735.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1370)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1371)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_48603->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1374)) ;
      { const GGS_basic_type _var_50127 = var_cas_min_as_basic ; // CAST instruction
        if (_var_50127.getPtr () != NULL) {
          macroValidPointer (_var_50127.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50127.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50127.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1378)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1379)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_48603->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)) ;
        { const GGS_counter_type _var_50745 = var_cas_type ; // CAST instruction
          if (_var_50745.getPtr () != NULL) {
            macroValidPointer (_var_50745.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50745.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50745.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1391)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1392)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1393)) ;
        if (((operand_48603->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1395))).operator_isEqual (GGS_string ("SystemCounter"))).isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1396)) ;
        }else{
          if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1398))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_51070 = var_cas_app_for_obj ;
            if (temp_51070.isBuilt ()) {
              temp_51070 (HERE)->method_get (inLexique, operand_48603->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1400)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1401)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1410)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string ("") ;
  if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51732 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51732 = enumerator_51732.nextObject () ;
      if ((operand_51732 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51732 ;
        do{
          macroValidPointer (operand_51732) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_51732->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1426))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51732->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1427))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1427))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51732->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1428))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51732->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1428))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51732 = enumerator_51732.nextObject () ;
          _foreach_loop_51732 = ((operand_51732 != NULL)) ;
          if (_foreach_loop_51732) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51732) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)) COMMA_SOURCE_FILE_AT_LINE (1436)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1437)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1438)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1439)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_resource,  GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1459)) ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_internal_resource,  GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  {
    GGS_resource_map::cEnumerator enumerator_53439 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53439 = NULL ;
    while (((operand_53439 = enumerator_53439.nextObject ()))) {
      macroValidPointer (operand_53439) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_53439->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53439->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_53720 = var_cas_rez_prio ;
      if (temp_53720.isBuilt ()) {
        temp_53720 (HERE)->method_get (inLexique, operand_53439->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1472)) ;
      }
      const GGS_string_map  temp_53772 = var_cas_rez_comments ;
      if (temp_53772.isBuilt ()) {
        temp_53772 (HERE)->method_get (inLexique, operand_53439->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1473)) ;
      }
      { const GGS_resource_property_obj _var_54268 = var_cas_rez_prop ; // CAST instruction
        if (_var_54268.getPtr () != NULL) {
          macroValidPointer (_var_54268.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54268.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54268.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54268.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53439->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1487)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53439->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) COMMA_SOURCE_FILE_AT_LINE (1489)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53439->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1490))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1490)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) COMMA_SOURCE_FILE_AT_LINE (1492)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1493)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1496))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_54684 = var_cas_app_for_obj ;
          if (temp_54684.isBuilt ()) {
            temp_54684 (HERE)->method_get (inLexique, operand_53439->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1498)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1499)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54993 (var_cas_regular_rez, true) ;
    while (enumerator_54993.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54993._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1511))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54993._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54993._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54993.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55224 (var_cas_regular_rez, true) ;
    if (enumerator_55224 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55224 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_55224._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55224.next () ;
        _foreach_loop_55224 = (enumerator_55224 .hasCurrentObject ()) ;
        if (_foreach_loop_55224) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55224) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1530)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1531)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1531)) COMMA_SOURCE_FILE_AT_LINE (1531)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_tpl_event,  GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1548)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56967 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56967 = NULL ;
    while (((operand_56967 = enumerator_56967.nextObject ()))) {
      macroValidPointer (operand_56967) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56967->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57140 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57140 = NULL ;
        while (((operand_57140 = enumerator_57140.nextObject ()))) {
          macroValidPointer (operand_57140) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_57217 = var_cas_events ;
          if (temp_57217.isBuilt ()) {
            temp_57217 (HERE)->method_get (inLexique, operand_57140->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1572)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1574)) ;
          { const GGS_event_mask_obj _var_58107 = var_cas_mask_obj ; // CAST instruction
            if (_var_58107.getPtr () != NULL) {
              macroValidPointer (_var_58107.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58107.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_58107.getPtr ()) ;
                if ((((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)))).operator_isEqual (GGS_uint64 (0ULL))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1579)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1579))) ;
                }else{
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_57140->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1582)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_58107.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (inLexique, operand_57140->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1585)) COMMA_SOURCE_FILE_AT_LINE (1585))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_57140->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1587)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)) ;
                }else{
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_57140->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1592)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (inLexique, operand_57140->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1597)) COMMA_SOURCE_FILE_AT_LINE (1597))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_57140->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1599)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_56967->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1601))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_57140->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1602)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_56967->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1605)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58575 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58575 = NULL ;
    while (((operand_58575 = enumerator_58575.nextObject ()))) {
      macroValidPointer (operand_58575) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58575->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)) ;
      { const GGS_event_mask_obj _var_59013 = var_cas_evt_mask ; // CAST instruction
        if (_var_59013.getPtr () != NULL) {
          macroValidPointer (_var_59013.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59013.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_59013.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58575->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1617))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1617)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58575->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1618)) COMMA_SOURCE_FILE_AT_LINE (1618)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1619)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1619)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1619)) COMMA_SOURCE_FILE_AT_LINE (1619)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59174 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59174 = NULL ;
    while (((operand_59174 = enumerator_59174.nextObject ()))) {
      macroValidPointer (operand_59174) ;
      var_cas_sort_evts._addAssign_operation (operand_59174->mKey, operand_59174->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59344 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59344 = NULL ;
    while (((operand_59344 = enumerator_59344.nextObject ()))) {
      macroValidPointer (operand_59344) ;
      if ((var_cas_tasks_for_event.reader_hasKey (inLexique, operand_59344->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1641)) COMMA_SOURCE_FILE_AT_LINE (1641))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59456 = var_cas_tasks_for_event ;
        if (temp_59456.isBuilt ()) {
          temp_59456 (HERE)->method_get (inLexique, operand_59344->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1643)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59523 (var_cas_tasks, true) ;
          while (enumerator_59523.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59586 = var_cas_task_mask ;
            if (temp_59586.isBuilt ()) {
              temp_59586 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59523._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1647)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59523.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_59913 = GGS_uint (32U) ;
        GGS_bool _condition_59913 (_variant_59913.isBuilt (), true) ;
        while (_condition_59913.isBuiltAndTrue ()) {
          _condition_59913 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1654)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_59913.isBuiltAndTrue ()) {
            if (_variant_59913.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1656)) ;
              _condition_59913 = GGS_bool (false) ;
            }else{
              _variant_59913.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1655)) ;
            }
          }
        }
        if (((var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)))).isBuiltAndTrue ()) {
          operand_59344->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59344->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1659)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60208 (var_cas_tasks, true) ;
          while (enumerator_60208.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60208._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1664)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60208._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1666)) ;
            enumerator_60208.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59344->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1670))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1670)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59344->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1671)) COMMA_SOURCE_FILE_AT_LINE (1671)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1672)) COMMA_SOURCE_FILE_AT_LINE (1672)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1751)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1770)) ;
  if ((var_cas_config.reader_hasKey (inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1772))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_63851 = var_cas_config ;
    if (temp_63851.isBuilt ()) {
      temp_63851 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1774)) ;
    }
    { const GGS_basic_type _var_64078 = var_cas_pw ; // CAST instruction
      if (_var_64078.getPtr () != NULL) {
        macroValidPointer (_var_64078.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64078.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64078.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1777)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1779)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1780)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_64120 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64120 = NULL ;
    while (((operand_64120 = enumerator_64120.nextObject ()))) {
      macroValidPointer (operand_64120) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64330 = GGS_uint (32U) ;
        GGS_bool _condition_64330 (_variant_64330.isBuilt (), true) ;
        while (_condition_64330.isBuiltAndTrue ()) {
          _condition_64330 = (operand_64120->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64330.isBuiltAndTrue ()) {
            if (_variant_64330.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1790)) ;
              _condition_64330 = GGS_bool (false) ;
            }else{
              _variant_64330.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1789)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_64120->fifosize ;
      }
      var_cas_fifo.appendCString ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1794))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1794))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1801)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1801))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_64819 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1802)) ;
  GGS_bool _condition_64819 (_variant_64819.isBuilt (), true) ;
  while (_condition_64819.isBuiltAndTrue ()) {
    _condition_64819 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64819.isBuiltAndTrue ()) {
      if (_variant_64819.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1808)) ;
        _condition_64819 = GGS_bool (false) ;
      }else{
        _variant_64819.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        if (((var_cas_prio).operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1812)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1812))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_64970 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64970 = NULL ;
    while (((operand_64970 = enumerator_64970.nextObject ()))) {
      macroValidPointer (operand_64970) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65180 = GGS_uint (32U) ;
        GGS_bool _condition_65180 (_variant_65180.isBuilt (), true) ;
        while (_condition_65180.isBuiltAndTrue ()) {
          _condition_65180 = (operand_64970->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65180.isBuiltAndTrue ()) {
            if (_variant_65180.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1820)) ;
              _condition_65180 = GGS_bool (false) ;
            }else{
              _variant_65180.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1819)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1821)) ;
      }else{
        var_cas_max_size = operand_64970->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1825))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1825))) ;
      var_cas_fifo.appendCString (" }") ;
      if (((var_cas_prio).operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1828)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1832)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1833)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1833)) COMMA_SOURCE_FILE_AT_LINE (1833)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp ;
  var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir ;
  ::routine_templates_directory (inLexique,  var_cas_temp_dir COMMA_SOURCE_FILE_AT_LINE (1850)) ;
  if (((var_cas_temp_dir).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    GGS_string var_cas_target ;
    var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    if (((var_cas_target).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      GGS_string var_cas_header ;
      GGS_string var_cas_obj_header ;
      GGS_string var_cas_implementation ;
      GGS_string var_cas_types ;
      GGS_config  var_cas_cfg ;
      var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file ;
      var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)) ;
      if (((var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1862))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1863)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file ;
      var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      if (((var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1867))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1868)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf ;
      var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1871)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_header,  GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1873)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_obj_header,  GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1874)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_implementation,  GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1875)) ;
      ::routine_retrieveTemplateString (inLexique,  var_cas_types,  GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1876)) ;
      GGS_prefix_map  var_cas_prefix ;
      var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1879)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1885)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1884)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1890)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1899)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1900)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1902)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1898)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1908)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1918)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1917)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1923)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1924)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1925)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1921)) ;
      const GGS_com  temp_68298 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1928)) ;
      if (temp_68298.isBuilt ()) {
        temp_68298 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1928)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1931)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1932)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1930)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1937)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1936)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1944)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1943)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1952)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1953)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1954)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1950)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1963)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1964)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1965)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1961)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1975)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1976)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1974)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1982)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1983)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1984)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1981)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1988)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1987)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1997)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1996)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2003)) ;
      if ((gOption_goil_5F_options_autosar_5F_on.value ()).isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2012)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2011)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2018)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2019)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (2017)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2022)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2023)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2024)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2026)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2021)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2032)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2040)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2039)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2047)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2048)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2049)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2050)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2051)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2052)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2053)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2046)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2057)) ;
      GGS_string var_cas_directory ;
      var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      GGS_string var_cas_header_file ;
      var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file ;
      var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file ;
      var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file ;
      var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2075)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2076)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2077)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2078)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2079)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2080)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2081)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2082)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2083)) ;
      GGS_uint  var_cas_error_count ;
      var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      if (((var_cas_error_count).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2094)) ;
        }
        const GGS_string temp_73620 = var_cas_header ;
        if (temp_73620.isBuilt ()) {
          temp_73620 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2096)) ;
        }
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2098)) ;
        }
        const GGS_string temp_73822 = var_cas_obj_header ;
        if (temp_73822.isBuilt ()) {
          temp_73822 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2100)) ;
        }
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2102)) ;
        }
        const GGS_string temp_74036 = var_cas_implementation ;
        if (temp_74036.isBuilt ()) {
          temp_74036 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2104)) ;
        }
        if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2106)) ;
        }
        const GGS_string temp_74236 = var_cas_types ;
        if (temp_74236.isBuilt ()) {
          temp_74236 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2108)) ;
        }
        if ((gOption_goil_5F_options_generate_5F_makefile.value ()).isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir ;
          var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2111)) ;
          if (((var_cas_makefile_dir).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          if ((gOption_galgas_5F_cli_5F_options_verbose_5F_output.value ()).isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2116)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2119)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (2122)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2122)) COMMA_SOURCE_FILE_AT_LINE (2118)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2125)) ;
      }
    }else{
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2128)) ;
    }
  }else{
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2131)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

