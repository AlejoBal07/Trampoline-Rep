//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.2                         *
//                       may 14th, 2009, at 16h11'49"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "proc"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "_descriptor"), GGS_string (true, "") COMMA_SOURCE_FILE_AT_LINE (63)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (73)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (75)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (109)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$TARGET$") COMMA_SOURCE_FILE_AT_LINE (111)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&message_object_of_"), GGS_string (true, "$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (112)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$SIZE$") COMMA_SOURCE_FILE_AT_LINE (113)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (114)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (115)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "dynamic_queue_of_message_"), GGS_string (true, "$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (124)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error_notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (126)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "tpl_set_flag_"), GGS_string (true, "$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (128)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&error_notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (130)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "buffer_of_message_"), GGS_string (true, "$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (132)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "filter_of_message_"), GGS_string (true, "$FILTER$") COMMA_SOURCE_FILE_AT_LINE (134)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&filter_of_message_"), GGS_string (true, "$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (136)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (138)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  var_cas_flags.appendCstring ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags._dotAssign_operation (function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (159))) ;
  var_cas_flags.appendCstring ("\n") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)))._operator_isEqual (GGS_string (true, "extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)) ;
  { const GGS_basic_type _var_7048 = var_cas_startuphook ; // CAST instruction
    if (_var_7048.getPtr () != NULL) {
      macroValidPointer (_var_7048.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7048.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7048.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (170))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (174)) ;
  { const GGS_basic_type _var_7293 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7293.getPtr () != NULL) {
      macroValidPointer (_var_7293.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7293.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7293.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (177))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (181)) ;
  { const GGS_basic_type _var_7523 = var_cas_errorhook ; // CAST instruction
    if (_var_7523.getPtr () != NULL) {
      macroValidPointer (_var_7523.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7523.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7523.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (184))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)) ;
  { const GGS_basic_type _var_7764 = var_cas_pretaskhook ; // CAST instruction
    if (_var_7764.getPtr () != NULL) {
      macroValidPointer (_var_7764.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7764.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7764.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (191))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (195)) ;
  { const GGS_basic_type _var_8010 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8010.getPtr () != NULL) {
      macroValidPointer (_var_8010.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8010.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8010.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (198))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
  { const GGS_basic_type _var_8269 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8269.getPtr () != NULL) {
      macroValidPointer (_var_8269.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8269.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8269.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (205))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (209)) ;
  { const GGS_basic_type _var_8543 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8543.getPtr () != NULL) {
      macroValidPointer (_var_8543.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8543.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8543.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (212))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)) ;
  { const GGS_basic_type _var_8802 = var_cas_useresscheduler ; // CAST instruction
    if (_var_8802.getPtr () != NULL) {
      macroValidPointer (_var_8802.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8802.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8802.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (219))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_8991 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (223)) ; // CAST instruction
    if (_var_8991.getPtr () != NULL) {
      macroValidPointer (_var_8991.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8991.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8991.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (225))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (230)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (231))) ;
    var_cas_flags.appendCstring ("\"\n") ;
  }else{
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (236)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_9675 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (241)) ; // CAST instruction
      if (_var_9675.getPtr () != NULL) {
        macroValidPointer (_var_9675.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9675.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9675.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (243))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_9856 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (246)) ; // CAST instruction
      if (_var_9856.getPtr () != NULL) {
        macroValidPointer (_var_9856.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9856.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9856.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (248))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (true, false) ;
    {
      GGS_task_map::cEnumerator enumerator_10165 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10165 = NULL ;
      while (((operand_10165 = enumerator_10165.nextObject ()))) {
        macroValidPointer (operand_10165) ;
        { const GGS_timing_prot _var_10363 = operand_10165->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ; // CAST instruction
          if (_var_10363.getPtr () != NULL) {
            macroValidPointer (_var_10363.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10363.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10414 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10414 = NULL ;
      while (((operand_10414 = enumerator_10414.nextObject ()))) {
        macroValidPointer (operand_10414) ;
        { const GGS_timing_prot _var_10609 = operand_10414->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ; // CAST instruction
          if (_var_10609.getPtr () != NULL) {
            macroValidPointer (_var_10609.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10609.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCstring ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCstring ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_10880 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ;
  if (_temp_10880._isBuilt ()) {
    _temp_10880 (HERE)->method_generate_c (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (281)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  {
    GGS_ident_map::cEnumerator enumerator_10956 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (285)), true) ;
    const GGS_ident_map::cElement * operand_10956 = NULL ;
    while (((operand_10956 = enumerator_10956.nextObject ()))) {
      macroValidPointer (operand_10956) ;
      { const GGS_basic_type _var_11196 = operand_10956->mInfo.value ; // CAST instruction
        if (_var_11196.getPtr () != NULL) {
          macroValidPointer (_var_11196.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11196.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11196.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (288))).isBuiltAndTrue ()) {
              var_cas_flags.appendCstring ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_10956->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (289))) ;
              var_cas_flags.appendCstring ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (297)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "getTrampolineTargetName"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getTrampolineTargetName (C_Compiler & _inLexique,
                                GGS_string & var_cas_trampolineTarget COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getTrampolineTargetName at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "arm"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "avr"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "c166"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "hcs12") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "posix"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "ppc"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "ppc") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "v850e"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (319)) ;
    var_cas_trampolineTarget = GGS_string (true, "") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getTrampolineTargetName\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string (true, "") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true, true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12649 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12649 = NULL ;
    while (((operand_12649 = enumerator_12649.nextObject ()))) {
      macroValidPointer (operand_12649) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCstring (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_12649->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (332))) ;
      var_cas_first = GGS_bool (true, false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (335)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string (true, "Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (346)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string (true, "Makefile") COMMA_SOURCE_FILE_AT_LINE (347)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)),  GGS_string (true, "$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (349)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (350)),  GGS_string (true, "$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (350)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (351)),  GGS_string (true, "$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (351)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)),  GGS_string (true, "$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (352)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string (true, "trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (357)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (357)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (357)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (358)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (361)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (361)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string (true, "..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (363)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (363)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (364)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (true, ".oil")) COMMA_SOURCE_FILE_AT_LINE (366)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (368)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string (true, "true") ;
  }else{
    var_cas_autosarStr = GGS_string (true, "false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (370)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_14677 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (374)) ;
  if (_temp_14677._isBuilt ()) {
    _temp_14677 (HERE)->method_generate_make (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (374)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (_inLexique,  var_cas_makefileStr,  GGS_string (true, "$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (376)) ;
  const GGS_string _temp_14779 = var_cas_makefileStr ;
  if (_temp_14779._isBuilt ()) {
    _temp_14779 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string (true, "/Makefile")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "Make-rules") COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string (true, "/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  ::routine_getTrampolineTargetName (_inLexique,  var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (385)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (386))) COMMA_SOURCE_FILE_AT_LINE (386)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (387)) ;
  ::routine_check_target (_inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (390)) ;
  GGS_string var_cas_arch_chip_board ;
  var_cas_arch_chip_board = GGS_string (true, "") ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string (true, "ARCH"),  function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (392)) COMMA_SOURCE_FILE_AT_LINE (392)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string (true, "CHIP"),  function_chip (_inLexique COMMA_SOURCE_FILE_AT_LINE (393)) COMMA_SOURCE_FILE_AT_LINE (393)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string (true, "BOARD"),  function_board (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (394)) ;
  ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (396)) ;
  { const GGS_basic_type _var_15871 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)) ; // CAST instruction
    if (_var_15871.getPtr () != NULL) {
      macroValidPointer (_var_15871.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_15871.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_15871.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_15752 = var_cas_b ;
        if (_temp_15752._isBuilt ()) {
          _temp_15752 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (401)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  GGS_string (true, "false") COMMA_SOURCE_FILE_AT_LINE (404)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (409))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string (true, "GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string (true, "#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (416)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (417)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_16351 = var_cas_makerulesStr ;
    if (_temp_16351._isBuilt ()) {
      _temp_16351 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (418)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (435)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (436)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 31U) COMMA_SOURCE_FILE_AT_LINE (437)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "s32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (450)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 16U) COMMA_SOURCE_FILE_AT_LINE (462)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 32U) COMMA_SOURCE_FILE_AT_LINE (463)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (476)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 8LLU) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 16LLU) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 32LLU) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (502)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (true, 0LLU) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (523)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (523))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (523)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (523)) COMMA_SOURCE_FILE_AT_LINE (523)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string (true, "Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (525)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (526)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (529)),  GGS_string (true, "Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (529)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (531)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19088 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19088 = NULL ;
    while (((operand_19088 = enumerator_19088.nextObject ()))) {
      macroValidPointer (operand_19088) ;
      { const GGS_basic_type _var_19359 = operand_19088->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (537)) ; // CAST instruction
        if (_var_19359.getPtr () != NULL) {
          macroValidPointer (_var_19359.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_19359.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_19359.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)) ;
            }
          }else{
            operand_19088->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "Internal error, task "))._operator_concat (operand_19088->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (539))))._operator_concat (GGS_string (true, " has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (540)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (542)),  GGS_string (true, "Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (542)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (544)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19734 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19734 = NULL ;
    while (((operand_19734 = enumerator_19734.nextObject ()))) {
      macroValidPointer (operand_19734) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_19734->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (550)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (551)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (551)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (553)),  GGS_string (true, "Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (553)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (554)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (557)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (557)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (559)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (564)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (564)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (566)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (571)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (575)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (578)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (578)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (582)) ;
  if (((var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (586)))._operator_strictSup (var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (586)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (587)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (587)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (589)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (589)) ;
  }
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (592)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (593)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (596)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (596))._add_operation (_inLexique, GGS_uint64 (true, 1LLU) COMMA_SOURCE_FILE_AT_LINE (596)),  GGS_string (true, "too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (596)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (598)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_21985 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_21985 = NULL ;
    while (((operand_21985 = enumerator_21985.nextObject ()))) {
      macroValidPointer (operand_21985) ;
      { const GGS_app_trusted_obj _var_22147 = operand_21985->mInfo.app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (604)) ; // CAST instruction
        if (_var_22147.getPtr () != NULL) {
          macroValidPointer (_var_22147.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22147.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22147.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22064 (var_cas_t.reader_trusted_fcts (_inLexique COMMA_SOURCE_FILE_AT_LINE (606)), true) ;
              while (enumerator_22064.hc ()) {
                var_cas_tfs._addAssign_operation (enumerator_22064._key (HERE)) ;
                enumerator_22064.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_tfs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (612)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (612)),  GGS_string (true, "Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (612)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string (true, "too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (616)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (618)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (628))._add_operation (_inLexique, GGS_uint (true, 4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (628)) COMMA_SOURCE_FILE_AT_LINE (628)) COMMA_SOURCE_FILE_AT_LINE (628)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (630)) COMMA_SOURCE_FILE_AT_LINE (630)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string (true, "alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (650)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string (true, "alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (651)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string (true, "alarm_callback") COMMA_SOURCE_FILE_AT_LINE (652)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string (true, "alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (653)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_23711 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_23711 = NULL ;
    while (((operand_23711 = enumerator_23711.nextObject ()))) {
      macroValidPointer (operand_23711) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_23711->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (660)) ;
      { const GGS_action_obj _var_24787 = var_cas_alarm_action ; // CAST instruction
        if (_var_24787.getPtr () != NULL) {
          macroValidPointer (_var_24787.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_24787.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_24787.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (664)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (664)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (664)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (665)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (665)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (665)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_24787.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_24787.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (668)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (668)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (668)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_24787.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_24787.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (671)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (671)))._operator_concat (GGS_string (true, "_callback")) COMMA_SOURCE_FILE_AT_LINE (671)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_24787.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_24787.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (674)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (674)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (674)) ;
          }else{
            operand_23711->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown action found") COMMA_SOURCE_FILE_AT_LINE (676)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_23711->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (680)) ;
      { const GGS_autostart_obj _var_25710 = var_cas_autostart ; // CAST instruction
        if (_var_25710.getPtr () != NULL) {
          macroValidPointer (_var_25710.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_25710.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (683)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (684)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (685)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_25710.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (687)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (688)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_25710.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_25710.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (691)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)) COMMA_SOURCE_FILE_AT_LINE (692)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (693)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (693)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (693)) COMMA_SOURCE_FILE_AT_LINE (693)) ;
          }else{
            operand_23711->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (695)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_23711->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (699)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_NAME$"),  operand_23711->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (700)) COMMA_SOURCE_FILE_AT_LINE (700)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM$"),  (operand_23711->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (701)))._operator_concat (GGS_string (true, "_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (701)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (702)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (702)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (705)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (706)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_26242 = var_cas_app_for_obj ;
          if (_temp_26242._isBuilt ()) {
            _temp_26242 (HERE)->method_get (_inLexique, operand_23711->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (708)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (709)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string (true, "") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string (true, "") ;
  {
    GGS_stringset::cEnumerator enumerator_26539 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (719)), true) ;
    if (enumerator_26539 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string (true, "CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCstring ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_26539 ;
      do{
        var_cas_alarm_imp.appendCstring ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_26539._key (HERE)) ;
        var_cas_alarm_imp.appendCstring ("_alarm_desc") ;
        var_cas_alarm_ids.appendCstring ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26539._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (725))) ;
        var_cas_alarm_ids.appendCstring ("\n") ;
        var_cas_alarm_ids.appendCstring ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26539._key (HERE)) ;
        var_cas_alarm_ids.appendCstring (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26539._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_26539.next () ;
        _foreach_loop_26539 = (enumerator_26539 .hc ()) ;
        if (_foreach_loop_26539) {
          var_cas_alarm_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_26539) ;
      var_cas_alarm_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (735)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (736)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (737)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (737)) COMMA_SOURCE_FILE_AT_LINE (737)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_27787 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_27787 = NULL ;
    while (((operand_27787 = enumerator_27787.nextObject ()))) {
      macroValidPointer (operand_27787) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (true, 0U) ;
      var_cas_prio_as_basic = operand_27787->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (761)) ;
      var_cas_act_as_basic = operand_27787->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (762)) ;
      { const GGS_basic_type _var_28218 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28218.getPtr () != NULL) {
          macroValidPointer (_var_28218.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28218.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28218.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (765)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (766)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (767)) ;
          }
        }
      }
      { const GGS_basic_type _var_28407 = var_cas_act_as_basic ; // CAST instruction
        if (_var_28407.getPtr () != NULL) {
          macroValidPointer (_var_28407.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28407.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28407.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (770)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (771)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (772)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_27787->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (true, 1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (782)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_28623 = var_cas_tl ;
    if (_temp_28623._isBuilt ()) {
      _temp_28623 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (783)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_28750 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_28750 = NULL ;
    while (((operand_28750 = enumerator_28750.nextObject ()))) {
      macroValidPointer (operand_28750) ;
      if (((operand_28750->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_28750->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (793)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_28750->name, var_cas_actual_prio, operand_28750->act COMMA_SOURCE_FILE_AT_LINE (796)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (815)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_29810 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_29810 = NULL ;
      while (((operand_29810 = enumerator_29810.nextObject ()))) {
        macroValidPointer (operand_29810) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (true, 0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (true, 0U) ;
        var_cas_prio_as_basic = operand_29810->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (827)) ;
        const GGS_isr_obj  _temp_30063 = operand_29810->mInfo.isr ;
        if (_temp_30063._isBuilt ()) {
          _temp_30063 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (828)) ;
        }
        { const GGS_basic_type _var_30269 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30269.getPtr () != NULL) {
            macroValidPointer (_var_30269.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30269.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30269.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (831)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (832)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (833)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_29810->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (846)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (848)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_30736 = var_cas_il ;
      if (_temp_30736._isBuilt ()) {
        _temp_30736 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (849)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_30890 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_30890 = NULL ;
      while (((operand_30890 = enumerator_30890.nextObject ()))) {
        macroValidPointer (operand_30890) ;
        if (((operand_30890->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_30890->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (859)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_30890->name, var_cas_actual_prio, operand_30890->act COMMA_SOURCE_FILE_AT_LINE (862)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32287 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32287 = NULL ;
    while (((operand_32287 = enumerator_32287.nextObject ()))) {
      macroValidPointer (operand_32287) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (true, 0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string (true, "") ;
      {
        GGS_task_map::cEnumerator enumerator_32431 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32431 = NULL ;
        while (((operand_32431 = enumerator_32431.nextObject ()))) {
          macroValidPointer (operand_32431) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32431->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (901)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32287->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (903)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_32721 = var_cas_prio_for_task ;
            if (_temp_32721._isBuilt ()) {
              _temp_32721 (HERE)->method_get (_inLexique, operand_32431->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (907)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (911)) ;
            var_cas_rez_comment.appendCstring (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_32431->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (912))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (912))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33037 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33037 = NULL ;
        while (((operand_33037 = enumerator_33037.nextObject ()))) {
          macroValidPointer (operand_33037) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33037->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (916)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32287->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (918)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33325 = var_cas_prio_for_isr ;
            if (_temp_33325._isBuilt ()) {
              _temp_33325 (HERE)->method_get (_inLexique, operand_33037->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (922)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (926)) ;
            var_cas_rez_comment.appendCstring (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_33037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (true, " none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_33897 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33897 = NULL ;
        while (((operand_33897 = enumerator_33897.nextObject ()))) {
          macroValidPointer (operand_33897) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33897->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (940)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32287->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (942)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34187 = var_cas_prio_for_task ;
            if (_temp_34187._isBuilt ()) {
              _temp_34187 (HERE)->method_get (_inLexique, operand_33897->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (946)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (948)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34382 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34382 = NULL ;
        while (((operand_34382 = enumerator_34382.nextObject ()))) {
          macroValidPointer (operand_34382) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34382->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (953)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32287->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (955)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34670 = var_cas_prio_for_isr ;
            if (_temp_34670._isBuilt ()) {
              _temp_34670 (HERE)->method_get (_inLexique, operand_34382->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (959)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (961)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_32287->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (966)) ;
      var_cas_comments.modifier_put (_inLexique, operand_32287->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (967)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (true, 1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 1U) ;
  GGS_uint _variant_36487 = var_cas_max_prio ;
  GGS_bool _condition_36487 (_variant_36487._isBuilt (), true) ;
  while (_condition_36487.isBuiltAndTrue ()) {
    _condition_36487 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36487.isBuiltAndTrue ()) {
      if (_variant_36487.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1012)) ;
        _condition_36487 = GGS_bool (true, false) ;
      }else{
        _variant_36487._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (true, 0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_35831 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_35831 = NULL ;
          while (((operand_35831 = enumerator_35831.nextObject ()))) {
            macroValidPointer (operand_35831) ;
            if (((operand_35831->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_35831->mInfo.act COMMA_SOURCE_FILE_AT_LINE (997)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_35980 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_35980 = NULL ;
          while (((operand_35980 = enumerator_35980.nextObject ()))) {
            macroValidPointer (operand_35980) ;
            if (((operand_35980->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_35980->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1000)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36129 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36129 = NULL ;
          while (((operand_36129 = enumerator_36129.nextObject ()))) {
            macroValidPointer (operand_36129) ;
            if (((operand_36129->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36129->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1003)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1008)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1011)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_36667 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_36667 = NULL ;
    while (((operand_36667 = enumerator_36667.nextObject ()))) {
      macroValidPointer (operand_36667) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_36667->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1024)) ;
      {
        GGS_ident_map::cEnumerator enumerator_36723 (operand_36667->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1025)), true) ;
        const GGS_ident_map::cElement * operand_36723 = NULL ;
        while (((operand_36723 = enumerator_36723.nextObject ()))) {
          macroValidPointer (operand_36723) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36723->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1026)) COMMA_SOURCE_FILE_AT_LINE (1026)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36723->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1027)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36881 (operand_36667->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), true) ;
        const GGS_ident_map::cElement * operand_36881 = NULL ;
        while (((operand_36881 = enumerator_36881.nextObject ()))) {
          macroValidPointer (operand_36881) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36881->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) COMMA_SOURCE_FILE_AT_LINE (1031)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36881->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1032)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37038 (operand_36667->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1035)), true) ;
        const GGS_ident_map::cElement * operand_37038 = NULL ;
        while (((operand_37038 = enumerator_37038.nextObject ()))) {
          macroValidPointer (operand_37038) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37038->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1036)) COMMA_SOURCE_FILE_AT_LINE (1036)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37038->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1037)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37197 (operand_36667->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37197 = NULL ;
        while (((operand_37197 = enumerator_37197.nextObject ()))) {
          macroValidPointer (operand_37197) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37197->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1041)) COMMA_SOURCE_FILE_AT_LINE (1041)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37197->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37361 (operand_36667->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37361 = NULL ;
        while (((operand_37361 = enumerator_37361.nextObject ()))) {
          macroValidPointer (operand_37361) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37361->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) COMMA_SOURCE_FILE_AT_LINE (1046)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37361->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37522 (operand_36667->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_37522 = NULL ;
        while (((operand_37522 = enumerator_37522.nextObject ()))) {
          macroValidPointer (operand_37522) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37522->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) COMMA_SOURCE_FILE_AT_LINE (1051)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37522->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string (true, "task") COMMA_SOURCE_FILE_AT_LINE (1075)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (true, false) ;
  {
    GGS_task_map::cEnumerator enumerator_38377 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38377 = NULL ;
    while (((operand_38377 = enumerator_38377.nextObject ()))) {
      macroValidPointer (operand_38377) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_38377->mKey,  operand_38377->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1084)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1088)) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1089)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1089)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1090)))._operator_concat (GGS_string (true, "_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1090)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1091)))._operator_concat (GGS_string (true, "_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1091)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1092)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1093)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1093)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_ID$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1094)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1094)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string (true, "") ;
      if (((operand_38377->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1101)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1101)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1105)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "event_masks") COMMA_SOURCE_FILE_AT_LINE (1107)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$EXEC_NAME$"),  operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1108)) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$TASK_EVENT_STRUCT$"),  (operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1109)))._operator_concat (GGS_string (true, "_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_40064 = var_cas_actual_priorities ;
      if (_temp_40064._isBuilt ()) {
        _temp_40064 (HERE)->method_get (_inLexique, operand_38377->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_38377->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1123)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1123)))._operator_isEqual (GGS_string (true, "NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true, true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1125)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_38377->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1128)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true, true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_40739 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_40739 = NULL ;
          while (((operand_40739 = enumerator_40739.nextObject ()))) {
            macroValidPointer (operand_40739) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_40883 = var_cas_resources ;
              if (_temp_40883._isBuilt ()) {
                _temp_40883 (HERE)->method_get (_inLexique, operand_40739->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1133)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1134)) ;
              { const GGS_resource_property_obj _var_41278 = var_cas_rez_prop ; // CAST instruction
                if (_var_41278.getPtr () != NULL) {
                  macroValidPointer (_var_41278.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41278.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  ((GGS_string (true, "&"))._operator_concat (operand_40739->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1137))))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1137)) ;
                    var_cas_no_internal_rez_found = GGS_bool (true, false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (1144)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1148)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1149)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38377->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      { const GGS_basic_type _var_41897 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_41897.getPtr () != NULL) {
          macroValidPointer (_var_41897.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_41897.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_41897.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1154)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1154)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1155)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1156)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1157)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38377->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      { const GGS_task_autostart_obj _var_42438 = var_cas_autostart ; // CAST instruction
        if (_var_42438.getPtr () != NULL) {
          macroValidPointer (_var_42438.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42438.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1163)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42438.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1165)) ;
          }else{
            operand_38377->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1167)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_38377->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_42620 = var_cas_timing_prot ;
      if (_temp_42620._isBuilt ()) {
        _temp_42620 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1173)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1173)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1174)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1178)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1179)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_43040 = var_cas_app_for_obj ;
          if (_temp_43040._isBuilt ()) {
            _temp_43040 (HERE)->method_get (_inLexique, operand_38377->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (true, 0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_43258 = var_cas_apps ;
          if (_temp_43258._isBuilt ()) {
            _temp_43258 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1186)) ;
          }
          { const GGS_app_trusted_obj _var_43402 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) ; // CAST instruction
            if (_var_43402.getPtr () != NULL) {
              macroValidPointer (_var_43402.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43402.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1188)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1190)) COMMA_SOURCE_FILE_AT_LINE (1190)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string (true, "extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1208)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1209)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1209)) COMMA_SOURCE_FILE_AT_LINE (1209)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) COMMA_SOURCE_FILE_AT_LINE (1210)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string (true, "isr") COMMA_SOURCE_FILE_AT_LINE (1232)) ;
  {
    GGS_isr_map::cEnumerator enumerator_44955 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_44955 = NULL ;
    while (((operand_44955 = enumerator_44955.nextObject ()))) {
      macroValidPointer (operand_44955) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_44955->mKey,  operand_44955->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1238)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1242)) COMMA_SOURCE_FILE_AT_LINE (1242)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1243)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1244)))._operator_concat (GGS_string (true, "_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1244)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1245)))._operator_concat (GGS_string (true, "_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1246)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1246)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1247)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1247)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_HELPER$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1248)))._operator_concat (GGS_string (true, "_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_ID$"),  (operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1250)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1250)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_45790 = var_cas_actual_priorities ;
      if (_temp_45790._isBuilt ()) {
        _temp_45790 (HERE)->method_get (_inLexique, operand_44955->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1254)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1255)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_45957 = operand_44955->mInfo.isr ;
      if (_temp_45957._isBuilt ()) {
        _temp_45957 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1258)) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_44955->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_46205 = var_cas_timing_prot ;
      if (_temp_46205._isBuilt ()) {
        _temp_46205 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_44955->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1264)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1269)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1270)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_46560 = var_cas_app_for_obj ;
          if (_temp_46560._isBuilt ()) {
            _temp_46560 (HERE)->method_get (_inLexique, operand_44955->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1272)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (true, 0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_46777 = var_cas_apps ;
          if (_temp_46777._isBuilt ()) {
            _temp_46777 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1277)) ;
          }
          { const GGS_app_trusted_obj _var_46921 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) ; // CAST instruction
            if (_var_46921.getPtr () != NULL) {
              macroValidPointer (_var_46921.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_46921.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1279)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) COMMA_SOURCE_FILE_AT_LINE (1281)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1296)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1300)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1300)) COMMA_SOURCE_FILE_AT_LINE (1300)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1301)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string (true, "") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string (true, "counter") COMMA_SOURCE_FILE_AT_LINE (1318)) ;
  {
    GGS_counter_map::cEnumerator enumerator_48134 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48134 = NULL ;
    while (((operand_48134 = enumerator_48134.nextObject ()))) {
      macroValidPointer (operand_48134) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_NAME$"),  operand_48134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1324)) COMMA_SOURCE_FILE_AT_LINE (1324)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (operand_48134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1325)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1325)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48134->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1328)) ;
      { const GGS_basic_type _var_48686 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_48686.getPtr () != NULL) {
          macroValidPointer (_var_48686.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_48686.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_48686.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1330)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1330)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1331)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1332)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1333)) ;
      var_cas_counters_cst.appendCstring ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1334))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_48134->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      { const GGS_basic_type _var_49093 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49093.getPtr () != NULL) {
          macroValidPointer (_var_49093.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49093.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49093.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1338)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1338)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1339)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1340)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      var_cas_counters_cst.appendCstring ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1342))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_48134->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      { const GGS_basic_type _var_49491 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49491.getPtr () != NULL) {
          macroValidPointer (_var_49491.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49491.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49491.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1346)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1346)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1347)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1348)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1349)) ;
      var_cas_counters_cst.appendCstring ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1350))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n"
        "\n") ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1356)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_48134->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1357)) ;
        { const GGS_counter_type _var_50115 = var_cas_type ; // CAST instruction
          if (_var_50115.getPtr () != NULL) {
            macroValidPointer (_var_50115.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50115.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50115.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1362)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1363)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1366)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_50300 = var_cas_app_for_obj ;
          if (_temp_50300._isBuilt ()) {
            _temp_50300 (HERE)->method_get (_inLexique, operand_48134->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1368)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1369)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1377)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string (true, "") ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1385)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string (true, "") ;
    {
      GGS_counter_map::cEnumerator enumerator_50947 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_50947 = enumerator_50947.nextObject () ;
      if ((operand_50947 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string (true, "#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCstring ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCstring ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_50947 ;
        do{
          macroValidPointer (operand_50947) ;
          var_cas_counter_table.appendCstring ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_50947->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1393))) ;
          var_cas_counter_table.appendCstring ("_counter_desc") ;
          var_cas_counter_ids.appendCstring ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_50947->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1394))) ;
          var_cas_counter_ids.appendCstring ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1394))) ;
          var_cas_counter_ids.appendCstring ("\n") ;
          var_cas_counter_ids.appendCstring ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_50947->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1395))) ;
          var_cas_counter_ids.appendCstring (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_50947->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1395))) ;
          var_cas_counter_ids.appendCstring ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_50947 = enumerator_50947.nextObject () ;
          _foreach_loop_50947 = ((operand_50947 != NULL)) ;
          if (_foreach_loop_50947) {
            var_cas_counter_table.appendCstring (",\n") ;
            var_cas_counter_ids.appendCstring ("\n") ;
          }
        }while (_foreach_loop_50947) ;
        var_cas_counter_table.appendCstring ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1403)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1403)) COMMA_SOURCE_FILE_AT_LINE (1403)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1404)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1405)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1406)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string (true, "") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string (true, "resource") COMMA_SOURCE_FILE_AT_LINE (1426)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string (true, "internal_resource") COMMA_SOURCE_FILE_AT_LINE (1427)) ;
  {
    GGS_resource_map::cEnumerator enumerator_52675 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_52675 = NULL ;
    while (((operand_52675 = enumerator_52675.nextObject ()))) {
      macroValidPointer (operand_52675) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_52675->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1432)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_52675->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1435)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_52962 = var_cas_rez_prio ;
      if (_temp_52962._isBuilt ()) {
        _temp_52962 (HERE)->method_get (_inLexique, operand_52675->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1439)) ;
      }
      const GGS_string_map  _temp_53015 = var_cas_rez_comments ;
      if (_temp_53015._isBuilt ()) {
        _temp_53015 (HERE)->method_get (_inLexique, operand_52675->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1440)) ;
      }
      { const GGS_resource_property_obj _var_53519 = var_cas_rez_prop ; // CAST instruction
        if (_var_53519.getPtr () != NULL) {
          macroValidPointer (_var_53519.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_53519.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_53519.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_53519.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string (true, "") ;
            operand_52675->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1454)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_NAME$"),  operand_52675->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1456)) COMMA_SOURCE_FILE_AT_LINE (1456)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE$"),  (operand_52675->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1457)))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1457)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1459)) COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1460)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1462)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1463)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_53941 = var_cas_app_for_obj ;
          if (_temp_53941._isBuilt ()) {
            _temp_53941 (HERE)->method_get (_inLexique, operand_52675->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1465)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1466)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string (true, "") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string (true, "") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54256 (var_cas_regular_rez, true) ;
    while (enumerator_54256.hc ()) {
      var_cas_rez_ids.appendCstring ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54256._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1478))) ;
      var_cas_rez_ids.appendCstring ("\n") ;
      var_cas_rez_ids.appendCstring ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54256._key (HERE)) ;
      var_cas_rez_ids.appendCstring (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54256._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54256.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string (true, "res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_54490 (var_cas_regular_rez, true) ;
    if (enumerator_54490 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string (true, "CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_54490 ;
      do{
        var_cas_rez_imp.appendCstring ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_54490._key (HERE)) ;
        var_cas_rez_imp.appendCstring ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_54490.next () ;
        _foreach_loop_54490 = (enumerator_54490 .hc ()) ;
        if (_foreach_loop_54490) {
          var_cas_rez_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_54490) ;
      var_cas_rez_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1497)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1498)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1498)) COMMA_SOURCE_FILE_AT_LINE (1498)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1499)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_prefix_map   /* var_cas_p */,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string (true, "event") COMMA_SOURCE_FILE_AT_LINE (1516)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56277 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56277 = NULL ;
    while (((operand_56277 = enumerator_56277.nextObject ()))) {
      macroValidPointer (operand_56277) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56277->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1536)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (true, 0LLU) ;
      {
        GGS_lstringlist::cEnumerator enumerator_56453 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_56453 = NULL ;
        while (((operand_56453 = enumerator_56453.nextObject ()))) {
          macroValidPointer (operand_56453) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_56531 = var_cas_events ;
          if (_temp_56531._isBuilt ()) {
            _temp_56531 (HERE)->method_get (_inLexique, operand_56453->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1540)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1542)) ;
          { const GGS_event_mask_obj _var_57433 = var_cas_mask_obj ; // CAST instruction
            if (_var_57433.getPtr () != NULL) {
              macroValidPointer (_var_57433.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_57433.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_57433.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1545)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1545))))._operator_isEqual (GGS_uint64 (true, 0LLU))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1547)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1547))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1549)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MASK of event "))._operator_concat (operand_56453->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1549))))._operator_concat (GGS_string (true, " conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1550)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_57433.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_56453->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) COMMA_SOURCE_FILE_AT_LINE (1553))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_56453->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1555)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1556)) ;
                }else{
                  var_cas_count = GGS_uint (true, 1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_56453->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1560)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_56453->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1565)) COMMA_SOURCE_FILE_AT_LINE (1565))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_56453->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1567)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_56277->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1569))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_56453->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1570)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_56277->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1573)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_57910 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_57910 = NULL ;
    while (((operand_57910 = enumerator_57910.nextObject ()))) {
      macroValidPointer (operand_57910) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_57910->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1581)) ;
      { const GGS_event_mask_obj _var_58355 = var_cas_evt_mask ; // CAST instruction
        if (_var_58355.getPtr () != NULL) {
          macroValidPointer (_var_58355.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58355.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_58355.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_57910->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1585)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1585)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_57910->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1586)) COMMA_SOURCE_FILE_AT_LINE (1586)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1587)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1587)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1587)) COMMA_SOURCE_FILE_AT_LINE (1587)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCstring ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_58519 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_58519 = NULL ;
    while (((operand_58519 = enumerator_58519.nextObject ()))) {
      macroValidPointer (operand_58519) ;
      var_cas_sort_evts._addAssign_operation (operand_58519->mKey, operand_58519->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_58691 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_58691 = NULL ;
    while (((operand_58691 = enumerator_58691.nextObject ()))) {
      macroValidPointer (operand_58691) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_58691->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1609)) COMMA_SOURCE_FILE_AT_LINE (1609))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_58804 = var_cas_tasks_for_event ;
        if (_temp_58804._isBuilt ()) {
          _temp_58804 (HERE)->method_get (_inLexique, operand_58691->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1611)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (true, 0LLU) ;
        {
          GGS_stringset::cEnumerator enumerator_58873 (var_cas_tasks, true) ;
          while (enumerator_58873.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_58937 = var_cas_task_mask ;
            if (_temp_58937._isBuilt ()) {
              _temp_58937 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_58873._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1615)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_58873.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (true, 1LLU) ;
        GGS_uint _variant_59269 = GGS_uint (true, 32U) ;
        GGS_bool _condition_59269 (_variant_59269._isBuilt (), true) ;
        while (_condition_59269.isBuiltAndTrue ()) {
          _condition_59269 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1622))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (true, 0LLU))) ;
          if (_condition_59269.isBuiltAndTrue ()) {
            if (_variant_59269.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1624)) ;
              _condition_59269 = GGS_bool (true, false) ;
            }else{
              _variant_59269._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1623)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1625)))).isBuiltAndTrue ()) {
          operand_58691->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "All event mask bits are already use, event "))._operator_concat (operand_58691->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1626))))._operator_concat (GGS_string (true, " can't be created")) COMMA_SOURCE_FILE_AT_LINE (1627)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_59568 (var_cas_tasks, true) ;
          while (enumerator_59568.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59568._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1632)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59568._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1634)) ;
            enumerator_59568.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_58691->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1638)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1638)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_58691->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1639)) COMMA_SOURCE_FILE_AT_LINE (1639)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1640)) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCstring ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1719)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string (true, "") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (true, false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1738)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string (true, "POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1740))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_63274 = var_cas_config ;
    if (_temp_63274._isBuilt ()) {
      _temp_63274 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1742)) ;
    }
    { const GGS_basic_type _var_63503 = var_cas_pw ; // CAST instruction
      if (_var_63503.getPtr () != NULL) {
        macroValidPointer (_var_63503.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_63503.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_63503.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1745)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1747)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1748)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_63547 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_63547 = NULL ;
    while (((operand_63547 = enumerator_63547.nextObject ()))) {
      macroValidPointer (operand_63547) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_63760 = GGS_uint (true, 32U) ;
        GGS_bool _condition_63760 (_variant_63760._isBuilt (), true) ;
        while (_condition_63760.isBuiltAndTrue ()) {
          _condition_63760 = (operand_63547->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_63760.isBuiltAndTrue ()) {
            if (_variant_63760.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1758)) ;
              _condition_63760 = GGS_bool (true, false) ;
            }else{
              _variant_63760._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1757)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_63547->fifosize ;
      }
      var_cas_fifo.appendCstring ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1762))) ;
      var_cas_fifo.appendCstring ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1762))) ;
      var_cas_fifo.appendCstring ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1763)) ;
    }
  }
  var_cas_fifo.appendCstring ("\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1769)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1769))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  GGS_uint _variant_64263 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1770)) ;
  GGS_bool _condition_64263 (_variant_64263._isBuilt (), true) ;
  while (_condition_64263.isBuiltAndTrue ()) {
    _condition_64263 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64263.isBuiltAndTrue ()) {
      if (_variant_64263.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1776)) ;
        _condition_64263 = GGS_bool (true, false) ;
      }else{
        _variant_64263._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCstring ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCstring (",") ;
        }
        var_cas_fifo.appendCstring ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1775)) ;
      }
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1780)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1780))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_64418 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64418 = NULL ;
    while (((operand_64418 = enumerator_64418.nextObject ()))) {
      macroValidPointer (operand_64418) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_64631 = GGS_uint (true, 32U) ;
        GGS_bool _condition_64631 (_variant_64631._isBuilt (), true) ;
        while (_condition_64631.isBuiltAndTrue ()) {
          _condition_64631 = (operand_64418->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_64631.isBuiltAndTrue ()) {
            if (_variant_64631.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1788)) ;
              _condition_64631 = GGS_bool (true, false) ;
            }else{
              _variant_64631._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1787)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1789)) ;
      }else{
        var_cas_max_size = operand_64418->fifosize ;
      }
      var_cas_fifo.appendCstring ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1793))) ;
      var_cas_fifo.appendCstring ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1793))) ;
      var_cas_fifo.appendCstring (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCstring (",") ;
      }
      var_cas_fifo.appendCstring ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1796)) ;
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1800)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1801)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1801)) COMMA_SOURCE_FILE_AT_LINE (1801)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*

