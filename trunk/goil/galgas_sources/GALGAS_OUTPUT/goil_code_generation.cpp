//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.3                         *
//                       june 2nd, 2009, at 10h46'13"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("target"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags._dotAssign_operation (function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)))._operator_isEqual (GGS_string ("extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7522 = var_cas_startuphook ; // CAST instruction
    if (_var_7522.getPtr () != NULL) {
      macroValidPointer (_var_7522.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7522.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7522.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (178))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7767 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7767.getPtr () != NULL) {
      macroValidPointer (_var_7767.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7767.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7767.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7997 = var_cas_errorhook ; // CAST instruction
    if (_var_7997.getPtr () != NULL) {
      macroValidPointer (_var_7997.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7997.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7997.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8238 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8238.getPtr () != NULL) {
      macroValidPointer (_var_8238.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8238.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8238.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (199))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8484 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8484.getPtr () != NULL) {
      macroValidPointer (_var_8484.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8484.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8484.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (206))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8743 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8743.getPtr () != NULL) {
      macroValidPointer (_var_8743.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8743.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8743.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (213))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_9017 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_9017.getPtr () != NULL) {
      macroValidPointer (_var_9017.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9017.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9017.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (220))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9276 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9276.getPtr () != NULL) {
      macroValidPointer (_var_9276.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9276.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9276.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (227))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9465 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9465.getPtr () != NULL) {
      macroValidPointer (_var_9465.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9465.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9465.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (233))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (238)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (239))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else{
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (244)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10149 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ; // CAST instruction
      if (_var_10149.getPtr () != NULL) {
        macroValidPointer (_var_10149.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10149.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10149.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (251))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10330 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ; // CAST instruction
      if (_var_10330.getPtr () != NULL) {
        macroValidPointer (_var_10330.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10330.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10330.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (256))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10639 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10639 = NULL ;
      while (((operand_10639 = enumerator_10639.nextObject ()))) {
        macroValidPointer (operand_10639) ;
        { const GGS_timing_prot _var_10837 = operand_10639->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ; // CAST instruction
          if (_var_10837.getPtr () != NULL) {
            macroValidPointer (_var_10837.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10837.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10888 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10888 = NULL ;
      while (((operand_10888 = enumerator_10888.nextObject ()))) {
        macroValidPointer (operand_10888) ;
        { const GGS_timing_prot _var_11083 = operand_10888->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ; // CAST instruction
          if (_var_11083.getPtr () != NULL) {
            macroValidPointer (_var_11083.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11083.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_11354 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
  if (_temp_11354.isBuilt ()) {
    _temp_11354 (HERE)->method_generate_c (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (289)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  var_cas_flags._dotAssign_operation (function_bool_define (_inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (_inLexique COMMA_SOURCE_FILE_AT_LINE (293)) COMMA_SOURCE_FILE_AT_LINE (293))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11522 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (296)), true) ;
    const GGS_ident_map::cElement * operand_11522 = NULL ;
    while (((operand_11522 = enumerator_11522.nextObject ()))) {
      macroValidPointer (operand_11522) ;
      { const GGS_basic_type _var_11762 = operand_11522->mInfo.value ; // CAST instruction
        if (_var_11762.getPtr () != NULL) {
          macroValidPointer (_var_11762.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11762.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11762.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (299))).isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_11522->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (300))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (308)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & _inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (318)) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("arm"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("avr"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("c166"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("hcs12") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("posix"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("posix_vp2"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix_vp2") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("ppc"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("ppc") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("v850e"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (331)) ;
    var_cas_trampoline_target = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13330 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13330 = NULL ;
    while (((operand_13330 = enumerator_13330.nextObject ()))) {
      macroValidPointer (operand_13330) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_13330->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (358)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (359)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (360)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (361)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (361)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (362)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (362)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (363)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (363)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (364)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (364)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (367)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (369)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (369)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (369)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (370)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (373)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (375)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (375)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (376)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (380)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else{
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_15358 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
  if (_temp_15358.isBuilt ()) {
    _temp_15358 (HERE)->method_generate_make (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (_inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (388)) ;
  GGS_string var_cas_i_option ;
  var_cas_i_option = GGS_string ("") ;
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "posix_it" COMMA_SOURCE_FILE_AT_LINE (391)))).isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
  }
  ::routine_doReplace (_inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (392)) ;
  const GGS_string _temp_15626 = var_cas_makefileStr ;
  if (_temp_15626.isBuilt ()) {
    _temp_15626 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (394)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (398)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  var_cas_trampolineTarget = function_trampoline_target_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (401))) COMMA_SOURCE_FILE_AT_LINE (401)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (402)) ;
  ::routine_check_target (_inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (405)) ;
  GGS_string var_cas_arch_chip_board ;
  var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (_inLexique COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (408)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (_inLexique COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (409)) ;
  ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (411)) ;
  { const GGS_basic_type _var_16697 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (413)) ; // CAST instruction
    if (_var_16697.getPtr () != NULL) {
      macroValidPointer (_var_16697.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_16697.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_16697.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_16578 = var_cas_b ;
        if (_temp_16578.isBuilt ()) {
          _temp_16578 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (416)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (417)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  GGS_string ("false") COMMA_SOURCE_FILE_AT_LINE (419)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (424))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (431)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (432)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_17177 = var_cas_makerulesStr ;
    if (_temp_17177.isBuilt ()) {
      _temp_17177 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (433)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (450)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (452)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (465)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (476)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (477)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (478)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (491)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (8U) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (16U) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (32U) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (517)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (0U) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (538))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)) COMMA_SOURCE_FILE_AT_LINE (538)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (540)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (541)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (544)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (544)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (546)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19914 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19914 = NULL ;
    while (((operand_19914 = enumerator_19914.nextObject ()))) {
      macroValidPointer (operand_19914) ;
      { const GGS_basic_type _var_20185 = operand_19914->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (552)) ; // CAST instruction
        if (_var_20185.getPtr () != NULL) {
          macroValidPointer (_var_20185.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20185.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20185.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (553)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (553)) ;
            }
          }else{
            operand_19914->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("Internal error, task "))._operator_concat (operand_19914->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (554))))._operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (555)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (557)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (557)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (559)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20560 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20560 = NULL ;
    while (((operand_20560 = enumerator_20560.nextObject ()))) {
      macroValidPointer (operand_20560) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_20560->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (565)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (566)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (568)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (569)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (572)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (572)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (574)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (576)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (579)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (579)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (581)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (583)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (586)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (586)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (588)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (590)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (593)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (593)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (595)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (597)) ;
  if (((var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (601)))._operator_strictSup (var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (601)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (602)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (602)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (604)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (604)) ;
  }
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (607)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (608)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (611))._add_operation (_inLexique, GGS_uint64 (1U) COMMA_SOURCE_FILE_AT_LINE (611)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (611)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22811 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22811 = NULL ;
    while (((operand_22811 = enumerator_22811.nextObject ()))) {
      macroValidPointer (operand_22811) ;
      { const GGS_app_trusted_obj _var_22973 = operand_22811->mInfo.app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (619)) ; // CAST instruction
        if (_var_22973.getPtr () != NULL) {
          macroValidPointer (_var_22973.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22973.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22973.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22890 (var_cas_t.reader_trusted_fcts (_inLexique COMMA_SOURCE_FILE_AT_LINE (621)), true) ;
              while (enumerator_22890.hc ()) {
                var_cas_tfs._addAssign_operation (enumerator_22890._key (HERE)) ;
                enumerator_22890.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_tfs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (627)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (627)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (627)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (628)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (631)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (633)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (643))._add_operation (_inLexique, GGS_uint (4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (645)) COMMA_SOURCE_FILE_AT_LINE (645)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (665)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (666)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (667)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (668)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_24537 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24537 = NULL ;
    while (((operand_24537 = enumerator_24537.nextObject ()))) {
      macroValidPointer (operand_24537) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24537->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (675)) ;
      { const GGS_action_obj _var_25613 = var_cas_alarm_action ; // CAST instruction
        if (_var_25613.getPtr () != NULL) {
          macroValidPointer (_var_25613.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25613.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25613.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (679)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (679)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (680)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (680)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (680)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25613.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25613.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (683)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (683)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (683)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25613.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25613.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (686)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (686)))._operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25613.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25613.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (689)))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }else{
            operand_24537->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (691)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24537->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (695)) ;
      { const GGS_autostart_obj _var_26536 = var_cas_autostart ; // CAST instruction
        if (_var_26536.getPtr () != NULL) {
          macroValidPointer (_var_26536.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26536.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (698)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (699)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26536.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (702)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (703)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (704)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26536.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26536.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (706)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (707)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (707)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (707)) COMMA_SOURCE_FILE_AT_LINE (707)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
          }else{
            operand_24537->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (710)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24537->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (714)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24537->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (715)) COMMA_SOURCE_FILE_AT_LINE (715)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24537->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (716)))._operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (716)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (720)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (721)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_27068 = var_cas_app_for_obj ;
          if (_temp_27068.isBuilt ()) {
            _temp_27068 (HERE)->method_get (_inLexique, operand_24537->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (724)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27365 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (734)), true) ;
    if (enumerator_27365 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27365 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_27365._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_27365._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (740))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_27365._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_27365._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27365.next () ;
        _foreach_loop_27365 = (enumerator_27365 .hc ()) ;
        if (_foreach_loop_27365) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27365) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (750)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (751)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (752)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (752)) COMMA_SOURCE_FILE_AT_LINE (752)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28613 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28613 = NULL ;
    while (((operand_28613 = enumerator_28613.nextObject ()))) {
      macroValidPointer (operand_28613) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28613->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (776)) ;
      var_cas_act_as_basic = operand_28613->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
      { const GGS_basic_type _var_29044 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_29044.getPtr () != NULL) {
          macroValidPointer (_var_29044.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29044.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29044.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (781)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (782)) ;
          }
        }
      }
      { const GGS_basic_type _var_29233 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29233.getPtr () != NULL) {
          macroValidPointer (_var_29233.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29233.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29233.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (785)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (786)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (787)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_28613->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (797)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_29449 = var_cas_tl ;
    if (_temp_29449.isBuilt ()) {
      _temp_29449 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (798)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29576 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29576 = NULL ;
    while (((operand_29576 = enumerator_29576.nextObject ()))) {
      macroValidPointer (operand_29576) ;
      if (((operand_29576->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29576->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_29576->name, var_cas_actual_prio, operand_29576->act COMMA_SOURCE_FILE_AT_LINE (811)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (830)))._operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30636 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30636 = NULL ;
      while (((operand_30636 = enumerator_30636.nextObject ()))) {
        macroValidPointer (operand_30636) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30636->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (842)) ;
        const GGS_isr_obj  _temp_30889 = operand_30636->mInfo.isr ;
        if (_temp_30889.isBuilt ()) {
          _temp_30889 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (843)) ;
        }
        { const GGS_basic_type _var_31095 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_31095.getPtr () != NULL) {
            macroValidPointer (_var_31095.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_31095.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_31095.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (846)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (847)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (848)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_30636->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (861)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (863)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_31562 = var_cas_il ;
      if (_temp_31562.isBuilt ()) {
        _temp_31562 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (864)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31716 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31716 = NULL ;
      while (((operand_31716 = enumerator_31716.nextObject ()))) {
        macroValidPointer (operand_31716) ;
        if (((operand_31716->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31716->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (874)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_31716->name, var_cas_actual_prio, operand_31716->act COMMA_SOURCE_FILE_AT_LINE (877)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_33113 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_33113 = NULL ;
    while (((operand_33113 = enumerator_33113.nextObject ()))) {
      macroValidPointer (operand_33113) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33257 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33257 = NULL ;
        while (((operand_33257 = enumerator_33257.nextObject ()))) {
          macroValidPointer (operand_33257) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33257->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (916)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_33113->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (918)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33547 = var_cas_prio_for_task ;
            if (_temp_33547.isBuilt ()) {
              _temp_33547 (HERE)->method_get (_inLexique, operand_33257->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (922)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (926)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_33257->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33863 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33863 = NULL ;
        while (((operand_33863 = enumerator_33863.nextObject ()))) {
          macroValidPointer (operand_33863) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33863->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (931)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_33113->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (933)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34151 = var_cas_prio_for_isr ;
            if (_temp_34151.isBuilt ()) {
              _temp_34151 (HERE)->method_get (_inLexique, operand_33863->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (937)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (941)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_33863->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (942))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (942))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34723 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34723 = NULL ;
        while (((operand_34723 = enumerator_34723.nextObject ()))) {
          macroValidPointer (operand_34723) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34723->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (955)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_33113->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (957)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_35013 = var_cas_prio_for_task ;
            if (_temp_35013.isBuilt ()) {
              _temp_35013 (HERE)->method_get (_inLexique, operand_34723->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (961)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (963)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35208 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35208 = NULL ;
        while (((operand_35208 = enumerator_35208.nextObject ()))) {
          macroValidPointer (operand_35208) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_35208->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (968)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_33113->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (970)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_35496 = var_cas_prio_for_isr ;
            if (_temp_35496.isBuilt ()) {
              _temp_35496 (HERE)->method_get (_inLexique, operand_35208->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (974)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (976)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_33113->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (981)) ;
      var_cas_comments.modifier_put (_inLexique, operand_33113->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (982)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37313 = var_cas_max_prio ;
  GGS_bool _condition_37313 (_variant_37313.isBuilt (), true) ;
  while (_condition_37313.isBuiltAndTrue ()) {
    _condition_37313 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37313.isBuiltAndTrue ()) {
      if (_variant_37313.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1027)) ;
        _condition_37313 = GGS_bool (false) ;
      }else{
        _variant_37313._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36657 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36657 = NULL ;
          while (((operand_36657 = enumerator_36657.nextObject ()))) {
            macroValidPointer (operand_36657) ;
            if (((operand_36657->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36657->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1012)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36806 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36806 = NULL ;
          while (((operand_36806 = enumerator_36806.nextObject ()))) {
            macroValidPointer (operand_36806) ;
            if (((operand_36806->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36806->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1015)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36955 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36955 = NULL ;
          while (((operand_36955 = enumerator_36955.nextObject ()))) {
            macroValidPointer (operand_36955) ;
            if (((operand_36955->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36955->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1018)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1023)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1026)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37493 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37493 = NULL ;
    while (((operand_37493 = enumerator_37493.nextObject ()))) {
      macroValidPointer (operand_37493) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_37493->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37549 (operand_37493->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37549 = NULL ;
        while (((operand_37549 = enumerator_37549.nextObject ()))) {
          macroValidPointer (operand_37549) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37549->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1041)) COMMA_SOURCE_FILE_AT_LINE (1041)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37549->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37707 (operand_37493->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37707 = NULL ;
        while (((operand_37707 = enumerator_37707.nextObject ()))) {
          macroValidPointer (operand_37707) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37707->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) COMMA_SOURCE_FILE_AT_LINE (1046)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37707->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37864 (operand_37493->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_37864 = NULL ;
        while (((operand_37864 = enumerator_37864.nextObject ()))) {
          macroValidPointer (operand_37864) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37864->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) COMMA_SOURCE_FILE_AT_LINE (1051)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37864->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38023 (operand_37493->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055)), true) ;
        const GGS_ident_map::cElement * operand_38023 = NULL ;
        while (((operand_38023 = enumerator_38023.nextObject ()))) {
          macroValidPointer (operand_38023) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_38023->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) COMMA_SOURCE_FILE_AT_LINE (1056)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_38023->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1057)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38187 (operand_37493->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1060)), true) ;
        const GGS_ident_map::cElement * operand_38187 = NULL ;
        while (((operand_38187 = enumerator_38187.nextObject ()))) {
          macroValidPointer (operand_38187) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_38187->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) COMMA_SOURCE_FILE_AT_LINE (1061)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_38187->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1062)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38348 (operand_37493->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1065)), true) ;
        const GGS_ident_map::cElement * operand_38348 = NULL ;
        while (((operand_38348 = enumerator_38348.nextObject ()))) {
          macroValidPointer (operand_38348) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_38348->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1066)) COMMA_SOURCE_FILE_AT_LINE (1066)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_38348->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1067)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1090)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39203 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39203 = NULL ;
    while (((operand_39203 = enumerator_39203.nextObject ()))) {
      macroValidPointer (operand_39203) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_39203->mKey,  operand_39203->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1099)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1104)))._operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1105)))._operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1106)))._operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1107)))._operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1108)))._operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1109)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string ("") ;
      if (((operand_39203->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1116)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1116)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1118)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1120)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1122)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) COMMA_SOURCE_FILE_AT_LINE (1123)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1124)))._operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_40890 = var_cas_actual_priorities ;
      if (_temp_40890.isBuilt ()) {
        _temp_40890 (HERE)->method_get (_inLexique, operand_39203->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_39203->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1138)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1138)))._operator_isEqual (GGS_string ("NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_39203->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1143)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41565 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41565 = NULL ;
          while (((operand_41565 = enumerator_41565.nextObject ()))) {
            macroValidPointer (operand_41565) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_41709 = var_cas_resources ;
              if (_temp_41709.isBuilt ()) {
                _temp_41709 (HERE)->method_get (_inLexique, operand_41565->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1148)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1149)) ;
              { const GGS_resource_property_obj _var_42104 = var_cas_rez_prop ; // CAST instruction
                if (_var_42104.getPtr () != NULL) {
                  macroValidPointer (_var_42104.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_42104.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&"))._operator_concat (operand_41565->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1152))))._operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1152)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1159)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1164)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39203->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1167)) ;
      { const GGS_basic_type _var_42723 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42723.getPtr () != NULL) {
          macroValidPointer (_var_42723.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42723.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42723.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1169)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1170)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1171)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1172)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39203->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      { const GGS_task_autostart_obj _var_43264 = var_cas_autostart ; // CAST instruction
        if (_var_43264.getPtr () != NULL) {
          macroValidPointer (_var_43264.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43264.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1178)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43264.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1180)) ;
          }else{
            operand_39203->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_39203->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_43446 = var_cas_timing_prot ;
      if (_temp_43446.isBuilt ()) {
        _temp_43446 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39203->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1188)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1193)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1194)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_43866 = var_cas_app_for_obj ;
          if (_temp_43866.isBuilt ()) {
            _temp_43866 (HERE)->method_get (_inLexique, operand_39203->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1196)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1197)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_44084 = var_cas_apps ;
          if (_temp_44084.isBuilt ()) {
            _temp_44084 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1201)) ;
          }
          { const GGS_app_trusted_obj _var_44228 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1202)) ; // CAST instruction
            if (_var_44228.getPtr () != NULL) {
              macroValidPointer (_var_44228.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44228.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1203)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1205)) COMMA_SOURCE_FILE_AT_LINE (1205)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1223)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1224)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1224)) COMMA_SOURCE_FILE_AT_LINE (1224)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) COMMA_SOURCE_FILE_AT_LINE (1225)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1247)) ;
  {
    GGS_isr_map::cEnumerator enumerator_45781 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45781 = NULL ;
    while (((operand_45781 = enumerator_45781.nextObject ()))) {
      macroValidPointer (operand_45781) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_45781->mKey,  operand_45781->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1258)))._operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1259)))._operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1260)))._operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1261)))._operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1262)))._operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1263)))._operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1263)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1265)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_46616 = var_cas_actual_priorities ;
      if (_temp_46616.isBuilt ()) {
        _temp_46616 (HERE)->method_get (_inLexique, operand_45781->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_46783 = operand_45781->mInfo.isr ;
      if (_temp_46783.isBuilt ()) {
        _temp_46783 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1273)) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_45781->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_47031 = var_cas_timing_prot ;
      if (_temp_47031.isBuilt ()) {
        _temp_47031 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45781->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1279)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1279)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1280)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1284)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1285)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_47386 = var_cas_app_for_obj ;
          if (_temp_47386.isBuilt ()) {
            _temp_47386 (HERE)->method_get (_inLexique, operand_45781->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1287)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1288)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_47603 = var_cas_apps ;
          if (_temp_47603.isBuilt ()) {
            _temp_47603 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1292)) ;
          }
          { const GGS_app_trusted_obj _var_47747 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1293)) ; // CAST instruction
            if (_var_47747.getPtr () != NULL) {
              macroValidPointer (_var_47747.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47747.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1294)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1296)) COMMA_SOURCE_FILE_AT_LINE (1296)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1311)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1315)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1315)) COMMA_SOURCE_FILE_AT_LINE (1315)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1316)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1333)) ;
  {
    GGS_counter_map::cEnumerator enumerator_48960 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48960 = NULL ;
    while (((operand_48960 = enumerator_48960.nextObject ()))) {
      macroValidPointer (operand_48960) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48960->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) COMMA_SOURCE_FILE_AT_LINE (1339)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48960->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1340)))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1340)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48960->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) ;
      { const GGS_basic_type _var_49512 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49512.getPtr () != NULL) {
          macroValidPointer (_var_49512.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49512.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49512.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1345)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1345)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1346)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1347)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1348)) ;
      var_cas_counters_cst.appendCString ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48960->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1349))) ;
      var_cas_counters_cst.appendCString (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCString ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_48960->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      { const GGS_basic_type _var_49919 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49919.getPtr () != NULL) {
          macroValidPointer (_var_49919.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49919.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49919.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1353)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1353)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1354)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1355)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1356)) ;
      var_cas_counters_cst.appendCString ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48960->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1357))) ;
      var_cas_counters_cst.appendCString (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCString ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_48960->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1359)) ;
      { const GGS_basic_type _var_50317 = var_cas_min_as_basic ; // CAST instruction
        if (_var_50317.getPtr () != NULL) {
          macroValidPointer (_var_50317.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50317.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50317.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1362)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1363)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1364)) ;
      var_cas_counters_cst.appendCString ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48960->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1365))) ;
      var_cas_counters_cst.appendCString (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCString ("\n"
        "\n") ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1371)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_48960->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1372)) ;
        { const GGS_counter_type _var_50941 = var_cas_type ; // CAST instruction
          if (_var_50941.getPtr () != NULL) {
            macroValidPointer (_var_50941.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50941.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50941.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1376)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1377)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1378)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1381)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_51126 = var_cas_app_for_obj ;
          if (_temp_51126.isBuilt ()) {
            _temp_51126 (HERE)->method_get (_inLexique, operand_48960->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1383)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1384)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1392)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string ("") ;
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1400)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51773 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51773 = enumerator_51773.nextObject () ;
      if ((operand_51773 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51773 ;
        do{
          macroValidPointer (operand_51773) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_51773->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1408))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51773->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1409))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1409))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51773->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1410))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51773->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1410))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51773 = enumerator_51773.nextObject () ;
          _foreach_loop_51773 = ((operand_51773 != NULL)) ;
          if (_foreach_loop_51773) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51773) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1418)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1418)) COMMA_SOURCE_FILE_AT_LINE (1418)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1419)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1420)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1421)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1441)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1442)) ;
  {
    GGS_resource_map::cEnumerator enumerator_53501 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53501 = NULL ;
    while (((operand_53501 = enumerator_53501.nextObject ()))) {
      macroValidPointer (operand_53501) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_53501->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1447)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53501->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1450)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_53788 = var_cas_rez_prio ;
      if (_temp_53788.isBuilt ()) {
        _temp_53788 (HERE)->method_get (_inLexique, operand_53501->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1454)) ;
      }
      const GGS_string_map  _temp_53841 = var_cas_rez_comments ;
      if (_temp_53841.isBuilt ()) {
        _temp_53841 (HERE)->method_get (_inLexique, operand_53501->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1455)) ;
      }
      { const GGS_resource_property_obj _var_54345 = var_cas_rez_prop ; // CAST instruction
        if (_var_54345.getPtr () != NULL) {
          macroValidPointer (_var_54345.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54345.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54345.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54345.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53501->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1469)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53501->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1471)) COMMA_SOURCE_FILE_AT_LINE (1471)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53501->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1472)))._operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1472)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1474)) COMMA_SOURCE_FILE_AT_LINE (1474)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1475)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1477)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1478)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_54767 = var_cas_app_for_obj ;
          if (_temp_54767.isBuilt ()) {
            _temp_54767 (HERE)->method_get (_inLexique, operand_53501->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1480)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1481)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_55082 (var_cas_regular_rez, true) ;
    while (enumerator_55082.hc ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_55082._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1493))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_55082._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_55082._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_55082.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55316 (var_cas_regular_rez, true) ;
    if (enumerator_55316 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55316 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_55316._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55316.next () ;
        _foreach_loop_55316 = (enumerator_55316 .hc ()) ;
        if (_foreach_loop_55316) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55316) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1512)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1513)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1513)) COMMA_SOURCE_FILE_AT_LINE (1513)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1514)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1530)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_57077 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_57077 = NULL ;
    while (((operand_57077 = enumerator_57077.nextObject ()))) {
      macroValidPointer (operand_57077) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_57077->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1550)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (0U) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57253 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57253 = NULL ;
        while (((operand_57253 = enumerator_57253.nextObject ()))) {
          macroValidPointer (operand_57253) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_57331 = var_cas_events ;
          if (_temp_57331.isBuilt ()) {
            _temp_57331 (HERE)->method_get (_inLexique, operand_57253->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1554)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1556)) ;
          { const GGS_event_mask_obj _var_58233 = var_cas_mask_obj ; // CAST instruction
            if (_var_58233.getPtr () != NULL) {
              macroValidPointer (_var_58233.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58233.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_58233.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1559)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1559))))._operator_isEqual (GGS_uint64 (0U))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1561)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1561))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1563)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("MASK of event "))._operator_concat (operand_57253->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1563))))._operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1564)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_58233.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_57253->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1567)) COMMA_SOURCE_FILE_AT_LINE (1567))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_57253->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1569)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1570)) ;
                }else{
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_57253->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1574)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_57253->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1579)) COMMA_SOURCE_FILE_AT_LINE (1579))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_57253->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1581)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_57077->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1583))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_57253->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1584)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_57077->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1587)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58710 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58710 = NULL ;
    while (((operand_58710 = enumerator_58710.nextObject ()))) {
      macroValidPointer (operand_58710) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58710->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1595)) ;
      { const GGS_event_mask_obj _var_59155 = var_cas_evt_mask ; // CAST instruction
        if (_var_59155.getPtr () != NULL) {
          macroValidPointer (_var_59155.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59155.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_59155.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58710->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1599)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1599)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58710->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1600)) COMMA_SOURCE_FILE_AT_LINE (1600)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1601)) COMMA_SOURCE_FILE_AT_LINE (1601)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59319 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59319 = NULL ;
    while (((operand_59319 = enumerator_59319.nextObject ()))) {
      macroValidPointer (operand_59319) ;
      var_cas_sort_evts._addAssign_operation (operand_59319->mKey, operand_59319->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59491 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59491 = NULL ;
    while (((operand_59491 = enumerator_59491.nextObject ()))) {
      macroValidPointer (operand_59491) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_59491->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1623)) COMMA_SOURCE_FILE_AT_LINE (1623))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_59604 = var_cas_tasks_for_event ;
        if (_temp_59604.isBuilt ()) {
          _temp_59604 (HERE)->method_get (_inLexique, operand_59491->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1625)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (0U) ;
        {
          GGS_stringset::cEnumerator enumerator_59673 (var_cas_tasks, true) ;
          while (enumerator_59673.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_59737 = var_cas_task_mask ;
            if (_temp_59737.isBuilt ()) {
              _temp_59737 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59673._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1629)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_59673.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (1U) ;
        GGS_uint _variant_60069 = GGS_uint (32U) ;
        GGS_bool _condition_60069 (_variant_60069.isBuilt (), true) ;
        while (_condition_60069.isBuiltAndTrue ()) {
          _condition_60069 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1636))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (0U))) ;
          if (_condition_60069.isBuiltAndTrue ()) {
            if (_variant_60069.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1638)) ;
              _condition_60069 = GGS_bool (false) ;
            }else{
              _variant_60069._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1637)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1639)))).isBuiltAndTrue ()) {
          operand_59491->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("All event mask bits are already use, event "))._operator_concat (operand_59491->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1640))))._operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1641)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60368 (var_cas_tasks, true) ;
          while (enumerator_60368.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_60368._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1646)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_60368._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1648)) ;
            enumerator_60368.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59491->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1652)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1652)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59491->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1653)) COMMA_SOURCE_FILE_AT_LINE (1653)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1654)) COMMA_SOURCE_FILE_AT_LINE (1654)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1733)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1752)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1754))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_64074 = var_cas_config ;
    if (_temp_64074.isBuilt ()) {
      _temp_64074 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1756)) ;
    }
    { const GGS_basic_type _var_64303 = var_cas_pw ; // CAST instruction
      if (_var_64303.getPtr () != NULL) {
        macroValidPointer (_var_64303.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64303.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64303.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1759)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1761)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1762)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_64347 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64347 = NULL ;
    while (((operand_64347 = enumerator_64347.nextObject ()))) {
      macroValidPointer (operand_64347) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64560 = GGS_uint (32U) ;
        GGS_bool _condition_64560 (_variant_64560.isBuilt (), true) ;
        while (_condition_64560.isBuiltAndTrue ()) {
          _condition_64560 = (operand_64347->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_64560.isBuiltAndTrue ()) {
            if (_variant_64560.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1772)) ;
              _condition_64560 = GGS_bool (false) ;
            }else{
              _variant_64560._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1771)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_64347->fifosize ;
      }
      var_cas_fifo.appendCString ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1776))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1776))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1777)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1783)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1783))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_65063 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1784)) ;
  GGS_bool _condition_65063 (_variant_65063.isBuilt (), true) ;
  while (_condition_65063.isBuiltAndTrue ()) {
    _condition_65063 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_65063.isBuiltAndTrue ()) {
      if (_variant_65063.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1790)) ;
        _condition_65063 = GGS_bool (false) ;
      }else{
        _variant_65063._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1789)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1794)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1794))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65218 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65218 = NULL ;
    while (((operand_65218 = enumerator_65218.nextObject ()))) {
      macroValidPointer (operand_65218) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65431 = GGS_uint (32U) ;
        GGS_bool _condition_65431 (_variant_65431.isBuilt (), true) ;
        while (_condition_65431.isBuiltAndTrue ()) {
          _condition_65431 = (operand_65218->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_65431.isBuiltAndTrue ()) {
            if (_variant_65431.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1802)) ;
              _condition_65431 = GGS_bool (false) ;
            }else{
              _variant_65431._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1801)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1803)) ;
      }else{
        var_cas_max_size = operand_65218->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1807))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1807))) ;
      var_cas_fifo.appendCString (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1810)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1814)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1815)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1815)) COMMA_SOURCE_FILE_AT_LINE (1815)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & _inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp ;
  var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (_inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir ;
  ::routine_templates_directory (_inLexique,  var_cas_temp_dir COMMA_SOURCE_FILE_AT_LINE (1832)) ;
  if (((var_cas_temp_dir)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    GGS_string var_cas_target ;
    var_cas_target = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (1835))) ;
    if (((var_cas_target)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      GGS_string var_cas_header ;
      GGS_string var_cas_obj_header ;
      GGS_string var_cas_implementation ;
      GGS_string var_cas_types ;
      GGS_config  var_cas_cfg ;
      var_cas_cfg = GGS_config ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file ;
      var_cas_cfg_file = function_config_file (_inLexique COMMA_SOURCE_FILE_AT_LINE (1843)) ;
      if (((var_cas_cfg_file.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1844)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (_inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1845)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file ;
      var_cas_extra_cfg_file = function_extra_config_file (_inLexique COMMA_SOURCE_FILE_AT_LINE (1848)) ;
      if (((var_cas_extra_cfg_file.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1849)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (_inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1850)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf ;
      var_cas_generated_conf = function_os_cfg (_inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1853)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_header,  GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1855)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_obj_header,  GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1856)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_implementation,  GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1857)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_types,  GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1858)) ;
      GGS_prefix_map  var_cas_prefix ;
      var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      ::routine_init_prefixes (_inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1861)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1867)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (_inLexique,  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1873)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1872)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (_inLexique,  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1881)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1882)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1884)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1880)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (_inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1890)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (_inLexique,  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1900)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1899)) ;
      ::routine_generate_flags (_inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (1905)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1906)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1907)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1903)) ;
      const GGS_com  _temp_68596 = var_cas_cpu.reader_com (_inLexique COMMA_SOURCE_FILE_AT_LINE (1910)) ;
      if (_temp_68596.isBuilt ()) {
        _temp_68596 (HERE)->method_generate (_inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1910)) ;
      }
      ::routine_generate_events (_inLexique,  var_cas_cpu.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1913)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1914)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1912)) ;
      ::routine_generate_counters (_inLexique,  var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1919)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1918)) ;
      ::routine_generate_alarms (_inLexique,  var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1926)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1925)) ;
      ::routine_generate_tasks (_inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1934)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1935)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1936)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1932)) ;
      ::routine_generate_isrs (_inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1945)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1946)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1947)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1943)) ;
      ::routine_generate_proc_table (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1957)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1958)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1956)) ;
      ::routine_generate_mp (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1964)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1965)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1966)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1963)) ;
      ::routine_generate_resources (_inLexique,  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1970)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1969)) ;
      ::routine_generate_messages (_inLexique,  var_cas_cpu.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (1979)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1978)) ;
      ::routine_generate_network_messages (_inLexique,  var_cas_cpu.reader_net_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (1986)),  var_cas_cpu.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (1987)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1985)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1992)))).isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (_inLexique,  var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1994)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1993)) ;
        ::routine_generate_timing_prot (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (2000)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (2001)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1999)) ;
        ::routine_generate_apps (_inLexique,  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (2007)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (2008)),  var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (2009)),  var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (2010)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2003)) ;
        ::routine_generate_trusted_functions (_inLexique,  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (2015)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2014)) ;
      }
      ::routine_generate_ready_list (_inLexique,  var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (2022)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2021)) ;
      ::routine_generate_types (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (2032)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (2034)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (2035)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2028)) ;
      ::routine_generate_it_table (_inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2039)) ;
      GGS_string var_cas_directory ;
      var_cas_directory = function_project_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (2050)) ;
      GGS_string var_cas_header_file ;
      var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file ;
      var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file ;
      var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file ;
      var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2057)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2058)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2059)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2060)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2061)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2062)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2063)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2064)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2065)) ;
      GGS_uint  var_cas_error_count ;
      var_cas_error_count = GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_types_file) ;
      if (((var_cas_error_count)._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2075)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_header_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2076)) ;
        }
        const GGS_string _temp_73948 = var_cas_header ;
        if (_temp_73948.isBuilt ()) {
          _temp_73948 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2078)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2079)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_obj_header_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2080)) ;
        }
        const GGS_string _temp_74152 = var_cas_obj_header ;
        if (_temp_74152.isBuilt ()) {
          _temp_74152 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2082)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2083)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_implementation_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2084)) ;
        }
        const GGS_string _temp_74368 = var_cas_implementation ;
        if (_temp_74368.isBuilt ()) {
          _temp_74368 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2086)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2087)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_types_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2088)) ;
        }
        const GGS_string _temp_74571 = var_cas_types ;
        if (_temp_74571.isBuilt ()) {
          _temp_74571 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2090)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "generate_makefile" COMMA_SOURCE_FILE_AT_LINE (2092)))).isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir ;
          var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (2093)) ;
          if (((var_cas_makefile_dir)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2097)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_makefile_dir))._operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2098)) ;
          }
          ::routine_generate_makefile (_inLexique,  var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (2101)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (2104)).reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (2104)) COMMA_SOURCE_FILE_AT_LINE (2100)) ;
        }
        ::routine_generate_description (_inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2107)) ;
      }
    }else{
      _inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2110)) ;
    }
  }else{
    _inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2113)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

