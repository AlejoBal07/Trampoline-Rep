//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                       Generated by version 1.9.10                         *
//                      april 9th, 2010, at 10h18'36"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 688
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "api_grammar.h"
#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (56)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (57)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (58)) ;
  const GGS_bool cond_1763 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_1763.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_1763.isBuiltAndFalse ()) {
    const GGS_bool cond_1821 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_1821.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_1821.isBuiltAndFalse ()) {
      const GGS_bool cond_1885 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_1885.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_1885.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (71)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (82)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (83)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (84)) ;
  const GGS_bool cond_2239 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_2239.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_2239.isBuiltAndFalse ()) {
    const GGS_bool cond_2297 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_2297.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_2297.isBuiltAndFalse ()) {
      const GGS_bool cond_2361 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_2361.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_2361.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_2697 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_2697.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_2697.isBuiltAndFalse ()) {
    const GGS_bool cond_2756 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_2756.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_2756.isBuiltAndFalse ()) {
      const GGS_bool cond_2821 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_2821.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_2821.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (123)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (144)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) COMMA_SOURCE_FILE_AT_LINE (144)) ;
  const GGS_bool cond_3386 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_3386.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (146)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (147)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (150)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (150)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (152)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_3907 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_3907 = NULL ;
    while (((operand_3907 = enumerator_3907.nextObject ()))) {
      macroValidPointer (operand_3907) ;
      { const GGS_basic_type _var_4175 = operand_3907->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ; // CAST instruction
        if (_var_4175.getPtr () != NULL) {
          macroValidPointer (_var_4175.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_4175.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_4175.getPtr ()) ;
            const GGS_bool cond_4057 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (159))).operator_strictSup (var_cas_max_act) ;
            if (cond_4057.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) ;
            }
          }else{
            operand_3907->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_3907->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (161)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (163)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (163)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (165)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_4544 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_4544 = NULL ;
    while (((operand_4544 = enumerator_4544.nextObject ()))) {
      macroValidPointer (operand_4544) ;
      GGS_lstringlist  var_cas_evts = operand_4544->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
      const GGS_bool cond_4681 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_4681.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (174)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (174)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (175)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
  const GGS_bool cond_4942 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_4942.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (180)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (182)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
  const GGS_bool cond_5230 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5230.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (187)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (189)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
  const GGS_bool cond_5522 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5522.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (194)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (196)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
  const GGS_bool cond_5818 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5818.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (201)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (203)) ;
  const GGS_bool cond_6206 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_6206.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (208)) ;
  }else if (cond_6206.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  }
  const GGS_bool cond_6287 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_6287.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (213)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (214)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (217)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (217)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (217)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (219)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_6754 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_6754 = NULL ;
    while (((operand_6754 = enumerator_6754.nextObject ()))) {
      macroValidPointer (operand_6754) ;
      { const GGS_app_trusted_obj _var_6914 = operand_6754->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ; // CAST instruction
        if (_var_6914.getPtr () != NULL) {
          macroValidPointer (_var_6914.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_6914.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_6914.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_6833 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (227)), true) ;
              while (enumerator_6833.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_6833._key (HERE)) ;
                enumerator_6833.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (233)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (233)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (234)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (237)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (239)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (249)) COMMA_SOURCE_FILE_AT_LINE (249)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251)) COMMA_SOURCE_FILE_AT_LINE (251)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_8111 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_8111 = NULL ;
    while (((operand_8111 = enumerator_8111.nextObject ()))) {
      macroValidPointer (operand_8111) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_8111->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
      var_cas_act_as_basic = operand_8111->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (275)) ;
      { const GGS_basic_type _var_8534 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_8534.getPtr () != NULL) {
          macroValidPointer (_var_8534.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_8534.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_8534.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (279)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (280)) ;
          }
        }
      }
      { const GGS_basic_type _var_8720 = var_cas_act_as_basic ; // CAST instruction
        if (_var_8720.getPtr () != NULL) {
          macroValidPointer (_var_8720.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_8720.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_8720.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (283)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (284)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (285)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_8111->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_8961 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_8961.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_8952_0 ;
    GGS_lstring  automatic_var_8952_1 ;
    const GGS_objs_by_prio  temp_8931 = var_cas_tl ;
    if (temp_8931.isBuilt ()) {
      temp_8931 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_8952_0, automatic_var_8952_1 COMMA_SOURCE_FILE_AT_LINE (296)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_9056 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_9056 = NULL ;
    while (((operand_9056 = enumerator_9056.nextObject ()))) {
      macroValidPointer (operand_9056) ;
      const GGS_bool cond_9312 = (operand_9056->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_9312.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_9056->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_9056->name, var_cas_actual_prio, operand_9056->act COMMA_SOURCE_FILE_AT_LINE (309)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_11614 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_11614.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_10064 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10064 = NULL ;
      while (((operand_10064 = enumerator_10064.nextObject ()))) {
        macroValidPointer (operand_10064) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_10064->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (339)) ;
        { const GGS_basic_type _var_10517 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_10517.getPtr () != NULL) {
            macroValidPointer (_var_10517.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_10517.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_10517.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (343)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (344)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (345)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, GGS_uint (1U), operand_10064->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (358)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_11008 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_11008.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_10995_0 ;
      GGS_lstring  automatic_var_10995_1 ;
      const GGS_objs_by_prio  temp_10974 = var_cas_il ;
      if (temp_10974.isBuilt ()) {
        temp_10974 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_10995_0, automatic_var_10995_1 COMMA_SOURCE_FILE_AT_LINE (361)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_11126 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_11126 = NULL ;
      while (((operand_11126 = enumerator_11126.nextObject ()))) {
        macroValidPointer (operand_11126) ;
        const GGS_bool cond_11402 = (operand_11126->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_11402.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_11126->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_11126->name, var_cas_actual_prio, operand_11126->act COMMA_SOURCE_FILE_AT_LINE (374)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_11614.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_stringMap  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_stringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_12479 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_12479 = NULL ;
    while (((operand_12479 = enumerator_12479.nextObject ()))) {
      macroValidPointer (operand_12479) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_12620 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_12620 = NULL ;
        while (((operand_12620 = enumerator_12620.nextObject ()))) {
          macroValidPointer (operand_12620) ;
          GGS_lstringlist  var_cas_owned_rez = operand_12620->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (412)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_12789_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12479->mKey,  automatic_var_12789_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (414)) ;
          const GGS_bool cond_13171 = var_cas_owned ;
          if (cond_13171.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_12908 = var_cas_prio_for_process ;
            if (temp_12908.isBuilt ()) {
              temp_12908 (HERE)->method_get (inLexique, operand_12620->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (418)) ;
            }
            const GGS_bool cond_13023 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_13023.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (422)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_12620->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (423))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (423))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_13217 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_13217 = NULL ;
        while (((operand_13217 = enumerator_13217.nextObject ()))) {
          macroValidPointer (operand_13217) ;
          GGS_lstringlist  var_cas_owned_rez = operand_13217->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (427)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_13386_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12479->mKey,  automatic_var_13386_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (429)) ;
          const GGS_bool cond_13769 = var_cas_owned ;
          if (cond_13769.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_13505 = var_cas_prio_for_process ;
            if (temp_13505.isBuilt ()) {
              temp_13505 (HERE)->method_get (inLexique, operand_13217->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (433)) ;
            }
            const GGS_bool cond_13621 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_13621.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (437)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_13217->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (438))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (438))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_13879 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_13879.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_14068 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_14068 = NULL ;
        while (((operand_14068 = enumerator_14068.nextObject ()))) {
          macroValidPointer (operand_14068) ;
          GGS_lstringlist  var_cas_owned_rez = operand_14068->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_14237_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12479->mKey,  automatic_var_14237_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (453)) ;
          const GGS_bool cond_14500 = var_cas_owned ;
          if (cond_14500.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_14356 = var_cas_prio_for_process ;
            if (temp_14356.isBuilt ()) {
              temp_14356 (HERE)->method_get (inLexique, operand_14068->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (457)) ;
            }
            const GGS_bool cond_14480 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_14480.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (459)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_14546 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_14546 = NULL ;
        while (((operand_14546 = enumerator_14546.nextObject ()))) {
          macroValidPointer (operand_14546) ;
          GGS_lstringlist  var_cas_owned_rez = operand_14546->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (464)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_14715_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12479->mKey,  automatic_var_14715_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (466)) ;
          const GGS_bool cond_14979 = var_cas_owned ;
          if (cond_14979.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_14834 = var_cas_prio_for_process ;
            if (temp_14834.isBuilt ()) {
              temp_14834 (HERE)->method_get (inLexique, operand_14546->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (470)) ;
            }
            const GGS_bool cond_14959 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_14959.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (472)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_12479->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (477)) ;
      var_cas_comments.modifier_put (inLexique, operand_12479->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (478)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_16454 = var_cas_max_prio ;
  GGS_bool _condition_16454 (_variant_16454.isBuilt (), true) ;
  while (_condition_16454.isBuiltAndTrue ()) {
    _condition_16454 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_16454.isBuiltAndTrue ()) {
      if (_variant_16454.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (519)) ;
        _condition_16454 = GGS_bool (false) ;
      }else{
        _variant_16454.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_15957 (var_cas_prio_for_process, true) ;
          const GGS_prio_map::cElement * operand_15957 = NULL ;
          while (((operand_15957 = enumerator_15957.nextObject ()))) {
            macroValidPointer (operand_15957) ;
            const GGS_bool cond_16049 = (operand_15957->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_16049.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_15957->mInfo.act COMMA_SOURCE_FILE_AT_LINE (507)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_16103 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_16103 = NULL ;
          while (((operand_16103 = enumerator_16103.nextObject ()))) {
            macroValidPointer (operand_16103) ;
            const GGS_bool cond_16195 = (operand_16103->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_16195.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_16103->mInfo.act COMMA_SOURCE_FILE_AT_LINE (510)) ;
            }
          }
        }
        const GGS_bool cond_16392 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_16392.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (515)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (518)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_stringMap  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_stringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_16628 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_16628 = NULL ;
    while (((operand_16628 = enumerator_16628.nextObject ()))) {
      macroValidPointer (operand_16628) ;
      GGS_string var_cas_app_name = operand_16628->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531)) ;
      {
        GGS_ident_map::cEnumerator enumerator_16683 (operand_16628->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (532)), true) ;
        const GGS_ident_map::cElement * operand_16683 = NULL ;
        while (((operand_16683 = enumerator_16683.nextObject ()))) {
          macroValidPointer (operand_16683) ;
          const GGS_bool cond_16803 = (var_cas_app_for_obj.reader_hasKey (operand_16683->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (533)))).operator_not () ;
          if (cond_16803.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_16683->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (534)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_16838 (operand_16628->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (537)), true) ;
        const GGS_ident_map::cElement * operand_16838 = NULL ;
        while (((operand_16838 = enumerator_16838.nextObject ()))) {
          macroValidPointer (operand_16838) ;
          const GGS_bool cond_16957 = (var_cas_app_for_obj.reader_hasKey (operand_16838->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (538)))).operator_not () ;
          if (cond_16957.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_16838->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (539)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_16992 (operand_16628->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (542)), true) ;
        const GGS_ident_map::cElement * operand_16992 = NULL ;
        while (((operand_16992 = enumerator_16992.nextObject ()))) {
          macroValidPointer (operand_16992) ;
          const GGS_bool cond_17113 = (var_cas_app_for_obj.reader_hasKey (operand_16992->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (543)))).operator_not () ;
          if (cond_17113.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_16992->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (544)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17148 (operand_16628->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (547)), true) ;
        const GGS_ident_map::cElement * operand_17148 = NULL ;
        while (((operand_17148 = enumerator_17148.nextObject ()))) {
          macroValidPointer (operand_17148) ;
          const GGS_bool cond_17277 = (var_cas_app_for_obj.reader_hasKey (operand_17148->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (548)))).operator_not () ;
          if (cond_17277.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17148->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (549)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17312 (operand_16628->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (552)), true) ;
        const GGS_ident_map::cElement * operand_17312 = NULL ;
        while (((operand_17312 = enumerator_17312.nextObject ()))) {
          macroValidPointer (operand_17312) ;
          const GGS_bool cond_17435 = (var_cas_app_for_obj.reader_hasKey (operand_17312->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (553)))).operator_not () ;
          if (cond_17435.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17312->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (554)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17470 (operand_16628->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (557)), true) ;
        const GGS_ident_map::cElement * operand_17470 = NULL ;
        while (((operand_17470 = enumerator_17470.nextObject ()))) {
          macroValidPointer (operand_17470) ;
          const GGS_bool cond_17594 = (var_cas_app_for_obj.reader_hasKey (operand_17470->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (558)))).operator_not () ;
          if (cond_17594.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17470->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (559)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeEvents"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeEvents (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_eventMaskMap  & var_cas_eventMasks COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeEvents at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_eventMasks = GGS_eventMaskMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_maskForTask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasksForEvent = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_18495 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (589)), true) ;
    const GGS_task_map::cElement * operand_18495 = NULL ;
    while (((operand_18495 = enumerator_18495.nextObject ()))) {
      macroValidPointer (operand_18495) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_18495->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (591)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_18661 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_18661 = NULL ;
        while (((operand_18661 = enumerator_18661.nextObject ()))) {
          macroValidPointer (operand_18661) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_18732 = var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (595)) ;
          if (temp_18732.isBuilt ()) {
            temp_18732 (HERE)->method_get (inLexique, operand_18661->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (595)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (597)) ;
          { const GGS_event_mask_obj _var_19434 = var_cas_mask_obj ; // CAST instruction
            if (_var_19434.getPtr () != NULL) {
              macroValidPointer (_var_19434.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_19434.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_19434.getPtr ()) ;
                const GGS_bool cond_19007 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (600)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (600)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_19007.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (601)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (601))) ;
                }else if (cond_19007.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (603)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_18661->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (603)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (604)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_19434.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_19322 = var_cas_evt_usage.reader_hasKey (operand_18661->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (607))) ;
                if (cond_19322.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_18661->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (608)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (609)) ;
                }else if (cond_19322.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_18661->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (613)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_refTasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_19598 = var_cas_tasksForEvent.reader_hasKey (operand_18661->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (617))) ;
          if (cond_19598.isBuiltAndTrue ()) {
            var_cas_tasksForEvent.modifier_delete (inLexique, operand_18661->mValue, var_cas_refTasks COMMA_SOURCE_FILE_AT_LINE (618)) ;
          }
          var_cas_refTasks.addAssign_operation (operand_18495->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (620))) ;
          var_cas_tasksForEvent.modifier_add (inLexique, operand_18661->mValue, var_cas_refTasks COMMA_SOURCE_FILE_AT_LINE (621)) ;
        }
      }
      var_cas_maskForTask.modifier_insert_mask (inLexique, operand_18495->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (623)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_19824 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (629)), true) ;
    const GGS_event_map::cElement * operand_19824 = NULL ;
    while (((operand_19824 = enumerator_19824.nextObject ()))) {
      macroValidPointer (operand_19824) ;
      GGS_event_mask_obj  var_cas_eventMask = operand_19824->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (630)) ;
      { const GGS_event_mask_obj _var_20055 = var_cas_eventMask ; // CAST instruction
        if (_var_20055.getPtr () != NULL) {
          macroValidPointer (_var_20055.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_20055.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_20055.getPtr ()) ;
            var_cas_eventMasks.modifier_put (inLexique, operand_19824->mKey, var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (633)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (633)) ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sortedEvents = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_20219 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_20219 = NULL ;
    while (((operand_20219 = enumerator_20219.nextObject ()))) {
      macroValidPointer (operand_20219) ;
      var_cas_sortedEvents.addAssign_operation (operand_20219->mKey, operand_20219->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_20395 (var_cas_sortedEvents, true) ;
    const GGS_sorted_events::cElement * operand_20395 = NULL ;
    while (((operand_20395 = enumerator_20395.nextObject ()))) {
      macroValidPointer (operand_20395) ;
      const GGS_bool cond_21780 = var_cas_tasksForEvent.reader_hasKey (operand_20395->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (653))) ;
      if (cond_21780.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_20503 = var_cas_tasksForEvent ;
        if (temp_20503.isBuilt ()) {
          temp_20503 (HERE)->method_get (inLexique, operand_20395->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (655)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_20570 (var_cas_tasks, true) ;
          while (enumerator_20570.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_20635 = var_cas_maskForTask ;
            if (temp_20635.isBuilt ()) {
              temp_20635 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_20570._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (659)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_20570.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_20962 = GGS_uint (32U) ;
        GGS_bool _condition_20962 (_variant_20962.isBuilt (), true) ;
        while (_condition_20962.isBuiltAndTrue ()) {
          _condition_20962 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (666)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_20962.isBuiltAndTrue ()) {
            if (_variant_20962.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (668)) ;
              _condition_20962 = GGS_bool (false) ;
            }else{
              _variant_20962.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (667)) ;
            }
          }
        }
        const GGS_bool cond_21133 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (669))) ;
        if (cond_21133.isBuiltAndTrue ()) {
          operand_20395->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_20395->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (670)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (671)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_21257 (var_cas_tasks, true) ;
          while (enumerator_21257.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_maskForTask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21257._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (676)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_maskForTask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21257._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (678)) ;
            enumerator_21257.next () ;
          }
        }
        var_cas_eventMasks.modifier_put (inLexique, operand_20395->event_name, var_cas_bit COMMA_SOURCE_FILE_AT_LINE (681)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeEvents\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (705)) ;
  const GGS_bool cond_26651 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_26651.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.reader_value () ;
    const GGS_bool cond_26563 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_26563.isBuiltAndTrue ()) {
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (711)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) ;
      const GGS_bool cond_22504 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_22504.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (716)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (719)) ;
      const GGS_bool cond_22687 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_22687.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (721)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (724)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_actual_prio = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (730)),  var_cas_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (729)) ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (735)),  var_cas_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (734)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_stringMap  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (743)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (744)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (745)),  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (742)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (751)) ;
      GGS_stringMap  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (760)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (759)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (765)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (766)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (767)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (768)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (769)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (770)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (771)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (764)) ;
      GGS_eventMaskMap  var_cas_eventMasks ;
      ::routine_computeEvents (inLexique,  var_cas_cpu,  var_cas_eventMasks COMMA_SOURCE_FILE_AT_LINE (776)) ;
      GGS_goilTemplateVariableMap  var_cas_sysCfg = GGS_goilTemplateVariableMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_setEnvData (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (780)) ;
      ::routine_setProcessesList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (781)) ;
      ::routine_setBasicTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (782)) ;
      ::routine_setExtendedTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (783)) ;
      ::routine_setTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (784)) ;
      ::routine_setISRs1List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (785)) ;
      ::routine_setISRs2List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (786)) ;
      ::routine_setCountersList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (787)) ;
      ::routine_setEventsList (inLexique,  var_cas_cpu,  var_cas_eventMasks,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (788)) ;
      ::routine_setAlarmsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (789)) ;
      ::routine_setResourcesList (inLexique,  var_cas_cpu,  var_cas_rez_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (790)) ;
      ::routine_setMessagesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (791)) ;
      ::routine_setScheduletablesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (792)) ;
      ::routine_setOsapplicationsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (793)) ;
      ::routine_setProcessCount (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (794)) ;
      ::routine_setBuildConfig (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (795)) ;
      ::routine_setReadyList (inLexique,  var_cas_cpu,  var_cas_ready_list,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (796)) ;
      ::routine_addBoolValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSAR"), GGS_location (inLexique) COMMA_HERE),  gOption_goil_5F_options_autosar_5F_on.reader_value () COMMA_SOURCE_FILE_AT_LINE (797)) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_sysCfg,  function_lstringWith (inLexique, GGS_string ("MAXTASKPRIORITY") COMMA_SOURCE_FILE_AT_LINE (798)),  var_cas_max_task_prio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (798)) COMMA_SOURCE_FILE_AT_LINE (798)) ;
      ::routine_setOsConfig (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (799)) ;
      ::routine_setInterruptSources (inLexique,  var_cas_cfg,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (800)) ;
      GGS_string var_cas_apiDescriptionFile = function_templateFilePath (inLexique, GGS_string ("config"), GGS_string ("api.desc") COMMA_SOURCE_FILE_AT_LINE (807)) ;
      const GGS_bool cond_25739 = (var_cas_apiDescriptionFile).operator_isNotEqual (GGS_string ("")) ;
      if (cond_25739.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_api_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        function_lstringWith (inLexique, var_cas_apiDescriptionFile COMMA_SOURCE_FILE_AT_LINE (809)),
                                        var_cas_sysCfg
                                        COMMA_SOURCE_FILE_AT_LINE (809)) ;
        }
      }else if (cond_25739.isBuiltAndFalse ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("No api.desc file found in config templates") COMMA_SOURCE_FILE_AT_LINE (812)) ;
      }
      GGS_string var_cas_goilLog = function_computeTemplate (inLexique, GGS_string (""), var_cas_sysCfg, GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (814)) ;
      const GGS_bool cond_26025 = gOption_goil_5F_options_generate_5F_log.reader_value () ;
      if (cond_26025.isBuiltAndTrue ()) {
        const GGS_string temp_25997 = var_cas_goilLog ;
        if (temp_25997.isBuilt ()) {
          temp_25997 (HERE)->method_writeToFile (inLexique, GGS_string ("goil.log") COMMA_SOURCE_FILE_AT_LINE (816)) ;
        }
      }
      GGS_string var_cas_directory = function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (820)) ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_26548 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_26548.isBuiltAndTrue ()) {
        const GGS_bool cond_26466 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_26466.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (830)) ;
        }
        const GGS_string temp_26519 = var_cas_types ;
        if (temp_26519.isBuilt ()) {
          temp_26519 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (832)) ;
        }
      }
    }else if (cond_26563.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (836)) ;
    }
  }else if (cond_26651.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (839)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

