//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.2                         *
//                       may 20th, 2009, at 17h2'22"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "proc"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "_descriptor"), GGS_string (true, "") COMMA_SOURCE_FILE_AT_LINE (64)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (74)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (76)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (111)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$TARGET$") COMMA_SOURCE_FILE_AT_LINE (112)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&message_object_of_"), GGS_string (true, "$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (113)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$SIZE$") COMMA_SOURCE_FILE_AT_LINE (114)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (115)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "dynamic_queue_of_message_"), GGS_string (true, "$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error_notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "tpl_set_flag_"), GGS_string (true, "$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&error_notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "buffer_of_message_"), GGS_string (true, "$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "filter_of_message_"), GGS_string (true, "$FILTER$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&filter_of_message_"), GGS_string (true, "$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  var_cas_flags.appendCstring ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags._dotAssign_operation (function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (161)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (161))) ;
  var_cas_flags.appendCstring ("\n") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)))._operator_isEqual (GGS_string (true, "extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (169)) ;
  { const GGS_basic_type _var_7136 = var_cas_startuphook ; // CAST instruction
    if (_var_7136.getPtr () != NULL) {
      macroValidPointer (_var_7136.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7136.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7136.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (172))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ;
  { const GGS_basic_type _var_7381 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7381.getPtr () != NULL) {
      macroValidPointer (_var_7381.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7381.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7381.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (179))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
  { const GGS_basic_type _var_7611 = var_cas_errorhook ; // CAST instruction
    if (_var_7611.getPtr () != NULL) {
      macroValidPointer (_var_7611.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7611.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7611.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
  { const GGS_basic_type _var_7852 = var_cas_pretaskhook ; // CAST instruction
    if (_var_7852.getPtr () != NULL) {
      macroValidPointer (_var_7852.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7852.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7852.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (193))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ;
  { const GGS_basic_type _var_8098 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8098.getPtr () != NULL) {
      macroValidPointer (_var_8098.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8098.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8098.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (200))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)) ;
  { const GGS_basic_type _var_8357 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8357.getPtr () != NULL) {
      macroValidPointer (_var_8357.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8357.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8357.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (207))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (211)) ;
  { const GGS_basic_type _var_8631 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8631.getPtr () != NULL) {
      macroValidPointer (_var_8631.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8631.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8631.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (214))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (218)) ;
  { const GGS_basic_type _var_8890 = var_cas_useresscheduler ; // CAST instruction
    if (_var_8890.getPtr () != NULL) {
      macroValidPointer (_var_8890.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8890.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8890.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (221))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9079 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ; // CAST instruction
    if (_var_9079.getPtr () != NULL) {
      macroValidPointer (_var_9079.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9079.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9079.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (227))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (232)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
    var_cas_flags.appendCstring ("\"\n") ;
  }else{
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (238)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_9763 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ; // CAST instruction
      if (_var_9763.getPtr () != NULL) {
        macroValidPointer (_var_9763.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9763.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9763.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_9944 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (248)) ; // CAST instruction
      if (_var_9944.getPtr () != NULL) {
        macroValidPointer (_var_9944.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9944.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9944.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (250))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (true, false) ;
    {
      GGS_task_map::cEnumerator enumerator_10253 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10253 = NULL ;
      while (((operand_10253 = enumerator_10253.nextObject ()))) {
        macroValidPointer (operand_10253) ;
        { const GGS_timing_prot _var_10451 = operand_10253->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (260)) ; // CAST instruction
          if (_var_10451.getPtr () != NULL) {
            macroValidPointer (_var_10451.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10451.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10502 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10502 = NULL ;
      while (((operand_10502 = enumerator_10502.nextObject ()))) {
        macroValidPointer (operand_10502) ;
        { const GGS_timing_prot _var_10697 = operand_10502->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (268)) ; // CAST instruction
          if (_var_10697.getPtr () != NULL) {
            macroValidPointer (_var_10697.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10697.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCstring ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCstring ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_10968 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (283)) ;
  if (_temp_10968._isBuilt ()) {
    _temp_10968 (HERE)->method_generate_c (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (283)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  var_cas_flags._dotAssign_operation (function_bool_define (_inLexique, GGS_string (true, "WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (_inLexique COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (287))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11136 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)), true) ;
    const GGS_ident_map::cElement * operand_11136 = NULL ;
    while (((operand_11136 = enumerator_11136.nextObject ()))) {
      macroValidPointer (operand_11136) ;
      { const GGS_basic_type _var_11376 = operand_11136->mInfo.value ; // CAST instruction
        if (_var_11376.getPtr () != NULL) {
          macroValidPointer (_var_11376.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11376.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11376.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (293))).isBuiltAndTrue ()) {
              var_cas_flags.appendCstring ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_11136->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (294))) ;
              var_cas_flags.appendCstring ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (302)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "getTrampolineTargetName"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getTrampolineTargetName (C_Compiler & _inLexique,
                                GGS_string & var_cas_trampolineTarget COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getTrampolineTargetName at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (312)) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "arm"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "avr"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "c166"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "hcs12") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "posix"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "ppc"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "ppc") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "v850e"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (324)) ;
    var_cas_trampolineTarget = GGS_string (true, "") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getTrampolineTargetName\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string (true, "") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true, true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12829 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12829 = NULL ;
    while (((operand_12829 = enumerator_12829.nextObject ()))) {
      macroValidPointer (operand_12829) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCstring (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_12829->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (337))) ;
      var_cas_first = GGS_bool (true, false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (340)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string (true, "Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (351)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string (true, "Makefile") COMMA_SOURCE_FILE_AT_LINE (352)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (353)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (354)),  GGS_string (true, "$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (354)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)),  GGS_string (true, "$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (355)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)),  GGS_string (true, "$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (356)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (357)),  GGS_string (true, "$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (357)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string (true, "trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (362)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (362)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (362)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (363)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (366)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (366)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string (true, "..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (368)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (368)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (368)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (369)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (true, ".oil")) COMMA_SOURCE_FILE_AT_LINE (371)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (373)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string (true, "true") ;
  }else{
    var_cas_autosarStr = GGS_string (true, "false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (375)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_14857 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (379)) ;
  if (_temp_14857._isBuilt ()) {
    _temp_14857 (HERE)->method_generate_make (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (379)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (_inLexique,  var_cas_makefileStr,  GGS_string (true, "$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (381)) ;
  const GGS_string _temp_14959 = var_cas_makefileStr ;
  if (_temp_14959._isBuilt ()) {
    _temp_14959 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string (true, "/Makefile")) COMMA_SOURCE_FILE_AT_LINE (383)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "Make-rules") COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string (true, "/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  ::routine_getTrampolineTargetName (_inLexique,  var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (390)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (391))) COMMA_SOURCE_FILE_AT_LINE (391)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (392)) ;
  ::routine_check_target (_inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (395)) ;
  GGS_string var_cas_arch_chip_board ;
  var_cas_arch_chip_board = GGS_string (true, "") ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string (true, "ARCH"),  function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (397)) COMMA_SOURCE_FILE_AT_LINE (397)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string (true, "CHIP"),  function_chip (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)) COMMA_SOURCE_FILE_AT_LINE (398)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string (true, "BOARD"),  function_board (_inLexique COMMA_SOURCE_FILE_AT_LINE (399)) COMMA_SOURCE_FILE_AT_LINE (399)) ;
  ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (401)) ;
  { const GGS_basic_type _var_16051 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (403)) ; // CAST instruction
    if (_var_16051.getPtr () != NULL) {
      macroValidPointer (_var_16051.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_16051.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_16051.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_15932 = var_cas_b ;
        if (_temp_15932._isBuilt ()) {
          _temp_15932 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (406)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (407)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  GGS_string (true, "false") COMMA_SOURCE_FILE_AT_LINE (409)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (414))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string (true, "GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string (true, "#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (421)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (422)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_16531 = var_cas_makerulesStr ;
    if (_temp_16531._isBuilt ()) {
      _temp_16531 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (423)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (440)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (441)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 31U) COMMA_SOURCE_FILE_AT_LINE (442)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "s32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (455)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (466)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 16U) COMMA_SOURCE_FILE_AT_LINE (467)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 32U) COMMA_SOURCE_FILE_AT_LINE (468)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (481)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 8LLU) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 16LLU) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 32LLU) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (507)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (true, 0LLU) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (528)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (528))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (528)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (528)) COMMA_SOURCE_FILE_AT_LINE (528)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string (true, "Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (530)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (531)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (534)),  GGS_string (true, "Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (534)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (536)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19268 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19268 = NULL ;
    while (((operand_19268 = enumerator_19268.nextObject ()))) {
      macroValidPointer (operand_19268) ;
      { const GGS_basic_type _var_19539 = operand_19268->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (542)) ; // CAST instruction
        if (_var_19539.getPtr () != NULL) {
          macroValidPointer (_var_19539.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_19539.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_19539.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (543)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (543)) ;
            }
          }else{
            operand_19268->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "Internal error, task "))._operator_concat (operand_19268->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (544))))._operator_concat (GGS_string (true, " has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (545)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (547)),  GGS_string (true, "Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (547)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (549)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19914 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19914 = NULL ;
    while (((operand_19914 = enumerator_19914.nextObject ()))) {
      macroValidPointer (operand_19914) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_19914->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (555)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (556)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (556)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (558)),  GGS_string (true, "Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (558)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (559)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (562)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (562)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (564)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (566)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (569)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (569)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (571)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (576)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (576)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (578)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (583)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (583)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (585)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (587)) ;
  if (((var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (591)))._operator_strictSup (var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (591)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (592)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (592)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (594)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
  }
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (597)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (598)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (601)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (601))._add_operation (_inLexique, GGS_uint64 (true, 1LLU) COMMA_SOURCE_FILE_AT_LINE (601)),  GGS_string (true, "too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (601)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (603)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22165 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22165 = NULL ;
    while (((operand_22165 = enumerator_22165.nextObject ()))) {
      macroValidPointer (operand_22165) ;
      { const GGS_app_trusted_obj _var_22327 = operand_22165->mInfo.app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (609)) ; // CAST instruction
        if (_var_22327.getPtr () != NULL) {
          macroValidPointer (_var_22327.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22327.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22327.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22244 (var_cas_t.reader_trusted_fcts (_inLexique COMMA_SOURCE_FILE_AT_LINE (611)), true) ;
              while (enumerator_22244.hc ()) {
                var_cas_tfs._addAssign_operation (enumerator_22244._key (HERE)) ;
                enumerator_22244.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_tfs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (617)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (617)),  GGS_string (true, "Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (617)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (618)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string (true, "too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (621)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (623)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (633))._add_operation (_inLexique, GGS_uint (true, 4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (633)) COMMA_SOURCE_FILE_AT_LINE (633)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (635)) COMMA_SOURCE_FILE_AT_LINE (635)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string (true, "alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (655)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string (true, "alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (656)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string (true, "alarm_callback") COMMA_SOURCE_FILE_AT_LINE (657)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string (true, "alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (658)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_23891 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_23891 = NULL ;
    while (((operand_23891 = enumerator_23891.nextObject ()))) {
      macroValidPointer (operand_23891) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_23891->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (665)) ;
      { const GGS_action_obj _var_24967 = var_cas_alarm_action ; // CAST instruction
        if (_var_24967.getPtr () != NULL) {
          macroValidPointer (_var_24967.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_24967.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_24967.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (669)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (669)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (669)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (670)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (670)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (670)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_24967.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_24967.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (673)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (673)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (673)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_24967.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_24967.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (676)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (676)))._operator_concat (GGS_string (true, "_callback")) COMMA_SOURCE_FILE_AT_LINE (676)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_24967.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_24967.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (679)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (679)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
          }else{
            operand_23891->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown action found") COMMA_SOURCE_FILE_AT_LINE (681)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_23891->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (685)) ;
      { const GGS_autostart_obj _var_25890 = var_cas_autostart ; // CAST instruction
        if (_var_25890.getPtr () != NULL) {
          macroValidPointer (_var_25890.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_25890.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (688)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (689)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (690)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_25890.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (692)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (693)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (694)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_25890.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_25890.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (696)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (697)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (697)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (697)) COMMA_SOURCE_FILE_AT_LINE (697)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (698)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (698)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (698)) COMMA_SOURCE_FILE_AT_LINE (698)) ;
          }else{
            operand_23891->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_23891->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (704)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_NAME$"),  operand_23891->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (705)) COMMA_SOURCE_FILE_AT_LINE (705)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM$"),  (operand_23891->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (706)))._operator_concat (GGS_string (true, "_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (706)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (707)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (707)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (710)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (711)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_26422 = var_cas_app_for_obj ;
          if (_temp_26422._isBuilt ()) {
            _temp_26422 (HERE)->method_get (_inLexique, operand_23891->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (713)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (714)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string (true, "") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string (true, "") ;
  {
    GGS_stringset::cEnumerator enumerator_26719 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (724)), true) ;
    if (enumerator_26719 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string (true, "CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCstring ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_26719 ;
      do{
        var_cas_alarm_imp.appendCstring ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_26719._key (HERE)) ;
        var_cas_alarm_imp.appendCstring ("_alarm_desc") ;
        var_cas_alarm_ids.appendCstring ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26719._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (730))) ;
        var_cas_alarm_ids.appendCstring ("\n") ;
        var_cas_alarm_ids.appendCstring ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26719._key (HERE)) ;
        var_cas_alarm_ids.appendCstring (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26719._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_26719.next () ;
        _foreach_loop_26719 = (enumerator_26719 .hc ()) ;
        if (_foreach_loop_26719) {
          var_cas_alarm_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_26719) ;
      var_cas_alarm_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (740)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (741)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (742)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (742)) COMMA_SOURCE_FILE_AT_LINE (742)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_27967 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_27967 = NULL ;
    while (((operand_27967 = enumerator_27967.nextObject ()))) {
      macroValidPointer (operand_27967) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (true, 0U) ;
      var_cas_prio_as_basic = operand_27967->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (766)) ;
      var_cas_act_as_basic = operand_27967->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (767)) ;
      { const GGS_basic_type _var_28398 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28398.getPtr () != NULL) {
          macroValidPointer (_var_28398.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28398.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28398.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (770)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (771)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (772)) ;
          }
        }
      }
      { const GGS_basic_type _var_28587 = var_cas_act_as_basic ; // CAST instruction
        if (_var_28587.getPtr () != NULL) {
          macroValidPointer (_var_28587.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28587.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28587.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (775)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (776)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (777)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_27967->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (true, 1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (787)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_28803 = var_cas_tl ;
    if (_temp_28803._isBuilt ()) {
      _temp_28803 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (788)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_28930 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_28930 = NULL ;
    while (((operand_28930 = enumerator_28930.nextObject ()))) {
      macroValidPointer (operand_28930) ;
      if (((operand_28930->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_28930->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (798)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_28930->name, var_cas_actual_prio, operand_28930->act COMMA_SOURCE_FILE_AT_LINE (801)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (820)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_29990 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_29990 = NULL ;
      while (((operand_29990 = enumerator_29990.nextObject ()))) {
        macroValidPointer (operand_29990) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (true, 0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (true, 0U) ;
        var_cas_prio_as_basic = operand_29990->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (832)) ;
        const GGS_isr_obj  _temp_30243 = operand_29990->mInfo.isr ;
        if (_temp_30243._isBuilt ()) {
          _temp_30243 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (833)) ;
        }
        { const GGS_basic_type _var_30449 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30449.getPtr () != NULL) {
            macroValidPointer (_var_30449.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30449.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30449.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (836)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (837)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (838)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_29990->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (851)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (853)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_30916 = var_cas_il ;
      if (_temp_30916._isBuilt ()) {
        _temp_30916 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (854)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31070 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31070 = NULL ;
      while (((operand_31070 = enumerator_31070.nextObject ()))) {
        macroValidPointer (operand_31070) ;
        if (((operand_31070->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31070->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (864)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_31070->name, var_cas_actual_prio, operand_31070->act COMMA_SOURCE_FILE_AT_LINE (867)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32467 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32467 = NULL ;
    while (((operand_32467 = enumerator_32467.nextObject ()))) {
      macroValidPointer (operand_32467) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (true, 0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string (true, "") ;
      {
        GGS_task_map::cEnumerator enumerator_32611 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32611 = NULL ;
        while (((operand_32611 = enumerator_32611.nextObject ()))) {
          macroValidPointer (operand_32611) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32611->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (906)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32467->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (908)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_32901 = var_cas_prio_for_task ;
            if (_temp_32901._isBuilt ()) {
              _temp_32901 (HERE)->method_get (_inLexique, operand_32611->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (912)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (916)) ;
            var_cas_rez_comment.appendCstring (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_32611->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (917))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (917))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33217 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33217 = NULL ;
        while (((operand_33217 = enumerator_33217.nextObject ()))) {
          macroValidPointer (operand_33217) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33217->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (921)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32467->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (923)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33505 = var_cas_prio_for_isr ;
            if (_temp_33505._isBuilt ()) {
              _temp_33505 (HERE)->method_get (_inLexique, operand_33217->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (927)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (931)) ;
            var_cas_rez_comment.appendCstring (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_33217->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (932))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (932))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (true, " none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34077 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34077 = NULL ;
        while (((operand_34077 = enumerator_34077.nextObject ()))) {
          macroValidPointer (operand_34077) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34077->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (945)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32467->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (947)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34367 = var_cas_prio_for_task ;
            if (_temp_34367._isBuilt ()) {
              _temp_34367 (HERE)->method_get (_inLexique, operand_34077->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (951)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (953)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34562 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34562 = NULL ;
        while (((operand_34562 = enumerator_34562.nextObject ()))) {
          macroValidPointer (operand_34562) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34562->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (958)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32467->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (960)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34850 = var_cas_prio_for_isr ;
            if (_temp_34850._isBuilt ()) {
              _temp_34850 (HERE)->method_get (_inLexique, operand_34562->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (964)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (966)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_32467->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (971)) ;
      var_cas_comments.modifier_put (_inLexique, operand_32467->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (972)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (true, 1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 1U) ;
  GGS_uint _variant_36667 = var_cas_max_prio ;
  GGS_bool _condition_36667 (_variant_36667._isBuilt (), true) ;
  while (_condition_36667.isBuiltAndTrue ()) {
    _condition_36667 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36667.isBuiltAndTrue ()) {
      if (_variant_36667.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1017)) ;
        _condition_36667 = GGS_bool (true, false) ;
      }else{
        _variant_36667._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (true, 0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36011 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36011 = NULL ;
          while (((operand_36011 = enumerator_36011.nextObject ()))) {
            macroValidPointer (operand_36011) ;
            if (((operand_36011->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36011->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1002)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36160 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36160 = NULL ;
          while (((operand_36160 = enumerator_36160.nextObject ()))) {
            macroValidPointer (operand_36160) ;
            if (((operand_36160->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36160->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1005)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36309 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36309 = NULL ;
          while (((operand_36309 = enumerator_36309.nextObject ()))) {
            macroValidPointer (operand_36309) ;
            if (((operand_36309->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36309->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1008)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1013)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1016)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_36847 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_36847 = NULL ;
    while (((operand_36847 = enumerator_36847.nextObject ()))) {
      macroValidPointer (operand_36847) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_36847->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1029)) ;
      {
        GGS_ident_map::cEnumerator enumerator_36903 (operand_36847->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), true) ;
        const GGS_ident_map::cElement * operand_36903 = NULL ;
        while (((operand_36903 = enumerator_36903.nextObject ()))) {
          macroValidPointer (operand_36903) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36903->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) COMMA_SOURCE_FILE_AT_LINE (1031)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36903->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1032)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37061 (operand_36847->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1035)), true) ;
        const GGS_ident_map::cElement * operand_37061 = NULL ;
        while (((operand_37061 = enumerator_37061.nextObject ()))) {
          macroValidPointer (operand_37061) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37061->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1036)) COMMA_SOURCE_FILE_AT_LINE (1036)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37061->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1037)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37218 (operand_36847->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37218 = NULL ;
        while (((operand_37218 = enumerator_37218.nextObject ()))) {
          macroValidPointer (operand_37218) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37218->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1041)) COMMA_SOURCE_FILE_AT_LINE (1041)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37218->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37377 (operand_36847->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37377 = NULL ;
        while (((operand_37377 = enumerator_37377.nextObject ()))) {
          macroValidPointer (operand_37377) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37377->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) COMMA_SOURCE_FILE_AT_LINE (1046)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37377->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37541 (operand_36847->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_37541 = NULL ;
        while (((operand_37541 = enumerator_37541.nextObject ()))) {
          macroValidPointer (operand_37541) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37541->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) COMMA_SOURCE_FILE_AT_LINE (1051)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37541->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37702 (operand_36847->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055)), true) ;
        const GGS_ident_map::cElement * operand_37702 = NULL ;
        while (((operand_37702 = enumerator_37702.nextObject ()))) {
          macroValidPointer (operand_37702) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37702->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) COMMA_SOURCE_FILE_AT_LINE (1056)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37702->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1057)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string (true, "task") COMMA_SOURCE_FILE_AT_LINE (1080)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (true, false) ;
  {
    GGS_task_map::cEnumerator enumerator_38557 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38557 = NULL ;
    while (((operand_38557 = enumerator_38557.nextObject ()))) {
      macroValidPointer (operand_38557) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_38557->mKey,  operand_38557->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1089)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1093)) COMMA_SOURCE_FILE_AT_LINE (1093)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1094)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1094)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1095)))._operator_concat (GGS_string (true, "_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1095)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1096)))._operator_concat (GGS_string (true, "_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1096)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1097)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1098)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1098)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_ID$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1099)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1099)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string (true, "") ;
      if (((operand_38557->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1106)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1106)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1110)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "event_masks") COMMA_SOURCE_FILE_AT_LINE (1112)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$EXEC_NAME$"),  operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1113)) COMMA_SOURCE_FILE_AT_LINE (1113)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$TASK_EVENT_STRUCT$"),  (operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1114)))._operator_concat (GGS_string (true, "_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_40244 = var_cas_actual_priorities ;
      if (_temp_40244._isBuilt ()) {
        _temp_40244 (HERE)->method_get (_inLexique, operand_38557->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_38557->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1128)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1128)))._operator_isEqual (GGS_string (true, "NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true, true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_38557->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1133)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true, true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_40919 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_40919 = NULL ;
          while (((operand_40919 = enumerator_40919.nextObject ()))) {
            macroValidPointer (operand_40919) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_41063 = var_cas_resources ;
              if (_temp_41063._isBuilt ()) {
                _temp_41063 (HERE)->method_get (_inLexique, operand_40919->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1138)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) ;
              { const GGS_resource_property_obj _var_41458 = var_cas_rez_prop ; // CAST instruction
                if (_var_41458.getPtr () != NULL) {
                  macroValidPointer (_var_41458.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41458.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  ((GGS_string (true, "&"))._operator_concat (operand_40919->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1142))))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1142)) ;
                    var_cas_no_internal_rez_found = GGS_bool (true, false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (1149)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1153)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1154)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38557->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1157)) ;
      { const GGS_basic_type _var_42077 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42077.getPtr () != NULL) {
          macroValidPointer (_var_42077.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42077.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42077.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1159)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1160)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1161)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1162)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38557->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) ;
      { const GGS_task_autostart_obj _var_42618 = var_cas_autostart ; // CAST instruction
        if (_var_42618.getPtr () != NULL) {
          macroValidPointer (_var_42618.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42618.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1168)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42618.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1170)) ;
          }else{
            operand_38557->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1172)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_38557->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_42800 = var_cas_timing_prot ;
      if (_temp_42800._isBuilt ()) {
        _temp_42800 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38557->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1178)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1179)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1180)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1183)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1184)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_43220 = var_cas_app_for_obj ;
          if (_temp_43220._isBuilt ()) {
            _temp_43220 (HERE)->method_get (_inLexique, operand_38557->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1186)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1187)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (true, 0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_43438 = var_cas_apps ;
          if (_temp_43438._isBuilt ()) {
            _temp_43438 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1191)) ;
          }
          { const GGS_app_trusted_obj _var_43582 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1192)) ; // CAST instruction
            if (_var_43582.getPtr () != NULL) {
              macroValidPointer (_var_43582.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43582.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1193)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1195)) COMMA_SOURCE_FILE_AT_LINE (1195)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string (true, "extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1213)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1214)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1214)) COMMA_SOURCE_FILE_AT_LINE (1214)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1215)) COMMA_SOURCE_FILE_AT_LINE (1215)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string (true, "isr") COMMA_SOURCE_FILE_AT_LINE (1237)) ;
  {
    GGS_isr_map::cEnumerator enumerator_45135 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45135 = NULL ;
    while (((operand_45135 = enumerator_45135.nextObject ()))) {
      macroValidPointer (operand_45135) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_45135->mKey,  operand_45135->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1247)) COMMA_SOURCE_FILE_AT_LINE (1247)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1248)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1249)))._operator_concat (GGS_string (true, "_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1249)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1250)))._operator_concat (GGS_string (true, "_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1250)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1251)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1251)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1252)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_HELPER$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1253)))._operator_concat (GGS_string (true, "_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_ID$"),  (operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1255)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1255)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_45970 = var_cas_actual_priorities ;
      if (_temp_45970._isBuilt ()) {
        _temp_45970 (HERE)->method_get (_inLexique, operand_45135->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_46137 = operand_45135->mInfo.isr ;
      if (_temp_46137._isBuilt ()) {
        _temp_46137 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1263)) COMMA_SOURCE_FILE_AT_LINE (1263)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_45135->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_46385 = var_cas_timing_prot ;
      if (_temp_46385._isBuilt ()) {
        _temp_46385 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45135->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1274)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1275)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_46740 = var_cas_app_for_obj ;
          if (_temp_46740._isBuilt ()) {
            _temp_46740 (HERE)->method_get (_inLexique, operand_45135->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1277)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1278)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (true, 0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_46957 = var_cas_apps ;
          if (_temp_46957._isBuilt ()) {
            _temp_46957 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1282)) ;
          }
          { const GGS_app_trusted_obj _var_47101 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1283)) ; // CAST instruction
            if (_var_47101.getPtr () != NULL) {
              macroValidPointer (_var_47101.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47101.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1284)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1286)) COMMA_SOURCE_FILE_AT_LINE (1286)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1301)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1305)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1305)) COMMA_SOURCE_FILE_AT_LINE (1305)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1306)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string (true, "") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string (true, "counter") COMMA_SOURCE_FILE_AT_LINE (1323)) ;
  {
    GGS_counter_map::cEnumerator enumerator_48314 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48314 = NULL ;
    while (((operand_48314 = enumerator_48314.nextObject ()))) {
      macroValidPointer (operand_48314) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_NAME$"),  operand_48314->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1329)) COMMA_SOURCE_FILE_AT_LINE (1329)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (operand_48314->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1330)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1330)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48314->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1333)) ;
      { const GGS_basic_type _var_48866 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_48866.getPtr () != NULL) {
          macroValidPointer (_var_48866.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_48866.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_48866.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1336)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1337)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1338)) ;
      var_cas_counters_cst.appendCstring ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48314->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1339))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_48314->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      { const GGS_basic_type _var_49273 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49273.getPtr () != NULL) {
          macroValidPointer (_var_49273.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49273.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49273.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1343)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1344)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1345)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1346)) ;
      var_cas_counters_cst.appendCstring ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48314->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1347))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_48314->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1349)) ;
      { const GGS_basic_type _var_49671 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49671.getPtr () != NULL) {
          macroValidPointer (_var_49671.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49671.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49671.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1351)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1352)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1353)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1354)) ;
      var_cas_counters_cst.appendCstring ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48314->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1355))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n"
        "\n") ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1361)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_48314->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) ;
        { const GGS_counter_type _var_50295 = var_cas_type ; // CAST instruction
          if (_var_50295.getPtr () != NULL) {
            macroValidPointer (_var_50295.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50295.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50295.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1366)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1367)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1368)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1371)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_50480 = var_cas_app_for_obj ;
          if (_temp_50480._isBuilt ()) {
            _temp_50480 (HERE)->method_get (_inLexique, operand_48314->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1373)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1374)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1382)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string (true, "") ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1390)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string (true, "") ;
    {
      GGS_counter_map::cEnumerator enumerator_51127 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51127 = enumerator_51127.nextObject () ;
      if ((operand_51127 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string (true, "#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCstring ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCstring ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51127 ;
        do{
          macroValidPointer (operand_51127) ;
          var_cas_counter_table.appendCstring ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_51127->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1398))) ;
          var_cas_counter_table.appendCstring ("_counter_desc") ;
          var_cas_counter_ids.appendCstring ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51127->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1399))) ;
          var_cas_counter_ids.appendCstring ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1399))) ;
          var_cas_counter_ids.appendCstring ("\n") ;
          var_cas_counter_ids.appendCstring ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51127->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1400))) ;
          var_cas_counter_ids.appendCstring (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51127->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1400))) ;
          var_cas_counter_ids.appendCstring ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51127 = enumerator_51127.nextObject () ;
          _foreach_loop_51127 = ((operand_51127 != NULL)) ;
          if (_foreach_loop_51127) {
            var_cas_counter_table.appendCstring (",\n") ;
            var_cas_counter_ids.appendCstring ("\n") ;
          }
        }while (_foreach_loop_51127) ;
        var_cas_counter_table.appendCstring ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1408)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1408)) COMMA_SOURCE_FILE_AT_LINE (1408)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1409)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1410)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1411)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string (true, "") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string (true, "resource") COMMA_SOURCE_FILE_AT_LINE (1431)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string (true, "internal_resource") COMMA_SOURCE_FILE_AT_LINE (1432)) ;
  {
    GGS_resource_map::cEnumerator enumerator_52855 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_52855 = NULL ;
    while (((operand_52855 = enumerator_52855.nextObject ()))) {
      macroValidPointer (operand_52855) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_52855->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1437)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_52855->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1440)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_53142 = var_cas_rez_prio ;
      if (_temp_53142._isBuilt ()) {
        _temp_53142 (HERE)->method_get (_inLexique, operand_52855->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1444)) ;
      }
      const GGS_string_map  _temp_53195 = var_cas_rez_comments ;
      if (_temp_53195._isBuilt ()) {
        _temp_53195 (HERE)->method_get (_inLexique, operand_52855->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1445)) ;
      }
      { const GGS_resource_property_obj _var_53699 = var_cas_rez_prop ; // CAST instruction
        if (_var_53699.getPtr () != NULL) {
          macroValidPointer (_var_53699.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_53699.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_53699.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_53699.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string (true, "") ;
            operand_52855->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1459)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_NAME$"),  operand_52855->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1461)) COMMA_SOURCE_FILE_AT_LINE (1461)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE$"),  (operand_52855->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1462)))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1462)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1464)) COMMA_SOURCE_FILE_AT_LINE (1464)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1467)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1468)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_54121 = var_cas_app_for_obj ;
          if (_temp_54121._isBuilt ()) {
            _temp_54121 (HERE)->method_get (_inLexique, operand_52855->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1470)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1471)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string (true, "") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string (true, "") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54436 (var_cas_regular_rez, true) ;
    while (enumerator_54436.hc ()) {
      var_cas_rez_ids.appendCstring ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54436._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1483))) ;
      var_cas_rez_ids.appendCstring ("\n") ;
      var_cas_rez_ids.appendCstring ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54436._key (HERE)) ;
      var_cas_rez_ids.appendCstring (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54436._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54436.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string (true, "res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_54670 (var_cas_regular_rez, true) ;
    if (enumerator_54670 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string (true, "CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_54670 ;
      do{
        var_cas_rez_imp.appendCstring ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_54670._key (HERE)) ;
        var_cas_rez_imp.appendCstring ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_54670.next () ;
        _foreach_loop_54670 = (enumerator_54670 .hc ()) ;
        if (_foreach_loop_54670) {
          var_cas_rez_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_54670) ;
      var_cas_rez_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1502)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1503)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1503)) COMMA_SOURCE_FILE_AT_LINE (1503)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1504)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_prefix_map   /* var_cas_p */,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string (true, "event") COMMA_SOURCE_FILE_AT_LINE (1521)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56457 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56457 = NULL ;
    while (((operand_56457 = enumerator_56457.nextObject ()))) {
      macroValidPointer (operand_56457) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56457->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (true, 0LLU) ;
      {
        GGS_lstringlist::cEnumerator enumerator_56633 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_56633 = NULL ;
        while (((operand_56633 = enumerator_56633.nextObject ()))) {
          macroValidPointer (operand_56633) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_56711 = var_cas_events ;
          if (_temp_56711._isBuilt ()) {
            _temp_56711 (HERE)->method_get (_inLexique, operand_56633->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1545)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1547)) ;
          { const GGS_event_mask_obj _var_57613 = var_cas_mask_obj ; // CAST instruction
            if (_var_57613.getPtr () != NULL) {
              macroValidPointer (_var_57613.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_57613.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_57613.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1550)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1550))))._operator_isEqual (GGS_uint64 (true, 0LLU))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1552)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1552))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1554)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MASK of event "))._operator_concat (operand_56633->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1554))))._operator_concat (GGS_string (true, " conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1555)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_57613.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_56633->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1558)) COMMA_SOURCE_FILE_AT_LINE (1558))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_56633->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1560)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1561)) ;
                }else{
                  var_cas_count = GGS_uint (true, 1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_56633->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1565)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_56633->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1570)) COMMA_SOURCE_FILE_AT_LINE (1570))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_56633->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1572)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_56457->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1574))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_56633->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1575)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_56457->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1578)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58090 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58090 = NULL ;
    while (((operand_58090 = enumerator_58090.nextObject ()))) {
      macroValidPointer (operand_58090) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58090->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1586)) ;
      { const GGS_event_mask_obj _var_58535 = var_cas_evt_mask ; // CAST instruction
        if (_var_58535.getPtr () != NULL) {
          macroValidPointer (_var_58535.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58535.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_58535.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_58090->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1590)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1590)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_58090->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1591)) COMMA_SOURCE_FILE_AT_LINE (1591)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1592)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1592)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1592)) COMMA_SOURCE_FILE_AT_LINE (1592)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCstring ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_58699 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_58699 = NULL ;
    while (((operand_58699 = enumerator_58699.nextObject ()))) {
      macroValidPointer (operand_58699) ;
      var_cas_sort_evts._addAssign_operation (operand_58699->mKey, operand_58699->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_58871 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_58871 = NULL ;
    while (((operand_58871 = enumerator_58871.nextObject ()))) {
      macroValidPointer (operand_58871) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_58871->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1614)) COMMA_SOURCE_FILE_AT_LINE (1614))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_58984 = var_cas_tasks_for_event ;
        if (_temp_58984._isBuilt ()) {
          _temp_58984 (HERE)->method_get (_inLexique, operand_58871->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1616)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (true, 0LLU) ;
        {
          GGS_stringset::cEnumerator enumerator_59053 (var_cas_tasks, true) ;
          while (enumerator_59053.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_59117 = var_cas_task_mask ;
            if (_temp_59117._isBuilt ()) {
              _temp_59117 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59053._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1620)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_59053.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (true, 1LLU) ;
        GGS_uint _variant_59449 = GGS_uint (true, 32U) ;
        GGS_bool _condition_59449 (_variant_59449._isBuilt (), true) ;
        while (_condition_59449.isBuiltAndTrue ()) {
          _condition_59449 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1627))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (true, 0LLU))) ;
          if (_condition_59449.isBuiltAndTrue ()) {
            if (_variant_59449.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1629)) ;
              _condition_59449 = GGS_bool (true, false) ;
            }else{
              _variant_59449._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1628)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1630)))).isBuiltAndTrue ()) {
          operand_58871->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "All event mask bits are already use, event "))._operator_concat (operand_58871->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1631))))._operator_concat (GGS_string (true, " can't be created")) COMMA_SOURCE_FILE_AT_LINE (1632)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_59748 (var_cas_tasks, true) ;
          while (enumerator_59748.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59748._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1637)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59748._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1639)) ;
            enumerator_59748.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_58871->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1643)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1643)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_58871->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1644)) COMMA_SOURCE_FILE_AT_LINE (1644)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1645)) COMMA_SOURCE_FILE_AT_LINE (1645)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCstring ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1724)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string (true, "") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (true, false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1743)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string (true, "POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1745))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_63454 = var_cas_config ;
    if (_temp_63454._isBuilt ()) {
      _temp_63454 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1747)) ;
    }
    { const GGS_basic_type _var_63683 = var_cas_pw ; // CAST instruction
      if (_var_63683.getPtr () != NULL) {
        macroValidPointer (_var_63683.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_63683.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_63683.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1750)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1752)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1753)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_63727 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_63727 = NULL ;
    while (((operand_63727 = enumerator_63727.nextObject ()))) {
      macroValidPointer (operand_63727) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_63940 = GGS_uint (true, 32U) ;
        GGS_bool _condition_63940 (_variant_63940._isBuilt (), true) ;
        while (_condition_63940.isBuiltAndTrue ()) {
          _condition_63940 = (operand_63727->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_63940.isBuiltAndTrue ()) {
            if (_variant_63940.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1763)) ;
              _condition_63940 = GGS_bool (true, false) ;
            }else{
              _variant_63940._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1762)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_63727->fifosize ;
      }
      var_cas_fifo.appendCstring ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1767))) ;
      var_cas_fifo.appendCstring ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1767))) ;
      var_cas_fifo.appendCstring ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1768)) ;
    }
  }
  var_cas_fifo.appendCstring ("\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1774)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1774))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  GGS_uint _variant_64443 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1775)) ;
  GGS_bool _condition_64443 (_variant_64443._isBuilt (), true) ;
  while (_condition_64443.isBuiltAndTrue ()) {
    _condition_64443 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64443.isBuiltAndTrue ()) {
      if (_variant_64443.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1781)) ;
        _condition_64443 = GGS_bool (true, false) ;
      }else{
        _variant_64443._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCstring ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCstring (",") ;
        }
        var_cas_fifo.appendCstring ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1780)) ;
      }
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1785)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1785))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_64598 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64598 = NULL ;
    while (((operand_64598 = enumerator_64598.nextObject ()))) {
      macroValidPointer (operand_64598) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_64811 = GGS_uint (true, 32U) ;
        GGS_bool _condition_64811 (_variant_64811._isBuilt (), true) ;
        while (_condition_64811.isBuiltAndTrue ()) {
          _condition_64811 = (operand_64598->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_64811.isBuiltAndTrue ()) {
            if (_variant_64811.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1793)) ;
              _condition_64811 = GGS_bool (true, false) ;
            }else{
              _variant_64811._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1792)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1794)) ;
      }else{
        var_cas_max_size = operand_64598->fifosize ;
      }
      var_cas_fifo.appendCstring ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1798))) ;
      var_cas_fifo.appendCstring ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1798))) ;
      var_cas_fifo.appendCstring (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCstring (",") ;
      }
      var_cas_fifo.appendCstring ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1801)) ;
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1805)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1806)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1806)) COMMA_SOURCE_FILE_AT_LINE (1806)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*

