//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.2                         *
//                       may 4th, 2009, at 15h37'19"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "proc"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "_descriptor"), GGS_string (true, "") COMMA_SOURCE_FILE_AT_LINE (63)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (73)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (75)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (109)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$TARGET$") COMMA_SOURCE_FILE_AT_LINE (111)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&message_object_of_"), GGS_string (true, "$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (112)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$SIZE$") COMMA_SOURCE_FILE_AT_LINE (113)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (114)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (115)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "dynamic_queue_of_message_"), GGS_string (true, "$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (124)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error_notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (126)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "tpl_set_flag_"), GGS_string (true, "$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (128)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&error_notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (130)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "buffer_of_message_"), GGS_string (true, "$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (132)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "filter_of_message_"), GGS_string (true, "$FILTER$") COMMA_SOURCE_FILE_AT_LINE (134)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&filter_of_message_"), GGS_string (true, "$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (136)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (138)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)))._operator_isEqual (GGS_string (true, "extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
  { const GGS_basic_type _var_6946 = var_cas_startuphook ; // CAST instruction
    if (_var_6946.getPtr () != NULL) {
      macroValidPointer (_var_6946.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_6946.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_6946.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
  { const GGS_basic_type _var_7191 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7191.getPtr () != NULL) {
      macroValidPointer (_var_7191.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7191.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7191.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (174))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
  { const GGS_basic_type _var_7421 = var_cas_errorhook ; // CAST instruction
    if (_var_7421.getPtr () != NULL) {
      macroValidPointer (_var_7421.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7421.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7421.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
  { const GGS_basic_type _var_7662 = var_cas_pretaskhook ; // CAST instruction
    if (_var_7662.getPtr () != NULL) {
      macroValidPointer (_var_7662.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7662.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7662.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (188))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
  { const GGS_basic_type _var_7908 = var_cas_posttaskhook ; // CAST instruction
    if (_var_7908.getPtr () != NULL) {
      macroValidPointer (_var_7908.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7908.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7908.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (195))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
  { const GGS_basic_type _var_8167 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8167.getPtr () != NULL) {
      macroValidPointer (_var_8167.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8167.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8167.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (202))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
  { const GGS_basic_type _var_8441 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8441.getPtr () != NULL) {
      macroValidPointer (_var_8441.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8441.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8441.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (209))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
  { const GGS_basic_type _var_8700 = var_cas_useresscheduler ; // CAST instruction
    if (_var_8700.getPtr () != NULL) {
      macroValidPointer (_var_8700.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8700.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8700.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (216))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_8889 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ; // CAST instruction
    if (_var_8889.getPtr () != NULL) {
      macroValidPointer (_var_8889.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8889.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8889.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (222))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (227)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (228))) ;
    var_cas_flags.appendCstring ("\"\n") ;
  }else{
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (233)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_9573 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (238)) ; // CAST instruction
      if (_var_9573.getPtr () != NULL) {
        macroValidPointer (_var_9573.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9573.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9573.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (240))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_9754 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ; // CAST instruction
      if (_var_9754.getPtr () != NULL) {
        macroValidPointer (_var_9754.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9754.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9754.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (true, false) ;
    {
      GGS_task_map::cEnumerator enumerator_10063 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10063 = NULL ;
      while (((operand_10063 = enumerator_10063.nextObject ()))) {
        macroValidPointer (operand_10063) ;
        { const GGS_timing_prot _var_10261 = operand_10063->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ; // CAST instruction
          if (_var_10261.getPtr () != NULL) {
            macroValidPointer (_var_10261.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10261.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10312 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10312 = NULL ;
      while (((operand_10312 = enumerator_10312.nextObject ()))) {
        macroValidPointer (operand_10312) ;
        { const GGS_timing_prot _var_10507 = operand_10312->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ; // CAST instruction
          if (_var_10507.getPtr () != NULL) {
            macroValidPointer (_var_10507.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10507.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCstring ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCstring ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_10778 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
  if (_temp_10778._isBuilt ()) {
    _temp_10778 (HERE)->method_generate_c (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (278)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  {
    GGS_ident_map::cEnumerator enumerator_10854 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (282)), true) ;
    const GGS_ident_map::cElement * operand_10854 = NULL ;
    while (((operand_10854 = enumerator_10854.nextObject ()))) {
      macroValidPointer (operand_10854) ;
      { const GGS_basic_type _var_11094 = operand_10854->mInfo.value ; // CAST instruction
        if (_var_11094.getPtr () != NULL) {
          macroValidPointer (_var_11094.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11094.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11094.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))).isBuiltAndTrue ()) {
              var_cas_flags.appendCstring ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_10854->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (286))) ;
              var_cas_flags.appendCstring ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (294)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "getTrampolineTargetName"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getTrampolineTargetName (C_Compiler & _inLexique,
                                GGS_string & var_cas_trampolineTarget COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getTrampolineTargetName at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (304))) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "arm"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "avr"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "c166"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "s12x") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "posix"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "ppc"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "PPC") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "v850e"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (316)) ;
    var_cas_trampolineTarget = GGS_string (true, "") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getTrampolineTargetName\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string (true, "") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true, true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12577 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12577 = NULL ;
    while (((operand_12577 = enumerator_12577.nextObject ()))) {
      macroValidPointer (operand_12577) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCstring (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_12577->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (329))) ;
      var_cas_first = GGS_bool (true, false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (332)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string (true, "Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (343)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string (true, "Makefile") COMMA_SOURCE_FILE_AT_LINE (344)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (345)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (346)),  GGS_string (true, "$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (346)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)),  GGS_string (true, "$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (348)),  GGS_string (true, "$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)),  GGS_string (true, "$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (349)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string (true, "trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (354)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (354)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (354)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (355)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (358)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (358)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string (true, "..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (360)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (361)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (true, ".oil")) COMMA_SOURCE_FILE_AT_LINE (363)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (365)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string (true, "true") ;
  }else{
    var_cas_autosarStr = GGS_string (true, "false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_14605 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
  if (_temp_14605._isBuilt ()) {
    _temp_14605 (HERE)->method_generate_make (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (371)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (_inLexique,  var_cas_makefileStr,  GGS_string (true, "$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (373)) ;
  const GGS_string _temp_14707 = var_cas_makefileStr ;
  if (_temp_14707._isBuilt ()) {
    _temp_14707 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string (true, "/Makefile")) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "Make-rules") COMMA_SOURCE_FILE_AT_LINE (379)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string (true, "/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  ::routine_getTrampolineTargetName (_inLexique,  var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (382)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (383))) COMMA_SOURCE_FILE_AT_LINE (383)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (384)) ;
  { const GGS_basic_type _var_15428 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ; // CAST instruction
    if (_var_15428.getPtr () != NULL) {
      macroValidPointer (_var_15428.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_15428.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_15428.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_15309 = var_cas_b ;
        if (_temp_15309._isBuilt ()) {
          _temp_15309 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (389)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (390)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  GGS_string (true, "false") COMMA_SOURCE_FILE_AT_LINE (392)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (397))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string (true, "GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string (true, "#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (404)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (405)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_15908 = var_cas_makerulesStr ;
    if (_temp_15908._isBuilt ()) {
      _temp_15908 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (406)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (423)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (424)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 31U) COMMA_SOURCE_FILE_AT_LINE (425)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "s32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (438)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (449)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 16U) COMMA_SOURCE_FILE_AT_LINE (450)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 32U) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (464)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 8LLU) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 16LLU) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 32LLU) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (490)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (true, 0LLU) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (511)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (511))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (511)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (511)) COMMA_SOURCE_FILE_AT_LINE (511)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string (true, "Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (513)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (514)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (517)),  GGS_string (true, "Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (517)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (519)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_18645 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_18645 = NULL ;
    while (((operand_18645 = enumerator_18645.nextObject ()))) {
      macroValidPointer (operand_18645) ;
      { const GGS_basic_type _var_18916 = operand_18645->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (525)) ; // CAST instruction
        if (_var_18916.getPtr () != NULL) {
          macroValidPointer (_var_18916.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_18916.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_18916.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (526)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (526)) ;
            }
          }else{
            operand_18645->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "Internal error, task "))._operator_concat (operand_18645->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (527))))._operator_concat (GGS_string (true, " has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (528)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (530)),  GGS_string (true, "Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (530)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (532)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19291 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19291 = NULL ;
    while (((operand_19291 = enumerator_19291.nextObject ()))) {
      macroValidPointer (operand_19291) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_19291->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (539)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (539)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (541)),  GGS_string (true, "Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (541)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (542)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (545)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (545)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (547)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (549)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (552)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (552)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (554)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (559)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (559)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (563)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (566)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (570)) ;
  if (((var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (574)))._operator_strictSup (var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (574)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (575)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (575)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (577)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (577)) ;
  }
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (581)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (584)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (584))._add_operation (_inLexique, GGS_uint64 (true, 1LLU) COMMA_SOURCE_FILE_AT_LINE (584)),  GGS_string (true, "too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (584)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (586)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_21542 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_21542 = NULL ;
    while (((operand_21542 = enumerator_21542.nextObject ()))) {
      macroValidPointer (operand_21542) ;
      { const GGS_app_trusted_obj _var_21704 = operand_21542->mInfo.app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (592)) ; // CAST instruction
        if (_var_21704.getPtr () != NULL) {
          macroValidPointer (_var_21704.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_21704.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_21704.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_21621 (var_cas_t.reader_trusted_fcts (_inLexique COMMA_SOURCE_FILE_AT_LINE (594)), true) ;
              while (enumerator_21621.hc ()) {
                var_cas_tfs._addAssign_operation (enumerator_21621._key (HERE)) ;
                enumerator_21621.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_tfs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (600)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (600)),  GGS_string (true, "Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (600)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (601)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string (true, "too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (604)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (606)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (616))._add_operation (_inLexique, GGS_uint (true, 4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (616)) COMMA_SOURCE_FILE_AT_LINE (616)) COMMA_SOURCE_FILE_AT_LINE (616)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (618)) COMMA_SOURCE_FILE_AT_LINE (618)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string (true, "alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (638)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string (true, "alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (639)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string (true, "alarm_callback") COMMA_SOURCE_FILE_AT_LINE (640)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string (true, "alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (641)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_23268 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_23268 = NULL ;
    while (((operand_23268 = enumerator_23268.nextObject ()))) {
      macroValidPointer (operand_23268) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_23268->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (648)) ;
      { const GGS_action_obj _var_24344 = var_cas_alarm_action ; // CAST instruction
        if (_var_24344.getPtr () != NULL) {
          macroValidPointer (_var_24344.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_24344.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_24344.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (652)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (652)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (652)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (653)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (653)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (653)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_24344.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_24344.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (656)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (656)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (656)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_24344.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_24344.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (659)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (659)))._operator_concat (GGS_string (true, "_callback")) COMMA_SOURCE_FILE_AT_LINE (659)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_24344.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_24344.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (662)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (662)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (662)) ;
          }else{
            operand_23268->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown action found") COMMA_SOURCE_FILE_AT_LINE (664)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_23268->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (668)) ;
      { const GGS_autostart_obj _var_25267 = var_cas_autostart ; // CAST instruction
        if (_var_25267.getPtr () != NULL) {
          macroValidPointer (_var_25267.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_25267.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (671)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (672)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (673)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_25267.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (675)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (676)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (677)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_25267.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_25267.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (679)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (680)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (680)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (680)) COMMA_SOURCE_FILE_AT_LINE (680)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (681)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (681)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (681)) COMMA_SOURCE_FILE_AT_LINE (681)) ;
          }else{
            operand_23268->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (683)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_23268->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (687)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_NAME$"),  operand_23268->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (688)) COMMA_SOURCE_FILE_AT_LINE (688)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM$"),  (operand_23268->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (689)))._operator_concat (GGS_string (true, "_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (690)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (690)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (693)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (694)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_25799 = var_cas_app_for_obj ;
          if (_temp_25799._isBuilt ()) {
            _temp_25799 (HERE)->method_get (_inLexique, operand_23268->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (696)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (697)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string (true, "") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string (true, "") ;
  {
    GGS_stringset::cEnumerator enumerator_26096 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (707)), true) ;
    if (enumerator_26096 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string (true, "CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCstring ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_26096 ;
      do{
        var_cas_alarm_imp.appendCstring ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_26096._key (HERE)) ;
        var_cas_alarm_imp.appendCstring ("_alarm_desc") ;
        var_cas_alarm_ids.appendCstring ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26096._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (713))) ;
        var_cas_alarm_ids.appendCstring ("\n") ;
        var_cas_alarm_ids.appendCstring ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26096._key (HERE)) ;
        var_cas_alarm_ids.appendCstring (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_26096._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_26096.next () ;
        _foreach_loop_26096 = (enumerator_26096 .hc ()) ;
        if (_foreach_loop_26096) {
          var_cas_alarm_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_26096) ;
      var_cas_alarm_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (723)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (724)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (725)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (725)) COMMA_SOURCE_FILE_AT_LINE (725)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_27344 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_27344 = NULL ;
    while (((operand_27344 = enumerator_27344.nextObject ()))) {
      macroValidPointer (operand_27344) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (true, 0U) ;
      var_cas_prio_as_basic = operand_27344->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (749)) ;
      var_cas_act_as_basic = operand_27344->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (750)) ;
      { const GGS_basic_type _var_27775 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_27775.getPtr () != NULL) {
          macroValidPointer (_var_27775.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_27775.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_27775.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (753)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (754)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (755)) ;
          }
        }
      }
      { const GGS_basic_type _var_27964 = var_cas_act_as_basic ; // CAST instruction
        if (_var_27964.getPtr () != NULL) {
          macroValidPointer (_var_27964.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_27964.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_27964.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (758)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (759)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (760)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_27344->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (true, 1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (770)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_28180 = var_cas_tl ;
    if (_temp_28180._isBuilt ()) {
      _temp_28180 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (771)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_28307 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_28307 = NULL ;
    while (((operand_28307 = enumerator_28307.nextObject ()))) {
      macroValidPointer (operand_28307) ;
      if (((operand_28307->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_28307->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (781)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_28307->name, var_cas_actual_prio, operand_28307->act COMMA_SOURCE_FILE_AT_LINE (784)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (803)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_29367 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_29367 = NULL ;
      while (((operand_29367 = enumerator_29367.nextObject ()))) {
        macroValidPointer (operand_29367) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (true, 0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (true, 0U) ;
        var_cas_prio_as_basic = operand_29367->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (815)) ;
        const GGS_isr_obj  _temp_29620 = operand_29367->mInfo.isr ;
        if (_temp_29620._isBuilt ()) {
          _temp_29620 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (816)) ;
        }
        { const GGS_basic_type _var_29826 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_29826.getPtr () != NULL) {
            macroValidPointer (_var_29826.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_29826.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_29826.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (819)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (820)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (821)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_29367->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (834)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (836)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_30293 = var_cas_il ;
      if (_temp_30293._isBuilt ()) {
        _temp_30293 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (837)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_30447 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_30447 = NULL ;
      while (((operand_30447 = enumerator_30447.nextObject ()))) {
        macroValidPointer (operand_30447) ;
        if (((operand_30447->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_30447->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (847)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_30447->name, var_cas_actual_prio, operand_30447->act COMMA_SOURCE_FILE_AT_LINE (850)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_31844 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_31844 = NULL ;
    while (((operand_31844 = enumerator_31844.nextObject ()))) {
      macroValidPointer (operand_31844) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (true, 0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string (true, "") ;
      {
        GGS_task_map::cEnumerator enumerator_31988 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_31988 = NULL ;
        while (((operand_31988 = enumerator_31988.nextObject ()))) {
          macroValidPointer (operand_31988) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_31988->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_31844->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (891)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_32278 = var_cas_prio_for_task ;
            if (_temp_32278._isBuilt ()) {
              _temp_32278 (HERE)->method_get (_inLexique, operand_31988->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (895)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (899)) ;
            var_cas_rez_comment.appendCstring (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_31988->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (900))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (900))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_32594 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_32594 = NULL ;
        while (((operand_32594 = enumerator_32594.nextObject ()))) {
          macroValidPointer (operand_32594) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32594->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (904)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_31844->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (906)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_32882 = var_cas_prio_for_isr ;
            if (_temp_32882._isBuilt ()) {
              _temp_32882 (HERE)->method_get (_inLexique, operand_32594->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (910)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (914)) ;
            var_cas_rez_comment.appendCstring (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_32594->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (915))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (915))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (true, " none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_33454 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33454 = NULL ;
        while (((operand_33454 = enumerator_33454.nextObject ()))) {
          macroValidPointer (operand_33454) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33454->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (928)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_31844->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (930)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33744 = var_cas_prio_for_task ;
            if (_temp_33744._isBuilt ()) {
              _temp_33744 (HERE)->method_get (_inLexique, operand_33454->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (934)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (936)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33939 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33939 = NULL ;
        while (((operand_33939 = enumerator_33939.nextObject ()))) {
          macroValidPointer (operand_33939) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33939->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (941)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_31844->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (943)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34227 = var_cas_prio_for_isr ;
            if (_temp_34227._isBuilt ()) {
              _temp_34227 (HERE)->method_get (_inLexique, operand_33939->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (947)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (949)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_31844->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (954)) ;
      var_cas_comments.modifier_put (_inLexique, operand_31844->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (955)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (true, 1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 1U) ;
  GGS_uint _variant_36044 = var_cas_max_prio ;
  GGS_bool _condition_36044 (_variant_36044._isBuilt (), true) ;
  while (_condition_36044.isBuiltAndTrue ()) {
    _condition_36044 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36044.isBuiltAndTrue ()) {
      if (_variant_36044.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1000)) ;
        _condition_36044 = GGS_bool (true, false) ;
      }else{
        _variant_36044._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (true, 0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_35388 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_35388 = NULL ;
          while (((operand_35388 = enumerator_35388.nextObject ()))) {
            macroValidPointer (operand_35388) ;
            if (((operand_35388->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_35388->mInfo.act COMMA_SOURCE_FILE_AT_LINE (985)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_35537 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_35537 = NULL ;
          while (((operand_35537 = enumerator_35537.nextObject ()))) {
            macroValidPointer (operand_35537) ;
            if (((operand_35537->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_35537->mInfo.act COMMA_SOURCE_FILE_AT_LINE (988)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_35686 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_35686 = NULL ;
          while (((operand_35686 = enumerator_35686.nextObject ()))) {
            macroValidPointer (operand_35686) ;
            if (((operand_35686->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_35686->mInfo.act COMMA_SOURCE_FILE_AT_LINE (991)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (996)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (999)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_36224 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_36224 = NULL ;
    while (((operand_36224 = enumerator_36224.nextObject ()))) {
      macroValidPointer (operand_36224) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_36224->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      {
        GGS_ident_map::cEnumerator enumerator_36280 (operand_36224->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1013)), true) ;
        const GGS_ident_map::cElement * operand_36280 = NULL ;
        while (((operand_36280 = enumerator_36280.nextObject ()))) {
          macroValidPointer (operand_36280) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36280->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1014)) COMMA_SOURCE_FILE_AT_LINE (1014)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36280->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1015)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36438 (operand_36224->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1018)), true) ;
        const GGS_ident_map::cElement * operand_36438 = NULL ;
        while (((operand_36438 = enumerator_36438.nextObject ()))) {
          macroValidPointer (operand_36438) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36438->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) COMMA_SOURCE_FILE_AT_LINE (1019)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36438->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1020)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36595 (operand_36224->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1023)), true) ;
        const GGS_ident_map::cElement * operand_36595 = NULL ;
        while (((operand_36595 = enumerator_36595.nextObject ()))) {
          macroValidPointer (operand_36595) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36595->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1024)) COMMA_SOURCE_FILE_AT_LINE (1024)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36595->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1025)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36754 (operand_36224->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1028)), true) ;
        const GGS_ident_map::cElement * operand_36754 = NULL ;
        while (((operand_36754 = enumerator_36754.nextObject ()))) {
          macroValidPointer (operand_36754) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36754->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1029)) COMMA_SOURCE_FILE_AT_LINE (1029)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36754->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1030)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36918 (operand_36224->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1033)), true) ;
        const GGS_ident_map::cElement * operand_36918 = NULL ;
        while (((operand_36918 = enumerator_36918.nextObject ()))) {
          macroValidPointer (operand_36918) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36918->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1034)) COMMA_SOURCE_FILE_AT_LINE (1034)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36918->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1035)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37079 (operand_36224->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1038)), true) ;
        const GGS_ident_map::cElement * operand_37079 = NULL ;
        while (((operand_37079 = enumerator_37079.nextObject ()))) {
          macroValidPointer (operand_37079) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37079->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) COMMA_SOURCE_FILE_AT_LINE (1039)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37079->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1040)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string (true, "task") COMMA_SOURCE_FILE_AT_LINE (1063)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (true, false) ;
  {
    GGS_task_map::cEnumerator enumerator_37934 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_37934 = NULL ;
    while (((operand_37934 = enumerator_37934.nextObject ()))) {
      macroValidPointer (operand_37934) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_37934->mKey,  operand_37934->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1072)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1076)) COMMA_SOURCE_FILE_AT_LINE (1076)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1077)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1077)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1078)))._operator_concat (GGS_string (true, "_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1078)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1079)))._operator_concat (GGS_string (true, "_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1080)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1080)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1081)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1081)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_ID$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1082)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1082)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string (true, "") ;
      if (((operand_37934->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1089)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1089)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1091)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1093)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "event_masks") COMMA_SOURCE_FILE_AT_LINE (1095)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$EXEC_NAME$"),  operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1096)) COMMA_SOURCE_FILE_AT_LINE (1096)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$TASK_EVENT_STRUCT$"),  (operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1097)))._operator_concat (GGS_string (true, "_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_39621 = var_cas_actual_priorities ;
      if (_temp_39621._isBuilt ()) {
        _temp_39621 (HERE)->method_get (_inLexique, operand_37934->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_37934->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1111)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1111)))._operator_isEqual (GGS_string (true, "NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true, true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1113)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_37934->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1116)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true, true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_40296 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_40296 = NULL ;
          while (((operand_40296 = enumerator_40296.nextObject ()))) {
            macroValidPointer (operand_40296) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_40440 = var_cas_resources ;
              if (_temp_40440._isBuilt ()) {
                _temp_40440 (HERE)->method_get (_inLexique, operand_40296->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1121)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1122)) ;
              { const GGS_resource_property_obj _var_40835 = var_cas_rez_prop ; // CAST instruction
                if (_var_40835.getPtr () != NULL) {
                  macroValidPointer (_var_40835.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_40835.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  ((GGS_string (true, "&"))._operator_concat (operand_40296->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1125))))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1125)) ;
                    var_cas_no_internal_rez_found = GGS_bool (true, false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (1132)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1137)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_37934->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      { const GGS_basic_type _var_41454 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_41454.getPtr () != NULL) {
          macroValidPointer (_var_41454.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_41454.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_41454.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1142)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1142)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1143)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1144)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1145)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_37934->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1148)) ;
      { const GGS_task_autostart_obj _var_41995 = var_cas_autostart ; // CAST instruction
        if (_var_41995.getPtr () != NULL) {
          macroValidPointer (_var_41995.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_41995.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1151)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_41995.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1153)) ;
          }else{
            operand_37934->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1155)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_37934->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1158)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_42177 = var_cas_timing_prot ;
      if (_temp_42177._isBuilt ()) {
        _temp_42177 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_37934->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1161)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1161)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1162)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1166)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1167)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_42597 = var_cas_app_for_obj ;
          if (_temp_42597._isBuilt ()) {
            _temp_42597 (HERE)->method_get (_inLexique, operand_37934->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1169)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1170)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (true, 0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_42815 = var_cas_apps ;
          if (_temp_42815._isBuilt ()) {
            _temp_42815 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1174)) ;
          }
          { const GGS_app_trusted_obj _var_42959 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ; // CAST instruction
            if (_var_42959.getPtr () != NULL) {
              macroValidPointer (_var_42959.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_42959.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1176)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1178)) COMMA_SOURCE_FILE_AT_LINE (1178)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string (true, "extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1196)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1197)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) COMMA_SOURCE_FILE_AT_LINE (1197)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) COMMA_SOURCE_FILE_AT_LINE (1198)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string (true, "isr") COMMA_SOURCE_FILE_AT_LINE (1220)) ;
  {
    GGS_isr_map::cEnumerator enumerator_44512 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_44512 = NULL ;
    while (((operand_44512 = enumerator_44512.nextObject ()))) {
      macroValidPointer (operand_44512) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_44512->mKey,  operand_44512->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1226)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1230)) COMMA_SOURCE_FILE_AT_LINE (1230)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1231)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1231)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1232)))._operator_concat (GGS_string (true, "_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1232)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1233)))._operator_concat (GGS_string (true, "_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1233)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1234)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1235)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1235)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_HELPER$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1236)))._operator_concat (GGS_string (true, "_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1236)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_ID$"),  (operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1238)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1238)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_45347 = var_cas_actual_priorities ;
      if (_temp_45347._isBuilt ()) {
        _temp_45347 (HERE)->method_get (_inLexique, operand_44512->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1241)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1242)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_45514 = operand_44512->mInfo.isr ;
      if (_temp_45514._isBuilt ()) {
        _temp_45514 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1245)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1246)) COMMA_SOURCE_FILE_AT_LINE (1246)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_44512->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1249)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_45762 = var_cas_timing_prot ;
      if (_temp_45762._isBuilt ()) {
        _temp_45762 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_44512->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1252)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1254)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1257)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1258)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_46117 = var_cas_app_for_obj ;
          if (_temp_46117._isBuilt ()) {
            _temp_46117 (HERE)->method_get (_inLexique, operand_44512->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1260)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (true, 0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_46334 = var_cas_apps ;
          if (_temp_46334._isBuilt ()) {
            _temp_46334 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1265)) ;
          }
          { const GGS_app_trusted_obj _var_46478 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1266)) ; // CAST instruction
            if (_var_46478.getPtr () != NULL) {
              macroValidPointer (_var_46478.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_46478.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1267)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269)) COMMA_SOURCE_FILE_AT_LINE (1269)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1284)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1288)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1288)) COMMA_SOURCE_FILE_AT_LINE (1288)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1289)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string (true, "") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string (true, "counter") COMMA_SOURCE_FILE_AT_LINE (1306)) ;
  {
    GGS_counter_map::cEnumerator enumerator_47691 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_47691 = NULL ;
    while (((operand_47691 = enumerator_47691.nextObject ()))) {
      macroValidPointer (operand_47691) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_NAME$"),  operand_47691->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1312)) COMMA_SOURCE_FILE_AT_LINE (1312)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (operand_47691->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1313)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1313)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_47691->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1316)) ;
      { const GGS_basic_type _var_48243 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_48243.getPtr () != NULL) {
          macroValidPointer (_var_48243.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_48243.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_48243.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1318)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1318)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1319)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1320)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1321)) ;
      var_cas_counters_cst.appendCstring ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_47691->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1322))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_47691->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1324)) ;
      { const GGS_basic_type _var_48650 = var_cas_max_as_basic ; // CAST instruction
        if (_var_48650.getPtr () != NULL) {
          macroValidPointer (_var_48650.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_48650.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_48650.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1327)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1328)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1329)) ;
      var_cas_counters_cst.appendCstring ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_47691->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1330))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_47691->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1332)) ;
      { const GGS_basic_type _var_49048 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49048.getPtr () != NULL) {
          macroValidPointer (_var_49048.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49048.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49048.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1334)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1334)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1336)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1337)) ;
      var_cas_counters_cst.appendCstring ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_47691->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1338))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n"
        "\n") ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1344)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_47691->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1345)) ;
        { const GGS_counter_type _var_49672 = var_cas_type ; // CAST instruction
          if (_var_49672.getPtr () != NULL) {
            macroValidPointer (_var_49672.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_49672.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_49672.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1350)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1351)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1354)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_49857 = var_cas_app_for_obj ;
          if (_temp_49857._isBuilt ()) {
            _temp_49857 (HERE)->method_get (_inLexique, operand_47691->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1356)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1357)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1365)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string (true, "") ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1373)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string (true, "") ;
    {
      GGS_counter_map::cEnumerator enumerator_50504 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_50504 = enumerator_50504.nextObject () ;
      if ((operand_50504 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string (true, "#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCstring ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCstring ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_50504 ;
        do{
          macroValidPointer (operand_50504) ;
          var_cas_counter_table.appendCstring ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_50504->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1381))) ;
          var_cas_counter_table.appendCstring ("_counter_desc") ;
          var_cas_counter_ids.appendCstring ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_50504->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1382))) ;
          var_cas_counter_ids.appendCstring ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1382))) ;
          var_cas_counter_ids.appendCstring ("\n") ;
          var_cas_counter_ids.appendCstring ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_50504->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1383))) ;
          var_cas_counter_ids.appendCstring (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_50504->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1383))) ;
          var_cas_counter_ids.appendCstring ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_50504 = enumerator_50504.nextObject () ;
          _foreach_loop_50504 = ((operand_50504 != NULL)) ;
          if (_foreach_loop_50504) {
            var_cas_counter_table.appendCstring (",\n") ;
            var_cas_counter_ids.appendCstring ("\n") ;
          }
        }while (_foreach_loop_50504) ;
        var_cas_counter_table.appendCstring ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1391)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1391)) COMMA_SOURCE_FILE_AT_LINE (1391)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1392)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1393)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1394)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string (true, "") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string (true, "resource") COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string (true, "internal_resource") COMMA_SOURCE_FILE_AT_LINE (1415)) ;
  {
    GGS_resource_map::cEnumerator enumerator_52232 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_52232 = NULL ;
    while (((operand_52232 = enumerator_52232.nextObject ()))) {
      macroValidPointer (operand_52232) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_52232->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1420)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_52232->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1423)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_52519 = var_cas_rez_prio ;
      if (_temp_52519._isBuilt ()) {
        _temp_52519 (HERE)->method_get (_inLexique, operand_52232->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1427)) ;
      }
      const GGS_string_map  _temp_52572 = var_cas_rez_comments ;
      if (_temp_52572._isBuilt ()) {
        _temp_52572 (HERE)->method_get (_inLexique, operand_52232->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1428)) ;
      }
      { const GGS_resource_property_obj _var_53076 = var_cas_rez_prop ; // CAST instruction
        if (_var_53076.getPtr () != NULL) {
          macroValidPointer (_var_53076.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_53076.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_53076.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_53076.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string (true, "") ;
            operand_52232->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1442)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_NAME$"),  operand_52232->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1444)) COMMA_SOURCE_FILE_AT_LINE (1444)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE$"),  (operand_52232->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1445)))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1445)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1447)) COMMA_SOURCE_FILE_AT_LINE (1447)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1448)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1450)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1451)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_53498 = var_cas_app_for_obj ;
          if (_temp_53498._isBuilt ()) {
            _temp_53498 (HERE)->method_get (_inLexique, operand_52232->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1453)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1454)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string (true, "") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string (true, "") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_53813 (var_cas_regular_rez, true) ;
    while (enumerator_53813.hc ()) {
      var_cas_rez_ids.appendCstring ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_53813._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1466))) ;
      var_cas_rez_ids.appendCstring ("\n") ;
      var_cas_rez_ids.appendCstring ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_53813._key (HERE)) ;
      var_cas_rez_ids.appendCstring (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_53813._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_53813.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string (true, "res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_54047 (var_cas_regular_rez, true) ;
    if (enumerator_54047 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string (true, "CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_54047 ;
      do{
        var_cas_rez_imp.appendCstring ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_54047._key (HERE)) ;
        var_cas_rez_imp.appendCstring ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_54047.next () ;
        _foreach_loop_54047 = (enumerator_54047 .hc ()) ;
        if (_foreach_loop_54047) {
          var_cas_rez_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_54047) ;
      var_cas_rez_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1485)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1486)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1486)) COMMA_SOURCE_FILE_AT_LINE (1486)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1487)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_prefix_map   /* var_cas_p */,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string (true, "event") COMMA_SOURCE_FILE_AT_LINE (1504)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_55834 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_55834 = NULL ;
    while (((operand_55834 = enumerator_55834.nextObject ()))) {
      macroValidPointer (operand_55834) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_55834->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1524)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (true, 0LLU) ;
      {
        GGS_lstringlist::cEnumerator enumerator_56010 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_56010 = NULL ;
        while (((operand_56010 = enumerator_56010.nextObject ()))) {
          macroValidPointer (operand_56010) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_56088 = var_cas_events ;
          if (_temp_56088._isBuilt ()) {
            _temp_56088 (HERE)->method_get (_inLexique, operand_56010->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1528)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1530)) ;
          { const GGS_event_mask_obj _var_56990 = var_cas_mask_obj ; // CAST instruction
            if (_var_56990.getPtr () != NULL) {
              macroValidPointer (_var_56990.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_56990.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_56990.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1533)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1533))))._operator_isEqual (GGS_uint64 (true, 0LLU))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1535)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1535))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1537)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MASK of event "))._operator_concat (operand_56010->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1537))))._operator_concat (GGS_string (true, " conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1538)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_56990.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_56010->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) COMMA_SOURCE_FILE_AT_LINE (1541))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_56010->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1543)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1544)) ;
                }else{
                  var_cas_count = GGS_uint (true, 1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_56010->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1548)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_56010->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) COMMA_SOURCE_FILE_AT_LINE (1553))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_56010->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1555)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_55834->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1557))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_56010->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1558)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_55834->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1561)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_57467 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_57467 = NULL ;
    while (((operand_57467 = enumerator_57467.nextObject ()))) {
      macroValidPointer (operand_57467) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_57467->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1569)) ;
      { const GGS_event_mask_obj _var_57912 = var_cas_evt_mask ; // CAST instruction
        if (_var_57912.getPtr () != NULL) {
          macroValidPointer (_var_57912.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_57912.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_57912.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_57467->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1573)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1573)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_57467->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1574)) COMMA_SOURCE_FILE_AT_LINE (1574)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)) COMMA_SOURCE_FILE_AT_LINE (1575)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCstring ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_58076 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_58076 = NULL ;
    while (((operand_58076 = enumerator_58076.nextObject ()))) {
      macroValidPointer (operand_58076) ;
      var_cas_sort_evts._addAssign_operation (operand_58076->mKey, operand_58076->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_58248 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_58248 = NULL ;
    while (((operand_58248 = enumerator_58248.nextObject ()))) {
      macroValidPointer (operand_58248) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_58248->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597)) COMMA_SOURCE_FILE_AT_LINE (1597))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_58361 = var_cas_tasks_for_event ;
        if (_temp_58361._isBuilt ()) {
          _temp_58361 (HERE)->method_get (_inLexique, operand_58248->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1599)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (true, 0LLU) ;
        {
          GGS_stringset::cEnumerator enumerator_58430 (var_cas_tasks, true) ;
          while (enumerator_58430.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_58494 = var_cas_task_mask ;
            if (_temp_58494._isBuilt ()) {
              _temp_58494 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_58430._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1603)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_58430.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (true, 1LLU) ;
        GGS_uint _variant_58826 = GGS_uint (true, 32U) ;
        GGS_bool _condition_58826 (_variant_58826._isBuilt (), true) ;
        while (_condition_58826.isBuiltAndTrue ()) {
          _condition_58826 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1610))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (true, 0LLU))) ;
          if (_condition_58826.isBuiltAndTrue ()) {
            if (_variant_58826.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1612)) ;
              _condition_58826 = GGS_bool (true, false) ;
            }else{
              _variant_58826._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1611)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1613)))).isBuiltAndTrue ()) {
          operand_58248->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "All event mask bits are already use, event "))._operator_concat (operand_58248->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1614))))._operator_concat (GGS_string (true, " can't be created")) COMMA_SOURCE_FILE_AT_LINE (1615)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_59125 (var_cas_tasks, true) ;
          while (enumerator_59125.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59125._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1620)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59125._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1622)) ;
            enumerator_59125.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_58248->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1626)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1626)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_58248->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1627)) COMMA_SOURCE_FILE_AT_LINE (1627)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1628)) COMMA_SOURCE_FILE_AT_LINE (1628)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCstring ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1707)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string (true, "") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (true, false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1726)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string (true, "POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1728))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_62831 = var_cas_config ;
    if (_temp_62831._isBuilt ()) {
      _temp_62831 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1730)) ;
    }
    { const GGS_basic_type _var_63060 = var_cas_pw ; // CAST instruction
      if (_var_63060.getPtr () != NULL) {
        macroValidPointer (_var_63060.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_63060.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_63060.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1733)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1735)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1736)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_63104 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_63104 = NULL ;
    while (((operand_63104 = enumerator_63104.nextObject ()))) {
      macroValidPointer (operand_63104) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_63317 = GGS_uint (true, 32U) ;
        GGS_bool _condition_63317 (_variant_63317._isBuilt (), true) ;
        while (_condition_63317.isBuiltAndTrue ()) {
          _condition_63317 = (operand_63104->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_63317.isBuiltAndTrue ()) {
            if (_variant_63317.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1746)) ;
              _condition_63317 = GGS_bool (true, false) ;
            }else{
              _variant_63317._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1745)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_63104->fifosize ;
      }
      var_cas_fifo.appendCstring ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1750))) ;
      var_cas_fifo.appendCstring ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1750))) ;
      var_cas_fifo.appendCstring ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1751)) ;
    }
  }
  var_cas_fifo.appendCstring ("\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1757)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1757))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  GGS_uint _variant_63820 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1758)) ;
  GGS_bool _condition_63820 (_variant_63820._isBuilt (), true) ;
  while (_condition_63820.isBuiltAndTrue ()) {
    _condition_63820 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_63820.isBuiltAndTrue ()) {
      if (_variant_63820.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1764)) ;
        _condition_63820 = GGS_bool (true, false) ;
      }else{
        _variant_63820._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCstring ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCstring (",") ;
        }
        var_cas_fifo.appendCstring ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1763)) ;
      }
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1768)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1768))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_63975 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_63975 = NULL ;
    while (((operand_63975 = enumerator_63975.nextObject ()))) {
      macroValidPointer (operand_63975) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_64188 = GGS_uint (true, 32U) ;
        GGS_bool _condition_64188 (_variant_64188._isBuilt (), true) ;
        while (_condition_64188.isBuiltAndTrue ()) {
          _condition_64188 = (operand_63975->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_64188.isBuiltAndTrue ()) {
            if (_variant_64188.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1776)) ;
              _condition_64188 = GGS_bool (true, false) ;
            }else{
              _variant_64188._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1775)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1777)) ;
      }else{
        var_cas_max_size = operand_63975->fifosize ;
      }
      var_cas_fifo.appendCstring ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1781))) ;
      var_cas_fifo.appendCstring ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1781))) ;
      var_cas_fifo.appendCstring (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCstring (",") ;
      }
      var_cas_fifo.appendCstring ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1784)) ;
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1788)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1789)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1789)) COMMA_SOURCE_FILE_AT_LINE (1789)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*

