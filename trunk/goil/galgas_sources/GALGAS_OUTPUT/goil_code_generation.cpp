//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.1                         *
//                      april 17th, 2009, at 9h44'32"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 456
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "proc"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "_descriptor"), GGS_string (true, "") COMMA_SOURCE_FILE_AT_LINE (63)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (73)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (75)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (109)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$TARGET$") COMMA_SOURCE_FILE_AT_LINE (111)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&message_object_of_"), GGS_string (true, "$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (112)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$SIZE$") COMMA_SOURCE_FILE_AT_LINE (113)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (114)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (115)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "dynamic_queue_of_message_"), GGS_string (true, "$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (124)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error_notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (126)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "tpl_set_flag_"), GGS_string (true, "$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (128)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&error_notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (130)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "buffer_of_message_"), GGS_string (true, "$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (132)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "filter_of_message_"), GGS_string (true, "$FILTER$") COMMA_SOURCE_FILE_AT_LINE (134)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&filter_of_message_"), GGS_string (true, "$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (136)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (138)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)))._operator_isEqual (GGS_string (true, "extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
  { const GGS_basic_type _var_6946 = var_cas_startuphook ; // CAST instruction
    if (_var_6946.getPtr () != NULL) {
      macroValidPointer (_var_6946.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_6946.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_6946.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
  { const GGS_basic_type _var_7191 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7191.getPtr () != NULL) {
      macroValidPointer (_var_7191.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7191.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7191.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (174))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
  { const GGS_basic_type _var_7421 = var_cas_errorhook ; // CAST instruction
    if (_var_7421.getPtr () != NULL) {
      macroValidPointer (_var_7421.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7421.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7421.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
  { const GGS_basic_type _var_7662 = var_cas_pretaskhook ; // CAST instruction
    if (_var_7662.getPtr () != NULL) {
      macroValidPointer (_var_7662.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7662.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7662.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (188))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
  { const GGS_basic_type _var_7908 = var_cas_posttaskhook ; // CAST instruction
    if (_var_7908.getPtr () != NULL) {
      macroValidPointer (_var_7908.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7908.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7908.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (195))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
  { const GGS_basic_type _var_8167 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8167.getPtr () != NULL) {
      macroValidPointer (_var_8167.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8167.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8167.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (202))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
  { const GGS_basic_type _var_8441 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8441.getPtr () != NULL) {
      macroValidPointer (_var_8441.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8441.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8441.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (209))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
  { const GGS_basic_type _var_8700 = var_cas_useresscheduler ; // CAST instruction
    if (_var_8700.getPtr () != NULL) {
      macroValidPointer (_var_8700.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8700.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8700.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (216))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_8889 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ; // CAST instruction
    if (_var_8889.getPtr () != NULL) {
      macroValidPointer (_var_8889.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8889.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8889.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (222))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (227)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (228))) ;
    var_cas_flags.appendCstring ("\"\n") ;
  }else{
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (233)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_9573 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (238)) ; // CAST instruction
      if (_var_9573.getPtr () != NULL) {
        macroValidPointer (_var_9573.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9573.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9573.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (240))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_9754 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ; // CAST instruction
      if (_var_9754.getPtr () != NULL) {
        macroValidPointer (_var_9754.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9754.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9754.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (true, false) ;
    {
      GGS_task_map::cEnumerator enumerator_10063 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10063 = NULL ;
      while (((operand_10063 = enumerator_10063.nextObject ()))) {
        macroValidPointer (operand_10063) ;
        { const GGS_timing_prot _var_10261 = operand_10063->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ; // CAST instruction
          if (_var_10261.getPtr () != NULL) {
            macroValidPointer (_var_10261.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10261.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10312 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10312 = NULL ;
      while (((operand_10312 = enumerator_10312.nextObject ()))) {
        macroValidPointer (operand_10312) ;
        { const GGS_timing_prot _var_10507 = operand_10312->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ; // CAST instruction
          if (_var_10507.getPtr () != NULL) {
            macroValidPointer (_var_10507.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10507.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCstring ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCstring ("#define    AUTOSAR_SC    4\n") ;
  }
  {
    GGS_ident_map::cEnumerator enumerator_10766 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (277)), true) ;
    const GGS_ident_map::cElement * operand_10766 = NULL ;
    while (((operand_10766 = enumerator_10766.nextObject ()))) {
      macroValidPointer (operand_10766) ;
      { const GGS_basic_type _var_11006 = operand_10766->mInfo.value ; // CAST instruction
        if (_var_11006.getPtr () != NULL) {
          macroValidPointer (_var_11006.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11006.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11006.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (280))).isBuiltAndTrue ()) {
              var_cas_flags.appendCstring ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_10766->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (281))) ;
              var_cas_flags.appendCstring ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (289)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "getTrampolineTargetName"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getTrampolineTargetName (C_Compiler & _inLexique,
                                GGS_string & var_cas_trampolineTarget COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getTrampolineTargetName at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (299))) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "arm"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "avr"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "c166"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "s12x") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "posix"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "ppc"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "PPC") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "v850e"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (311)) ;
    var_cas_trampolineTarget = GGS_string (true, "") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getTrampolineTargetName\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string (true, "") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true, true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12489 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12489 = NULL ;
    while (((operand_12489 = enumerator_12489.nextObject ()))) {
      macroValidPointer (operand_12489) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCstring (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_12489->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (324))) ;
      var_cas_first = GGS_bool (true, false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (327)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string (true, "Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (338)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string (true, "Makefile") COMMA_SOURCE_FILE_AT_LINE (339)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (340)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (341)),  GGS_string (true, "$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (341)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (342)),  GGS_string (true, "$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (342)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (343)),  GGS_string (true, "$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (343)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (344)),  GGS_string (true, "$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (344)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string (true, "trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (349)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (350)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (353)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (353)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string (true, "..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (355)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (355)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (356)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (true, ".oil")) COMMA_SOURCE_FILE_AT_LINE (358)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (360)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string (true, "true") ;
  }else{
    var_cas_autosarStr = GGS_string (true, "false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (362)) ;
  const GGS_string _temp_14456 = var_cas_makefileStr ;
  if (_temp_14456._isBuilt ()) {
    _temp_14456 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string (true, "/Makefile")) COMMA_SOURCE_FILE_AT_LINE (363)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "Make-rules") COMMA_SOURCE_FILE_AT_LINE (367)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string (true, "/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  ::routine_getTrampolineTargetName (_inLexique,  var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (370)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (371))) COMMA_SOURCE_FILE_AT_LINE (371)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (372)) ;
  { const GGS_basic_type _var_15177 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (374)) ; // CAST instruction
    if (_var_15177.getPtr () != NULL) {
      macroValidPointer (_var_15177.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_15177.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_15177.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_15058 = var_cas_b ;
        if (_temp_15058._isBuilt ()) {
          _temp_15058 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (377)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (378)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  GGS_string (true, "false") COMMA_SOURCE_FILE_AT_LINE (380)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (385))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string (true, "GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string (true, "#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (392)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (393)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_15657 = var_cas_makerulesStr ;
    if (_temp_15657._isBuilt ()) {
      _temp_15657 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (394)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (411)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (412)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 31U) COMMA_SOURCE_FILE_AT_LINE (413)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "s32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (426)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (437)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 16U) COMMA_SOURCE_FILE_AT_LINE (438)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 32U) COMMA_SOURCE_FILE_AT_LINE (439)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (452)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 8LLU) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 16LLU) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 32LLU) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (true, 0LLU) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (499)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (499))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (499)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (499)) COMMA_SOURCE_FILE_AT_LINE (499)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string (true, "Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (501)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (502)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (505)),  GGS_string (true, "Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (505)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (507)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_18394 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_18394 = NULL ;
    while (((operand_18394 = enumerator_18394.nextObject ()))) {
      macroValidPointer (operand_18394) ;
      { const GGS_basic_type _var_18665 = operand_18394->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (513)) ; // CAST instruction
        if (_var_18665.getPtr () != NULL) {
          macroValidPointer (_var_18665.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_18665.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_18665.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (514)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (514)) ;
            }
          }else{
            operand_18394->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "Internal error, task "))._operator_concat (operand_18394->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (515))))._operator_concat (GGS_string (true, " has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (516)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (518)),  GGS_string (true, "Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (518)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (520)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19040 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19040 = NULL ;
    while (((operand_19040 = enumerator_19040.nextObject ()))) {
      macroValidPointer (operand_19040) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_19040->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (526)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (527)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (527)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (529)),  GGS_string (true, "Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (529)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (530)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (533)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (533)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (535)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (537)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (540)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (540)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (542)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (544)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (547)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (547)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (549)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (551)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (554)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (554)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (558)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (561)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (561))._add_operation (_inLexique, GGS_uint64 (true, 1LLU) COMMA_SOURCE_FILE_AT_LINE (561)),  GGS_string (true, "too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (563)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string (true, "too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (566)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (578))._add_operation (_inLexique, GGS_uint (true, 4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (578)) COMMA_SOURCE_FILE_AT_LINE (578)) COMMA_SOURCE_FILE_AT_LINE (578)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (580)) COMMA_SOURCE_FILE_AT_LINE (580)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string (true, "alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (600)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string (true, "alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (601)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string (true, "alarm_callback") COMMA_SOURCE_FILE_AT_LINE (602)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string (true, "alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (603)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_22173 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_22173 = NULL ;
    while (((operand_22173 = enumerator_22173.nextObject ()))) {
      macroValidPointer (operand_22173) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_22173->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (610)) ;
      { const GGS_action_obj _var_23249 = var_cas_alarm_action ; // CAST instruction
        if (_var_23249.getPtr () != NULL) {
          macroValidPointer (_var_23249.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_23249.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_23249.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (614)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (614)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (614)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (615)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_23249.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_23249.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (618)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (618)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (618)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_23249.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_23249.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (621)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (621)))._operator_concat (GGS_string (true, "_callback")) COMMA_SOURCE_FILE_AT_LINE (621)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_23249.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_23249.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (624)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (624)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (624)) ;
          }else{
            operand_22173->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown action found") COMMA_SOURCE_FILE_AT_LINE (626)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_22173->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (630)) ;
      { const GGS_autostart_obj _var_24172 = var_cas_autostart ; // CAST instruction
        if (_var_24172.getPtr () != NULL) {
          macroValidPointer (_var_24172.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_24172.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (633)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (634)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (635)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_24172.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (637)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (638)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (639)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_24172.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_24172.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (641)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (642)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (642)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_SOURCE_FILE_AT_LINE (642)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (643)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (643)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)) ;
          }else{
            operand_22173->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (645)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_22173->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (649)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_NAME$"),  operand_22173->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (650)) COMMA_SOURCE_FILE_AT_LINE (650)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM$"),  (operand_22173->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (651)))._operator_concat (GGS_string (true, "_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (651)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (652)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (652)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (655)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (656)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_24704 = var_cas_app_for_obj ;
          if (_temp_24704._isBuilt ()) {
            _temp_24704 (HERE)->method_get (_inLexique, operand_22173->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (658)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (659)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string (true, "") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string (true, "") ;
  {
    GGS_stringset::cEnumerator enumerator_25001 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (669)), true) ;
    if (enumerator_25001 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string (true, "CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCstring ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_25001 ;
      do{
        var_cas_alarm_imp.appendCstring ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_25001._key (HERE)) ;
        var_cas_alarm_imp.appendCstring ("_alarm_desc") ;
        var_cas_alarm_ids.appendCstring ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_25001._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (675))) ;
        var_cas_alarm_ids.appendCstring ("\n") ;
        var_cas_alarm_ids.appendCstring ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_25001._key (HERE)) ;
        var_cas_alarm_ids.appendCstring (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_25001._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_25001.next () ;
        _foreach_loop_25001 = (enumerator_25001 .hc ()) ;
        if (_foreach_loop_25001) {
          var_cas_alarm_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_25001) ;
      var_cas_alarm_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (685)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (686)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (687)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (687)) COMMA_SOURCE_FILE_AT_LINE (687)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_26249 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_26249 = NULL ;
    while (((operand_26249 = enumerator_26249.nextObject ()))) {
      macroValidPointer (operand_26249) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (true, 0U) ;
      var_cas_prio_as_basic = operand_26249->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (711)) ;
      var_cas_act_as_basic = operand_26249->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (712)) ;
      { const GGS_basic_type _var_26680 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_26680.getPtr () != NULL) {
          macroValidPointer (_var_26680.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_26680.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_26680.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (715)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (716)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (717)) ;
          }
        }
      }
      { const GGS_basic_type _var_26869 = var_cas_act_as_basic ; // CAST instruction
        if (_var_26869.getPtr () != NULL) {
          macroValidPointer (_var_26869.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_26869.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_26869.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (720)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (721)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (722)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_26249->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (true, 1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (732)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_27085 = var_cas_tl ;
    if (_temp_27085._isBuilt ()) {
      _temp_27085 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (733)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_27212 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_27212 = NULL ;
    while (((operand_27212 = enumerator_27212.nextObject ()))) {
      macroValidPointer (operand_27212) ;
      if (((operand_27212->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_27212->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (743)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_27212->name, var_cas_actual_prio, operand_27212->act COMMA_SOURCE_FILE_AT_LINE (746)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (765)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_28272 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_28272 = NULL ;
      while (((operand_28272 = enumerator_28272.nextObject ()))) {
        macroValidPointer (operand_28272) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (true, 0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (true, 0U) ;
        var_cas_prio_as_basic = operand_28272->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
        const GGS_isr_obj  _temp_28525 = operand_28272->mInfo.isr ;
        if (_temp_28525._isBuilt ()) {
          _temp_28525 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (778)) ;
        }
        { const GGS_basic_type _var_28731 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_28731.getPtr () != NULL) {
            macroValidPointer (_var_28731.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_28731.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_28731.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (781)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (782)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (783)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_28272->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (796)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (798)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_29198 = var_cas_il ;
      if (_temp_29198._isBuilt ()) {
        _temp_29198 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (799)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_29352 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_29352 = NULL ;
      while (((operand_29352 = enumerator_29352.nextObject ()))) {
        macroValidPointer (operand_29352) ;
        if (((operand_29352->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_29352->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (809)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_29352->name, var_cas_actual_prio, operand_29352->act COMMA_SOURCE_FILE_AT_LINE (812)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_30749 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_30749 = NULL ;
    while (((operand_30749 = enumerator_30749.nextObject ()))) {
      macroValidPointer (operand_30749) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (true, 0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string (true, "") ;
      {
        GGS_task_map::cEnumerator enumerator_30893 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_30893 = NULL ;
        while (((operand_30893 = enumerator_30893.nextObject ()))) {
          macroValidPointer (operand_30893) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_30893->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (851)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30749->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (853)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_31183 = var_cas_prio_for_task ;
            if (_temp_31183._isBuilt ()) {
              _temp_31183 (HERE)->method_get (_inLexique, operand_30893->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (857)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (861)) ;
            var_cas_rez_comment.appendCstring (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_30893->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (862))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (862))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_31499 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_31499 = NULL ;
        while (((operand_31499 = enumerator_31499.nextObject ()))) {
          macroValidPointer (operand_31499) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_31499->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (866)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30749->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (868)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_31787 = var_cas_prio_for_isr ;
            if (_temp_31787._isBuilt ()) {
              _temp_31787 (HERE)->method_get (_inLexique, operand_31499->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (872)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (876)) ;
            var_cas_rez_comment.appendCstring (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_31499->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (877))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (877))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (true, " none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_32359 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32359 = NULL ;
        while (((operand_32359 = enumerator_32359.nextObject ()))) {
          macroValidPointer (operand_32359) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32359->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (890)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30749->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (892)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_32649 = var_cas_prio_for_task ;
            if (_temp_32649._isBuilt ()) {
              _temp_32649 (HERE)->method_get (_inLexique, operand_32359->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (896)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (898)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_32844 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_32844 = NULL ;
        while (((operand_32844 = enumerator_32844.nextObject ()))) {
          macroValidPointer (operand_32844) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32844->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (903)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30749->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (905)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33132 = var_cas_prio_for_isr ;
            if (_temp_33132._isBuilt ()) {
              _temp_33132 (HERE)->method_get (_inLexique, operand_32844->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (909)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (911)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_30749->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (916)) ;
      var_cas_comments.modifier_put (_inLexique, operand_30749->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (917)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (true, 1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 1U) ;
  GGS_uint _variant_34949 = var_cas_max_prio ;
  GGS_bool _condition_34949 (_variant_34949._isBuilt (), true) ;
  while (_condition_34949.isBuiltAndTrue ()) {
    _condition_34949 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_34949.isBuiltAndTrue ()) {
      if (_variant_34949.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (962)) ;
        _condition_34949 = GGS_bool (true, false) ;
      }else{
        _variant_34949._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (true, 0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_34293 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_34293 = NULL ;
          while (((operand_34293 = enumerator_34293.nextObject ()))) {
            macroValidPointer (operand_34293) ;
            if (((operand_34293->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_34293->mInfo.act COMMA_SOURCE_FILE_AT_LINE (947)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_34442 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_34442 = NULL ;
          while (((operand_34442 = enumerator_34442.nextObject ()))) {
            macroValidPointer (operand_34442) ;
            if (((operand_34442->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_34442->mInfo.act COMMA_SOURCE_FILE_AT_LINE (950)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_34591 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_34591 = NULL ;
          while (((operand_34591 = enumerator_34591.nextObject ()))) {
            macroValidPointer (operand_34591) ;
            if (((operand_34591->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_34591->mInfo.act COMMA_SOURCE_FILE_AT_LINE (953)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (958)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (961)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_35129 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_35129 = NULL ;
    while (((operand_35129 = enumerator_35129.nextObject ()))) {
      macroValidPointer (operand_35129) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_35129->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (974)) ;
      {
        GGS_ident_map::cEnumerator enumerator_35185 (operand_35129->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (975)), true) ;
        const GGS_ident_map::cElement * operand_35185 = NULL ;
        while (((operand_35185 = enumerator_35185.nextObject ()))) {
          macroValidPointer (operand_35185) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35185->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (976)) COMMA_SOURCE_FILE_AT_LINE (976)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35185->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (977)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35343 (operand_35129->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (980)), true) ;
        const GGS_ident_map::cElement * operand_35343 = NULL ;
        while (((operand_35343 = enumerator_35343.nextObject ()))) {
          macroValidPointer (operand_35343) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35343->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (981)) COMMA_SOURCE_FILE_AT_LINE (981)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35343->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (982)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35500 (operand_35129->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (985)), true) ;
        const GGS_ident_map::cElement * operand_35500 = NULL ;
        while (((operand_35500 = enumerator_35500.nextObject ()))) {
          macroValidPointer (operand_35500) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35500->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (986)) COMMA_SOURCE_FILE_AT_LINE (986)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35500->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (987)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35659 (operand_35129->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (990)), true) ;
        const GGS_ident_map::cElement * operand_35659 = NULL ;
        while (((operand_35659 = enumerator_35659.nextObject ()))) {
          macroValidPointer (operand_35659) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35659->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (991)) COMMA_SOURCE_FILE_AT_LINE (991)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35659->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (992)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35823 (operand_35129->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (995)), true) ;
        const GGS_ident_map::cElement * operand_35823 = NULL ;
        while (((operand_35823 = enumerator_35823.nextObject ()))) {
          macroValidPointer (operand_35823) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35823->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (996)) COMMA_SOURCE_FILE_AT_LINE (996)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35823->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (997)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35984 (operand_35129->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1000)), true) ;
        const GGS_ident_map::cElement * operand_35984 = NULL ;
        while (((operand_35984 = enumerator_35984.nextObject ()))) {
          macroValidPointer (operand_35984) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35984->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1001)) COMMA_SOURCE_FILE_AT_LINE (1001)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35984->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1002)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string (true, "task") COMMA_SOURCE_FILE_AT_LINE (1024)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (true, false) ;
  {
    GGS_task_map::cEnumerator enumerator_36830 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_36830 = NULL ;
    while (((operand_36830 = enumerator_36830.nextObject ()))) {
      macroValidPointer (operand_36830) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_36830->mKey,  operand_36830->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1033)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1038)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1038)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1039)))._operator_concat (GGS_string (true, "_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1039)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1040)))._operator_concat (GGS_string (true, "_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1040)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1041)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1041)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1042)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1042)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_ID$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1043)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1043)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string (true, "") ;
      if (((operand_36830->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1050)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1050)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1052)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1054)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "event_masks") COMMA_SOURCE_FILE_AT_LINE (1056)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$EXEC_NAME$"),  operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$TASK_EVENT_STRUCT$"),  (operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1058)))._operator_concat (GGS_string (true, "_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1058)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1061)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_38517 = var_cas_actual_priorities ;
      if (_temp_38517._isBuilt ()) {
        _temp_38517 (HERE)->method_get (_inLexique, operand_36830->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1064)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_36830->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1072)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1072)))._operator_isEqual (GGS_string (true, "NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true, true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1074)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_36830->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1077)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true, true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_39192 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_39192 = NULL ;
          while (((operand_39192 = enumerator_39192.nextObject ()))) {
            macroValidPointer (operand_39192) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_39336 = var_cas_resources ;
              if (_temp_39336._isBuilt ()) {
                _temp_39336 (HERE)->method_get (_inLexique, operand_39192->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1082)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1083)) ;
              { const GGS_resource_property_obj _var_39731 = var_cas_rez_prop ; // CAST instruction
                if (_var_39731.getPtr () != NULL) {
                  macroValidPointer (_var_39731.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_39731.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  ((GGS_string (true, "&"))._operator_concat (operand_39192->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1086))))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1086)) ;
                    var_cas_no_internal_rez_found = GGS_bool (true, false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (1093)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1098)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_36830->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1101)) ;
      { const GGS_basic_type _var_40350 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_40350.getPtr () != NULL) {
          macroValidPointer (_var_40350.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_40350.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_40350.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1103)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1104)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1105)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_36830->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      { const GGS_task_autostart_obj _var_40891 = var_cas_autostart ; // CAST instruction
        if (_var_40891.getPtr () != NULL) {
          macroValidPointer (_var_40891.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_40891.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1112)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_40891.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1114)) ;
          }else{
            operand_36830->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1116)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_36830->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_41073 = var_cas_timing_prot ;
      if (_temp_41073._isBuilt ()) {
        _temp_41073 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_36830->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1122)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1122)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1123)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1127)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1128)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_41493 = var_cas_app_for_obj ;
          if (_temp_41493._isBuilt ()) {
            _temp_41493 (HERE)->method_get (_inLexique, operand_36830->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1130)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1131)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string (true, "extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1149)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1150)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1150)) COMMA_SOURCE_FILE_AT_LINE (1150)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1151)) COMMA_SOURCE_FILE_AT_LINE (1151)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string (true, "isr") COMMA_SOURCE_FILE_AT_LINE (1172)) ;
  {
    GGS_isr_map::cEnumerator enumerator_43048 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_43048 = NULL ;
    while (((operand_43048 = enumerator_43048.nextObject ()))) {
      macroValidPointer (operand_43048) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_43048->mKey,  operand_43048->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1182)) COMMA_SOURCE_FILE_AT_LINE (1182)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1183)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1184)))._operator_concat (GGS_string (true, "_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1184)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1185)))._operator_concat (GGS_string (true, "_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1185)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1186)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1187)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1187)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_HELPER$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1188)))._operator_concat (GGS_string (true, "_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_ID$"),  (operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1190)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_43883 = var_cas_actual_priorities ;
      if (_temp_43883._isBuilt ()) {
        _temp_43883 (HERE)->method_get (_inLexique, operand_43048->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1193)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1194)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_44050 = operand_43048->mInfo.isr ;
      if (_temp_44050._isBuilt ()) {
        _temp_44050 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1197)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) COMMA_SOURCE_FILE_AT_LINE (1198)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_43048->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1201)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_44298 = var_cas_timing_prot ;
      if (_temp_44298._isBuilt ()) {
        _temp_44298 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_43048->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1204)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1204)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1205)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1206)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1209)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1210)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_44653 = var_cas_app_for_obj ;
          if (_temp_44653._isBuilt ()) {
            _temp_44653 (HERE)->method_get (_inLexique, operand_43048->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1212)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1213)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1228)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1232)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1232)) COMMA_SOURCE_FILE_AT_LINE (1232)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1233)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string (true, "") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string (true, "counter") COMMA_SOURCE_FILE_AT_LINE (1250)) ;
  {
    GGS_counter_map::cEnumerator enumerator_45876 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_45876 = NULL ;
    while (((operand_45876 = enumerator_45876.nextObject ()))) {
      macroValidPointer (operand_45876) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_NAME$"),  operand_45876->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1256)) COMMA_SOURCE_FILE_AT_LINE (1256)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (operand_45876->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1257)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_45876->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      { const GGS_basic_type _var_46428 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_46428.getPtr () != NULL) {
          macroValidPointer (_var_46428.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_46428.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_46428.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1262)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1262)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1263)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1264)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      var_cas_counters_cst.appendCstring ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_45876->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1266))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_45876->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      { const GGS_basic_type _var_46835 = var_cas_max_as_basic ; // CAST instruction
        if (_var_46835.getPtr () != NULL) {
          macroValidPointer (_var_46835.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_46835.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_46835.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1270)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1271)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1272)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      var_cas_counters_cst.appendCstring ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_45876->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1274))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_45876->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      { const GGS_basic_type _var_47233 = var_cas_min_as_basic ; // CAST instruction
        if (_var_47233.getPtr () != NULL) {
          macroValidPointer (_var_47233.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_47233.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_47233.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1278)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1279)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1280)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      var_cas_counters_cst.appendCstring ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_45876->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1282))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n"
        "\n") ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1288)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_45876->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1289)) ;
        { const GGS_counter_type _var_47857 = var_cas_type ; // CAST instruction
          if (_var_47857.getPtr () != NULL) {
            macroValidPointer (_var_47857.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_47857.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_47857.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1293)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1294)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1295)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1298)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_48042 = var_cas_app_for_obj ;
          if (_temp_48042._isBuilt ()) {
            _temp_48042 (HERE)->method_get (_inLexique, operand_45876->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1300)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1301)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1309)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string (true, "") ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1317)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string (true, "") ;
    {
      GGS_counter_map::cEnumerator enumerator_48689 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_48689 = enumerator_48689.nextObject () ;
      if ((operand_48689 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string (true, "#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCstring ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCstring ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_48689 ;
        do{
          macroValidPointer (operand_48689) ;
          var_cas_counter_table.appendCstring ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_48689->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1325))) ;
          var_cas_counter_table.appendCstring ("_counter_desc") ;
          var_cas_counter_ids.appendCstring ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_48689->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326))) ;
          var_cas_counter_ids.appendCstring ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1326))) ;
          var_cas_counter_ids.appendCstring ("\n") ;
          var_cas_counter_ids.appendCstring ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_48689->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1327))) ;
          var_cas_counter_ids.appendCstring (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_48689->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1327))) ;
          var_cas_counter_ids.appendCstring ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_48689 = enumerator_48689.nextObject () ;
          _foreach_loop_48689 = ((operand_48689 != NULL)) ;
          if (_foreach_loop_48689) {
            var_cas_counter_table.appendCstring (",\n") ;
            var_cas_counter_ids.appendCstring ("\n") ;
          }
        }while (_foreach_loop_48689) ;
        var_cas_counter_table.appendCstring ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335)) COMMA_SOURCE_FILE_AT_LINE (1335)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1336)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1337)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1338)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string (true, "") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string (true, "resource") COMMA_SOURCE_FILE_AT_LINE (1358)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string (true, "internal_resource") COMMA_SOURCE_FILE_AT_LINE (1359)) ;
  {
    GGS_resource_map::cEnumerator enumerator_50417 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_50417 = NULL ;
    while (((operand_50417 = enumerator_50417.nextObject ()))) {
      macroValidPointer (operand_50417) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_50417->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_50417->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1367)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_50704 = var_cas_rez_prio ;
      if (_temp_50704._isBuilt ()) {
        _temp_50704 (HERE)->method_get (_inLexique, operand_50417->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1371)) ;
      }
      const GGS_string_map  _temp_50757 = var_cas_rez_comments ;
      if (_temp_50757._isBuilt ()) {
        _temp_50757 (HERE)->method_get (_inLexique, operand_50417->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1372)) ;
      }
      { const GGS_resource_property_obj _var_51261 = var_cas_rez_prop ; // CAST instruction
        if (_var_51261.getPtr () != NULL) {
          macroValidPointer (_var_51261.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_51261.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_51261.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_51261.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string (true, "") ;
            operand_50417->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1386)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_NAME$"),  operand_50417->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1388)) COMMA_SOURCE_FILE_AT_LINE (1388)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE$"),  (operand_50417->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1389)))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1389)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1391)) COMMA_SOURCE_FILE_AT_LINE (1391)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1392)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1394)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1395)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_51683 = var_cas_app_for_obj ;
          if (_temp_51683._isBuilt ()) {
            _temp_51683 (HERE)->method_get (_inLexique, operand_50417->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1397)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1398)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string (true, "") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string (true, "") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_51998 (var_cas_regular_rez, true) ;
    while (enumerator_51998.hc ()) {
      var_cas_rez_ids.appendCstring ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_51998._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1410))) ;
      var_cas_rez_ids.appendCstring ("\n") ;
      var_cas_rez_ids.appendCstring ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_51998._key (HERE)) ;
      var_cas_rez_ids.appendCstring (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_51998._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_51998.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string (true, "res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_52232 (var_cas_regular_rez, true) ;
    if (enumerator_52232 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string (true, "CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_52232 ;
      do{
        var_cas_rez_imp.appendCstring ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_52232._key (HERE)) ;
        var_cas_rez_imp.appendCstring ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_52232.next () ;
        _foreach_loop_52232 = (enumerator_52232 .hc ()) ;
        if (_foreach_loop_52232) {
          var_cas_rez_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_52232) ;
      var_cas_rez_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1429)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1430)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1430)) COMMA_SOURCE_FILE_AT_LINE (1430)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1431)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_prefix_map   /* var_cas_p */,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string (true, "event") COMMA_SOURCE_FILE_AT_LINE (1448)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_54019 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_54019 = NULL ;
    while (((operand_54019 = enumerator_54019.nextObject ()))) {
      macroValidPointer (operand_54019) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_54019->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1468)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (true, 0LLU) ;
      {
        GGS_lstringlist::cEnumerator enumerator_54195 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_54195 = NULL ;
        while (((operand_54195 = enumerator_54195.nextObject ()))) {
          macroValidPointer (operand_54195) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_54273 = var_cas_events ;
          if (_temp_54273._isBuilt ()) {
            _temp_54273 (HERE)->method_get (_inLexique, operand_54195->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1472)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1474)) ;
          { const GGS_event_mask_obj _var_55175 = var_cas_mask_obj ; // CAST instruction
            if (_var_55175.getPtr () != NULL) {
              macroValidPointer (_var_55175.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_55175.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_55175.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1477)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1477))))._operator_isEqual (GGS_uint64 (true, 0LLU))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1479)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1479))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1481)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MASK of event "))._operator_concat (operand_54195->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1481))))._operator_concat (GGS_string (true, " conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1482)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_55175.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_54195->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1485)) COMMA_SOURCE_FILE_AT_LINE (1485))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_54195->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1487)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1488)) ;
                }else{
                  var_cas_count = GGS_uint (true, 1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_54195->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1492)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_54195->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1497)) COMMA_SOURCE_FILE_AT_LINE (1497))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_54195->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1499)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_54019->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1501))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_54195->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1502)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_54019->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1505)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_55652 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_55652 = NULL ;
    while (((operand_55652 = enumerator_55652.nextObject ()))) {
      macroValidPointer (operand_55652) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_55652->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1513)) ;
      { const GGS_event_mask_obj _var_56097 = var_cas_evt_mask ; // CAST instruction
        if (_var_56097.getPtr () != NULL) {
          macroValidPointer (_var_56097.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_56097.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_56097.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_55652->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1517)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1517)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_55652->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1518)) COMMA_SOURCE_FILE_AT_LINE (1518)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1519)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1519)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1519)) COMMA_SOURCE_FILE_AT_LINE (1519)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCstring ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_56261 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_56261 = NULL ;
    while (((operand_56261 = enumerator_56261.nextObject ()))) {
      macroValidPointer (operand_56261) ;
      var_cas_sort_evts._addAssign_operation (operand_56261->mKey, operand_56261->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_56433 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_56433 = NULL ;
    while (((operand_56433 = enumerator_56433.nextObject ()))) {
      macroValidPointer (operand_56433) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_56433->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) COMMA_SOURCE_FILE_AT_LINE (1541))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_56546 = var_cas_tasks_for_event ;
        if (_temp_56546._isBuilt ()) {
          _temp_56546 (HERE)->method_get (_inLexique, operand_56433->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1543)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (true, 0LLU) ;
        {
          GGS_stringset::cEnumerator enumerator_56615 (var_cas_tasks, true) ;
          while (enumerator_56615.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_56679 = var_cas_task_mask ;
            if (_temp_56679._isBuilt ()) {
              _temp_56679 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_56615._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1547)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_56615.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (true, 1LLU) ;
        GGS_uint _variant_57011 = GGS_uint (true, 32U) ;
        GGS_bool _condition_57011 (_variant_57011._isBuilt (), true) ;
        while (_condition_57011.isBuiltAndTrue ()) {
          _condition_57011 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1554))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (true, 0LLU))) ;
          if (_condition_57011.isBuiltAndTrue ()) {
            if (_variant_57011.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1556)) ;
              _condition_57011 = GGS_bool (true, false) ;
            }else{
              _variant_57011._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1555)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1557)))).isBuiltAndTrue ()) {
          operand_56433->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "All event mask bits are already use, event "))._operator_concat (operand_56433->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1558))))._operator_concat (GGS_string (true, " can't be created")) COMMA_SOURCE_FILE_AT_LINE (1559)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_57310 (var_cas_tasks, true) ;
          while (enumerator_57310.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_57310._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1564)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_57310._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1566)) ;
            enumerator_57310.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_56433->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1570)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1570)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_56433->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1571)) COMMA_SOURCE_FILE_AT_LINE (1571)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1572)) COMMA_SOURCE_FILE_AT_LINE (1572)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCstring ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1651)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string (true, "") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (true, false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1670)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string (true, "POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1672))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_61016 = var_cas_config ;
    if (_temp_61016._isBuilt ()) {
      _temp_61016 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1674)) ;
    }
    { const GGS_basic_type _var_61245 = var_cas_pw ; // CAST instruction
      if (_var_61245.getPtr () != NULL) {
        macroValidPointer (_var_61245.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_61245.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_61245.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1677)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1679)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1680)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_61289 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_61289 = NULL ;
    while (((operand_61289 = enumerator_61289.nextObject ()))) {
      macroValidPointer (operand_61289) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_61502 = GGS_uint (true, 32U) ;
        GGS_bool _condition_61502 (_variant_61502._isBuilt (), true) ;
        while (_condition_61502.isBuiltAndTrue ()) {
          _condition_61502 = (operand_61289->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_61502.isBuiltAndTrue ()) {
            if (_variant_61502.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1690)) ;
              _condition_61502 = GGS_bool (true, false) ;
            }else{
              _variant_61502._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1689)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_61289->fifosize ;
      }
      var_cas_fifo.appendCstring ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1694))) ;
      var_cas_fifo.appendCstring ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1694))) ;
      var_cas_fifo.appendCstring ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1695)) ;
    }
  }
  var_cas_fifo.appendCstring ("\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1701)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1701))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  GGS_uint _variant_62005 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1702)) ;
  GGS_bool _condition_62005 (_variant_62005._isBuilt (), true) ;
  while (_condition_62005.isBuiltAndTrue ()) {
    _condition_62005 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_62005.isBuiltAndTrue ()) {
      if (_variant_62005.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1708)) ;
        _condition_62005 = GGS_bool (true, false) ;
      }else{
        _variant_62005._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCstring ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCstring (",") ;
        }
        var_cas_fifo.appendCstring ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1707)) ;
      }
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1712)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1712))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_62160 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_62160 = NULL ;
    while (((operand_62160 = enumerator_62160.nextObject ()))) {
      macroValidPointer (operand_62160) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_62373 = GGS_uint (true, 32U) ;
        GGS_bool _condition_62373 (_variant_62373._isBuilt (), true) ;
        while (_condition_62373.isBuiltAndTrue ()) {
          _condition_62373 = (operand_62160->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_62373.isBuiltAndTrue ()) {
            if (_variant_62373.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1720)) ;
              _condition_62373 = GGS_bool (true, false) ;
            }else{
              _variant_62373._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1719)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1721)) ;
      }else{
        var_cas_max_size = operand_62160->fifosize ;
      }
      var_cas_fifo.appendCstring ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1725))) ;
      var_cas_fifo.appendCstring ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1725))) ;
      var_cas_fifo.appendCstring (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCstring (",") ;
      }
      var_cas_fifo.appendCstring ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1728)) ;
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1732)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1733)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1733)) COMMA_SOURCE_FILE_AT_LINE (1733)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*

