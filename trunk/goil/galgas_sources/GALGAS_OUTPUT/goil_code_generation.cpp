//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.1                         *
//                      april 20th, 2009, at 17h17'31"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 456
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "proc"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "_descriptor"), GGS_string (true, "") COMMA_SOURCE_FILE_AT_LINE (63)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (73)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (75)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (109)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (110)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "message_object_of_"), GGS_string (true, "$TARGET$") COMMA_SOURCE_FILE_AT_LINE (111)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&message_object_of_"), GGS_string (true, "$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (112)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$SIZE$") COMMA_SOURCE_FILE_AT_LINE (113)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (114)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (115)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "dynamic_queue_of_message_"), GGS_string (true, "$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error of message "), GGS_string (true, "$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (124)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "error_notification_of_message_"), GGS_string (true, "$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (126)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "tpl_set_flag_"), GGS_string (true, "$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (128)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&error_notification_of_message_"), GGS_string (true, "$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (130)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "buffer_of_message_"), GGS_string (true, "$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (132)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "filter_of_message_"), GGS_string (true, "$FILTER$") COMMA_SOURCE_FILE_AT_LINE (134)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, "&filter_of_message_"), GGS_string (true, "$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (136)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (138)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (true, ""), GGS_string (true, "$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string (true, "") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (159)))._operator_isEqual (GGS_string (true, "extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)) ;
  { const GGS_basic_type _var_6946 = var_cas_startuphook ; // CAST instruction
    if (_var_6946.getPtr () != NULL) {
      macroValidPointer (_var_6946.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_6946.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_6946.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (171)) ;
  { const GGS_basic_type _var_7191 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7191.getPtr () != NULL) {
      macroValidPointer (_var_7191.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7191.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7191.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (174))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
  { const GGS_basic_type _var_7421 = var_cas_errorhook ; // CAST instruction
    if (_var_7421.getPtr () != NULL) {
      macroValidPointer (_var_7421.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7421.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7421.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (181))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
  { const GGS_basic_type _var_7662 = var_cas_pretaskhook ; // CAST instruction
    if (_var_7662.getPtr () != NULL) {
      macroValidPointer (_var_7662.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7662.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7662.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (188))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
  { const GGS_basic_type _var_7908 = var_cas_posttaskhook ; // CAST instruction
    if (_var_7908.getPtr () != NULL) {
      macroValidPointer (_var_7908.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7908.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7908.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (195))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
  { const GGS_basic_type _var_8167 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8167.getPtr () != NULL) {
      macroValidPointer (_var_8167.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8167.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8167.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (202))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
  { const GGS_basic_type _var_8441 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8441.getPtr () != NULL) {
      macroValidPointer (_var_8441.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8441.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8441.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (209))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
  { const GGS_basic_type _var_8700 = var_cas_useresscheduler ; // CAST instruction
    if (_var_8700.getPtr () != NULL) {
      macroValidPointer (_var_8700.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8700.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8700.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (216))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_8889 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ; // CAST instruction
    if (_var_8889.getPtr () != NULL) {
      macroValidPointer (_var_8889.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8889.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8889.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (222))).isBuiltAndTrue ()) {
          var_cas_flags.appendCstring ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (227)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (228))) ;
    var_cas_flags.appendCstring ("\"\n") ;
  }else{
    var_cas_flags.appendCstring ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (233)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCstring ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_9573 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (238)) ; // CAST instruction
      if (_var_9573.getPtr () != NULL) {
        macroValidPointer (_var_9573.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9573.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9573.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (240))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_9754 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ; // CAST instruction
      if (_var_9754.getPtr () != NULL) {
        macroValidPointer (_var_9754.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_9754.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_9754.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (245))).isBuiltAndTrue ()) {
            var_cas_flags.appendCstring ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (true, false) ;
    {
      GGS_task_map::cEnumerator enumerator_10063 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10063 = NULL ;
      while (((operand_10063 = enumerator_10063.nextObject ()))) {
        macroValidPointer (operand_10063) ;
        { const GGS_timing_prot _var_10261 = operand_10063->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ; // CAST instruction
          if (_var_10261.getPtr () != NULL) {
            macroValidPointer (_var_10261.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10261.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10312 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10312 = NULL ;
      while (((operand_10312 = enumerator_10312.nextObject ()))) {
        macroValidPointer (operand_10312) ;
        { const GGS_timing_prot _var_10507 = operand_10312->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ; // CAST instruction
          if (_var_10507.getPtr () != NULL) {
            macroValidPointer (_var_10507.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10507.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true, true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true, true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCstring ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCstring ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_10776 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
  if (_temp_10776._isBuilt ()) {
    _temp_10776 (HERE)->method_generate (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (278)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  {
    GGS_ident_map::cEnumerator enumerator_10852 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (282)), true) ;
    const GGS_ident_map::cElement * operand_10852 = NULL ;
    while (((operand_10852 = enumerator_10852.nextObject ()))) {
      macroValidPointer (operand_10852) ;
      { const GGS_basic_type _var_11092 = operand_10852->mInfo.value ; // CAST instruction
        if (_var_11092.getPtr () != NULL) {
          macroValidPointer (_var_11092.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11092.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11092.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))).isBuiltAndTrue ()) {
              var_cas_flags.appendCstring ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_10852->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (286))) ;
              var_cas_flags.appendCstring ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (294)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "getTrampolineTargetName"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getTrampolineTargetName (C_Compiler & _inLexique,
                                GGS_string & var_cas_trampolineTarget COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_getTrampolineTargetName at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (304))) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "arm"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "avr"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "c166"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "s12x") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "posix"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "ppc"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "PPC") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string (true, "v850e"))).isBuiltAndTrue ()) {
    var_cas_trampolineTarget = GGS_string (true, "v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (316)) ;
    var_cas_trampolineTarget = GGS_string (true, "") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_getTrampolineTargetName\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string (true, "") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true, true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12575 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12575 = NULL ;
    while (((operand_12575 = enumerator_12575.nextObject ()))) {
      macroValidPointer (operand_12575) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCstring (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_12575->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (329))) ;
      var_cas_first = GGS_bool (true, false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (332)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string (true, "Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (343)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string (true, "Makefile") COMMA_SOURCE_FILE_AT_LINE (344)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (345)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (346)),  GGS_string (true, "$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (346)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)),  GGS_string (true, "$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (348)),  GGS_string (true, "$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (349)),  GGS_string (true, "$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (349)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (352)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string (true, "trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (354)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (354)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (354)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (355)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (358)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (358)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string (true, "..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (360)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (360)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (361)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (true, ".oil")) COMMA_SOURCE_FILE_AT_LINE (363)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (365)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string (true, "true") ;
  }else{
    var_cas_autosarStr = GGS_string (true, "false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  const GGS_string _temp_14542 = var_cas_makefileStr ;
  if (_temp_14542._isBuilt ()) {
    _temp_14542 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string (true, "/Makefile")) COMMA_SOURCE_FILE_AT_LINE (368)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "Make-rules") COMMA_SOURCE_FILE_AT_LINE (372)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string (true, "/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  ::routine_getTrampolineTargetName (_inLexique,  var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (376))) COMMA_SOURCE_FILE_AT_LINE (376)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (377)) ;
  { const GGS_basic_type _var_15263 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (379)) ; // CAST instruction
    if (_var_15263.getPtr () != NULL) {
      macroValidPointer (_var_15263.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_15263.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_15263.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_15144 = var_cas_b ;
        if (_temp_15144._isBuilt ()) {
          _temp_15144 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (382)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (383)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string (true, "$WSC$"),  GGS_string (true, "false") COMMA_SOURCE_FILE_AT_LINE (385)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (390))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string (true, "GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string (true, "#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (397)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (398)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_15743 = var_cas_makerulesStr ;
    if (_temp_15743._isBuilt ()) {
      _temp_15743 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (399)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 7U) COMMA_SOURCE_FILE_AT_LINE (416)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 15U) COMMA_SOURCE_FILE_AT_LINE (417)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 31U) COMMA_SOURCE_FILE_AT_LINE (418)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "s32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (431)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 8U) COMMA_SOURCE_FILE_AT_LINE (442)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 16U) COMMA_SOURCE_FILE_AT_LINE (443)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 1LLU)._left_shift_operation (_inLexique, GGS_uint (true, 32U) COMMA_SOURCE_FILE_AT_LINE (444)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (457)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (true, 8LLU) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (true, 16LLU) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (true, 32LLU) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string (true, "u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string (true, "u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string (true, "u32") ;
      }else{
        var_cas_type = GGS_string (true, "") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (483)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (true, 0LLU) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (504))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (504)) COMMA_SOURCE_FILE_AT_LINE (504)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string (true, "Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (506)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (507)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (510)),  GGS_string (true, "Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (510)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (512)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_18480 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_18480 = NULL ;
    while (((operand_18480 = enumerator_18480.nextObject ()))) {
      macroValidPointer (operand_18480) ;
      { const GGS_basic_type _var_18751 = operand_18480->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (518)) ; // CAST instruction
        if (_var_18751.getPtr () != NULL) {
          macroValidPointer (_var_18751.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_18751.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_18751.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (519)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (519)) ;
            }
          }else{
            operand_18480->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "Internal error, task "))._operator_concat (operand_18480->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (520))))._operator_concat (GGS_string (true, " has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (521)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (523)),  GGS_string (true, "Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (523)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (525)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (true, 0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19126 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19126 = NULL ;
    while (((operand_19126 = enumerator_19126.nextObject ()))) {
      macroValidPointer (operand_19126) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_19126->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (531)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (532)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (532)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (534)),  GGS_string (true, "Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (534)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (535)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (538)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (540)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (542)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (545)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (545)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (547)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (549)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (552)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (552)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (554)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (559)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (559)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string (true, "too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (563)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (566)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (566))._add_operation (_inLexique, GGS_uint64 (true, 1LLU) COMMA_SOURCE_FILE_AT_LINE (566)),  GGS_string (true, "too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (566)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string (true, "too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (571)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string (true, "$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (583))._add_operation (_inLexique, GGS_uint (true, 4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (583)) COMMA_SOURCE_FILE_AT_LINE (583)) COMMA_SOURCE_FILE_AT_LINE (583)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (585)) COMMA_SOURCE_FILE_AT_LINE (585)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string (true, "alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (605)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string (true, "alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (606)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string (true, "alarm_callback") COMMA_SOURCE_FILE_AT_LINE (607)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string (true, "alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (608)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_22259 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_22259 = NULL ;
    while (((operand_22259 = enumerator_22259.nextObject ()))) {
      macroValidPointer (operand_22259) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_22259->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)) ;
      { const GGS_action_obj _var_23335 = var_cas_alarm_action ; // CAST instruction
        if (_var_23335.getPtr () != NULL) {
          macroValidPointer (_var_23335.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_23335.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_23335.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (619)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (619)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (619)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (620)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (620)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (620)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_23335.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_23335.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (623)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (623)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (623)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_23335.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_23335.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (626)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (626)))._operator_concat (GGS_string (true, "_callback")) COMMA_SOURCE_FILE_AT_LINE (626)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_23335.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_23335.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (629)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (629)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (629)) ;
          }else{
            operand_22259->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown action found") COMMA_SOURCE_FILE_AT_LINE (631)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_22259->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (635)) ;
      { const GGS_autostart_obj _var_24258 = var_cas_autostart ; // CAST instruction
        if (_var_24258.getPtr () != NULL) {
          macroValidPointer (_var_24258.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_24258.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (638)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (639)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (640)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_24258.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (642)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (643)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (644)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_24258.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_24258.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_STATE$"),  GGS_string (true, "ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (646)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (647)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (647)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (647)) COMMA_SOURCE_FILE_AT_LINE (647)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (648)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (648)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) ;
          }else{
            operand_22259->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (650)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_22259->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (654)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM_NAME$"),  operand_22259->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (655)) COMMA_SOURCE_FILE_AT_LINE (655)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ALARM$"),  (operand_22259->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (656)))._operator_concat (GGS_string (true, "_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (656)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (657)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (657)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (660)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (661)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_24790 = var_cas_app_for_obj ;
          if (_temp_24790._isBuilt ()) {
            _temp_24790 (HERE)->method_get (_inLexique, operand_22259->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (663)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (664)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string (true, "") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string (true, "") ;
  {
    GGS_stringset::cEnumerator enumerator_25087 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (674)), true) ;
    if (enumerator_25087 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string (true, "CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCstring ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_25087 ;
      do{
        var_cas_alarm_imp.appendCstring ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_25087._key (HERE)) ;
        var_cas_alarm_imp.appendCstring ("_alarm_desc") ;
        var_cas_alarm_ids.appendCstring ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_25087._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (680))) ;
        var_cas_alarm_ids.appendCstring ("\n") ;
        var_cas_alarm_ids.appendCstring ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_25087._key (HERE)) ;
        var_cas_alarm_ids.appendCstring (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_25087._key (HERE)) ;
        var_cas_alarm_ids.appendCstring ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_25087.next () ;
        _foreach_loop_25087 = (enumerator_25087 .hc ()) ;
        if (_foreach_loop_25087) {
          var_cas_alarm_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_25087) ;
      var_cas_alarm_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (690)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (691)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (692)) COMMA_SOURCE_FILE_AT_LINE (692)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_26335 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_26335 = NULL ;
    while (((operand_26335 = enumerator_26335.nextObject ()))) {
      macroValidPointer (operand_26335) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (true, 0U) ;
      var_cas_prio_as_basic = operand_26335->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (716)) ;
      var_cas_act_as_basic = operand_26335->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)) ;
      { const GGS_basic_type _var_26766 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_26766.getPtr () != NULL) {
          macroValidPointer (_var_26766.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_26766.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_26766.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (720)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (721)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (722)) ;
          }
        }
      }
      { const GGS_basic_type _var_26955 = var_cas_act_as_basic ; // CAST instruction
        if (_var_26955.getPtr () != NULL) {
          macroValidPointer (_var_26955.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_26955.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_26955.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (725)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (726)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (727)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_26335->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (true, 1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (737)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_27171 = var_cas_tl ;
    if (_temp_27171._isBuilt ()) {
      _temp_27171 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (738)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_27298 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_27298 = NULL ;
    while (((operand_27298 = enumerator_27298.nextObject ()))) {
      macroValidPointer (operand_27298) ;
      if (((operand_27298->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_27298->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (748)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_27298->name, var_cas_actual_prio, operand_27298->act COMMA_SOURCE_FILE_AT_LINE (751)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (770)))._operator_isNotEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_28358 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_28358 = NULL ;
      while (((operand_28358 = enumerator_28358.nextObject ()))) {
        macroValidPointer (operand_28358) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (true, 0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (true, 0U) ;
        var_cas_prio_as_basic = operand_28358->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (782)) ;
        const GGS_isr_obj  _temp_28611 = operand_28358->mInfo.isr ;
        if (_temp_28611._isBuilt ()) {
          _temp_28611 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (783)) ;
        }
        { const GGS_basic_type _var_28817 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_28817.getPtr () != NULL) {
            macroValidPointer (_var_28817.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_28817.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_28817.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (786)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (787)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (788)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_28358->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (801)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (true, 0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (803)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_29284 = var_cas_il ;
      if (_temp_29284._isBuilt ()) {
        _temp_29284 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (804)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_29438 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_29438 = NULL ;
      while (((operand_29438 = enumerator_29438.nextObject ()))) {
        macroValidPointer (operand_29438) ;
        if (((operand_29438->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_29438->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (814)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_29438->name, var_cas_actual_prio, operand_29438->act COMMA_SOURCE_FILE_AT_LINE (817)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_30835 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_30835 = NULL ;
    while (((operand_30835 = enumerator_30835.nextObject ()))) {
      macroValidPointer (operand_30835) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (true, 0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (true, 0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string (true, "") ;
      {
        GGS_task_map::cEnumerator enumerator_30979 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_30979 = NULL ;
        while (((operand_30979 = enumerator_30979.nextObject ()))) {
          macroValidPointer (operand_30979) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_30979->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (856)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30835->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (858)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_31269 = var_cas_prio_for_task ;
            if (_temp_31269._isBuilt ()) {
              _temp_31269 (HERE)->method_get (_inLexique, operand_30979->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (862)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (866)) ;
            var_cas_rez_comment.appendCstring (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_30979->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (867))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (867))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_31585 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_31585 = NULL ;
        while (((operand_31585 = enumerator_31585.nextObject ()))) {
          macroValidPointer (operand_31585) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_31585->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (871)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30835->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (873)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_31873 = var_cas_prio_for_isr ;
            if (_temp_31873._isBuilt ()) {
              _temp_31873 (HERE)->method_get (_inLexique, operand_31585->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (877)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (881)) ;
            var_cas_rez_comment.appendCstring (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_31585->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (882))) ;
            var_cas_rez_comment.appendCstring (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (882))) ;
            var_cas_rez_comment.appendCstring (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (true, " none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_32445 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32445 = NULL ;
        while (((operand_32445 = enumerator_32445.nextObject ()))) {
          macroValidPointer (operand_32445) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32445->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (895)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30835->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (897)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_32735 = var_cas_prio_for_task ;
            if (_temp_32735._isBuilt ()) {
              _temp_32735 (HERE)->method_get (_inLexique, operand_32445->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (901)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (903)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_32930 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_32930 = NULL ;
        while (((operand_32930 = enumerator_32930.nextObject ()))) {
          macroValidPointer (operand_32930) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_32930->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (908)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_30835->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (910)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33218 = var_cas_prio_for_isr ;
            if (_temp_33218._isBuilt ()) {
              _temp_33218 (HERE)->method_get (_inLexique, operand_32930->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (914)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (916)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_30835->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (921)) ;
      var_cas_comments.modifier_put (_inLexique, operand_30835->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (922)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (true, 1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 1U) ;
  GGS_uint _variant_35035 = var_cas_max_prio ;
  GGS_bool _condition_35035 (_variant_35035._isBuilt (), true) ;
  while (_condition_35035.isBuiltAndTrue ()) {
    _condition_35035 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_35035.isBuiltAndTrue ()) {
      if (_variant_35035.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (967)) ;
        _condition_35035 = GGS_bool (true, false) ;
      }else{
        _variant_35035._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (true, 0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_34379 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_34379 = NULL ;
          while (((operand_34379 = enumerator_34379.nextObject ()))) {
            macroValidPointer (operand_34379) ;
            if (((operand_34379->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_34379->mInfo.act COMMA_SOURCE_FILE_AT_LINE (952)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_34528 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_34528 = NULL ;
          while (((operand_34528 = enumerator_34528.nextObject ()))) {
            macroValidPointer (operand_34528) ;
            if (((operand_34528->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_34528->mInfo.act COMMA_SOURCE_FILE_AT_LINE (955)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_34677 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_34677 = NULL ;
          while (((operand_34677 = enumerator_34677.nextObject ()))) {
            macroValidPointer (operand_34677) ;
            if (((operand_34677->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_34677->mInfo.act COMMA_SOURCE_FILE_AT_LINE (958)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (963)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (966)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_35215 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_35215 = NULL ;
    while (((operand_35215 = enumerator_35215.nextObject ()))) {
      macroValidPointer (operand_35215) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_35215->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (979)) ;
      {
        GGS_ident_map::cEnumerator enumerator_35271 (operand_35215->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (980)), true) ;
        const GGS_ident_map::cElement * operand_35271 = NULL ;
        while (((operand_35271 = enumerator_35271.nextObject ()))) {
          macroValidPointer (operand_35271) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35271->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (981)) COMMA_SOURCE_FILE_AT_LINE (981)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35271->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (982)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35429 (operand_35215->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (985)), true) ;
        const GGS_ident_map::cElement * operand_35429 = NULL ;
        while (((operand_35429 = enumerator_35429.nextObject ()))) {
          macroValidPointer (operand_35429) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35429->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (986)) COMMA_SOURCE_FILE_AT_LINE (986)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35429->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (987)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35586 (operand_35215->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (990)), true) ;
        const GGS_ident_map::cElement * operand_35586 = NULL ;
        while (((operand_35586 = enumerator_35586.nextObject ()))) {
          macroValidPointer (operand_35586) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35586->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (991)) COMMA_SOURCE_FILE_AT_LINE (991)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35586->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (992)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35745 (operand_35215->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (995)), true) ;
        const GGS_ident_map::cElement * operand_35745 = NULL ;
        while (((operand_35745 = enumerator_35745.nextObject ()))) {
          macroValidPointer (operand_35745) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35745->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (996)) COMMA_SOURCE_FILE_AT_LINE (996)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35745->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (997)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_35909 (operand_35215->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1000)), true) ;
        const GGS_ident_map::cElement * operand_35909 = NULL ;
        while (((operand_35909 = enumerator_35909.nextObject ()))) {
          macroValidPointer (operand_35909) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_35909->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1001)) COMMA_SOURCE_FILE_AT_LINE (1001)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_35909->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1002)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36070 (operand_35215->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1005)), true) ;
        const GGS_ident_map::cElement * operand_36070 = NULL ;
        while (((operand_36070 = enumerator_36070.nextObject ()))) {
          macroValidPointer (operand_36070) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_36070->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1006)) COMMA_SOURCE_FILE_AT_LINE (1006)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_36070->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1007)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string (true, "task") COMMA_SOURCE_FILE_AT_LINE (1029)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (true, false) ;
  {
    GGS_task_map::cEnumerator enumerator_36916 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_36916 = NULL ;
    while (((operand_36916 = enumerator_36916.nextObject ()))) {
      macroValidPointer (operand_36916) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_36916->mKey,  operand_36916->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1038)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1042)) COMMA_SOURCE_FILE_AT_LINE (1042)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1043)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1043)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1044)))._operator_concat (GGS_string (true, "_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1044)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1045)))._operator_concat (GGS_string (true, "_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1045)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1046)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1046)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1047)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1047)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_ID$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1048)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1048)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string (true, "") ;
      if (((operand_36916->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1055)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1057)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_TYPE$"), GGS_string (true, "TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1059)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "event_masks") COMMA_SOURCE_FILE_AT_LINE (1061)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$EXEC_NAME$"),  operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string (true, "$TASK_EVENT_STRUCT$"),  (operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1063)))._operator_concat (GGS_string (true, "_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1063)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1066)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_38603 = var_cas_actual_priorities ;
      if (_temp_38603._isBuilt ()) {
        _temp_38603 (HERE)->method_get (_inLexique, operand_36916->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1069)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_36916->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1077)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1077)))._operator_isEqual (GGS_string (true, "NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true, true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_36916->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1082)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true, true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_39278 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_39278 = NULL ;
          while (((operand_39278 = enumerator_39278.nextObject ()))) {
            macroValidPointer (operand_39278) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_39422 = var_cas_resources ;
              if (_temp_39422._isBuilt ()) {
                _temp_39422 (HERE)->method_get (_inLexique, operand_39278->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1087)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1088)) ;
              { const GGS_resource_property_obj _var_39817 = var_cas_rez_prop ; // CAST instruction
                if (_var_39817.getPtr () != NULL) {
                  macroValidPointer (_var_39817.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_39817.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  ((GGS_string (true, "&"))._operator_concat (operand_39278->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1091))))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1091)) ;
                    var_cas_no_internal_rez_found = GGS_bool (true, false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_PTR$"),  GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (1098)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1102)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_36916->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      { const GGS_basic_type _var_40436 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_40436.getPtr () != NULL) {
          macroValidPointer (_var_40436.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_40436.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_40436.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1108)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1108)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1109)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1110)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_36916->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      { const GGS_task_autostart_obj _var_40977 = var_cas_autostart ; // CAST instruction
        if (_var_40977.getPtr () != NULL) {
          macroValidPointer (_var_40977.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_40977.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1117)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_40977.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_STATE$"), GGS_string (true, "SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1119)) ;
          }else{
            operand_36916->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1121)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_36916->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_41159 = var_cas_timing_prot ;
      if (_temp_41159._isBuilt ()) {
        _temp_41159 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_36916->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1127)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1128)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1129)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1132)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1133)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_41579 = var_cas_app_for_obj ;
          if (_temp_41579._isBuilt ()) {
            _temp_41579 (HERE)->method_get (_inLexique, operand_36916->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1135)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1136)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string (true, "extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1154)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1155)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1155)) COMMA_SOURCE_FILE_AT_LINE (1155)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1156)) COMMA_SOURCE_FILE_AT_LINE (1156)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string (true, "isr") COMMA_SOURCE_FILE_AT_LINE (1177)) ;
  {
    GGS_isr_map::cEnumerator enumerator_43134 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_43134 = NULL ;
    while (((operand_43134 = enumerator_43134.nextObject ()))) {
      macroValidPointer (operand_43134) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string (true, "") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_43134->mKey,  operand_43134->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_NAME$"),  operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) COMMA_SOURCE_FILE_AT_LINE (1187)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_FUNCTION$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1188)))._operator_concat (GGS_string (true, "_function")) COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1189)))._operator_concat (GGS_string (true, "_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STATIC$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1190)))._operator_concat (GGS_string (true, "_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_CONTEXT$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1191)))._operator_concat (GGS_string (true, "_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1191)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EXEC_STACK$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1192)))._operator_concat (GGS_string (true, "_STACK")) COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_HELPER$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1193)))._operator_concat (GGS_string (true, "_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1193)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_ID$"),  (operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1195)))._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_43969 = var_cas_actual_priorities ;
      if (_temp_43969._isBuilt ()) {
        _temp_43969 (HERE)->method_get (_inLexique, operand_43134->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1198)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1199)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1200)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_44136 = operand_43134->mInfo.isr ;
      if (_temp_44136._isBuilt ()) {
        _temp_44136 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1202)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1203)) COMMA_SOURCE_FILE_AT_LINE (1203)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_43134->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_44384 = var_cas_timing_prot ;
      if (_temp_44384._isBuilt ()) {
        _temp_44384 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_43134->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1209)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1209)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1210)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1211)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1214)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1215)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_44739 = var_cas_app_for_obj ;
          if (_temp_44739._isBuilt ()) {
            _temp_44739 (HERE)->method_get (_inLexique, operand_43134->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1217)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1218)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1233)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1237)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1237)) COMMA_SOURCE_FILE_AT_LINE (1237)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1238)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string (true, "") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string (true, "counter") COMMA_SOURCE_FILE_AT_LINE (1255)) ;
  {
    GGS_counter_map::cEnumerator enumerator_45962 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_45962 = NULL ;
    while (((operand_45962 = enumerator_45962.nextObject ()))) {
      macroValidPointer (operand_45962) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string (true, "") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_NAME$"),  operand_45962->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1261)) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER$"),  (operand_45962->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1262)))._operator_concat (GGS_string (true, "_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_45962->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      { const GGS_basic_type _var_46514 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_46514.getPtr () != NULL) {
          macroValidPointer (_var_46514.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_46514.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_46514.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1267)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1267)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1268)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1269)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      var_cas_counters_cst.appendCstring ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_45962->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1271))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_45962->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      { const GGS_basic_type _var_46921 = var_cas_max_as_basic ; // CAST instruction
        if (_var_46921.getPtr () != NULL) {
          macroValidPointer (_var_46921.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_46921.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_46921.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1275)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1275)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1276)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1277)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      var_cas_counters_cst.appendCstring ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_45962->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1279))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_45962->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      { const GGS_basic_type _var_47319 = var_cas_min_as_basic ; // CAST instruction
        if (_var_47319.getPtr () != NULL) {
          macroValidPointer (_var_47319.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_47319.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_47319.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1283)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1283)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1284)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1285)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1286)) ;
      var_cas_counters_cst.appendCstring ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_45962->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1287))) ;
      var_cas_counters_cst.appendCstring (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCstring ("\n"
        "\n") ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1293)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_45962->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1294)) ;
        { const GGS_counter_type _var_47943 = var_cas_type ; // CAST instruction
          if (_var_47943.getPtr () != NULL) {
            macroValidPointer (_var_47943.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_47943.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_47943.getPtr ()))) {
              var_cas_tmp = GGS_string (true, "HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1298)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1299)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1300)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1303)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_48128 = var_cas_app_for_obj ;
          if (_temp_48128._isBuilt ()) {
            _temp_48128 (HERE)->method_get (_inLexique, operand_45962->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1305)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1306)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1314)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string (true, "") ;
  if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1322)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string (true, "") ;
    {
      GGS_counter_map::cEnumerator enumerator_48775 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_48775 = enumerator_48775.nextObject () ;
      if ((operand_48775 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string (true, "#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCstring ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCstring ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_48775 ;
        do{
          macroValidPointer (operand_48775) ;
          var_cas_counter_table.appendCstring ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_48775->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1330))) ;
          var_cas_counter_table.appendCstring ("_counter_desc") ;
          var_cas_counter_ids.appendCstring ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_48775->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1331))) ;
          var_cas_counter_ids.appendCstring ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1331))) ;
          var_cas_counter_ids.appendCstring ("\n") ;
          var_cas_counter_ids.appendCstring ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_48775->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1332))) ;
          var_cas_counter_ids.appendCstring (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_48775->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1332))) ;
          var_cas_counter_ids.appendCstring ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_48775 = enumerator_48775.nextObject () ;
          _foreach_loop_48775 = ((operand_48775 != NULL)) ;
          if (_foreach_loop_48775) {
            var_cas_counter_table.appendCstring (",\n") ;
            var_cas_counter_ids.appendCstring ("\n") ;
          }
        }while (_foreach_loop_48775) ;
        var_cas_counter_table.appendCstring ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1340)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1340)) COMMA_SOURCE_FILE_AT_LINE (1340)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1341)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1342)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1343)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string (true, "") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string (true, "resource") COMMA_SOURCE_FILE_AT_LINE (1363)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string (true, "internal_resource") COMMA_SOURCE_FILE_AT_LINE (1364)) ;
  {
    GGS_resource_map::cEnumerator enumerator_50503 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_50503 = NULL ;
    while (((operand_50503 = enumerator_50503.nextObject ()))) {
      macroValidPointer (operand_50503) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_50503->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1369)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_50503->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1372)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_50790 = var_cas_rez_prio ;
      if (_temp_50790._isBuilt ()) {
        _temp_50790 (HERE)->method_get (_inLexique, operand_50503->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1376)) ;
      }
      const GGS_string_map  _temp_50843 = var_cas_rez_comments ;
      if (_temp_50843._isBuilt ()) {
        _temp_50843 (HERE)->method_get (_inLexique, operand_50503->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1377)) ;
      }
      { const GGS_resource_property_obj _var_51347 = var_cas_rez_prop ; // CAST instruction
        if (_var_51347.getPtr () != NULL) {
          macroValidPointer (_var_51347.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_51347.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_51347.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_51347.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string (true, "") ;
            operand_50503->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1391)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE_NAME$"),  operand_50503->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1393)) COMMA_SOURCE_FILE_AT_LINE (1393)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$RESOURCE$"),  (operand_50503->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1394)))._operator_concat (GGS_string (true, "_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1394)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1396)) COMMA_SOURCE_FILE_AT_LINE (1396)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1397)) ;
      if ((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1399)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1400)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_51769 = var_cas_app_for_obj ;
          if (_temp_51769._isBuilt ()) {
            _temp_51769 (HERE)->method_get (_inLexique, operand_50503->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1402)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string (true, "_id")) COMMA_SOURCE_FILE_AT_LINE (1403)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string (true, "") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string (true, "") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_52084 (var_cas_regular_rez, true) ;
    while (enumerator_52084.hc ()) {
      var_cas_rez_ids.appendCstring ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_52084._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1415))) ;
      var_cas_rez_ids.appendCstring ("\n") ;
      var_cas_rez_ids.appendCstring ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_52084._key (HERE)) ;
      var_cas_rez_ids.appendCstring (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_52084._key (HERE)) ;
      var_cas_rez_ids.appendCstring ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_52084.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string (true, "res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_52318 (var_cas_regular_rez, true) ;
    if (enumerator_52318 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string (true, "CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_52318 ;
      do{
        var_cas_rez_imp.appendCstring ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_52318._key (HERE)) ;
        var_cas_rez_imp.appendCstring ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_52318.next () ;
        _foreach_loop_52318 = (enumerator_52318 .hc ()) ;
        if (_foreach_loop_52318) {
          var_cas_rez_imp.appendCstring (",\n") ;
        }
      }while (_foreach_loop_52318) ;
      var_cas_rez_imp.appendCstring ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string (true, "\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1434)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string (true, "$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1435)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1435)) COMMA_SOURCE_FILE_AT_LINE (1435)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1436)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_prefix_map   /* var_cas_p */,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string (true, "") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string (true, "event") COMMA_SOURCE_FILE_AT_LINE (1453)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_54105 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_54105 = NULL ;
    while (((operand_54105 = enumerator_54105.nextObject ()))) {
      macroValidPointer (operand_54105) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_54105->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1473)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (true, 0LLU) ;
      {
        GGS_lstringlist::cEnumerator enumerator_54281 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_54281 = NULL ;
        while (((operand_54281 = enumerator_54281.nextObject ()))) {
          macroValidPointer (operand_54281) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_54359 = var_cas_events ;
          if (_temp_54359._isBuilt ()) {
            _temp_54359 (HERE)->method_get (_inLexique, operand_54281->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1477)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1479)) ;
          { const GGS_event_mask_obj _var_55261 = var_cas_mask_obj ; // CAST instruction
            if (_var_55261.getPtr () != NULL) {
              macroValidPointer (_var_55261.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_55261.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_55261.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1482)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1482))))._operator_isEqual (GGS_uint64 (true, 0LLU))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1484)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1484))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1486)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MASK of event "))._operator_concat (operand_54281->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1486))))._operator_concat (GGS_string (true, " conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1487)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_55261.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_54281->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) COMMA_SOURCE_FILE_AT_LINE (1490))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_54281->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1492)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1493)) ;
                }else{
                  var_cas_count = GGS_uint (true, 1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_54281->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1497)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_54281->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1502)) COMMA_SOURCE_FILE_AT_LINE (1502))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_54281->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1504)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_54105->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1506))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_54281->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1507)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_54105->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1510)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_55738 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_55738 = NULL ;
    while (((operand_55738 = enumerator_55738.nextObject ()))) {
      macroValidPointer (operand_55738) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_55738->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1518)) ;
      { const GGS_event_mask_obj _var_56183 = var_cas_evt_mask ; // CAST instruction
        if (_var_56183.getPtr () != NULL) {
          macroValidPointer (_var_56183.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_56183.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_56183.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_55738->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1522)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1522)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_55738->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1523)) COMMA_SOURCE_FILE_AT_LINE (1523)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1524)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1524)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1524)) COMMA_SOURCE_FILE_AT_LINE (1524)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCstring ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_56347 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_56347 = NULL ;
    while (((operand_56347 = enumerator_56347.nextObject ()))) {
      macroValidPointer (operand_56347) ;
      var_cas_sort_evts._addAssign_operation (operand_56347->mKey, operand_56347->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_56519 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_56519 = NULL ;
    while (((operand_56519 = enumerator_56519.nextObject ()))) {
      macroValidPointer (operand_56519) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_56519->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1546)) COMMA_SOURCE_FILE_AT_LINE (1546))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_56632 = var_cas_tasks_for_event ;
        if (_temp_56632._isBuilt ()) {
          _temp_56632 (HERE)->method_get (_inLexique, operand_56519->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1548)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (true, 0LLU) ;
        {
          GGS_stringset::cEnumerator enumerator_56701 (var_cas_tasks, true) ;
          while (enumerator_56701.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_56765 = var_cas_task_mask ;
            if (_temp_56765._isBuilt ()) {
              _temp_56765 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_56701._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1552)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_56701.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (true, 1LLU) ;
        GGS_uint _variant_57097 = GGS_uint (true, 32U) ;
        GGS_bool _condition_57097 (_variant_57097._isBuilt (), true) ;
        while (_condition_57097.isBuiltAndTrue ()) {
          _condition_57097 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1559))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (true, 0LLU))) ;
          if (_condition_57097.isBuiltAndTrue ()) {
            if (_variant_57097.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1561)) ;
              _condition_57097 = GGS_bool (true, false) ;
            }else{
              _variant_57097._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1560)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1562)))).isBuiltAndTrue ()) {
          operand_56519->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "All event mask bits are already use, event "))._operator_concat (operand_56519->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1563))))._operator_concat (GGS_string (true, " can't be created")) COMMA_SOURCE_FILE_AT_LINE (1564)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_57396 (var_cas_tasks, true) ;
          while (enumerator_57396.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_57396._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1569)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_57396._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1571)) ;
            enumerator_57396.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT$"),  (operand_56519->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)))._operator_concat (GGS_string (true, "_mask")) COMMA_SOURCE_FILE_AT_LINE (1575)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_NAME$"),  operand_56519->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1576)) COMMA_SOURCE_FILE_AT_LINE (1576)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string (true, "$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1577)) COMMA_SOURCE_FILE_AT_LINE (1577)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCstring ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string (true, "$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1656)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string (true, "") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (true, 0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (true, false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1675)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string (true, "POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1677))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_61102 = var_cas_config ;
    if (_temp_61102._isBuilt ()) {
      _temp_61102 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1679)) ;
    }
    { const GGS_basic_type _var_61331 = var_cas_pw ; // CAST instruction
      if (_var_61331.getPtr () != NULL) {
        macroValidPointer (_var_61331.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_61331.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_61331.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1682)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1684)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1685)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_61375 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_61375 = NULL ;
    while (((operand_61375 = enumerator_61375.nextObject ()))) {
      macroValidPointer (operand_61375) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_61588 = GGS_uint (true, 32U) ;
        GGS_bool _condition_61588 (_variant_61588._isBuilt (), true) ;
        while (_condition_61588.isBuiltAndTrue ()) {
          _condition_61588 = (operand_61375->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_61588.isBuiltAndTrue ()) {
            if (_variant_61588.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1695)) ;
              _condition_61588 = GGS_bool (true, false) ;
            }else{
              _variant_61588._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1694)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_61375->fifosize ;
      }
      var_cas_fifo.appendCstring ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1699))) ;
      var_cas_fifo.appendCstring ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1699))) ;
      var_cas_fifo.appendCstring ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1700)) ;
    }
  }
  var_cas_fifo.appendCstring ("\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1706)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1706))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  GGS_uint _variant_62091 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1707)) ;
  GGS_bool _condition_62091 (_variant_62091._isBuilt (), true) ;
  while (_condition_62091.isBuiltAndTrue ()) {
    _condition_62091 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_62091.isBuiltAndTrue ()) {
      if (_variant_62091.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1713)) ;
        _condition_62091 = GGS_bool (true, false) ;
      }else{
        _variant_62091._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCstring ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCstring (",") ;
        }
        var_cas_fifo.appendCstring ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1712)) ;
      }
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (true, 0U) ;
  var_cas_fifo.appendCstring ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1717)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1717))) ;
  var_cas_fifo.appendCstring ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_62246 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_62246 = NULL ;
    while (((operand_62246 = enumerator_62246.nextObject ()))) {
      macroValidPointer (operand_62246) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (true, 1U) ;
        GGS_uint _variant_62459 = GGS_uint (true, 32U) ;
        GGS_bool _condition_62459 (_variant_62459._isBuilt (), true) ;
        while (_condition_62459.isBuiltAndTrue ()) {
          _condition_62459 = (operand_62246->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_62459.isBuiltAndTrue ()) {
            if (_variant_62459.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1725)) ;
              _condition_62459 = GGS_bool (true, false) ;
            }else{
              _variant_62459._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1724)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1726)) ;
      }else{
        var_cas_max_size = operand_62246->fifosize ;
      }
      var_cas_fifo.appendCstring ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1730))) ;
      var_cas_fifo.appendCstring ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1730))) ;
      var_cas_fifo.appendCstring (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCstring (",") ;
      }
      var_cas_fifo.appendCstring ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1733)) ;
    }
  }
  var_cas_fifo.appendCstring ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1737)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (1738)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1738)) COMMA_SOURCE_FILE_AT_LINE (1738)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*

