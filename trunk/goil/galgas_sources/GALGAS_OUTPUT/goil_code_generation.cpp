//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.5                         *
//                    november 25th, 2009, at 14h59'25"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 614
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString ()) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7222 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7222.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7452 = var_cas_startuphook ; // CAST instruction
    if (_var_7452.getPtr () != NULL) {
      macroValidPointer (_var_7452.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7452.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7452.getPtr ()) ;
        const GGS_bool cond_7435 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
        if (cond_7435.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7693 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7693.getPtr () != NULL) {
      macroValidPointer (_var_7693.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7693.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7693.getPtr ()) ;
        const GGS_bool cond_7676 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
        if (cond_7676.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7919 = var_cas_errorhook ; // CAST instruction
    if (_var_7919.getPtr () != NULL) {
      macroValidPointer (_var_7919.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7919.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7919.getPtr ()) ;
        const GGS_bool cond_7902 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
        if (cond_7902.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8156 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8156.getPtr () != NULL) {
      macroValidPointer (_var_8156.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8156.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8156.getPtr ()) ;
        const GGS_bool cond_8139 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
        if (cond_8139.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8398 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8398.getPtr () != NULL) {
      macroValidPointer (_var_8398.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8398.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8398.getPtr ()) ;
        const GGS_bool cond_8381 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        if (cond_8381.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8653 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8653.getPtr () != NULL) {
      macroValidPointer (_var_8653.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8653.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8653.getPtr ()) ;
        const GGS_bool cond_8636 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        if (cond_8636.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8923 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8923.getPtr () != NULL) {
      macroValidPointer (_var_8923.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8923.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8923.getPtr ()) ;
        const GGS_bool cond_8906 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        if (cond_8906.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9178 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9178.getPtr () != NULL) {
      macroValidPointer (_var_9178.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9178.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9178.getPtr ()) ;
        const GGS_bool cond_9161 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        if (cond_9161.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9364 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (237)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (241)) COMMA_SOURCE_FILE_AT_LINE (241))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
  const GGS_bool cond_9919 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9919.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_9919.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11462 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_11462.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10334 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ; // CAST instruction
      if (_var_10334.getPtr () != NULL) {
        macroValidPointer (_var_10334.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10334.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10334.getPtr ()) ;
          const GGS_bool cond_10313 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
          if (cond_10313.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10512 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ; // CAST instruction
      if (_var_10512.getPtr () != NULL) {
        macroValidPointer (_var_10512.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10512.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10512.getPtr ()) ;
          const GGS_bool cond_10491 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
          if (cond_10491.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10820 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10820 = NULL ;
      while (((operand_10820 = enumerator_10820.nextObject ()))) {
        macroValidPointer (operand_10820) ;
        { const GGS_timing_prot _var_11018 = operand_10820->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ; // CAST instruction
          if (_var_11018.getPtr () != NULL) {
            macroValidPointer (_var_11018.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11018.getPtr ()))) {
            }else{
              const GGS_bool cond_10998 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_10998.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11067 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_11067 = NULL ;
      while (((operand_11067 = enumerator_11067.nextObject ()))) {
        macroValidPointer (operand_11067) ;
        { const GGS_timing_prot _var_11262 = operand_11067->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ; // CAST instruction
          if (_var_11262.getPtr () != NULL) {
            macroValidPointer (_var_11262.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11262.getPtr ()))) {
            }else{
              const GGS_bool cond_11242 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11242.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11401 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11401.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11528 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
  if (temp_11528.isBuilt ()) {
    temp_11528 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11694 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), true) ;
    const GGS_ident_map::cElement * operand_11694 = NULL ;
    while (((operand_11694 = enumerator_11694.nextObject ()))) {
      macroValidPointer (operand_11694) ;
      { const GGS_basic_type _var_11932 = operand_11694->mInfo.value ; // CAST instruction
        if (_var_11932.getPtr () != NULL) {
          macroValidPointer (_var_11932.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11932.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11932.getPtr ()) ;
            const GGS_bool cond_11903 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
            if (cond_11903.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11694->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
  const GGS_bool cond_12497 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("arm")) ;
  if (cond_12497.isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (cond_12497.isBuiltAndFalse ()) {
    const GGS_bool cond_12568 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("avr")) ;
    if (cond_12568.isBuiltAndTrue ()) {
      var_cas_trampoline_target = GGS_string ("avr") ;
    }else if (cond_12568.isBuiltAndFalse ()) {
      const GGS_bool cond_12640 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("c166")) ;
      if (cond_12640.isBuiltAndTrue ()) {
        var_cas_trampoline_target = GGS_string ("c166") ;
      }else if (cond_12640.isBuiltAndFalse ()) {
        const GGS_bool cond_12714 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h")) ;
        if (cond_12714.isBuiltAndTrue ()) {
          var_cas_trampoline_target = GGS_string ("h8300h") ;
        }else if (cond_12714.isBuiltAndFalse ()) {
          const GGS_bool cond_12787 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12")) ;
          if (cond_12787.isBuiltAndTrue ()) {
            var_cas_trampoline_target = GGS_string ("hcs12") ;
          }else if (cond_12787.isBuiltAndFalse ()) {
            const GGS_bool cond_12861 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl")) ;
            if (cond_12861.isBuiltAndTrue ()) {
              var_cas_trampoline_target = GGS_string ("libpcl") ;
            }else if (cond_12861.isBuiltAndFalse ()) {
              const GGS_bool cond_12934 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix")) ;
              if (cond_12934.isBuiltAndTrue ()) {
                var_cas_trampoline_target = GGS_string ("posix") ;
              }else if (cond_12934.isBuiltAndFalse ()) {
                const GGS_bool cond_13011 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2")) ;
                if (cond_13011.isBuiltAndTrue ()) {
                  var_cas_trampoline_target = GGS_string ("posix_vp2") ;
                }else if (cond_13011.isBuiltAndFalse ()) {
                  const GGS_bool cond_13082 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc")) ;
                  if (cond_13082.isBuiltAndTrue ()) {
                    var_cas_trampoline_target = GGS_string ("ppc") ;
                  }else if (cond_13082.isBuiltAndFalse ()) {
                    const GGS_bool cond_13154 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e")) ;
                    if (cond_13154.isBuiltAndTrue ()) {
                      var_cas_trampoline_target = GGS_string ("v850e") ;
                    }else if (cond_13154.isBuiltAndFalse ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (338)) ;
                      var_cas_trampoline_target = GGS_string ("") ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_trampoline_target_name (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_trampoline_target_name (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptor kFunction_descriptor_trampoline_target_name ("trampoline_target_name",
                              functionForGenericCall_trampoline_target_name,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13495 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13495 = NULL ;
    while (((operand_13495 = enumerator_13495.nextObject ()))) {
      macroValidPointer (operand_13495) ;
      const GGS_bool cond_13560 = (var_cas_first).operator_not () ;
      if (cond_13560.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13495->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (351))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (354)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (362)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (365)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (366)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (366)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (367)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (368)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (368)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (369)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (369)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (372)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (372)) ;
  const GGS_bool cond_14546 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14546.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (374)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (374)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (374)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (375)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (378)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) ;
  const GGS_bool cond_14885 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14885.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (380)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (380)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (381)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (383)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_15284 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_15284.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_15284.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15498 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (391)) ;
  if (temp_15498.isBuilt ()) {
    temp_15498 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (394))) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_LINKSCRIPT"), (function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (395)) COMMA_SOURCE_FILE_AT_LINE (395))).operator_isNotEqual (GGS_string ("")) COMMA_SOURCE_FILE_AT_LINE (395))) ;
  var_cas_flags.dotAssign_operation (function_bool_class_make_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (397)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (397))) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (399)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$SCRIPT_FILE$"),  function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (402)) COMMA_SOURCE_FILE_AT_LINE (402)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_16182 = gOption_goil_5F_options_posix_5F_it.value () ;
  if (cond_16182.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (412)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (413)) ;
  const GGS_string temp_16332 = var_cas_makefileStr ;
  if (temp_16332.isBuilt ()) {
    temp_16332 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (415)) ;
  }
  GGS_string var_cas_makerulesStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (418)) ;
  GGS_string var_cas_filename = (var_cas_directory).operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget = function_trampoline_target_name (inLexique COMMA_SOURCE_FILE_AT_LINE (420)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (421)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (422)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (424)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (424)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (424)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (425)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (425)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (425)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (426)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (426)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (426)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (429)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (431)) COMMA_SOURCE_FILE_AT_LINE (431)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (432)) COMMA_SOURCE_FILE_AT_LINE (432)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (433)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (435)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (437)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (437)) COMMA_SOURCE_FILE_AT_LINE (437)) COMMA_SOURCE_FILE_AT_LINE (437)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (438)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (438)) COMMA_SOURCE_FILE_AT_LINE (438)) COMMA_SOURCE_FILE_AT_LINE (438)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_17832 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17832.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_17832.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (448)) ;
  const GGS_bool cond_18110 = (var_cas_filename.reader_fileExists ()).operator_not () ;
  if (cond_18110.isBuiltAndTrue ()) {
    const GGS_string temp_18090 = var_cas_makerulesStr ;
    if (temp_18090.isBuilt ()) {
      temp_18090 (HERE)->method_writeToFile (inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (450)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (466)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (467)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (468)) ;
  const GGS_bool cond_18636 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_18636.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_18636.isBuiltAndFalse ()) {
    const GGS_bool cond_18694 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_18694.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_18694.isBuiltAndFalse ()) {
      const GGS_bool cond_18758 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_18758.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_18758.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (481)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (492)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (493)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (494)) ;
  const GGS_bool cond_19112 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_19112.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19112.isBuiltAndFalse ()) {
    const GGS_bool cond_19170 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_19170.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19170.isBuiltAndFalse ()) {
      const GGS_bool cond_19234 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_19234.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19234.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (507)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_19570 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_19570.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19570.isBuiltAndFalse ()) {
    const GGS_bool cond_19629 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_19629.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19629.isBuiltAndFalse ()) {
      const GGS_bool cond_19694 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_19694.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19694.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (533)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (554)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (554)) COMMA_SOURCE_FILE_AT_LINE (554)) ;
  const GGS_bool cond_20259 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20259.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (557)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (560)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (560)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (562)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20780 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20780 = NULL ;
    while (((operand_20780 = enumerator_20780.nextObject ()))) {
      macroValidPointer (operand_20780) ;
      { const GGS_basic_type _var_21048 = operand_20780->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (568)) ; // CAST instruction
        if (_var_21048.getPtr () != NULL) {
          macroValidPointer (_var_21048.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_21048.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_21048.getPtr ()) ;
            const GGS_bool cond_20930 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (569))).operator_strictSup (var_cas_max_act) ;
            if (cond_20930.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (569)) ;
            }
          }else{
            operand_20780->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_20780->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (570)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (571)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (573)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (575)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_21417 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_21417 = NULL ;
    while (((operand_21417 = enumerator_21417.nextObject ()))) {
      macroValidPointer (operand_21417) ;
      GGS_lstringlist  var_cas_evts = operand_21417->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (581)) ;
      const GGS_bool cond_21554 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_21554.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (584)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (584)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (585)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (588)) ;
  const GGS_bool cond_21815 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21815.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (590)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (592)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (595)) ;
  const GGS_bool cond_22103 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22103.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (597)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (599)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) ;
  const GGS_bool cond_22395 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22395.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (604)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (606)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (609)) ;
  const GGS_bool cond_22691 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22691.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (611)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  const GGS_bool cond_23079 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_23079.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (618)) ;
  }else if (cond_23079.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (620)) ;
  }
  const GGS_bool cond_23160 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_23160.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (623)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (624)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (627)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (627)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (627)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (629)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_23627 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_23627 = NULL ;
    while (((operand_23627 = enumerator_23627.nextObject ()))) {
      macroValidPointer (operand_23627) ;
      { const GGS_app_trusted_obj _var_23787 = operand_23627->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (635)) ; // CAST instruction
        if (_var_23787.getPtr () != NULL) {
          macroValidPointer (_var_23787.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_23787.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_23787.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_23706 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (637)), true) ;
              while (enumerator_23706.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_23706._key (HERE)) ;
                enumerator_23706.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (643)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (643)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (644)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (647)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (649)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (659)) COMMA_SOURCE_FILE_AT_LINE (659)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (661)) COMMA_SOURCE_FILE_AT_LINE (661)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (674)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (675)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (676)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (677)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_25238 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_25238 = NULL ;
    while (((operand_25238 = enumerator_25238.nextObject ()))) {
      macroValidPointer (operand_25238) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_25238->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (686)) ;
      { const GGS_action_obj _var_26301 = var_cas_alarm_action ; // CAST instruction
        if (_var_26301.getPtr () != NULL) {
          macroValidPointer (_var_26301.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_26301.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_26301.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (690)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (690))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (690)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (691)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (691))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (691)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_26301.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_26301.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (694)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (694))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (694)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_26301.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_26301.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (697)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (697))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (697)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_26301.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_26301.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (700)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }else{
            operand_25238->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (702)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_25238->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ;
      { const GGS_autostart_obj _var_27211 = var_cas_autostart ; // CAST instruction
        if (_var_27211.getPtr () != NULL) {
          macroValidPointer (_var_27211.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_27211.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (709)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (710)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (711)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_27211.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (713)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (714)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (715)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_27211.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_27211.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (717)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (718)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718)) COMMA_SOURCE_FILE_AT_LINE (718)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (719)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (719)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (719)) COMMA_SOURCE_FILE_AT_LINE (719)) ;
          }else{
            operand_25238->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (721)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_25238->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (725)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_25238->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (726)) COMMA_SOURCE_FILE_AT_LINE (726)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_25238->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (727))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (727)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (728))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (728)) ;
      const GGS_bool cond_27851 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_27851.isBuiltAndTrue ()) {
        const GGS_bool cond_27835 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_27835.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_27736 = var_cas_app_for_obj ;
          if (temp_27736.isBuilt ()) {
            temp_27736 (HERE)->method_get (inLexique, operand_25238->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (734)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (735)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_28026 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (745)), true) ;
    if (enumerator_28026 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_28026 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_28026._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_28026._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (751))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_28026._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_28026._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_28026.next () ;
        _foreach_loop_28026 = (enumerator_28026 .hasCurrentObject ()) ;
        if (_foreach_loop_28026) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_28026) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (761)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (762)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (763)) COMMA_SOURCE_FILE_AT_LINE (763)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_29264 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_29264 = NULL ;
    while (((operand_29264 = enumerator_29264.nextObject ()))) {
      macroValidPointer (operand_29264) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_29264->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (787)) ;
      var_cas_act_as_basic = operand_29264->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (788)) ;
      { const GGS_basic_type _var_29687 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_29687.getPtr () != NULL) {
          macroValidPointer (_var_29687.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29687.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29687.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (792)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (793)) ;
          }
        }
      }
      { const GGS_basic_type _var_29873 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29873.getPtr () != NULL) {
          macroValidPointer (_var_29873.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29873.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29873.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (796)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (797)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (798)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_29264->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_30114 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_30114.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_30084 = var_cas_tl ;
    if (temp_30084.isBuilt ()) {
      temp_30084 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (809)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_30209 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_30209 = NULL ;
    while (((operand_30209 = enumerator_30209.nextObject ()))) {
      macroValidPointer (operand_30209) ;
      const GGS_bool cond_30465 = (operand_30209->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_30465.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_30209->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (819)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_30209->name, var_cas_actual_prio, operand_30209->act COMMA_SOURCE_FILE_AT_LINE (822)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_32808 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_32808.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_31258 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_31258 = NULL ;
      while (((operand_31258 = enumerator_31258.nextObject ()))) {
        macroValidPointer (operand_31258) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_31258->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (853)) ;
        const GGS_isr_obj  temp_31506 = operand_31258->mInfo.isr ;
        if (temp_31506.isBuilt ()) {
          temp_31506 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (854)) ;
        }
        { const GGS_basic_type _var_31709 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_31709.getPtr () != NULL) {
            macroValidPointer (_var_31709.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_31709.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_31709.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (857)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (858)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (859)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_31258->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (872)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_32202 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_32202.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_32168 = var_cas_il ;
      if (temp_32168.isBuilt ()) {
        temp_32168 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (875)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_32320 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_32320 = NULL ;
      while (((operand_32320 = enumerator_32320.nextObject ()))) {
        macroValidPointer (operand_32320) ;
        const GGS_bool cond_32596 = (operand_32320->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_32596.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_32320->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (885)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_32320->name, var_cas_actual_prio, operand_32320->act COMMA_SOURCE_FILE_AT_LINE (888)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_32808.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_33704 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_33704 = NULL ;
    while (((operand_33704 = enumerator_33704.nextObject ()))) {
      macroValidPointer (operand_33704) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33845 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33845 = NULL ;
        while (((operand_33845 = enumerator_33845.nextObject ()))) {
          macroValidPointer (operand_33845) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33845->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (927)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33704->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (929)) ;
          const GGS_bool cond_34393 = var_cas_owned ;
          if (cond_34393.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34130 = var_cas_prio_for_task ;
            if (temp_34130.isBuilt ()) {
              temp_34130 (HERE)->method_get (inLexique, operand_33845->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (933)) ;
            }
            const GGS_bool cond_34245 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34245.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (937)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33845->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34439 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34439 = NULL ;
        while (((operand_34439 = enumerator_34439.nextObject ()))) {
          macroValidPointer (operand_34439) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34439->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (942)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33704->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (944)) ;
          const GGS_bool cond_34987 = var_cas_owned ;
          if (cond_34987.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34723 = var_cas_prio_for_isr ;
            if (temp_34723.isBuilt ()) {
              temp_34723 (HERE)->method_get (inLexique, operand_34439->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (948)) ;
            }
            const GGS_bool cond_34839 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34839.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (952)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_34439->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (953))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (953))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_35097 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_35097.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_35286 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_35286 = NULL ;
        while (((operand_35286 = enumerator_35286.nextObject ()))) {
          macroValidPointer (operand_35286) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35286->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (966)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33704->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (968)) ;
          const GGS_bool cond_35715 = var_cas_owned ;
          if (cond_35715.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35571 = var_cas_prio_for_task ;
            if (temp_35571.isBuilt ()) {
              temp_35571 (HERE)->method_get (inLexique, operand_35286->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (972)) ;
            }
            const GGS_bool cond_35695 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35695.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (974)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35761 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35761 = NULL ;
        while (((operand_35761 = enumerator_35761.nextObject ()))) {
          macroValidPointer (operand_35761) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35761->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (979)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33704->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (981)) ;
          const GGS_bool cond_36190 = var_cas_owned ;
          if (cond_36190.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_36045 = var_cas_prio_for_isr ;
            if (temp_36045.isBuilt ()) {
              temp_36045 (HERE)->method_get (inLexique, operand_35761->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (985)) ;
            }
            const GGS_bool cond_36170 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_36170.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (987)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_33704->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (992)) ;
      var_cas_comments.modifier_put (inLexique, operand_33704->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (993)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37834 = var_cas_max_prio ;
  GGS_bool _condition_37834 (_variant_37834.isBuilt (), true) ;
  while (_condition_37834.isBuiltAndTrue ()) {
    _condition_37834 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37834.isBuiltAndTrue ()) {
      if (_variant_37834.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1038)) ;
        _condition_37834 = GGS_bool (false) ;
      }else{
        _variant_37834.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_37191 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_37191 = NULL ;
          while (((operand_37191 = enumerator_37191.nextObject ()))) {
            macroValidPointer (operand_37191) ;
            const GGS_bool cond_37283 = (operand_37191->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37283.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37191->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1023)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37337 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_37337 = NULL ;
          while (((operand_37337 = enumerator_37337.nextObject ()))) {
            macroValidPointer (operand_37337) ;
            const GGS_bool cond_37429 = (operand_37337->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37429.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37337->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1026)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37483 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_37483 = NULL ;
          while (((operand_37483 = enumerator_37483.nextObject ()))) {
            macroValidPointer (operand_37483) ;
            const GGS_bool cond_37575 = (operand_37483->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37575.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37483->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1029)) ;
            }
          }
        }
        const GGS_bool cond_37772 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_37772.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1034)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_38010 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_38010 = NULL ;
    while (((operand_38010 = enumerator_38010.nextObject ()))) {
      macroValidPointer (operand_38010) ;
      GGS_string var_cas_app_name = operand_38010->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)) ;
      {
        GGS_ident_map::cEnumerator enumerator_38065 (operand_38010->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
        const GGS_ident_map::cElement * operand_38065 = NULL ;
        while (((operand_38065 = enumerator_38065.nextObject ()))) {
          macroValidPointer (operand_38065) ;
          const GGS_bool cond_38185 = (var_cas_app_for_obj.reader_hasKey (operand_38065->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)))).operator_not () ;
          if (cond_38185.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38065->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1053)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38220 (operand_38010->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), true) ;
        const GGS_ident_map::cElement * operand_38220 = NULL ;
        while (((operand_38220 = enumerator_38220.nextObject ()))) {
          macroValidPointer (operand_38220) ;
          const GGS_bool cond_38339 = (var_cas_app_for_obj.reader_hasKey (operand_38220->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)))).operator_not () ;
          if (cond_38339.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38220->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1058)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38374 (operand_38010->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), true) ;
        const GGS_ident_map::cElement * operand_38374 = NULL ;
        while (((operand_38374 = enumerator_38374.nextObject ()))) {
          macroValidPointer (operand_38374) ;
          const GGS_bool cond_38495 = (var_cas_app_for_obj.reader_hasKey (operand_38374->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)))).operator_not () ;
          if (cond_38495.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38374->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1063)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38530 (operand_38010->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)), true) ;
        const GGS_ident_map::cElement * operand_38530 = NULL ;
        while (((operand_38530 = enumerator_38530.nextObject ()))) {
          macroValidPointer (operand_38530) ;
          const GGS_bool cond_38656 = (var_cas_app_for_obj.reader_hasKey (operand_38530->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)))).operator_not () ;
          if (cond_38656.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38530->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1068)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38691 (operand_38010->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)), true) ;
        const GGS_ident_map::cElement * operand_38691 = NULL ;
        while (((operand_38691 = enumerator_38691.nextObject ()))) {
          macroValidPointer (operand_38691) ;
          const GGS_bool cond_38814 = (var_cas_app_for_obj.reader_hasKey (operand_38691->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1072)))).operator_not () ;
          if (cond_38814.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38691->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1073)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38849 (operand_38010->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)), true) ;
        const GGS_ident_map::cElement * operand_38849 = NULL ;
        while (((operand_38849 = enumerator_38849.nextObject ()))) {
          macroValidPointer (operand_38849) ;
          const GGS_bool cond_38973 = (var_cas_app_for_obj.reader_hasKey (operand_38849->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1077)))).operator_not () ;
          if (cond_38973.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38849->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1078)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1100)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39772 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39772 = NULL ;
    while (((operand_39772 = enumerator_39772.nextObject ()))) {
      macroValidPointer (operand_39772) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_39772->mKey,  operand_39772->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1114)) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1115))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1116))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1117))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1118))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1118)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1119))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1120))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_40958 = (operand_39772->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1127)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_40958.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1129)) ;
      }else if (cond_40958.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1131)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1133)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1135))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1135)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1138)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_41443 = var_cas_actual_priorities ;
      if (temp_41443.isBuilt ()) {
        temp_41443 (HERE)->method_get (inLexique, operand_39772->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1141)) ;
      }
      const GGS_bool cond_41714 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_41714.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_41903 = (operand_39772->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1149))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_41903.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1151)) ;
      }else if (cond_41903.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_39772->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1154)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_42111 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_42111 = NULL ;
          while (((operand_42111 = enumerator_42111.nextObject ()))) {
            macroValidPointer (operand_42111) ;
            const GGS_bool cond_42670 = var_cas_no_internal_rez_found ;
            if (cond_42670.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_42254 = var_cas_resources ;
              if (temp_42254.isBuilt ()) {
                temp_42254 (HERE)->method_get (inLexique, operand_42111->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1159)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1160)) ;
              { const GGS_resource_property_obj _var_42645 = var_cas_rez_prop ; // CAST instruction
                if (_var_42645.getPtr () != NULL) {
                  macroValidPointer (_var_42645.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_42645.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_42111->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1163)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_42819 = var_cas_no_internal_rez_found ;
        if (cond_42819.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1170)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39772->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      { const GGS_basic_type _var_43252 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_43252.getPtr () != NULL) {
          macroValidPointer (_var_43252.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_43252.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_43252.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1180)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1180)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1181)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39772->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      { const GGS_task_autostart_obj _var_43788 = var_cas_autostart ; // CAST instruction
        if (_var_43788.getPtr () != NULL) {
          macroValidPointer (_var_43788.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43788.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1189)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43788.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1191)) ;
          }else{
            operand_39772->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1193)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_39772->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43966 = var_cas_timing_prot ;
      if (temp_43966.isBuilt ()) {
        temp_43966 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1199)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1199)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1200)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1201)) ;
      const GGS_bool cond_44914 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_44914.isBuiltAndTrue ()) {
        const GGS_bool cond_44827 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_44827.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_44382 = var_cas_app_for_obj ;
          if (temp_44382.isBuilt ()) {
            temp_44382 (HERE)->method_get (inLexique, operand_39772->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1207)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1208)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_44596 = var_cas_apps ;
          if (temp_44596.isBuilt ()) {
            temp_44596 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1212)) ;
          }
          { const GGS_app_trusted_obj _var_44739 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)) ; // CAST instruction
            if (_var_44739.getPtr () != NULL) {
              macroValidPointer (_var_44739.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44739.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)) COMMA_SOURCE_FILE_AT_LINE (1216)) ;
        }else if (cond_44827.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1218)) ;
        }
      }else if (cond_44914.isBuiltAndFalse ()) {
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1221)) ;
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_45398 = var_cas_non_preemptable_exists ;
  if (cond_45398.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1238)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1239)) COMMA_SOURCE_FILE_AT_LINE (1239)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1240)) COMMA_SOURCE_FILE_AT_LINE (1240)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1257)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_46400 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_46400 = NULL ;
    while (((operand_46400 = enumerator_46400.nextObject ()))) {
      macroValidPointer (operand_46400) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_46400->mKey,  operand_46400->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1271)) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1272))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1273))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1274))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1274)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1275))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1275)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1276))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1277))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1277)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1279))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1279)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_47222 = var_cas_actual_priorities ;
      if (temp_47222.isBuilt ()) {
        temp_47222 (HERE)->method_get (inLexique, operand_46400->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1282)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1283)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1284)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_47385 = operand_46400->mInfo.isr ;
      if (temp_47385.isBuilt ()) {
        temp_47385 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1286)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1287)) COMMA_SOURCE_FILE_AT_LINE (1287)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_46400->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1290)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_47628 = var_cas_timing_prot ;
      if (temp_47628.isBuilt ()) {
        temp_47628 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_46400->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1293)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1294)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1295)) ;
      const GGS_bool cond_48438 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_48438.isBuiltAndTrue ()) {
        const GGS_bool cond_48422 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_48422.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_47979 = var_cas_app_for_obj ;
          if (temp_47979.isBuilt ()) {
            temp_47979 (HERE)->method_get (inLexique, operand_46400->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1301)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1302)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_48192 = var_cas_apps ;
          if (temp_48192.isBuilt ()) {
            temp_48192 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1306)) ;
          }
          { const GGS_app_trusted_obj _var_48335 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1307)) ; // CAST instruction
            if (_var_48335.getPtr () != NULL) {
              macroValidPointer (_var_48335.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_48335.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1308)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1310)) COMMA_SOURCE_FILE_AT_LINE (1310)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1325)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1329)) COMMA_SOURCE_FILE_AT_LINE (1329)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1330)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1343)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_49516 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_49516 = NULL ;
    while (((operand_49516 = enumerator_49516.nextObject ()))) {
      macroValidPointer (operand_49516) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_49516->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_49516->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1352))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_49516->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1354))) ;
      const GGS_bool cond_49910 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_49910.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1359)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_49516->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) ;
      { const GGS_basic_type _var_50247 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_50247.getPtr () != NULL) {
          macroValidPointer (_var_50247.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50247.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50247.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1366)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1367)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_49516->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)) ;
      { const GGS_basic_type _var_50648 = var_cas_max_as_basic ; // CAST instruction
        if (_var_50648.getPtr () != NULL) {
          macroValidPointer (_var_50648.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50648.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50648.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1373)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1374)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1375)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_49516->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)) ;
      { const GGS_basic_type _var_51040 = var_cas_min_as_basic ; // CAST instruction
        if (_var_51040.getPtr () != NULL) {
          macroValidPointer (_var_51040.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_51040.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_51040.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1382)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1383)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_52128 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_52128.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_49516->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1391)) ;
        { const GGS_counter_type _var_51658 = var_cas_type ; // CAST instruction
          if (_var_51658.getPtr () != NULL) {
            macroValidPointer (_var_51658.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_51658.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_51658.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1396)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1397)) ;
        const GGS_bool cond_51870 = (operand_49516->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1399))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_51870.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1400)) ;
        }else if (cond_51870.isBuiltAndFalse ()) {
          const GGS_bool cond_52092 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_52092.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_51983 = var_cas_app_for_obj ;
            if (temp_51983.isBuilt ()) {
              temp_51983 (HERE)->method_get (inLexique, operand_49516->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1404)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1405)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_53388 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_53388.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_52645 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_52645 = enumerator_52645.nextObject () ;
      if ((operand_52645 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_52645 ;
        do{
          macroValidPointer (operand_52645) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_52645->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1430))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52645->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1431))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1431))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52645->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1432))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52645->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1432))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_52645 = enumerator_52645.nextObject () ;
          _foreach_loop_52645 = ((operand_52645 != NULL)) ;
          if (_foreach_loop_52645) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_52645) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)) COMMA_SOURCE_FILE_AT_LINE (1440)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1441)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1442)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1443)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1458)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1459)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_54319 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_54319 = NULL ;
    while (((operand_54319 = enumerator_54319.nextObject ()))) {
      macroValidPointer (operand_54319) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_54319->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1466)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_54319->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1469)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_54600 = var_cas_rez_prio ;
      if (temp_54600.isBuilt ()) {
        temp_54600 (HERE)->method_get (inLexique, operand_54319->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1473)) ;
      }
      const GGS_string_map  temp_54652 = var_cas_rez_comments ;
      if (temp_54652.isBuilt ()) {
        temp_54652 (HERE)->method_get (inLexique, operand_54319->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1474)) ;
      }
      { const GGS_resource_property_obj _var_55148 = var_cas_rez_prop ; // CAST instruction
        if (_var_55148.getPtr () != NULL) {
          macroValidPointer (_var_55148.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_55148.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_55148.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_55148.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_54319->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1488)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_54319->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) COMMA_SOURCE_FILE_AT_LINE (1490)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_54319->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1491))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1491)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1493)) COMMA_SOURCE_FILE_AT_LINE (1493)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1494)) ;
      const GGS_bool cond_55682 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_55682.isBuiltAndTrue ()) {
        const GGS_bool cond_55666 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_55666.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_55564 = var_cas_app_for_obj ;
          if (temp_55564.isBuilt ()) {
            temp_55564 (HERE)->method_get (inLexique, operand_54319->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1499)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1500)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_55873 (var_cas_regular_rez, true) ;
    while (enumerator_55873.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55873._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1512))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55873._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55873._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_55873.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_56109 (var_cas_regular_rez, true) ;
    if (enumerator_56109 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("#define OS_START_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n") ;
      var_cas_rez_imp.appendCString ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_56109 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_56109._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_56109.next () ;
        _foreach_loop_56109 = (enumerator_56109 .hasCurrentObject ()) ;
        if (_foreach_loop_56109) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_56109) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
      var_cas_rez_imp.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n"
        "\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1535)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1536)) COMMA_SOURCE_FILE_AT_LINE (1536)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1537)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1549)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_58065 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_58065 = NULL ;
    while (((operand_58065 = enumerator_58065.nextObject ()))) {
      macroValidPointer (operand_58065) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_58065->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1572)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_58238 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_58238 = NULL ;
        while (((operand_58238 = enumerator_58238.nextObject ()))) {
          macroValidPointer (operand_58238) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_58315 = var_cas_events ;
          if (temp_58315.isBuilt ()) {
            temp_58315 (HERE)->method_get (inLexique, operand_58238->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1576)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1578)) ;
          { const GGS_event_mask_obj _var_59205 = var_cas_mask_obj ; // CAST instruction
            if (_var_59205.getPtr () != NULL) {
              macroValidPointer (_var_59205.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59205.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_59205.getPtr ()) ;
                const GGS_bool cond_58656 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_58656.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1583))) ;
                }else if (cond_58656.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1585)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_58238->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1585)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1586)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_59205.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_59055 = var_cas_evt_usage.reader_hasKey (operand_58238->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1589))) ;
                if (cond_59055.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_58238->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1591)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1592)) ;
                }else if (cond_59055.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_58238->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1596)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_59415 = var_cas_tasks_for_event.reader_hasKey (operand_58238->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1601))) ;
          if (cond_59415.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_58238->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1603)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_58065->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1605))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_58238->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_58065->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1609)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_59673 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_59673 = NULL ;
    while (((operand_59673 = enumerator_59673.nextObject ()))) {
      macroValidPointer (operand_59673) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_59673->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1617)) ;
      { const GGS_event_mask_obj _var_60111 = var_cas_evt_mask ; // CAST instruction
        if (_var_60111.getPtr () != NULL) {
          macroValidPointer (_var_60111.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_60111.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_60111.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59673->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1621))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1621)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59673->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1622)) COMMA_SOURCE_FILE_AT_LINE (1622)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1623)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1623)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1623)) COMMA_SOURCE_FILE_AT_LINE (1623)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_60272 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_60272 = NULL ;
    while (((operand_60272 = enumerator_60272.nextObject ()))) {
      macroValidPointer (operand_60272) ;
      var_cas_sort_evts.addAssign_operation (operand_60272->mKey, operand_60272->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_60442 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_60442 = NULL ;
    while (((operand_60442 = enumerator_60442.nextObject ()))) {
      macroValidPointer (operand_60442) ;
      const GGS_bool cond_61777 = var_cas_tasks_for_event.reader_hasKey (operand_60442->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1645))) ;
      if (cond_61777.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_60554 = var_cas_tasks_for_event ;
        if (temp_60554.isBuilt ()) {
          temp_60554 (HERE)->method_get (inLexique, operand_60442->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1647)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_60621 (var_cas_tasks, true) ;
          while (enumerator_60621.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_60684 = var_cas_task_mask ;
            if (temp_60684.isBuilt ()) {
              temp_60684 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60621._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1651)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_60621.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_61011 = GGS_uint (32U) ;
        GGS_bool _condition_61011 (_variant_61011.isBuilt (), true) ;
        while (_condition_61011.isBuiltAndTrue ()) {
          _condition_61011 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_61011.isBuiltAndTrue ()) {
            if (_variant_61011.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1660)) ;
              _condition_61011 = GGS_bool (false) ;
            }else{
              _variant_61011.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1659)) ;
            }
          }
        }
        const GGS_bool cond_61182 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1661))) ;
        if (cond_61182.isBuiltAndTrue ()) {
          operand_60442->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_60442->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1662)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1663)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_61306 (var_cas_tasks, true) ;
          while (enumerator_61306.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_61306._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1668)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_61306._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1670)) ;
            enumerator_61306.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_60442->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1674))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1674)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_60442->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1675)) COMMA_SOURCE_FILE_AT_LINE (1675)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1676)) COMMA_SOURCE_FILE_AT_LINE (1676)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1755)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1774)) ;
  const GGS_bool cond_65190 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_65190.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_64949 = var_cas_config ;
    if (temp_64949.isBuilt ()) {
      temp_64949 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1778)) ;
    }
    { const GGS_basic_type _var_65176 = var_cas_pw ; // CAST instruction
      if (_var_65176.getPtr () != NULL) {
        macroValidPointer (_var_65176.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_65176.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_65176.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1781)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1783)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1784)) ;
        }
      }
    }
  }
  var_cas_fifo.appendCString ("#define OS_START_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65300 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65300 = NULL ;
    while (((operand_65300 = enumerator_65300.nextObject ()))) {
      macroValidPointer (operand_65300) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65529 = var_cas_powerof2 ;
      if (cond_65529.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65510 = GGS_uint (32U) ;
        GGS_bool _condition_65510 (_variant_65510.isBuilt (), true) ;
        while (_condition_65510.isBuiltAndTrue ()) {
          _condition_65510 = (operand_65300->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65510.isBuiltAndTrue ()) {
            if (_variant_65510.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1796)) ;
              _condition_65510 = GGS_bool (false) ;
            }else{
              _variant_65510.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1795)) ;
            }
          }
        }
      }else if (cond_65529.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65300->fifosize ;
      }
      var_cas_fifo.appendCString ("VAR(tpl_proc_id, OS_VAR) tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1800))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1800))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1807)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1807))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_66025 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1808)) ;
  GGS_bool _condition_66025 (_variant_66025.isBuilt (), true) ;
  while (_condition_66025.isBuiltAndTrue ()) {
    _condition_66025 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_66025.isBuiltAndTrue ()) {
      if (_variant_66025.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1814)) ;
        _condition_66025 = GGS_bool (false) ;
      }else{
        _variant_66025.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_65975 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_65975.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1813)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_fifo.appendCString ("#define OS_START_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("CONST(tpl_priority_level, OS_CONST) tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1822)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1822))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_66358 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_66358 = NULL ;
    while (((operand_66358 = enumerator_66358.nextObject ()))) {
      macroValidPointer (operand_66358) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_66611 = var_cas_powerof2 ;
      if (cond_66611.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_66568 = GGS_uint (32U) ;
        GGS_bool _condition_66568 (_variant_66568.isBuilt (), true) ;
        while (_condition_66568.isBuiltAndTrue ()) {
          _condition_66568 = (operand_66358->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_66568.isBuiltAndTrue ()) {
            if (_variant_66568.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1830)) ;
              _condition_66568 = GGS_bool (false) ;
            }else{
              _variant_66568.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1829)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1831)) ;
      }else if (cond_66611.isBuiltAndFalse ()) {
        var_cas_max_size = operand_66358->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1835))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1835))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_66793 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_66793.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1844)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1845)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1845)) COMMA_SOURCE_FILE_AT_LINE (1845)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1861)) ;
  const GGS_bool cond_76679 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_76679.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    const GGS_bool cond_76591 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_76591.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1867)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1868)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1869)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1872)) ;
      const GGS_bool cond_68084 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1873))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_68084.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1874)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1877)) ;
      const GGS_bool cond_68267 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1878))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_68267.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1879)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1882)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1885)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1891)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1890)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1897)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1896)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1906)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1908)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1904)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1914)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1924)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1923)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1929)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1930)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1931)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1927)) ;
      const GGS_com  temp_69700 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1934)) ;
      if (temp_69700.isBuilt ()) {
        temp_69700 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1934)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1937)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1938)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1936)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1943)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1942)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1950)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1949)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1958)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1959)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1960)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1956)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1970)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1971)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1967)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1981)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1982)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1980)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1987)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1995)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1994)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2003)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2011)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2012)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2010)) ;
      const GGS_bool cond_72563 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_72563.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2019)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2018)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2026)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (2024)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2032)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2034)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2035)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2028)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2040)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2039)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2047)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2046)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2054)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2055)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2056)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2057)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2058)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2059)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2060)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2053)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2064)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2073)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2076)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2083)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2090)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2091)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2092)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2093)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2094)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2095)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2096)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2097)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2098)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_76576 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_76576.isBuiltAndTrue ()) {
        const GGS_bool cond_75142 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75142.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2109)) ;
        }
        const GGS_string temp_75196 = var_cas_header ;
        if (temp_75196.isBuilt ()) {
          temp_75196 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2111)) ;
        }
        const GGS_bool cond_75340 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75340.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2113)) ;
        }
        const GGS_string temp_75398 = var_cas_obj_header ;
        if (temp_75398.isBuilt ()) {
          temp_75398 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2115)) ;
        }
        const GGS_bool cond_75550 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75550.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2117)) ;
        }
        const GGS_string temp_75612 = var_cas_implementation ;
        if (temp_75612.isBuilt ()) {
          temp_75612 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2119)) ;
        }
        const GGS_bool cond_75759 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75759.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2121)) ;
        }
        const GGS_string temp_75812 = var_cas_types ;
        if (temp_75812.isBuilt ()) {
          temp_75812 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2123)) ;
        }
        const GGS_bool cond_76516 = gOption_goil_5F_options_generate_5F_makefile.value () ;
        if (cond_76516.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent () ;
          const GGS_bool cond_76098 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_76098.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_76246 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
          if (cond_76246.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2131)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2134)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ().reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (2133)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2140)) ;
      }
    }else if (cond_76591.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2143)) ;
    }
  }else if (cond_76679.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2146)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

