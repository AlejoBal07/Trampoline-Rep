//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.6                         *
//                     december 3rd, 2009, at 10h29'52"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 621
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (84)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (124)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (149)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (169)).reader_uppercaseString ()) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7330 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (172)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (172))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7330.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) ;
  { const GGS_basic_type _var_7560 = var_cas_startuphook ; // CAST instruction
    if (_var_7560.getPtr () != NULL) {
      macroValidPointer (_var_7560.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7560.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7560.getPtr ()) ;
        const GGS_bool cond_7543 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
        if (cond_7543.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
  { const GGS_basic_type _var_7801 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7801.getPtr () != NULL) {
      macroValidPointer (_var_7801.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7801.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7801.getPtr ()) ;
        const GGS_bool cond_7784 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) ;
        if (cond_7784.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) ;
  { const GGS_basic_type _var_8027 = var_cas_errorhook ; // CAST instruction
    if (_var_8027.getPtr () != NULL) {
      macroValidPointer (_var_8027.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8027.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8027.getPtr ()) ;
        const GGS_bool cond_8010 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ;
        if (cond_8010.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ;
  { const GGS_basic_type _var_8264 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8264.getPtr () != NULL) {
      macroValidPointer (_var_8264.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8264.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8264.getPtr ()) ;
        const GGS_bool cond_8247 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
        if (cond_8247.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
  { const GGS_basic_type _var_8506 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8506.getPtr () != NULL) {
      macroValidPointer (_var_8506.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8506.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8506.getPtr ()) ;
        const GGS_bool cond_8489 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (208)) ;
        if (cond_8489.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) ;
  { const GGS_basic_type _var_8761 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8761.getPtr () != NULL) {
      macroValidPointer (_var_8761.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8761.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8761.getPtr ()) ;
        const GGS_bool cond_8744 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
        if (cond_8744.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (219)) ;
  { const GGS_basic_type _var_9031 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_9031.getPtr () != NULL) {
      macroValidPointer (_var_9031.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9031.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9031.getPtr ()) ;
        const GGS_bool cond_9014 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) ;
        if (cond_9014.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
  { const GGS_basic_type _var_9286 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9286.getPtr () != NULL) {
      macroValidPointer (_var_9286.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9286.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9286.getPtr ()) ;
        const GGS_bool cond_9269 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
        if (cond_9269.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9472 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ; // CAST instruction
    if (_var_9472.getPtr () != NULL) {
      macroValidPointer (_var_9472.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9472.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9472.getPtr ()) ;
        const GGS_bool cond_9455 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (235)) ;
        if (cond_9455.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (239)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (239))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (242)) COMMA_SOURCE_FILE_AT_LINE (242))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (243)) COMMA_SOURCE_FILE_AT_LINE (243))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (246)) ;
  const GGS_bool cond_10027 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_10027.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (248))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_10027.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11576 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_11576.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10448 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ; // CAST instruction
      if (_var_10448.getPtr () != NULL) {
        macroValidPointer (_var_10448.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10448.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10448.getPtr ()) ;
          const GGS_bool cond_10427 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) ;
          if (cond_10427.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10626 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ; // CAST instruction
      if (_var_10626.getPtr () != NULL) {
        macroValidPointer (_var_10626.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10626.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10626.getPtr ()) ;
          const GGS_bool cond_10605 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (265)) ;
          if (cond_10605.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10934 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10934 = NULL ;
      while (((operand_10934 = enumerator_10934.nextObject ()))) {
        macroValidPointer (operand_10934) ;
        { const GGS_timing_prot _var_11132 = operand_10934->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (275)) ; // CAST instruction
          if (_var_11132.getPtr () != NULL) {
            macroValidPointer (_var_11132.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11132.getPtr ()))) {
            }else{
              const GGS_bool cond_11112 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11112.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11181 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_11181 = NULL ;
      while (((operand_11181 = enumerator_11181.nextObject ()))) {
        macroValidPointer (operand_11181) ;
        { const GGS_timing_prot _var_11376 = operand_11181->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (283)) ; // CAST instruction
          if (_var_11376.getPtr () != NULL) {
            macroValidPointer (_var_11376.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11376.getPtr ()))) {
            }else{
              const GGS_bool cond_11356 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11356.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11515 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11515.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11642 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (298)) ;
  if (temp_11642.isBuilt ()) {
    temp_11642 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (298)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11808 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (305)), true) ;
    const GGS_ident_map::cElement * operand_11808 = NULL ;
    while (((operand_11808 = enumerator_11808.nextObject ()))) {
      macroValidPointer (operand_11808) ;
      { const GGS_basic_type _var_12046 = operand_11808->mInfo.value ; // CAST instruction
        if (_var_12046.getPtr () != NULL) {
          macroValidPointer (_var_12046.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_12046.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_12046.getPtr ()) ;
            const GGS_bool cond_12017 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (308)) ;
            if (cond_12017.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11808->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (309))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (317)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12635 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12635 = NULL ;
    while (((operand_12635 = enumerator_12635.nextObject ()))) {
      macroValidPointer (operand_12635) ;
      const GGS_bool cond_12700 = (var_cas_first).operator_not () ;
      if (cond_12700.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_12635->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (336)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (344)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (345)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (348)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (349)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (349)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (350)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (350)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (351)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (351)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (354)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (354)) ;
  const GGS_bool cond_13686 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_13686.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (356)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (356)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (356)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (357)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (360)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (360)) ;
  const GGS_bool cond_14025 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14025.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (362)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (362)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (366)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_14466 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_14466.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_14466.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (371)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_14680 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
  if (temp_14680.isBuilt ()) {
    temp_14680 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (375)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (378)) COMMA_SOURCE_FILE_AT_LINE (378))) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_LINKSCRIPT"), (function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (379)) COMMA_SOURCE_FILE_AT_LINE (379))).operator_isNotEqual (GGS_string ("")) COMMA_SOURCE_FILE_AT_LINE (379))) ;
  var_cas_flags.dotAssign_operation (function_bool_class_make_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (381)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (381))) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (382)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$SCRIPT_FILE$"),  function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (384)) COMMA_SOURCE_FILE_AT_LINE (384)) COMMA_SOURCE_FILE_AT_LINE (384)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_15363 = gOption_goil_5F_options_posix_5F_it.reader_value () ;
  if (cond_15363.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (393)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (394)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (396)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (398)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (398)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (398)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (399)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (399)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (399)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (400)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (400)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (400)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (403)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (405)) COMMA_SOURCE_FILE_AT_LINE (405)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (406)) COMMA_SOURCE_FILE_AT_LINE (406)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (407)) COMMA_SOURCE_FILE_AT_LINE (407)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (409)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (411)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (411)) COMMA_SOURCE_FILE_AT_LINE (411)) COMMA_SOURCE_FILE_AT_LINE (411)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (412)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (412)) COMMA_SOURCE_FILE_AT_LINE (412)) COMMA_SOURCE_FILE_AT_LINE (412)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_16641 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_16641.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_16641.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (422)) ;
  const GGS_string temp_16833 = var_cas_makefileStr ;
  if (temp_16833.isBuilt ()) {
    temp_16833 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (423)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (437)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (438)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (439)) ;
  const GGS_bool cond_17380 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_17380.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_17380.isBuiltAndFalse ()) {
    const GGS_bool cond_17438 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_17438.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_17438.isBuiltAndFalse ()) {
      const GGS_bool cond_17502 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_17502.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_17502.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (452)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (463)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (464)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (465)) ;
  const GGS_bool cond_17856 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_17856.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_17856.isBuiltAndFalse ()) {
    const GGS_bool cond_17914 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_17914.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_17914.isBuiltAndFalse ()) {
      const GGS_bool cond_17978 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_17978.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_17978.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_18314 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_18314.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18314.isBuiltAndFalse ()) {
    const GGS_bool cond_18373 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_18373.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18373.isBuiltAndFalse ()) {
      const GGS_bool cond_18438 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_18438.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_18438.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (504)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (525)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (525)) COMMA_SOURCE_FILE_AT_LINE (525)) ;
  const GGS_bool cond_19003 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_19003.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (527)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (528)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (531)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (531)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (533)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19524 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19524 = NULL ;
    while (((operand_19524 = enumerator_19524.nextObject ()))) {
      macroValidPointer (operand_19524) ;
      { const GGS_basic_type _var_19792 = operand_19524->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (539)) ; // CAST instruction
        if (_var_19792.getPtr () != NULL) {
          macroValidPointer (_var_19792.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_19792.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_19792.getPtr ()) ;
            const GGS_bool cond_19674 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (540))).operator_strictSup (var_cas_max_act) ;
            if (cond_19674.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (540)) ;
            }
          }else{
            operand_19524->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_19524->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (541)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (542)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (544)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (544)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (546)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20161 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20161 = NULL ;
    while (((operand_20161 = enumerator_20161.nextObject ()))) {
      macroValidPointer (operand_20161) ;
      GGS_lstringlist  var_cas_evts = operand_20161->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (552)) ;
      const GGS_bool cond_20298 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_20298.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (555)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (555)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (559)) ;
  const GGS_bool cond_20559 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20559.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (563)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ;
  const GGS_bool cond_20847 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20847.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (570)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (573)) ;
  const GGS_bool cond_21139 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21139.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (575)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (577)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (580)) ;
  const GGS_bool cond_21435 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21435.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (582)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (584)) ;
  const GGS_bool cond_21823 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_21823.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (589)) ;
  }else if (cond_21823.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (591)) ;
  }
  const GGS_bool cond_21904 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21904.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (594)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (595)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (598)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (598)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (598)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (600)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22371 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22371 = NULL ;
    while (((operand_22371 = enumerator_22371.nextObject ()))) {
      macroValidPointer (operand_22371) ;
      { const GGS_app_trusted_obj _var_22531 = operand_22371->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (606)) ; // CAST instruction
        if (_var_22531.getPtr () != NULL) {
          macroValidPointer (_var_22531.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22531.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22531.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22450 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (608)), true) ;
              while (enumerator_22450.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_22450._key (HERE)) ;
                enumerator_22450.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (614)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (614)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (615)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (618)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (620)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (630)) COMMA_SOURCE_FILE_AT_LINE (630)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (632)) COMMA_SOURCE_FILE_AT_LINE (632)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (645)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (646)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (647)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (648)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_23982 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_23982 = NULL ;
    while (((operand_23982 = enumerator_23982.nextObject ()))) {
      macroValidPointer (operand_23982) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_23982->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (657)) ;
      { const GGS_action_obj _var_25045 = var_cas_alarm_action ; // CAST instruction
        if (_var_25045.getPtr () != NULL) {
          macroValidPointer (_var_25045.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25045.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25045.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (661)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (661))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (661)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (662)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (662))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (662)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25045.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25045.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (665)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (665))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (665)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25045.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25045.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (668)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (668))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (668)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25045.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25045.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (671)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (671))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (671)) ;
          }else{
            operand_23982->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (673)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_23982->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) ;
      { const GGS_autostart_obj _var_25955 = var_cas_autostart ; // CAST instruction
        if (_var_25955.getPtr () != NULL) {
          macroValidPointer (_var_25955.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_25955.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (680)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (681)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (682)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_25955.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (684)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (685)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (686)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_25955.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_25955.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (688)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (689)) COMMA_SOURCE_FILE_AT_LINE (689)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (690)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (690)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (690)) COMMA_SOURCE_FILE_AT_LINE (690)) ;
          }else{
            operand_23982->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (692)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_23982->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (696)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_23982->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (697)) COMMA_SOURCE_FILE_AT_LINE (697)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_23982->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (698))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (698)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (699)) ;
      const GGS_bool cond_26601 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_26601.isBuiltAndTrue ()) {
        const GGS_bool cond_26585 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_26585.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_26486 = var_cas_app_for_obj ;
          if (temp_26486.isBuilt ()) {
            temp_26486 (HERE)->method_get (inLexique, operand_23982->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (705)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (706)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_26776 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (716)), true) ;
    if (enumerator_26776 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_26776 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_26776._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_26776._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (722))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_26776._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_26776._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_26776.next () ;
        _foreach_loop_26776 = (enumerator_26776 .hasCurrentObject ()) ;
        if (_foreach_loop_26776) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_26776) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (732)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (733)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (734)) COMMA_SOURCE_FILE_AT_LINE (734)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28014 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28014 = NULL ;
    while (((operand_28014 = enumerator_28014.nextObject ()))) {
      macroValidPointer (operand_28014) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28014->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (758)) ;
      var_cas_act_as_basic = operand_28014->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (759)) ;
      { const GGS_basic_type _var_28437 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28437.getPtr () != NULL) {
          macroValidPointer (_var_28437.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28437.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28437.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (762)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (763)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (764)) ;
          }
        }
      }
      { const GGS_basic_type _var_28623 = var_cas_act_as_basic ; // CAST instruction
        if (_var_28623.getPtr () != NULL) {
          macroValidPointer (_var_28623.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28623.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28623.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (767)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (768)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (769)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_28014->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_28864 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_28864.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_28834 = var_cas_tl ;
    if (temp_28834.isBuilt ()) {
      temp_28834 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (780)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_28959 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_28959 = NULL ;
    while (((operand_28959 = enumerator_28959.nextObject ()))) {
      macroValidPointer (operand_28959) ;
      const GGS_bool cond_29215 = (operand_28959->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_29215.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_28959->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (790)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_28959->name, var_cas_actual_prio, operand_28959->act COMMA_SOURCE_FILE_AT_LINE (793)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_31558 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_31558.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30008 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30008 = NULL ;
      while (((operand_30008 = enumerator_30008.nextObject ()))) {
        macroValidPointer (operand_30008) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30008->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (824)) ;
        const GGS_isr_obj  temp_30256 = operand_30008->mInfo.isr ;
        if (temp_30256.isBuilt ()) {
          temp_30256 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (825)) ;
        }
        { const GGS_basic_type _var_30459 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30459.getPtr () != NULL) {
            macroValidPointer (_var_30459.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30459.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30459.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (828)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (829)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (830)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_30008->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (843)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_30952 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_30952.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_30918 = var_cas_il ;
      if (temp_30918.isBuilt ()) {
        temp_30918 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (846)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31070 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31070 = NULL ;
      while (((operand_31070 = enumerator_31070.nextObject ()))) {
        macroValidPointer (operand_31070) ;
        const GGS_bool cond_31346 = (operand_31070->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_31346.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31070->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_31070->name, var_cas_actual_prio, operand_31070->act COMMA_SOURCE_FILE_AT_LINE (859)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_31558.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32454 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32454 = NULL ;
    while (((operand_32454 = enumerator_32454.nextObject ()))) {
      macroValidPointer (operand_32454) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_32595 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32595 = NULL ;
        while (((operand_32595 = enumerator_32595.nextObject ()))) {
          macroValidPointer (operand_32595) ;
          GGS_lstringlist  var_cas_owned_rez = operand_32595->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (898)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32454->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (900)) ;
          const GGS_bool cond_33143 = var_cas_owned ;
          if (cond_33143.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_32880 = var_cas_prio_for_task ;
            if (temp_32880.isBuilt ()) {
              temp_32880 (HERE)->method_get (inLexique, operand_32595->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (904)) ;
            }
            const GGS_bool cond_32995 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_32995.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (908)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_32595->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (909))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (909))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33189 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33189 = NULL ;
        while (((operand_33189 = enumerator_33189.nextObject ()))) {
          macroValidPointer (operand_33189) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33189->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (913)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32454->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (915)) ;
          const GGS_bool cond_33737 = var_cas_owned ;
          if (cond_33737.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33473 = var_cas_prio_for_isr ;
            if (temp_33473.isBuilt ()) {
              temp_33473 (HERE)->method_get (inLexique, operand_33189->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (919)) ;
            }
            const GGS_bool cond_33589 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_33589.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (923)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33189->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (924))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (924))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_33847 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_33847.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34036 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34036 = NULL ;
        while (((operand_34036 = enumerator_34036.nextObject ()))) {
          macroValidPointer (operand_34036) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34036->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32454->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (939)) ;
          const GGS_bool cond_34465 = var_cas_owned ;
          if (cond_34465.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34321 = var_cas_prio_for_task ;
            if (temp_34321.isBuilt ()) {
              temp_34321 (HERE)->method_get (inLexique, operand_34036->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (943)) ;
            }
            const GGS_bool cond_34445 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_34445.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (945)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34511 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34511 = NULL ;
        while (((operand_34511 = enumerator_34511.nextObject ()))) {
          macroValidPointer (operand_34511) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34511->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (950)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32454->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (952)) ;
          const GGS_bool cond_34940 = var_cas_owned ;
          if (cond_34940.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34795 = var_cas_prio_for_isr ;
            if (temp_34795.isBuilt ()) {
              temp_34795 (HERE)->method_get (inLexique, operand_34511->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (956)) ;
            }
            const GGS_bool cond_34920 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_34920.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (958)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_32454->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (963)) ;
      var_cas_comments.modifier_put (inLexique, operand_32454->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (964)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_36584 = var_cas_max_prio ;
  GGS_bool _condition_36584 (_variant_36584.isBuilt (), true) ;
  while (_condition_36584.isBuiltAndTrue ()) {
    _condition_36584 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36584.isBuiltAndTrue ()) {
      if (_variant_36584.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1009)) ;
        _condition_36584 = GGS_bool (false) ;
      }else{
        _variant_36584.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_35941 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_35941 = NULL ;
          while (((operand_35941 = enumerator_35941.nextObject ()))) {
            macroValidPointer (operand_35941) ;
            const GGS_bool cond_36033 = (operand_35941->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36033.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_35941->mInfo.act COMMA_SOURCE_FILE_AT_LINE (994)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36087 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36087 = NULL ;
          while (((operand_36087 = enumerator_36087.nextObject ()))) {
            macroValidPointer (operand_36087) ;
            const GGS_bool cond_36179 = (operand_36087->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36179.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36087->mInfo.act COMMA_SOURCE_FILE_AT_LINE (997)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36233 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36233 = NULL ;
          while (((operand_36233 = enumerator_36233.nextObject ()))) {
            macroValidPointer (operand_36233) ;
            const GGS_bool cond_36325 = (operand_36233->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36325.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36233->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1000)) ;
            }
          }
        }
        const GGS_bool cond_36522 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_36522.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1005)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_36760 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_36760 = NULL ;
    while (((operand_36760 = enumerator_36760.nextObject ()))) {
      macroValidPointer (operand_36760) ;
      GGS_string var_cas_app_name = operand_36760->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)) ;
      {
        GGS_ident_map::cEnumerator enumerator_36815 (operand_36760->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1022)), true) ;
        const GGS_ident_map::cElement * operand_36815 = NULL ;
        while (((operand_36815 = enumerator_36815.nextObject ()))) {
          macroValidPointer (operand_36815) ;
          const GGS_bool cond_36935 = (var_cas_app_for_obj.reader_hasKey (operand_36815->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1023)))).operator_not () ;
          if (cond_36935.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_36815->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1024)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36970 (operand_36760->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)), true) ;
        const GGS_ident_map::cElement * operand_36970 = NULL ;
        while (((operand_36970 = enumerator_36970.nextObject ()))) {
          macroValidPointer (operand_36970) ;
          const GGS_bool cond_37089 = (var_cas_app_for_obj.reader_hasKey (operand_36970->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1028)))).operator_not () ;
          if (cond_37089.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_36970->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1029)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37124 (operand_36760->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1032)), true) ;
        const GGS_ident_map::cElement * operand_37124 = NULL ;
        while (((operand_37124 = enumerator_37124.nextObject ()))) {
          macroValidPointer (operand_37124) ;
          const GGS_bool cond_37245 = (var_cas_app_for_obj.reader_hasKey (operand_37124->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1033)))).operator_not () ;
          if (cond_37245.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37124->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1034)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37280 (operand_36760->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)), true) ;
        const GGS_ident_map::cElement * operand_37280 = NULL ;
        while (((operand_37280 = enumerator_37280.nextObject ()))) {
          macroValidPointer (operand_37280) ;
          const GGS_bool cond_37406 = (var_cas_app_for_obj.reader_hasKey (operand_37280->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1038)))).operator_not () ;
          if (cond_37406.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37280->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1039)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37441 (operand_36760->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)), true) ;
        const GGS_ident_map::cElement * operand_37441 = NULL ;
        while (((operand_37441 = enumerator_37441.nextObject ()))) {
          macroValidPointer (operand_37441) ;
          const GGS_bool cond_37564 = (var_cas_app_for_obj.reader_hasKey (operand_37441->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)))).operator_not () ;
          if (cond_37564.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37441->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1044)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37599 (operand_36760->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)), true) ;
        const GGS_ident_map::cElement * operand_37599 = NULL ;
        while (((operand_37599 = enumerator_37599.nextObject ()))) {
          macroValidPointer (operand_37599) ;
          const GGS_bool cond_37723 = (var_cas_app_for_obj.reader_hasKey (operand_37599->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1048)))).operator_not () ;
          if (cond_37723.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37599->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1049)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1071)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_38522 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38522 = NULL ;
    while (((operand_38522 = enumerator_38522.nextObject ()))) {
      macroValidPointer (operand_38522) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_38522->mKey,  operand_38522->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1081)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1085)) COMMA_SOURCE_FILE_AT_LINE (1085)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1086))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1086)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1087))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1087)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1088))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1089))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1089)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1090)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1091))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1091)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_39708 = (operand_38522->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1098)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_39708.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      }else if (cond_39708.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1102)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1104)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)) COMMA_SOURCE_FILE_AT_LINE (1105)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1106))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_40193 = var_cas_actual_priorities ;
      if (temp_40193.isBuilt ()) {
        temp_40193 (HERE)->method_get (inLexique, operand_38522->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      }
      const GGS_bool cond_40464 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_40464.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_40653 = (operand_38522->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1120)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1120))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_40653.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1122)) ;
      }else if (cond_40653.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_38522->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_40861 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_40861 = NULL ;
          while (((operand_40861 = enumerator_40861.nextObject ()))) {
            macroValidPointer (operand_40861) ;
            const GGS_bool cond_41420 = var_cas_no_internal_rez_found ;
            if (cond_41420.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_41004 = var_cas_resources ;
              if (temp_41004.isBuilt ()) {
                temp_41004 (HERE)->method_get (inLexique, operand_40861->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1130)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) ;
              { const GGS_resource_property_obj _var_41395 = var_cas_rez_prop ; // CAST instruction
                if (_var_41395.getPtr () != NULL) {
                  macroValidPointer (_var_41395.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41395.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_40861->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1134)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_41569 = var_cas_no_internal_rez_found ;
        if (cond_41569.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1141)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1146)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38522->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)) ;
      { const GGS_basic_type _var_42002 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42002.getPtr () != NULL) {
          macroValidPointer (_var_42002.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42002.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42002.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1151)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1152)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1153)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1154)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38522->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1157)) ;
      { const GGS_task_autostart_obj _var_42538 = var_cas_autostart ; // CAST instruction
        if (_var_42538.getPtr () != NULL) {
          macroValidPointer (_var_42538.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42538.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1160)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42538.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1162)) ;
          }else{
            operand_38522->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1164)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_38522->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_42716 = var_cas_timing_prot ;
      if (temp_42716.isBuilt ()) {
        temp_42716 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38522->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1171)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1172)) ;
      const GGS_bool cond_43670 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_43670.isBuiltAndTrue ()) {
        const GGS_bool cond_43583 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_43583.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43138 = var_cas_app_for_obj ;
          if (temp_43138.isBuilt ()) {
            temp_43138 (HERE)->method_get (inLexique, operand_38522->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1178)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1179)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_43352 = var_cas_apps ;
          if (temp_43352.isBuilt ()) {
            temp_43352 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1183)) ;
          }
          { const GGS_app_trusted_obj _var_43495 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1184)) ; // CAST instruction
            if (_var_43495.getPtr () != NULL) {
              macroValidPointer (_var_43495.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43495.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) COMMA_SOURCE_FILE_AT_LINE (1187)) ;
        }else if (cond_43583.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1189)) ;
        }
      }else if (cond_43670.isBuiltAndFalse ()) {
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_44154 = var_cas_non_preemptable_exists ;
  if (cond_44154.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1209)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1210)) COMMA_SOURCE_FILE_AT_LINE (1210)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1211)) COMMA_SOURCE_FILE_AT_LINE (1211)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1228)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_45156 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45156 = NULL ;
    while (((operand_45156 = enumerator_45156.nextObject ()))) {
      macroValidPointer (operand_45156) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45156->mKey,  operand_45156->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1238)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1242)) COMMA_SOURCE_FILE_AT_LINE (1242)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1243))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1244))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1244)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1245))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1246))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1246)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1247))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1247)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1248))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1250))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1250)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_45978 = var_cas_actual_priorities ;
      if (temp_45978.isBuilt ()) {
        temp_45978 (HERE)->method_get (inLexique, operand_45156->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1255)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46141 = operand_45156->mInfo.isr ;
      if (temp_46141.isBuilt ()) {
        temp_46141 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1258)) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_45156->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_46384 = var_cas_timing_prot ;
      if (temp_46384.isBuilt ()) {
        temp_46384 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1264)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      const GGS_bool cond_47200 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_47200.isBuiltAndTrue ()) {
        const GGS_bool cond_47184 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_47184.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_46741 = var_cas_app_for_obj ;
          if (temp_46741.isBuilt ()) {
            temp_46741 (HERE)->method_get (inLexique, operand_45156->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1272)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_46954 = var_cas_apps ;
          if (temp_46954.isBuilt ()) {
            temp_46954 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1277)) ;
          }
          { const GGS_app_trusted_obj _var_47097 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) ; // CAST instruction
            if (_var_47097.getPtr () != NULL) {
              macroValidPointer (_var_47097.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47097.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) COMMA_SOURCE_FILE_AT_LINE (1281)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1296)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1300)) COMMA_SOURCE_FILE_AT_LINE (1300)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1301)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1314)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_48278 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48278 = NULL ;
    while (((operand_48278 = enumerator_48278.nextObject ()))) {
      macroValidPointer (operand_48278) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48278->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)) COMMA_SOURCE_FILE_AT_LINE (1322)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48278->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1323))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1323)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_48278->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1325))) ;
      const GGS_bool cond_48672 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_48672.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1330)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48278->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)) ;
      { const GGS_basic_type _var_49009 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49009.getPtr () != NULL) {
          macroValidPointer (_var_49009.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49009.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49009.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1335)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1335)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1336)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1337)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1338)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_48278->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      { const GGS_basic_type _var_49410 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49410.getPtr () != NULL) {
          macroValidPointer (_var_49410.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49410.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49410.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1343)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1345)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1346)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_48278->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)) ;
      { const GGS_basic_type _var_49802 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49802.getPtr () != NULL) {
          macroValidPointer (_var_49802.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49802.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49802.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1351)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1353)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1354)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_50896 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_50896.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_48278->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) ;
        { const GGS_counter_type _var_50426 = var_cas_type ; // CAST instruction
          if (_var_50426.getPtr () != NULL) {
            macroValidPointer (_var_50426.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50426.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50426.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1366)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1367)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1368)) ;
        const GGS_bool cond_50638 = (operand_48278->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1370))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_50638.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1371)) ;
        }else if (cond_50638.isBuiltAndFalse ()) {
          const GGS_bool cond_50860 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_50860.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_50751 = var_cas_app_for_obj ;
            if (temp_50751.isBuilt ()) {
              temp_50751 (HERE)->method_get (inLexique, operand_48278->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1375)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1376)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1385)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_52162 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_52162.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51419 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51419 = enumerator_51419.nextObject () ;
      if ((operand_51419 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51419 ;
        do{
          macroValidPointer (operand_51419) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_51419->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1401))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51419->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1402))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1402))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51419->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1403))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51419->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1403))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51419 = enumerator_51419.nextObject () ;
          _foreach_loop_51419 = ((operand_51419 != NULL)) ;
          if (_foreach_loop_51419) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51419) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1411)) COMMA_SOURCE_FILE_AT_LINE (1411)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1412)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1413)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1429)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1430)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_53093 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53093 = NULL ;
    while (((operand_53093 = enumerator_53093.nextObject ()))) {
      macroValidPointer (operand_53093) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_53093->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53093->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_53374 = var_cas_rez_prio ;
      if (temp_53374.isBuilt ()) {
        temp_53374 (HERE)->method_get (inLexique, operand_53093->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1444)) ;
      }
      const GGS_string_map  temp_53426 = var_cas_rez_comments ;
      if (temp_53426.isBuilt ()) {
        temp_53426 (HERE)->method_get (inLexique, operand_53093->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1445)) ;
      }
      { const GGS_resource_property_obj _var_53922 = var_cas_rez_prop ; // CAST instruction
        if (_var_53922.getPtr () != NULL) {
          macroValidPointer (_var_53922.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_53922.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_53922.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_53922.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53093->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1459)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53093->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1461)) COMMA_SOURCE_FILE_AT_LINE (1461)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53093->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1462))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1462)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)) COMMA_SOURCE_FILE_AT_LINE (1464)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      const GGS_bool cond_54462 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_54462.isBuiltAndTrue ()) {
        const GGS_bool cond_54446 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_54446.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_54344 = var_cas_app_for_obj ;
          if (temp_54344.isBuilt ()) {
            temp_54344 (HERE)->method_get (inLexique, operand_53093->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1470)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1471)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54653 (var_cas_regular_rez, true) ;
    while (enumerator_54653.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54653._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1483))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54653._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54653._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54653.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_54889 (var_cas_regular_rez, true) ;
    if (enumerator_54889 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("#define OS_START_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n") ;
      var_cas_rez_imp.appendCString ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_54889 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_54889._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_54889.next () ;
        _foreach_loop_54889 = (enumerator_54889 .hasCurrentObject ()) ;
        if (_foreach_loop_54889) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_54889) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
      var_cas_rez_imp.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n"
        "\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1506)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1507)) COMMA_SOURCE_FILE_AT_LINE (1507)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1508)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56845 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56845 = NULL ;
    while (((operand_56845 = enumerator_56845.nextObject ()))) {
      macroValidPointer (operand_56845) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56845->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1543)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57018 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57018 = NULL ;
        while (((operand_57018 = enumerator_57018.nextObject ()))) {
          macroValidPointer (operand_57018) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_57095 = var_cas_events ;
          if (temp_57095.isBuilt ()) {
            temp_57095 (HERE)->method_get (inLexique, operand_57018->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1547)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)) ;
          { const GGS_event_mask_obj _var_57985 = var_cas_mask_obj ; // CAST instruction
            if (_var_57985.getPtr () != NULL) {
              macroValidPointer (_var_57985.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_57985.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_57985.getPtr ()) ;
                const GGS_bool cond_57436 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_57436.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1554)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1554))) ;
                }else if (cond_57436.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1556)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_57018->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1556)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1557)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_57985.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_57835 = var_cas_evt_usage.reader_hasKey (operand_57018->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1560))) ;
                if (cond_57835.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_57018->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1562)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)) ;
                }else if (cond_57835.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_57018->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1567)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_58195 = var_cas_tasks_for_event.reader_hasKey (operand_57018->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1572))) ;
          if (cond_58195.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_57018->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1574)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_56845->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1576))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_57018->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1577)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_56845->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1580)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58453 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58453 = NULL ;
    while (((operand_58453 = enumerator_58453.nextObject ()))) {
      macroValidPointer (operand_58453) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58453->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1588)) ;
      { const GGS_event_mask_obj _var_58891 = var_cas_evt_mask ; // CAST instruction
        if (_var_58891.getPtr () != NULL) {
          macroValidPointer (_var_58891.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58891.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_58891.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58453->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1592))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1592)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58453->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1593)) COMMA_SOURCE_FILE_AT_LINE (1593)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1594)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1594)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1594)) COMMA_SOURCE_FILE_AT_LINE (1594)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59052 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59052 = NULL ;
    while (((operand_59052 = enumerator_59052.nextObject ()))) {
      macroValidPointer (operand_59052) ;
      var_cas_sort_evts.addAssign_operation (operand_59052->mKey, operand_59052->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59222 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59222 = NULL ;
    while (((operand_59222 = enumerator_59222.nextObject ()))) {
      macroValidPointer (operand_59222) ;
      const GGS_bool cond_60557 = var_cas_tasks_for_event.reader_hasKey (operand_59222->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1616))) ;
      if (cond_60557.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59334 = var_cas_tasks_for_event ;
        if (temp_59334.isBuilt ()) {
          temp_59334 (HERE)->method_get (inLexique, operand_59222->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1618)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59401 (var_cas_tasks, true) ;
          while (enumerator_59401.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59464 = var_cas_task_mask ;
            if (temp_59464.isBuilt ()) {
              temp_59464 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59401._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1622)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59401.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_59791 = GGS_uint (32U) ;
        GGS_bool _condition_59791 (_variant_59791.isBuilt (), true) ;
        while (_condition_59791.isBuiltAndTrue ()) {
          _condition_59791 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_59791.isBuiltAndTrue ()) {
            if (_variant_59791.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1631)) ;
              _condition_59791 = GGS_bool (false) ;
            }else{
              _variant_59791.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1630)) ;
            }
          }
        }
        const GGS_bool cond_59962 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1632))) ;
        if (cond_59962.isBuiltAndTrue ()) {
          operand_59222->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59222->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1634)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60086 (var_cas_tasks, true) ;
          while (enumerator_60086.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60086._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1639)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60086._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1641)) ;
            enumerator_60086.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59222->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1645))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1645)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59222->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1646)) COMMA_SOURCE_FILE_AT_LINE (1646)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1647)) COMMA_SOURCE_FILE_AT_LINE (1647)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1726)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)) ;
  const GGS_bool cond_63970 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_63970.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_63729 = var_cas_config ;
    if (temp_63729.isBuilt ()) {
      temp_63729 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1749)) ;
    }
    { const GGS_basic_type _var_63956 = var_cas_pw ; // CAST instruction
      if (_var_63956.getPtr () != NULL) {
        macroValidPointer (_var_63956.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_63956.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_63956.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1754)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1755)) ;
        }
      }
    }
  }
  var_cas_fifo.appendCString ("#define OS_START_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_64080 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64080 = NULL ;
    while (((operand_64080 = enumerator_64080.nextObject ()))) {
      macroValidPointer (operand_64080) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_64309 = var_cas_powerof2 ;
      if (cond_64309.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64290 = GGS_uint (32U) ;
        GGS_bool _condition_64290 (_variant_64290.isBuilt (), true) ;
        while (_condition_64290.isBuiltAndTrue ()) {
          _condition_64290 = (operand_64080->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64290.isBuiltAndTrue ()) {
            if (_variant_64290.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1767)) ;
              _condition_64290 = GGS_bool (false) ;
            }else{
              _variant_64290.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1766)) ;
            }
          }
        }
      }else if (cond_64309.isBuiltAndFalse ()) {
        var_cas_max_size = operand_64080->fifosize ;
      }
      var_cas_fifo.appendCString ("VAR(tpl_proc_id, OS_VAR) tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1771))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1771))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1772)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1778)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1778))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_64805 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1779)) ;
  GGS_bool _condition_64805 (_variant_64805.isBuilt (), true) ;
  while (_condition_64805.isBuiltAndTrue ()) {
    _condition_64805 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64805.isBuiltAndTrue ()) {
      if (_variant_64805.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1785)) ;
        _condition_64805 = GGS_bool (false) ;
      }else{
        _variant_64805.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_64755 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_64755.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1784)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_fifo.appendCString ("#define OS_START_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("CONST(tpl_priority_level, OS_CONST) tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1793)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1793))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65138 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65138 = NULL ;
    while (((operand_65138 = enumerator_65138.nextObject ()))) {
      macroValidPointer (operand_65138) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65391 = var_cas_powerof2 ;
      if (cond_65391.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65348 = GGS_uint (32U) ;
        GGS_bool _condition_65348 (_variant_65348.isBuilt (), true) ;
        while (_condition_65348.isBuiltAndTrue ()) {
          _condition_65348 = (operand_65138->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65348.isBuiltAndTrue ()) {
            if (_variant_65348.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1801)) ;
              _condition_65348 = GGS_bool (false) ;
            }else{
              _variant_65348.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1800)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)) ;
      }else if (cond_65391.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65138->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1806))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1806))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_65573 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_65573.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1809)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1815)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1816)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1816)) COMMA_SOURCE_FILE_AT_LINE (1816)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1832)) ;
  const GGS_bool cond_75710 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_75710.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.reader_value () ;
    const GGS_bool cond_75622 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_75622.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1837)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1838)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1839)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1840)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1843)) ;
      const GGS_bool cond_66870 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1844))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_66870.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1845)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1848)) ;
      const GGS_bool cond_67053 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1849))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_67053.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1850)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1853)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1856)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1862)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1861)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1868)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1867)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1876)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1877)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1879)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1875)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1885)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1895)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1894)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1900)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1901)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1902)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1898)) ;
      const GGS_com  temp_68486 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)) ;
      if (temp_68486.isBuilt ()) {
        temp_68486 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1905)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1908)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1909)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1907)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1914)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1913)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1921)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1920)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1929)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1930)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1931)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1927)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1940)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1941)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1942)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1938)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1952)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1953)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1951)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1958)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1966)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1965)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1975)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1974)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1982)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1983)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1981)) ;
      const GGS_bool cond_71355 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_71355.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1990)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1989)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1996)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1997)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1995)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2000)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2001)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2002)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2003)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1999)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2011)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2010)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2018)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2017)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2026)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2024)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2035)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2041)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2044)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2054)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2061)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2069)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2071)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2072)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2073)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2074)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2075)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2076)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_75607 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_75607.isBuiltAndTrue ()) {
        const GGS_bool cond_74143 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74143.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2087)) ;
        }
        const GGS_string temp_74197 = var_cas_header ;
        if (temp_74197.isBuilt ()) {
          temp_74197 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2089)) ;
        }
        const GGS_bool cond_74347 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74347.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2091)) ;
        }
        const GGS_string temp_74405 = var_cas_obj_header ;
        if (temp_74405.isBuilt ()) {
          temp_74405 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2093)) ;
        }
        const GGS_bool cond_74563 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74563.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2095)) ;
        }
        const GGS_string temp_74625 = var_cas_implementation ;
        if (temp_74625.isBuilt ()) {
          temp_74625 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2097)) ;
        }
        const GGS_bool cond_74778 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74778.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2099)) ;
        }
        const GGS_string temp_74831 = var_cas_types ;
        if (temp_74831.isBuilt ()) {
          temp_74831 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2101)) ;
        }
        const GGS_bool cond_75547 = gOption_goil_5F_options_generate_5F_makefile.reader_value () ;
        if (cond_75547.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent () ;
          const GGS_bool cond_75123 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_75123.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_75277 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
          if (cond_75277.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2109)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2112)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ().reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (2111)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2118)) ;
      }
    }else if (cond_75622.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2121)) ;
    }
  }else if (cond_75710.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2124)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

