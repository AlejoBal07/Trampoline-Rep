//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.6                         *
//                     december 2nd, 2009, at 18h57'11"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 621
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString ()) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7222 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7222.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7452 = var_cas_startuphook ; // CAST instruction
    if (_var_7452.getPtr () != NULL) {
      macroValidPointer (_var_7452.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7452.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7452.getPtr ()) ;
        const GGS_bool cond_7435 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
        if (cond_7435.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7693 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7693.getPtr () != NULL) {
      macroValidPointer (_var_7693.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7693.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7693.getPtr ()) ;
        const GGS_bool cond_7676 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
        if (cond_7676.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7919 = var_cas_errorhook ; // CAST instruction
    if (_var_7919.getPtr () != NULL) {
      macroValidPointer (_var_7919.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7919.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7919.getPtr ()) ;
        const GGS_bool cond_7902 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
        if (cond_7902.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8156 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8156.getPtr () != NULL) {
      macroValidPointer (_var_8156.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8156.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8156.getPtr ()) ;
        const GGS_bool cond_8139 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
        if (cond_8139.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8398 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8398.getPtr () != NULL) {
      macroValidPointer (_var_8398.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8398.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8398.getPtr ()) ;
        const GGS_bool cond_8381 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        if (cond_8381.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8653 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8653.getPtr () != NULL) {
      macroValidPointer (_var_8653.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8653.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8653.getPtr ()) ;
        const GGS_bool cond_8636 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        if (cond_8636.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8923 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8923.getPtr () != NULL) {
      macroValidPointer (_var_8923.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8923.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8923.getPtr ()) ;
        const GGS_bool cond_8906 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        if (cond_8906.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9178 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9178.getPtr () != NULL) {
      macroValidPointer (_var_9178.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9178.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9178.getPtr ()) ;
        const GGS_bool cond_9161 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        if (cond_9161.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9364 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (237)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (241)) COMMA_SOURCE_FILE_AT_LINE (241))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
  const GGS_bool cond_9919 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9919.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_9919.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11468 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_11468.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10340 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ; // CAST instruction
      if (_var_10340.getPtr () != NULL) {
        macroValidPointer (_var_10340.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10340.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10340.getPtr ()) ;
          const GGS_bool cond_10319 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
          if (cond_10319.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10518 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ; // CAST instruction
      if (_var_10518.getPtr () != NULL) {
        macroValidPointer (_var_10518.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10518.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10518.getPtr ()) ;
          const GGS_bool cond_10497 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
          if (cond_10497.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10826 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10826 = NULL ;
      while (((operand_10826 = enumerator_10826.nextObject ()))) {
        macroValidPointer (operand_10826) ;
        { const GGS_timing_prot _var_11024 = operand_10826->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ; // CAST instruction
          if (_var_11024.getPtr () != NULL) {
            macroValidPointer (_var_11024.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11024.getPtr ()))) {
            }else{
              const GGS_bool cond_11004 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11004.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11073 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_11073 = NULL ;
      while (((operand_11073 = enumerator_11073.nextObject ()))) {
        macroValidPointer (operand_11073) ;
        { const GGS_timing_prot _var_11268 = operand_11073->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ; // CAST instruction
          if (_var_11268.getPtr () != NULL) {
            macroValidPointer (_var_11268.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11268.getPtr ()))) {
            }else{
              const GGS_bool cond_11248 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11248.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11407 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11407.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11534 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
  if (temp_11534.isBuilt ()) {
    temp_11534 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11700 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), true) ;
    const GGS_ident_map::cElement * operand_11700 = NULL ;
    while (((operand_11700 = enumerator_11700.nextObject ()))) {
      macroValidPointer (operand_11700) ;
      { const GGS_basic_type _var_11938 = operand_11700->mInfo.value ; // CAST instruction
        if (_var_11938.getPtr () != NULL) {
          macroValidPointer (_var_11938.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11938.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11938.getPtr ()) ;
            const GGS_bool cond_11909 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
            if (cond_11909.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11700->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12527 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_12527 = NULL ;
    while (((operand_12527 = enumerator_12527.nextObject ()))) {
      macroValidPointer (operand_12527) ;
      const GGS_bool cond_12592 = (var_cas_first).operator_not () ;
      if (cond_12592.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_12527->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (331))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (334)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (342)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (343)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (345)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (346)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (346)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (347)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (348)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (348)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (349)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (349)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352)) ;
  const GGS_bool cond_13578 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_13578.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (354)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (354)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (354)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (355)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (358)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (358)) ;
  const GGS_bool cond_13917 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_13917.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (360)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (360)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (360)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (361)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (364)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_14358 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_14358.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_14358.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (369)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_14572 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  if (temp_14572.isBuilt ()) {
    temp_14572 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (373)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (376)) COMMA_SOURCE_FILE_AT_LINE (376))) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_LINKSCRIPT"), (function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (377)) COMMA_SOURCE_FILE_AT_LINE (377))).operator_isNotEqual (GGS_string ("")) COMMA_SOURCE_FILE_AT_LINE (377))) ;
  var_cas_flags.dotAssign_operation (function_bool_class_make_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (379)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (379))) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (380)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$SCRIPT_FILE$"),  function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (382)) COMMA_SOURCE_FILE_AT_LINE (382)) COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_15255 = gOption_goil_5F_options_posix_5F_it.reader_value () ;
  if (cond_15255.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (391)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (392)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (394)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (396)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (396)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (396)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (397)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (397)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (397)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (398)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (398)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (398)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (401)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (403)) COMMA_SOURCE_FILE_AT_LINE (403)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (404)) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (405)) COMMA_SOURCE_FILE_AT_LINE (405)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (407)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (409)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (409)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (410)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_16533 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_16533.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_16533.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (420)) ;
  const GGS_string temp_16725 = var_cas_makefileStr ;
  if (temp_16725.isBuilt ()) {
    temp_16725 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (435)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (436)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (437)) ;
  const GGS_bool cond_17272 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_17272.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_17272.isBuiltAndFalse ()) {
    const GGS_bool cond_17330 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_17330.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_17330.isBuiltAndFalse ()) {
      const GGS_bool cond_17394 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_17394.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_17394.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (450)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (462)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (463)) ;
  const GGS_bool cond_17748 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_17748.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_17748.isBuiltAndFalse ()) {
    const GGS_bool cond_17806 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_17806.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_17806.isBuiltAndFalse ()) {
      const GGS_bool cond_17870 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_17870.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_17870.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (476)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_18206 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_18206.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18206.isBuiltAndFalse ()) {
    const GGS_bool cond_18265 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_18265.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18265.isBuiltAndFalse ()) {
      const GGS_bool cond_18330 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_18330.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_18330.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (502)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (523)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (523)) COMMA_SOURCE_FILE_AT_LINE (523)) ;
  const GGS_bool cond_18895 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_18895.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (525)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (526)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (529)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (529)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (531)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19416 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19416 = NULL ;
    while (((operand_19416 = enumerator_19416.nextObject ()))) {
      macroValidPointer (operand_19416) ;
      { const GGS_basic_type _var_19684 = operand_19416->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (537)) ; // CAST instruction
        if (_var_19684.getPtr () != NULL) {
          macroValidPointer (_var_19684.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_19684.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_19684.getPtr ()) ;
            const GGS_bool cond_19566 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (538))).operator_strictSup (var_cas_max_act) ;
            if (cond_19566.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (538)) ;
            }
          }else{
            operand_19416->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_19416->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (539)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (540)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (542)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (542)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (544)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20053 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20053 = NULL ;
    while (((operand_20053 = enumerator_20053.nextObject ()))) {
      macroValidPointer (operand_20053) ;
      GGS_lstringlist  var_cas_evts = operand_20053->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (550)) ;
      const GGS_bool cond_20190 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_20190.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (553)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (553)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (554)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (557)) ;
  const GGS_bool cond_20451 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20451.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (559)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (561)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (564)) ;
  const GGS_bool cond_20739 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20739.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (566)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
  const GGS_bool cond_21031 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21031.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (575)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (578)) ;
  const GGS_bool cond_21327 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21327.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (582)) ;
  const GGS_bool cond_21715 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_21715.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (587)) ;
  }else if (cond_21715.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (589)) ;
  }
  const GGS_bool cond_21796 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21796.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (592)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (593)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (596)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (596)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (596)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (598)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22263 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22263 = NULL ;
    while (((operand_22263 = enumerator_22263.nextObject ()))) {
      macroValidPointer (operand_22263) ;
      { const GGS_app_trusted_obj _var_22423 = operand_22263->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (604)) ; // CAST instruction
        if (_var_22423.getPtr () != NULL) {
          macroValidPointer (_var_22423.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22423.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22423.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22342 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (606)), true) ;
              while (enumerator_22342.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_22342._key (HERE)) ;
                enumerator_22342.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (612)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (612)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (616)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (618)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (628)) COMMA_SOURCE_FILE_AT_LINE (628)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (630)) COMMA_SOURCE_FILE_AT_LINE (630)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (643)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (644)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (645)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (646)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_23874 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_23874 = NULL ;
    while (((operand_23874 = enumerator_23874.nextObject ()))) {
      macroValidPointer (operand_23874) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_23874->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (655)) ;
      { const GGS_action_obj _var_24937 = var_cas_alarm_action ; // CAST instruction
        if (_var_24937.getPtr () != NULL) {
          macroValidPointer (_var_24937.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_24937.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_24937.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (659)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (659))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (659)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (660)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (660))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (660)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_24937.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_24937.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (663)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (663))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (663)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_24937.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_24937.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (666)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (666))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (666)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_24937.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_24937.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (669)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (669))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (669)) ;
          }else{
            operand_23874->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (671)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_23874->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) ;
      { const GGS_autostart_obj _var_25847 = var_cas_autostart ; // CAST instruction
        if (_var_25847.getPtr () != NULL) {
          macroValidPointer (_var_25847.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_25847.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (678)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (679)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (680)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_25847.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (682)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (683)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (684)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_25847.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_25847.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (686)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (687)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (687)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (687)) COMMA_SOURCE_FILE_AT_LINE (687)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (688)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (688)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (688)) COMMA_SOURCE_FILE_AT_LINE (688)) ;
          }else{
            operand_23874->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (690)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_23874->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (694)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_23874->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (695)) COMMA_SOURCE_FILE_AT_LINE (695)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_23874->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (696))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (696)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (697))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (697)) ;
      const GGS_bool cond_26493 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_26493.isBuiltAndTrue ()) {
        const GGS_bool cond_26477 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_26477.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_26378 = var_cas_app_for_obj ;
          if (temp_26378.isBuilt ()) {
            temp_26378 (HERE)->method_get (inLexique, operand_23874->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (703)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (704)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_26668 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (714)), true) ;
    if (enumerator_26668 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_26668 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_26668._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_26668._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_26668._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_26668._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_26668.next () ;
        _foreach_loop_26668 = (enumerator_26668 .hasCurrentObject ()) ;
        if (_foreach_loop_26668) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_26668) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (730)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (731)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (732)) COMMA_SOURCE_FILE_AT_LINE (732)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_27906 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_27906 = NULL ;
    while (((operand_27906 = enumerator_27906.nextObject ()))) {
      macroValidPointer (operand_27906) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_27906->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (756)) ;
      var_cas_act_as_basic = operand_27906->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (757)) ;
      { const GGS_basic_type _var_28329 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28329.getPtr () != NULL) {
          macroValidPointer (_var_28329.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28329.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28329.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (760)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (761)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (762)) ;
          }
        }
      }
      { const GGS_basic_type _var_28515 = var_cas_act_as_basic ; // CAST instruction
        if (_var_28515.getPtr () != NULL) {
          macroValidPointer (_var_28515.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28515.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28515.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (765)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (766)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (767)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_27906->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_28756 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_28756.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_28726 = var_cas_tl ;
    if (temp_28726.isBuilt ()) {
      temp_28726 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (778)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_28851 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_28851 = NULL ;
    while (((operand_28851 = enumerator_28851.nextObject ()))) {
      macroValidPointer (operand_28851) ;
      const GGS_bool cond_29107 = (operand_28851->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_29107.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_28851->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (788)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_28851->name, var_cas_actual_prio, operand_28851->act COMMA_SOURCE_FILE_AT_LINE (791)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_31450 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_31450.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_29900 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_29900 = NULL ;
      while (((operand_29900 = enumerator_29900.nextObject ()))) {
        macroValidPointer (operand_29900) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_29900->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (822)) ;
        const GGS_isr_obj  temp_30148 = operand_29900->mInfo.isr ;
        if (temp_30148.isBuilt ()) {
          temp_30148 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (823)) ;
        }
        { const GGS_basic_type _var_30351 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30351.getPtr () != NULL) {
            macroValidPointer (_var_30351.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30351.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30351.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (826)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (827)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (828)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_29900->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (841)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_30844 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_30844.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_30810 = var_cas_il ;
      if (temp_30810.isBuilt ()) {
        temp_30810 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (844)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_30962 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_30962 = NULL ;
      while (((operand_30962 = enumerator_30962.nextObject ()))) {
        macroValidPointer (operand_30962) ;
        const GGS_bool cond_31238 = (operand_30962->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_31238.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_30962->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (854)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_30962->name, var_cas_actual_prio, operand_30962->act COMMA_SOURCE_FILE_AT_LINE (857)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_31450.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32346 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32346 = NULL ;
    while (((operand_32346 = enumerator_32346.nextObject ()))) {
      macroValidPointer (operand_32346) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_32487 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32487 = NULL ;
        while (((operand_32487 = enumerator_32487.nextObject ()))) {
          macroValidPointer (operand_32487) ;
          GGS_lstringlist  var_cas_owned_rez = operand_32487->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (896)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32346->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (898)) ;
          const GGS_bool cond_33035 = var_cas_owned ;
          if (cond_33035.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_32772 = var_cas_prio_for_task ;
            if (temp_32772.isBuilt ()) {
              temp_32772 (HERE)->method_get (inLexique, operand_32487->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (902)) ;
            }
            const GGS_bool cond_32887 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_32887.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (906)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_32487->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (907))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (907))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33081 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33081 = NULL ;
        while (((operand_33081 = enumerator_33081.nextObject ()))) {
          macroValidPointer (operand_33081) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33081->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (911)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32346->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (913)) ;
          const GGS_bool cond_33629 = var_cas_owned ;
          if (cond_33629.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33365 = var_cas_prio_for_isr ;
            if (temp_33365.isBuilt ()) {
              temp_33365 (HERE)->method_get (inLexique, operand_33081->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (917)) ;
            }
            const GGS_bool cond_33481 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_33481.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (921)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33081->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_33739 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_33739.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_33928 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33928 = NULL ;
        while (((operand_33928 = enumerator_33928.nextObject ()))) {
          macroValidPointer (operand_33928) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33928->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (935)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32346->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (937)) ;
          const GGS_bool cond_34357 = var_cas_owned ;
          if (cond_34357.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34213 = var_cas_prio_for_task ;
            if (temp_34213.isBuilt ()) {
              temp_34213 (HERE)->method_get (inLexique, operand_33928->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (941)) ;
            }
            const GGS_bool cond_34337 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_34337.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (943)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34403 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34403 = NULL ;
        while (((operand_34403 = enumerator_34403.nextObject ()))) {
          macroValidPointer (operand_34403) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34403->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (948)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32346->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (950)) ;
          const GGS_bool cond_34832 = var_cas_owned ;
          if (cond_34832.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34687 = var_cas_prio_for_isr ;
            if (temp_34687.isBuilt ()) {
              temp_34687 (HERE)->method_get (inLexique, operand_34403->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (954)) ;
            }
            const GGS_bool cond_34812 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_34812.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (956)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_32346->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (961)) ;
      var_cas_comments.modifier_put (inLexique, operand_32346->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (962)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_36476 = var_cas_max_prio ;
  GGS_bool _condition_36476 (_variant_36476.isBuilt (), true) ;
  while (_condition_36476.isBuiltAndTrue ()) {
    _condition_36476 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36476.isBuiltAndTrue ()) {
      if (_variant_36476.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1007)) ;
        _condition_36476 = GGS_bool (false) ;
      }else{
        _variant_36476.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_35833 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_35833 = NULL ;
          while (((operand_35833 = enumerator_35833.nextObject ()))) {
            macroValidPointer (operand_35833) ;
            const GGS_bool cond_35925 = (operand_35833->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_35925.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_35833->mInfo.act COMMA_SOURCE_FILE_AT_LINE (992)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_35979 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_35979 = NULL ;
          while (((operand_35979 = enumerator_35979.nextObject ()))) {
            macroValidPointer (operand_35979) ;
            const GGS_bool cond_36071 = (operand_35979->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36071.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_35979->mInfo.act COMMA_SOURCE_FILE_AT_LINE (995)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36125 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36125 = NULL ;
          while (((operand_36125 = enumerator_36125.nextObject ()))) {
            macroValidPointer (operand_36125) ;
            const GGS_bool cond_36217 = (operand_36125->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36217.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36125->mInfo.act COMMA_SOURCE_FILE_AT_LINE (998)) ;
            }
          }
        }
        const GGS_bool cond_36414 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_36414.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1006)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_36652 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_36652 = NULL ;
    while (((operand_36652 = enumerator_36652.nextObject ()))) {
      macroValidPointer (operand_36652) ;
      GGS_string var_cas_app_name = operand_36652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
      {
        GGS_ident_map::cEnumerator enumerator_36707 (operand_36652->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1020)), true) ;
        const GGS_ident_map::cElement * operand_36707 = NULL ;
        while (((operand_36707 = enumerator_36707.nextObject ()))) {
          macroValidPointer (operand_36707) ;
          const GGS_bool cond_36827 = (var_cas_app_for_obj.reader_hasKey (operand_36707->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)))).operator_not () ;
          if (cond_36827.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_36707->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1022)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_36862 (operand_36652->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1025)), true) ;
        const GGS_ident_map::cElement * operand_36862 = NULL ;
        while (((operand_36862 = enumerator_36862.nextObject ()))) {
          macroValidPointer (operand_36862) ;
          const GGS_bool cond_36981 = (var_cas_app_for_obj.reader_hasKey (operand_36862->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)))).operator_not () ;
          if (cond_36981.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_36862->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1027)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37016 (operand_36652->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), true) ;
        const GGS_ident_map::cElement * operand_37016 = NULL ;
        while (((operand_37016 = enumerator_37016.nextObject ()))) {
          macroValidPointer (operand_37016) ;
          const GGS_bool cond_37137 = (var_cas_app_for_obj.reader_hasKey (operand_37016->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)))).operator_not () ;
          if (cond_37137.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37016->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1032)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37172 (operand_36652->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1035)), true) ;
        const GGS_ident_map::cElement * operand_37172 = NULL ;
        while (((operand_37172 = enumerator_37172.nextObject ()))) {
          macroValidPointer (operand_37172) ;
          const GGS_bool cond_37298 = (var_cas_app_for_obj.reader_hasKey (operand_37172->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1036)))).operator_not () ;
          if (cond_37298.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37172->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1037)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37333 (operand_36652->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37333 = NULL ;
        while (((operand_37333 = enumerator_37333.nextObject ()))) {
          macroValidPointer (operand_37333) ;
          const GGS_bool cond_37456 = (var_cas_app_for_obj.reader_hasKey (operand_37333->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)))).operator_not () ;
          if (cond_37456.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37333->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37491 (operand_36652->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37491 = NULL ;
        while (((operand_37491 = enumerator_37491.nextObject ()))) {
          macroValidPointer (operand_37491) ;
          const GGS_bool cond_37615 = (var_cas_app_for_obj.reader_hasKey (operand_37491->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)))).operator_not () ;
          if (cond_37615.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37491->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1069)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_38414 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38414 = NULL ;
    while (((operand_38414 = enumerator_38414.nextObject ()))) {
      macroValidPointer (operand_38414) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_38414->mKey,  operand_38414->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1083)) COMMA_SOURCE_FILE_AT_LINE (1083)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1084))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1084)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1085))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1085)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1086))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1086)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1087))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1087)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1088))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1089))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1089)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_39600 = (operand_38414->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1096)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_39600.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1098)) ;
      }else if (cond_39600.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1100)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1102)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1104))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_40085 = var_cas_actual_priorities ;
      if (temp_40085.isBuilt ()) {
        temp_40085 (HERE)->method_get (inLexique, operand_38414->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      }
      const GGS_bool cond_40356 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_40356.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_40545 = (operand_38414->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1118)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1118))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_40545.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      }else if (cond_40545.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_38414->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_40753 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_40753 = NULL ;
          while (((operand_40753 = enumerator_40753.nextObject ()))) {
            macroValidPointer (operand_40753) ;
            const GGS_bool cond_41312 = var_cas_no_internal_rez_found ;
            if (cond_41312.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_40896 = var_cas_resources ;
              if (temp_40896.isBuilt ()) {
                temp_40896 (HERE)->method_get (inLexique, operand_40753->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1128)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)) ;
              { const GGS_resource_property_obj _var_41287 = var_cas_rez_prop ; // CAST instruction
                if (_var_41287.getPtr () != NULL) {
                  macroValidPointer (_var_41287.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41287.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_40753->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1132)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1132)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_41461 = var_cas_no_internal_rez_found ;
        if (cond_41461.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1139)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1143)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1144)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38414->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)) ;
      { const GGS_basic_type _var_41894 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_41894.getPtr () != NULL) {
          macroValidPointer (_var_41894.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_41894.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_41894.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1151)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38414->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1155)) ;
      { const GGS_task_autostart_obj _var_42430 = var_cas_autostart ; // CAST instruction
        if (_var_42430.getPtr () != NULL) {
          macroValidPointer (_var_42430.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42430.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1158)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42430.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1160)) ;
          }else{
            operand_38414->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1162)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_38414->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_42608 = var_cas_timing_prot ;
      if (temp_42608.isBuilt ()) {
        temp_42608 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38414->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1168)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      const GGS_bool cond_43562 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_43562.isBuiltAndTrue ()) {
        const GGS_bool cond_43475 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_43475.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43030 = var_cas_app_for_obj ;
          if (temp_43030.isBuilt ()) {
            temp_43030 (HERE)->method_get (inLexique, operand_38414->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1176)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1177)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_43244 = var_cas_apps ;
          if (temp_43244.isBuilt ()) {
            temp_43244 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          }
          { const GGS_app_trusted_obj _var_43387 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1182)) ; // CAST instruction
            if (_var_43387.getPtr () != NULL) {
              macroValidPointer (_var_43387.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43387.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1183)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) COMMA_SOURCE_FILE_AT_LINE (1185)) ;
        }else if (cond_43475.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1187)) ;
        }
      }else if (cond_43562.isBuiltAndFalse ()) {
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_44046 = var_cas_non_preemptable_exists ;
  if (cond_44046.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1207)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1208)) COMMA_SOURCE_FILE_AT_LINE (1208)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)) COMMA_SOURCE_FILE_AT_LINE (1209)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1226)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_45048 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45048 = NULL ;
    while (((operand_45048 = enumerator_45048.nextObject ()))) {
      macroValidPointer (operand_45048) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45048->mKey,  operand_45048->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1236)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1240)) COMMA_SOURCE_FILE_AT_LINE (1240)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1241))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1241)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1242))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1242)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1243))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1243)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1244))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1244)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1245))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1246))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1246)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1248))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_45870 = var_cas_actual_priorities ;
      if (temp_45870.isBuilt ()) {
        temp_45870 (HERE)->method_get (inLexique, operand_45048->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1251)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46033 = operand_45048->mInfo.isr ;
      if (temp_46033.isBuilt ()) {
        temp_46033 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1255)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)) COMMA_SOURCE_FILE_AT_LINE (1256)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_45048->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_46276 = var_cas_timing_prot ;
      if (temp_46276.isBuilt ()) {
        temp_46276 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45048->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1262)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1263)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      const GGS_bool cond_47092 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_47092.isBuiltAndTrue ()) {
        const GGS_bool cond_47076 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_47076.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_46633 = var_cas_app_for_obj ;
          if (temp_46633.isBuilt ()) {
            temp_46633 (HERE)->method_get (inLexique, operand_45048->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1270)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_46846 = var_cas_apps ;
          if (temp_46846.isBuilt ()) {
            temp_46846 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1275)) ;
          }
          { const GGS_app_trusted_obj _var_46989 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) ; // CAST instruction
            if (_var_46989.getPtr () != NULL) {
              macroValidPointer (_var_46989.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_46989.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1277)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)) COMMA_SOURCE_FILE_AT_LINE (1279)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1294)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1298)) COMMA_SOURCE_FILE_AT_LINE (1298)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1299)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1312)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_48170 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48170 = NULL ;
    while (((operand_48170 = enumerator_48170.nextObject ()))) {
      macroValidPointer (operand_48170) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48170->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1320)) COMMA_SOURCE_FILE_AT_LINE (1320)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48170->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1321))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1321)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_48170->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1323))) ;
      const GGS_bool cond_48564 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_48564.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1328)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48170->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)) ;
      { const GGS_basic_type _var_48901 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_48901.getPtr () != NULL) {
          macroValidPointer (_var_48901.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_48901.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_48901.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1334)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1335)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_48170->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) ;
      { const GGS_basic_type _var_49302 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49302.getPtr () != NULL) {
          macroValidPointer (_var_49302.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49302.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49302.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1343)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_48170->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)) ;
      { const GGS_basic_type _var_49694 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49694.getPtr () != NULL) {
          macroValidPointer (_var_49694.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49694.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49694.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1351)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_50788 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_50788.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_48170->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)) ;
        { const GGS_counter_type _var_50318 = var_cas_type ; // CAST instruction
          if (_var_50318.getPtr () != NULL) {
            macroValidPointer (_var_50318.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50318.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50318.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1365)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1366)) ;
        const GGS_bool cond_50530 = (operand_48170->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1368))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_50530.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1369)) ;
        }else if (cond_50530.isBuiltAndFalse ()) {
          const GGS_bool cond_50752 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_50752.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_50643 = var_cas_app_for_obj ;
            if (temp_50643.isBuilt ()) {
              temp_50643 (HERE)->method_get (inLexique, operand_48170->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1373)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1374)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1383)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_52054 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_52054.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51311 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51311 = enumerator_51311.nextObject () ;
      if ((operand_51311 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51311 ;
        do{
          macroValidPointer (operand_51311) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_51311->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1399))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51311->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1400))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1400))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51311->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1401))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51311->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1401))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51311 = enumerator_51311.nextObject () ;
          _foreach_loop_51311 = ((operand_51311 != NULL)) ;
          if (_foreach_loop_51311) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51311) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)) COMMA_SOURCE_FILE_AT_LINE (1409)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1410)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1411)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1412)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1427)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1428)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_52985 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_52985 = NULL ;
    while (((operand_52985 = enumerator_52985.nextObject ()))) {
      macroValidPointer (operand_52985) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_52985->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_52985->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1438)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_53266 = var_cas_rez_prio ;
      if (temp_53266.isBuilt ()) {
        temp_53266 (HERE)->method_get (inLexique, operand_52985->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1442)) ;
      }
      const GGS_string_map  temp_53318 = var_cas_rez_comments ;
      if (temp_53318.isBuilt ()) {
        temp_53318 (HERE)->method_get (inLexique, operand_52985->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1443)) ;
      }
      { const GGS_resource_property_obj _var_53814 = var_cas_rez_prop ; // CAST instruction
        if (_var_53814.getPtr () != NULL) {
          macroValidPointer (_var_53814.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_53814.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_53814.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_53814.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_52985->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1457)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_52985->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)) COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_52985->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1460))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1460)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)) COMMA_SOURCE_FILE_AT_LINE (1462)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1463)) ;
      const GGS_bool cond_54354 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_54354.isBuiltAndTrue ()) {
        const GGS_bool cond_54338 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_54338.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_54236 = var_cas_app_for_obj ;
          if (temp_54236.isBuilt ()) {
            temp_54236 (HERE)->method_get (inLexique, operand_52985->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1468)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1469)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54545 (var_cas_regular_rez, true) ;
    while (enumerator_54545.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54545._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1481))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54545._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54545._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54545.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_54781 (var_cas_regular_rez, true) ;
    if (enumerator_54781 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("#define OS_START_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n") ;
      var_cas_rez_imp.appendCString ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_54781 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_54781._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_54781.next () ;
        _foreach_loop_54781 = (enumerator_54781 .hasCurrentObject ()) ;
        if (_foreach_loop_54781) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_54781) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
      var_cas_rez_imp.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n"
        "\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1504)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1505)) COMMA_SOURCE_FILE_AT_LINE (1505)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1506)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1518)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56737 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56737 = NULL ;
    while (((operand_56737 = enumerator_56737.nextObject ()))) {
      macroValidPointer (operand_56737) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56737->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_56910 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_56910 = NULL ;
        while (((operand_56910 = enumerator_56910.nextObject ()))) {
          macroValidPointer (operand_56910) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_56987 = var_cas_events ;
          if (temp_56987.isBuilt ()) {
            temp_56987 (HERE)->method_get (inLexique, operand_56910->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1545)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1547)) ;
          { const GGS_event_mask_obj _var_57877 = var_cas_mask_obj ; // CAST instruction
            if (_var_57877.getPtr () != NULL) {
              macroValidPointer (_var_57877.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_57877.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_57877.getPtr ()) ;
                const GGS_bool cond_57328 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_57328.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1552))) ;
                }else if (cond_57328.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1554)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_56910->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1554)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1555)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_57877.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_57727 = var_cas_evt_usage.reader_hasKey (operand_56910->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1558))) ;
                if (cond_57727.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_56910->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1560)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1561)) ;
                }else if (cond_57727.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_56910->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1565)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_58087 = var_cas_tasks_for_event.reader_hasKey (operand_56910->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1570))) ;
          if (cond_58087.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_56910->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1572)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_56737->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1574))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_56910->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1575)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_56737->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1578)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58345 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58345 = NULL ;
    while (((operand_58345 = enumerator_58345.nextObject ()))) {
      macroValidPointer (operand_58345) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58345->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1586)) ;
      { const GGS_event_mask_obj _var_58783 = var_cas_evt_mask ; // CAST instruction
        if (_var_58783.getPtr () != NULL) {
          macroValidPointer (_var_58783.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58783.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_58783.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58345->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1590))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1590)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58345->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)) COMMA_SOURCE_FILE_AT_LINE (1591)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1592)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1592)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1592)) COMMA_SOURCE_FILE_AT_LINE (1592)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_58944 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_58944 = NULL ;
    while (((operand_58944 = enumerator_58944.nextObject ()))) {
      macroValidPointer (operand_58944) ;
      var_cas_sort_evts.addAssign_operation (operand_58944->mKey, operand_58944->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59114 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59114 = NULL ;
    while (((operand_59114 = enumerator_59114.nextObject ()))) {
      macroValidPointer (operand_59114) ;
      const GGS_bool cond_60449 = var_cas_tasks_for_event.reader_hasKey (operand_59114->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1614))) ;
      if (cond_60449.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59226 = var_cas_tasks_for_event ;
        if (temp_59226.isBuilt ()) {
          temp_59226 (HERE)->method_get (inLexique, operand_59114->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1616)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59293 (var_cas_tasks, true) ;
          while (enumerator_59293.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59356 = var_cas_task_mask ;
            if (temp_59356.isBuilt ()) {
              temp_59356 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59293._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1620)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59293.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_59683 = GGS_uint (32U) ;
        GGS_bool _condition_59683 (_variant_59683.isBuilt (), true) ;
        while (_condition_59683.isBuiltAndTrue ()) {
          _condition_59683 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1627)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_59683.isBuiltAndTrue ()) {
            if (_variant_59683.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1629)) ;
              _condition_59683 = GGS_bool (false) ;
            }else{
              _variant_59683.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1628)) ;
            }
          }
        }
        const GGS_bool cond_59854 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1630))) ;
        if (cond_59854.isBuiltAndTrue ()) {
          operand_59114->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59114->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1632)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_59978 (var_cas_tasks, true) ;
          while (enumerator_59978.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59978._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1637)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59978._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1639)) ;
            enumerator_59978.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59114->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1643))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1643)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59114->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1644)) COMMA_SOURCE_FILE_AT_LINE (1644)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1645)) COMMA_SOURCE_FILE_AT_LINE (1645)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1724)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1743)) ;
  const GGS_bool cond_63862 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_63862.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_63621 = var_cas_config ;
    if (temp_63621.isBuilt ()) {
      temp_63621 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1747)) ;
    }
    { const GGS_basic_type _var_63848 = var_cas_pw ; // CAST instruction
      if (_var_63848.getPtr () != NULL) {
        macroValidPointer (_var_63848.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_63848.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_63848.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1753)) ;
        }
      }
    }
  }
  var_cas_fifo.appendCString ("#define OS_START_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_63972 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_63972 = NULL ;
    while (((operand_63972 = enumerator_63972.nextObject ()))) {
      macroValidPointer (operand_63972) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_64201 = var_cas_powerof2 ;
      if (cond_64201.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64182 = GGS_uint (32U) ;
        GGS_bool _condition_64182 (_variant_64182.isBuilt (), true) ;
        while (_condition_64182.isBuiltAndTrue ()) {
          _condition_64182 = (operand_63972->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64182.isBuiltAndTrue ()) {
            if (_variant_64182.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1765)) ;
              _condition_64182 = GGS_bool (false) ;
            }else{
              _variant_64182.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1764)) ;
            }
          }
        }
      }else if (cond_64201.isBuiltAndFalse ()) {
        var_cas_max_size = operand_63972->fifosize ;
      }
      var_cas_fifo.appendCString ("VAR(tpl_proc_id, OS_VAR) tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1769))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1769))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1770)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1776)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1776))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_64697 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1777)) ;
  GGS_bool _condition_64697 (_variant_64697.isBuilt (), true) ;
  while (_condition_64697.isBuiltAndTrue ()) {
    _condition_64697 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64697.isBuiltAndTrue ()) {
      if (_variant_64697.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1783)) ;
        _condition_64697 = GGS_bool (false) ;
      }else{
        _variant_64697.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_64647 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_64647.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1782)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_fifo.appendCString ("#define OS_START_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("CONST(tpl_priority_level, OS_CONST) tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1791)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1791))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65030 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65030 = NULL ;
    while (((operand_65030 = enumerator_65030.nextObject ()))) {
      macroValidPointer (operand_65030) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65283 = var_cas_powerof2 ;
      if (cond_65283.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65240 = GGS_uint (32U) ;
        GGS_bool _condition_65240 (_variant_65240.isBuilt (), true) ;
        while (_condition_65240.isBuiltAndTrue ()) {
          _condition_65240 = (operand_65030->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65240.isBuiltAndTrue ()) {
            if (_variant_65240.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1799)) ;
              _condition_65240 = GGS_bool (false) ;
            }else{
              _variant_65240.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1798)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)) ;
      }else if (cond_65283.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65030->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1804))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1804))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_65465 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_65465.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1813)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1814)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1814)) COMMA_SOURCE_FILE_AT_LINE (1814)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1830)) ;
  const GGS_bool cond_75450 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_75450.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.reader_value () ;
    const GGS_bool cond_75362 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_75362.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1835)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1836)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1837)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1838)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1841)) ;
      const GGS_bool cond_66762 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1842))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_66762.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1843)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1846)) ;
      const GGS_bool cond_66945 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1847))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_66945.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1848)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1851)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1854)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1860)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1859)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1866)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1865)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1874)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1877)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1873)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1883)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1892)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1898)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1899)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1900)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1896)) ;
      const GGS_com  temp_68378 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)) ;
      if (temp_68378.isBuilt ()) {
        temp_68378 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1903)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1906)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1907)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1905)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1912)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1911)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1919)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1918)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1927)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1928)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1929)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1925)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1938)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1939)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1940)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1936)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1950)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1951)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1949)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1956)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1964)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1963)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1973)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1972)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1980)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1981)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1979)) ;
      const GGS_bool cond_71247 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_71247.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1988)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1987)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1994)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1995)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1993)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1998)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1999)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2000)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2001)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2002)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2003)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1997)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2009)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2008)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2016)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2015)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2023)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2024)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2026)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2022)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2033)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2039)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2042)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2048)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2055)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2062)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2063)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2064)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2065)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2066)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2067)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2069)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_75347 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_75347.isBuiltAndTrue ()) {
        const GGS_bool cond_73883 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_73883.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2081)) ;
        }
        const GGS_string temp_73937 = var_cas_header ;
        if (temp_73937.isBuilt ()) {
          temp_73937 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2083)) ;
        }
        const GGS_bool cond_74087 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74087.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2085)) ;
        }
        const GGS_string temp_74145 = var_cas_obj_header ;
        if (temp_74145.isBuilt ()) {
          temp_74145 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2087)) ;
        }
        const GGS_bool cond_74303 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74303.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2089)) ;
        }
        const GGS_string temp_74365 = var_cas_implementation ;
        if (temp_74365.isBuilt ()) {
          temp_74365 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2091)) ;
        }
        const GGS_bool cond_74518 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_74518.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2093)) ;
        }
        const GGS_string temp_74571 = var_cas_types ;
        if (temp_74571.isBuilt ()) {
          temp_74571 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2095)) ;
        }
        const GGS_bool cond_75287 = gOption_goil_5F_options_generate_5F_makefile.reader_value () ;
        if (cond_75287.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent () ;
          const GGS_bool cond_74863 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_74863.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_75017 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
          if (cond_75017.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2103)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2106)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ().reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (2105)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2112)) ;
      }
    }else if (cond_75362.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2115)) ;
    }
  }else if (cond_75450.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2118)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

