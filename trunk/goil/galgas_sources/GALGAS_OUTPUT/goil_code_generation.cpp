//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.4                         *
//                    november 13th, 2009, at 11h40'43"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7222 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7222.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7452 = var_cas_startuphook ; // CAST instruction
    if (_var_7452.getPtr () != NULL) {
      macroValidPointer (_var_7452.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7452.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7452.getPtr ()) ;
        const GGS_bool cond_7435 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
        if (cond_7435.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7693 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7693.getPtr () != NULL) {
      macroValidPointer (_var_7693.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7693.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7693.getPtr ()) ;
        const GGS_bool cond_7676 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
        if (cond_7676.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7919 = var_cas_errorhook ; // CAST instruction
    if (_var_7919.getPtr () != NULL) {
      macroValidPointer (_var_7919.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7919.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7919.getPtr ()) ;
        const GGS_bool cond_7902 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
        if (cond_7902.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8156 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8156.getPtr () != NULL) {
      macroValidPointer (_var_8156.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8156.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8156.getPtr ()) ;
        const GGS_bool cond_8139 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
        if (cond_8139.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8398 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8398.getPtr () != NULL) {
      macroValidPointer (_var_8398.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8398.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8398.getPtr ()) ;
        const GGS_bool cond_8381 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        if (cond_8381.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8653 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8653.getPtr () != NULL) {
      macroValidPointer (_var_8653.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8653.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8653.getPtr ()) ;
        const GGS_bool cond_8636 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        if (cond_8636.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8923 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8923.getPtr () != NULL) {
      macroValidPointer (_var_8923.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8923.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8923.getPtr ()) ;
        const GGS_bool cond_8906 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        if (cond_8906.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9178 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9178.getPtr () != NULL) {
      macroValidPointer (_var_9178.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9178.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9178.getPtr ()) ;
        const GGS_bool cond_9161 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        if (cond_9161.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9364 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (237)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (241)) COMMA_SOURCE_FILE_AT_LINE (241))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
  const GGS_bool cond_9919 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9919.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_9919.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11462 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_11462.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10334 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ; // CAST instruction
      if (_var_10334.getPtr () != NULL) {
        macroValidPointer (_var_10334.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10334.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10334.getPtr ()) ;
          const GGS_bool cond_10313 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
          if (cond_10313.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10512 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ; // CAST instruction
      if (_var_10512.getPtr () != NULL) {
        macroValidPointer (_var_10512.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10512.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10512.getPtr ()) ;
          const GGS_bool cond_10491 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
          if (cond_10491.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10820 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10820 = NULL ;
      while (((operand_10820 = enumerator_10820.nextObject ()))) {
        macroValidPointer (operand_10820) ;
        { const GGS_timing_prot _var_11018 = operand_10820->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ; // CAST instruction
          if (_var_11018.getPtr () != NULL) {
            macroValidPointer (_var_11018.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11018.getPtr ()))) {
            }else{
              const GGS_bool cond_10998 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_10998.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11067 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_11067 = NULL ;
      while (((operand_11067 = enumerator_11067.nextObject ()))) {
        macroValidPointer (operand_11067) ;
        { const GGS_timing_prot _var_11262 = operand_11067->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ; // CAST instruction
          if (_var_11262.getPtr () != NULL) {
            macroValidPointer (_var_11262.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11262.getPtr ()))) {
            }else{
              const GGS_bool cond_11242 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11242.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11401 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11401.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11528 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
  if (temp_11528.isBuilt ()) {
    temp_11528 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11694 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), true) ;
    const GGS_ident_map::cElement * operand_11694 = NULL ;
    while (((operand_11694 = enumerator_11694.nextObject ()))) {
      macroValidPointer (operand_11694) ;
      { const GGS_basic_type _var_11932 = operand_11694->mInfo.value ; // CAST instruction
        if (_var_11932.getPtr () != NULL) {
          macroValidPointer (_var_11932.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11932.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11932.getPtr ()) ;
            const GGS_bool cond_11903 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
            if (cond_11903.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11694->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
  const GGS_bool cond_12497 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("arm")) ;
  if (cond_12497.isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (cond_12497.isBuiltAndFalse ()) {
    const GGS_bool cond_12568 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("avr")) ;
    if (cond_12568.isBuiltAndTrue ()) {
      var_cas_trampoline_target = GGS_string ("avr") ;
    }else if (cond_12568.isBuiltAndFalse ()) {
      const GGS_bool cond_12640 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("c166")) ;
      if (cond_12640.isBuiltAndTrue ()) {
        var_cas_trampoline_target = GGS_string ("c166") ;
      }else if (cond_12640.isBuiltAndFalse ()) {
        const GGS_bool cond_12714 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h")) ;
        if (cond_12714.isBuiltAndTrue ()) {
          var_cas_trampoline_target = GGS_string ("h8300h") ;
        }else if (cond_12714.isBuiltAndFalse ()) {
          const GGS_bool cond_12787 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12")) ;
          if (cond_12787.isBuiltAndTrue ()) {
            var_cas_trampoline_target = GGS_string ("hcs12") ;
          }else if (cond_12787.isBuiltAndFalse ()) {
            const GGS_bool cond_12861 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl")) ;
            if (cond_12861.isBuiltAndTrue ()) {
              var_cas_trampoline_target = GGS_string ("libpcl") ;
            }else if (cond_12861.isBuiltAndFalse ()) {
              const GGS_bool cond_12934 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix")) ;
              if (cond_12934.isBuiltAndTrue ()) {
                var_cas_trampoline_target = GGS_string ("posix") ;
              }else if (cond_12934.isBuiltAndFalse ()) {
                const GGS_bool cond_13011 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2")) ;
                if (cond_13011.isBuiltAndTrue ()) {
                  var_cas_trampoline_target = GGS_string ("posix_vp2") ;
                }else if (cond_13011.isBuiltAndFalse ()) {
                  const GGS_bool cond_13082 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc")) ;
                  if (cond_13082.isBuiltAndTrue ()) {
                    var_cas_trampoline_target = GGS_string ("ppc") ;
                  }else if (cond_13082.isBuiltAndFalse ()) {
                    const GGS_bool cond_13154 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e")) ;
                    if (cond_13154.isBuiltAndTrue ()) {
                      var_cas_trampoline_target = GGS_string ("v850e") ;
                    }else if (cond_13154.isBuiltAndFalse ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (338)) ;
                      var_cas_trampoline_target = GGS_string ("") ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13495 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13495 = NULL ;
    while (((operand_13495 = enumerator_13495.nextObject ()))) {
      macroValidPointer (operand_13495) ;
      const GGS_bool cond_13560 = (var_cas_first).operator_not () ;
      if (cond_13560.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13495->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (351))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (354)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (362)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (365)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (366)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (366)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (367)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (368)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (368)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (369)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (369)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (372)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (372)) ;
  const GGS_bool cond_14546 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14546.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (374)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (374)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (374)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (375)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (378)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) ;
  const GGS_bool cond_14885 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14885.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (380)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (380)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (381)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (383)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_15284 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_15284.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_15284.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15498 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (391)) ;
  if (temp_15498.isBuilt ()) {
    temp_15498 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (393)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_15766 = gOption_goil_5F_options_posix_5F_it.value () ;
  if (cond_15766.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (402)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (403)) ;
  const GGS_string temp_15916 = var_cas_makefileStr ;
  if (temp_15916.isBuilt ()) {
    temp_15916 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (405)) ;
  }
  GGS_string var_cas_makerulesStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (408)) ;
  GGS_string var_cas_filename = (var_cas_directory).operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget = function_trampoline_target_name (inLexique COMMA_SOURCE_FILE_AT_LINE (410)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (411)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (412)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (414)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (414)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (414)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (415)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (415)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (415)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (416)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (416)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (416)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (419)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (421)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (422)) COMMA_SOURCE_FILE_AT_LINE (422)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (423)) COMMA_SOURCE_FILE_AT_LINE (423)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (425)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (427)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (428)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (428)) COMMA_SOURCE_FILE_AT_LINE (428)) COMMA_SOURCE_FILE_AT_LINE (428)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_17416 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17416.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_17416.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (438)) ;
  const GGS_bool cond_17694 = (var_cas_filename.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (439))).operator_not () ;
  if (cond_17694.isBuiltAndTrue ()) {
    const GGS_string temp_17674 = var_cas_makerulesStr ;
    if (temp_17674.isBuilt ()) {
      temp_17674 (HERE)->method_writeToFile (inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (440)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (456)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (457)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (458)) ;
  const GGS_bool cond_18220 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_18220.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_18220.isBuiltAndFalse ()) {
    const GGS_bool cond_18278 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_18278.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_18278.isBuiltAndFalse ()) {
      const GGS_bool cond_18342 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_18342.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_18342.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (471)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (482)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (483)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (484)) ;
  const GGS_bool cond_18696 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_18696.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18696.isBuiltAndFalse ()) {
    const GGS_bool cond_18754 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_18754.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18754.isBuiltAndFalse ()) {
      const GGS_bool cond_18818 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_18818.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_18818.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (497)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_19154 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_19154.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19154.isBuiltAndFalse ()) {
    const GGS_bool cond_19213 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_19213.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19213.isBuiltAndFalse ()) {
      const GGS_bool cond_19278 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_19278.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19278.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (523)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (544)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (544)).add_operation (inLexique, var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (544)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (544)) COMMA_SOURCE_FILE_AT_LINE (544)) ;
  const GGS_bool cond_19843 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_19843.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (546)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (547)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (550)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (550)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (552)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20364 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20364 = NULL ;
    while (((operand_20364 = enumerator_20364.nextObject ()))) {
      macroValidPointer (operand_20364) ;
      { const GGS_basic_type _var_20632 = operand_20364->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (558)) ; // CAST instruction
        if (_var_20632.getPtr () != NULL) {
          macroValidPointer (_var_20632.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20632.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20632.getPtr ()) ;
            const GGS_bool cond_20514 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (559))).operator_strictSup (var_cas_max_act) ;
            if (cond_20514.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (559)) ;
            }
          }else{
            operand_20364->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_20364->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (560)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (561)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (563)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (563)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (565)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_21001 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_21001 = NULL ;
    while (((operand_21001 = enumerator_21001.nextObject ()))) {
      macroValidPointer (operand_21001) ;
      GGS_lstringlist  var_cas_evts = operand_21001->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
      const GGS_bool cond_21138 = (var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (572))).operator_strictSup (var_cas_max_ev) ;
      if (cond_21138.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (572)) ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (574)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (574)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (575)) ;
  var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (578)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (578)) ;
  const GGS_bool cond_21399 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21399.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (582)) ;
  var_cas_c = var_cas_resources.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (585)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (585)) ;
  const GGS_bool cond_21687 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21687.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (587)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (589)) ;
  var_cas_c = var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (592)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (592)) ;
  const GGS_bool cond_21979 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21979.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (594)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (596)) ;
  var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (599)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (599)) ;
  const GGS_bool cond_22275 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22275.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (601)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (603)) ;
  const GGS_bool cond_22663 = (var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (607))).operator_strictSup (var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (607))) ;
  if (cond_22663.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (608)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) ;
  }else if (cond_22663.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (610)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (610)) ;
  }
  const GGS_bool cond_22744 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22744.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (614)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (617)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (617)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (617)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (617)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (619)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_23211 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_23211 = NULL ;
    while (((operand_23211 = enumerator_23211.nextObject ()))) {
      macroValidPointer (operand_23211) ;
      { const GGS_app_trusted_obj _var_23371 = operand_23211->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (625)) ; // CAST instruction
        if (_var_23371.getPtr () != NULL) {
          macroValidPointer (_var_23371.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_23371.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_23371.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_23290 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (627)), true) ;
              while (enumerator_23290.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_23290._key (HERE)) ;
                enumerator_23290.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (633)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (633)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (633)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (634)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (637)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (639)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (649)).add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (649)) COMMA_SOURCE_FILE_AT_LINE (649)) COMMA_SOURCE_FILE_AT_LINE (649)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (651)) COMMA_SOURCE_FILE_AT_LINE (651)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (664)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (665)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (666)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (667)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_24822 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24822 = NULL ;
    while (((operand_24822 = enumerator_24822.nextObject ()))) {
      macroValidPointer (operand_24822) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24822->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) ;
      { const GGS_action_obj _var_25885 = var_cas_alarm_action ; // CAST instruction
        if (_var_25885.getPtr () != NULL) {
          macroValidPointer (_var_25885.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25885.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25885.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (680)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (680)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (681)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (681))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (681)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25885.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25885.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (684)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (684))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (684)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25885.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25885.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (687)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (687))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (687)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25885.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25885.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (690)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (690))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (690)) ;
          }else{
            operand_24822->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (692)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24822->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (696)) ;
      { const GGS_autostart_obj _var_26795 = var_cas_autostart ; // CAST instruction
        if (_var_26795.getPtr () != NULL) {
          macroValidPointer (_var_26795.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26795.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (699)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (700)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (701)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26795.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (703)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (704)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (705)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26795.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26795.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (707)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (709)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (709)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (709)) COMMA_SOURCE_FILE_AT_LINE (709)) ;
          }else{
            operand_24822->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (711)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24822->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (715)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24822->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)) COMMA_SOURCE_FILE_AT_LINE (716)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24822->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (717))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (718))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (718)) ;
      const GGS_bool cond_27435 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_27435.isBuiltAndTrue ()) {
        const GGS_bool cond_27419 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (722))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_27419.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_27320 = var_cas_app_for_obj ;
          if (temp_27320.isBuilt ()) {
            temp_27320 (HERE)->method_get (inLexique, operand_24822->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (724)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (725)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27610 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (735)), true) ;
    if (enumerator_27610 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27610 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_27610._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27610._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (741))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27610._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27610._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27610.next () ;
        _foreach_loop_27610 = (enumerator_27610 .hasCurrentObject ()) ;
        if (_foreach_loop_27610) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27610) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (751)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (752)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (753)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (753)) COMMA_SOURCE_FILE_AT_LINE (753)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28848 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28848 = NULL ;
    while (((operand_28848 = enumerator_28848.nextObject ()))) {
      macroValidPointer (operand_28848) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28848->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
      var_cas_act_as_basic = operand_28848->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (778)) ;
      { const GGS_basic_type _var_29271 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_29271.getPtr () != NULL) {
          macroValidPointer (_var_29271.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29271.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29271.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (781)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (782)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (783)) ;
          }
        }
      }
      { const GGS_basic_type _var_29457 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29457.getPtr () != NULL) {
          macroValidPointer (_var_29457.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29457.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29457.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (786)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (787)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (788)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_28848->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_29698 = (var_cas_tl.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (798))).operator_strictSup (GGS_uint (0U)) ;
  if (cond_29698.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_29668 = var_cas_tl ;
    if (temp_29668.isBuilt ()) {
      temp_29668 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (799)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29793 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29793 = NULL ;
    while (((operand_29793 = enumerator_29793.nextObject ()))) {
      macroValidPointer (operand_29793) ;
      const GGS_bool cond_30049 = (operand_29793->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_30049.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29793->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_29793->name, var_cas_actual_prio, operand_29793->act COMMA_SOURCE_FILE_AT_LINE (812)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_32392 = (var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (831))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_32392.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30842 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30842 = NULL ;
      while (((operand_30842 = enumerator_30842.nextObject ()))) {
        macroValidPointer (operand_30842) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30842->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (843)) ;
        const GGS_isr_obj  temp_31090 = operand_30842->mInfo.isr ;
        if (temp_31090.isBuilt ()) {
          temp_31090 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (844)) ;
        }
        { const GGS_basic_type _var_31293 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_31293.getPtr () != NULL) {
            macroValidPointer (_var_31293.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_31293.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_31293.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (847)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (848)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (849)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_30842->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (862)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_31786 = (var_cas_il.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (864))).operator_strictSup (GGS_uint (0U)) ;
    if (cond_31786.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_31752 = var_cas_il ;
      if (temp_31752.isBuilt ()) {
        temp_31752 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (865)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31904 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31904 = NULL ;
      while (((operand_31904 = enumerator_31904.nextObject ()))) {
        macroValidPointer (operand_31904) ;
        const GGS_bool cond_32180 = (operand_31904->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_32180.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31904->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (875)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_31904->name, var_cas_actual_prio, operand_31904->act COMMA_SOURCE_FILE_AT_LINE (878)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_32392.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_33288 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_33288 = NULL ;
    while (((operand_33288 = enumerator_33288.nextObject ()))) {
      macroValidPointer (operand_33288) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33429 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33429 = NULL ;
        while (((operand_33429 = enumerator_33429.nextObject ()))) {
          macroValidPointer (operand_33429) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33429->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (917)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33288->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (919)) ;
          const GGS_bool cond_33977 = var_cas_owned ;
          if (cond_33977.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33714 = var_cas_prio_for_task ;
            if (temp_33714.isBuilt ()) {
              temp_33714 (HERE)->method_get (inLexique, operand_33429->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (923)) ;
            }
            const GGS_bool cond_33829 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_33829.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (927)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33429->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (928))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (928))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34023 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34023 = NULL ;
        while (((operand_34023 = enumerator_34023.nextObject ()))) {
          macroValidPointer (operand_34023) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34023->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (932)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33288->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (934)) ;
          const GGS_bool cond_34571 = var_cas_owned ;
          if (cond_34571.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34307 = var_cas_prio_for_isr ;
            if (temp_34307.isBuilt ()) {
              temp_34307 (HERE)->method_get (inLexique, operand_34023->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (938)) ;
            }
            const GGS_bool cond_34423 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34423.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (942)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_34023->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (943))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (943))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_34681 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_34681.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34870 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34870 = NULL ;
        while (((operand_34870 = enumerator_34870.nextObject ()))) {
          macroValidPointer (operand_34870) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34870->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (956)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33288->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (958)) ;
          const GGS_bool cond_35299 = var_cas_owned ;
          if (cond_35299.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35155 = var_cas_prio_for_task ;
            if (temp_35155.isBuilt ()) {
              temp_35155 (HERE)->method_get (inLexique, operand_34870->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (962)) ;
            }
            const GGS_bool cond_35279 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35279.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (964)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35345 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35345 = NULL ;
        while (((operand_35345 = enumerator_35345.nextObject ()))) {
          macroValidPointer (operand_35345) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35345->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (969)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33288->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (971)) ;
          const GGS_bool cond_35774 = var_cas_owned ;
          if (cond_35774.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35629 = var_cas_prio_for_isr ;
            if (temp_35629.isBuilt ()) {
              temp_35629 (HERE)->method_get (inLexique, operand_35345->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (975)) ;
            }
            const GGS_bool cond_35754 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35754.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (977)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_33288->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (982)) ;
      var_cas_comments.modifier_put (inLexique, operand_33288->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (983)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37418 = var_cas_max_prio ;
  GGS_bool _condition_37418 (_variant_37418.isBuilt (), true) ;
  while (_condition_37418.isBuiltAndTrue ()) {
    _condition_37418 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37418.isBuiltAndTrue ()) {
      if (_variant_37418.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1028)) ;
        _condition_37418 = GGS_bool (false) ;
      }else{
        _variant_37418.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36775 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36775 = NULL ;
          while (((operand_36775 = enumerator_36775.nextObject ()))) {
            macroValidPointer (operand_36775) ;
            const GGS_bool cond_36867 = (operand_36775->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36867.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36775->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1013)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36921 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36921 = NULL ;
          while (((operand_36921 = enumerator_36921.nextObject ()))) {
            macroValidPointer (operand_36921) ;
            const GGS_bool cond_37013 = (operand_36921->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37013.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36921->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1016)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37067 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_37067 = NULL ;
          while (((operand_37067 = enumerator_37067.nextObject ()))) {
            macroValidPointer (operand_37067) ;
            const GGS_bool cond_37159 = (operand_37067->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37159.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37067->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1019)) ;
            }
          }
        }
        const GGS_bool cond_37356 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_37356.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1024)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37594 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37594 = NULL ;
    while (((operand_37594 = enumerator_37594.nextObject ()))) {
      macroValidPointer (operand_37594) ;
      GGS_string var_cas_app_name = operand_37594->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37649 (operand_37594->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)), true) ;
        const GGS_ident_map::cElement * operand_37649 = NULL ;
        while (((operand_37649 = enumerator_37649.nextObject ()))) {
          macroValidPointer (operand_37649) ;
          const GGS_bool cond_37769 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37649->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)) COMMA_SOURCE_FILE_AT_LINE (1042))).operator_not () ;
          if (cond_37769.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37649->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1043)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37804 (operand_37594->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)), true) ;
        const GGS_ident_map::cElement * operand_37804 = NULL ;
        while (((operand_37804 = enumerator_37804.nextObject ()))) {
          macroValidPointer (operand_37804) ;
          const GGS_bool cond_37923 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37804->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)) COMMA_SOURCE_FILE_AT_LINE (1047))).operator_not () ;
          if (cond_37923.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37804->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1048)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37958 (operand_37594->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
        const GGS_ident_map::cElement * operand_37958 = NULL ;
        while (((operand_37958 = enumerator_37958.nextObject ()))) {
          macroValidPointer (operand_37958) ;
          const GGS_bool cond_38079 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37958->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) COMMA_SOURCE_FILE_AT_LINE (1052))).operator_not () ;
          if (cond_38079.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37958->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1053)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38114 (operand_37594->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), true) ;
        const GGS_ident_map::cElement * operand_38114 = NULL ;
        while (((operand_38114 = enumerator_38114.nextObject ()))) {
          macroValidPointer (operand_38114) ;
          const GGS_bool cond_38240 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38114->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057))).operator_not () ;
          if (cond_38240.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38114->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1058)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38275 (operand_37594->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), true) ;
        const GGS_ident_map::cElement * operand_38275 = NULL ;
        while (((operand_38275 = enumerator_38275.nextObject ()))) {
          macroValidPointer (operand_38275) ;
          const GGS_bool cond_38398 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38275->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062))).operator_not () ;
          if (cond_38398.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38275->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1063)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38433 (operand_37594->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)), true) ;
        const GGS_ident_map::cElement * operand_38433 = NULL ;
        while (((operand_38433 = enumerator_38433.nextObject ()))) {
          macroValidPointer (operand_38433) ;
          const GGS_bool cond_38557 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38433->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) COMMA_SOURCE_FILE_AT_LINE (1067))).operator_not () ;
          if (cond_38557.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38433->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1068)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1090)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39356 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39356 = NULL ;
    while (((operand_39356 = enumerator_39356.nextObject ()))) {
      macroValidPointer (operand_39356) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_39356->mKey,  operand_39356->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1104)) COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1106))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1107))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1108))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1110))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_40542 = (operand_39356->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1117)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1117))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_40542.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      }else if (cond_40542.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1121)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1123)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1124)) COMMA_SOURCE_FILE_AT_LINE (1124)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1125))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1125)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1128)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_41027 = var_cas_actual_priorities ;
      if (temp_41027.isBuilt ()) {
        temp_41027 (HERE)->method_get (inLexique, operand_39356->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1131)) ;
      }
      const GGS_bool cond_41298 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_41298.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_41487 = (operand_39356->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1139))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_41487.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1141)) ;
      }else if (cond_41487.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_39356->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1144)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41695 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41695 = NULL ;
          while (((operand_41695 = enumerator_41695.nextObject ()))) {
            macroValidPointer (operand_41695) ;
            const GGS_bool cond_42254 = var_cas_no_internal_rez_found ;
            if (cond_42254.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_41838 = var_cas_resources ;
              if (temp_41838.isBuilt ()) {
                temp_41838 (HERE)->method_get (inLexique, operand_41695->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1149)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)) ;
              { const GGS_resource_property_obj _var_42229 = var_cas_rez_prop ; // CAST instruction
                if (_var_42229.getPtr () != NULL) {
                  macroValidPointer (_var_42229.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_42229.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_41695->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1153)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1153)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_42403 = var_cas_no_internal_rez_found ;
        if (cond_42403.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1160)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1165)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39356->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)) ;
      { const GGS_basic_type _var_42836 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42836.getPtr () != NULL) {
          macroValidPointer (_var_42836.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42836.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42836.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1172)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1173)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39356->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1176)) ;
      { const GGS_task_autostart_obj _var_43372 = var_cas_autostart ; // CAST instruction
        if (_var_43372.getPtr () != NULL) {
          macroValidPointer (_var_43372.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43372.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1179)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43372.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          }else{
            operand_39356->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1183)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_39356->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43550 = var_cas_timing_prot ;
      if (temp_43550.isBuilt ()) {
        temp_43550 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39356->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1189)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1191)) ;
      const GGS_bool cond_44426 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_44426.isBuiltAndTrue ()) {
        const GGS_bool cond_44410 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1195))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_44410.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43966 = var_cas_app_for_obj ;
          if (temp_43966.isBuilt ()) {
            temp_43966 (HERE)->method_get (inLexique, operand_39356->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1197)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1198)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_44180 = var_cas_apps ;
          if (temp_44180.isBuilt ()) {
            temp_44180 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1202)) ;
          }
          { const GGS_app_trusted_obj _var_44323 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1203)) ; // CAST instruction
            if (_var_44323.getPtr () != NULL) {
              macroValidPointer (_var_44323.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44323.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1204)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_SOURCE_FILE_AT_LINE (1206)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_44844 = var_cas_non_preemptable_exists ;
  if (cond_44844.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1224)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) COMMA_SOURCE_FILE_AT_LINE (1225)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1226)) COMMA_SOURCE_FILE_AT_LINE (1226)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1243)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_45846 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45846 = NULL ;
    while (((operand_45846 = enumerator_45846.nextObject ()))) {
      macroValidPointer (operand_45846) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45846->mKey,  operand_45846->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1258))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1259))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1260))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1261))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1262))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1263))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1263)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1265))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_46668 = var_cas_actual_priorities ;
      if (temp_46668.isBuilt ()) {
        temp_46668 (HERE)->method_get (inLexique, operand_45846->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46831 = operand_45846->mInfo.isr ;
      if (temp_46831.isBuilt ()) {
        temp_46831 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1273)) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_45846->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_47074 = var_cas_timing_prot ;
      if (temp_47074.isBuilt ()) {
        temp_47074 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45846->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1279)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1280)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      const GGS_bool cond_47884 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_47884.isBuiltAndTrue ()) {
        const GGS_bool cond_47868 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1285))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_47868.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_47425 = var_cas_app_for_obj ;
          if (temp_47425.isBuilt ()) {
            temp_47425 (HERE)->method_get (inLexique, operand_45846->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1287)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1288)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_47638 = var_cas_apps ;
          if (temp_47638.isBuilt ()) {
            temp_47638 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1292)) ;
          }
          { const GGS_app_trusted_obj _var_47781 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)) ; // CAST instruction
            if (_var_47781.getPtr () != NULL) {
              macroValidPointer (_var_47781.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47781.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1296)) COMMA_SOURCE_FILE_AT_LINE (1296)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1311)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1315)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1315)) COMMA_SOURCE_FILE_AT_LINE (1315)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1316)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1329)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_48962 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48962 = NULL ;
    while (((operand_48962 = enumerator_48962.nextObject ()))) {
      macroValidPointer (operand_48962) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48962->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1337)) COMMA_SOURCE_FILE_AT_LINE (1337)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48962->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1338))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1338)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_48962->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1340))) ;
      const GGS_bool cond_49356 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_49356.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1345)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48962->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)) ;
      { const GGS_basic_type _var_49693 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49693.getPtr () != NULL) {
          macroValidPointer (_var_49693.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49693.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49693.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1351)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1352)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1353)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_48962->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)) ;
      { const GGS_basic_type _var_50094 = var_cas_max_as_basic ; // CAST instruction
        if (_var_50094.getPtr () != NULL) {
          macroValidPointer (_var_50094.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50094.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50094.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1360)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1361)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_48962->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) ;
      { const GGS_basic_type _var_50486 = var_cas_min_as_basic ; // CAST instruction
        if (_var_50486.getPtr () != NULL) {
          macroValidPointer (_var_50486.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50486.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50486.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1366)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1366)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1368)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1369)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_51574 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_51574.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_48962->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)) ;
        { const GGS_counter_type _var_51104 = var_cas_type ; // CAST instruction
          if (_var_51104.getPtr () != NULL) {
            macroValidPointer (_var_51104.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_51104.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_51104.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1382)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1383)) ;
        const GGS_bool cond_51316 = (operand_48962->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1385))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_51316.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1386)) ;
        }else if (cond_51316.isBuiltAndFalse ()) {
          const GGS_bool cond_51538 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1388))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_51538.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_51429 = var_cas_app_for_obj ;
            if (temp_51429.isBuilt ()) {
              temp_51429 (HERE)->method_get (inLexique, operand_48962->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1390)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1391)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1400)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_52834 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_52834.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_52091 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_52091 = enumerator_52091.nextObject () ;
      if ((operand_52091 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_52091 ;
        do{
          macroValidPointer (operand_52091) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_52091->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1416))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52091->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52091->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1418))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52091->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1418))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_52091 = enumerator_52091.nextObject () ;
          _foreach_loop_52091 = ((operand_52091 != NULL)) ;
          if (_foreach_loop_52091) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_52091) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1426)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1426)) COMMA_SOURCE_FILE_AT_LINE (1426)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1427)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1428)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1429)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1444)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1445)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_53765 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53765 = NULL ;
    while (((operand_53765 = enumerator_53765.nextObject ()))) {
      macroValidPointer (operand_53765) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_53765->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53765->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1455)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_54046 = var_cas_rez_prio ;
      if (temp_54046.isBuilt ()) {
        temp_54046 (HERE)->method_get (inLexique, operand_53765->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      }
      const GGS_string_map  temp_54098 = var_cas_rez_comments ;
      if (temp_54098.isBuilt ()) {
        temp_54098 (HERE)->method_get (inLexique, operand_53765->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1460)) ;
      }
      { const GGS_resource_property_obj _var_54594 = var_cas_rez_prop ; // CAST instruction
        if (_var_54594.getPtr () != NULL) {
          macroValidPointer (_var_54594.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54594.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54594.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54594.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53765->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1474)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53765->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)) COMMA_SOURCE_FILE_AT_LINE (1476)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53765->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1477))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1477)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1479)) COMMA_SOURCE_FILE_AT_LINE (1479)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1480)) ;
      const GGS_bool cond_55128 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_55128.isBuiltAndTrue ()) {
        const GGS_bool cond_55112 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1483))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_55112.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_55010 = var_cas_app_for_obj ;
          if (temp_55010.isBuilt ()) {
            temp_55010 (HERE)->method_get (inLexique, operand_53765->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1485)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1486)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_55319 (var_cas_regular_rez, true) ;
    while (enumerator_55319.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55319._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1498))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55319._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55319._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_55319.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55555 (var_cas_regular_rez, true) ;
    if (enumerator_55555 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55555 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_55555._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55555.next () ;
        _foreach_loop_55555 = (enumerator_55555 .hasCurrentObject ()) ;
        if (_foreach_loop_55555) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55555) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1517)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1518)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1518)) COMMA_SOURCE_FILE_AT_LINE (1518)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1519)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1531)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_57292 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_57292 = NULL ;
    while (((operand_57292 = enumerator_57292.nextObject ()))) {
      macroValidPointer (operand_57292) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_57292->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1554)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57465 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57465 = NULL ;
        while (((operand_57465 = enumerator_57465.nextObject ()))) {
          macroValidPointer (operand_57465) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_57542 = var_cas_events ;
          if (temp_57542.isBuilt ()) {
            temp_57542 (HERE)->method_get (inLexique, operand_57465->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1558)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1560)) ;
          { const GGS_event_mask_obj _var_58432 = var_cas_mask_obj ; // CAST instruction
            if (_var_58432.getPtr () != NULL) {
              macroValidPointer (_var_58432.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58432.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_58432.getPtr ()) ;
                const GGS_bool cond_57883 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_57883.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1565)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1565))) ;
                }else if (cond_57883.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1567)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_57465->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1567)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1568)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_58432.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_58282 = var_cas_evt_usage.reader_hasKey (inLexique, operand_57465->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1571)) COMMA_SOURCE_FILE_AT_LINE (1571)) ;
                if (cond_58282.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_57465->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1573)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1574)) ;
                }else if (cond_58282.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_57465->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1578)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_58642 = var_cas_tasks_for_event.reader_hasKey (inLexique, operand_57465->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1583)) COMMA_SOURCE_FILE_AT_LINE (1583)) ;
          if (cond_58642.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_57465->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1585)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_57292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1587))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_57465->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1588)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_57292->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1591)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58900 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58900 = NULL ;
    while (((operand_58900 = enumerator_58900.nextObject ()))) {
      macroValidPointer (operand_58900) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58900->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1599)) ;
      { const GGS_event_mask_obj _var_59338 = var_cas_evt_mask ; // CAST instruction
        if (_var_59338.getPtr () != NULL) {
          macroValidPointer (_var_59338.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59338.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_59338.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58900->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1603))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1603)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58900->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) COMMA_SOURCE_FILE_AT_LINE (1604)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)) COMMA_SOURCE_FILE_AT_LINE (1605)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59499 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59499 = NULL ;
    while (((operand_59499 = enumerator_59499.nextObject ()))) {
      macroValidPointer (operand_59499) ;
      var_cas_sort_evts.addAssign_operation (operand_59499->mKey, operand_59499->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59669 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59669 = NULL ;
    while (((operand_59669 = enumerator_59669.nextObject ()))) {
      macroValidPointer (operand_59669) ;
      const GGS_bool cond_61004 = var_cas_tasks_for_event.reader_hasKey (inLexique, operand_59669->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1627)) COMMA_SOURCE_FILE_AT_LINE (1627)) ;
      if (cond_61004.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59781 = var_cas_tasks_for_event ;
        if (temp_59781.isBuilt ()) {
          temp_59781 (HERE)->method_get (inLexique, operand_59669->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1629)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59848 (var_cas_tasks, true) ;
          while (enumerator_59848.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59911 = var_cas_task_mask ;
            if (temp_59911.isBuilt ()) {
              temp_59911 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59848._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1633)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59848.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_60238 = GGS_uint (32U) ;
        GGS_bool _condition_60238 (_variant_60238.isBuilt (), true) ;
        while (_condition_60238.isBuiltAndTrue ()) {
          _condition_60238 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1640)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_60238.isBuiltAndTrue ()) {
            if (_variant_60238.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1642)) ;
              _condition_60238 = GGS_bool (false) ;
            }else{
              _variant_60238.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1641)) ;
            }
          }
        }
        const GGS_bool cond_60409 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1643))) ;
        if (cond_60409.isBuiltAndTrue ()) {
          operand_59669->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59669->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1644)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1645)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60533 (var_cas_tasks, true) ;
          while (enumerator_60533.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60533._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1650)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60533._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1652)) ;
            enumerator_60533.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59669->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1656))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1656)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59669->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)) COMMA_SOURCE_FILE_AT_LINE (1657)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)) COMMA_SOURCE_FILE_AT_LINE (1658)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1737)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1756)) ;
  const GGS_bool cond_64417 = var_cas_config.reader_hasKey (inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1758)) ;
  if (cond_64417.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_64176 = var_cas_config ;
    if (temp_64176.isBuilt ()) {
      temp_64176 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1760)) ;
    }
    { const GGS_basic_type _var_64403 = var_cas_pw ; // CAST instruction
      if (_var_64403.getPtr () != NULL) {
        macroValidPointer (_var_64403.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64403.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64403.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1763)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1765)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1766)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_64445 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64445 = NULL ;
    while (((operand_64445 = enumerator_64445.nextObject ()))) {
      macroValidPointer (operand_64445) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_64674 = var_cas_powerof2 ;
      if (cond_64674.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64655 = GGS_uint (32U) ;
        GGS_bool _condition_64655 (_variant_64655.isBuilt (), true) ;
        while (_condition_64655.isBuiltAndTrue ()) {
          _condition_64655 = (operand_64445->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64655.isBuiltAndTrue ()) {
            if (_variant_64655.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1776)) ;
              _condition_64655 = GGS_bool (false) ;
            }else{
              _variant_64655.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1775)) ;
            }
          }
        }
      }else if (cond_64674.isBuiltAndFalse ()) {
        var_cas_max_size = operand_64445->fifosize ;
      }
      var_cas_fifo.appendCString ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1780))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1780))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1781)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1787)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1787))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_65144 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1788)) ;
  GGS_bool _condition_65144 (_variant_65144.isBuilt (), true) ;
  while (_condition_65144.isBuiltAndTrue ()) {
    _condition_65144 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_65144.isBuiltAndTrue ()) {
      if (_variant_65144.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1794)) ;
        _condition_65144 = GGS_bool (false) ;
      }else{
        _variant_65144.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_65094 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_65094.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1793)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1798)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1798))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65295 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65295 = NULL ;
    while (((operand_65295 = enumerator_65295.nextObject ()))) {
      macroValidPointer (operand_65295) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65548 = var_cas_powerof2 ;
      if (cond_65548.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65505 = GGS_uint (32U) ;
        GGS_bool _condition_65505 (_variant_65505.isBuilt (), true) ;
        while (_condition_65505.isBuiltAndTrue ()) {
          _condition_65505 = (operand_65295->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65505.isBuiltAndTrue ()) {
            if (_variant_65505.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1806)) ;
              _condition_65505 = GGS_bool (false) ;
            }else{
              _variant_65505.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1805)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)) ;
      }else if (cond_65548.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65295->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1811))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1811))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_65730 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_65730.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1814)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1818)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1819)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1819)) COMMA_SOURCE_FILE_AT_LINE (1819)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1835)) ;
  const GGS_bool cond_75533 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_75533.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    const GGS_bool cond_75445 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_75445.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1840)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1841)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1842)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1843)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1846)) ;
      const GGS_bool cond_66938 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1847))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_66938.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1848)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1851)) ;
      const GGS_bool cond_67121 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1852))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_67121.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1853)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1856)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1859)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1865)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1864)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1871)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1870)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1879)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1880)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1882)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1878)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1888)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1898)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1897)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1904)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1905)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1901)) ;
      const GGS_com  temp_68554 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1908)) ;
      if (temp_68554.isBuilt ()) {
        temp_68554 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1908)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1911)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1912)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1910)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1917)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1916)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1924)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1923)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1932)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1933)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1934)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1930)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1943)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1944)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1945)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1941)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1955)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1956)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1954)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1961)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1968)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1978)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1977)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1985)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1986)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1984)) ;
      const GGS_bool cond_71417 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_71417.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1993)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1992)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1999)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2000)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1998)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2003)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2007)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2008)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2009)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2002)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2014)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2013)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2021)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2020)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2032)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2034)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2027)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2038)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2044)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2047)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2050)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2057)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2064)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2065)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2066)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2067)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2069)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2070)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2071)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2072)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_75430 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_75430.isBuiltAndTrue ()) {
        const GGS_bool cond_73996 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_73996.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2083)) ;
        }
        const GGS_string temp_74050 = var_cas_header ;
        if (temp_74050.isBuilt ()) {
          temp_74050 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2085)) ;
        }
        const GGS_bool cond_74194 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74194.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2087)) ;
        }
        const GGS_string temp_74252 = var_cas_obj_header ;
        if (temp_74252.isBuilt ()) {
          temp_74252 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2089)) ;
        }
        const GGS_bool cond_74404 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74404.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2091)) ;
        }
        const GGS_string temp_74466 = var_cas_implementation ;
        if (temp_74466.isBuilt ()) {
          temp_74466 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2093)) ;
        }
        const GGS_bool cond_74613 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74613.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2095)) ;
        }
        const GGS_string temp_74666 = var_cas_types ;
        if (temp_74666.isBuilt ()) {
          temp_74666 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2097)) ;
        }
        const GGS_bool cond_75370 = gOption_goil_5F_options_generate_5F_makefile.value () ;
        if (cond_75370.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2100)) ;
          const GGS_bool cond_74952 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_74952.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_75100 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
          if (cond_75100.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2105)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2108)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (2111)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2111)) COMMA_SOURCE_FILE_AT_LINE (2107)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2114)) ;
      }
    }else if (cond_75445.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2117)) ;
    }
  }else if (cond_75533.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2120)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

