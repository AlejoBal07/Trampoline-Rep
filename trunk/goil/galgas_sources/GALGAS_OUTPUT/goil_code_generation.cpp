//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.7                         *
//                     december 18th, 2009, at 11h26'0"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 629
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (83)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (85)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (124)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (126)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (128)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (130)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (132)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (134)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (136)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (138)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (140)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (142)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (144)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (146)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (148)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (150)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (168)).reader_uppercaseString ()) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7360 = (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (171)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (171)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (171))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7360.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ;
  { const GGS_basic_type _var_7596 = var_cas_startuphook ; // CAST instruction
    if (_var_7596.getPtr () != NULL) {
      macroValidPointer (_var_7596.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7596.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7596.getPtr ()) ;
        const GGS_bool cond_7579 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
        if (cond_7579.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (183)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ;
  { const GGS_basic_type _var_7843 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7843.getPtr () != NULL) {
      macroValidPointer (_var_7843.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7843.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7843.getPtr ()) ;
        const GGS_bool cond_7826 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
        if (cond_7826.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) ;
  { const GGS_basic_type _var_8075 = var_cas_errorhook ; // CAST instruction
    if (_var_8075.getPtr () != NULL) {
      macroValidPointer (_var_8075.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8075.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8075.getPtr ()) ;
        const GGS_bool cond_8058 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (193)) ;
        if (cond_8058.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ;
  { const GGS_basic_type _var_8318 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8318.getPtr () != NULL) {
      macroValidPointer (_var_8318.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8318.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8318.getPtr ()) ;
        const GGS_bool cond_8301 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (200)) ;
        if (cond_8301.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (204)) ;
  { const GGS_basic_type _var_8566 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8566.getPtr () != NULL) {
      macroValidPointer (_var_8566.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8566.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8566.getPtr ()) ;
        const GGS_bool cond_8549 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) ;
        if (cond_8549.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (211)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) ;
  { const GGS_basic_type _var_8827 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8827.getPtr () != NULL) {
      macroValidPointer (_var_8827.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8827.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8827.getPtr ()) ;
        const GGS_bool cond_8810 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (214)) ;
        if (cond_8810.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (218)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (218)) ;
  { const GGS_basic_type _var_9103 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_9103.getPtr () != NULL) {
      macroValidPointer (_var_9103.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9103.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9103.getPtr ()) ;
        const GGS_bool cond_9086 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) ;
        if (cond_9086.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (225)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) ;
  { const GGS_basic_type _var_9364 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  GGS_bool var_cas_usecom = GGS_bool (false) ;
  const GGS_bool cond_9497 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (233)).reader_usecom (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
  if (cond_9497.isBuiltAndTrue ()) {
    var_cas_usecom = GGS_bool (true) ;
  }else if (cond_9497.isBuiltAndFalse ()) {
    var_cas_usecom = ((var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (236)).reader_count ()).operator_strictSup (GGS_uint (0U))).operator_or ((var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
  }
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COM"), var_cas_usecom COMMA_SOURCE_FILE_AT_LINE (239))) ;
  { const GGS_basic_type _var_9839 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (243)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ; // CAST instruction
    if (_var_9839.getPtr () != NULL) {
      macroValidPointer (_var_9839.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9839.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9839.getPtr ()) ;
        const GGS_bool cond_9822 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (245)) ;
        if (cond_9822.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) COMMA_SOURCE_FILE_AT_LINE (249)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (249))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (252)) COMMA_SOURCE_FILE_AT_LINE (252)) COMMA_SOURCE_FILE_AT_LINE (252))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), (function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (253)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (253)) COMMA_SOURCE_FILE_AT_LINE (253))).operator_isNotEqual (GGS_string ("")) COMMA_SOURCE_FILE_AT_LINE (253))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (256)).reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ;
  const GGS_bool cond_10429 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_10429.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (258))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_10429.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_12002 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_12002.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10856 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (268)).reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (268)) ; // CAST instruction
      if (_var_10856.getPtr () != NULL) {
        macroValidPointer (_var_10856.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10856.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10856.getPtr ()) ;
          const GGS_bool cond_10835 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
          if (cond_10835.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_11040 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ; // CAST instruction
      if (_var_11040.getPtr () != NULL) {
        macroValidPointer (_var_11040.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_11040.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_11040.getPtr ()) ;
          const GGS_bool cond_11019 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (275)) ;
          if (cond_11019.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_11344 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (284)), true) ;
      const GGS_task_map::cElement * operand_11344 = NULL ;
      while (((operand_11344 = enumerator_11344.nextObject ()))) {
        macroValidPointer (operand_11344) ;
        { const GGS_timing_prot _var_11552 = operand_11344->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (285)) ; // CAST instruction
          if (_var_11552.getPtr () != NULL) {
            macroValidPointer (_var_11552.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11552.getPtr ()))) {
            }else{
              const GGS_bool cond_11532 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11532.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11598 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (292)), true) ;
      const GGS_isr_map::cElement * operand_11598 = NULL ;
      while (((operand_11598 = enumerator_11598.nextObject ()))) {
        macroValidPointer (operand_11598) ;
        { const GGS_timing_prot _var_11802 = operand_11598->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (293)) ; // CAST instruction
          if (_var_11802.getPtr () != NULL) {
            macroValidPointer (_var_11802.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11802.getPtr ()))) {
            }else{
              const GGS_bool cond_11782 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11782.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11941 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11941.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_12074 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (308)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (308)) ;
  if (temp_12074.isBuilt ()) {
    temp_12074 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (308)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (312)) COMMA_SOURCE_FILE_AT_LINE (312))) ;
  {
    GGS_ident_map::cEnumerator enumerator_12240 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (315)).reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (315)), true) ;
    const GGS_ident_map::cElement * operand_12240 = NULL ;
    while (((operand_12240 = enumerator_12240.nextObject ()))) {
      macroValidPointer (operand_12240) ;
      { const GGS_basic_type _var_12484 = operand_12240->mInfo.value ; // CAST instruction
        if (_var_12484.getPtr () != NULL) {
          macroValidPointer (_var_12484.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_12484.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_12484.getPtr ()) ;
            const GGS_bool cond_12455 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (318)) ;
            if (cond_12455.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_12240->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (319))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (327)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13073 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13073 = NULL ;
    while (((operand_13073 = enumerator_13073.nextObject ()))) {
      macroValidPointer (operand_13073) ;
      const GGS_bool cond_13138 = (var_cas_first).operator_not () ;
      if (cond_13138.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13073->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (343))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (346)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (354)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (355)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (357)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (358)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (358)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (359)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (359)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (360)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (360)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (361)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (361)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (364)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
  const GGS_bool cond_14124 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14124.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (366)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (366)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (366)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (367)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (370)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (370)) ;
  const GGS_bool cond_14463 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14463.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (372)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (372)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (372)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (373)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (376)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_14904 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_14904.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_14904.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (381)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15118 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (385)) ;
  if (temp_15118.isBuilt ()) {
    temp_15118 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (385)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (388)) COMMA_SOURCE_FILE_AT_LINE (388))) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_LINKSCRIPT"), (function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (389)) COMMA_SOURCE_FILE_AT_LINE (389))).operator_isNotEqual (GGS_string ("")) COMMA_SOURCE_FILE_AT_LINE (389))) ;
  var_cas_flags.dotAssign_operation (function_bool_class_make_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (391)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (391))) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (392)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$SCRIPT_FILE$"),  function_link_script_name (inLexique, var_cas_os.reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (394)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_15801 = gOption_goil_5F_options_posix_5F_it.reader_value () ;
  if (cond_15801.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (403)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (404)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (406)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (408)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (408)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (408)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (409)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (409)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (409)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makefileStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (410)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (410)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (410)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (413)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) COMMA_SOURCE_FILE_AT_LINE (415)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (416)) COMMA_SOURCE_FILE_AT_LINE (416)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) COMMA_SOURCE_FILE_AT_LINE (417)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (419)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (421)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (421)) COMMA_SOURCE_FILE_AT_LINE (421)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (422)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (422)) COMMA_SOURCE_FILE_AT_LINE (422)) COMMA_SOURCE_FILE_AT_LINE (422)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_17079 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17079.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_17079.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (432)) ;
  const GGS_string temp_17271 = var_cas_makefileStr ;
  if (temp_17271.isBuilt ()) {
    temp_17271 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (433)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (447)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (448)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (449)) ;
  const GGS_bool cond_17818 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_17818.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_17818.isBuiltAndFalse ()) {
    const GGS_bool cond_17876 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_17876.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_17876.isBuiltAndFalse ()) {
      const GGS_bool cond_17940 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_17940.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_17940.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (462)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (473)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (474)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (475)) ;
  const GGS_bool cond_18294 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_18294.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18294.isBuiltAndFalse ()) {
    const GGS_bool cond_18352 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_18352.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18352.isBuiltAndFalse ()) {
      const GGS_bool cond_18416 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_18416.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_18416.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (488)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_18752 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_18752.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18752.isBuiltAndFalse ()) {
    const GGS_bool cond_18811 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_18811.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18811.isBuiltAndFalse ()) {
      const GGS_bool cond_18876 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_18876.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_18876.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (514)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (535)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (535)) COMMA_SOURCE_FILE_AT_LINE (535)) ;
  const GGS_bool cond_19441 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_19441.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (537)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (538)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (541)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (541)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (543)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19962 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19962 = NULL ;
    while (((operand_19962 = enumerator_19962.nextObject ()))) {
      macroValidPointer (operand_19962) ;
      { const GGS_basic_type _var_20230 = operand_19962->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (549)) ; // CAST instruction
        if (_var_20230.getPtr () != NULL) {
          macroValidPointer (_var_20230.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20230.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20230.getPtr ()) ;
            const GGS_bool cond_20112 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (550))).operator_strictSup (var_cas_max_act) ;
            if (cond_20112.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (550)) ;
            }
          }else{
            operand_19962->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_19962->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (551)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (552)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (554)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (554)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (556)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20599 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20599 = NULL ;
    while (((operand_20599 = enumerator_20599.nextObject ()))) {
      macroValidPointer (operand_20599) ;
      GGS_lstringlist  var_cas_evts = operand_20599->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (562)) ;
      const GGS_bool cond_20736 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_20736.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (565)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (565)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (566)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (569)) ;
  const GGS_bool cond_20997 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20997.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (571)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (576)) ;
  const GGS_bool cond_21285 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21285.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (578)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (583)) ;
  const GGS_bool cond_21577 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21577.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (585)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (587)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (590)) ;
  const GGS_bool cond_21873 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21873.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (592)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (594)) ;
  const GGS_bool cond_22261 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_22261.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (599)) ;
  }else if (cond_22261.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) ;
  }
  const GGS_bool cond_22342 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22342.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (604)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (605)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (608)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (608)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (608)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (610)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22809 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22809 = NULL ;
    while (((operand_22809 = enumerator_22809.nextObject ()))) {
      macroValidPointer (operand_22809) ;
      { const GGS_app_trusted_obj _var_22969 = operand_22809->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (616)) ; // CAST instruction
        if (_var_22969.getPtr () != NULL) {
          macroValidPointer (_var_22969.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22969.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22969.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22888 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (618)), true) ;
              while (enumerator_22888.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_22888._key (HERE)) ;
                enumerator_22888.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (624)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (624)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (625)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (628)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (630)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (640)) COMMA_SOURCE_FILE_AT_LINE (640)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_SOURCE_FILE_AT_LINE (642)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (655)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (656)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (657)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (658)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_24420 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24420 = NULL ;
    while (((operand_24420 = enumerator_24420.nextObject ()))) {
      macroValidPointer (operand_24420) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24420->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (667)) ;
      { const GGS_action_obj _var_25483 = var_cas_alarm_action ; // CAST instruction
        if (_var_25483.getPtr () != NULL) {
          macroValidPointer (_var_25483.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25483.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25483.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (671)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (671))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (671)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (672)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (672))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (672)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25483.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25483.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (675)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (675))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (675)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25483.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25483.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (678)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (678))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (678)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25483.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25483.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (681)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (681))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (681)) ;
          }else{
            operand_24420->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (683)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24420->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (687)) ;
      { const GGS_autostart_obj _var_26393 = var_cas_autostart ; // CAST instruction
        if (_var_26393.getPtr () != NULL) {
          macroValidPointer (_var_26393.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26393.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (690)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (691)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (692)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26393.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (694)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (695)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (696)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26393.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26393.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (698)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (699)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (699)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)) COMMA_SOURCE_FILE_AT_LINE (699)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (700)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (700)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }else{
            operand_24420->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (702)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24420->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (707)) COMMA_SOURCE_FILE_AT_LINE (707)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (708))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (708)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (709))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (709)) ;
      const GGS_bool cond_27039 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_27039.isBuiltAndTrue ()) {
        const GGS_bool cond_27023 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_27023.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_26924 = var_cas_app_for_obj ;
          if (temp_26924.isBuilt ()) {
            temp_26924 (HERE)->method_get (inLexique, operand_24420->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (715)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (716)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27214 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (726)), true) ;
    if (enumerator_27214 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27214 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_27214._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27214._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (732))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27214._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27214._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27214.next () ;
        _foreach_loop_27214 = (enumerator_27214 .hasCurrentObject ()) ;
        if (_foreach_loop_27214) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27214) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (742)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (743)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (744)) COMMA_SOURCE_FILE_AT_LINE (744)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28410 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28410 = NULL ;
    while (((operand_28410 = enumerator_28410.nextObject ()))) {
      macroValidPointer (operand_28410) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28410->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (767)) ;
      var_cas_act_as_basic = operand_28410->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (768)) ;
      { const GGS_basic_type _var_28833 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28833.getPtr () != NULL) {
          macroValidPointer (_var_28833.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28833.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28833.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (771)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (772)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (773)) ;
          }
        }
      }
      { const GGS_basic_type _var_29019 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29019.getPtr () != NULL) {
          macroValidPointer (_var_29019.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29019.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29019.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (776)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (777)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (778)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_28410->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_29260 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_29260.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_29230 = var_cas_tl ;
    if (temp_29230.isBuilt ()) {
      temp_29230 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (789)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29355 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29355 = NULL ;
    while (((operand_29355 = enumerator_29355.nextObject ()))) {
      macroValidPointer (operand_29355) ;
      const GGS_bool cond_29611 = (operand_29355->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_29611.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29355->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (799)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_29355->name, var_cas_actual_prio, operand_29355->act COMMA_SOURCE_FILE_AT_LINE (802)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_31913 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_31913.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30363 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30363 = NULL ;
      while (((operand_30363 = enumerator_30363.nextObject ()))) {
        macroValidPointer (operand_30363) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30363->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (832)) ;
        const GGS_isr_obj  temp_30611 = operand_30363->mInfo.isr ;
        if (temp_30611.isBuilt ()) {
          temp_30611 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (833)) ;
        }
        { const GGS_basic_type _var_30814 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30814.getPtr () != NULL) {
            macroValidPointer (_var_30814.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30814.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30814.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (836)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (837)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (838)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_30363->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (851)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_31307 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_31307.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_31273 = var_cas_il ;
      if (temp_31273.isBuilt ()) {
        temp_31273 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (854)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31425 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31425 = NULL ;
      while (((operand_31425 = enumerator_31425.nextObject ()))) {
        macroValidPointer (operand_31425) ;
        const GGS_bool cond_31701 = (operand_31425->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_31701.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31425->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (864)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_31425->name, var_cas_actual_prio, operand_31425->act COMMA_SOURCE_FILE_AT_LINE (867)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_31913.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32780 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32780 = NULL ;
    while (((operand_32780 = enumerator_32780.nextObject ()))) {
      macroValidPointer (operand_32780) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_32921 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_32921 = NULL ;
        while (((operand_32921 = enumerator_32921.nextObject ()))) {
          macroValidPointer (operand_32921) ;
          GGS_lstringlist  var_cas_owned_rez = operand_32921->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (905)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32780->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (907)) ;
          const GGS_bool cond_33472 = var_cas_owned ;
          if (cond_33472.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33209 = var_cas_prio_for_process ;
            if (temp_33209.isBuilt ()) {
              temp_33209 (HERE)->method_get (inLexique, operand_32921->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (911)) ;
            }
            const GGS_bool cond_33324 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_33324.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (915)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_32921->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (916))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (916))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33518 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33518 = NULL ;
        while (((operand_33518 = enumerator_33518.nextObject ()))) {
          macroValidPointer (operand_33518) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33518->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (920)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32780->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (922)) ;
          const GGS_bool cond_34070 = var_cas_owned ;
          if (cond_34070.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33806 = var_cas_prio_for_process ;
            if (temp_33806.isBuilt ()) {
              temp_33806 (HERE)->method_get (inLexique, operand_33518->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (926)) ;
            }
            const GGS_bool cond_33922 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_33922.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (930)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33518->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (931))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (931))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_34180 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_34180.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34369 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34369 = NULL ;
        while (((operand_34369 = enumerator_34369.nextObject ()))) {
          macroValidPointer (operand_34369) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34369->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (944)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32780->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (946)) ;
          const GGS_bool cond_34801 = var_cas_owned ;
          if (cond_34801.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34657 = var_cas_prio_for_process ;
            if (temp_34657.isBuilt ()) {
              temp_34657 (HERE)->method_get (inLexique, operand_34369->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (950)) ;
            }
            const GGS_bool cond_34781 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_34781.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (952)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34847 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34847 = NULL ;
        while (((operand_34847 = enumerator_34847.nextObject ()))) {
          macroValidPointer (operand_34847) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34847->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (957)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_32780->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (959)) ;
          const GGS_bool cond_35280 = var_cas_owned ;
          if (cond_35280.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35135 = var_cas_prio_for_process ;
            if (temp_35135.isBuilt ()) {
              temp_35135 (HERE)->method_get (inLexique, operand_34847->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (963)) ;
            }
            const GGS_bool cond_35260 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35260.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (965)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_32780->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (970)) ;
      var_cas_comments.modifier_put (inLexique, operand_32780->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (971)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_36755 = var_cas_max_prio ;
  GGS_bool _condition_36755 (_variant_36755.isBuilt (), true) ;
  while (_condition_36755.isBuiltAndTrue ()) {
    _condition_36755 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_36755.isBuiltAndTrue ()) {
      if (_variant_36755.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1012)) ;
        _condition_36755 = GGS_bool (false) ;
      }else{
        _variant_36755.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36258 (var_cas_prio_for_process, true) ;
          const GGS_prio_map::cElement * operand_36258 = NULL ;
          while (((operand_36258 = enumerator_36258.nextObject ()))) {
            macroValidPointer (operand_36258) ;
            const GGS_bool cond_36350 = (operand_36258->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36350.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36258->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1000)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36404 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36404 = NULL ;
          while (((operand_36404 = enumerator_36404.nextObject ()))) {
            macroValidPointer (operand_36404) ;
            const GGS_bool cond_36496 = (operand_36404->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36496.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36404->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1003)) ;
            }
          }
        }
        const GGS_bool cond_36693 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_36693.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_36931 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_36931 = NULL ;
    while (((operand_36931 = enumerator_36931.nextObject ()))) {
      macroValidPointer (operand_36931) ;
      GGS_string var_cas_app_name = operand_36931->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1024)) ;
      {
        GGS_ident_map::cEnumerator enumerator_36986 (operand_36931->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1025)), true) ;
        const GGS_ident_map::cElement * operand_36986 = NULL ;
        while (((operand_36986 = enumerator_36986.nextObject ()))) {
          macroValidPointer (operand_36986) ;
          const GGS_bool cond_37106 = (var_cas_app_for_obj.reader_hasKey (operand_36986->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)))).operator_not () ;
          if (cond_37106.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_36986->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1027)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37141 (operand_36931->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), true) ;
        const GGS_ident_map::cElement * operand_37141 = NULL ;
        while (((operand_37141 = enumerator_37141.nextObject ()))) {
          macroValidPointer (operand_37141) ;
          const GGS_bool cond_37260 = (var_cas_app_for_obj.reader_hasKey (operand_37141->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)))).operator_not () ;
          if (cond_37260.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37141->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1032)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37295 (operand_36931->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1035)), true) ;
        const GGS_ident_map::cElement * operand_37295 = NULL ;
        while (((operand_37295 = enumerator_37295.nextObject ()))) {
          macroValidPointer (operand_37295) ;
          const GGS_bool cond_37416 = (var_cas_app_for_obj.reader_hasKey (operand_37295->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1036)))).operator_not () ;
          if (cond_37416.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37295->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1037)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37451 (operand_36931->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37451 = NULL ;
        while (((operand_37451 = enumerator_37451.nextObject ()))) {
          macroValidPointer (operand_37451) ;
          const GGS_bool cond_37577 = (var_cas_app_for_obj.reader_hasKey (operand_37451->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)))).operator_not () ;
          if (cond_37577.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37451->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37612 (operand_36931->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37612 = NULL ;
        while (((operand_37612 = enumerator_37612.nextObject ()))) {
          macroValidPointer (operand_37612) ;
          const GGS_bool cond_37735 = (var_cas_app_for_obj.reader_hasKey (operand_37612->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)))).operator_not () ;
          if (cond_37735.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37612->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37770 (operand_36931->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_37770 = NULL ;
        while (((operand_37770 = enumerator_37770.nextObject ()))) {
          macroValidPointer (operand_37770) ;
          const GGS_bool cond_37894 = (var_cas_app_for_obj.reader_hasKey (operand_37770->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)))).operator_not () ;
          if (cond_37894.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37770->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1074)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_38693 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_38693 = NULL ;
    while (((operand_38693 = enumerator_38693.nextObject ()))) {
      macroValidPointer (operand_38693) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_38693->mKey,  operand_38693->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1084)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1088)) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1089))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1089)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1090))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1090)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1091))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1091)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1092))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1093))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1093)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1094))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1094)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_39879 = (operand_38693->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1101)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_39879.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      }else if (cond_39879.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1105)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1107)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1108)) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_40364 = var_cas_actual_priorities ;
      if (temp_40364.isBuilt ()) {
        temp_40364 (HERE)->method_get (inLexique, operand_38693->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      }
      const GGS_bool cond_40635 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_40635.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_40824 = (operand_38693->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1123))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_40824.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1125)) ;
      }else if (cond_40824.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_38693->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1128)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41032 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41032 = NULL ;
          while (((operand_41032 = enumerator_41032.nextObject ()))) {
            macroValidPointer (operand_41032) ;
            const GGS_bool cond_41591 = var_cas_no_internal_rez_found ;
            if (cond_41591.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_41175 = var_cas_resources ;
              if (temp_41175.isBuilt ()) {
                temp_41175 (HERE)->method_get (inLexique, operand_41032->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1133)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)) ;
              { const GGS_resource_property_obj _var_41566 = var_cas_rez_prop ; // CAST instruction
                if (_var_41566.getPtr () != NULL) {
                  macroValidPointer (_var_41566.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41566.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_41032->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1137)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_41740 = var_cas_no_internal_rez_found ;
        if (cond_41740.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1144)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1148)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1149)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_38693->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      { const GGS_basic_type _var_42173 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42173.getPtr () != NULL) {
          macroValidPointer (_var_42173.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42173.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42173.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1154)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1154)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1155)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1156)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1157)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_38693->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      { const GGS_task_autostart_obj _var_42709 = var_cas_autostart ; // CAST instruction
        if (_var_42709.getPtr () != NULL) {
          macroValidPointer (_var_42709.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_42709.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1163)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_42709.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1165)) ;
          }else{
            operand_38693->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1167)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_38693->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_42887 = var_cas_timing_prot ;
      if (temp_42887.isBuilt ()) {
        temp_42887 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_38693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1173)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1173)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1174)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      const GGS_bool cond_43841 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_43841.isBuiltAndTrue ()) {
        const GGS_bool cond_43754 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_43754.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43309 = var_cas_app_for_obj ;
          if (temp_43309.isBuilt ()) {
            temp_43309 (HERE)->method_get (inLexique, operand_38693->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_43523 = var_cas_apps ;
          if (temp_43523.isBuilt ()) {
            temp_43523 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1186)) ;
          }
          { const GGS_app_trusted_obj _var_43666 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)) ; // CAST instruction
            if (_var_43666.getPtr () != NULL) {
              macroValidPointer (_var_43666.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_43666.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1190)) COMMA_SOURCE_FILE_AT_LINE (1190)) ;
        }else if (cond_43754.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1192)) ;
        }
      }else if (cond_43841.isBuiltAndFalse ()) {
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_44325 = var_cas_non_preemptable_exists ;
  if (cond_44325.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1212)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)) COMMA_SOURCE_FILE_AT_LINE (1213)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)) COMMA_SOURCE_FILE_AT_LINE (1214)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1231)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_45327 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45327 = NULL ;
    while (((operand_45327 = enumerator_45327.nextObject ()))) {
      macroValidPointer (operand_45327) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45327->mKey,  operand_45327->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1241)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1245)) COMMA_SOURCE_FILE_AT_LINE (1245)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1246))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1246)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1247))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1247)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1248))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1248)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1249))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1249)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1250))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1250)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1251))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1251)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1253))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_46149 = var_cas_actual_priorities ;
      if (temp_46149.isBuilt ()) {
        temp_46149 (HERE)->method_get (inLexique, operand_45327->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1256)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46312 = operand_45327->mInfo.isr ;
      if (temp_46312.isBuilt ()) {
        temp_46312 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_45327->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_46555 = var_cas_timing_prot ;
      if (temp_46555.isBuilt ()) {
        temp_46555 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45327->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      const GGS_bool cond_47371 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_47371.isBuiltAndTrue ()) {
        const GGS_bool cond_47355 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_47355.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_46912 = var_cas_app_for_obj ;
          if (temp_46912.isBuilt ()) {
            temp_46912 (HERE)->method_get (inLexique, operand_45327->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1275)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1276)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_47125 = var_cas_apps ;
          if (temp_47125.isBuilt ()) {
            temp_47125 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1280)) ;
          }
          { const GGS_app_trusted_obj _var_47268 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)) ; // CAST instruction
            if (_var_47268.getPtr () != NULL) {
              macroValidPointer (_var_47268.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47268.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1282)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)) COMMA_SOURCE_FILE_AT_LINE (1284)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1299)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)) COMMA_SOURCE_FILE_AT_LINE (1303)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1304)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1317)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_48449 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48449 = NULL ;
    while (((operand_48449 = enumerator_48449.nextObject ()))) {
      macroValidPointer (operand_48449) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48449->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)) COMMA_SOURCE_FILE_AT_LINE (1325)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48449->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1326))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1326)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_48449->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1328))) ;
      const GGS_bool cond_48843 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_48843.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1333)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48449->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      { const GGS_basic_type _var_49180 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49180.getPtr () != NULL) {
          macroValidPointer (_var_49180.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49180.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49180.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1338)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1338)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1340)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1341)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_48449->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      { const GGS_basic_type _var_49581 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49581.getPtr () != NULL) {
          macroValidPointer (_var_49581.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49581.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49581.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1346)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1346)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1348)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1349)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_48449->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      { const GGS_basic_type _var_49973 = var_cas_min_as_basic ; // CAST instruction
        if (_var_49973.getPtr () != NULL) {
          macroValidPointer (_var_49973.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49973.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49973.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1355)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1356)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1357)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_51067 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_51067.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_48449->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)) ;
        { const GGS_counter_type _var_50597 = var_cas_type ; // CAST instruction
          if (_var_50597.getPtr () != NULL) {
            macroValidPointer (_var_50597.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50597.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50597.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1370)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1371)) ;
        const GGS_bool cond_50809 = (operand_48449->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1373))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_50809.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1374)) ;
        }else if (cond_50809.isBuiltAndFalse ()) {
          const GGS_bool cond_51031 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
          if (cond_51031.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_50922 = var_cas_app_for_obj ;
            if (temp_50922.isBuilt ()) {
              temp_50922 (HERE)->method_get (inLexique, operand_48449->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1378)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1379)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1388)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_52333 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_52333.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51590 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51590 = enumerator_51590.nextObject () ;
      if ((operand_51590 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51590 ;
        do{
          macroValidPointer (operand_51590) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_51590->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1404))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51590->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1405))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1405))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51590->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1406))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_51590->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1406))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51590 = enumerator_51590.nextObject () ;
          _foreach_loop_51590 = ((operand_51590 != NULL)) ;
          if (_foreach_loop_51590) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51590) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)) COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1415)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1416)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1417)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1432)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1433)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_53264 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53264 = NULL ;
    while (((operand_53264 = enumerator_53264.nextObject ()))) {
      macroValidPointer (operand_53264) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_53264->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53264->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_53545 = var_cas_rez_prio ;
      if (temp_53545.isBuilt ()) {
        temp_53545 (HERE)->method_get (inLexique, operand_53264->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1447)) ;
      }
      const GGS_string_map  temp_53597 = var_cas_rez_comments ;
      if (temp_53597.isBuilt ()) {
        temp_53597 (HERE)->method_get (inLexique, operand_53264->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1448)) ;
      }
      { const GGS_resource_property_obj _var_54093 = var_cas_rez_prop ; // CAST instruction
        if (_var_54093.getPtr () != NULL) {
          macroValidPointer (_var_54093.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54093.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54093.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54093.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53264->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1462)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53264->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)) COMMA_SOURCE_FILE_AT_LINE (1464)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53264->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1465))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1467)) COMMA_SOURCE_FILE_AT_LINE (1467)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1468)) ;
      const GGS_bool cond_54633 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_54633.isBuiltAndTrue ()) {
        const GGS_bool cond_54617 = (var_cas_app_for_obj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
        if (cond_54617.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_54515 = var_cas_app_for_obj ;
          if (temp_54515.isBuilt ()) {
            temp_54515 (HERE)->method_get (inLexique, operand_53264->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1473)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1474)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54824 (var_cas_regular_rez, true) ;
    while (enumerator_54824.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54824._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1486))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54824._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_54824._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54824.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55060 (var_cas_regular_rez, true) ;
    if (enumerator_55060 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("#define OS_START_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n") ;
      var_cas_rez_imp.appendCString ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55060 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_55060._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55060.next () ;
        _foreach_loop_55060 = (enumerator_55060 .hasCurrentObject ()) ;
        if (_foreach_loop_55060) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55060) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
      var_cas_rez_imp.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n"
        "\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1509)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1510)) COMMA_SOURCE_FILE_AT_LINE (1510)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1511)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeEvents"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeEvents (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_task_mask  & var_cas_maskForEvent COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeEvents at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_maskForEvent = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeEvents\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1530)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_57140 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_57140 = NULL ;
    while (((operand_57140 = enumerator_57140.nextObject ()))) {
      macroValidPointer (operand_57140) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_57140->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57313 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57313 = NULL ;
        while (((operand_57313 = enumerator_57313.nextObject ()))) {
          macroValidPointer (operand_57313) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_57390 = var_cas_events ;
          if (temp_57390.isBuilt ()) {
            temp_57390 (HERE)->method_get (inLexique, operand_57313->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1557)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1559)) ;
          { const GGS_event_mask_obj _var_58280 = var_cas_mask_obj ; // CAST instruction
            if (_var_58280.getPtr () != NULL) {
              macroValidPointer (_var_58280.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58280.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_58280.getPtr ()) ;
                const GGS_bool cond_57731 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_57731.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1564)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1564))) ;
                }else if (cond_57731.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1566)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_57313->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1566)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1567)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_58280.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_58130 = var_cas_evt_usage.reader_hasKey (operand_57313->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1570))) ;
                if (cond_58130.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_57313->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1572)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1573)) ;
                }else if (cond_58130.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_57313->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1577)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_58490 = var_cas_tasks_for_event.reader_hasKey (operand_57313->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1582))) ;
          if (cond_58490.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_57313->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1584)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_57140->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1586))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_57313->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1587)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_57140->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1590)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58748 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58748 = NULL ;
    while (((operand_58748 = enumerator_58748.nextObject ()))) {
      macroValidPointer (operand_58748) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58748->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) ;
      { const GGS_event_mask_obj _var_59186 = var_cas_evt_mask ; // CAST instruction
        if (_var_59186.getPtr () != NULL) {
          macroValidPointer (_var_59186.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59186.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_59186.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58748->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1602))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1602)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58748->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)) COMMA_SOURCE_FILE_AT_LINE (1603)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) COMMA_SOURCE_FILE_AT_LINE (1604)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59347 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59347 = NULL ;
    while (((operand_59347 = enumerator_59347.nextObject ()))) {
      macroValidPointer (operand_59347) ;
      var_cas_sort_evts.addAssign_operation (operand_59347->mKey, operand_59347->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59517 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59517 = NULL ;
    while (((operand_59517 = enumerator_59517.nextObject ()))) {
      macroValidPointer (operand_59517) ;
      const GGS_bool cond_60852 = var_cas_tasks_for_event.reader_hasKey (operand_59517->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1626))) ;
      if (cond_60852.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59629 = var_cas_tasks_for_event ;
        if (temp_59629.isBuilt ()) {
          temp_59629 (HERE)->method_get (inLexique, operand_59517->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1628)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59696 (var_cas_tasks, true) ;
          while (enumerator_59696.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59759 = var_cas_task_mask ;
            if (temp_59759.isBuilt ()) {
              temp_59759 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59696._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1632)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59696.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_60086 = GGS_uint (32U) ;
        GGS_bool _condition_60086 (_variant_60086.isBuilt (), true) ;
        while (_condition_60086.isBuiltAndTrue ()) {
          _condition_60086 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_60086.isBuiltAndTrue ()) {
            if (_variant_60086.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1641)) ;
              _condition_60086 = GGS_bool (false) ;
            }else{
              _variant_60086.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
            }
          }
        }
        const GGS_bool cond_60257 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1642))) ;
        if (cond_60257.isBuiltAndTrue ()) {
          operand_59517->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59517->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1643)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1644)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60381 (var_cas_tasks, true) ;
          while (enumerator_60381.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60381._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1649)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60381._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1651)) ;
            enumerator_60381.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59517->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1655))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1655)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59517->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1656)) COMMA_SOURCE_FILE_AT_LINE (1656)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)) COMMA_SOURCE_FILE_AT_LINE (1657)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1736)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1755)) ;
  const GGS_bool cond_64265 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_64265.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_64024 = var_cas_config ;
    if (temp_64024.isBuilt ()) {
      temp_64024 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1759)) ;
    }
    { const GGS_basic_type _var_64251 = var_cas_pw ; // CAST instruction
      if (_var_64251.getPtr () != NULL) {
        macroValidPointer (_var_64251.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64251.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64251.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1762)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1764)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1765)) ;
        }
      }
    }
  }
  var_cas_fifo.appendCString ("#define OS_START_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_64375 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64375 = NULL ;
    while (((operand_64375 = enumerator_64375.nextObject ()))) {
      macroValidPointer (operand_64375) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_64604 = var_cas_powerof2 ;
      if (cond_64604.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64585 = GGS_uint (32U) ;
        GGS_bool _condition_64585 (_variant_64585.isBuilt (), true) ;
        while (_condition_64585.isBuiltAndTrue ()) {
          _condition_64585 = (operand_64375->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64585.isBuiltAndTrue ()) {
            if (_variant_64585.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1777)) ;
              _condition_64585 = GGS_bool (false) ;
            }else{
              _variant_64585.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1776)) ;
            }
          }
        }
      }else if (cond_64604.isBuiltAndFalse ()) {
        var_cas_max_size = operand_64375->fifosize ;
      }
      var_cas_fifo.appendCString ("VAR(tpl_proc_id, OS_VAR) tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1781))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1781))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1782)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1788)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1788))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_65100 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1789)) ;
  GGS_bool _condition_65100 (_variant_65100.isBuilt (), true) ;
  while (_condition_65100.isBuiltAndTrue ()) {
    _condition_65100 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_65100.isBuiltAndTrue ()) {
      if (_variant_65100.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1795)) ;
        _condition_65100 = GGS_bool (false) ;
      }else{
        _variant_65100.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_65050 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_65050.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_fifo.appendCString ("#define OS_START_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("CONST(tpl_priority_level, OS_CONST) tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1803)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1803))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65433 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65433 = NULL ;
    while (((operand_65433 = enumerator_65433.nextObject ()))) {
      macroValidPointer (operand_65433) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65686 = var_cas_powerof2 ;
      if (cond_65686.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65643 = GGS_uint (32U) ;
        GGS_bool _condition_65643 (_variant_65643.isBuilt (), true) ;
        while (_condition_65643.isBuiltAndTrue ()) {
          _condition_65643 = (operand_65433->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65643.isBuiltAndTrue ()) {
            if (_variant_65643.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1811)) ;
              _condition_65643 = GGS_bool (false) ;
            }else{
              _variant_65643.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1810)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1812)) ;
      }else if (cond_65686.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65433->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1816))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1816))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_65868 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_65868.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1819)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1825)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1826)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1826)) COMMA_SOURCE_FILE_AT_LINE (1826)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1842)) ;
  const GGS_bool cond_77460 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_77460.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.reader_value () ;
    const GGS_bool cond_77372 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_77372.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1847)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1848)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1849)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1850)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1853)) ;
      const GGS_bool cond_67165 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1854))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_67165.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1855)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1858)) ;
      const GGS_bool cond_67348 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1859))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_67348.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1860)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1866)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_actual_prio = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1872)),  var_cas_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1871)) ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1877)),  var_cas_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1876)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1885)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1887)),  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1884)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1893)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1902)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1901)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1905)) ;
      const GGS_com  temp_68605 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1910)) ;
      if (temp_68605.isBuilt ()) {
        temp_68605 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1910)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1913)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1914)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1912)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1919)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1918)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1926)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1925)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1934)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1935)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1936)),  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1932)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1945)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1946)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1947)),  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1943)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1957)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1958)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1956)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1963)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1971)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1970)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1980)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1979)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1987)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1988)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1986)) ;
      const GGS_bool cond_71463 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
      if (cond_71463.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1995)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1994)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2001)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2002)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (2000)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2007)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2008)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2009)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2010)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2011)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2004)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2016)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2015)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2023)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2022)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2032)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2034)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2035)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2036)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2029)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2040)) ;
      GGS_goilTemplateVariableMap  var_cas_sysCfg = GGS_goilTemplateVariableMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_addStringValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OILFILENAME"), GGS_location (inLexique) COMMA_HERE),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (2054)) ;
      ::routine_addStringValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPUNAME"), GGS_location (inLexique) COMMA_HERE),  var_cas_cpu.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2055)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2055)) COMMA_SOURCE_FILE_AT_LINE (2055)) ;
      ::routine_addStringValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMESTAMP"), GGS_location (inLexique) COMMA_HERE),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2056)) ;
      ::routine_addStringValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKSCRIPTNAME"), GGS_location (inLexique) COMMA_HERE),  function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2057)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (2057)) COMMA_SOURCE_FILE_AT_LINE (2057)) COMMA_SOURCE_FILE_AT_LINE (2057)) ;
      ::routine_setProcessesList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2058)) ;
      ::routine_setTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2059)) ;
      ::routine_setISRs1List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2060)) ;
      ::routine_setISRs2List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2061)) ;
      ::routine_setCountersList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2062)) ;
      ::routine_setEventsList (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2063)) ;
      ::routine_setAlarmsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2064)) ;
      ::routine_setResourcesList (inLexique,  var_cas_cpu,  var_cas_rez_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2065)) ;
      ::routine_setMessagesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2066)) ;
      ::routine_setScheduletablesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2067)) ;
      ::routine_setOsapplicationsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      ::routine_setProcessCount (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2069)) ;
      ::routine_addBoolValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSAR"), GGS_location (inLexique) COMMA_HERE),  gOption_goil_5F_options_autosar_5F_on.reader_value () COMMA_SOURCE_FILE_AT_LINE (2071)) ;
      ::routine_setUseCom (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2072)) ;
      ::routine_setScalabilityClass (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2073)) ;
      ::routine_generate_memmap_new (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2081)) ;
      ::routine_generate_link_script_new (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (2085)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2089)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2096)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2103)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2104)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2105)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2106)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2107)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2108)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2109)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2110)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2111)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_77357 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_77357.isBuiltAndTrue ()) {
        const GGS_bool cond_75893 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_75893.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2122)) ;
        }
        const GGS_string temp_75947 = var_cas_header ;
        if (temp_75947.isBuilt ()) {
          temp_75947 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2124)) ;
        }
        const GGS_bool cond_76097 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_76097.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2126)) ;
        }
        const GGS_string temp_76155 = var_cas_obj_header ;
        if (temp_76155.isBuilt ()) {
          temp_76155 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2128)) ;
        }
        const GGS_bool cond_76313 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_76313.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2130)) ;
        }
        const GGS_string temp_76375 = var_cas_implementation ;
        if (temp_76375.isBuilt ()) {
          temp_76375 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2132)) ;
        }
        const GGS_bool cond_76528 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_76528.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2134)) ;
        }
        const GGS_string temp_76581 = var_cas_types ;
        if (temp_76581.isBuilt ()) {
          temp_76581 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2136)) ;
        }
        const GGS_bool cond_77297 = gOption_goil_5F_options_generate_5F_makefile.reader_value () ;
        if (cond_77297.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent () ;
          const GGS_bool cond_76873 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_76873.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_77027 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
          if (cond_77027.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2144)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2147)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension ().reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (2146)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2153)) ;
      }
    }else if (cond_77372.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2156)) ;
    }
  }else if (cond_77460.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2159)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

