//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.8.3                         *
//                       may 29th, 2009, at 11h49'36"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & _inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("counter_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("counter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("msg_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("msg"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("target"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("target_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("element_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("queue_size"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("dyn_queue"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("error_notif_name"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("error_notification"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("flag_fct"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("error_notif_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("msg_buf"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter_ptr"), GGS_location (_inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter_func"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("filter_kind"), GGS_location (_inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & _inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags._dotAssign_operation (function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  if (((var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)))._operator_isEqual (GGS_string ("extended"))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7522 = var_cas_startuphook ; // CAST instruction
    if (_var_7522.getPtr () != NULL) {
      macroValidPointer (_var_7522.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7522.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7522.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (178))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7767 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7767.getPtr () != NULL) {
      macroValidPointer (_var_7767.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7767.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7767.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (185))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7997 = var_cas_errorhook ; // CAST instruction
    if (_var_7997.getPtr () != NULL) {
      macroValidPointer (_var_7997.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7997.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7997.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8238 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8238.getPtr () != NULL) {
      macroValidPointer (_var_8238.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8238.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8238.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (199))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8484 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8484.getPtr () != NULL) {
      macroValidPointer (_var_8484.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8484.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8484.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (206))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8743 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8743.getPtr () != NULL) {
      macroValidPointer (_var_8743.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8743.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8743.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (213))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_9017 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_9017.getPtr () != NULL) {
      macroValidPointer (_var_9017.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9017.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9017.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (220))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9276 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9276.getPtr () != NULL) {
      macroValidPointer (_var_9276.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9276.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9276.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (227))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9465 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9465.getPtr () != NULL) {
      macroValidPointer (_var_9465.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9465.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9465.getPtr ()) ;
        if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (233))).isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (237)) ;
  if (((var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (238)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags._dotAssign_operation (var_cas_tpl_base_path.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (239))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else{
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (244)))).isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10149 = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ; // CAST instruction
      if (_var_10149.getPtr () != NULL) {
        macroValidPointer (_var_10149.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10149.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10149.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (251))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10330 = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (254)) ; // CAST instruction
      if (_var_10330.getPtr () != NULL) {
        macroValidPointer (_var_10330.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10330.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10330.getPtr ()) ;
          if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (256))).isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp ;
    var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10639 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10639 = NULL ;
      while (((operand_10639 = enumerator_10639.nextObject ()))) {
        macroValidPointer (operand_10639) ;
        { const GGS_timing_prot _var_10837 = operand_10639->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (266)) ; // CAST instruction
          if (_var_10837.getPtr () != NULL) {
            macroValidPointer (_var_10837.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10837.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10888 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10888 = NULL ;
      while (((operand_10888 = enumerator_10888.nextObject ()))) {
        macroValidPointer (operand_10888) ;
        { const GGS_timing_prot _var_11083 = operand_10888->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ; // CAST instruction
          if (_var_11083.getPtr () != NULL) {
            macroValidPointer (_var_11083.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11083.getPtr ()))) {
            }else{
              if (((var_cas_use_tp)._operator_isEqual (GGS_bool (false))).isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    if (((var_cas_use_tp)._operator_isEqual (GGS_bool (true))).isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_11354 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
  if (_temp_11354.isBuilt ()) {
    _temp_11354 (HERE)->method_generate_c (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (289)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  var_cas_flags._dotAssign_operation (function_bool_define (_inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (_inLexique COMMA_SOURCE_FILE_AT_LINE (293)) COMMA_SOURCE_FILE_AT_LINE (293))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11522 (var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (296)), true) ;
    const GGS_ident_map::cElement * operand_11522 = NULL ;
    while (((operand_11522 = enumerator_11522.nextObject ()))) {
      macroValidPointer (operand_11522) ;
      { const GGS_basic_type _var_11762 = operand_11522->mInfo.value ; // CAST instruction
        if (_var_11762.getPtr () != NULL) {
          macroValidPointer (_var_11762.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11762.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11762.getPtr ()) ;
            if ((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (299))).isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags._dotAssign_operation (operand_11522->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (300))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (308)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & _inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName ;
  var_cas_goilTargetName = function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (318)) ;
  if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("arm"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("avr"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("avr") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("c166"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("c166") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("h8300h"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("h8300h") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("hcs12"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("hcs12") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("libpcl"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("libpcl") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("posix"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("posix_vp2"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("posix_vp2") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("ppc"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("ppc") ;
  }else if (((var_cas_goilTargetName)._operator_isEqual (GGS_string ("v850e"))).isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("v850e") ;
  }else{
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (331)) ;
    var_cas_trampoline_target = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & _inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr ;
  var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first ;
  var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13330 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13330 = NULL ;
    while (((operand_13330 = enumerator_13330.nextObject ()))) {
      macroValidPointer (operand_13330) ;
      if (((var_cas_first)._operator_not ()).isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr._dotAssign_operation (operand_13330->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (344))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (_inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (347)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr ;
  GGS_string var_cas_makefileStr ;
  ::routine_retrieveTemplateStringIfExist (_inLexique,  var_cas_makefileSpecStr,  GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (358)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makefileStr,  GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (359)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (360)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (361)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (361)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (362)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (362)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (363)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (363)) ;
  ::routine_updateTemplateWithStringList (_inLexique,  var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (364)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (364)) ;
  GGS_string var_cas_app_name_str ;
  var_cas_app_name_str = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (367)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ;
  if (((var_cas_app_name_str)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (369)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (369)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (369)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (370)) ;
  GGS_string var_cas_tpl_base_path_str ;
  var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (373)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  if (((var_cas_tpl_base_path_str)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (_inLexique,  GGS_lstring ::constructor_new (_inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (375)).reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (375)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (375)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (376)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app)._operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
  GGS_string var_cas_autosarStr ;
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (380)))).isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else{
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_flags ;
  var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  _temp_15358 = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (386)) ;
  if (_temp_15358.isBuilt ()) {
    _temp_15358 (HERE)->method_generate_make (_inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
  var_cas_flags._dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (_inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (388)) ;
  const GGS_string _temp_15460 = var_cas_makefileStr ;
  if (_temp_15460.isBuilt ()) {
    _temp_15460 (HERE)->method_writeToFile (_inLexique, (var_cas_directory)._operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (390)) ;
  }
  GGS_string var_cas_makerulesStr ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_makerulesStr,  GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (394)) ;
  GGS_string var_cas_filename ;
  var_cas_filename = (var_cas_directory)._operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget ;
  var_cas_trampolineTarget = function_trampoline_target_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (396)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$GOIL_TARGET$"), GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (397))) COMMA_SOURCE_FILE_AT_LINE (397)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (398)) ;
  ::routine_check_target (_inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (401)) ;
  GGS_string var_cas_arch_chip_board ;
  var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (_inLexique COMMA_SOURCE_FILE_AT_LINE (403)) COMMA_SOURCE_FILE_AT_LINE (403)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (_inLexique COMMA_SOURCE_FILE_AT_LINE (404)) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  ::routine_add_makefile_flag_if_not_empty (_inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (_inLexique COMMA_SOURCE_FILE_AT_LINE (405)) COMMA_SOURCE_FILE_AT_LINE (405)) ;
  ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (407)) ;
  { const GGS_basic_type _var_16531 = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (409)) ; // CAST instruction
    if (_var_16531.getPtr () != NULL) {
      macroValidPointer (_var_16531.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_16531.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_16531.getPtr ()) ;
        GGS_string var_cas_s ;
        const GGS_bool_class  _temp_16412 = var_cas_b ;
        if (_temp_16412.isBuilt ()) {
          _temp_16412 (HERE)->method_string (_inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (412)) ;
        }
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  var_cas_s COMMA_SOURCE_FILE_AT_LINE (413)) ;
      }else{
        ::routine_doReplace (_inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  GGS_string ("false") COMMA_SOURCE_FILE_AT_LINE (415)) ;
      }
    }
  }
  GGS_string var_cas_templatePathStr ;
  var_cas_templatePathStr = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "template_dir" COMMA_SOURCE_FILE_AT_LINE (420))) ;
  GGS_string var_cas_templateStr ;
  if (((var_cas_templatePathStr)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = "))._operator_concat (var_cas_templatePathStr) ;
  }else{
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (427)) ;
  if (((var_cas_filename.reader_fileExists (_inLexique COMMA_SOURCE_FILE_AT_LINE (428)))._operator_not ()).isBuiltAndTrue ()) {
    const GGS_string _temp_17011 = var_cas_makerulesStr ;
    if (_temp_17011.isBuilt ()) {
      _temp_17011 (HERE)->method_writeToFile (_inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (429)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 ;
  var_cas_max_s8 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (446)) ;
  GGS_uint64  var_cas_max_s16 ;
  var_cas_max_s16 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (447)) ;
  GGS_uint64  var_cas_max_s32 ;
  var_cas_max_s32 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (448)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_s8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_s16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_s32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (461)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (472)) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (473)) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (1U)._left_shift_operation (_inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (474)) ;
  if (((var_cas_count)._operator_strictInf (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count)._operator_strictInf (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count)._operator_strictInf (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (487)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & _inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 ;
  var_cas_max_u8 = GGS_uint64 (8U) ;
  GGS_uint64  var_cas_max_u16 ;
  var_cas_max_u16 = GGS_uint64 (16U) ;
  GGS_uint64  var_cas_max_u32 ;
  var_cas_max_u32 = GGS_uint64 (32U) ;
  if (((var_cas_count)._operator_infOrEqual (var_cas_max_u8)).isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else{
    if (((var_cas_count)._operator_infOrEqual (var_cas_max_u16)).isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else{
      if (((var_cas_count)._operator_infOrEqual (var_cas_max_u32)).isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else{
        var_cas_type = GGS_string ("") ;
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (513)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max ;
  var_cas_max = GGS_uint64 (0U) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (534)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (534))._add_operation (_inLexique, var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (534)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (534)) COMMA_SOURCE_FILE_AT_LINE (534)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (_inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (536)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (537)) ;
  ::routine_generate_signed_type (_inLexique,  var_cas_max_priority.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (540)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (540)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (542)) ;
  GGS_uint  var_cas_max_act ;
  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_19748 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_19748 = NULL ;
    while (((operand_19748 = enumerator_19748.nextObject ()))) {
      macroValidPointer (operand_19748) ;
      { const GGS_basic_type _var_20019 = operand_19748->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (548)) ; // CAST instruction
        if (_var_20019.getPtr () != NULL) {
          macroValidPointer (_var_20019.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20019.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20019.getPtr ()) ;
            if (((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (549)))._operator_strictSup (var_cas_max_act)).isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (549)) ;
            }
          }else{
            operand_19748->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("Internal error, task "))._operator_concat (operand_19748->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (550))))._operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (551)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max_act.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (553)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (553)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (555)) ;
  GGS_uint  var_cas_max_ev ;
  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20394 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20394 = NULL ;
    while (((operand_20394 = enumerator_20394.nextObject ()))) {
      macroValidPointer (operand_20394) ;
      GGS_lstringlist  var_cas_evts ;
      var_cas_evts = operand_20394->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (561)) ;
      if (((var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (562)))._operator_strictSup (var_cas_max_ev)).isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (562)) ;
      }
    }
  }
  ::routine_generate_mask_type (_inLexique,  var_cas_max_ev.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (564)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (564)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (565)) ;
  var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (568)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (568)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (570)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (572)) ;
  var_cas_c = var_cas_resources.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (575)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (575)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (577)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (579)) ;
  var_cas_c = var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (582)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (582)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (584)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (586)) ;
  var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (589)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (589)) ;
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (591)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (593)) ;
  if (((var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (597)))._operator_strictSup (var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (597)))).isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (598)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (598)) ;
  }else{
    var_cas_c = var_cas_schedtables.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (600)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (600)) ;
  }
  if (((var_cas_c)._operator_strictSup (var_cas_max)).isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (603)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (604)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_apps.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (607)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (607))._add_operation (_inLexique, GGS_uint64 (1U) COMMA_SOURCE_FILE_AT_LINE (607)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (607)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (609)) ;
  GGS_stringset  var_cas_tfs ;
  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_22645 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_22645 = NULL ;
    while (((operand_22645 = enumerator_22645.nextObject ()))) {
      macroValidPointer (operand_22645) ;
      { const GGS_app_trusted_obj _var_22807 = operand_22645->mInfo.app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (615)) ; // CAST instruction
        if (_var_22807.getPtr () != NULL) {
          macroValidPointer (_var_22807.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_22807.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_22807.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_22724 (var_cas_t.reader_trusted_fcts (_inLexique COMMA_SOURCE_FILE_AT_LINE (617)), true) ;
              while (enumerator_22724.hc ()) {
                var_cas_tfs._addAssign_operation (enumerator_22724._key (HERE)) ;
                enumerator_22724.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (_inLexique,  var_cas_tfs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (623)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (623)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (623)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (624)) ;
  ::routine_generate_unsigned_type (_inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (627)) ;
  ::routine_doReplace (_inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (629)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd ;
  var_cas_max_sched_wd = var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (639))._add_operation (_inLexique, GGS_uint (4U)._multiply_operation (_inLexique, var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (639)) COMMA_SOURCE_FILE_AT_LINE (639)) COMMA_SOURCE_FILE_AT_LINE (639)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (641)) COMMA_SOURCE_FILE_AT_LINE (641)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent ;
  GGS_string var_cas_tpl_alarm_activatetask ;
  GGS_string var_cas_tpl_alarm_callback ;
  GGS_string var_cas_tpl_alarm_incrementcounter ;
  GGS_string var_cas_alarms_result ;
  var_cas_alarms_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_setevent,  GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (661)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_activatetask,  GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (662)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_callback,  GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (663)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_alarm_incrementcounter,  GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (664)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_24371 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24371 = NULL ;
    while (((operand_24371 = enumerator_24371.nextObject ()))) {
      macroValidPointer (operand_24371) ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24371->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (671)) ;
      { const GGS_action_obj _var_25447 = var_cas_alarm_action ; // CAST instruction
        if (_var_25447.getPtr () != NULL) {
          macroValidPointer (_var_25447.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25447.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25447.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (675)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (675)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (675)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (676)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (676)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (676)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25447.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25447.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (679)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (679)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25447.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25447.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (682)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (682)))._operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (682)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25447.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25447.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (685)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (685)))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (685)) ;
          }else{
            operand_24371->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (687)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24371->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (691)) ;
      { const GGS_autostart_obj _var_26370 = var_cas_autostart ; // CAST instruction
        if (_var_26370.getPtr () != NULL) {
          macroValidPointer (_var_26370.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26370.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (694)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (695)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (696)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26370.getPtr ()))) {
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (698)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (699)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26370.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26370.getPtr ()) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (702)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (703)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (703)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (703)) COMMA_SOURCE_FILE_AT_LINE (703)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (_inLexique COMMA_SOURCE_FILE_AT_LINE (704)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (704)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (704)) COMMA_SOURCE_FILE_AT_LINE (704)) ;
          }else{
            operand_24371->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (706)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24371->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (710)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24371->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (711)) COMMA_SOURCE_FILE_AT_LINE (711)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24371->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (712)))._operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (712)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (713)))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (713)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (716)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (717)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_26902 = var_cas_app_for_obj ;
          if (_temp_26902.isBuilt ()) {
            _temp_26902 (HERE)->method_get (_inLexique, operand_24371->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (719)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (720)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids ;
  var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp ;
  var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27199 (var_cas_alarms.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (730)), true) ;
    if (enumerator_27199 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27199 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp._dotAssign_operation (enumerator_27199._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_27199._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (736))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_27199._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids._dotAssign_operation (enumerator_27199._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27199.next () ;
        _foreach_loop_27199 = (enumerator_27199 .hc ()) ;
        if (_foreach_loop_27199) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27199) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (746)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (747)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (748)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (748)) COMMA_SOURCE_FILE_AT_LINE (748)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl ;
  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28447 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28447 = NULL ;
    while (((operand_28447 = enumerator_28447.nextObject ()))) {
      macroValidPointer (operand_28447) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio ;
      var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act ;
      var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28447->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (772)) ;
      var_cas_act_as_basic = operand_28447->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (773)) ;
      { const GGS_basic_type _var_28878 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_28878.getPtr () != NULL) {
          macroValidPointer (_var_28878.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_28878.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_28878.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (776)) ;
          }else{
            var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (777)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (778)) ;
          }
        }
      }
      { const GGS_basic_type _var_29067 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29067.getPtr () != NULL) {
          macroValidPointer (_var_29067.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29067.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29067.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (781)) ;
          }else{
            var_cas_act_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (782)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (783)) ;
          }
        }
      }
      var_cas_tl._addAssign_operation (var_cas_prio, var_cas_act, operand_28447->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio ;
  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio ;
  var_cas_cur_rel_prio = GGS_uint (0U) ;
  if (((var_cas_tl.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (793)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  _temp_29283 = var_cas_tl ;
    if (_temp_29283.isBuilt ()) {
      _temp_29283 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (794)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29410 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29410 = NULL ;
    while (((operand_29410 = enumerator_29410.nextObject ()))) {
      macroValidPointer (operand_29410) ;
      if (((operand_29410->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29410->prio ;
        var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (804)) ;
      }
      var_cas_prio_for_task.modifier_put (_inLexique, operand_29410->name, var_cas_actual_prio, operand_29410->act COMMA_SOURCE_FILE_AT_LINE (807)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il ;
  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  if (((var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (826)))._operator_isNotEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30470 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30470 = NULL ;
      while (((operand_30470 = enumerator_30470.nextObject ()))) {
        macroValidPointer (operand_30470) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio ;
        var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act ;
        var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30470->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (838)) ;
        const GGS_isr_obj  _temp_30723 = operand_30470->mInfo.isr ;
        if (_temp_30723.isBuilt ()) {
          _temp_30723 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (839)) ;
        }
        { const GGS_basic_type _var_30929 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_30929.getPtr () != NULL) {
            macroValidPointer (_var_30929.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_30929.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_30929.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (842)) ;
            }else{
              var_cas_prio_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (843)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (844)) ;
            }
          }
        }
        var_cas_il._addAssign_operation (var_cas_prio, var_cas_act, operand_30470->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio ;
    var_cas_actual_prio = var_cas_floor._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (857)) ;
    GGS_uint  var_cas_cur_rel_prio ;
    var_cas_cur_rel_prio = GGS_uint (0U) ;
    if (((var_cas_il.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (859)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  _temp_31396 = var_cas_il ;
      if (_temp_31396.isBuilt ()) {
        _temp_31396 (HERE)->method_smallest (_inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (860)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31550 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31550 = NULL ;
      while (((operand_31550 = enumerator_31550.nextObject ()))) {
        macroValidPointer (operand_31550) ;
        if (((operand_31550->prio)._operator_strictSup (var_cas_cur_rel_prio)).isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31550->prio ;
          var_cas_actual_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (870)) ;
        }
        var_cas_prio_for_isr.modifier_put (_inLexique, operand_31550->name, var_cas_actual_prio, operand_31550->act COMMA_SOURCE_FILE_AT_LINE (873)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else{
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_32947 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_32947 = NULL ;
    while (((operand_32947 = enumerator_32947.nextObject ()))) {
      macroValidPointer (operand_32947) ;
      GGS_uint  var_cas_rez_prio ;
      var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act ;
      var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment ;
      var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33091 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33091 = NULL ;
        while (((operand_33091 = enumerator_33091.nextObject ()))) {
          macroValidPointer (operand_33091) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33091->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (912)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32947->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (914)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33381 = var_cas_prio_for_task ;
            if (_temp_33381.isBuilt ()) {
              _temp_33381 (HERE)->method_get (_inLexique, operand_33091->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (918)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (922)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment._dotAssign_operation (operand_33091->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (923))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (923))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33697 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33697 = NULL ;
        while (((operand_33697 = enumerator_33697.nextObject ()))) {
          macroValidPointer (operand_33697) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_33697->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (927)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32947->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (929)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_33985 = var_cas_prio_for_isr ;
            if (_temp_33985.isBuilt ()) {
              _temp_33985 (HERE)->method_get (_inLexique, operand_33697->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (933)) ;
            }
            if (((var_cas_prio)._operator_strictSup (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act._add_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (937)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment._dotAssign_operation (operand_33697->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (938))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      if (((var_cas_rez_comment)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34557 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34557 = NULL ;
        while (((operand_34557 = enumerator_34557.nextObject ()))) {
          macroValidPointer (operand_34557) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_34557->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (951)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32947->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (953)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_34847 = var_cas_prio_for_task ;
            if (_temp_34847.isBuilt ()) {
              _temp_34847 (HERE)->method_get (_inLexique, operand_34557->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (957)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (959)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35042 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35042 = NULL ;
        while (((operand_35042 = enumerator_35042.nextObject ()))) {
          macroValidPointer (operand_35042) ;
          GGS_lstringlist  var_cas_owned_rez ;
          var_cas_owned_rez = operand_35042->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (964)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (_inLexique,  var_cas_owned_rez,  operand_32947->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (966)) ;
          if ((var_cas_owned).isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  _temp_35330 = var_cas_prio_for_isr ;
            if (_temp_35330.isBuilt ()) {
              _temp_35330 (HERE)->method_get (_inLexique, operand_35042->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (970)) ;
            }
            if (((var_cas_prio)._operator_isEqual (var_cas_rez_prio)).isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act._substract_operation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (972)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (_inLexique, operand_32947->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (977)) ;
      var_cas_comments.modifier_put (_inLexique, operand_32947->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (978)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & _inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list._addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37147 = var_cas_max_prio ;
  GGS_bool _condition_37147 (_variant_37147.isBuilt (), true) ;
  while (_condition_37147.isBuiltAndTrue ()) {
    _condition_37147 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37147.isBuiltAndTrue ()) {
      if (_variant_37147.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1023)) ;
        _condition_37147 = GGS_bool (false) ;
      }else{
        _variant_37147._decrement_operation (_inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize ;
        var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36491 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36491 = NULL ;
          while (((operand_36491 = enumerator_36491.nextObject ()))) {
            macroValidPointer (operand_36491) ;
            if (((operand_36491->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36491->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1008)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36640 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36640 = NULL ;
          while (((operand_36640 = enumerator_36640.nextObject ()))) {
            macroValidPointer (operand_36640) ;
            if (((operand_36640->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36640->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1011)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36789 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36789 = NULL ;
          while (((operand_36789 = enumerator_36789.nextObject ()))) {
            macroValidPointer (operand_36789) ;
            if (((operand_36789->mInfo.prio)._operator_isEqual (var_cas_prio)).isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize._add_operation (_inLexique, operand_36789->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1014)) ;
            }
          }
        }
        if (((var_cas_prio)._operator_isEqual (var_cas_max_task_prio)).isBuiltAndTrue ()) {
          var_cas_fifosize._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
        }
        var_cas_ready_list._addAssign_operation (var_cas_fifosize) ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1022)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & _inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37327 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37327 = NULL ;
    while (((operand_37327 = enumerator_37327.nextObject ()))) {
      macroValidPointer (operand_37327) ;
      GGS_string var_cas_app_name ;
      var_cas_app_name = operand_37327->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1035)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37383 (operand_37327->mInfo.app.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1036)), true) ;
        const GGS_ident_map::cElement * operand_37383 = NULL ;
        while (((operand_37383 = enumerator_37383.nextObject ()))) {
          macroValidPointer (operand_37383) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37383->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) COMMA_SOURCE_FILE_AT_LINE (1037)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37383->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1038)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37541 (operand_37327->mInfo.app.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1041)), true) ;
        const GGS_ident_map::cElement * operand_37541 = NULL ;
        while (((operand_37541 = enumerator_37541.nextObject ()))) {
          macroValidPointer (operand_37541) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37541->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1042)) COMMA_SOURCE_FILE_AT_LINE (1042)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37541->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1043)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37698 (operand_37327->mInfo.app.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1046)), true) ;
        const GGS_ident_map::cElement * operand_37698 = NULL ;
        while (((operand_37698 = enumerator_37698.nextObject ()))) {
          macroValidPointer (operand_37698) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37698->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1047)) COMMA_SOURCE_FILE_AT_LINE (1047)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37698->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1048)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37857 (operand_37327->mInfo.app.reader_schedtables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
        const GGS_ident_map::cElement * operand_37857 = NULL ;
        while (((operand_37857 = enumerator_37857.nextObject ()))) {
          macroValidPointer (operand_37857) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_37857->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) COMMA_SOURCE_FILE_AT_LINE (1052)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_37857->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1053)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38021 (operand_37327->mInfo.app.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), true) ;
        const GGS_ident_map::cElement * operand_38021 = NULL ;
        while (((operand_38021 = enumerator_38021.nextObject ()))) {
          macroValidPointer (operand_38021) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_38021->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_38021->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1058)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38182 (operand_37327->mInfo.app.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), true) ;
        const GGS_ident_map::cElement * operand_38182 = NULL ;
        while (((operand_38182 = enumerator_38182.nextObject ()))) {
          macroValidPointer (operand_38182) ;
          if (((var_cas_app_for_obj.reader_hasKey (_inLexique, operand_38182->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062)))._operator_not ()).isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (_inLexique, operand_38182->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1063)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task ;
  GGS_string var_cas_tasks_result ;
  var_cas_tasks_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_task,  GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1086)) ;
  GGS_uint  var_cas_max_prio ;
  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists ;
  var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39037 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39037 = NULL ;
    while (((operand_39037 = enumerator_39037.nextObject ()))) {
      macroValidPointer (operand_39037) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_39037->mKey,  operand_39037->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1095)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1099)) COMMA_SOURCE_FILE_AT_LINE (1099)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1100)))._operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1101)))._operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1101)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1102)))._operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1102)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1103)))._operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1104)))._operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1105)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      GGS_string var_cas_tpl_evt ;
      var_cas_tpl_evt = GGS_string ("") ;
      if (((operand_39037->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1112)).reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (1112)))._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      }else{
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1116)) ;
        ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_evt,  GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1118)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1119)) COMMA_SOURCE_FILE_AT_LINE (1119)) ;
        ::routine_doReplace (_inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1120)))._operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1123)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  _temp_40724 = var_cas_actual_priorities ;
      if (_temp_40724.isBuilt ()) {
        _temp_40724 (HERE)->method_get (_inLexique, operand_39037->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1126)) ;
      }
      if (((var_cas_actual_prio)._operator_strictSup (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      if (((operand_39037->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (1134)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1134)))._operator_isEqual (GGS_string ("NON"))).isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      }else{
        GGS_lstringlist  var_cas_used_rez ;
        var_cas_used_rez = operand_39037->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) ;
        GGS_bool var_cas_no_internal_rez_found ;
        var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41399 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41399 = NULL ;
          while (((operand_41399 = enumerator_41399.nextObject ()))) {
            macroValidPointer (operand_41399) ;
            if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  _temp_41543 = var_cas_resources ;
              if (_temp_41543.isBuilt ()) {
                _temp_41543 (HERE)->method_get (_inLexique, operand_41399->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1144)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop ;
              var_cas_rez_prop = var_cas_rez.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) ;
              { const GGS_resource_property_obj _var_41938 = var_cas_rez_prop ; // CAST instruction
                if (_var_41938.getPtr () != NULL) {
                  macroValidPointer (_var_41938.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_41938.getPtr ()))) {
                    ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&"))._operator_concat (operand_41399->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1148))))._operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1148)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        if ((var_cas_no_internal_rez_found).isBuiltAndTrue ()) {
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1155)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39037->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      { const GGS_basic_type _var_42557 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42557.getPtr () != NULL) {
          macroValidPointer (_var_42557.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42557.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42557.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1165)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) ;
          }else{
            var_cas_activation_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1166)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1167)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1168)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39037->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
      { const GGS_task_autostart_obj _var_43098 = var_cas_autostart ; // CAST instruction
        if (_var_43098.getPtr () != NULL) {
          macroValidPointer (_var_43098.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43098.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1174)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43098.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1176)) ;
          }else{
            operand_39037->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1178)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_39037->mInfo.task.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1181)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_43280 = var_cas_timing_prot ;
      if (_temp_43280.isBuilt ()) {
        _temp_43280 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39037->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1184)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1184)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1185)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1186)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1189)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1190)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_43700 = var_cas_app_for_obj ;
          if (_temp_43700.isBuilt ()) {
            _temp_43700 (HERE)->method_get (_inLexique, operand_39037->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1192)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1193)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_43918 = var_cas_apps ;
          if (_temp_43918.isBuilt ()) {
            _temp_43918 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1197)) ;
          }
          { const GGS_app_trusted_obj _var_44062 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) ; // CAST instruction
            if (_var_44062.getPtr () != NULL) {
              macroValidPointer (_var_44062.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44062.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1199)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1201)) COMMA_SOURCE_FILE_AT_LINE (1201)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  if ((var_cas_non_preemptable_exists).isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n"))._operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1219)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1220)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1220)) COMMA_SOURCE_FILE_AT_LINE (1220)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1221)) COMMA_SOURCE_FILE_AT_LINE (1221)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & _inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result ;
  var_cas_isrs_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_isr,  GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1243)) ;
  {
    GGS_isr_map::cEnumerator enumerator_45615 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45615 = NULL ;
    while (((operand_45615 = enumerator_45615.nextObject ()))) {
      macroValidPointer (operand_45615) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (_inLexique,  var_cas_cfg,  operand_45615->mKey,  operand_45615->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1249)) ;
      var_cas_result = (var_cas_result)._operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1253)) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1254)))._operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1254)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1255)))._operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1255)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1256)))._operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1256)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1257)))._operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1258)))._operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1259)))._operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1261)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  _temp_46450 = var_cas_actual_priorities ;
      if (_temp_46450.isBuilt ()) {
        _temp_46450 (HERE)->method_get (_inLexique, operand_45615->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1265)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  _temp_46617 = operand_45615->mInfo.isr ;
      if (_temp_46617.isBuilt ()) {
        _temp_46617 (HERE)->method_get_activation (_inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1269)) COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      GGS_timing_prot  var_cas_timing_prot ;
      var_cas_timing_prot = operand_45615->mInfo.isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  _temp_46865 = var_cas_timing_prot ;
      if (_temp_46865.isBuilt ()) {
        _temp_46865 (HERE)->method_generate (_inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45615->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1275)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1275)) ;
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1277)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1280)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1281)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_47220 = var_cas_app_for_obj ;
          if (_temp_47220.isBuilt ()) {
            _temp_47220 (HERE)->method_get (_inLexique, operand_45615->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1283)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1284)) ;
          GGS_uint  var_cas_trust ;
          var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  _temp_47437 = var_cas_apps ;
          if (_temp_47437.isBuilt ()) {
            _temp_47437 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, var_cas_app_name, GGS_location (_inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1288)) ;
          }
          { const GGS_app_trusted_obj _var_47581 = var_cas_app.reader_trusted (_inLexique COMMA_SOURCE_FILE_AT_LINE (1289)) ; // CAST instruction
            if (_var_47581.getPtr () != NULL) {
              macroValidPointer (_var_47581.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47581.getPtr ()))) {
                var_cas_trust._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1290)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1292)) COMMA_SOURCE_FILE_AT_LINE (1292)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (_inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1307)) ;
  var_cas_isrs_result._dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1311)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1311)) COMMA_SOURCE_FILE_AT_LINE (1311)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1312)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter ;
  GGS_string var_cas_counters_result ;
  var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst ;
  var_cas_counters_cst = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_counter,  GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1329)) ;
  {
    GGS_counter_map::cEnumerator enumerator_48794 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48794 = NULL ;
    while (((operand_48794 = enumerator_48794.nextObject ()))) {
      macroValidPointer (operand_48794) ;
      GGS_string var_cas_tmp ;
      var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result ;
      var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48794->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1335)) COMMA_SOURCE_FILE_AT_LINE (1335)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48794->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1336)))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48794->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) ;
      { const GGS_basic_type _var_49346 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49346.getPtr () != NULL) {
          macroValidPointer (_var_49346.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49346.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49346.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1341)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1341)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1342)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1343)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      var_cas_counters_cst.appendCString ("#define OSTICKSPERBASE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48794->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1345))) ;
      var_cas_counters_cst.appendCString (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCString ("\n") ;
      GGS_basic_type  var_cas_max_as_basic ;
      var_cas_max_as_basic = operand_48794->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1347)) ;
      { const GGS_basic_type _var_49753 = var_cas_max_as_basic ; // CAST instruction
        if (_var_49753.getPtr () != NULL) {
          macroValidPointer (_var_49753.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49753.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49753.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1349)) ;
          }else{
            var_cas_max_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1350)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1351)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      var_cas_counters_cst.appendCString ("#define OSMAXALLOWEDVALUE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48794->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1353))) ;
      var_cas_counters_cst.appendCString (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCString ("\n") ;
      GGS_basic_type  var_cas_min_as_basic ;
      var_cas_min_as_basic = operand_48794->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (1355)) ;
      { const GGS_basic_type _var_50151 = var_cas_min_as_basic ; // CAST instruction
        if (_var_50151.getPtr () != NULL) {
          macroValidPointer (_var_50151.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50151.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50151.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1357)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1357)) ;
          }else{
            var_cas_min_as_basic.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1358)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1359)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1360)) ;
      var_cas_counters_cst.appendCString ("#define OSMINCYCLE_") ;
      var_cas_counters_cst._dotAssign_operation (operand_48794->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1361))) ;
      var_cas_counters_cst.appendCString (" ") ;
      var_cas_counters_cst._dotAssign_operation (var_cas_tmp) ;
      var_cas_counters_cst.appendCString ("\n"
        "\n") ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1367)))).isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type ;
        var_cas_type = operand_48794->mInfo.counter.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (1368)) ;
        { const GGS_counter_type _var_50775 = var_cas_type ; // CAST instruction
          if (_var_50775.getPtr () != NULL) {
            macroValidPointer (_var_50775.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_50775.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_50775.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1372)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1373)) ;
            }
          }
        }
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1374)) ;
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1377)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_50960 = var_cas_app_for_obj ;
          if (_temp_50960.isBuilt ()) {
            _temp_50960 (HERE)->method_get (_inLexique, operand_48794->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1379)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1380)) ;
        }
      }
      var_cas_counters_result = ((var_cas_counters_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (_inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1388)) ;
  var_cas_counters_result._dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids ;
  var_cas_counter_ids = GGS_string ("") ;
  if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1396)))).isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table ;
    var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_51607 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_51607 = enumerator_51607.nextObject () ;
      if ((operand_51607 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_51607 ;
        do{
          macroValidPointer (operand_51607) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table._dotAssign_operation (operand_51607->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1404))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51607->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1405))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1405))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51607->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1406))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids._dotAssign_operation (operand_51607->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1406))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_51607 = enumerator_51607.nextObject () ;
          _foreach_loop_51607 = ((operand_51607 != NULL)) ;
          if (_foreach_loop_51607) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_51607) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result._dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1414)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1414)) COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  ::routine_doReplace (_inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1415)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1416)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1417)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource ;
  GGS_string var_cas_tpl_internal_resource ;
  GGS_string var_cas_resources_result ;
  var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez ;
  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_resource,  GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1437)) ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_internal_resource,  GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1438)) ;
  {
    GGS_resource_map::cEnumerator enumerator_53335 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53335 = NULL ;
    while (((operand_53335 = enumerator_53335.nextObject ()))) {
      macroValidPointer (operand_53335) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name ;
      var_cas_name = operand_53335->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1443)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53335->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (1446)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  _temp_53622 = var_cas_rez_prio ;
      if (_temp_53622.isBuilt ()) {
        _temp_53622 (HERE)->method_get (_inLexique, operand_53335->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1450)) ;
      }
      const GGS_string_map  _temp_53675 = var_cas_rez_comments ;
      if (_temp_53675.isBuilt ()) {
        _temp_53675 (HERE)->method_get (_inLexique, operand_53335->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1451)) ;
      }
      { const GGS_resource_property_obj _var_54179 = var_cas_rez_prop ; // CAST instruction
        if (_var_54179.getPtr () != NULL) {
          macroValidPointer (_var_54179.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54179.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54179.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez._addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54179.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53335->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1465)) ;
          }
        }
      }
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53335->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1467)) COMMA_SOURCE_FILE_AT_LINE (1467)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53335->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1468)))._operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1468)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1470)) COMMA_SOURCE_FILE_AT_LINE (1470)) ;
      ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1471)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1473)))).isBuiltAndTrue ()) {
        if (((var_cas_app_for_obj.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1474)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  _temp_54601 = var_cas_app_for_obj ;
          if (_temp_54601.isBuilt ()) {
            _temp_54601 (HERE)->method_get (_inLexique, operand_53335->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1476)) ;
          }
          ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1477)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids ;
  var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp ;
  var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_54916 (var_cas_regular_rez, true) ;
    while (enumerator_54916.hc ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54916._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids._dotAssign_operation (var_cas_n.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1489))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54916._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids._dotAssign_operation (enumerator_54916._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_54916.next () ;
    }
  }
  var_cas_regular_rez._addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55150 (var_cas_regular_rez, true) ;
    if (enumerator_55150 .hc ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55150 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp._dotAssign_operation (enumerator_55150._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55150.next () ;
        _foreach_loop_55150 = (enumerator_55150 .hc ()) ;
        if (_foreach_loop_55150) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55150) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result)._operator_concat (GGS_string ("\n")))._operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1508)) ;
  ::routine_doReplace (_inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (1509)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1509)) COMMA_SOURCE_FILE_AT_LINE (1509)) ;
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1510)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event ;
  GGS_string var_cas_imp_result ;
  var_cas_imp_result = GGS_string ("") ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_tpl_event,  GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1526)) ;
  GGS_event_usage_map  var_cas_evt_usage ;
  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask ;
  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event ;
  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_56911 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_56911 = NULL ;
    while (((operand_56911 = enumerator_56911.nextObject ()))) {
      macroValidPointer (operand_56911) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_56911->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1546)) ;
      GGS_uint64  var_cas_event_mask ;
      var_cas_event_mask = GGS_uint64 (0U) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57087 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57087 = NULL ;
        while (((operand_57087 = enumerator_57087.nextObject ()))) {
          macroValidPointer (operand_57087) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  _temp_57165 = var_cas_events ;
          if (_temp_57165.isBuilt ()) {
            _temp_57165 (HERE)->method_get (_inLexique, operand_57087->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1550)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1552)) ;
          { const GGS_event_mask_obj _var_58067 = var_cas_mask_obj ; // CAST instruction
            if (_var_58067.getPtr () != NULL) {
              macroValidPointer (_var_58067.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58067.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_58067.getPtr ()) ;
                if ((((var_cas_event_mask)._operator_and (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1555)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1555))))._operator_isEqual (GGS_uint64 (0U))).isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask)._operator_or (var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1557)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1557))) ;
                }else{
                  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1559)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("MASK of event "))._operator_concat (operand_57087->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1559))))._operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1560)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_58067.getPtr ()))) {
                GGS_uint  var_cas_count ;
                if ((var_cas_evt_usage.reader_hasKey (_inLexique, operand_57087->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1563)) COMMA_SOURCE_FILE_AT_LINE (1563))).isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (_inLexique, operand_57087->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1565)) ;
                  var_cas_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1566)) ;
                }else{
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (_inLexique, operand_57087->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1570)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks ;
          var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_57087->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1575)) COMMA_SOURCE_FILE_AT_LINE (1575))).isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (_inLexique, operand_57087->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1577)) ;
          }
          var_cas_ref_tasks._addAssign_operation (operand_56911->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1579))) ;
          var_cas_tasks_for_event.modifier_add (_inLexique, operand_57087->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1580)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (_inLexique, operand_56911->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1583)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58544 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58544 = NULL ;
    while (((operand_58544 = enumerator_58544.nextObject ()))) {
      macroValidPointer (operand_58544) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58544->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1591)) ;
      { const GGS_event_mask_obj _var_58989 = var_cas_evt_mask ; // CAST instruction
        if (_var_58989.getPtr () != NULL) {
          macroValidPointer (_var_58989.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58989.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_58989.getPtr ()) ;
            GGS_string var_cas_result ;
            var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58544->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1595)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1595)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58544->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1596)) COMMA_SOURCE_FILE_AT_LINE (1596)) ;
            ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1597)) COMMA_SOURCE_FILE_AT_LINE (1597)) ;
            var_cas_imp_result._dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts ;
  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59153 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59153 = NULL ;
    while (((operand_59153 = enumerator_59153.nextObject ()))) {
      macroValidPointer (operand_59153) ;
      var_cas_sort_evts._addAssign_operation (operand_59153->mKey, operand_59153->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59325 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59325 = NULL ;
    while (((operand_59325 = enumerator_59325.nextObject ()))) {
      macroValidPointer (operand_59325) ;
      if ((var_cas_tasks_for_event.reader_hasKey (_inLexique, operand_59325->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1619)) COMMA_SOURCE_FILE_AT_LINE (1619))).isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  _temp_59438 = var_cas_tasks_for_event ;
        if (_temp_59438.isBuilt ()) {
          _temp_59438 (HERE)->method_get (_inLexique, operand_59325->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1621)) ;
        }
        GGS_uint64  var_cas_mask ;
        var_cas_mask = GGS_uint64 (0U) ;
        {
          GGS_stringset::cEnumerator enumerator_59507 (var_cas_tasks, true) ;
          while (enumerator_59507.hc ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  _temp_59571 = var_cas_task_mask ;
            if (_temp_59571.isBuilt ()) {
              _temp_59571 (HERE)->method_get_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_59507._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1625)) ;
            }
            var_cas_mask = (var_cas_mask)._operator_or (var_cas_tm) ;
            enumerator_59507.next () ;
          }
        }
        GGS_uint64  var_cas_bit ;
        var_cas_bit = GGS_uint64 (1U) ;
        GGS_uint _variant_59903 = GGS_uint (32U) ;
        GGS_bool _condition_59903 (_variant_59903.isBuilt (), true) ;
        while (_condition_59903.isBuiltAndTrue ()) {
          _condition_59903 = ((var_cas_bit)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1632))))._operator_and (((var_cas_bit)._operator_and ((var_cas_mask)._operator_tilde ()))._operator_isEqual (GGS_uint64 (0U))) ;
          if (_condition_59903.isBuiltAndTrue ()) {
            if (_variant_59903.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1634)) ;
              _condition_59903 = GGS_bool (false) ;
            }else{
              _variant_59903._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit._left_shift_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1633)) ;
            }
          }
        }
        if (((var_cas_bit)._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (1635)))).isBuiltAndTrue ()) {
          operand_59325->event_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string ("All event mask bits are already use, event "))._operator_concat (operand_59325->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1636))))._operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1637)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60202 (var_cas_tasks, true) ;
          while (enumerator_60202.hc ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_60202._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1642)) ;
            var_cas_tm = (var_cas_bit)._operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (_inLexique, GGS_lstring ::constructor_new (_inLexique, enumerator_60202._key (HERE), GGS_location (_inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1644)) ;
            enumerator_60202.next () ;
          }
        }
        GGS_string var_cas_result ;
        var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59325->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1648)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1648)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59325->event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1649)) COMMA_SOURCE_FILE_AT_LINE (1649)) ;
        ::routine_doReplace (_inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1650)) COMMA_SOURCE_FILE_AT_LINE (1650)) ;
        var_cas_imp_result._dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1729)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & _inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo ;
  var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio ;
  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 ;
  var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config ;
  var_cas_config = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (1748)) ;
  if ((var_cas_config.reader_hasKey (_inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1750))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  _temp_63908 = var_cas_config ;
    if (_temp_63908.isBuilt ()) {
      _temp_63908 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (_inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1752)) ;
    }
    { const GGS_basic_type _var_64137 = var_cas_pw ; // CAST instruction
      if (_var_64137.getPtr () != NULL) {
        macroValidPointer (_var_64137.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64137.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64137.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (1755)) ;
        }else{
          var_cas_pw.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (1757)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1758)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_64181 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64181 = NULL ;
    while (((operand_64181 = enumerator_64181.nextObject ()))) {
      macroValidPointer (operand_64181) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64394 = GGS_uint (32U) ;
        GGS_bool _condition_64394 (_variant_64394.isBuilt (), true) ;
        while (_condition_64394.isBuiltAndTrue ()) {
          _condition_64394 = (operand_64181->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_64394.isBuiltAndTrue ()) {
            if (_variant_64394.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1768)) ;
              _condition_64394 = GGS_bool (false) ;
            }else{
              _variant_64394._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1767)) ;
            }
          }
        }
      }else{
        var_cas_max_size = operand_64181->fifosize ;
      }
      var_cas_fifo.appendCString ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1772))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1772))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1773)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1779)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1779))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_64897 = var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1780)) ;
  GGS_bool _condition_64897 (_variant_64897.isBuilt (), true) ;
  while (_condition_64897.isBuiltAndTrue ()) {
    _condition_64897 = (var_cas_prio)._operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_64897.isBuiltAndTrue ()) {
      if (_variant_64897.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1786)) ;
        _condition_64897 = GGS_bool (false) ;
      }else{
        _variant_64897._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1785)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo._dotAssign_operation (var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1790)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1790))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65052 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65052 = NULL ;
    while (((operand_65052 = enumerator_65052.nextObject ()))) {
      macroValidPointer (operand_65052) ;
      GGS_uint  var_cas_max_size ;
      if ((var_cas_powerof2).isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65265 = GGS_uint (32U) ;
        GGS_bool _condition_65265 (_variant_65265.isBuilt (), true) ;
        while (_condition_65265.isBuiltAndTrue ()) {
          _condition_65265 = (operand_65052->fifosize)._operator_strictSup (var_cas_max_size) ;
          if (_condition_65265.isBuiltAndTrue ()) {
            if (_variant_65265.uintValue () == 0) {
              _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1798)) ;
              _condition_65265 = GGS_bool (false) ;
            }else{
              _variant_65265._decrement_operation (_inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size._left_shift_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1797)) ;
            }
          }
        }
        var_cas_max_size._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1799)) ;
      }else{
        var_cas_max_size = operand_65052->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo._dotAssign_operation (var_cas_prio.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1803))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo._dotAssign_operation (var_cas_max_size.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1803))) ;
      var_cas_fifo.appendCString (" }") ;
      if (((var_cas_prio)._operator_strictInf (var_cas_max_prio)).isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (1806)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1810)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio._add_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1811)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1811)) COMMA_SOURCE_FILE_AT_LINE (1811)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & _inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp ;
  var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (_inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir ;
  ::routine_templates_directory (_inLexique,  var_cas_temp_dir COMMA_SOURCE_FILE_AT_LINE (1828)) ;
  if (((var_cas_temp_dir)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
    GGS_string var_cas_target ;
    var_cas_target = GGS_string (true, _inLexique.stringOptionValueFromKeys ("goil_options", "target_platform" COMMA_SOURCE_FILE_AT_LINE (1831))) ;
    if (((var_cas_target)._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
      GGS_string var_cas_header ;
      GGS_string var_cas_obj_header ;
      GGS_string var_cas_implementation ;
      GGS_string var_cas_types ;
      GGS_config  var_cas_cfg ;
      var_cas_cfg = GGS_config ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file ;
      var_cas_cfg_file = function_config_file (_inLexique COMMA_SOURCE_FILE_AT_LINE (1839)) ;
      if (((var_cas_cfg_file.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1840)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (_inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1841)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file ;
      var_cas_extra_cfg_file = function_extra_config_file (_inLexique COMMA_SOURCE_FILE_AT_LINE (1844)) ;
      if (((var_cas_extra_cfg_file.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (1845)))._operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (_inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1846)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf ;
      var_cas_generated_conf = function_os_cfg (_inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1849)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_header,  GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1851)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_obj_header,  GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1852)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_implementation,  GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1853)) ;
      ::routine_retrieveTemplateString (_inLexique,  var_cas_types,  GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1854)) ;
      GGS_prefix_map  var_cas_prefix ;
      var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      ::routine_init_prefixes (_inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1857)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1863)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1862)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (_inLexique,  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1869)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1868)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (_inLexique,  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1877)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1878)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1880)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1876)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (_inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1886)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (_inLexique,  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1896)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1895)) ;
      ::routine_generate_flags (_inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (1901)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1902)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1903)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1899)) ;
      const GGS_com  _temp_68430 = var_cas_cpu.reader_com (_inLexique COMMA_SOURCE_FILE_AT_LINE (1906)) ;
      if (_temp_68430.isBuilt ()) {
        _temp_68430 (HERE)->method_generate (_inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1906)) ;
      }
      ::routine_generate_events (_inLexique,  var_cas_cpu.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (1909)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1910)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1908)) ;
      ::routine_generate_counters (_inLexique,  var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (1915)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1914)) ;
      ::routine_generate_alarms (_inLexique,  var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (1922)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1921)) ;
      ::routine_generate_tasks (_inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1930)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1931)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1932)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1928)) ;
      ::routine_generate_isrs (_inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1941)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1942)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1943)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1939)) ;
      ::routine_generate_proc_table (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1953)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1954)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1952)) ;
      ::routine_generate_mp (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1960)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (1961)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (1962)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1959)) ;
      ::routine_generate_resources (_inLexique,  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1966)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1965)) ;
      ::routine_generate_messages (_inLexique,  var_cas_cpu.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (1975)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1974)) ;
      ::routine_generate_network_messages (_inLexique,  var_cas_cpu.reader_net_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (1982)),  var_cas_cpu.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (1983)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1981)) ;
      if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (1988)))).isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (_inLexique,  var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (1990)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1989)) ;
        ::routine_generate_timing_prot (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (1996)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (1997)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1995)) ;
        ::routine_generate_apps (_inLexique,  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (2000)),  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (2001)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (2002)),  var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (2003)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1999)) ;
        ::routine_generate_trusted_functions (_inLexique,  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (2011)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2010)) ;
      }
      ::routine_generate_ready_list (_inLexique,  var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (2018)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2017)) ;
      ::routine_generate_types (_inLexique,  var_cas_cpu.reader_tasks (_inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_cpu.reader_isrs (_inLexique COMMA_SOURCE_FILE_AT_LINE (2026)),  var_cas_cpu.reader_alarms (_inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_cpu.reader_counters (_inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_scheduletables (_inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_applis (_inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2024)) ;
      ::routine_generate_it_table (_inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2035)) ;
      GGS_string var_cas_directory ;
      var_cas_directory = function_project_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (2046)) ;
      GGS_string var_cas_header_file ;
      var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file ;
      var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file ;
      var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file ;
      var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2053)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2054)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2055)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2056)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2057)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2058)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2059)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2060)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2061)) ;
      GGS_uint  var_cas_error_count ;
      var_cas_error_count = GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory)._operator_concat (GGS_string ("/")))._operator_concat (var_cas_types_file) ;
      if (((var_cas_error_count)._operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2071)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_header_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2072)) ;
        }
        const GGS_string _temp_73782 = var_cas_header ;
        if (_temp_73782.isBuilt ()) {
          _temp_73782 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2074)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2075)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_obj_header_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2076)) ;
        }
        const GGS_string _temp_73986 = var_cas_obj_header ;
        if (_temp_73986.isBuilt ()) {
          _temp_73986 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2078)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2079)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_implementation_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2080)) ;
        }
        const GGS_string _temp_74202 = var_cas_implementation ;
        if (_temp_74202.isBuilt ()) {
          _temp_74202 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2082)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2083)))).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_types_file))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2084)) ;
        }
        const GGS_string _temp_74405 = var_cas_types ;
        if (_temp_74405.isBuilt ()) {
          _temp_74405 (HERE)->method_makeDirectoryAndWriteToFile (_inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2086)) ;
        }
        if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("goil_options", "generate_makefile" COMMA_SOURCE_FILE_AT_LINE (2088)))).isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir ;
          var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (2089)) ;
          if (((var_cas_makefile_dir)._operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          if ((GGS_bool (_inLexique.boolOptionValueFromKeys ("generic_galgas_cli_options", "verbose_output" COMMA_SOURCE_FILE_AT_LINE (2093)))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((GGS_string ("creating "))._operator_concat (var_cas_makefile_dir))._operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2094)) ;
          }
          ::routine_generate_makefile (_inLexique,  var_cas_cpu.reader_os (_inLexique COMMA_SOURCE_FILE_AT_LINE (2097)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (2100)).reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (2100)) COMMA_SOURCE_FILE_AT_LINE (2096)) ;
        }
        ::routine_generate_description (_inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2103)) ;
      }
    }else{
      _inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2106)) ;
    }
  }else{
    _inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2109)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

