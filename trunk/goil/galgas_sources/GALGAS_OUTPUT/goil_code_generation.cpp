//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.4                         *
//                     november 18th, 2009, at 16h9'17"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7222 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7222.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7452 = var_cas_startuphook ; // CAST instruction
    if (_var_7452.getPtr () != NULL) {
      macroValidPointer (_var_7452.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7452.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7452.getPtr ()) ;
        const GGS_bool cond_7435 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
        if (cond_7435.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7693 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7693.getPtr () != NULL) {
      macroValidPointer (_var_7693.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7693.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7693.getPtr ()) ;
        const GGS_bool cond_7676 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
        if (cond_7676.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7919 = var_cas_errorhook ; // CAST instruction
    if (_var_7919.getPtr () != NULL) {
      macroValidPointer (_var_7919.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7919.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7919.getPtr ()) ;
        const GGS_bool cond_7902 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
        if (cond_7902.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8156 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8156.getPtr () != NULL) {
      macroValidPointer (_var_8156.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8156.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8156.getPtr ()) ;
        const GGS_bool cond_8139 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
        if (cond_8139.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8398 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8398.getPtr () != NULL) {
      macroValidPointer (_var_8398.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8398.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8398.getPtr ()) ;
        const GGS_bool cond_8381 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        if (cond_8381.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8653 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8653.getPtr () != NULL) {
      macroValidPointer (_var_8653.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8653.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8653.getPtr ()) ;
        const GGS_bool cond_8636 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        if (cond_8636.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8923 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8923.getPtr () != NULL) {
      macroValidPointer (_var_8923.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8923.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8923.getPtr ()) ;
        const GGS_bool cond_8906 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        if (cond_8906.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9178 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9178.getPtr () != NULL) {
      macroValidPointer (_var_9178.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9178.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9178.getPtr ()) ;
        const GGS_bool cond_9161 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        if (cond_9161.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9364 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (237)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_COMPILER_SETTINGS"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (241)) COMMA_SOURCE_FILE_AT_LINE (241))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (244)) ;
  const GGS_bool cond_9919 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9919.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_9919.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11462 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_11462.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10334 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) ; // CAST instruction
      if (_var_10334.getPtr () != NULL) {
        macroValidPointer (_var_10334.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10334.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10334.getPtr ()) ;
          const GGS_bool cond_10313 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
          if (cond_10313.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10512 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ; // CAST instruction
      if (_var_10512.getPtr () != NULL) {
        macroValidPointer (_var_10512.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10512.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10512.getPtr ()) ;
          const GGS_bool cond_10491 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ;
          if (cond_10491.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10820 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10820 = NULL ;
      while (((operand_10820 = enumerator_10820.nextObject ()))) {
        macroValidPointer (operand_10820) ;
        { const GGS_timing_prot _var_11018 = operand_10820->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ; // CAST instruction
          if (_var_11018.getPtr () != NULL) {
            macroValidPointer (_var_11018.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11018.getPtr ()))) {
            }else{
              const GGS_bool cond_10998 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_10998.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_11067 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_11067 = NULL ;
      while (((operand_11067 = enumerator_11067.nextObject ()))) {
        macroValidPointer (operand_11067) ;
        { const GGS_timing_prot _var_11262 = operand_11067->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ; // CAST instruction
          if (_var_11262.getPtr () != NULL) {
            macroValidPointer (_var_11262.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11262.getPtr ()))) {
            }else{
              const GGS_bool cond_11242 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11242.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11401 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11401.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11528 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
  if (temp_11528.isBuilt ()) {
    temp_11528 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11694 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), true) ;
    const GGS_ident_map::cElement * operand_11694 = NULL ;
    while (((operand_11694 = enumerator_11694.nextObject ()))) {
      macroValidPointer (operand_11694) ;
      { const GGS_basic_type _var_11932 = operand_11694->mInfo.value ; // CAST instruction
        if (_var_11932.getPtr () != NULL) {
          macroValidPointer (_var_11932.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11932.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11932.getPtr ()) ;
            const GGS_bool cond_11903 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
            if (cond_11903.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11694->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
  const GGS_bool cond_12497 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("arm")) ;
  if (cond_12497.isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (cond_12497.isBuiltAndFalse ()) {
    const GGS_bool cond_12568 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("avr")) ;
    if (cond_12568.isBuiltAndTrue ()) {
      var_cas_trampoline_target = GGS_string ("avr") ;
    }else if (cond_12568.isBuiltAndFalse ()) {
      const GGS_bool cond_12640 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("c166")) ;
      if (cond_12640.isBuiltAndTrue ()) {
        var_cas_trampoline_target = GGS_string ("c166") ;
      }else if (cond_12640.isBuiltAndFalse ()) {
        const GGS_bool cond_12714 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h")) ;
        if (cond_12714.isBuiltAndTrue ()) {
          var_cas_trampoline_target = GGS_string ("h8300h") ;
        }else if (cond_12714.isBuiltAndFalse ()) {
          const GGS_bool cond_12787 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12")) ;
          if (cond_12787.isBuiltAndTrue ()) {
            var_cas_trampoline_target = GGS_string ("hcs12") ;
          }else if (cond_12787.isBuiltAndFalse ()) {
            const GGS_bool cond_12861 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl")) ;
            if (cond_12861.isBuiltAndTrue ()) {
              var_cas_trampoline_target = GGS_string ("libpcl") ;
            }else if (cond_12861.isBuiltAndFalse ()) {
              const GGS_bool cond_12934 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix")) ;
              if (cond_12934.isBuiltAndTrue ()) {
                var_cas_trampoline_target = GGS_string ("posix") ;
              }else if (cond_12934.isBuiltAndFalse ()) {
                const GGS_bool cond_13011 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2")) ;
                if (cond_13011.isBuiltAndTrue ()) {
                  var_cas_trampoline_target = GGS_string ("posix_vp2") ;
                }else if (cond_13011.isBuiltAndFalse ()) {
                  const GGS_bool cond_13082 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc")) ;
                  if (cond_13082.isBuiltAndTrue ()) {
                    var_cas_trampoline_target = GGS_string ("ppc") ;
                  }else if (cond_13082.isBuiltAndFalse ()) {
                    const GGS_bool cond_13154 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e")) ;
                    if (cond_13154.isBuiltAndTrue ()) {
                      var_cas_trampoline_target = GGS_string ("v850e") ;
                    }else if (cond_13154.isBuiltAndFalse ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (338)) ;
                      var_cas_trampoline_target = GGS_string ("") ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13495 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13495 = NULL ;
    while (((operand_13495 = enumerator_13495.nextObject ()))) {
      macroValidPointer (operand_13495) ;
      const GGS_bool cond_13560 = (var_cas_first).operator_not () ;
      if (cond_13560.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13495->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (351))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (354)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (362)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (363)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (365)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (366)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (366)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (367)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (368)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (368)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (369)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (369)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (372)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (372)) ;
  const GGS_bool cond_14546 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14546.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (374)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (374)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (374)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (375)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (378)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)) ;
  const GGS_bool cond_14885 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14885.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (380)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (380)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (381)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (383)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_15284 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_15284.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_15284.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15498 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (391)) ;
  if (temp_15498.isBuilt ()) {
    temp_15498 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (391)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_make_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (394)) COMMA_SOURCE_FILE_AT_LINE (394))) ;
  var_cas_flags.dotAssign_operation (function_bool_class_make_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (396)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (396))) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (398)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_15981 = gOption_goil_5F_options_posix_5F_it.value () ;
  if (cond_15981.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (407)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (408)) ;
  const GGS_string temp_16131 = var_cas_makefileStr ;
  if (temp_16131.isBuilt ()) {
    temp_16131 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (410)) ;
  }
  GGS_string var_cas_makerulesStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (413)) ;
  GGS_string var_cas_filename = (var_cas_directory).operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget = function_trampoline_target_name (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (416)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (417)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (419)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (419)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (419)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (420)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (420)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (420)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (421)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (421)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (424)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (428)) COMMA_SOURCE_FILE_AT_LINE (428)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (430)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (432)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (432)) COMMA_SOURCE_FILE_AT_LINE (432)) COMMA_SOURCE_FILE_AT_LINE (432)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (433)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (433)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_17631 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17631.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_17631.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (443)) ;
  const GGS_bool cond_17909 = (var_cas_filename.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (444))).operator_not () ;
  if (cond_17909.isBuiltAndTrue ()) {
    const GGS_string temp_17889 = var_cas_makerulesStr ;
    if (temp_17889.isBuilt ()) {
      temp_17889 (HERE)->method_writeToFile (inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (445)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (462)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (463)) ;
  const GGS_bool cond_18435 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_18435.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_18435.isBuiltAndFalse ()) {
    const GGS_bool cond_18493 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_18493.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_18493.isBuiltAndFalse ()) {
      const GGS_bool cond_18557 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_18557.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_18557.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (476)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (487)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (488)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (489)) ;
  const GGS_bool cond_18911 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_18911.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18911.isBuiltAndFalse ()) {
    const GGS_bool cond_18969 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_18969.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18969.isBuiltAndFalse ()) {
      const GGS_bool cond_19033 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_19033.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19033.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (502)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_19369 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_19369.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19369.isBuiltAndFalse ()) {
    const GGS_bool cond_19428 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_19428.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19428.isBuiltAndFalse ()) {
      const GGS_bool cond_19493 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_19493.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19493.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (528)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (549)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (549)).add_operation (inLexique, var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (549)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (549)) COMMA_SOURCE_FILE_AT_LINE (549)) ;
  const GGS_bool cond_20058 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_20058.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (551)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (552)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (555)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (555)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (557)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20579 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20579 = NULL ;
    while (((operand_20579 = enumerator_20579.nextObject ()))) {
      macroValidPointer (operand_20579) ;
      { const GGS_basic_type _var_20847 = operand_20579->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (563)) ; // CAST instruction
        if (_var_20847.getPtr () != NULL) {
          macroValidPointer (_var_20847.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20847.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20847.getPtr ()) ;
            const GGS_bool cond_20729 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (564))).operator_strictSup (var_cas_max_act) ;
            if (cond_20729.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (564)) ;
            }
          }else{
            operand_20579->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_20579->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (565)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (566)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (568)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (568)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (570)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_21216 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_21216 = NULL ;
    while (((operand_21216 = enumerator_21216.nextObject ()))) {
      macroValidPointer (operand_21216) ;
      GGS_lstringlist  var_cas_evts = operand_21216->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (576)) ;
      const GGS_bool cond_21353 = (var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (577))).operator_strictSup (var_cas_max_ev) ;
      if (cond_21353.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (577)) ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (579)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (579)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (580)) ;
  var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (583)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (583)) ;
  const GGS_bool cond_21614 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21614.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (585)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (587)) ;
  var_cas_c = var_cas_resources.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (590)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (590)) ;
  const GGS_bool cond_21902 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21902.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (592)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (594)) ;
  var_cas_c = var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (597)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (597)) ;
  const GGS_bool cond_22194 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22194.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (599)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (601)) ;
  var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (604)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (604)) ;
  const GGS_bool cond_22490 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22490.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (606)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (608)) ;
  const GGS_bool cond_22878 = (var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (612))).operator_strictSup (var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (612))) ;
  if (cond_22878.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (613)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (613)) ;
  }else if (cond_22878.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (615)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (615)) ;
  }
  const GGS_bool cond_22959 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22959.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (618)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (619)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (622)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (622)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (622)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (622)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (624)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_23426 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_23426 = NULL ;
    while (((operand_23426 = enumerator_23426.nextObject ()))) {
      macroValidPointer (operand_23426) ;
      { const GGS_app_trusted_obj _var_23586 = operand_23426->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (630)) ; // CAST instruction
        if (_var_23586.getPtr () != NULL) {
          macroValidPointer (_var_23586.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_23586.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_23586.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_23505 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (632)), true) ;
              while (enumerator_23505.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_23505._key (HERE)) ;
                enumerator_23505.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (638)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (638)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (638)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (639)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (642)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (644)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (654)).add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (654)) COMMA_SOURCE_FILE_AT_LINE (654)) COMMA_SOURCE_FILE_AT_LINE (654)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (656)) COMMA_SOURCE_FILE_AT_LINE (656)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (669)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (670)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (671)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (672)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_25037 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_25037 = NULL ;
    while (((operand_25037 = enumerator_25037.nextObject ()))) {
      macroValidPointer (operand_25037) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_25037->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (681)) ;
      { const GGS_action_obj _var_26100 = var_cas_alarm_action ; // CAST instruction
        if (_var_26100.getPtr () != NULL) {
          macroValidPointer (_var_26100.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_26100.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_26100.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (685)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (685))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (685)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (686)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_26100.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_26100.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (689))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_26100.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_26100.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (692)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (692))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (692)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_26100.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_26100.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (695)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (695))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (695)) ;
          }else{
            operand_25037->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (697)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_25037->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (701)) ;
      { const GGS_autostart_obj _var_27010 = var_cas_autostart ; // CAST instruction
        if (_var_27010.getPtr () != NULL) {
          macroValidPointer (_var_27010.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_27010.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (704)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (705)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (706)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_27010.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (708)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (709)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (710)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_27010.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_27010.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (712)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (713)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (713)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) COMMA_SOURCE_FILE_AT_LINE (713)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (714)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (714)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) COMMA_SOURCE_FILE_AT_LINE (714)) ;
          }else{
            operand_25037->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (716)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_25037->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (720)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_25037->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (721)) COMMA_SOURCE_FILE_AT_LINE (721)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_25037->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (722))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (722)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (723))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (723)) ;
      const GGS_bool cond_27650 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_27650.isBuiltAndTrue ()) {
        const GGS_bool cond_27634 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (727))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_27634.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_27535 = var_cas_app_for_obj ;
          if (temp_27535.isBuilt ()) {
            temp_27535 (HERE)->method_get (inLexique, operand_25037->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (729)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (730)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27825 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (740)), true) ;
    if (enumerator_27825 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27825 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_27825._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27825._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (746))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27825._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27825._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27825.next () ;
        _foreach_loop_27825 = (enumerator_27825 .hasCurrentObject ()) ;
        if (_foreach_loop_27825) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27825) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (756)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (757)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (758)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (758)) COMMA_SOURCE_FILE_AT_LINE (758)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_29063 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_29063 = NULL ;
    while (((operand_29063 = enumerator_29063.nextObject ()))) {
      macroValidPointer (operand_29063) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_29063->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) ;
      var_cas_act_as_basic = operand_29063->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (783)) ;
      { const GGS_basic_type _var_29486 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_29486.getPtr () != NULL) {
          macroValidPointer (_var_29486.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29486.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29486.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (786)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (787)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (788)) ;
          }
        }
      }
      { const GGS_basic_type _var_29672 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29672.getPtr () != NULL) {
          macroValidPointer (_var_29672.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29672.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29672.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (792)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (793)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_29063->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_29913 = (var_cas_tl.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (803))).operator_strictSup (GGS_uint (0U)) ;
  if (cond_29913.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_29883 = var_cas_tl ;
    if (temp_29883.isBuilt ()) {
      temp_29883 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (804)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_30008 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_30008 = NULL ;
    while (((operand_30008 = enumerator_30008.nextObject ()))) {
      macroValidPointer (operand_30008) ;
      const GGS_bool cond_30264 = (operand_30008->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_30264.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_30008->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (814)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_30008->name, var_cas_actual_prio, operand_30008->act COMMA_SOURCE_FILE_AT_LINE (817)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_32607 = (var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (836))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_32607.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_31057 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_31057 = NULL ;
      while (((operand_31057 = enumerator_31057.nextObject ()))) {
        macroValidPointer (operand_31057) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_31057->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (848)) ;
        const GGS_isr_obj  temp_31305 = operand_31057->mInfo.isr ;
        if (temp_31305.isBuilt ()) {
          temp_31305 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (849)) ;
        }
        { const GGS_basic_type _var_31508 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_31508.getPtr () != NULL) {
            macroValidPointer (_var_31508.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_31508.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_31508.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (852)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (853)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (854)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_31057->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (867)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_32001 = (var_cas_il.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (869))).operator_strictSup (GGS_uint (0U)) ;
    if (cond_32001.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_31967 = var_cas_il ;
      if (temp_31967.isBuilt ()) {
        temp_31967 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_32119 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_32119 = NULL ;
      while (((operand_32119 = enumerator_32119.nextObject ()))) {
        macroValidPointer (operand_32119) ;
        const GGS_bool cond_32395 = (operand_32119->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_32395.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_32119->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (880)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_32119->name, var_cas_actual_prio, operand_32119->act COMMA_SOURCE_FILE_AT_LINE (883)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_32607.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_33503 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_33503 = NULL ;
    while (((operand_33503 = enumerator_33503.nextObject ()))) {
      macroValidPointer (operand_33503) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33644 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33644 = NULL ;
        while (((operand_33644 = enumerator_33644.nextObject ()))) {
          macroValidPointer (operand_33644) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33644->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (922)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33503->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (924)) ;
          const GGS_bool cond_34192 = var_cas_owned ;
          if (cond_34192.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33929 = var_cas_prio_for_task ;
            if (temp_33929.isBuilt ()) {
              temp_33929 (HERE)->method_get (inLexique, operand_33644->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (928)) ;
            }
            const GGS_bool cond_34044 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34044.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (932)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33644->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_34238 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_34238 = NULL ;
        while (((operand_34238 = enumerator_34238.nextObject ()))) {
          macroValidPointer (operand_34238) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34238->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (937)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33503->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (939)) ;
          const GGS_bool cond_34786 = var_cas_owned ;
          if (cond_34786.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34522 = var_cas_prio_for_isr ;
            if (temp_34522.isBuilt ()) {
              temp_34522 (HERE)->method_get (inLexique, operand_34238->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (943)) ;
            }
            const GGS_bool cond_34638 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34638.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (947)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_34238->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (948))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (948))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_34896 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_34896.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_35085 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_35085 = NULL ;
        while (((operand_35085 = enumerator_35085.nextObject ()))) {
          macroValidPointer (operand_35085) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35085->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (961)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33503->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (963)) ;
          const GGS_bool cond_35514 = var_cas_owned ;
          if (cond_35514.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35370 = var_cas_prio_for_task ;
            if (temp_35370.isBuilt ()) {
              temp_35370 (HERE)->method_get (inLexique, operand_35085->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (967)) ;
            }
            const GGS_bool cond_35494 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35494.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (969)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35560 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35560 = NULL ;
        while (((operand_35560 = enumerator_35560.nextObject ()))) {
          macroValidPointer (operand_35560) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35560->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (974)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33503->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (976)) ;
          const GGS_bool cond_35989 = var_cas_owned ;
          if (cond_35989.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35844 = var_cas_prio_for_isr ;
            if (temp_35844.isBuilt ()) {
              temp_35844 (HERE)->method_get (inLexique, operand_35560->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (980)) ;
            }
            const GGS_bool cond_35969 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35969.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (982)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_33503->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (987)) ;
      var_cas_comments.modifier_put (inLexique, operand_33503->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (988)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37633 = var_cas_max_prio ;
  GGS_bool _condition_37633 (_variant_37633.isBuilt (), true) ;
  while (_condition_37633.isBuiltAndTrue ()) {
    _condition_37633 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37633.isBuiltAndTrue ()) {
      if (_variant_37633.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1033)) ;
        _condition_37633 = GGS_bool (false) ;
      }else{
        _variant_37633.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36990 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36990 = NULL ;
          while (((operand_36990 = enumerator_36990.nextObject ()))) {
            macroValidPointer (operand_36990) ;
            const GGS_bool cond_37082 = (operand_36990->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37082.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36990->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1018)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37136 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_37136 = NULL ;
          while (((operand_37136 = enumerator_37136.nextObject ()))) {
            macroValidPointer (operand_37136) ;
            const GGS_bool cond_37228 = (operand_37136->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37228.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37136->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1021)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_37282 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_37282 = NULL ;
          while (((operand_37282 = enumerator_37282.nextObject ()))) {
            macroValidPointer (operand_37282) ;
            const GGS_bool cond_37374 = (operand_37282->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37374.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_37282->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1024)) ;
            }
          }
        }
        const GGS_bool cond_37571 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_37571.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1029)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1032)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37809 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37809 = NULL ;
    while (((operand_37809 = enumerator_37809.nextObject ()))) {
      macroValidPointer (operand_37809) ;
      GGS_string var_cas_app_name = operand_37809->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37864 (operand_37809->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)), true) ;
        const GGS_ident_map::cElement * operand_37864 = NULL ;
        while (((operand_37864 = enumerator_37864.nextObject ()))) {
          macroValidPointer (operand_37864) ;
          const GGS_bool cond_37984 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37864->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)) COMMA_SOURCE_FILE_AT_LINE (1047))).operator_not () ;
          if (cond_37984.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37864->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1048)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38019 (operand_37809->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
        const GGS_ident_map::cElement * operand_38019 = NULL ;
        while (((operand_38019 = enumerator_38019.nextObject ()))) {
          macroValidPointer (operand_38019) ;
          const GGS_bool cond_38138 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38019->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) COMMA_SOURCE_FILE_AT_LINE (1052))).operator_not () ;
          if (cond_38138.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38019->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1053)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38173 (operand_37809->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), true) ;
        const GGS_ident_map::cElement * operand_38173 = NULL ;
        while (((operand_38173 = enumerator_38173.nextObject ()))) {
          macroValidPointer (operand_38173) ;
          const GGS_bool cond_38294 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38173->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057))).operator_not () ;
          if (cond_38294.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38173->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1058)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38329 (operand_37809->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)), true) ;
        const GGS_ident_map::cElement * operand_38329 = NULL ;
        while (((operand_38329 = enumerator_38329.nextObject ()))) {
          macroValidPointer (operand_38329) ;
          const GGS_bool cond_38455 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38329->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) COMMA_SOURCE_FILE_AT_LINE (1062))).operator_not () ;
          if (cond_38455.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38329->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1063)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38490 (operand_37809->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)), true) ;
        const GGS_ident_map::cElement * operand_38490 = NULL ;
        while (((operand_38490 = enumerator_38490.nextObject ()))) {
          macroValidPointer (operand_38490) ;
          const GGS_bool cond_38613 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) COMMA_SOURCE_FILE_AT_LINE (1067))).operator_not () ;
          if (cond_38613.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38490->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1068)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38648 (operand_37809->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)), true) ;
        const GGS_ident_map::cElement * operand_38648 = NULL ;
        while (((operand_38648 = enumerator_38648.nextObject ()))) {
          macroValidPointer (operand_38648) ;
          const GGS_bool cond_38772 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38648->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1072)) COMMA_SOURCE_FILE_AT_LINE (1072))).operator_not () ;
          if (cond_38772.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38648->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1073)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1095)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39571 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39571 = NULL ;
    while (((operand_39571 = enumerator_39571.nextObject ()))) {
      macroValidPointer (operand_39571) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_39571->mKey,  operand_39571->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109)) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1110))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1111))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1112))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1113))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1113)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1114))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1115))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_40757 = (operand_39571->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1122))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_40757.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      }else if (cond_40757.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1126)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1128)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)) COMMA_SOURCE_FILE_AT_LINE (1129)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1130))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1133)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_41242 = var_cas_actual_priorities ;
      if (temp_41242.isBuilt ()) {
        temp_41242 (HERE)->method_get (inLexique, operand_39571->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      }
      const GGS_bool cond_41513 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_41513.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_41702 = (operand_39571->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1144)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1144))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_41702.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1146)) ;
      }else if (cond_41702.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_39571->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41910 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41910 = NULL ;
          while (((operand_41910 = enumerator_41910.nextObject ()))) {
            macroValidPointer (operand_41910) ;
            const GGS_bool cond_42469 = var_cas_no_internal_rez_found ;
            if (cond_42469.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_42053 = var_cas_resources ;
              if (temp_42053.isBuilt ()) {
                temp_42053 (HERE)->method_get (inLexique, operand_41910->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1154)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1155)) ;
              { const GGS_resource_property_obj _var_42444 = var_cas_rez_prop ; // CAST instruction
                if (_var_42444.getPtr () != NULL) {
                  macroValidPointer (_var_42444.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_42444.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_41910->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1158)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1158)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_42618 = var_cas_no_internal_rez_found ;
        if (cond_42618.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1165)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39571->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1173)) ;
      { const GGS_basic_type _var_43051 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_43051.getPtr () != NULL) {
          macroValidPointer (_var_43051.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_43051.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_43051.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1176)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1177)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39571->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1181)) ;
      { const GGS_task_autostart_obj _var_43587 = var_cas_autostart ; // CAST instruction
        if (_var_43587.getPtr () != NULL) {
          macroValidPointer (_var_43587.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43587.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1184)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43587.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1186)) ;
          }else{
            operand_39571->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1188)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_39571->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1191)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43765 = var_cas_timing_prot ;
      if (temp_43765.isBuilt ()) {
        temp_43765 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39571->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1194)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1194)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1196)) ;
      const GGS_bool cond_44713 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_44713.isBuiltAndTrue ()) {
        const GGS_bool cond_44626 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1200))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_44626.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_44181 = var_cas_app_for_obj ;
          if (temp_44181.isBuilt ()) {
            temp_44181 (HERE)->method_get (inLexique, operand_39571->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1202)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1203)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_44395 = var_cas_apps ;
          if (temp_44395.isBuilt ()) {
            temp_44395 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1207)) ;
          }
          { const GGS_app_trusted_obj _var_44538 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1208)) ; // CAST instruction
            if (_var_44538.getPtr () != NULL) {
              macroValidPointer (_var_44538.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44538.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1211)) COMMA_SOURCE_FILE_AT_LINE (1211)) ;
        }else if (cond_44626.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1213)) ;
        }
      }else if (cond_44713.isBuiltAndFalse ()) {
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (1216)) ;
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_45197 = var_cas_non_preemptable_exists ;
  if (cond_45197.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1233)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1234)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1234)) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1235)) COMMA_SOURCE_FILE_AT_LINE (1235)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1252)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_46199 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_46199 = NULL ;
    while (((operand_46199 = enumerator_46199.nextObject ()))) {
      macroValidPointer (operand_46199) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_46199->mKey,  operand_46199->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1266)) COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1267))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1268))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1270))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1271))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1272))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1274))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1274)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_47021 = var_cas_actual_priorities ;
      if (temp_47021.isBuilt ()) {
        temp_47021 (HERE)->method_get (inLexique, operand_46199->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1277)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1279)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_47184 = operand_46199->mInfo.isr ;
      if (temp_47184.isBuilt ()) {
        temp_47184 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1281)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1282)) COMMA_SOURCE_FILE_AT_LINE (1282)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_46199->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_47427 = var_cas_timing_prot ;
      if (temp_47427.isBuilt ()) {
        temp_47427 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_46199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1288)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1288)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1289)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1290)) ;
      const GGS_bool cond_48237 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_48237.isBuiltAndTrue ()) {
        const GGS_bool cond_48221 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1294))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_48221.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_47778 = var_cas_app_for_obj ;
          if (temp_47778.isBuilt ()) {
            temp_47778 (HERE)->method_get (inLexique, operand_46199->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1296)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1297)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_47991 = var_cas_apps ;
          if (temp_47991.isBuilt ()) {
            temp_47991 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1301)) ;
          }
          { const GGS_app_trusted_obj _var_48134 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1302)) ; // CAST instruction
            if (_var_48134.getPtr () != NULL) {
              macroValidPointer (_var_48134.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_48134.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1305)) COMMA_SOURCE_FILE_AT_LINE (1305)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1320)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1324)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1324)) COMMA_SOURCE_FILE_AT_LINE (1324)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1325)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1338)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_49315 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_49315 = NULL ;
    while (((operand_49315 = enumerator_49315.nextObject ()))) {
      macroValidPointer (operand_49315) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_49315->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1346)) COMMA_SOURCE_FILE_AT_LINE (1346)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_49315->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1347))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1347)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_49315->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1349))) ;
      const GGS_bool cond_49709 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_49709.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1354)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_49315->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)) ;
      { const GGS_basic_type _var_50046 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_50046.getPtr () != NULL) {
          macroValidPointer (_var_50046.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50046.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50046.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1361)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1362)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_49315->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)) ;
      { const GGS_basic_type _var_50447 = var_cas_max_as_basic ; // CAST instruction
        if (_var_50447.getPtr () != NULL) {
          macroValidPointer (_var_50447.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50447.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50447.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1369)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1370)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_49315->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1373)) ;
      { const GGS_basic_type _var_50839 = var_cas_min_as_basic ; // CAST instruction
        if (_var_50839.getPtr () != NULL) {
          macroValidPointer (_var_50839.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50839.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50839.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1375)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1375)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1377)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1378)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_51927 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_51927.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_49315->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1386)) ;
        { const GGS_counter_type _var_51457 = var_cas_type ; // CAST instruction
          if (_var_51457.getPtr () != NULL) {
            macroValidPointer (_var_51457.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_51457.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_51457.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1390)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1391)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1392)) ;
        const GGS_bool cond_51669 = (operand_49315->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1394))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_51669.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1395)) ;
        }else if (cond_51669.isBuiltAndFalse ()) {
          const GGS_bool cond_51891 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1397))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_51891.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_51782 = var_cas_app_for_obj ;
            if (temp_51782.isBuilt ()) {
              temp_51782 (HERE)->method_get (inLexique, operand_49315->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1399)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1400)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1409)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_53187 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_53187.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_52444 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_52444 = enumerator_52444.nextObject () ;
      if ((operand_52444 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_52444 ;
        do{
          macroValidPointer (operand_52444) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_52444->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1425))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52444->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1426))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1426))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52444->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1427))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52444->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1427))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_52444 = enumerator_52444.nextObject () ;
          _foreach_loop_52444 = ((operand_52444 != NULL)) ;
          if (_foreach_loop_52444) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_52444) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)) COMMA_SOURCE_FILE_AT_LINE (1435)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1436)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1437)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1438)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1453)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1454)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_54118 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_54118 = NULL ;
    while (((operand_54118 = enumerator_54118.nextObject ()))) {
      macroValidPointer (operand_54118) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_54118->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1461)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_54118->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_54399 = var_cas_rez_prio ;
      if (temp_54399.isBuilt ()) {
        temp_54399 (HERE)->method_get (inLexique, operand_54118->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1468)) ;
      }
      const GGS_string_map  temp_54451 = var_cas_rez_comments ;
      if (temp_54451.isBuilt ()) {
        temp_54451 (HERE)->method_get (inLexique, operand_54118->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1469)) ;
      }
      { const GGS_resource_property_obj _var_54947 = var_cas_rez_prop ; // CAST instruction
        if (_var_54947.getPtr () != NULL) {
          macroValidPointer (_var_54947.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54947.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54947.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54947.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_54118->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1483)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_54118->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1485)) COMMA_SOURCE_FILE_AT_LINE (1485)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_54118->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1486))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1486)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)) COMMA_SOURCE_FILE_AT_LINE (1488)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1489)) ;
      const GGS_bool cond_55481 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_55481.isBuiltAndTrue ()) {
        const GGS_bool cond_55465 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1492))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_55465.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_55363 = var_cas_app_for_obj ;
          if (temp_55363.isBuilt ()) {
            temp_55363 (HERE)->method_get (inLexique, operand_54118->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1494)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1495)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_55672 (var_cas_regular_rez, true) ;
    while (enumerator_55672.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55672._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1507))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55672._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55672._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_55672.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55908 (var_cas_regular_rez, true) ;
    if (enumerator_55908 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("#define OS_START_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n") ;
      var_cas_rez_imp.appendCString ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55908 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_55908._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55908.next () ;
        _foreach_loop_55908 = (enumerator_55908 .hasCurrentObject ()) ;
        if (_foreach_loop_55908) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55908) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
      var_cas_rez_imp.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n") ;
      var_cas_rez_imp.appendCString ("#include \"tpl_memmap.h\"\n"
        "\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1530)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1531)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1531)) COMMA_SOURCE_FILE_AT_LINE (1531)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1544)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_57864 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_57864 = NULL ;
    while (((operand_57864 = enumerator_57864.nextObject ()))) {
      macroValidPointer (operand_57864) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_57864->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1567)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_58037 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_58037 = NULL ;
        while (((operand_58037 = enumerator_58037.nextObject ()))) {
          macroValidPointer (operand_58037) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_58114 = var_cas_events ;
          if (temp_58114.isBuilt ()) {
            temp_58114 (HERE)->method_get (inLexique, operand_58037->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1571)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1573)) ;
          { const GGS_event_mask_obj _var_59004 = var_cas_mask_obj ; // CAST instruction
            if (_var_59004.getPtr () != NULL) {
              macroValidPointer (_var_59004.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59004.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_59004.getPtr ()) ;
                const GGS_bool cond_58455 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1576)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1576)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_58455.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1578)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1578))) ;
                }else if (cond_58455.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_58037->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1581)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_59004.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_58854 = var_cas_evt_usage.reader_hasKey (inLexique, operand_58037->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1584)) COMMA_SOURCE_FILE_AT_LINE (1584)) ;
                if (cond_58854.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_58037->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1586)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1587)) ;
                }else if (cond_58854.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_58037->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1591)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_59214 = var_cas_tasks_for_event.reader_hasKey (inLexique, operand_58037->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1596)) COMMA_SOURCE_FILE_AT_LINE (1596)) ;
          if (cond_59214.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_58037->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1598)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_57864->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1600))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_58037->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1601)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_57864->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1604)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_59472 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_59472 = NULL ;
    while (((operand_59472 = enumerator_59472.nextObject ()))) {
      macroValidPointer (operand_59472) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_59472->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1612)) ;
      { const GGS_event_mask_obj _var_59910 = var_cas_evt_mask ; // CAST instruction
        if (_var_59910.getPtr () != NULL) {
          macroValidPointer (_var_59910.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59910.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_59910.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59472->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1616))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1616)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59472->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1617)) COMMA_SOURCE_FILE_AT_LINE (1617)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1618)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1618)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1618)) COMMA_SOURCE_FILE_AT_LINE (1618)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_60071 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_60071 = NULL ;
    while (((operand_60071 = enumerator_60071.nextObject ()))) {
      macroValidPointer (operand_60071) ;
      var_cas_sort_evts.addAssign_operation (operand_60071->mKey, operand_60071->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_60241 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_60241 = NULL ;
    while (((operand_60241 = enumerator_60241.nextObject ()))) {
      macroValidPointer (operand_60241) ;
      const GGS_bool cond_61576 = var_cas_tasks_for_event.reader_hasKey (inLexique, operand_60241->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1640)) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
      if (cond_61576.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_60353 = var_cas_tasks_for_event ;
        if (temp_60353.isBuilt ()) {
          temp_60353 (HERE)->method_get (inLexique, operand_60241->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1642)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_60420 (var_cas_tasks, true) ;
          while (enumerator_60420.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_60483 = var_cas_task_mask ;
            if (temp_60483.isBuilt ()) {
              temp_60483 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60420._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1646)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_60420.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_60810 = GGS_uint (32U) ;
        GGS_bool _condition_60810 (_variant_60810.isBuilt (), true) ;
        while (_condition_60810.isBuiltAndTrue ()) {
          _condition_60810 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1653)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_60810.isBuiltAndTrue ()) {
            if (_variant_60810.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1655)) ;
              _condition_60810 = GGS_bool (false) ;
            }else{
              _variant_60810.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1654)) ;
            }
          }
        }
        const GGS_bool cond_60981 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1656))) ;
        if (cond_60981.isBuiltAndTrue ()) {
          operand_60241->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_60241->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1658)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_61105 (var_cas_tasks, true) ;
          while (enumerator_61105.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_61105._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1663)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_61105._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1665)) ;
            enumerator_61105.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_60241->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1669))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1669)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_60241->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1670)) COMMA_SOURCE_FILE_AT_LINE (1670)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1671)) COMMA_SOURCE_FILE_AT_LINE (1671)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1750)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1769)) ;
  const GGS_bool cond_64989 = var_cas_config.reader_hasKey (inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1771)) ;
  if (cond_64989.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_64748 = var_cas_config ;
    if (temp_64748.isBuilt ()) {
      temp_64748 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1773)) ;
    }
    { const GGS_basic_type _var_64975 = var_cas_pw ; // CAST instruction
      if (_var_64975.getPtr () != NULL) {
        macroValidPointer (_var_64975.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64975.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64975.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1779)) ;
        }
      }
    }
  }
  var_cas_fifo.appendCString ("#define OS_START_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65099 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65099 = NULL ;
    while (((operand_65099 = enumerator_65099.nextObject ()))) {
      macroValidPointer (operand_65099) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65328 = var_cas_powerof2 ;
      if (cond_65328.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65309 = GGS_uint (32U) ;
        GGS_bool _condition_65309 (_variant_65309.isBuilt (), true) ;
        while (_condition_65309.isBuiltAndTrue ()) {
          _condition_65309 = (operand_65099->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65309.isBuiltAndTrue ()) {
            if (_variant_65309.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1791)) ;
              _condition_65309 = GGS_bool (false) ;
            }else{
              _variant_65309.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1790)) ;
            }
          }
        }
      }else if (cond_65328.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65099->fifosize ;
      }
      var_cas_fifo.appendCString ("VAR(tpl_proc_id, OS_VAR) tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1795))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1795))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1802)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1802))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_65824 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1803)) ;
  GGS_bool _condition_65824 (_variant_65824.isBuilt (), true) ;
  while (_condition_65824.isBuiltAndTrue ()) {
    _condition_65824 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_65824.isBuiltAndTrue ()) {
      if (_variant_65824.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1809)) ;
        _condition_65824 = GGS_bool (false) ;
      }else{
        _variant_65824.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_65774 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_65774.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1808)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_VAR_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_fifo.appendCString ("#define OS_START_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("CONST(tpl_priority_level, OS_CONST) tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1817)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1817))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_66157 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_66157 = NULL ;
    while (((operand_66157 = enumerator_66157.nextObject ()))) {
      macroValidPointer (operand_66157) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_66410 = var_cas_powerof2 ;
      if (cond_66410.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_66367 = GGS_uint (32U) ;
        GGS_bool _condition_66367 (_variant_66367.isBuilt (), true) ;
        while (_condition_66367.isBuiltAndTrue ()) {
          _condition_66367 = (operand_66157->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_66367.isBuiltAndTrue ()) {
            if (_variant_66367.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1825)) ;
              _condition_66367 = GGS_bool (false) ;
            }else{
              _variant_66367.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1824)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1826)) ;
      }else if (cond_66410.isBuiltAndFalse ()) {
        var_cas_max_size = operand_66157->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1830))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1830))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_66592 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_66592.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1833)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_fifo.appendCString ("#define OS_STOP_SEC_CONST_UNSPECIFIED\n"
    "#include \"tpl_memmap.h\"\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1839)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1840)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1840)) COMMA_SOURCE_FILE_AT_LINE (1840)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1856)) ;
  const GGS_bool cond_76478 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_76478.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    const GGS_bool cond_76390 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_76390.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1861)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1862)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1864)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1867)) ;
      const GGS_bool cond_67883 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1868))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_67883.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1869)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1872)) ;
      const GGS_bool cond_68066 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1873))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_68066.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1874)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1877)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1880)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1885)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1892)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1891)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1900)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1901)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1899)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1909)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1919)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1918)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1924)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1925)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1926)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1922)) ;
      const GGS_com  temp_69499 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1929)) ;
      if (temp_69499.isBuilt ()) {
        temp_69499 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1929)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1932)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1933)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1931)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1938)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1937)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1945)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1944)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1953)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1954)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1955)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1951)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1964)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1965)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1966)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1962)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1976)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1977)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1975)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1982)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1990)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1989)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1999)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1998)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (2007)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2005)) ;
      const GGS_bool cond_72362 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_72362.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2014)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2013)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2020)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2021)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (2019)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2024)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2025)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2026)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2023)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2035)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2034)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2042)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2041)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2049)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2050)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2051)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2052)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2053)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2054)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2055)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2048)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2059)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2065)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      ::routine_generate_compiler (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2071)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2078)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2085)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2086)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2087)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2088)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2089)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2090)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2091)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2092)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2093)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_76375 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_76375.isBuiltAndTrue ()) {
        const GGS_bool cond_74941 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74941.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2104)) ;
        }
        const GGS_string temp_74995 = var_cas_header ;
        if (temp_74995.isBuilt ()) {
          temp_74995 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2106)) ;
        }
        const GGS_bool cond_75139 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75139.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2108)) ;
        }
        const GGS_string temp_75197 = var_cas_obj_header ;
        if (temp_75197.isBuilt ()) {
          temp_75197 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2110)) ;
        }
        const GGS_bool cond_75349 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75349.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2112)) ;
        }
        const GGS_string temp_75411 = var_cas_implementation ;
        if (temp_75411.isBuilt ()) {
          temp_75411 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2114)) ;
        }
        const GGS_bool cond_75558 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_75558.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2116)) ;
        }
        const GGS_string temp_75611 = var_cas_types ;
        if (temp_75611.isBuilt ()) {
          temp_75611 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2118)) ;
        }
        const GGS_bool cond_76315 = gOption_goil_5F_options_generate_5F_makefile.value () ;
        if (cond_76315.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2121)) ;
          const GGS_bool cond_75897 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_75897.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_76045 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
          if (cond_76045.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2126)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2129)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (2132)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2132)) COMMA_SOURCE_FILE_AT_LINE (2128)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2135)) ;
      }
    }else if (cond_76390.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2138)) ;
    }
  }else if (cond_76478.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2141)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

