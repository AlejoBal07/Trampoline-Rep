//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                        Generated by version 1.9.3                         *
//                     november 10th, 2009, at 15h1'46"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 598
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "init_prefixes"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_init_prefixes (C_Compiler & inLexique,
                                GGS_prefix_map  & var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_init_prefixes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_NAME$") COMMA_SOURCE_FILE_AT_LINE (80)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("counter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$COUNTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (82)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_name"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$MESSAGE_NAME$") COMMA_SOURCE_FILE_AT_LINE (116)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$MESSAGE$") COMMA_SOURCE_FILE_AT_LINE (117)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target"), GGS_location (inLexique) COMMA_HERE), GGS_string ("message_object_of_"), GGS_string ("$TARGET$") COMMA_SOURCE_FILE_AT_LINE (118)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("target_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&message_object_of_"), GGS_string ("$TARGET_PTR$") COMMA_SOURCE_FILE_AT_LINE (119)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$SIZE$") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("element_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$ELEMENT_SIZE$") COMMA_SOURCE_FILE_AT_LINE (121)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("queue_size"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$QUEUE_SIZE$") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("dyn_queue"), GGS_location (inLexique) COMMA_HERE), GGS_string ("dynamic_queue_of_message_"), GGS_string ("$DYN_QUEUE$") COMMA_SOURCE_FILE_AT_LINE (123)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (125)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_name"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error of message "), GGS_string ("$NOTIFICATION_NAME$") COMMA_SOURCE_FILE_AT_LINE (127)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (129)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (131)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notification"), GGS_location (inLexique) COMMA_HERE), GGS_string ("error_notification_of_message_"), GGS_string ("$NOTIFICATION$") COMMA_SOURCE_FILE_AT_LINE (133)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("flag_fct"), GGS_location (inLexique) COMMA_HERE), GGS_string ("tpl_set_flag_"), GGS_string ("$FLAGFUNCTION$") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("error_notif_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&error_notification_of_message_"), GGS_string ("$NOTIFICATION_PTR$") COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("msg_buf"), GGS_location (inLexique) COMMA_HERE), GGS_string ("buffer_of_message_"), GGS_string ("$BUFFER$") COMMA_SOURCE_FILE_AT_LINE (139)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter"), GGS_location (inLexique) COMMA_HERE), GGS_string ("filter_of_message_"), GGS_string ("$FILTER$") COMMA_SOURCE_FILE_AT_LINE (141)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_ptr"), GGS_location (inLexique) COMMA_HERE), GGS_string ("&filter_of_message_"), GGS_string ("$FILTER_PTR$") COMMA_SOURCE_FILE_AT_LINE (143)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_func"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTERING_FUNC$") COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_prefix.modifier_add (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("filter_kind"), GGS_location (inLexique) COMMA_HERE), GGS_string (""), GGS_string ("$FILTER_KIND$") COMMA_SOURCE_FILE_AT_LINE (147)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_init_prefixes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_flags"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_flags (C_Compiler & inLexique,
                                const GGS_os_config   var_cas_os_gen_cfg,
                                GGS_os_obj   var_cas_os,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_flags at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_flags = GGS_string ("") ;
  var_cas_flags.appendCString ("#define    TARGET_ARCH    ARCH_") ;
  var_cas_flags.dotAssign_operation (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
  var_cas_flags.appendCString ("\n") ;
  const GGS_bool cond_7222 = (var_cas_os.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170))).operator_isEqual (GGS_string ("extended")) ;
  if (cond_7222.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    OS_EXTENDED\n") ;
  }
  GGS_basic_type  var_cas_startuphook = var_cas_os.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ;
  { const GGS_basic_type _var_7452 = var_cas_startuphook ; // CAST instruction
    if (_var_7452.getPtr () != NULL) {
      macroValidPointer (_var_7452.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7452.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7452.getPtr ()) ;
        const GGS_bool cond_7435 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ;
        if (cond_7435.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_STARTUP_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
  { const GGS_basic_type _var_7693 = var_cas_shutdownhook ; // CAST instruction
    if (_var_7693.getPtr () != NULL) {
      macroValidPointer (_var_7693.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7693.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7693.getPtr ()) ;
        const GGS_bool cond_7676 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ;
        if (cond_7676.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SHUTDOWN_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_errorhook = var_cas_os.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) ;
  { const GGS_basic_type _var_7919 = var_cas_errorhook ; // CAST instruction
    if (_var_7919.getPtr () != NULL) {
      macroValidPointer (_var_7919.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_7919.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_7919.getPtr ()) ;
        const GGS_bool cond_7902 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
        if (cond_7902.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_ERROR_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
  { const GGS_basic_type _var_8156 = var_cas_pretaskhook ; // CAST instruction
    if (_var_8156.getPtr () != NULL) {
      macroValidPointer (_var_8156.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8156.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8156.getPtr ()) ;
        const GGS_bool cond_8139 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ;
        if (cond_8139.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_PRE_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ;
  { const GGS_basic_type _var_8398 = var_cas_posttaskhook ; // CAST instruction
    if (_var_8398.getPtr () != NULL) {
      macroValidPointer (_var_8398.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8398.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8398.getPtr ()) ;
        const GGS_bool cond_8381 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)) ;
        if (cond_8381.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_POST_TASK_HOOK\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
  { const GGS_basic_type _var_8653 = var_cas_usegetserviceid ; // CAST instruction
    if (_var_8653.getPtr () != NULL) {
      macroValidPointer (_var_8653.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8653.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8653.getPtr ()) ;
        const GGS_bool cond_8636 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
        if (cond_8636.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEGETSERVICEID\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ;
  { const GGS_basic_type _var_8923 = var_cas_useparameteraccess ; // CAST instruction
    if (_var_8923.getPtr () != NULL) {
      macroValidPointer (_var_8923.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_8923.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_8923.getPtr ()) ;
        const GGS_bool cond_8906 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
        if (cond_8906.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USEPARAMETERACCESS\n") ;
        }
      }else{
      }
    }
  }
  GGS_basic_type  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ;
  { const GGS_basic_type _var_9178 = var_cas_useresscheduler ; // CAST instruction
    if (_var_9178.getPtr () != NULL) {
      macroValidPointer (_var_9178.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9178.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9178.getPtr ()) ;
        const GGS_bool cond_9161 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ;
        if (cond_9161.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_USERESSCHEDULER\n") ;
        }
      }else{
      }
    }
  }
  { const GGS_basic_type _var_9364 = var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ; // CAST instruction
    if (_var_9364.getPtr () != NULL) {
      macroValidPointer (_var_9364.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_9364.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_9364.getPtr ()) ;
        const GGS_bool cond_9347 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
        if (cond_9347.isBuiltAndTrue ()) {
          var_cas_flags.appendCString ("#define    WITH_SYSTEM_CALL\n") ;
        }
      }else{
      }
    }
  }
  var_cas_flags.dotAssign_operation (function_bool_class_define (inLexique, GGS_string ("WITH_MEMORY_PROTECTION"), function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (237)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (237))) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_MEMMAP"), function_memory_mapping (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (240)) COMMA_SOURCE_FILE_AT_LINE (240))) ;
  GGS_lstring  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ;
  const GGS_bool cond_9845 = (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (244))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9845.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"") ;
    var_cas_flags.dotAssign_operation (var_cas_tpl_base_path.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245))) ;
    var_cas_flags.appendCString ("\"\n") ;
  }else if (cond_9845.isBuiltAndFalse ()) {
    var_cas_flags.appendCString ("#define    TRAMPOLINE_BASE_PATH \"..\"\n") ;
  }
  const GGS_bool cond_11388 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_11388.isBuiltAndTrue ()) {
    var_cas_flags.appendCString ("#define    WITH_AUTOSAR\n") ;
    { const GGS_basic_type _var_10260 = var_cas_os.reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (255)) ; // CAST instruction
      if (_var_10260.getPtr () != NULL) {
        macroValidPointer (_var_10260.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10260.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10260.getPtr ()) ;
          const GGS_bool cond_10239 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (257)) ;
          if (cond_10239.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_PROTECTION_HOOK\n") ;
          }
        }else{
        }
      }
    }
    { const GGS_basic_type _var_10438 = var_cas_os.reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) ; // CAST instruction
      if (_var_10438.getPtr () != NULL) {
        macroValidPointer (_var_10438.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10438.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10438.getPtr ()) ;
          const GGS_bool cond_10417 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (262)) ;
          if (cond_10417.isBuiltAndTrue ()) {
            var_cas_flags.appendCString ("#define    WITH_STACK_MONITORING\n") ;
          }
        }else{
        }
      }
    }
    GGS_bool var_cas_use_tp = GGS_bool (false) ;
    {
      GGS_task_map::cEnumerator enumerator_10746 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_10746 = NULL ;
      while (((operand_10746 = enumerator_10746.nextObject ()))) {
        macroValidPointer (operand_10746) ;
        { const GGS_timing_prot _var_10944 = operand_10746->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (272)) ; // CAST instruction
          if (_var_10944.getPtr () != NULL) {
            macroValidPointer (_var_10944.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_10944.getPtr ()))) {
            }else{
              const GGS_bool cond_10924 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_10924.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_10993 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10993 = NULL ;
      while (((operand_10993 = enumerator_10993.nextObject ()))) {
        macroValidPointer (operand_10993) ;
        { const GGS_timing_prot _var_11188 = operand_10993->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (280)) ; // CAST instruction
          if (_var_11188.getPtr () != NULL) {
            macroValidPointer (_var_11188.getPtr ()) ;
            if (typeid (cPtr_void_timing_prot) == typeid (* (_var_11188.getPtr ()))) {
            }else{
              const GGS_bool cond_11168 = (var_cas_use_tp).operator_isEqual (GGS_bool (false)) ;
              if (cond_11168.isBuiltAndTrue ()) {
                var_cas_use_tp = GGS_bool (true) ;
              }
            }
          }
        }
      }
    }
    const GGS_bool cond_11327 = (var_cas_use_tp).operator_isEqual (GGS_bool (true)) ;
    if (cond_11327.isBuiltAndTrue ()) {
      var_cas_flags.appendCString ("#define    WITH_AUTOSAR_TIMING_PROTECTION\n") ;
    }
    var_cas_flags.appendCString ("#define    AUTOSAR_SC    4\n") ;
  }
  GGS_string var_cas_tr ;
  const GGS_trace  temp_11454 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (295)) ;
  if (temp_11454.isBuilt ()) {
    temp_11454 (HERE)->method_generate_c (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (295)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  var_cas_flags.dotAssign_operation (function_bool_define (inLexique, GGS_string ("WITH_IT_TABLE"), var_cas_os_gen_cfg.reader_with_it_table (inLexique COMMA_SOURCE_FILE_AT_LINE (299)) COMMA_SOURCE_FILE_AT_LINE (299))) ;
  {
    GGS_ident_map::cEnumerator enumerator_11620 (var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (302)), true) ;
    const GGS_ident_map::cElement * operand_11620 = NULL ;
    while (((operand_11620 = enumerator_11620.nextObject ()))) {
      macroValidPointer (operand_11620) ;
      { const GGS_basic_type _var_11858 = operand_11620->mInfo.value ; // CAST instruction
        if (_var_11858.getPtr () != NULL) {
          macroValidPointer (_var_11858.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_11858.getPtr ()))) {
            const GGS_bool_class var_cas_b (_var_11858.getPtr ()) ;
            const GGS_bool cond_11829 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (305)) ;
            if (cond_11829.isBuiltAndTrue ()) {
              var_cas_flags.appendCString ("#define    WITH_") ;
              var_cas_flags.dotAssign_operation (operand_11620->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (306))) ;
              var_cas_flags.appendCString ("\n") ;
            }
          }else{
          }
        }
      }
    }
  }
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONFIG_FLAGS$"), var_cas_flags COMMA_SOURCE_FILE_AT_LINE (314)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_flags\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "trampoline_target_name"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_trampoline_target_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_trampoline_target_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_trampoline_target ;
  GGS_string var_cas_goilTargetName = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (324)) ;
  const GGS_bool cond_12423 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("arm")) ;
  if (cond_12423.isBuiltAndTrue ()) {
    var_cas_trampoline_target = GGS_string ("arm") ;
  }else if (cond_12423.isBuiltAndFalse ()) {
    const GGS_bool cond_12494 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("avr")) ;
    if (cond_12494.isBuiltAndTrue ()) {
      var_cas_trampoline_target = GGS_string ("avr") ;
    }else if (cond_12494.isBuiltAndFalse ()) {
      const GGS_bool cond_12566 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("c166")) ;
      if (cond_12566.isBuiltAndTrue ()) {
        var_cas_trampoline_target = GGS_string ("c166") ;
      }else if (cond_12566.isBuiltAndFalse ()) {
        const GGS_bool cond_12640 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("h8300h")) ;
        if (cond_12640.isBuiltAndTrue ()) {
          var_cas_trampoline_target = GGS_string ("h8300h") ;
        }else if (cond_12640.isBuiltAndFalse ()) {
          const GGS_bool cond_12713 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("hcs12")) ;
          if (cond_12713.isBuiltAndTrue ()) {
            var_cas_trampoline_target = GGS_string ("hcs12") ;
          }else if (cond_12713.isBuiltAndFalse ()) {
            const GGS_bool cond_12787 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("libpcl")) ;
            if (cond_12787.isBuiltAndTrue ()) {
              var_cas_trampoline_target = GGS_string ("libpcl") ;
            }else if (cond_12787.isBuiltAndFalse ()) {
              const GGS_bool cond_12860 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix")) ;
              if (cond_12860.isBuiltAndTrue ()) {
                var_cas_trampoline_target = GGS_string ("posix") ;
              }else if (cond_12860.isBuiltAndFalse ()) {
                const GGS_bool cond_12937 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("posix_vp2")) ;
                if (cond_12937.isBuiltAndTrue ()) {
                  var_cas_trampoline_target = GGS_string ("posix_vp2") ;
                }else if (cond_12937.isBuiltAndFalse ()) {
                  const GGS_bool cond_13008 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("ppc")) ;
                  if (cond_13008.isBuiltAndTrue ()) {
                    var_cas_trampoline_target = GGS_string ("ppc") ;
                  }else if (cond_13008.isBuiltAndFalse ()) {
                    const GGS_bool cond_13080 = (var_cas_goilTargetName).operator_isEqual (GGS_string ("v850e")) ;
                    if (cond_13080.isBuiltAndTrue ()) {
                      var_cas_trampoline_target = GGS_string ("v850e") ;
                    }else if (cond_13080.isBuiltAndFalse ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unknown target name. Can't find the corresponding Trampoline target.") COMMA_SOURCE_FILE_AT_LINE (337)) ;
                      var_cas_trampoline_target = GGS_string ("") ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_trampoline_target_name\n") ;
  #endif
  return var_cas_trampoline_target ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "updateTemplateWithStringList"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTemplateWithStringList (C_Compiler & inLexique,
                                const GGS_lstringlist   var_cas_strList,
                                const GGS_string  var_cas_templateKey,
                                GGS_string & var_cas_templateStringToUpdate COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTemplateWithStringList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fullStr = GGS_string ("") ;
  GGS_bool var_cas_first = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_13421 (var_cas_strList, true) ;
    const GGS_lstringlist::cElement * operand_13421 = NULL ;
    while (((operand_13421 = enumerator_13421.nextObject ()))) {
      macroValidPointer (operand_13421) ;
      const GGS_bool cond_13486 = (var_cas_first).operator_not () ;
      if (cond_13486.isBuiltAndTrue ()) {
        var_cas_fullStr.appendCString (" ") ;
      }
      var_cas_fullStr.dotAssign_operation (operand_13421->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (350))) ;
      var_cas_first = GGS_bool (false) ;
    }
  }
  var_cas_templateStringToUpdate = var_cas_templateStringToUpdate.reader_stringByReplacingStringByString (inLexique, var_cas_templateKey, var_cas_fullStr COMMA_SOURCE_FILE_AT_LINE (353)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTemplateWithStringList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_makefile"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_makefile (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_string  var_cas_directory,
                                GGS_string  var_cas_app COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_makefile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_makefileSpecStr = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("Makefile_specific") COMMA_SOURCE_FILE_AT_LINE (361)) ;
  GGS_string var_cas_makefileStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Makefile") COMMA_SOURCE_FILE_AT_LINE (362)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAKEFILE_SPEC$"), var_cas_makefileSpecStr COMMA_SOURCE_FILE_AT_LINE (364)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (365)),  GGS_string ("$APP_SRC$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (365)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (366)),  GGS_string ("$CFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (366)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (367)),  GGS_string ("$LDFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (367)) ;
  ::routine_updateTemplateWithStringList (inLexique,  var_cas_os.reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (368)),  GGS_string ("$ASFLAGS$"),  var_cas_makefileStr COMMA_SOURCE_FILE_AT_LINE (368)) ;
  GGS_string var_cas_app_name_str = var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (371)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (371)) ;
  const GGS_bool cond_14472 = (var_cas_app_name_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14472.isBuiltAndTrue ()) {
    var_cas_app_name_str = GGS_string ("trampoline") ;
  }
  ::routine_checkFileDoesNotExists (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_app_name_str, var_cas_os.reader_app_name (inLexique COMMA_SOURCE_FILE_AT_LINE (373)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (373)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), var_cas_app_name_str COMMA_SOURCE_FILE_AT_LINE (374)) ;
  GGS_string var_cas_tpl_base_path_str = var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (377)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (377)) ;
  const GGS_bool cond_14811 = (var_cas_tpl_base_path_str).operator_isEqual (GGS_string ("")) ;
  if (cond_14811.isBuiltAndTrue ()) {
    var_cas_tpl_base_path_str = GGS_string ("..") ;
  }
  ::routine_checkTrampolinePath (inLexique,  GGS_lstring ::constructor_new (inLexique, var_cas_tpl_base_path_str, var_cas_os.reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (379)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (379)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (379)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_BASE_PATH$"), var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (380)) ;
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OIL_FILE$"), (var_cas_app).operator_concat (GGS_string (".oil")) COMMA_SOURCE_FILE_AT_LINE (382)) ;
  GGS_string var_cas_autosarStr ;
  const GGS_bool cond_15210 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_15210.isBuiltAndTrue ()) {
    var_cas_autosarStr = GGS_string ("true") ;
  }else if (cond_15210.isBuiltAndFalse ()) {
    var_cas_autosarStr = GGS_string ("false") ;
  }
  var_cas_makefileStr = var_cas_makefileStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$AUTOSAR_ON$"), var_cas_autosarStr COMMA_SOURCE_FILE_AT_LINE (386)) ;
  GGS_string var_cas_flags = GGS_string ("") ;
  GGS_string var_cas_tr ;
  const GGS_trace  temp_15424 = var_cas_os.reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (390)) ;
  if (temp_15424.isBuilt ()) {
    temp_15424 (HERE)->method_generate_make (inLexique, var_cas_tr COMMA_SOURCE_FILE_AT_LINE (390)) ;
  }
  var_cas_flags.dotAssign_operation (var_cas_tr) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$FLAGS$"),  var_cas_flags COMMA_SOURCE_FILE_AT_LINE (392)) ;
  GGS_string var_cas_i_option = GGS_string ("") ;
  GGS_string var_cas_target_cfg_dep = GGS_string ("") ;
  const GGS_bool cond_15692 = gOption_goil_5F_options_posix_5F_it.value () ;
  if (cond_15692.isBuiltAndTrue ()) {
    var_cas_i_option = GGS_string ("-i") ;
    var_cas_target_cfg_dep = GGS_string ("target.cfg") ;
  }
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$GENITVEC$"),  var_cas_i_option COMMA_SOURCE_FILE_AT_LINE (401)) ;
  ::routine_doReplace (inLexique,  var_cas_makefileStr,  GGS_string ("$OIL_FILE_DEP$"),  var_cas_target_cfg_dep COMMA_SOURCE_FILE_AT_LINE (402)) ;
  const GGS_string temp_15842 = var_cas_makefileStr ;
  if (temp_15842.isBuilt ()) {
    temp_15842 (HERE)->method_writeToFile (inLexique, (var_cas_directory).operator_concat (GGS_string ("/Makefile")) COMMA_SOURCE_FILE_AT_LINE (404)) ;
  }
  GGS_string var_cas_makerulesStr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("Make-rules") COMMA_SOURCE_FILE_AT_LINE (407)) ;
  GGS_string var_cas_filename = (var_cas_directory).operator_concat (GGS_string ("/Make-rules")) ;
  GGS_string var_cas_trampolineTarget = function_trampoline_target_name (inLexique COMMA_SOURCE_FILE_AT_LINE (409)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TARGET$"), gOption_goil_5F_options_target_5F_platform.value () COMMA_SOURCE_FILE_AT_LINE (410)) ;
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TRAMPOLINE_TARGET$"), var_cas_trampolineTarget COMMA_SOURCE_FILE_AT_LINE (411)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$COMPILER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (413)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (413)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (413)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$ASSEMBLER$"),  var_cas_os.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (414)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (414)),  GGS_string ("as") COMMA_SOURCE_FILE_AT_LINE (414)) ;
  ::routine_do_replace_default (inLexique,  var_cas_makerulesStr,  GGS_string ("$LINKER$"),  var_cas_os.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (415)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (415)),  GGS_string ("gcc") COMMA_SOURCE_FILE_AT_LINE (415)) ;
  ::routine_check_target (inLexique,  var_cas_tpl_base_path_str COMMA_SOURCE_FILE_AT_LINE (418)) ;
  GGS_string var_cas_arch_chip_board = GGS_string ("") ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("ARCH"),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (420)) COMMA_SOURCE_FILE_AT_LINE (420)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("CHIP"),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (421)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
  ::routine_add_makefile_flag_if_not_empty (inLexique,  var_cas_arch_chip_board,  GGS_string ("BOARD"),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (422)) COMMA_SOURCE_FILE_AT_LINE (422)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$ARCH_CHIP_BOARD$"),  var_cas_arch_chip_board COMMA_SOURCE_FILE_AT_LINE (424)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WSC$"),  function_true_false (inLexique, function_get_bool (inLexique, var_cas_os.reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (426)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426)) ;
  ::routine_doReplace (inLexique,  var_cas_makerulesStr,  GGS_string ("$WMP$"),  function_true_false (inLexique, function_get_bool (inLexique, function_memory_protection (inLexique, var_cas_os COMMA_SOURCE_FILE_AT_LINE (427)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) ;
  GGS_string var_cas_templatePathStr = gOption_goil_5F_options_template_5F_dir.value () ;
  GGS_string var_cas_templateStr ;
  const GGS_bool cond_17342 = (var_cas_templatePathStr).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17342.isBuiltAndTrue ()) {
    var_cas_templateStr = (GGS_string ("GOIL_TEMPLATE_PATH = ")).operator_concat (var_cas_templatePathStr) ;
  }else if (cond_17342.isBuiltAndFalse ()) {
    var_cas_templateStr = GGS_string ("#GOIL_TEMPLATE_PATH = ") ;
  }
  var_cas_makerulesStr = var_cas_makerulesStr.reader_stringByReplacingStringByString (inLexique, GGS_string ("$GOIL_TEMPLATE_PATH$"), var_cas_templateStr COMMA_SOURCE_FILE_AT_LINE (437)) ;
  const GGS_bool cond_17620 = (var_cas_filename.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (438))).operator_not () ;
  if (cond_17620.isBuiltAndTrue ()) {
    const GGS_string temp_17600 = var_cas_makerulesStr ;
    if (temp_17600.isBuilt ()) {
      temp_17600 (HERE)->method_writeToFile (inLexique, var_cas_filename COMMA_SOURCE_FILE_AT_LINE (439)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_makefile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (455)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (456)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (457)) ;
  const GGS_bool cond_18146 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_18146.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_18146.isBuiltAndFalse ()) {
    const GGS_bool cond_18204 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_18204.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_18204.isBuiltAndFalse ()) {
      const GGS_bool cond_18268 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_18268.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_18268.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (470)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (481)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (482)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (483)) ;
  const GGS_bool cond_18622 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_18622.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_18622.isBuiltAndFalse ()) {
    const GGS_bool cond_18680 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_18680.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_18680.isBuiltAndFalse ()) {
      const GGS_bool cond_18744 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_18744.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_18744.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (496)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_19080 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_19080.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_19080.isBuiltAndFalse ()) {
    const GGS_bool cond_19139 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_19139.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_19139.isBuiltAndFalse ()) {
      const GGS_bool cond_19204 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_19204.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_19204.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (522)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (543)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (543)).add_operation (inLexique, var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (543)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (543)) COMMA_SOURCE_FILE_AT_LINE (543)) ;
  const GGS_bool cond_19769 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_19769.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (545)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (546)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (549)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (549)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (551)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20290 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20290 = NULL ;
    while (((operand_20290 = enumerator_20290.nextObject ()))) {
      macroValidPointer (operand_20290) ;
      { const GGS_basic_type _var_20558 = operand_20290->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (557)) ; // CAST instruction
        if (_var_20558.getPtr () != NULL) {
          macroValidPointer (_var_20558.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_20558.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_20558.getPtr ()) ;
            const GGS_bool cond_20440 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (558))).operator_strictSup (var_cas_max_act) ;
            if (cond_20440.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (558)) ;
            }
          }else{
            operand_20290->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_20290->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (559)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (560)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (562)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (562)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (564)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_20927 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_20927 = NULL ;
    while (((operand_20927 = enumerator_20927.nextObject ()))) {
      macroValidPointer (operand_20927) ;
      GGS_lstringlist  var_cas_evts = operand_20927->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (570)) ;
      const GGS_bool cond_21064 = (var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (571))).operator_strictSup (var_cas_max_ev) ;
      if (cond_21064.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (573)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (573)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (574)) ;
  var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (577)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (577)) ;
  const GGS_bool cond_21325 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21325.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (579)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (581)) ;
  var_cas_c = var_cas_resources.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (584)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (584)) ;
  const GGS_bool cond_21613 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21613.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (586)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (588)) ;
  var_cas_c = var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (591)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (591)) ;
  const GGS_bool cond_21905 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_21905.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (593)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (595)) ;
  var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (598)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (598)) ;
  const GGS_bool cond_22201 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22201.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (600)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (602)) ;
  const GGS_bool cond_22589 = (var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (606))).operator_strictSup (var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (606))) ;
  if (cond_22589.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (607)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (607)) ;
  }else if (cond_22589.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (609)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (609)) ;
  }
  const GGS_bool cond_22670 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_22670.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (612)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (613)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (616)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (616)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (616)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (616)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (618)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_23137 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_23137 = NULL ;
    while (((operand_23137 = enumerator_23137.nextObject ()))) {
      macroValidPointer (operand_23137) ;
      { const GGS_app_trusted_obj _var_23297 = operand_23137->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (624)) ; // CAST instruction
        if (_var_23297.getPtr () != NULL) {
          macroValidPointer (_var_23297.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_23297.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_23297.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_23216 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (626)), true) ;
              while (enumerator_23216.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_23216._key (HERE)) ;
                enumerator_23216.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (632)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (632)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (632)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (633)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (636)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (638)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (648)).add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (650)) COMMA_SOURCE_FILE_AT_LINE (650)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_alarms"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_alarms (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_alarms at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_alarm_setevent = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_event_set") COMMA_SOURCE_FILE_AT_LINE (663)) ;
  GGS_string var_cas_tpl_alarm_activatetask = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_task_act") COMMA_SOURCE_FILE_AT_LINE (664)) ;
  GGS_string var_cas_tpl_alarm_callback = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_callback") COMMA_SOURCE_FILE_AT_LINE (665)) ;
  GGS_string var_cas_tpl_alarm_incrementcounter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("alarm_inc_counter") COMMA_SOURCE_FILE_AT_LINE (666)) ;
  GGS_string var_cas_alarms_result = GGS_string ("") ;
  {
    GGS_alarm_map::cEnumerator enumerator_24748 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_24748 = NULL ;
    while (((operand_24748 = enumerator_24748.nextObject ()))) {
      macroValidPointer (operand_24748) ;
      GGS_string var_cas_result = GGS_string ("") ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_24748->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) ;
      { const GGS_action_obj _var_25811 = var_cas_alarm_action ; // CAST instruction
        if (_var_25811.getPtr () != NULL) {
          macroValidPointer (_var_25811.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_25811.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_25811.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_setevent ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (679)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (679))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (680)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (680)) ;
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_25811.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_25811.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_activatetask ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (683)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (683)) ;
          }else if (typeid (cPtr_callback_action) == typeid (* (_var_25811.getPtr ()))) {
            const GGS_callback_action var_cas_cba (_var_25811.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_callback ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CALLBACK$"),  (var_cas_cba.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (686)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (686))).operator_concat (GGS_string ("_callback")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_25811.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_25811.getPtr ()) ;
            var_cas_result = var_cas_tpl_alarm_incrementcounter ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TARGET_COUNTER$"),  (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (689)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (689))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
          }else{
            operand_24748->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown action found") COMMA_SOURCE_FILE_AT_LINE (691)) ;
          }
        }
      }
      GGS_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_24748->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (695)) ;
      { const GGS_autostart_obj _var_26721 = var_cas_autostart ; // CAST instruction
        if (_var_26721.getPtr () != NULL) {
          macroValidPointer (_var_26721.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_26721.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (698)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (699)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (700)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_26721.getPtr ()))) {
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_SLEEP") COMMA_SOURCE_FILE_AT_LINE (702)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (703)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (704)) ;
          }else if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_26721.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_aat (_var_26721.getPtr ()) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_STATE$"),  GGS_string ("ALARM_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (706)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_CYCLE$"),  var_cas_aat.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (707)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (707)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (707)) COMMA_SOURCE_FILE_AT_LINE (707)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_DATE$"),  var_cas_aat.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (708)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
          }else{
            operand_24748->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (710)) ;
          }
        }
      }
      GGS_lstring  var_cas_counter_name ;
      var_cas_counter_name = operand_24748->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM_NAME$"),  operand_24748->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715)) COMMA_SOURCE_FILE_AT_LINE (715)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ALARM$"),  (operand_24748->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716))).operator_concat (GGS_string ("_alarm_desc")) COMMA_SOURCE_FILE_AT_LINE (716)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (var_cas_counter_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (717))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (717)) ;
      const GGS_bool cond_27361 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_27361.isBuiltAndTrue ()) {
        const GGS_bool cond_27345 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (721))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_27345.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_27246 = var_cas_app_for_obj ;
          if (temp_27246.isBuilt ()) {
            temp_27246 (HERE)->method_get (inLexique, operand_24748->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (723)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (724)) ;
        }
      }
      var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_alarm_ids = GGS_string ("") ;
  GGS_string var_cas_alarm_imp = GGS_string ("") ;
  {
    GGS_stringset::cEnumerator enumerator_27536 (var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (734)), true) ;
    if (enumerator_27536 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_alarm_imp = GGS_string ("CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)\n") ;
      var_cas_alarm_imp.appendCString ("  tpl_alarm_table[ALARM_COUNT] = {\n") ;
      bool _foreach_loop_27536 ;
      do{
        var_cas_alarm_imp.appendCString ("  &") ;
        var_cas_alarm_imp.dotAssign_operation (enumerator_27536._key (HERE)) ;
        var_cas_alarm_imp.appendCString ("_alarm_desc") ;
        var_cas_alarm_ids.appendCString ("#define ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27536._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id ") ;
        var_cas_alarm_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (740))) ;
        var_cas_alarm_ids.appendCString ("\n") ;
        var_cas_alarm_ids.appendCString ("CONST(AlarmType, AUTOMATIC) ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27536._key (HERE)) ;
        var_cas_alarm_ids.appendCString (" = ") ;
        var_cas_alarm_ids.dotAssign_operation (enumerator_27536._key (HERE)) ;
        var_cas_alarm_ids.appendCString ("_id;\n") ;
        var_cas_n.mValue ++ ;
        enumerator_27536.next () ;
        _foreach_loop_27536 = (enumerator_27536 .hasCurrentObject ()) ;
        if (_foreach_loop_27536) {
          var_cas_alarm_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_27536) ;
      var_cas_alarm_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_alarms_result = ((var_cas_alarms_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_alarm_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMIDS$"),  var_cas_alarm_ids COMMA_SOURCE_FILE_AT_LINE (750)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ALARMS$"),  var_cas_alarms_result COMMA_SOURCE_FILE_AT_LINE (751)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ALARM_COUNT$"),  var_cas_alarms.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (752)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (752)) COMMA_SOURCE_FILE_AT_LINE (752)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_alarms\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_task = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_28774 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_28774 = NULL ;
    while (((operand_28774 = enumerator_28774.nextObject ()))) {
      macroValidPointer (operand_28774) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_28774->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (776)) ;
      var_cas_act_as_basic = operand_28774->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) ;
      { const GGS_basic_type _var_29197 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_29197.getPtr () != NULL) {
          macroValidPointer (_var_29197.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29197.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29197.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (781)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (782)) ;
          }
        }
      }
      { const GGS_basic_type _var_29383 = var_cas_act_as_basic ; // CAST instruction
        if (_var_29383.getPtr () != NULL) {
          macroValidPointer (_var_29383.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_29383.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_29383.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (785)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (786)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (787)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_28774->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_29624 = (var_cas_tl.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (797))).operator_strictSup (GGS_uint (0U)) ;
  if (cond_29624.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_0 ;
    GGS_lstring  automatic_var_1 ;
    const GGS_objs_by_prio  temp_29594 = var_cas_tl ;
    if (temp_29594.isBuilt ()) {
      temp_29594 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (798)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_29719 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_29719 = NULL ;
    while (((operand_29719 = enumerator_29719.nextObject ()))) {
      macroValidPointer (operand_29719) ;
      const GGS_bool cond_29975 = (operand_29719->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_29975.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_29719->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_29719->name, var_cas_actual_prio, operand_29719->act COMMA_SOURCE_FILE_AT_LINE (811)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_isr = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_32318 = (var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (830))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_32318.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_30768 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_30768 = NULL ;
      while (((operand_30768 = enumerator_30768.nextObject ()))) {
        macroValidPointer (operand_30768) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        GGS_uint  var_cas_act = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_30768->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (842)) ;
        const GGS_isr_obj  temp_31016 = operand_30768->mInfo.isr ;
        if (temp_31016.isBuilt ()) {
          temp_31016 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (843)) ;
        }
        { const GGS_basic_type _var_31219 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_31219.getPtr () != NULL) {
            macroValidPointer (_var_31219.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_31219.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_31219.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (846)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (847)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (848)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, var_cas_act, operand_30768->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (861)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_31712 = (var_cas_il.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (863))).operator_strictSup (GGS_uint (0U)) ;
    if (cond_31712.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_2 ;
      GGS_lstring  automatic_var_3 ;
      const GGS_objs_by_prio  temp_31678 = var_cas_il ;
      if (temp_31678.isBuilt ()) {
        temp_31678 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (864)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_31830 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_31830 = NULL ;
      while (((operand_31830 = enumerator_31830.nextObject ()))) {
        macroValidPointer (operand_31830) ;
        const GGS_bool cond_32106 = (operand_31830->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_32106.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_31830->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (874)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_31830->name, var_cas_actual_prio, operand_31830->act COMMA_SOURCE_FILE_AT_LINE (877)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_32318.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_string_map  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_33214 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_33214 = NULL ;
    while (((operand_33214 = enumerator_33214.nextObject ()))) {
      macroValidPointer (operand_33214) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_33355 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_33355 = NULL ;
        while (((operand_33355 = enumerator_33355.nextObject ()))) {
          macroValidPointer (operand_33355) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33355->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (916)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_4 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33214->mKey,  automatic_var_4,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (918)) ;
          const GGS_bool cond_33903 = var_cas_owned ;
          if (cond_33903.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_33640 = var_cas_prio_for_task ;
            if (temp_33640.isBuilt ()) {
              temp_33640 (HERE)->method_get (inLexique, operand_33355->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (922)) ;
            }
            const GGS_bool cond_33755 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_33755.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (926)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33355->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (927))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_33949 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_33949 = NULL ;
        while (((operand_33949 = enumerator_33949.nextObject ()))) {
          macroValidPointer (operand_33949) ;
          GGS_lstringlist  var_cas_owned_rez = operand_33949->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (931)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_5 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33214->mKey,  automatic_var_5,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (933)) ;
          const GGS_bool cond_34497 = var_cas_owned ;
          if (cond_34497.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_34233 = var_cas_prio_for_isr ;
            if (temp_34233.isBuilt ()) {
              temp_34233 (HERE)->method_get (inLexique, operand_33949->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (937)) ;
            }
            const GGS_bool cond_34349 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_34349.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (941)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_33949->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (942))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (942))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_34607 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_34607.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_34796 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_34796 = NULL ;
        while (((operand_34796 = enumerator_34796.nextObject ()))) {
          macroValidPointer (operand_34796) ;
          GGS_lstringlist  var_cas_owned_rez = operand_34796->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (955)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_6 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33214->mKey,  automatic_var_6,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (957)) ;
          const GGS_bool cond_35225 = var_cas_owned ;
          if (cond_35225.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35081 = var_cas_prio_for_task ;
            if (temp_35081.isBuilt ()) {
              temp_35081 (HERE)->method_get (inLexique, operand_34796->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (961)) ;
            }
            const GGS_bool cond_35205 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35205.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (963)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_35271 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_35271 = NULL ;
        while (((operand_35271 = enumerator_35271.nextObject ()))) {
          macroValidPointer (operand_35271) ;
          GGS_lstringlist  var_cas_owned_rez = operand_35271->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (968)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_7 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_33214->mKey,  automatic_var_7,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (970)) ;
          const GGS_bool cond_35700 = var_cas_owned ;
          if (cond_35700.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_35555 = var_cas_prio_for_isr ;
            if (temp_35555.isBuilt ()) {
              temp_35555 (HERE)->method_get (inLexique, operand_35271->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (974)) ;
            }
            const GGS_bool cond_35680 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_35680.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (976)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_33214->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (981)) ;
      var_cas_comments.modifier_put (inLexique, operand_33214->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (982)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_task,
                                GGS_prio_map   var_cas_prio_for_isr,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_37344 = var_cas_max_prio ;
  GGS_bool _condition_37344 (_variant_37344.isBuilt (), true) ;
  while (_condition_37344.isBuiltAndTrue ()) {
    _condition_37344 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_37344.isBuiltAndTrue ()) {
      if (_variant_37344.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1027)) ;
        _condition_37344 = GGS_bool (false) ;
      }else{
        _variant_37344.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_36701 (var_cas_prio_for_task, true) ;
          const GGS_prio_map::cElement * operand_36701 = NULL ;
          while (((operand_36701 = enumerator_36701.nextObject ()))) {
            macroValidPointer (operand_36701) ;
            const GGS_bool cond_36793 = (operand_36701->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36793.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36701->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1012)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36847 (var_cas_prio_for_isr, true) ;
          const GGS_prio_map::cElement * operand_36847 = NULL ;
          while (((operand_36847 = enumerator_36847.nextObject ()))) {
            macroValidPointer (operand_36847) ;
            const GGS_bool cond_36939 = (operand_36847->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_36939.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36847->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1015)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_36993 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_36993 = NULL ;
          while (((operand_36993 = enumerator_36993.nextObject ()))) {
            macroValidPointer (operand_36993) ;
            const GGS_bool cond_37085 = (operand_36993->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_37085.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_36993->mInfo.act COMMA_SOURCE_FILE_AT_LINE (1018)) ;
            }
          }
        }
        const GGS_bool cond_37282 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_37282.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1023)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string_map  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_string_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_37520 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_37520 = NULL ;
    while (((operand_37520 = enumerator_37520.nextObject ()))) {
      macroValidPointer (operand_37520) ;
      GGS_string var_cas_app_name = operand_37520->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) ;
      {
        GGS_ident_map::cEnumerator enumerator_37575 (operand_37520->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)), true) ;
        const GGS_ident_map::cElement * operand_37575 = NULL ;
        while (((operand_37575 = enumerator_37575.nextObject ()))) {
          macroValidPointer (operand_37575) ;
          const GGS_bool cond_37695 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37575->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)) COMMA_SOURCE_FILE_AT_LINE (1041))).operator_not () ;
          if (cond_37695.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37575->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37730 (operand_37520->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)), true) ;
        const GGS_ident_map::cElement * operand_37730 = NULL ;
        while (((operand_37730 = enumerator_37730.nextObject ()))) {
          macroValidPointer (operand_37730) ;
          const GGS_bool cond_37849 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37730->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) COMMA_SOURCE_FILE_AT_LINE (1046))).operator_not () ;
          if (cond_37849.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37730->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1047)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_37884 (operand_37520->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)), true) ;
        const GGS_ident_map::cElement * operand_37884 = NULL ;
        while (((operand_37884 = enumerator_37884.nextObject ()))) {
          macroValidPointer (operand_37884) ;
          const GGS_bool cond_38005 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_37884->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) COMMA_SOURCE_FILE_AT_LINE (1051))).operator_not () ;
          if (cond_38005.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_37884->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38040 (operand_37520->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)), true) ;
        const GGS_ident_map::cElement * operand_38040 = NULL ;
        while (((operand_38040 = enumerator_38040.nextObject ()))) {
          macroValidPointer (operand_38040) ;
          const GGS_bool cond_38166 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38040->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) COMMA_SOURCE_FILE_AT_LINE (1056))).operator_not () ;
          if (cond_38166.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38040->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1057)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38201 (operand_37520->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)), true) ;
        const GGS_ident_map::cElement * operand_38201 = NULL ;
        while (((operand_38201 = enumerator_38201.nextObject ()))) {
          macroValidPointer (operand_38201) ;
          const GGS_bool cond_38324 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38201->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)) COMMA_SOURCE_FILE_AT_LINE (1061))).operator_not () ;
          if (cond_38324.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38201->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1062)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_38359 (operand_37520->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)), true) ;
        const GGS_ident_map::cElement * operand_38359 = NULL ;
        while (((operand_38359 = enumerator_38359.nextObject ()))) {
          macroValidPointer (operand_38359) ;
          const GGS_bool cond_38483 = (var_cas_app_for_obj.reader_hasKey (inLexique, operand_38359->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)) COMMA_SOURCE_FILE_AT_LINE (1066))).operator_not () ;
          if (cond_38483.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_38359->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1067)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_tasks"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_tasks (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_task_map   var_cas_tasks,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_tasks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_task = function_template_string (inLexique, GGS_string ("code"), GGS_string ("task") COMMA_SOURCE_FILE_AT_LINE (1089)) ;
  GGS_string var_cas_tasks_result = GGS_string ("") ;
  GGS_uint  var_cas_max_prio = GGS_uint (0U) ;
  GGS_bool var_cas_non_preemptable_exists = GGS_bool (false) ;
  {
    GGS_task_map::cEnumerator enumerator_39282 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_39282 = NULL ;
    while (((operand_39282 = enumerator_39282.nextObject ()))) {
      macroValidPointer (operand_39282) ;
      GGS_string var_cas_tmp ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_39282->mKey,  operand_39282->mInfo.task,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1099)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_task) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1104))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1105))).operator_concat (GGS_string ("_task_desc")) COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1106))).operator_concat (GGS_string ("_task_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1107))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1108))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_ID$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1109))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      GGS_string var_cas_tpl_evt = GGS_string ("") ;
      const GGS_bool cond_40468 = (operand_39282->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1116))).operator_isEqual (GGS_uint (0U)) ;
      if (cond_40468.isBuiltAndTrue ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_BASIC") COMMA_SOURCE_FILE_AT_LINE (1118)) ;
      }else if (cond_40468.isBuiltAndFalse ()) {
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_TYPE$"), GGS_string ("TASK_EXTENDED") COMMA_SOURCE_FILE_AT_LINE (1120)) ;
        var_cas_tpl_evt = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event_masks") COMMA_SOURCE_FILE_AT_LINE (1122)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$EXEC_NAME$"),  operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) COMMA_SOURCE_FILE_AT_LINE (1123)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl_evt,  GGS_string ("$TASK_EVENT_STRUCT$"),  (operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1124))).operator_concat (GGS_string ("_task_evts")) COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TASK_EVTS$"),  var_cas_tpl_evt COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_8 ;
      const GGS_prio_map  temp_40953 = var_cas_actual_priorities ;
      if (temp_40953.isBuilt ()) {
        temp_40953 (HERE)->method_get (inLexique, operand_39282->mKey, var_cas_actual_prio, automatic_var_8 COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      }
      const GGS_bool cond_41224 = (var_cas_actual_prio).operator_strictSup (var_cas_max_prio) ;
      if (cond_41224.isBuiltAndTrue ()) {
        var_cas_max_prio = var_cas_actual_prio ;
      }
      const GGS_bool cond_41413 = (operand_39282->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (1138)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1138))).operator_isEqual (GGS_string ("NON")) ;
      if (cond_41413.isBuiltAndTrue ()) {
        var_cas_non_preemptable_exists = GGS_bool (true) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("&INTERNAL_RES_SCHEDULER") COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      }else if (cond_41413.isBuiltAndFalse ()) {
        GGS_lstringlist  var_cas_used_rez = operand_39282->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1143)) ;
        GGS_bool var_cas_no_internal_rez_found = GGS_bool (true) ;
        {
          GGS_lstringlist::cEnumerator enumerator_41621 (var_cas_used_rez, true) ;
          const GGS_lstringlist::cElement * operand_41621 = NULL ;
          while (((operand_41621 = enumerator_41621.nextObject ()))) {
            macroValidPointer (operand_41621) ;
            const GGS_bool cond_42180 = var_cas_no_internal_rez_found ;
            if (cond_42180.isBuiltAndTrue ()) {
              GGS_resource_obj  var_cas_rez ;
              const GGS_resource_map  temp_41764 = var_cas_resources ;
              if (temp_41764.isBuilt ()) {
                temp_41764 (HERE)->method_get (inLexique, operand_41621->mValue, var_cas_rez COMMA_SOURCE_FILE_AT_LINE (1148)) ;
              }
              GGS_resource_property_obj  var_cas_rez_prop = var_cas_rez.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1149)) ;
              { const GGS_resource_property_obj _var_42155 = var_cas_rez_prop ; // CAST instruction
                if (_var_42155.getPtr () != NULL) {
                  macroValidPointer (_var_42155.getPtr ()) ;
                  if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_42155.getPtr ()))) {
                    ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  ((GGS_string ("&")).operator_concat (operand_41621->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1152)))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1152)) ;
                    var_cas_no_internal_rez_found = GGS_bool (false) ;
                  }else{
                  }
                }
              }
            }
          }
        }
        const GGS_bool cond_42329 = var_cas_no_internal_rez_found ;
        if (cond_42329.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_PTR$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (1159)) ;
        }
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_PRIORITY$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1164)) ;
      GGS_basic_type  var_cas_activation_as_basic ;
      var_cas_activation_as_basic = operand_39282->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)) ;
      { const GGS_basic_type _var_42762 = var_cas_activation_as_basic ; // CAST instruction
        if (_var_42762.getPtr () != NULL) {
          macroValidPointer (_var_42762.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_42762.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_42762.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) ;
          }else{
            var_cas_activation_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown activation value") COMMA_SOURCE_FILE_AT_LINE (1171)) ;
          }
        }
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_MAX_ACT_COUNT$"), var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1172)) ;
      GGS_task_autostart_obj  var_cas_autostart ;
      var_cas_autostart = operand_39282->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      { const GGS_task_autostart_obj _var_43298 = var_cas_autostart ; // CAST instruction
        if (_var_43298.getPtr () != NULL) {
          macroValidPointer (_var_43298.getPtr ()) ;
          if (typeid (cPtr_task_autostart_true) == typeid (* (_var_43298.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (1178)) ;
          }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_43298.getPtr ()))) {
            var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_STATE$"), GGS_string ("SUSPENDED") COMMA_SOURCE_FILE_AT_LINE (1180)) ;
          }else{
            operand_39282->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown autostart found") COMMA_SOURCE_FILE_AT_LINE (1182)) ;
          }
        }
      }
      GGS_timing_prot  var_cas_timing_prot = operand_39282->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_43476 = var_cas_timing_prot ;
      if (temp_43476.isBuilt ()) {
        temp_43476 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_39282->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      }
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_STRUCT$"), var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      var_cas_result = var_cas_result.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMING_PROT_REF$"), var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      const GGS_bool cond_44352 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_44352.isBuiltAndTrue ()) {
        const GGS_bool cond_44336 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1194))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_44336.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_43892 = var_cas_app_for_obj ;
          if (temp_43892.isBuilt ()) {
            temp_43892 (HERE)->method_get (inLexique, operand_39282->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1196)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1197)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_44106 = var_cas_apps ;
          if (temp_44106.isBuilt ()) {
            temp_44106 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1201)) ;
          }
          { const GGS_app_trusted_obj _var_44249 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1202)) ; // CAST instruction
            if (_var_44249.getPtr () != NULL) {
              macroValidPointer (_var_44249.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_44249.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1203)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)) COMMA_SOURCE_FILE_AT_LINE (1205)) ;
        }
      }
      var_cas_tasks_result = ((var_cas_tasks_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  const GGS_bool cond_44770 = var_cas_non_preemptable_exists ;
  if (cond_44770.isBuiltAndTrue ()) {
    var_cas_tasks_result = (GGS_string ("extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n"
      "\n")).operator_concat (var_cas_tasks_result) ;
  }
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASKS$"), var_cas_tasks_result COMMA_SOURCE_FILE_AT_LINE (1223)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_COUNT$"), var_cas_tasks.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)) COMMA_SOURCE_FILE_AT_LINE (1224)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RES_SCHEDULER_PRIORITY$"), var_cas_max_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) COMMA_SOURCE_FILE_AT_LINE (1225)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_tasks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_isrs"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_isrs (C_Compiler & inLexique,
                                GGS_config   var_cas_cfg,
                                GGS_isr_map   var_cas_isrs,
                                GGS_app_map   var_cas_apps,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_actual_priorities,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_isrs at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_isr = function_template_string (inLexique, GGS_string ("code"), GGS_string ("isr") COMMA_SOURCE_FILE_AT_LINE (1242)) ;
  GGS_string var_cas_tpl_isr_spec ;
  GGS_string var_cas_isrs_result = GGS_string ("") ;
  {
    GGS_isr_map::cEnumerator enumerator_45772 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_45772 = NULL ;
    while (((operand_45772 = enumerator_45772.nextObject ()))) {
      macroValidPointer (operand_45772) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = GGS_string ("") ;
      ::routine_generate_context_and_stack (inLexique,  var_cas_cfg,  operand_45772->mKey,  operand_45772->mInfo.isr,  var_cas_result COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      var_cas_result = (var_cas_result).operator_concat (var_cas_tpl_isr) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_NAME$"),  operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)) COMMA_SOURCE_FILE_AT_LINE (1256)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_FUNCTION$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1257))).operator_concat (GGS_string ("_function")) COMMA_SOURCE_FILE_AT_LINE (1257)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1258))).operator_concat (GGS_string ("_isr_desc")) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STATIC$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1259))).operator_concat (GGS_string ("_isr_stat_desc")) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_CONTEXT$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1260))).operator_concat (GGS_string ("_CONTEXT")) COMMA_SOURCE_FILE_AT_LINE (1260)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EXEC_STACK$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1261))).operator_concat (GGS_string ("_STACK")) COMMA_SOURCE_FILE_AT_LINE (1261)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_HELPER$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1262))).operator_concat (GGS_string ("_isr_helper")) COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_ID$"),  (operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1264))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      GGS_uint  var_cas_actual_prio ;
      GGS_uint  automatic_var_9 ;
      const GGS_prio_map  temp_46594 = var_cas_actual_priorities ;
      if (temp_46594.isBuilt ()) {
        temp_46594 (HERE)->method_get (inLexique, operand_45772->mKey, var_cas_actual_prio, automatic_var_9 COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      }
      var_cas_tmp = var_cas_actual_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1268)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_PRIORITY$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1269)) ;
      GGS_uint  var_cas_act ;
      const GGS_isr_obj  temp_46757 = operand_45772->mInfo.isr ;
      if (temp_46757.isBuilt ()) {
        temp_46757 (HERE)->method_get_activation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$ISR_MAX_ACT_COUNT$"),  var_cas_act.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1272)) COMMA_SOURCE_FILE_AT_LINE (1272)) ;
      GGS_timing_prot  var_cas_timing_prot = operand_45772->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)) ;
      GGS_string var_cas_tp ;
      GGS_string var_cas_tp_ref ;
      const GGS_timing_prot  temp_47000 = var_cas_timing_prot ;
      if (temp_47000.isBuilt ()) {
        temp_47000 (HERE)->method_generate (inLexique, var_cas_cfg, var_cas_tp, var_cas_tp_ref, operand_45772->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)), var_cas_resources COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_STRUCT$"),  var_cas_tp COMMA_SOURCE_FILE_AT_LINE (1279)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TIMING_PROT_REF$"),  var_cas_tp_ref COMMA_SOURCE_FILE_AT_LINE (1280)) ;
      const GGS_bool cond_47810 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_47810.isBuiltAndTrue ()) {
        const GGS_bool cond_47794 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1284))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_47794.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_47351 = var_cas_app_for_obj ;
          if (temp_47351.isBuilt ()) {
            temp_47351 (HERE)->method_get (inLexique, operand_45772->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1286)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1287)) ;
          GGS_uint  var_cas_trust = GGS_uint (0U) ;
          GGS_app_obj  var_cas_app ;
          const GGS_app_map  temp_47564 = var_cas_apps ;
          if (temp_47564.isBuilt ()) {
            temp_47564 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (1291)) ;
          }
          { const GGS_app_trusted_obj _var_47707 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1292)) ; // CAST instruction
            if (_var_47707.getPtr () != NULL) {
              macroValidPointer (_var_47707.getPtr ()) ;
              if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47707.getPtr ()))) {
                var_cas_trust.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)) ;
              }else{
              }
            }
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TRUSTED_COUNT$"),  var_cas_trust.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)) COMMA_SOURCE_FILE_AT_LINE (1295)) ;
        }
      }
      var_cas_isrs_result = ((var_cas_isrs_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_isr_specific (inLexique,  var_cas_isrs,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1310)) ;
  var_cas_isrs_result.dotAssign_operation (var_cas_specific_code) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$ISR_COUNT$"),  var_cas_isrs.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1314)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1314)) COMMA_SOURCE_FILE_AT_LINE (1314)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$ISRS$"),  var_cas_isrs_result COMMA_SOURCE_FILE_AT_LINE (1315)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_isrs\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_counters"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_counters (C_Compiler & inLexique,
                                GGS_counter_map   var_cas_counters,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_counters at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_counter = function_template_string (inLexique, GGS_string ("code"), GGS_string ("counter") COMMA_SOURCE_FILE_AT_LINE (1328)) ;
  GGS_string var_cas_counters_result = GGS_string ("") ;
  GGS_string var_cas_counters_cst = GGS_string ("") ;
  {
    GGS_counter_map::cEnumerator enumerator_48888 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_48888 = NULL ;
    while (((operand_48888 = enumerator_48888.nextObject ()))) {
      macroValidPointer (operand_48888) ;
      GGS_string var_cas_tmp = GGS_string ("") ;
      GGS_string var_cas_result = var_cas_tpl_counter ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_NAME$"),  operand_48888->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1336)) COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER$"),  (operand_48888->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1337))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (1337)) ;
      GGS_string var_cas_name = (GGS_string ("_")).operator_concat (operand_48888->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1339))) ;
      const GGS_bool cond_49282 = (var_cas_name).operator_isEqual (GGS_string ("_SystemCounter")) ;
      if (cond_49282.isBuiltAndTrue ()) {
        var_cas_name = GGS_string ("") ;
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_SUFF$"),  var_cas_name COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      GGS_basic_type  var_cas_ticks_as_basic ;
      var_cas_ticks_as_basic = operand_48888->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)) ;
      { const GGS_basic_type _var_49619 = var_cas_ticks_as_basic ; // CAST instruction
        if (_var_49619.getPtr () != NULL) {
          macroValidPointer (_var_49619.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_49619.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_49619.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)) ;
          }else{
            var_cas_ticks_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TICKSPERBASE value") COMMA_SOURCE_FILE_AT_LINE (1351)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$TICKS_PER_BASE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSTICKSPERBASE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_max_as_basic = operand_48888->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1355)) ;
      { const GGS_basic_type _var_50020 = var_cas_max_as_basic ; // CAST instruction
        if (_var_50020.getPtr () != NULL) {
          macroValidPointer (_var_50020.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50020.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50020.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)) ;
          }else{
            var_cas_max_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MAXALLOWEDVALUE value") COMMA_SOURCE_FILE_AT_LINE (1359)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MAX_ALLOWED_VALUE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1360)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMAXALLOWEDVALUE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n") ;
      GGS_basic_type  var_cas_min_as_basic = operand_48888->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)) ;
      { const GGS_basic_type _var_50412 = var_cas_min_as_basic ; // CAST instruction
        if (_var_50412.getPtr () != NULL) {
          macroValidPointer (_var_50412.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_50412.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_50412.getPtr ()) ;
            var_cas_tmp = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)) ;
          }else{
            var_cas_min_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1366)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER MINCYCLE value") COMMA_SOURCE_FILE_AT_LINE (1367)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$MIN_CYCLE$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1368)) ;
      var_cas_counters_cst.appendCString ("extern CONST(tpl_tick, OS_CONST) OSMINCYCLE") ;
      var_cas_counters_cst.dotAssign_operation (var_cas_name) ;
      var_cas_counters_cst.appendCString (";\n"
        "\n") ;
      const GGS_bool cond_51500 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_51500.isBuiltAndTrue ()) {
        GGS_counter_type  var_cas_type = operand_48888->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)) ;
        { const GGS_counter_type _var_51030 = var_cas_type ; // CAST instruction
          if (_var_51030.getPtr () != NULL) {
            macroValidPointer (_var_51030.getPtr ()) ;
            if (typeid (cPtr_software_counter) == typeid (* (_var_51030.getPtr ()))) {
              var_cas_tmp = GGS_string ("SOFTWARE_COUNTER") ;
            }else if (typeid (cPtr_hardware_counter) == typeid (* (_var_51030.getPtr ()))) {
              var_cas_tmp = GGS_string ("HARDWARE_COUNTER") ;
            }else{
              var_cas_type.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown COUNTER TYPE value") COMMA_SOURCE_FILE_AT_LINE (1381)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$COUNTER_KIND$"),  var_cas_tmp COMMA_SOURCE_FILE_AT_LINE (1382)) ;
        const GGS_bool cond_51242 = (operand_48888->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1384))).operator_isEqual (GGS_string ("SystemCounter")) ;
        if (cond_51242.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  GGS_string ("INVALID_OSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1385)) ;
        }else if (cond_51242.isBuiltAndFalse ()) {
          const GGS_bool cond_51464 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1387))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_51464.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_51355 = var_cas_app_for_obj ;
            if (temp_51355.isBuilt ()) {
              temp_51355 (HERE)->method_get (inLexique, operand_48888->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1389)) ;
            }
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1390)) ;
          }
        }
      }
      var_cas_counters_result = ((var_cas_counters_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_specific_code ;
  ::routine_generate_counter_specific (inLexique,  var_cas_counters,  var_cas_specific_code COMMA_SOURCE_FILE_AT_LINE (1399)) ;
  var_cas_counters_result.dotAssign_operation (var_cas_specific_code) ;
  GGS_string var_cas_counter_ids = GGS_string ("") ;
  const GGS_bool cond_52760 = gOption_goil_5F_options_autosar_5F_on.value () ;
  if (cond_52760.isBuiltAndTrue ()) {
    GGS_string var_cas_counter_table = GGS_string ("") ;
    {
      GGS_counter_map::cEnumerator enumerator_52017 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_52017 = enumerator_52017.nextObject () ;
      if ((operand_52017 != NULL)) {
        GGS_uint var_cas_n (true, 0) ;
        var_cas_counter_table = GGS_string ("#ifdef WITH_AUTOSAR\n") ;
        var_cas_counter_table.appendCString ("CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)\n") ;
        var_cas_counter_table.appendCString ("  tpl_counter_table[COUNTER_COUNT] = {\n") ;
        bool _foreach_loop_52017 ;
        do{
          macroValidPointer (operand_52017) ;
          var_cas_counter_table.appendCString ("    &") ;
          var_cas_counter_table.dotAssign_operation (operand_52017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1415))) ;
          var_cas_counter_table.appendCString ("_counter_desc") ;
          var_cas_counter_ids.appendCString ("#define ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1416))) ;
          var_cas_counter_ids.appendCString ("_id ") ;
          var_cas_counter_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1416))) ;
          var_cas_counter_ids.appendCString ("\n") ;
          var_cas_counter_ids.appendCString ("CONST(CounterType, AUTOMATIC) ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
          var_cas_counter_ids.appendCString (" = ") ;
          var_cas_counter_ids.dotAssign_operation (operand_52017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417))) ;
          var_cas_counter_ids.appendCString ("_id;") ;
          var_cas_n.mValue ++ ;
          operand_52017 = enumerator_52017.nextObject () ;
          _foreach_loop_52017 = ((operand_52017 != NULL)) ;
          if (_foreach_loop_52017) {
            var_cas_counter_table.appendCString (",\n") ;
            var_cas_counter_ids.appendCString ("\n") ;
          }
        }while (_foreach_loop_52017) ;
        var_cas_counter_table.appendCString ("\n"
          "};\n"
          "#endif\n") ;
      }
    }
    var_cas_counters_result.dotAssign_operation (var_cas_counter_table) ;
  }
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$COUNTER_COUNT$"),  var_cas_counters.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)) COMMA_SOURCE_FILE_AT_LINE (1425)) ;
  ::routine_doReplace (inLexique,  var_cas_header,  GGS_string ("$COUNTERS$"),  var_cas_counters_cst COMMA_SOURCE_FILE_AT_LINE (1426)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERIDS$"),  var_cas_counter_ids COMMA_SOURCE_FILE_AT_LINE (1427)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$COUNTERS$"),  var_cas_counters_result COMMA_SOURCE_FILE_AT_LINE (1428)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_counters\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_resources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_resources (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_resources,
                                GGS_prio_map   var_cas_rez_prio,
                                GGS_string_map   var_cas_rez_comments,
                                GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("resource") COMMA_SOURCE_FILE_AT_LINE (1443)) ;
  GGS_string var_cas_tpl_internal_resource = function_template_string (inLexique, GGS_string ("code"), GGS_string ("internal_resource") COMMA_SOURCE_FILE_AT_LINE (1444)) ;
  GGS_string var_cas_resources_result = GGS_string ("") ;
  GGS_stringset  var_cas_regular_rez = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_resource_map::cEnumerator enumerator_53691 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_53691 = NULL ;
    while (((operand_53691 = enumerator_53691.nextObject ()))) {
      macroValidPointer (operand_53691) ;
      GGS_string var_cas_result ;
      GGS_string var_cas_name = operand_53691->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1451)) ;
      GGS_resource_property_obj  var_cas_rez_prop ;
      var_cas_rez_prop = operand_53691->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1454)) ;
      GGS_uint  var_cas_prio ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_10 ;
      const GGS_prio_map  temp_53972 = var_cas_rez_prio ;
      if (temp_53972.isBuilt ()) {
        temp_53972 (HERE)->method_get (inLexique, operand_53691->mKey, var_cas_prio, automatic_var_10 COMMA_SOURCE_FILE_AT_LINE (1458)) ;
      }
      const GGS_string_map  temp_54024 = var_cas_rez_comments ;
      if (temp_54024.isBuilt ()) {
        temp_54024 (HERE)->method_get (inLexique, operand_53691->mKey, var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      }
      { const GGS_resource_property_obj _var_54520 = var_cas_rez_prop ; // CAST instruction
        if (_var_54520.getPtr () != NULL) {
          macroValidPointer (_var_54520.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54520.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54520.getPtr ()))) {
            var_cas_result = var_cas_tpl_resource ;
            var_cas_regular_rez.addAssign_operation (var_cas_name) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54520.getPtr ()))) {
            var_cas_result = var_cas_tpl_internal_resource ;
          }else{
            var_cas_result = GGS_string ("") ;
            operand_53691->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Unknown property found") COMMA_SOURCE_FILE_AT_LINE (1473)) ;
          }
        }
      }
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE_NAME$"),  operand_53691->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1475)) COMMA_SOURCE_FILE_AT_LINE (1475)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$RESOURCE$"),  (operand_53691->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1476))).operator_concat (GGS_string ("_rez_desc")) COMMA_SOURCE_FILE_AT_LINE (1476)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$PRIORITY$"),  var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1478)) COMMA_SOURCE_FILE_AT_LINE (1478)) ;
      ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$USAGE$"),  var_cas_usage COMMA_SOURCE_FILE_AT_LINE (1479)) ;
      const GGS_bool cond_55054 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_55054.isBuiltAndTrue ()) {
        const GGS_bool cond_55038 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1482))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_55038.isBuiltAndTrue ()) {
          GGS_string var_cas_app_name ;
          const GGS_string_map  temp_54936 = var_cas_app_for_obj ;
          if (temp_54936.isBuilt ()) {
            temp_54936 (HERE)->method_get (inLexique, operand_53691->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (1484)) ;
          }
          ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (1485)) ;
        }
      }
      var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_result) ;
    }
  }
  GGS_string var_cas_rez_ids = GGS_string ("") ;
  GGS_string var_cas_rez_imp = GGS_string ("") ;
  {
      GGS_uint var_cas_n (true, 0) ;
    GGS_stringset::cEnumerator enumerator_55245 (var_cas_regular_rez, true) ;
    while (enumerator_55245.hasCurrentObject ()) {
      var_cas_rez_ids.appendCString ("#define ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55245._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id ") ;
      var_cas_rez_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1497))) ;
      var_cas_rez_ids.appendCString ("\n") ;
      var_cas_rez_ids.appendCString ("CONST(ResourceType, AUTOMATIC) ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55245._key (HERE)) ;
      var_cas_rez_ids.appendCString (" = ") ;
      var_cas_rez_ids.dotAssign_operation (enumerator_55245._key (HERE)) ;
      var_cas_rez_ids.appendCString ("_id;\n") ;
      var_cas_n.mValue ++ ;
      enumerator_55245.next () ;
    }
  }
  var_cas_regular_rez.addAssign_operation (GGS_string ("res_sched")) ;
  {
    GGS_stringset::cEnumerator enumerator_55481 (var_cas_regular_rez, true) ;
    if (enumerator_55481 .hasCurrentObject ()) {
      GGS_uint var_cas_n (true, 0) ;
      var_cas_rez_imp = GGS_string ("CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)\n"
        "  tpl_resource_table[RESOURCE_COUNT] = {\n") ;
      bool _foreach_loop_55481 ;
      do{
        var_cas_rez_imp.appendCString ("  &") ;
        var_cas_rez_imp.dotAssign_operation (enumerator_55481._key (HERE)) ;
        var_cas_rez_imp.appendCString ("_rez_desc") ;
        var_cas_n.mValue ++ ;
        enumerator_55481.next () ;
        _foreach_loop_55481 = (enumerator_55481 .hasCurrentObject ()) ;
        if (_foreach_loop_55481) {
          var_cas_rez_imp.appendCString (",\n") ;
        }
      }while (_foreach_loop_55481) ;
      var_cas_rez_imp.appendCString ("\n"
        "};\n") ;
    }
  }
  var_cas_resources_result = ((var_cas_resources_result).operator_concat (GGS_string ("\n"))).operator_concat (var_cas_rez_imp) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$REZIDS$"),  var_cas_rez_ids COMMA_SOURCE_FILE_AT_LINE (1516)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_header,  GGS_string ("$RESOURCE_COUNT$"),  var_cas_regular_rez.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1517)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1517)) COMMA_SOURCE_FILE_AT_LINE (1517)) ;
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$RESOURCES$"),  var_cas_resources_result COMMA_SOURCE_FILE_AT_LINE (1518)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_events"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_events (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events,
                                GGS_task_map   var_cas_tasks,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_events at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_event = function_template_string (inLexique, GGS_string ("code"), GGS_string ("event") COMMA_SOURCE_FILE_AT_LINE (1530)) ;
  GGS_string var_cas_imp_result = GGS_string ("") ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_task_mask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasks_for_event = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_57218 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_57218 = NULL ;
    while (((operand_57218 = enumerator_57218.nextObject ()))) {
      macroValidPointer (operand_57218) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_57218->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_57391 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_57391 = NULL ;
        while (((operand_57391 = enumerator_57391.nextObject ()))) {
          macroValidPointer (operand_57391) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_57468 = var_cas_events ;
          if (temp_57468.isBuilt ()) {
            temp_57468 (HERE)->method_get (inLexique, operand_57391->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (1557)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1559)) ;
          { const GGS_event_mask_obj _var_58358 = var_cas_mask_obj ; // CAST instruction
            if (_var_58358.getPtr () != NULL) {
              macroValidPointer (_var_58358.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_58358.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_58358.getPtr ()) ;
                const GGS_bool cond_57809 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_57809.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1564)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1564))) ;
                }else if (cond_57809.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1566)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_57391->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1566)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (1567)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_58358.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_58208 = var_cas_evt_usage.reader_hasKey (inLexique, operand_57391->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1570)) COMMA_SOURCE_FILE_AT_LINE (1570)) ;
                if (cond_58208.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_57391->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1572)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1573)) ;
                }else if (cond_58208.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_57391->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (1577)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_ref_tasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_58568 = var_cas_tasks_for_event.reader_hasKey (inLexique, operand_57391->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)) COMMA_SOURCE_FILE_AT_LINE (1582)) ;
          if (cond_58568.isBuiltAndTrue ()) {
            var_cas_tasks_for_event.modifier_delete (inLexique, operand_57391->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1584)) ;
          }
          var_cas_ref_tasks.addAssign_operation (operand_57218->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1586))) ;
          var_cas_tasks_for_event.modifier_add (inLexique, operand_57391->mValue, var_cas_ref_tasks COMMA_SOURCE_FILE_AT_LINE (1587)) ;
        }
      }
      var_cas_task_mask.modifier_insert_mask (inLexique, operand_57218->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (1590)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_58826 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_58826 = NULL ;
    while (((operand_58826 = enumerator_58826.nextObject ()))) {
      macroValidPointer (operand_58826) ;
      GGS_event_mask_obj  var_cas_evt_mask ;
      var_cas_evt_mask = operand_58826->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) ;
      { const GGS_event_mask_obj _var_59264 = var_cas_evt_mask ; // CAST instruction
        if (_var_59264.getPtr () != NULL) {
          macroValidPointer (_var_59264.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_59264.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_59264.getPtr ()) ;
            GGS_string var_cas_result = var_cas_tpl_event ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_58826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1602))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1602)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_58826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)) COMMA_SOURCE_FILE_AT_LINE (1603)) ;
            ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) COMMA_SOURCE_FILE_AT_LINE (1604)) ;
            var_cas_imp_result.dotAssign_operation (var_cas_result) ;
            var_cas_imp_result.appendCString ("\n") ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sort_evts = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_59425 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_59425 = NULL ;
    while (((operand_59425 = enumerator_59425.nextObject ()))) {
      macroValidPointer (operand_59425) ;
      var_cas_sort_evts.addAssign_operation (operand_59425->mKey, operand_59425->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_59595 (var_cas_sort_evts, true) ;
    const GGS_sorted_events::cElement * operand_59595 = NULL ;
    while (((operand_59595 = enumerator_59595.nextObject ()))) {
      macroValidPointer (operand_59595) ;
      const GGS_bool cond_60930 = var_cas_tasks_for_event.reader_hasKey (inLexique, operand_59595->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1626)) COMMA_SOURCE_FILE_AT_LINE (1626)) ;
      if (cond_60930.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_59707 = var_cas_tasks_for_event ;
        if (temp_59707.isBuilt ()) {
          temp_59707 (HERE)->method_get (inLexique, operand_59595->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (1628)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_59774 (var_cas_tasks, true) ;
          while (enumerator_59774.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_59837 = var_cas_task_mask ;
            if (temp_59837.isBuilt ()) {
              temp_59837 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_59774._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1632)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_59774.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_60164 = GGS_uint (32U) ;
        GGS_bool _condition_60164 (_variant_60164.isBuilt (), true) ;
        while (_condition_60164.isBuiltAndTrue ()) {
          _condition_60164 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_60164.isBuiltAndTrue ()) {
            if (_variant_60164.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1641)) ;
              _condition_60164 = GGS_bool (false) ;
            }else{
              _variant_60164.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
            }
          }
        }
        const GGS_bool cond_60335 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1642))) ;
        if (cond_60335.isBuiltAndTrue ()) {
          operand_59595->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_59595->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1643)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (1644)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_60459 (var_cas_tasks, true) ;
          while (enumerator_60459.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_task_mask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60459._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1649)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_task_mask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_60459._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (1651)) ;
            enumerator_60459.next () ;
          }
        }
        GGS_string var_cas_result = var_cas_tpl_event ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT$"),  (operand_59595->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1655))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (1655)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_NAME$"),  operand_59595->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1656)) COMMA_SOURCE_FILE_AT_LINE (1656)) ;
        ::routine_doReplace (inLexique,  var_cas_result,  GGS_string ("$EVENT_MASK$"),  var_cas_bit.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)) COMMA_SOURCE_FILE_AT_LINE (1657)) ;
        var_cas_imp_result.dotAssign_operation (var_cas_result) ;
        var_cas_imp_result.appendCString ("\n") ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$EVENTS$"),  var_cas_imp_result COMMA_SOURCE_FILE_AT_LINE (1736)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_events\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_ready_list (C_Compiler & inLexique,
                                GGS_os_obj   var_cas_os,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list   var_cas_ready_list,
                                GGS_string & var_cas_obj_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_fifo = GGS_string ("") ;
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_os.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1755)) ;
  const GGS_bool cond_64343 = var_cas_config.reader_hasKey (inLexique, GGS_string ("POWEROF2QUEUE") COMMA_SOURCE_FILE_AT_LINE (1757)) ;
  if (cond_64343.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_64102 = var_cas_config ;
    if (temp_64102.isBuilt ()) {
      temp_64102 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_HERE), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1759)) ;
    }
    { const GGS_basic_type _var_64329 = var_cas_pw ; // CAST instruction
      if (_var_64329.getPtr () != NULL) {
        macroValidPointer (_var_64329.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64329.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_64329.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1762)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1764)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1765)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_64371 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_64371 = NULL ;
    while (((operand_64371 = enumerator_64371.nextObject ()))) {
      macroValidPointer (operand_64371) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_64600 = var_cas_powerof2 ;
      if (cond_64600.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_64581 = GGS_uint (32U) ;
        GGS_bool _condition_64581 (_variant_64581.isBuilt (), true) ;
        while (_condition_64581.isBuiltAndTrue ()) {
          _condition_64581 = (operand_64371->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_64581.isBuiltAndTrue ()) {
            if (_variant_64581.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1775)) ;
              _condition_64581 = GGS_bool (false) ;
            }else{
              _variant_64581.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1774)) ;
            }
          }
        }
      }else if (cond_64600.isBuiltAndFalse ()) {
        var_cas_max_size = operand_64371->fifosize ;
      }
      var_cas_fifo.appendCString ("tpl_proc_id tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1779))) ;
      var_cas_fifo.appendCString ("_fifo[") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1779))) ;
      var_cas_fifo.appendCString ("];\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1780)) ;
    }
  }
  var_cas_fifo.appendCString ("\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_fifo_state tpl_fifo_rw[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1786)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1786))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  GGS_uint _variant_65070 = var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1787)) ;
  GGS_bool _condition_65070 (_variant_65070.isBuilt (), true) ;
  while (_condition_65070.isBuiltAndTrue ()) {
    _condition_65070 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_65070.isBuiltAndTrue ()) {
      if (_variant_65070.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1793)) ;
        _condition_65070 = GGS_bool (false) ;
      }else{
        _variant_65070.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_fifo.appendCString ("    { 0 , 0 }") ;
        const GGS_bool cond_65020 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
        if (cond_65020.isBuiltAndTrue ()) {
          var_cas_fifo.appendCString (",") ;
        }
        var_cas_fifo.appendCString ("\n") ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1792)) ;
      }
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_prio = GGS_uint (0U) ;
  var_cas_fifo.appendCString ("tpl_priority_level tpl_ready_list[") ;
  var_cas_fifo.dotAssign_operation (var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1797)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1797))) ;
  var_cas_fifo.appendCString ("] = {\n") ;
  {
    GGS_prio_list::cEnumerator enumerator_65221 (var_cas_ready_list, true) ;
    const GGS_prio_list::cElement * operand_65221 = NULL ;
    while (((operand_65221 = enumerator_65221.nextObject ()))) {
      macroValidPointer (operand_65221) ;
      GGS_uint  var_cas_max_size ;
      const GGS_bool cond_65474 = var_cas_powerof2 ;
      if (cond_65474.isBuiltAndTrue ()) {
        var_cas_max_size = GGS_uint (1U) ;
        GGS_uint _variant_65431 = GGS_uint (32U) ;
        GGS_bool _condition_65431 (_variant_65431.isBuilt (), true) ;
        while (_condition_65431.isBuiltAndTrue ()) {
          _condition_65431 = (operand_65221->fifosize).operator_strictSup (var_cas_max_size) ;
          if (_condition_65431.isBuiltAndTrue ()) {
            if (_variant_65431.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1805)) ;
              _condition_65431 = GGS_bool (false) ;
            }else{
              _variant_65431.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_max_size = var_cas_max_size.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1804)) ;
            }
          }
        }
        var_cas_max_size.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1806)) ;
      }else if (cond_65474.isBuiltAndFalse ()) {
        var_cas_max_size = operand_65221->fifosize ;
      }
      var_cas_fifo.appendCString ("    { tpl_priority_") ;
      var_cas_fifo.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1810))) ;
      var_cas_fifo.appendCString ("_fifo , ") ;
      var_cas_fifo.dotAssign_operation (var_cas_max_size.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1810))) ;
      var_cas_fifo.appendCString (" }") ;
      const GGS_bool cond_65656 = (var_cas_prio).operator_strictInf (var_cas_max_prio) ;
      if (cond_65656.isBuiltAndTrue ()) {
        var_cas_fifo.appendCString (",") ;
      }
      var_cas_fifo.appendCString ("\n") ;
      var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1813)) ;
    }
  }
  var_cas_fifo.appendCString ("};\n"
    "\n") ;
  var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$READY_LIST$"), var_cas_fifo COMMA_SOURCE_FILE_AT_LINE (1817)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIO_LEVEL_COUNT$"), var_cas_max_prio.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1818)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1818)) COMMA_SOURCE_FILE_AT_LINE (1818)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_timestamp = GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) ;
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (1834)) ;
  const GGS_bool cond_75412 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_75412.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.value () ;
    const GGS_bool cond_75324 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_75324.isBuiltAndTrue ()) {
      GGS_string var_cas_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_header") COMMA_SOURCE_FILE_AT_LINE (1839)) ;
      GGS_string var_cas_obj_header = function_template_string (inLexique, GGS_string ("code"), GGS_string ("obj_header") COMMA_SOURCE_FILE_AT_LINE (1840)) ;
      GGS_string var_cas_implementation = function_template_string (inLexique, GGS_string ("code"), GGS_string ("app_implementation") COMMA_SOURCE_FILE_AT_LINE (1841)) ;
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (1842)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1845)) ;
      const GGS_bool cond_66864 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1846))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_66864.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1847)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (1850)) ;
      const GGS_bool cond_67047 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1851))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_67047.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          cfg_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (1852)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1855)) ;
      GGS_prefix_map  var_cas_prefix = GGS_prefix_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_init_prefixes (inLexique,  var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (1858)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_tasks_actual_prio ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1864)),  var_cas_tasks_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (1863)) ;
      GGS_prio_map  var_cas_isrs_actual_prio ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1870)),  var_cas_isrs_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (1869)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_string_map  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1878)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1879)),  var_cas_tasks_actual_prio,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1881)),  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (1877)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_tasks_actual_prio,  var_cas_isrs_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (1887)) ;
      GGS_string_map  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1897)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (1896)) ;
      ::routine_generate_flags (inLexique,  var_cas_generated_conf,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1902)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1903)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1904)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1900)) ;
      const GGS_com  temp_68480 = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1907)) ;
      if (temp_68480.isBuilt ()) {
        temp_68480 (HERE)->method_generate (inLexique, var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1907)) ;
      }
      ::routine_generate_events (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1910)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1911)),  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1909)) ;
      ::routine_generate_counters (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1916)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1915)) ;
      ::routine_generate_alarms (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1923)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1922)) ;
      ::routine_generate_tasks (inLexique,  var_cas_cfg,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1931)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1932)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1933)),  var_cas_tasks_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1929)) ;
      ::routine_generate_isrs (inLexique,  var_cas_cfg,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1942)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1943)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1944)),  var_cas_isrs_actual_prio,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1940)) ;
      ::routine_generate_proc_table (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1954)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1955)),  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1953)) ;
      ::routine_generate_mp (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_header,  var_cas_implementation,  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1960)) ;
      ::routine_generate_resources (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1968)),  var_cas_rez_actual_prio,  var_cas_rez_comments,  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1967)) ;
      ::routine_generate_messages (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1977)),  var_cas_prefix,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1976)) ;
      ::routine_generate_network_messages (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1984)),  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1985)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1983)) ;
      const GGS_bool cond_71343 = gOption_goil_5F_options_autosar_5F_on.value () ;
      if (cond_71343.isBuiltAndTrue ()) {
        ::routine_generate_schedule_tables (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1992)),  var_cas_app_for_obj,  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (1991)) ;
        ::routine_generate_timing_prot (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1998)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1999)),  var_cas_obj_header COMMA_SOURCE_FILE_AT_LINE (1997)) ;
        ::routine_generate_apps (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2002)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2003)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2004)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2005)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2006)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2007)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2008)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2001)) ;
        ::routine_generate_trusted_functions (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2013)),  var_cas_header,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2012)) ;
      }
      ::routine_generate_ready_list (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2020)),  var_cas_max_prio,  var_cas_ready_list,  var_cas_obj_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2019)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (2027)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (2028)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (2029)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (2030)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (2031)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (2032)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (2033)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (2026)) ;
      ::routine_generate_it_table (inLexique,  var_cas_cfg,  var_cas_generated_conf,  var_cas_cpu,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (2037)) ;
      ::routine_generate_link_script (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2043)) ;
      ::routine_generate_memmap (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2046)) ;
      GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (2053)) ;
      GGS_string var_cas_header_file = GGS_string ("tpl_os_generated_configuration.h") ;
      GGS_string var_cas_obj_header_file = GGS_string ("tpl_app_objects.h") ;
      GGS_string var_cas_implementation_file = GGS_string ("tpl_os_generated_configuration.c") ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2060)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2061)) ;
      var_cas_header = var_cas_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2062)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2063)) ;
      var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2064)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$HEADER$"), var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2065)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ_HEADER$"), var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2066)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$IMPLEMENTATION$"), var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2067)) ;
      var_cas_implementation = var_cas_implementation.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMESTAMP$"), var_cas_timestamp COMMA_SOURCE_FILE_AT_LINE (2068)) ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_header_file) ;
      var_cas_obj_header_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_obj_header_file) ;
      var_cas_implementation_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_implementation_file) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_75309 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_75309.isBuiltAndTrue ()) {
        const GGS_bool cond_73875 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_73875.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2079)) ;
        }
        const GGS_string temp_73929 = var_cas_header ;
        if (temp_73929.isBuilt ()) {
          temp_73929 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_header_file COMMA_SOURCE_FILE_AT_LINE (2081)) ;
        }
        const GGS_bool cond_74073 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74073.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_obj_header_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2083)) ;
        }
        const GGS_string temp_74131 = var_cas_obj_header ;
        if (temp_74131.isBuilt ()) {
          temp_74131 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_obj_header_file COMMA_SOURCE_FILE_AT_LINE (2085)) ;
        }
        const GGS_bool cond_74283 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74283.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_implementation_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2087)) ;
        }
        const GGS_string temp_74345 = var_cas_implementation ;
        if (temp_74345.isBuilt ()) {
          temp_74345 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_implementation_file COMMA_SOURCE_FILE_AT_LINE (2089)) ;
        }
        const GGS_bool cond_74492 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
        if (cond_74492.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (2091)) ;
        }
        const GGS_string temp_74545 = var_cas_types ;
        if (temp_74545.isBuilt ()) {
          temp_74545 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (2093)) ;
        }
        const GGS_bool cond_75249 = gOption_goil_5F_options_generate_5F_makefile.value () ;
        if (cond_75249.isBuiltAndTrue ()) {
          GGS_string var_cas_makefile_dir = var_cas_directory.reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2096)) ;
          const GGS_bool cond_74831 = (var_cas_makefile_dir).operator_isEqual (GGS_string ("")) ;
          if (cond_74831.isBuiltAndTrue ()) {
            var_cas_makefile_dir = GGS_string (".") ;
          }
          const GGS_bool cond_74979 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
          if (cond_74979.isBuiltAndTrue ()) {
            inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_makefile_dir)).operator_concat (GGS_string ("/makefile\n")) COMMA_SOURCE_FILE_AT_LINE (2101)) ;
          }
          ::routine_generate_makefile (inLexique,  var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (2104)),  var_cas_makefile_dir,  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (2107)).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (2107)) COMMA_SOURCE_FILE_AT_LINE (2103)) ;
        }
        ::routine_generate_description (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (2110)) ;
      }
    }else if (cond_75324.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2113)) ;
    }
  }else if (cond_75412.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (2116)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

