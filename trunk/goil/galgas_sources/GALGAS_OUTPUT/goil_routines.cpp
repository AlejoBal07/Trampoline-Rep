//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_routines.cpp'                          *
//                        Generated by version 1.9.3                         *
//                    november 10th, 2009, at 11h51'45"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 598
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_routines.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_routines.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of function "project_name"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_project_name (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_project_name at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_directory ;
  var_cas_directory = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (8)) ;
  const GGS_bool cond_380 = (gOption_goil_5F_options_project_5F_dir.value ()).operator_isNotEqual (GGS_string ("")) ;
  if (cond_380.isBuiltAndTrue ()) {
    var_cas_directory = gOption_goil_5F_options_project_5F_dir.value () ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_project_name\n") ;
  #endif
  return var_cas_directory ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of function "oil_dir"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_oil_dir (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_oil_dir at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_dir ;
  var_cas_dir = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (15)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_oil_dir\n") ;
  #endif
  return var_cas_dir ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of function "arch"                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_arch (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_arch at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_arch_name ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.value ().reader_componentsSeparatedByString (inLexique, GGS_string ("/") COMMA_SOURCE_FILE_AT_LINE (23)) ;
  const GGS_stringlist  temp_816 = var_cas_components ;
  if (temp_816.isBuilt ()) {
    temp_816 (HERE)->method_first (inLexique, var_cas_arch_name COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_arch\n") ;
  #endif
  return var_cas_arch_name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of function "chip"                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_chip (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_chip at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_chip_name ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.value ().reader_componentsSeparatedByString (inLexique, GGS_string ("/") COMMA_SOURCE_FILE_AT_LINE (32)) ;
  const GGS_bool cond_1219 = (var_cas_components.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (33))).operator_strictSup (GGS_uint (1U)) ;
  if (cond_1219.isBuiltAndTrue ()) {
    var_cas_chip_name = var_cas_components.reader_mValueAtIndex (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (34)) ;
  }else if (cond_1219.isBuiltAndFalse ()) {
    var_cas_chip_name = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_chip\n") ;
  #endif
  return var_cas_chip_name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of function "board"                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_board (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_board at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_board_name ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.value ().reader_componentsSeparatedByString (inLexique, GGS_string ("/") COMMA_SOURCE_FILE_AT_LINE (44)) ;
  const GGS_bool cond_1550 = (var_cas_components.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (45))).operator_strictSup (GGS_uint (2U)) ;
  if (cond_1550.isBuiltAndTrue ()) {
    var_cas_board_name = var_cas_components.reader_mValueAtIndex (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  }else if (cond_1550.isBuiltAndFalse ()) {
    var_cas_board_name = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_board\n") ;
  #endif
  return var_cas_board_name ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "add_path_component"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_add_path_component (C_Compiler & inLexique,
                                GGS_string  var_cas_path,
                                GGS_string  var_cas_component COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_add_path_component at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_new_path ;
  const GGS_bool cond_1844 = (var_cas_path.reader_characterAtIndex (inLexique, var_cas_path.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (60)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (60)) COMMA_SOURCE_FILE_AT_LINE (60))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_1844.isBuiltAndTrue ()) {
    var_cas_new_path = ((var_cas_path).operator_concat (GGS_string ("/"))).operator_concat (var_cas_component) ;
  }else if (cond_1844.isBuiltAndFalse ()) {
    var_cas_new_path = (var_cas_path).operator_concat (var_cas_component) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_add_path_component\n") ;
  #endif
  return var_cas_new_path ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of function "root_templates_directory"            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_root_templates_directory (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_root_templates_directory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl_dir ;
  const GGS_bool cond_2069 = (gOption_goil_5F_options_template_5F_dir.value ()).operator_isNotEqual (GGS_string ("")) ;
  if (cond_2069.isBuiltAndTrue ()) {
    var_cas_tpl_dir = gOption_goil_5F_options_template_5F_dir.value () ;
  }else if (cond_2069.isBuiltAndFalse ()) {
    var_cas_tpl_dir = GGS_string::constructor_stringWithEnvironmentVariableOrEmpty (inLexique, GGS_string ("GOIL_TEMPLATES") COMMA_HERE) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_root_templates_directory\n") ;
  #endif
  return var_cas_tpl_dir ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "templates_directory"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_templates_directory (C_Compiler & inLexique,
                                GGS_string  var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_templates_directory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_temp_dir ;
  var_cas_temp_dir = function_root_templates_directory (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
  const GGS_bool cond_3029 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_3029.isBuiltAndTrue ()) {
    var_cas_temp_dir = function_add_path_component (inLexique, var_cas_temp_dir, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (80)) ;
    var_cas_temp_dir = var_cas_temp_dir.reader_unixPathWithNativePath (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
    const GGS_bool cond_2893 = (var_cas_temp_dir.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (83))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_2893.isBuiltAndTrue ()) {
      GGS_string var_cas_curdir = GGS_string::constructor_stringWithCurrentDirectory (inLexique COMMA_HERE) ;
      const GGS_bool cond_2826 = ((var_cas_temp_dir.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (85))).operator_isEqual (GGS_char (TO_UNICODE ('.')))).operator_and ((var_cas_temp_dir.reader_characterAtIndex (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (85))).operator_isEqual (GGS_char (TO_UNICODE ('/')))) ;
      if (cond_2826.isBuiltAndTrue ()) {
        var_cas_temp_dir = var_cas_temp_dir.reader_stringByRemovingCharacterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (86)).reader_stringByRemovingCharacterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (86)) ;
      }
      var_cas_temp_dir = ((var_cas_curdir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_dir) ;
    }
    const GGS_bool cond_3016 = (var_cas_temp_dir.reader_characterAtIndex (inLexique, var_cas_temp_dir.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (90)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (90)) COMMA_SOURCE_FILE_AT_LINE (90))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_3016.isBuiltAndTrue ()) {
      var_cas_temp_dir.appendCString ("/") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_templates_directory\n") ;
  #endif
  return var_cas_temp_dir ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of function "template_string_if_exist"            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_template_string_if_exist (C_Compiler & inLexique,
                                GGS_string  var_cas_prefix,
                                GGS_string  var_cas_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_template_string_if_exist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  GGS_string var_cas_target_platform ;
  GGS_string var_cas_targ_tpl = GGS_string ("") ;
  GGS_string var_cas_temp_dir ;
  var_cas_temp_dir = function_templates_directory (inLexique, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (109)) ;
  GGS_string var_cas_temp_name = (var_cas_obj).operator_concat (GGS_string (".tpl")) ;
  var_cas_targ_tpl = (((((((var_cas_temp_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (114)))).operator_concat (GGS_string ("/"))).operator_concat (function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (114)))).operator_concat (GGS_string ("/"))).operator_concat (function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (114)))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_name) ;
  const GGS_bool cond_3668 = var_cas_targ_tpl.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (115)) ;
  if (cond_3668.isBuiltAndTrue ()) {
    var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
  }else if (cond_3668.isBuiltAndFalse ()) {
    var_cas_targ_tpl = (((((var_cas_temp_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (118)))).operator_concat (GGS_string ("/"))).operator_concat (function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (118)))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_name) ;
    const GGS_bool cond_3834 = var_cas_targ_tpl.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
    if (cond_3834.isBuiltAndTrue ()) {
      var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
    }else if (cond_3834.isBuiltAndFalse ()) {
      var_cas_targ_tpl = (((var_cas_temp_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (122)))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_name) ;
      const GGS_bool cond_3997 = var_cas_targ_tpl.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
      if (cond_3997.isBuiltAndTrue ()) {
        var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
      }else if (cond_3997.isBuiltAndFalse ()) {
        var_cas_targ_tpl = ((var_cas_temp_dir).operator_concat (GGS_string ("all_targets/"))).operator_concat (var_cas_temp_name) ;
        const GGS_bool cond_4208 = var_cas_targ_tpl.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (128)) ;
        if (cond_4208.isBuiltAndTrue ()) {
          var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
        }else if (cond_4208.isBuiltAndFalse ()) {
          var_cas_tpl = GGS_string ("") ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_template_string_if_exist\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "template_string"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_template_string (C_Compiler & inLexique,
                                GGS_string  var_cas_prefix,
                                GGS_string  var_cas_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_template_string at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  var_cas_tpl = function_template_string_if_exist (inLexique, var_cas_prefix, var_cas_obj COMMA_SOURCE_FILE_AT_LINE (142)) ;
  const GGS_bool cond_4715 = (var_cas_tpl).operator_isEqual (GGS_string ("")) ;
  if (cond_4715.isBuiltAndTrue ()) {
    GGS_string var_cas_target_platform = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) ;
    GGS_string var_cas_temp_dir ;
    var_cas_temp_dir = function_templates_directory (inLexique, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (146)) ;
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("No template found for ")).operator_concat (var_cas_obj)).operator_concat (GGS_string (" (searched in "))).operator_concat (var_cas_temp_dir)).operator_concat (var_cas_target_platform)).operator_concat (GGS_string (" and in "))).operator_concat (var_cas_temp_dir)).operator_concat (GGS_string ("all_targets)")) COMMA_SOURCE_FILE_AT_LINE (149)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_template_string\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "config_file"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_config_file (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_config_file at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_cfg_file ;
  GGS_string var_cas_template_dir ;
  var_cas_template_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (155)) ;
  GGS_string var_cas_cfg = ((var_cas_template_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (156)))).operator_concat (GGS_string ("/target.cfg")) ;
  const GGS_bool cond_4971 = (var_cas_cfg.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (157))).operator_not () ;
  if (cond_4971.isBuiltAndTrue ()) {
    var_cas_cfg = GGS_string ("") ;
  }
  var_cas_cfg_file = GGS_lstring ::constructor_new (inLexique, var_cas_cfg, GGS_location (inLexique) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_config_file\n") ;
  #endif
  return var_cas_cfg_file ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "extra_config_file"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_extra_config_file (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_extra_config_file at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_cfg_file ;
  GGS_string var_cas_cfg = (function_oil_dir (inLexique COMMA_SOURCE_FILE_AT_LINE (165))).operator_concat (GGS_string ("/target.cfg")) ;
  const GGS_bool cond_5190 = (var_cas_cfg.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (166))).operator_not () ;
  if (cond_5190.isBuiltAndTrue ()) {
    var_cas_cfg = GGS_string ("") ;
  }
  var_cas_cfg_file = GGS_lstring ::constructor_new (inLexique, var_cas_cfg, GGS_location (inLexique) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_extra_config_file\n") ;
  #endif
  return var_cas_cfg_file ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of routine "prefix"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_prefix (C_Compiler & inLexique,
                                GGS_prefix_map   var_cas_p,
                                GGS_string  var_cas_key,
                                GGS_string & var_cas_val COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_prefix at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_lkey = GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE) ;
  GGS_string automatic_var_0 ;
  const GGS_prefix_map  temp_5376 = var_cas_p ;
  if (temp_5376.isBuilt ()) {
    temp_5376 (HERE)->method_prefix (inLexique, var_cas_lkey, var_cas_val, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (174)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_prefix\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "performReplace"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performReplace (C_Compiler & inLexique,
                                GGS_prefix_map   var_cas_p,
                                GGS_string  var_cas_key,
                                GGS_string  var_cas_name,
                                GGS_string & var_cas_res COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performReplace at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_lkey = GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE) ;
  GGS_string var_cas_prefix ;
  GGS_string var_cas_tag_to_rep ;
  const GGS_prefix_map  temp_5598 = var_cas_p ;
  if (temp_5598.isBuilt ()) {
    temp_5598 (HERE)->method_prefix (inLexique, var_cas_lkey, var_cas_prefix, var_cas_tag_to_rep COMMA_SOURCE_FILE_AT_LINE (181)) ;
  }
  var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, var_cas_tag_to_rep, (var_cas_prefix).operator_concat (var_cas_name) COMMA_SOURCE_FILE_AT_LINE (182)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performReplace\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "doReplace"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_doReplace (C_Compiler & inLexique,
                                GGS_string & var_cas_s,
                                GGS_string  var_cas_o,
                                GGS_string  var_cas_n COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_doReplace at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_s = var_cas_s.reader_stringByReplacingStringByString (inLexique, var_cas_o, var_cas_n COMMA_SOURCE_FILE_AT_LINE (186)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_doReplace\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "do_replace_default"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_do_replace_default (C_Compiler & inLexique,
                                GGS_string & var_cas_s,
                                GGS_string  var_cas_o,
                                GGS_string  var_cas_n,
                                GGS_string  var_cas_d COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_do_replace_default at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_5988 = (var_cas_n).operator_isNotEqual (GGS_string ("")) ;
  if (cond_5988.isBuiltAndTrue ()) {
    var_cas_s = var_cas_s.reader_stringByReplacingStringByString (inLexique, var_cas_o, var_cas_n COMMA_SOURCE_FILE_AT_LINE (191)) ;
  }else if (cond_5988.isBuiltAndFalse ()) {
    var_cas_s = var_cas_s.reader_stringByReplacingStringByString (inLexique, var_cas_o, var_cas_d COMMA_SOURCE_FILE_AT_LINE (193)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_do_replace_default\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "replace_no_prefix"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_replace_no_prefix (C_Compiler & inLexique,
                                GGS_prefix_map   var_cas_p,
                                GGS_string  var_cas_key,
                                GGS_string  var_cas_name,
                                GGS_string & var_cas_res COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_replace_no_prefix at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_lkey = GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE) ;
  GGS_string var_cas_tag_to_rep ;
  GGS_string automatic_var_1 ;
  const GGS_prefix_map  temp_6259 = var_cas_p ;
  if (temp_6259.isBuilt ()) {
    temp_6259 (HERE)->method_prefix (inLexique, var_cas_lkey, automatic_var_1, var_cas_tag_to_rep COMMA_SOURCE_FILE_AT_LINE (201)) ;
  }
  var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, var_cas_tag_to_rep, var_cas_name COMMA_SOURCE_FILE_AT_LINE (202)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_replace_no_prefix\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "table_core"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_table_core (C_Compiler & inLexique,
                                GGS_string  var_cas_typename,
                                GGS_string  var_cas_varname,
                                GGS_string  var_cas_obj_prefix,
                                GGS_stringset   var_cas_names,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_table_core at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_n = GGS_uint (0U) ;
  {
    GGS_stringset::cEnumerator enumerator_6741 (var_cas_names, true) ;
    while (enumerator_6741.hasCurrentObject ()) {
      var_cas_header = (((((((var_cas_header).operator_concat (GGS_string ("#define "))).operator_concat (var_cas_varname)).operator_concat (GGS_string ("_id_of_"))).operator_concat (enumerator_6741._key (HERE))).operator_concat (GGS_string ("  "))).operator_concat (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).operator_concat (GGS_string ("\n")) ;
      var_cas_header = (((((((var_cas_header).operator_concat (GGS_string ("#define "))).operator_concat (enumerator_6741._key (HERE))).operator_concat (GGS_string ("  "))).operator_concat (var_cas_varname)).operator_concat (GGS_string ("_id_of_"))).operator_concat (enumerator_6741._key (HERE))).operator_concat (GGS_string ("\n")) ;
      var_cas_implementation = (((((var_cas_implementation).operator_concat (GGS_string ("    (tpl_"))).operator_concat (var_cas_typename)).operator_concat (GGS_string (" *)&"))).operator_concat (var_cas_obj_prefix)).operator_concat (enumerator_6741._key (HERE)) ;
      var_cas_n.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (232)) ;
      const GGS_bool cond_7392 = (var_cas_n).operator_isNotEqual (var_cas_names.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
      if (cond_7392.isBuiltAndTrue ()) {
        var_cas_implementation = (var_cas_implementation).operator_concat (GGS_string (",\n")) ;
      }else if (cond_7392.isBuiltAndFalse ()) {
        var_cas_implementation = (var_cas_implementation).operator_concat (GGS_string ("\n")) ;
      }
      enumerator_6741.next () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_table_core\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "obj_table"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_obj_table (C_Compiler & inLexique,
                                GGS_string  var_cas_typename,
                                GGS_string  var_cas_varname,
                                GGS_string  var_cas_prefix,
                                GGS_prefix_map   var_cas_p,
                                GGS_stringset   var_cas_names,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_obj_table at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_implementation = ((((((GGS_string ("tpl_")).operator_concat (var_cas_typename)).operator_concat (GGS_string (" *tpl_"))).operator_concat (var_cas_varname)).operator_concat (GGS_string ("_table["))).operator_concat (var_cas_varname.reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (252)))).operator_concat (GGS_string ("_COUNT] = {\n")) ;
  var_cas_header = GGS_string ("\n") ;
  GGS_string var_cas_obj_prefix ;
  GGS_string var_cas_obj_ids = GGS_string ("") ;
  ::routine_prefix (inLexique,  var_cas_p,  var_cas_prefix,  var_cas_obj_prefix COMMA_SOURCE_FILE_AT_LINE (257)) ;
  ::routine_table_core (inLexique,  var_cas_typename,  var_cas_varname,  var_cas_obj_prefix,  var_cas_names,  var_cas_header,  var_cas_implementation COMMA_SOURCE_FILE_AT_LINE (258)) ;
  var_cas_implementation = (var_cas_implementation).operator_concat (GGS_string ("};\n")) ;
  const GGS_bool cond_8269 = (var_cas_names.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (261))).operator_isEqual (GGS_uint (0U)) ;
  if (cond_8269.isBuiltAndTrue ()) {
    var_cas_implementation = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_obj_table\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "additional_int_key_required"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_additional_int_key_required (C_Compiler & inLexique,
                                const GGS_string  var_cas_key,
                                const GGS_ident_map   var_cas_others,
                                const GGS_lstring   var_cas_name,
                                GGS_uint  & var_cas_result COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_additional_int_key_required at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_result = GGS_uint (0U) ;
  const GGS_bool cond_9122 = var_cas_others.reader_hasKey (inLexique, var_cas_key COMMA_SOURCE_FILE_AT_LINE (273)) ;
  if (cond_9122.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_value ;
    const GGS_ident_map  temp_8619 = var_cas_others ;
    if (temp_8619.isBuilt ()) {
      temp_8619 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE), var_cas_value COMMA_SOURCE_FILE_AT_LINE (275)) ;
    }
    { const GGS_basic_type _var_9106 = var_cas_value ; // CAST instruction
      if (_var_9106.getPtr () != NULL) {
        macroValidPointer (_var_9106.getPtr ()) ;
        if (typeid (cPtr_uint64_class) == typeid (* (_var_9106.getPtr ()))) {
          const GGS_uint64_class var_cas_v (_var_9106.getPtr ()) ;
          var_cas_result = var_cas_v.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (278)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) ;
        }else if (typeid (cPtr_uint32_class) == typeid (* (_var_9106.getPtr ()))) {
          const GGS_uint32_class var_cas_v (_var_9106.getPtr ()) ;
          var_cas_result = var_cas_v.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (280)) ;
        }else if (typeid (cPtr_void_uint32_class) == typeid (* (_var_9106.getPtr ()))) {
          var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_key).operator_concat (GGS_string (" should have a default value")) COMMA_SOURCE_FILE_AT_LINE (283)) ;
        }else if (typeid (cPtr_auto_uint32_class) == typeid (* (_var_9106.getPtr ()))) {
          var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_key).operator_concat (GGS_string (" should not be an auto attribute")) COMMA_SOURCE_FILE_AT_LINE (285)) ;
        }else{
          var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_key).operator_concat (GGS_string (" should be an integer")) COMMA_SOURCE_FILE_AT_LINE (287)) ;
        }
      }
    }
  }else if (cond_9122.isBuiltAndFalse ()) {
    var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_key).operator_concat (GGS_string (" not defined")) COMMA_SOURCE_FILE_AT_LINE (290)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_additional_int_key_required\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "additional_string_key_required"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_additional_string_key_required (C_Compiler & inLexique,
                                const GGS_string  var_cas_key,
                                const GGS_ident_map   var_cas_others,
                                const GGS_lstring   var_cas_name,
                                GGS_string & var_cas_result COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_additional_string_key_required at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_result = GGS_string ("") ;
  const GGS_bool cond_9644 = var_cas_others.reader_hasKey (inLexique, var_cas_key COMMA_SOURCE_FILE_AT_LINE (300)) ;
  if (cond_9644.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_value ;
    const GGS_ident_map  temp_9423 = var_cas_others ;
    if (temp_9423.isBuilt ()) {
      temp_9423 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE), var_cas_value COMMA_SOURCE_FILE_AT_LINE (303)) ;
    }
    { const GGS_basic_type _var_9628 = var_cas_value ; // CAST instruction
      if (_var_9628.getPtr () != NULL) {
        macroValidPointer (_var_9628.getPtr ()) ;
        if (typeid (cPtr_string_class) == typeid (* (_var_9628.getPtr ()))) {
          const GGS_string_class var_cas_s (_var_9628.getPtr ()) ;
          var_cas_result = var_cas_s.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (306)) ;
        }else{
          var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_key).operator_concat (GGS_string (" should be a string")) COMMA_SOURCE_FILE_AT_LINE (309)) ;
        }
      }
    }
  }else if (cond_9644.isBuiltAndFalse ()) {
    var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("no ")).operator_concat (var_cas_key)).operator_concat (GGS_string (" specified")) COMMA_SOURCE_FILE_AT_LINE (312)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_additional_string_key_required\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "additional_bool_key_required"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_additional_bool_key_required (C_Compiler & inLexique,
                                const GGS_string  var_cas_key,
                                const GGS_ident_map   var_cas_others,
                                const GGS_lstring   var_cas_name,
                                GGS_bool & var_cas_result COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_additional_bool_key_required at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_result = GGS_bool (false) ;
  const GGS_bool cond_10178 = var_cas_others.reader_hasKey (inLexique, var_cas_key COMMA_SOURCE_FILE_AT_LINE (322)) ;
  if (cond_10178.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_value ;
    const GGS_ident_map  temp_9958 = var_cas_others ;
    if (temp_9958.isBuilt ()) {
      temp_9958 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE), var_cas_value COMMA_SOURCE_FILE_AT_LINE (325)) ;
    }
    { const GGS_basic_type _var_10162 = var_cas_value ; // CAST instruction
      if (_var_10162.getPtr () != NULL) {
        macroValidPointer (_var_10162.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_10162.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_10162.getPtr ()) ;
          var_cas_result = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (328)) ;
        }else{
          var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_key).operator_concat (GGS_string (" should be a boolean")) COMMA_SOURCE_FILE_AT_LINE (331)) ;
        }
      }
    }
  }else if (cond_10178.isBuiltAndFalse ()) {
    var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("no ")).operator_concat (var_cas_key)).operator_concat (GGS_string (" specified")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_additional_bool_key_required\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "add_to_stringset"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_to_stringset (C_Compiler & inLexique,
                                GGS_stringset  & var_cas_ss,
                                GGS_string  var_cas_new COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_to_stringset at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_10415 = var_cas_ss.reader_hasKey (inLexique, var_cas_new COMMA_SOURCE_FILE_AT_LINE (341)) ;
  if (cond_10415.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_new)).operator_concat (GGS_string ("' is already declared before")) COMMA_SOURCE_FILE_AT_LINE (343)) ;
  }else if (cond_10415.isBuiltAndFalse ()) {
    var_cas_ss.addAssign_operation (var_cas_new) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_to_stringset\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "file_in_path"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_file_in_path (C_Compiler & inLexique,
                                GGS_lstring  & var_cas_file_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_file_in_path at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_include_path = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, GGS_string ("GOIL_INCLUDE_PATH") COMMA_HERE) ;
  GGS_stringlist  var_cas_path_list = var_cas_include_path.reader_componentsSeparatedByString (inLexique, GGS_string (":") COMMA_SOURCE_FILE_AT_LINE (352)) ;
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_stringlist::cEnumerator enumerator_10734 (var_cas_path_list, true) ;
    const GGS_stringlist::cElement * operand_10734 = NULL ;
    while (((operand_10734 = enumerator_10734.nextObject ()))) {
      macroValidPointer (operand_10734) ;
      GGS_string var_cas_full_file_path = operand_10734->mValue ;
      const GGS_bool cond_10995 = (var_cas_full_file_path).operator_isNotEqual (GGS_string ("")) ;
      if (cond_10995.isBuiltAndTrue ()) {
        const GGS_bool cond_10978 = (var_cas_full_file_path.reader_characterAtIndex (inLexique, var_cas_full_file_path.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (357)).substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (357)) COMMA_SOURCE_FILE_AT_LINE (357))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
        if (cond_10978.isBuiltAndTrue ()) {
          var_cas_full_file_path.appendCString ("/") ;
        }
      }
      var_cas_full_file_path.dotAssign_operation (var_cas_file_name.ggs_string ()) ;
      const GGS_bool cond_11205 = (var_cas_full_file_path.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (362))).operator_and (var_cas_not_found) ;
      if (cond_11205.isBuiltAndTrue ()) {
        var_cas_file_name = GGS_lstring ::constructor_new (inLexique, var_cas_full_file_path, GGS_location (inLexique) COMMA_HERE) ;
        var_cas_not_found = GGS_bool (false) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_file_in_path\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "is_in_lstringlist"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_is_in_lstringlist (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_l,
                                GGS_lstring   var_cas_e,
                                GGS_lstring  & var_cas_f,
                                GGS_bool & var_cas_p COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_is_in_lstringlist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_p = GGS_bool (false) ;
  var_cas_f = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  {
    GGS_lstringlist::cEnumerator enumerator_11404 (var_cas_l, true) ;
    const GGS_lstringlist::cElement * operand_11404 = NULL ;
    while (((operand_11404 = enumerator_11404.nextObject ()))) {
      macroValidPointer (operand_11404) ;
      const GGS_bool cond_11498 = (operand_11404->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378))).operator_isEqual (var_cas_e.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378))) ;
      if (cond_11498.isBuiltAndTrue ()) {
        var_cas_p = GGS_bool (true) ;
        var_cas_f = operand_11404->mValue ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_is_in_lstringlist\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "add_lstring_unique"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_lstring_unique (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_l,
                                GGS_lstring   var_cas_e,
                                GGS_string  var_cas_att COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_lstring_unique at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_found ;
  GGS_lstring  var_cas_res ;
  ::routine_is_in_lstringlist (inLexique,  var_cas_l,  var_cas_e,  var_cas_res,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (392)) ;
  const GGS_bool cond_11803 = var_cas_found ;
  if (cond_11803.isBuiltAndTrue ()) {
    var_cas_e.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_att).operator_concat (GGS_string (" "))).operator_concat (var_cas_e.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (394)))).operator_concat (GGS_string (" has already be listed")) COMMA_SOURCE_FILE_AT_LINE (395)) ;
    var_cas_res.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was listed here") COMMA_SOURCE_FILE_AT_LINE (396)) ;
  }else if (cond_11803.isBuiltAndFalse ()) {
    var_cas_l.addAssign_operation (var_cas_e) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_lstring_unique\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "set_lstring_if_empty"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_set_lstring_if_empty (C_Compiler & inLexique,
                                GGS_lstring  & var_cas_s,
                                GGS_lstring   var_cas_ns,
                                GGS_string  var_cas_att COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_set_lstring_if_empty at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_11967 = (var_cas_s.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (406))).operator_isEqual (GGS_string ("")) ;
  if (cond_11967.isBuiltAndTrue ()) {
    var_cas_s = var_cas_ns ;
  }else if (cond_11967.isBuiltAndFalse ()) {
    var_cas_ns.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_att).operator_concat (GGS_string (" Redefinition")) COMMA_SOURCE_FILE_AT_LINE (410)) ;
    var_cas_s.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was defined here") COMMA_SOURCE_FILE_AT_LINE (411)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_set_lstring_if_empty\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "add_makefile_flag_if_not_empty"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_makefile_flag_if_not_empty (C_Compiler &,
                                GGS_string & var_cas_receiver,
                                GGS_string  var_cas_flag_name,
                                GGS_string  var_cas_flag_value COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_makefile_flag_if_not_empty at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_12256 = (var_cas_flag_value).operator_isNotEqual (GGS_string ("")) ;
  if (cond_12256.isBuiltAndTrue ()) {
    var_cas_receiver.dotAssign_operation (var_cas_flag_name) ;
    var_cas_receiver.appendCString ("=") ;
    var_cas_receiver.dotAssign_operation (var_cas_flag_value) ;
    var_cas_receiver.appendCString ("\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_makefile_flag_if_not_empty\n") ;
  #endif
}

//---------------------------------------------------------------------------*

