//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_routines.cpp'                          *
//                       Generated by version 1.9.10                         *
//                      march 29th, 2010, at 16h29'42"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 688
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_routines.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_routines.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "projectName"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_projectName (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_projectName at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_directory ;
  var_cas_directory = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_391 = (gOption_goil_5F_options_project_5F_dir.reader_value ()).operator_isNotEqual (GGS_string ("")) ;
  if (cond_391.isBuiltAndTrue ()) {
    var_cas_directory = gOption_goil_5F_options_project_5F_dir.reader_value () ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_projectName\n") ;
  #endif
  return var_cas_directory ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_projectName (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_projectName (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_projectName ("projectName",
                              functionForGenericCall_projectName,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of function "oil_dir"                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_oil_dir (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_oil_dir at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_dir ;
  var_cas_dir = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent () ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_oil_dir\n") ;
  #endif
  return var_cas_dir ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_oil_dir (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_oil_dir (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_oil_dir ("oil_dir",
                              functionForGenericCall_oil_dir,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of function "arch"                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_arch (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_arch at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_arch_name ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.reader_value ().reader_componentsSeparatedByString (GGS_string ("/")) ;
  const GGS_stringlist  temp_833 = var_cas_components ;
  if (temp_833.isBuilt ()) {
    temp_833 (HERE)->method_first (inLexique, var_cas_arch_name COMMA_SOURCE_FILE_AT_LINE (24)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_arch\n") ;
  #endif
  return var_cas_arch_name ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_arch (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_arch (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_arch ("arch",
                              functionForGenericCall_arch,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of function "chip"                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_chip (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_chip at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_chip_name ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.reader_value ().reader_componentsSeparatedByString (GGS_string ("/")) ;
  const GGS_bool cond_1242 = (var_cas_components.reader_length ()).operator_strictSup (GGS_uint (1U)) ;
  if (cond_1242.isBuiltAndTrue ()) {
    var_cas_chip_name = var_cas_components.reader_mValueAtIndex (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (34)) ;
  }else if (cond_1242.isBuiltAndFalse ()) {
    var_cas_chip_name = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_chip\n") ;
  #endif
  return var_cas_chip_name ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_chip (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_chip (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_chip ("chip",
                              functionForGenericCall_chip,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of function "board"                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_board (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_board at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_board_name ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.reader_value ().reader_componentsSeparatedByString (GGS_string ("/")) ;
  const GGS_bool cond_1579 = (var_cas_components.reader_length ()).operator_strictSup (GGS_uint (2U)) ;
  if (cond_1579.isBuiltAndTrue ()) {
    var_cas_board_name = var_cas_components.reader_mValueAtIndex (inLexique, GGS_uint (2U) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  }else if (cond_1579.isBuiltAndFalse ()) {
    var_cas_board_name = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_board\n") ;
  #endif
  return var_cas_board_name ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_board (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_board (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_board ("board",
                              functionForGenericCall_board,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "add_path_component"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_add_path_component (C_Compiler & inLexique,
                                GGS_string  var_cas_path,
                                GGS_string  var_cas_component COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_add_path_component at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_new_path ;
  const GGS_bool cond_1873 = (var_cas_path.reader_characterAtIndex (inLexique, var_cas_path.reader_length ().substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (60)) COMMA_SOURCE_FILE_AT_LINE (60))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_1873.isBuiltAndTrue ()) {
    var_cas_new_path = ((var_cas_path).operator_concat (GGS_string ("/"))).operator_concat (var_cas_component) ;
  }else if (cond_1873.isBuiltAndFalse ()) {
    var_cas_new_path = (var_cas_path).operator_concat (var_cas_component) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_add_path_component\n") ;
  #endif
  return var_cas_new_path ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_add_path_component (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string arg_1 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_add_path_component (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_add_path_component [2] = {& kTypeDescriptor_GGS_string,
                              & kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_add_path_component ("add_path_component",
                              functionForGenericCall_add_path_component,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_add_path_component) ;

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of function "rootTemplatesDirectory"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_rootTemplatesDirectory (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_rootTemplatesDirectory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_templateDirectory ;
  const GGS_bool cond_2127 = (gOption_goil_5F_options_template_5F_dir.reader_value ()).operator_isNotEqual (GGS_string ("")) ;
  if (cond_2127.isBuiltAndTrue ()) {
    var_cas_templateDirectory = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  }else if (cond_2127.isBuiltAndFalse ()) {
    var_cas_templateDirectory = GGS_string::constructor_stringWithEnvironmentVariableOrEmpty (inLexique, GGS_string ("GOIL_TEMPLATES") COMMA_HERE) ;
  }
  var_cas_templateDirectory = var_cas_templateDirectory.reader_unixPathWithNativePath () ;
  var_cas_templateDirectory = var_cas_templateDirectory.reader_stringByStandardizingPath () ;
  const GGS_bool cond_2639 = (var_cas_templateDirectory.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (77))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
  if (cond_2639.isBuiltAndTrue ()) {
    GGS_string var_cas_currentDirectory = GGS_string::constructor_stringWithCurrentDirectory (inLexique COMMA_HERE) ;
    var_cas_templateDirectory = ((var_cas_currentDirectory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_templateDirectory) ;
    var_cas_templateDirectory = var_cas_templateDirectory.reader_stringByStandardizingPath () ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_rootTemplatesDirectory\n") ;
  #endif
  return var_cas_templateDirectory ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_rootTemplatesDirectory (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_rootTemplatesDirectory (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_rootTemplatesDirectory ("rootTemplatesDirectory",
                              functionForGenericCall_rootTemplatesDirectory,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of function "templates_directory"              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_templates_directory (C_Compiler & inLexique,
                                GGS_string  var_cas_prefix COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_templates_directory at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_temp_dir ;
  var_cas_temp_dir = function_rootTemplatesDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
  const GGS_bool cond_3452 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_3452.isBuiltAndTrue ()) {
    var_cas_temp_dir = function_add_path_component (inLexique, var_cas_temp_dir, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (87)) ;
    const GGS_bool cond_3316 = (var_cas_temp_dir.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (89))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_3316.isBuiltAndTrue ()) {
      GGS_string var_cas_curdir = GGS_string::constructor_stringWithCurrentDirectory (inLexique COMMA_HERE) ;
      const GGS_bool cond_3249 = ((var_cas_temp_dir.reader_characterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (91))).operator_isEqual (GGS_char (TO_UNICODE ('.')))).operator_and ((var_cas_temp_dir.reader_characterAtIndex (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (91))).operator_isEqual (GGS_char (TO_UNICODE ('/')))) ;
      if (cond_3249.isBuiltAndTrue ()) {
        var_cas_temp_dir = var_cas_temp_dir.reader_stringByRemovingCharacterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (92)).reader_stringByRemovingCharacterAtIndex (inLexique, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (92)) ;
      }
      var_cas_temp_dir = ((var_cas_curdir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_dir) ;
    }
    const GGS_bool cond_3439 = (var_cas_temp_dir.reader_characterAtIndex (inLexique, var_cas_temp_dir.reader_length ().substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (96)) COMMA_SOURCE_FILE_AT_LINE (96))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
    if (cond_3439.isBuiltAndTrue ()) {
      var_cas_temp_dir.appendCString ("/") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_templates_directory\n") ;
  #endif
  return var_cas_temp_dir ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_templates_directory (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_templates_directory (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_templates_directory [1] = {& kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_templates_directory ("templates_directory",
                              functionForGenericCall_templates_directory,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_templates_directory) ;

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of function "template_string_if_exist"            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_template_string_if_exist (C_Compiler & inLexique,
                                GGS_string  var_cas_prefix,
                                GGS_string  var_cas_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_template_string_if_exist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  GGS_string var_cas_target_platform ;
  GGS_string var_cas_targ_tpl = GGS_string ("") ;
  GGS_string var_cas_temp_dir ;
  var_cas_temp_dir = function_templates_directory (inLexique, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (115)) ;
  GGS_string var_cas_temp_name = (var_cas_obj).operator_concat (GGS_string (".tpl")) ;
  var_cas_targ_tpl = (((((((var_cas_temp_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (120)))).operator_concat (GGS_string ("/"))).operator_concat (function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (120)))).operator_concat (GGS_string ("/"))).operator_concat (function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (120)))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_name) ;
  const GGS_bool cond_4091 = var_cas_targ_tpl.reader_fileExists () ;
  if (cond_4091.isBuiltAndTrue ()) {
    var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
  }else if (cond_4091.isBuiltAndFalse ()) {
    var_cas_targ_tpl = (((((var_cas_temp_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (124)))).operator_concat (GGS_string ("/"))).operator_concat (function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (124)))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_name) ;
    const GGS_bool cond_4257 = var_cas_targ_tpl.reader_fileExists () ;
    if (cond_4257.isBuiltAndTrue ()) {
      var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
    }else if (cond_4257.isBuiltAndFalse ()) {
      var_cas_targ_tpl = (((var_cas_temp_dir).operator_concat (function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (128)))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_temp_name) ;
      const GGS_bool cond_4420 = var_cas_targ_tpl.reader_fileExists () ;
      if (cond_4420.isBuiltAndTrue ()) {
        var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
      }else if (cond_4420.isBuiltAndFalse ()) {
        var_cas_targ_tpl = ((var_cas_temp_dir).operator_concat (GGS_string ("all_targets/"))).operator_concat (var_cas_temp_name) ;
        const GGS_bool cond_4631 = var_cas_targ_tpl.reader_fileExists () ;
        if (cond_4631.isBuiltAndTrue ()) {
          var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
        }else if (cond_4631.isBuiltAndFalse ()) {
          var_cas_targ_tpl = (var_cas_temp_dir).operator_concat (var_cas_temp_name) ;
          const GGS_bool cond_4799 = var_cas_targ_tpl.reader_fileExists () ;
          if (cond_4799.isBuiltAndTrue ()) {
            var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_targ_tpl COMMA_HERE) ;
          }else if (cond_4799.isBuiltAndFalse ()) {
            var_cas_tpl = GGS_string ("") ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_template_string_if_exist\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_template_string_if_exist (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string arg_1 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_template_string_if_exist (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_template_string_if_exist [2] = {& kTypeDescriptor_GGS_string,
                              & kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_template_string_if_exist ("template_string_if_exist",
                              functionForGenericCall_template_string_if_exist,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_template_string_if_exist) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "template_string"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_template_string (C_Compiler & inLexique,
                                GGS_string  var_cas_prefix,
                                GGS_string  var_cas_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_template_string at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  var_cas_tpl = function_template_string_if_exist (inLexique, var_cas_prefix, var_cas_obj COMMA_SOURCE_FILE_AT_LINE (153)) ;
  const GGS_bool cond_5326 = (var_cas_tpl).operator_isEqual (GGS_string ("")) ;
  if (cond_5326.isBuiltAndTrue ()) {
    GGS_string var_cas_target_platform = function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
    GGS_string var_cas_temp_dir ;
    var_cas_temp_dir = function_templates_directory (inLexique, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (157)) ;
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("No template found for ")).operator_concat (var_cas_obj)).operator_concat (GGS_string (" (searched in "))).operator_concat (var_cas_temp_dir)).operator_concat (var_cas_target_platform)).operator_concat (GGS_string (" and in "))).operator_concat (var_cas_temp_dir)).operator_concat (GGS_string ("all_targets)")) COMMA_SOURCE_FILE_AT_LINE (160)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_template_string\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_template_string (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string arg_1 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_template_string (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_template_string [2] = {& kTypeDescriptor_GGS_string,
                              & kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_template_string ("template_string",
                              functionForGenericCall_template_string,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_template_string) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "templateFilePath"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_templateFilePath (C_Compiler & inLexique,
                                const GGS_string  var_cas_prefix,
                                const GGS_string  var_cas_file COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_templateFilePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_path ;
  GGS_stringlist  var_cas_components = gOption_goil_5F_options_target_5F_platform.reader_value ().reader_componentsSeparatedByString (GGS_string ("/")) ;
  GGS_string var_cas_templateDir = function_templates_directory (inLexique, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (169)) ;
  GGS_bool var_cas_notFound = GGS_bool (true) ;
  var_cas_path = GGS_string ("") ;
  GGS_uint _variant_5984 = var_cas_components.reader_length () ;
  GGS_bool _condition_5984 (_variant_5984.isBuilt (), true) ;
  while (_condition_5984.isBuiltAndTrue ()) {
    _condition_5984 = (var_cas_notFound).operator_and ((var_cas_components.reader_length ()).operator_strictSup (GGS_uint (0U))) ;
    if (_condition_5984.isBuiltAndTrue ()) {
      if (_variant_5984.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (182)) ;
        _condition_5984 = GGS_bool (false) ;
      }else{
        _variant_5984.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_targetPath = (((var_cas_templateDir).operator_concat (GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_components, GGS_string ("/") COMMA_HERE))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_file) ;
        const GGS_bool cond_5943 = var_cas_targetPath.reader_fileExists () ;
        if (cond_5943.isBuiltAndTrue ()) {
          var_cas_notFound = GGS_bool (false) ;
          var_cas_path = var_cas_targetPath ;
        }
        GGS_string automatic_var_5977_0 ;
        var_cas_components.modifier_popLast (inLexique, automatic_var_5977_0 COMMA_SOURCE_FILE_AT_LINE (181)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_templateFilePath\n") ;
  #endif
  return var_cas_path ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_templateFilePath (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string arg_1 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_templateFilePath (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_templateFilePath [2] = {& kTypeDescriptor_GGS_string,
                              & kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_templateFilePath ("templateFilePath",
                              functionForGenericCall_templateFilePath,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_templateFilePath) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "config_file"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_config_file (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_config_file at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_cfg_file ;
  GGS_string var_cas_cfg = function_templateFilePath (inLexique, GGS_string ("config"), GGS_string ("target.cfg") COMMA_SOURCE_FILE_AT_LINE (187)) ;
  var_cas_cfg_file = GGS_lstring ::constructor_new (inLexique, var_cas_cfg, GGS_location (inLexique) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_config_file\n") ;
  #endif
  return var_cas_cfg_file ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_config_file (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  result = function_config_file (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_config_file ("config_file",
                              functionForGenericCall_config_file,
                              & kTypeDescriptor_GGS_lstring ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "extra_config_file"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_extra_config_file (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_extra_config_file at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_cfg_file ;
  GGS_string var_cas_cfg = (function_oil_dir (inLexique COMMA_SOURCE_FILE_AT_LINE (194))).operator_concat (GGS_string ("/target.cfg")) ;
  const GGS_bool cond_6343 = (var_cas_cfg.reader_fileExists ()).operator_not () ;
  if (cond_6343.isBuiltAndTrue ()) {
    var_cas_cfg = GGS_string ("") ;
  }
  var_cas_cfg_file = GGS_lstring ::constructor_new (inLexique, var_cas_cfg, GGS_location (inLexique) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_extra_config_file\n") ;
  #endif
  return var_cas_cfg_file ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_extra_config_file (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  result = function_extra_config_file (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_extra_config_file ("extra_config_file",
                              functionForGenericCall_extra_config_file,
                              & kTypeDescriptor_GGS_lstring ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Implementation of routine "prefix"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_prefix (C_Compiler & inLexique,
                                GGS_prefix_map   var_cas_p,
                                GGS_string  var_cas_key,
                                GGS_string & var_cas_val COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_prefix at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_lkey = GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE) ;
  GGS_string automatic_var_6544_0 ;
  const GGS_prefix_map  temp_6529 = var_cas_p ;
  if (temp_6529.isBuilt ()) {
    temp_6529 (HERE)->method_prefix (inLexique, var_cas_lkey, var_cas_val, automatic_var_6544_0 COMMA_SOURCE_FILE_AT_LINE (203)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_prefix\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "performReplace"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_performReplace (C_Compiler & inLexique,
                                GGS_prefix_map   var_cas_p,
                                GGS_string  var_cas_key,
                                GGS_string  var_cas_name,
                                GGS_string & var_cas_res COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_performReplace at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_lkey = GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE) ;
  GGS_string var_cas_prefix ;
  GGS_string var_cas_tag_to_rep ;
  const GGS_prefix_map  temp_6751 = var_cas_p ;
  if (temp_6751.isBuilt ()) {
    temp_6751 (HERE)->method_prefix (inLexique, var_cas_lkey, var_cas_prefix, var_cas_tag_to_rep COMMA_SOURCE_FILE_AT_LINE (210)) ;
  }
  var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, var_cas_tag_to_rep, (var_cas_prefix).operator_concat (var_cas_name) COMMA_SOURCE_FILE_AT_LINE (211)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_performReplace\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "doReplace"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_doReplace (C_Compiler & inLexique,
                                GGS_string & var_cas_s,
                                GGS_string  var_cas_o,
                                GGS_string  var_cas_n COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_doReplace at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_s = var_cas_s.reader_stringByReplacingStringByString (inLexique, var_cas_o, var_cas_n COMMA_SOURCE_FILE_AT_LINE (215)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_doReplace\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "do_replace_default"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_do_replace_default (C_Compiler & inLexique,
                                GGS_string & var_cas_s,
                                GGS_string  var_cas_o,
                                GGS_string  var_cas_n,
                                GGS_string  var_cas_d COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_do_replace_default at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7141 = (var_cas_n).operator_isNotEqual (GGS_string ("")) ;
  if (cond_7141.isBuiltAndTrue ()) {
    var_cas_s = var_cas_s.reader_stringByReplacingStringByString (inLexique, var_cas_o, var_cas_n COMMA_SOURCE_FILE_AT_LINE (220)) ;
  }else if (cond_7141.isBuiltAndFalse ()) {
    var_cas_s = var_cas_s.reader_stringByReplacingStringByString (inLexique, var_cas_o, var_cas_d COMMA_SOURCE_FILE_AT_LINE (222)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_do_replace_default\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "replace_no_prefix"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_replace_no_prefix (C_Compiler & inLexique,
                                GGS_prefix_map   var_cas_p,
                                GGS_string  var_cas_key,
                                GGS_string  var_cas_name,
                                GGS_string & var_cas_res COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_replace_no_prefix at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_lkey = GGS_lstring ::constructor_new (inLexique, var_cas_key, GGS_location (inLexique) COMMA_HERE) ;
  GGS_string var_cas_tag_to_rep ;
  GGS_string automatic_var_7434_0 ;
  const GGS_prefix_map  temp_7412 = var_cas_p ;
  if (temp_7412.isBuilt ()) {
    temp_7412 (HERE)->method_prefix (inLexique, var_cas_lkey, automatic_var_7434_0, var_cas_tag_to_rep COMMA_SOURCE_FILE_AT_LINE (230)) ;
  }
  var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, var_cas_tag_to_rep, var_cas_name COMMA_SOURCE_FILE_AT_LINE (231)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_replace_no_prefix\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "table_core"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_table_core (C_Compiler & inLexique,
                                GGS_string  var_cas_typename,
                                GGS_string  var_cas_varname,
                                GGS_string  var_cas_obj_prefix,
                                GGS_stringset   var_cas_names,
                                GGS_string & var_cas_header,
                                GGS_string & var_cas_implementation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_table_core at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_n = GGS_uint (0U) ;
  {
    GGS_stringset::cEnumerator enumerator_7894 (var_cas_names, true) ;
    while (enumerator_7894.hasCurrentObject ()) {
      var_cas_header = (((((((var_cas_header).operator_concat (GGS_string ("#define "))).operator_concat (var_cas_varname)).operator_concat (GGS_string ("_id_of_"))).operator_concat (enumerator_7894._key (HERE))).operator_concat (GGS_string ("  "))).operator_concat (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251)))).operator_concat (GGS_string ("\n")) ;
      var_cas_header = (((((((var_cas_header).operator_concat (GGS_string ("#define "))).operator_concat (enumerator_7894._key (HERE))).operator_concat (GGS_string ("  "))).operator_concat (var_cas_varname)).operator_concat (GGS_string ("_id_of_"))).operator_concat (enumerator_7894._key (HERE))).operator_concat (GGS_string ("\n")) ;
      var_cas_implementation = (((((var_cas_implementation).operator_concat (GGS_string ("    (tpl_"))).operator_concat (var_cas_typename)).operator_concat (GGS_string (" *)&"))).operator_concat (var_cas_obj_prefix)).operator_concat (enumerator_7894._key (HERE)) ;
      var_cas_n.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ;
      const GGS_bool cond_8545 = (var_cas_n).operator_isNotEqual (var_cas_names.reader_count ()) ;
      if (cond_8545.isBuiltAndTrue ()) {
        var_cas_implementation = (var_cas_implementation).operator_concat (GGS_string (",\n")) ;
      }else if (cond_8545.isBuiltAndFalse ()) {
        var_cas_implementation = (var_cas_implementation).operator_concat (GGS_string ("\n")) ;
      }
      enumerator_7894.next () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_table_core\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "add_to_stringset"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_to_stringset (C_Compiler & inLexique,
                                GGS_stringset  & var_cas_ss,
                                GGS_string  var_cas_new COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_to_stringset at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_11668 = var_cas_ss.reader_hasKey (var_cas_new) ;
  if (cond_11668.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_new)).operator_concat (GGS_string ("' is already declared before")) COMMA_SOURCE_FILE_AT_LINE (372)) ;
  }else if (cond_11668.isBuiltAndFalse ()) {
    var_cas_ss.addAssign_operation (var_cas_new) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_to_stringset\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "file_in_path"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_file_in_path (C_Compiler & inLexique,
                                GGS_lstring  & var_cas_file_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_file_in_path at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_include_path = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, GGS_string ("GOIL_INCLUDE_PATH") COMMA_HERE) ;
  GGS_stringlist  var_cas_path_list = var_cas_include_path.reader_componentsSeparatedByString (GGS_string (":")) ;
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_stringlist::cEnumerator enumerator_11987 (var_cas_path_list, true) ;
    const GGS_stringlist::cElement * operand_11987 = NULL ;
    while (((operand_11987 = enumerator_11987.nextObject ()))) {
      macroValidPointer (operand_11987) ;
      GGS_string var_cas_full_file_path = operand_11987->mValue ;
      const GGS_bool cond_12248 = (var_cas_full_file_path).operator_isNotEqual (GGS_string ("")) ;
      if (cond_12248.isBuiltAndTrue ()) {
        const GGS_bool cond_12231 = (var_cas_full_file_path.reader_characterAtIndex (inLexique, var_cas_full_file_path.reader_length ().substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (386)) COMMA_SOURCE_FILE_AT_LINE (386))).operator_isNotEqual (GGS_char (TO_UNICODE ('/'))) ;
        if (cond_12231.isBuiltAndTrue ()) {
          var_cas_full_file_path.appendCString ("/") ;
        }
      }
      var_cas_full_file_path.dotAssign_operation (var_cas_file_name.ggs_string ()) ;
      const GGS_bool cond_12458 = (var_cas_full_file_path.reader_fileExists ()).operator_and (var_cas_not_found) ;
      if (cond_12458.isBuiltAndTrue ()) {
        var_cas_file_name = GGS_lstring ::constructor_new (inLexique, var_cas_full_file_path, GGS_location (inLexique) COMMA_HERE) ;
        var_cas_not_found = GGS_bool (false) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_file_in_path\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "is_in_lstringlist"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_is_in_lstringlist (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_l,
                                GGS_lstring   var_cas_e,
                                GGS_lstring  & var_cas_f,
                                GGS_bool & var_cas_p COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_is_in_lstringlist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_p = GGS_bool (false) ;
  var_cas_f = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12657 (var_cas_l, true) ;
    const GGS_lstringlist::cElement * operand_12657 = NULL ;
    while (((operand_12657 = enumerator_12657.nextObject ()))) {
      macroValidPointer (operand_12657) ;
      const GGS_bool cond_12751 = (operand_12657->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (407))).operator_isEqual (var_cas_e.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (407))) ;
      if (cond_12751.isBuiltAndTrue ()) {
        var_cas_p = GGS_bool (true) ;
        var_cas_f = operand_12657->mValue ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_is_in_lstringlist\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "isInLstringlist"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_isInLstringlist (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_l,
                                GGS_lstring   var_cas_e COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_isInLstringlist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_p ;
  var_cas_p = GGS_bool (false) ;
  {
    GGS_lstringlist::cEnumerator enumerator_12895 (var_cas_l, true) ;
    const GGS_lstringlist::cElement * operand_12895 = NULL ;
    while (((operand_12895 = enumerator_12895.nextObject ()))) {
      macroValidPointer (operand_12895) ;
      const GGS_bool cond_12974 = (operand_12895->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421))).operator_isEqual (var_cas_e.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421))) ;
      if (cond_12974.isBuiltAndTrue ()) {
        var_cas_p = GGS_bool (true) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_isInLstringlist\n") ;
  #endif
  return var_cas_p ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_isInLstringlist (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstringlist  arg_0 = GGS_lstringlist ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_lstring  arg_1 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_isInLstringlist (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_isInLstringlist [2] = {& kTypeDescriptor_GGS_lstringlist ,
                              & kTypeDescriptor_GGS_lstring } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_isInLstringlist ("isInLstringlist",
                              functionForGenericCall_isInLstringlist,
                              & kTypeDescriptor_GGS_bool,
                              2,
                              kArgumentTypeList_isInLstringlist) ;

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "add_lstring_unique"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_lstring_unique (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_l,
                                GGS_lstring   var_cas_e,
                                GGS_string  var_cas_att COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_lstring_unique at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_found ;
  GGS_lstring  var_cas_res ;
  ::routine_is_in_lstringlist (inLexique,  var_cas_l,  var_cas_e,  var_cas_res,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (434)) ;
  const GGS_bool cond_13280 = var_cas_found ;
  if (cond_13280.isBuiltAndTrue ()) {
    var_cas_e.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_att).operator_concat (GGS_string (" "))).operator_concat (var_cas_e.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (436)))).operator_concat (GGS_string (" has already be listed")) COMMA_SOURCE_FILE_AT_LINE (437)) ;
    var_cas_res.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was listed here") COMMA_SOURCE_FILE_AT_LINE (438)) ;
  }else if (cond_13280.isBuiltAndFalse ()) {
    var_cas_l.addAssign_operation (var_cas_e) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_lstring_unique\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "set_lstring_if_empty"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_set_lstring_if_empty (C_Compiler & inLexique,
                                GGS_lstring  & var_cas_s,
                                GGS_lstring   var_cas_ns,
                                GGS_string  var_cas_att COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_set_lstring_if_empty at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_13444 = (var_cas_s.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (448))).operator_isEqual (GGS_string ("")) ;
  if (cond_13444.isBuiltAndTrue ()) {
    var_cas_s = var_cas_ns ;
  }else if (cond_13444.isBuiltAndFalse ()) {
    var_cas_ns.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (var_cas_att).operator_concat (GGS_string (" Redefinition")) COMMA_SOURCE_FILE_AT_LINE (452)) ;
    var_cas_s.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was defined here") COMMA_SOURCE_FILE_AT_LINE (453)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_set_lstring_if_empty\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "add_makefile_flag_if_not_empty"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_makefile_flag_if_not_empty (C_Compiler &,
                                GGS_string & var_cas_receiver,
                                GGS_string  var_cas_flag_name,
                                GGS_string  var_cas_flag_value COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_makefile_flag_if_not_empty at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_13733 = (var_cas_flag_value).operator_isNotEqual (GGS_string ("")) ;
  if (cond_13733.isBuiltAndTrue ()) {
    var_cas_receiver.dotAssign_operation (var_cas_flag_name) ;
    var_cas_receiver.appendCString ("=") ;
    var_cas_receiver.dotAssign_operation (var_cas_flag_value) ;
    var_cas_receiver.appendCString ("\n") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_makefile_flag_if_not_empty\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "lstringWith"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_lstring  function_lstringWith (C_Compiler & inLexique,
                                GGS_string  var_cas_s COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_lstringWith at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_r ;
  var_cas_r = GGS_lstring ::constructor_new (inLexique, var_cas_s, GGS_location (inLexique) COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_lstringWith\n") ;
  #endif
  return var_cas_r ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_lstringWith (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_lstring  result = function_lstringWith (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_lstringWith [1] = {& kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_lstringWith ("lstringWith",
                              functionForGenericCall_lstringWith,
                              & kTypeDescriptor_GGS_lstring ,
                              1,
                              kArgumentTypeList_lstringWith) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of function "stripString"                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_stripString (C_Compiler & inLexique,
                                GGS_string  var_cas_s COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_stripString at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_r ;
  const GGS_bool cond_14722 = (var_cas_s.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_14722.isBuiltAndTrue ()) {
    GGS_uint  var_cas_first = GGS_uint (0U) ;
    GGS_uint  var_cas_last = var_cas_s.reader_length () ;
    GGS_bool var_cas_finished = GGS_bool (false) ;
    GGS_uint _variant_14273 = var_cas_s.reader_length () ;
    GGS_bool _condition_14273 (_variant_14273.isBuilt (), true) ;
    while (_condition_14273.isBuiltAndTrue ()) {
      _condition_14273 = (var_cas_finished).operator_not () ;
      if (_condition_14273.isBuiltAndTrue ()) {
        if (_variant_14273.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (482)) ;
          _condition_14273 = GGS_bool (false) ;
        }else{
          _variant_14273.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_14238 = (var_cas_s.reader_characterAtIndex (inLexique, var_cas_first COMMA_SOURCE_FILE_AT_LINE (478))).operator_isEqual (GGS_char (TO_UNICODE (' '))) ;
          if (cond_14238.isBuiltAndTrue ()) {
            var_cas_first.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (479)) ;
            const GGS_bool cond_14223 = (var_cas_first).operator_isEqual (var_cas_s.reader_length ()) ;
            if (cond_14223.isBuiltAndTrue ()) {
              var_cas_finished = GGS_bool (true) ;
            }
          }else if (cond_14238.isBuiltAndFalse ()) {
            var_cas_finished = GGS_bool (true) ;
          }
        }
      }
    }
    var_cas_finished = GGS_bool (false) ;
    GGS_uint _variant_14570 = var_cas_s.reader_length () ;
    GGS_bool _condition_14570 (_variant_14570.isBuilt (), true) ;
    while (_condition_14570.isBuiltAndTrue ()) {
      _condition_14570 = (var_cas_finished).operator_not () ;
      if (_condition_14570.isBuiltAndTrue ()) {
        if (_variant_14570.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (491)) ;
          _condition_14570 = GGS_bool (false) ;
        }else{
          _variant_14570.decrement_operation (inLexique COMMA_HERE) ;
          const GGS_bool cond_14535 = (var_cas_s.reader_characterAtIndex (inLexique, var_cas_last.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (487)) COMMA_SOURCE_FILE_AT_LINE (487))).operator_isEqual (GGS_char (TO_UNICODE (' '))) ;
          if (cond_14535.isBuiltAndTrue ()) {
            var_cas_last.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (488)) ;
            const GGS_bool cond_14520 = (var_cas_last).operator_isEqual (GGS_uint (0U)) ;
            if (cond_14520.isBuiltAndTrue ()) {
              var_cas_finished = GGS_bool (true) ;
            }
          }else if (cond_14535.isBuiltAndFalse ()) {
            var_cas_finished = GGS_bool (true) ;
          }
        }
      }
    }
    const GGS_bool cond_14688 = (var_cas_first).operator_strictInf (var_cas_last) ;
    if (cond_14688.isBuiltAndTrue ()) {
      var_cas_r = var_cas_s.reader_subString (var_cas_first, var_cas_last.substract_operation (inLexique, var_cas_first COMMA_SOURCE_FILE_AT_LINE (494))) ;
    }else if (cond_14688.isBuiltAndFalse ()) {
      var_cas_r = GGS_string ("") ;
    }
  }else if (cond_14722.isBuiltAndFalse ()) {
    var_cas_r = GGS_string ("") ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_stripString\n") ;
  #endif
  return var_cas_r ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_stripString (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_string arg_0 = GGS_string::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_stripString (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_stripString [1] = {& kTypeDescriptor_GGS_string} ;

const C_galgas_function_descriptorEX
kFunction_descriptor_stripString ("stripString",
                              functionForGenericCall_stripString,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_stripString) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "errorNoFileFound"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_errorNoFileFound (C_Compiler & inLexique,
                                const GGS_stringlist   var_cas_searchedPaths,
                                const GGS_string  var_cas_kind,
                                const GGS_lstring   var_cas_file COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_errorNoFileFound at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_m = ((((GGS_string ("cannot find a valid path for the '")).operator_concat (var_cas_file)).operator_concat (GGS_string ("' "))).operator_concat (var_cas_kind)).operator_concat (GGS_string (" file. I have tried:")) ;
  {
    GGS_stringlist::cEnumerator enumerator_14981 (var_cas_searchedPaths, true) ;
    const GGS_stringlist::cElement * operand_14981 = NULL ;
    while (((operand_14981 = enumerator_14981.nextObject ()))) {
      macroValidPointer (operand_14981) ;
      var_cas_m.appendCString ("\n"
        "  - '") ;
      var_cas_m.dotAssign_operation (operand_14981->mValue) ;
      var_cas_m.appendCString ("'") ;
    }
  }
  var_cas_file.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (513)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_errorNoFileFound\n") ;
  #endif
}

//---------------------------------------------------------------------------*

