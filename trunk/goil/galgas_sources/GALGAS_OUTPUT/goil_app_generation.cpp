//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'goil_app_generation.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 9th, 2009, at 20h11'35"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_app_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_vector"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_vector (C_Compiler & inLexique,
                                GGS_string  var_cas_vec,
                                GGS_string & var_cas_res,
                                GGS_uint  & var_cas_byte_count COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_vector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_byte_count = var_cas_vec.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (47)).divide_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (47)) ;
  const GGS_bool cond_1242 = (var_cas_vec.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (48)).modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (48))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_1242.isBuiltAndTrue ()) {
    var_cas_byte_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
  }
  GGS_stringlist  var_cas_data = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  GGS_uint  var_cas_start = GGS_uint (0U) ;
  GGS_uint _variant_1799 = var_cas_byte_count ;
  GGS_bool _condition_1799 (_variant_1799.isBuilt (), true) ;
  while (_condition_1799.isBuiltAndTrue ()) {
    _condition_1799 = (var_cas_i).operator_strictInf (var_cas_byte_count) ;
    if (_condition_1799.isBuiltAndTrue ()) {
      if (_variant_1799.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (73)) ;
        _condition_1799 = GGS_bool (false) ;
      }else{
        _variant_1799.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_byte = var_cas_vec.reader_subString (inLexique, var_cas_start, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (57)).reader_reversedString (inLexique COMMA_SOURCE_FILE_AT_LINE (57)) ;
        GGS_uint  var_cas_bit_pos = GGS_uint (0U) ;
        GGS_uint  var_cas_val = GGS_uint (0U) ;
        GGS_uint _variant_1723 = GGS_uint (8U) ;
        GGS_bool _condition_1723 (_variant_1723.isBuilt (), true) ;
        while (_condition_1723.isBuiltAndTrue ()) {
          _condition_1723 = (var_cas_bit_pos).operator_strictInf (var_cas_byte.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (62))) ;
          if (_condition_1723.isBuiltAndTrue ()) {
            if (_variant_1723.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (69)) ;
              _condition_1723 = GGS_bool (false) ;
            }else{
              _variant_1723.decrement_operation (inLexique COMMA_HERE) ;
              GGS_char var_cas_bit = var_cas_byte.reader_characterAtIndex (inLexique, var_cas_bit_pos COMMA_SOURCE_FILE_AT_LINE (63)) ;
              var_cas_val = var_cas_val.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (64)) ;
              const GGS_bool cond_1692 = (var_cas_bit).operator_isEqual (GGS_char (TO_UNICODE ('1'))) ;
              if (cond_1692.isBuiltAndTrue ()) {
                var_cas_val.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
              }
              var_cas_bit_pos.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
            }
          }
        }
        var_cas_data.addAssign_operation (var_cas_val.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
        var_cas_start = var_cas_start.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (72)) ;
      }
    }
  }
  var_cas_res = GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_data, GGS_string (",") COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_vector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_apps"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_apps (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_resource_map   var_cas_rezs,
                                GGS_scheduletable_map   var_cas_sts,
                                GGS_counter_map   var_cas_cnts,
                                GGS_string & /* var_cas_head */,
                                GGS_string & var_cas_obj_head,
                                GGS_string & var_cas_imp COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_apps at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_res = GGS_string ("") ;
  GGS_stringlist  var_cas_app_list = GGS_stringlist ::constructor_emptyList () ;
  GGS_string var_cas_ids = GGS_string ("") ;
  ::routine_doReplace (inLexique,  var_cas_obj_head,  GGS_string ("$APP_COUNT$"),  var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (95)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) COMMA_SOURCE_FILE_AT_LINE (95)) ;
  const GGS_bool cond_11002 = (var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (97))).operator_strictSup (GGS_uint (0U)) ;
  if (cond_11002.isBuiltAndTrue ()) {
    GGS_tasks_by_type  var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
    {
      GGS_task_map::cEnumerator enumerator_2569 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_2569 = NULL ;
      while (((operand_2569 = enumerator_2569.nextObject ()))) {
        macroValidPointer (operand_2569) ;
        const GGS_bool cond_2655 = (operand_2569->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (103)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (103))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_2655.isBuiltAndTrue ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (0U), operand_2569->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
        }else if (cond_2655.isBuiltAndFalse ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (1U), operand_2569->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (106))) ;
        }
      }
    }
    {
        GGS_uint var_cas_n (true, 0) ;
      GGS_app_map::cEnumerator enumerator_2736 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2736 = NULL ;
      while (((operand_2736 = enumerator_2736.nextObject ()))) {
        macroValidPointer (operand_2736) ;
        var_cas_app_list.addAssign_operation (((GGS_string ("&")).operator_concat (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string ("_app_access"))) ;
        var_cas_ids.appendCString ("#define ") ;
        var_cas_ids.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
        var_cas_ids.appendCString ("_id ") ;
        var_cas_ids.dotAssign_operation (var_cas_n.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
        var_cas_ids.appendCString ("\n") ;
        var_cas_ids.appendCString ("CONST(ApplicationType, OS_APPL_CONST) ") ;
        var_cas_ids.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
        var_cas_ids.appendCString (" = ") ;
        var_cas_ids.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
        var_cas_ids.appendCString ("_id;\n") ;
        GGS_string var_cas_vectors = GGS_string ("") ;
        GGS_string var_cas_vec = GGS_string ("") ;
        GGS_string var_cas_init ;
        GGS_uint  var_cas_count ;
        GGS_string var_cas_tpl ;
        ::routine_retrieveTemplateString (inLexique,  var_cas_tpl,  GGS_string ("app") COMMA_SOURCE_FILE_AT_LINE (121)) ;
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$APP_NAME$"),  operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) COMMA_SOURCE_FILE_AT_LINE (123)) ;
        {
          GGS_tasks_by_type::cEnumerator enumerator_3363 (var_cas_stasks, true) ;
          const GGS_tasks_by_type::cElement * operand_3363 = NULL ;
          while (((operand_3363 = enumerator_3363.nextObject ()))) {
            macroValidPointer (operand_3363) ;
            const GGS_bool cond_3466 = operand_2736->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (129)).reader_hasKey (inLexique, operand_3363->name COMMA_SOURCE_FILE_AT_LINE (129)) ;
            if (cond_3466.isBuiltAndTrue ()) {
              var_cas_vec.appendCString ("11") ;
            }else if (cond_3466.isBuiltAndFalse ()) {
              var_cas_vec.appendCString ("0") ;
              GGS_task_obj  var_cas_t ;
              const GGS_task_map  temp_3552 = var_cas_tasks ;
              if (temp_3552.isBuilt ()) {
                temp_3552 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_3363->name, GGS_location (inLexique) COMMA_HERE), var_cas_t COMMA_SOURCE_FILE_AT_LINE (135)) ;
              }
              GGS_bool var_cas_found ;
              GGS_lstring  automatic_var_0 ;
              ::routine_is_in_lstringlist (inLexique,  var_cas_t.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (137)),  operand_2736->mKey,  automatic_var_0,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (137)) ;
              const GGS_bool cond_3710 = var_cas_found ;
              if (cond_3710.isBuiltAndTrue ()) {
                var_cas_vec.appendCString ("1") ;
              }else if (cond_3710.isBuiltAndFalse ()) {
                var_cas_vec.appendCString ("0") ;
              }
            }
          }
        }
        {
          GGS_isr_map::cEnumerator enumerator_3809 (var_cas_isrs, true) ;
          const GGS_isr_map::cElement * operand_3809 = NULL ;
          while (((operand_3809 = enumerator_3809.nextObject ()))) {
            macroValidPointer (operand_3809) ;
            const GGS_bool cond_3893 = operand_2736->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (144)).reader_hasKey (inLexique, operand_3809->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) COMMA_SOURCE_FILE_AT_LINE (144)) ;
            if (cond_3893.isBuiltAndTrue ()) {
              var_cas_vec.appendCString ("11") ;
            }else if (cond_3893.isBuiltAndFalse ()) {
              var_cas_vec.appendCString ("0") ;
              GGS_bool var_cas_found ;
              GGS_lstring  automatic_var_1 ;
              ::routine_is_in_lstringlist (inLexique,  operand_3809->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (149)),  operand_2736->mKey,  automatic_var_1,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (149)) ;
              const GGS_bool cond_4040 = var_cas_found ;
              if (cond_4040.isBuiltAndTrue ()) {
                var_cas_vec.appendCString ("1") ;
              }else if (cond_4040.isBuiltAndFalse ()) {
                var_cas_vec.appendCString ("0") ;
              }
            }
          }
        }
        var_cas_vec.appendCString ("01") ;
        ::routine_generate_vector (inLexique,  var_cas_vec,  var_cas_init,  var_cas_count COMMA_SOURCE_FILE_AT_LINE (158)) ;
        const GGS_bool cond_4469 = (var_cas_count).operator_strictSup (GGS_uint (0U)) ;
        if (cond_4469.isBuiltAndTrue ()) {
          var_cas_vectors.appendCString ("u8 ") ;
          var_cas_vectors.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
          var_cas_vectors.appendCString ("_procs_access[") ;
          var_cas_vectors.dotAssign_operation (var_cas_count.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (160))) ;
          var_cas_vectors.appendCString ("] = {") ;
          var_cas_vectors.dotAssign_operation (var_cas_init) ;
          var_cas_vectors.appendCString ("};\n") ;
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$PROC_ACCESS$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (161))).operator_concat (GGS_string ("_procs_access")) COMMA_SOURCE_FILE_AT_LINE (161)) ;
        }else if (cond_4469.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$PROC_ACCESS$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (163)) ;
        }
        var_cas_vec = GGS_string ("") ;
        {
          GGS_alarm_map::cEnumerator enumerator_4655 (var_cas_alarms, true) ;
          const GGS_alarm_map::cElement * operand_4655 = NULL ;
          while (((operand_4655 = enumerator_4655.nextObject ()))) {
            macroValidPointer (operand_4655) ;
            const GGS_bool cond_4741 = operand_2736->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (169)).reader_hasKey (inLexique, operand_4655->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (169)) COMMA_SOURCE_FILE_AT_LINE (169)) ;
            if (cond_4741.isBuiltAndTrue ()) {
              var_cas_vec.appendCString ("11") ;
            }else if (cond_4741.isBuiltAndFalse ()) {
              var_cas_vec.appendCString ("0") ;
              GGS_bool var_cas_found ;
              GGS_lstring  automatic_var_2 ;
              ::routine_is_in_lstringlist (inLexique,  operand_4655->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (174)),  operand_2736->mKey,  automatic_var_2,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (174)) ;
              const GGS_bool cond_4890 = var_cas_found ;
              if (cond_4890.isBuiltAndTrue ()) {
                var_cas_vec.appendCString ("1") ;
              }else if (cond_4890.isBuiltAndFalse ()) {
                var_cas_vec.appendCString ("0") ;
              }
            }
          }
        }
        ::routine_generate_vector (inLexique,  var_cas_vec,  var_cas_init,  var_cas_count COMMA_SOURCE_FILE_AT_LINE (180)) ;
        const GGS_bool cond_5215 = (var_cas_count).operator_strictSup (GGS_uint (0U)) ;
        if (cond_5215.isBuiltAndTrue ()) {
          var_cas_vectors.appendCString ("u8 ") ;
          var_cas_vectors.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182))) ;
          var_cas_vectors.appendCString ("_alarms_access[") ;
          var_cas_vectors.dotAssign_operation (var_cas_count.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182))) ;
          var_cas_vectors.appendCString ("] = {") ;
          var_cas_vectors.dotAssign_operation (var_cas_init) ;
          var_cas_vectors.appendCString ("};\n") ;
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ALARM_ACCESS$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183))).operator_concat (GGS_string ("_alarms_access")) COMMA_SOURCE_FILE_AT_LINE (183)) ;
        }else if (cond_5215.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ALARM_ACCESS$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (185)) ;
        }
        var_cas_vec = GGS_string ("") ;
        {
          GGS_resource_map::cEnumerator enumerator_5404 (var_cas_rezs, true) ;
          const GGS_resource_map::cElement * operand_5404 = NULL ;
          while (((operand_5404 = enumerator_5404.nextObject ()))) {
            macroValidPointer (operand_5404) ;
            const GGS_bool cond_5493 = operand_2736->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (192)).reader_hasKey (inLexique, operand_5404->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) COMMA_SOURCE_FILE_AT_LINE (192)) ;
            if (cond_5493.isBuiltAndTrue ()) {
              var_cas_vec.appendCString ("11") ;
            }else if (cond_5493.isBuiltAndFalse ()) {
              var_cas_vec.appendCString ("0") ;
              GGS_bool var_cas_found ;
              GGS_lstring  automatic_var_3 ;
              ::routine_is_in_lstringlist (inLexique,  operand_5404->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (197)),  operand_2736->mKey,  automatic_var_3,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (197)) ;
              const GGS_bool cond_5645 = var_cas_found ;
              if (cond_5645.isBuiltAndTrue ()) {
                var_cas_vec.appendCString ("1") ;
              }else if (cond_5645.isBuiltAndFalse ()) {
                var_cas_vec.appendCString ("0") ;
              }
            }
          }
        }
        var_cas_vec.appendCString ("10") ;
        ::routine_generate_vector (inLexique,  var_cas_vec,  var_cas_init,  var_cas_count COMMA_SOURCE_FILE_AT_LINE (207)) ;
        const GGS_bool cond_6012 = (var_cas_count).operator_strictSup (GGS_uint (0U)) ;
        if (cond_6012.isBuiltAndTrue ()) {
          var_cas_vectors.appendCString ("u8 ") ;
          var_cas_vectors.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (209))) ;
          var_cas_vectors.appendCString ("_rezs_access[") ;
          var_cas_vectors.dotAssign_operation (var_cas_count.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (209))) ;
          var_cas_vectors.appendCString ("] = {") ;
          var_cas_vectors.dotAssign_operation (var_cas_init) ;
          var_cas_vectors.appendCString ("};\n") ;
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$REZ_ACCESS$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))).operator_concat (GGS_string ("_rezs_access")) COMMA_SOURCE_FILE_AT_LINE (210)) ;
        }else if (cond_6012.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$REZ_ACCESS$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (212)) ;
        }
        var_cas_vec = GGS_string ("") ;
        {
          GGS_scheduletable_map::cEnumerator enumerator_6204 (var_cas_sts, true) ;
          const GGS_scheduletable_map::cElement * operand_6204 = NULL ;
          while (((operand_6204 = enumerator_6204.nextObject ()))) {
            macroValidPointer (operand_6204) ;
            const GGS_bool cond_6295 = operand_2736->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (219)).reader_hasKey (inLexique, operand_6204->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (219)) COMMA_SOURCE_FILE_AT_LINE (219)) ;
            if (cond_6295.isBuiltAndTrue ()) {
              var_cas_vec.appendCString ("11") ;
            }else if (cond_6295.isBuiltAndFalse ()) {
              var_cas_vec.appendCString ("0") ;
              GGS_bool var_cas_found ;
              GGS_lstring  automatic_var_4 ;
              ::routine_is_in_lstringlist (inLexique,  operand_6204->mInfo.st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (224)),  operand_2736->mKey,  automatic_var_4,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (224)) ;
              const GGS_bool cond_6441 = var_cas_found ;
              if (cond_6441.isBuiltAndTrue ()) {
                var_cas_vec.appendCString ("1") ;
              }else if (cond_6441.isBuiltAndFalse ()) {
                var_cas_vec.appendCString ("0") ;
              }
            }
          }
        }
        ::routine_generate_vector (inLexique,  var_cas_vec,  var_cas_init,  var_cas_count COMMA_SOURCE_FILE_AT_LINE (229)) ;
        const GGS_bool cond_6733 = (var_cas_count).operator_strictSup (GGS_uint (0U)) ;
        if (cond_6733.isBuiltAndTrue ()) {
          var_cas_vectors.appendCString ("u8 ") ;
          var_cas_vectors.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (231))) ;
          var_cas_vectors.appendCString ("_sts_access[") ;
          var_cas_vectors.dotAssign_operation (var_cas_count.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (231))) ;
          var_cas_vectors.appendCString ("] = {") ;
          var_cas_vectors.dotAssign_operation (var_cas_init) ;
          var_cas_vectors.appendCString ("};\n") ;
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ST_ACCESS$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (232))).operator_concat (GGS_string ("_sts_access")) COMMA_SOURCE_FILE_AT_LINE (232)) ;
        }else if (cond_6733.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ST_ACCESS$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (234)) ;
        }
        var_cas_vec = GGS_string ("") ;
        {
          GGS_counter_map::cEnumerator enumerator_6918 (var_cas_cnts, true) ;
          const GGS_counter_map::cElement * operand_6918 = NULL ;
          while (((operand_6918 = enumerator_6918.nextObject ()))) {
            macroValidPointer (operand_6918) ;
            const GGS_bool cond_7006 = operand_2736->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (241)).reader_hasKey (inLexique, operand_6918->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (241)) COMMA_SOURCE_FILE_AT_LINE (241)) ;
            if (cond_7006.isBuiltAndTrue ()) {
              var_cas_vec.appendCString ("11") ;
            }else if (cond_7006.isBuiltAndFalse ()) {
              var_cas_vec.appendCString ("0") ;
              GGS_bool var_cas_found ;
              GGS_lstring  automatic_var_5 ;
              ::routine_is_in_lstringlist (inLexique,  operand_6918->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (246)),  operand_2736->mKey,  automatic_var_5,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (246)) ;
              const GGS_bool cond_7157 = var_cas_found ;
              if (cond_7157.isBuiltAndTrue ()) {
                var_cas_vec.appendCString ("1") ;
              }else if (cond_7157.isBuiltAndFalse ()) {
                var_cas_vec.appendCString ("0") ;
              }
            }
          }
        }
        ::routine_generate_vector (inLexique,  var_cas_vec,  var_cas_init,  var_cas_count COMMA_SOURCE_FILE_AT_LINE (251)) ;
        const GGS_bool cond_7452 = (var_cas_count).operator_strictSup (GGS_uint (0U)) ;
        if (cond_7452.isBuiltAndTrue ()) {
          var_cas_vectors.appendCString ("u8 ") ;
          var_cas_vectors.dotAssign_operation (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (253))) ;
          var_cas_vectors.appendCString ("_cnts_access[") ;
          var_cas_vectors.dotAssign_operation (var_cas_count.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (253))) ;
          var_cas_vectors.appendCString ("] = {") ;
          var_cas_vectors.dotAssign_operation (var_cas_init) ;
          var_cas_vectors.appendCString ("};\n") ;
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$CNT_ACCESS$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254))).operator_concat (GGS_string ("_cnts_access")) COMMA_SOURCE_FILE_AT_LINE (254)) ;
        }else if (cond_7452.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$CNT_ACCESS$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (256)) ;
        }
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ACCESS_VEC$"),  var_cas_vectors COMMA_SOURCE_FILE_AT_LINE (259)) ;
        GGS_string var_cas_ownership_vec = GGS_string ("") ;
        GGS_lstringlist  var_cas_procs = (operand_2736->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (263))).operator_concat (operand_2736->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (263))) ;
        GGS_string var_cas_table = GGS_string ("") ;
        {
          GGS_lstringlist::cEnumerator enumerator_7742 (var_cas_procs, true) ;
          const GGS_lstringlist::cElement * operand_7742 = enumerator_7742.nextObject () ;
          if ((operand_7742 != NULL)) {
            var_cas_table = ((((GGS_string ("tpl_proc_id ")).operator_concat (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string ("_proc_own ["))).operator_concat (var_cas_procs.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string ("] = {")) ;
            bool _foreach_loop_7742 ;
            do{
              macroValidPointer (operand_7742) ;
              var_cas_table.dotAssign_operation (operand_7742->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (267))) ;
              var_cas_table.appendCString ("_id") ;
              operand_7742 = enumerator_7742.nextObject () ;
              _foreach_loop_7742 = ((operand_7742 != NULL)) ;
              if (_foreach_loop_7742) {
                var_cas_table.appendCString (",") ;
              }
            }while (_foreach_loop_7742) ;
            var_cas_table.appendCString ("};\n") ;
          }
        }
        var_cas_ownership_vec.dotAssign_operation (var_cas_table) ;
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$PROC_COUNT$"),  var_cas_procs.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (272)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272)) COMMA_SOURCE_FILE_AT_LINE (272)) ;
        const GGS_bool cond_8178 = (var_cas_table).operator_isNotEqual (GGS_string ("")) ;
        if (cond_8178.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$PROC_OWNERSHIP$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))).operator_concat (GGS_string ("_proc_own")) COMMA_SOURCE_FILE_AT_LINE (274)) ;
        }else if (cond_8178.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$PROC_OWNERSHIP$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (276)) ;
        }
        var_cas_table = GGS_string ("") ;
        {
          GGS_ident_map::cEnumerator enumerator_8277 (operand_2736->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (280)), true) ;
          const GGS_ident_map::cElement * operand_8277 = enumerator_8277.nextObject () ;
          if ((operand_8277 != NULL)) {
            var_cas_table = ((((GGS_string ("tpl_alarm_id ")).operator_concat (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (281)))).operator_concat (GGS_string ("_alarm_own ["))).operator_concat (operand_2736->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (281)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (281)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (281)))).operator_concat (GGS_string ("] = {")) ;
            bool _foreach_loop_8277 ;
            do{
              macroValidPointer (operand_8277) ;
              var_cas_table.dotAssign_operation (operand_8277->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282))) ;
              var_cas_table.appendCString ("_id") ;
              operand_8277 = enumerator_8277.nextObject () ;
              _foreach_loop_8277 = ((operand_8277 != NULL)) ;
              if (_foreach_loop_8277) {
                var_cas_table.appendCString (",") ;
              }
            }while (_foreach_loop_8277) ;
            var_cas_table.appendCString ("};\n") ;
          }
        }
        var_cas_ownership_vec.dotAssign_operation (var_cas_table) ;
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ALARM_COUNT$"),  operand_2736->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (287)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (287)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (287)) ;
        const GGS_bool cond_8724 = (var_cas_table).operator_isNotEqual (GGS_string ("")) ;
        if (cond_8724.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ALARM_OWNERSHIP$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_concat (GGS_string ("_alarm_own")) COMMA_SOURCE_FILE_AT_LINE (289)) ;
        }else if (cond_8724.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ALARM_OWNERSHIP$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (291)) ;
        }
        var_cas_table = GGS_string ("") ;
        {
          GGS_ident_map::cEnumerator enumerator_8824 (operand_2736->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (295)), true) ;
          const GGS_ident_map::cElement * operand_8824 = enumerator_8824.nextObject () ;
          if ((operand_8824 != NULL)) {
            var_cas_table = ((((GGS_string ("tpl_resource_id ")).operator_concat (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296)))).operator_concat (GGS_string ("_rez_own ["))).operator_concat (operand_2736->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (296)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (296)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296)))).operator_concat (GGS_string ("] = {")) ;
            bool _foreach_loop_8824 ;
            do{
              macroValidPointer (operand_8824) ;
              var_cas_table.dotAssign_operation (operand_8824->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (297))) ;
              var_cas_table.appendCString ("_id") ;
              operand_8824 = enumerator_8824.nextObject () ;
              _foreach_loop_8824 = ((operand_8824 != NULL)) ;
              if (_foreach_loop_8824) {
                var_cas_table.appendCString (",") ;
              }
            }while (_foreach_loop_8824) ;
            var_cas_table.appendCString ("};\n") ;
          }
        }
        var_cas_ownership_vec.dotAssign_operation (var_cas_table) ;
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$REZ_COUNT$"),  operand_2736->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (302)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (302)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)) ;
        const GGS_bool cond_9275 = (var_cas_table).operator_isNotEqual (GGS_string ("")) ;
        if (cond_9275.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$REZ_OWNERSHIP$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (304))).operator_concat (GGS_string ("_rez_own")) COMMA_SOURCE_FILE_AT_LINE (304)) ;
        }else if (cond_9275.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$REZ_OWNERSHIP$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (306)) ;
        }
        var_cas_table = GGS_string ("") ;
        {
          GGS_ident_map::cEnumerator enumerator_9373 (operand_2736->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (310)), true) ;
          const GGS_ident_map::cElement * operand_9373 = enumerator_9373.nextObject () ;
          if ((operand_9373 != NULL)) {
            var_cas_table = ((((GGS_string ("tpl_schedtable_id ")).operator_concat (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (311)))).operator_concat (GGS_string ("_st_own ["))).operator_concat (operand_2736->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (311)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (311)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (311)))).operator_concat (GGS_string ("] = {")) ;
            bool _foreach_loop_9373 ;
            do{
              macroValidPointer (operand_9373) ;
              var_cas_table.dotAssign_operation (operand_9373->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (312))) ;
              var_cas_table.appendCString ("_id") ;
              operand_9373 = enumerator_9373.nextObject () ;
              _foreach_loop_9373 = ((operand_9373 != NULL)) ;
              if (_foreach_loop_9373) {
                var_cas_table.appendCString (",") ;
              }
            }while (_foreach_loop_9373) ;
            var_cas_table.appendCString ("};\n") ;
          }
        }
        var_cas_ownership_vec.dotAssign_operation (var_cas_table) ;
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ST_COUNT$"),  operand_2736->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (317)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (317)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (317)) COMMA_SOURCE_FILE_AT_LINE (317)) ;
        const GGS_bool cond_9828 = (var_cas_table).operator_isNotEqual (GGS_string ("")) ;
        if (cond_9828.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ST_OWNERSHIP$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (319))).operator_concat (GGS_string ("_st_own")) COMMA_SOURCE_FILE_AT_LINE (319)) ;
        }else if (cond_9828.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$ST_OWNERSHIP$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (321)) ;
        }
        var_cas_table = GGS_string ("") ;
        {
          GGS_ident_map::cEnumerator enumerator_9925 (operand_2736->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (325)), true) ;
          const GGS_ident_map::cElement * operand_9925 = enumerator_9925.nextObject () ;
          if ((operand_9925 != NULL)) {
            var_cas_table = ((((GGS_string ("tpl_counter_id ")).operator_concat (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326)))).operator_concat (GGS_string ("_cnt_own ["))).operator_concat (operand_2736->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (326)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (326)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326)))).operator_concat (GGS_string ("] = {")) ;
            bool _foreach_loop_9925 ;
            do{
              macroValidPointer (operand_9925) ;
              var_cas_table.dotAssign_operation (operand_9925->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (327))) ;
              var_cas_table.appendCString ("_id") ;
              operand_9925 = enumerator_9925.nextObject () ;
              _foreach_loop_9925 = ((operand_9925 != NULL)) ;
              if (_foreach_loop_9925) {
                var_cas_table.appendCString (",") ;
              }
            }while (_foreach_loop_9925) ;
            var_cas_table.appendCString ("};\n") ;
          }
        }
        var_cas_ownership_vec.dotAssign_operation (var_cas_table) ;
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$CNT_COUNT$"),  operand_2736->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (332)).reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (332)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (332)) COMMA_SOURCE_FILE_AT_LINE (332)) ;
        const GGS_bool cond_10372 = (var_cas_table).operator_isNotEqual (GGS_string ("")) ;
        if (cond_10372.isBuiltAndTrue ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$CNT_OWNERSHIP$"),  (operand_2736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (334))).operator_concat (GGS_string ("_cnt_own")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
        }else if (cond_10372.isBuiltAndFalse ()) {
          ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$CNT_OWNERSHIP$"),  GGS_string ("NULL") COMMA_SOURCE_FILE_AT_LINE (336)) ;
        }
        { const GGS_basic_type _var_10686 = operand_2736->mInfo.app.reader_restart (inLexique COMMA_SOURCE_FILE_AT_LINE (342)) ; // CAST instruction
          if (_var_10686.getPtr () != NULL) {
            macroValidPointer (_var_10686.getPtr ()) ;
            if (typeid (cPtr_string_class) == typeid (* (_var_10686.getPtr ()))) {
              const GGS_string_class var_cas_rst (_var_10686.getPtr ()) ;
              ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$RESTART$"),  (var_cas_rst.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (344))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (344)) ;
            }else{
              ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$RESTART$"),  GGS_string ("INVALID_TASK_ID") COMMA_SOURCE_FILE_AT_LINE (346)) ;
            }
          }
        }
        ::routine_doReplace (inLexique,  var_cas_tpl,  GGS_string ("$OWNERSHIP_VEC$"),  var_cas_ownership_vec COMMA_SOURCE_FILE_AT_LINE (349)) ;
        var_cas_res.dotAssign_operation (var_cas_tpl) ;
        var_cas_n.mValue ++ ;
      }
    }
    var_cas_res.appendCString ("CONSTP2CONST(tpl_app_access, AUTOMATIC, OS_APPL_CONST) tpl_app_table[APP_COUNT] = {\n") ;
    var_cas_res.appendCString ("  ") ;
    var_cas_res.dotAssign_operation (GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_app_list, GGS_string (",\n"
      "  ") COMMA_HERE)) ;
    var_cas_res.appendCString ("\n"
      "};\n") ;
  }
  ::routine_doReplace (inLexique,  var_cas_imp,  GGS_string ("$OSAPPLICATIONS$"),  var_cas_res COMMA_SOURCE_FILE_AT_LINE (361)) ;
  ::routine_doReplace (inLexique,  var_cas_imp,  GGS_string ("$OSAPPIDS$"),  var_cas_ids COMMA_SOURCE_FILE_AT_LINE (362)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_apps\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generate_trusted_functions"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_trusted_functions (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_string & /* var_cas_head */,
                                GGS_string & var_cas_obj_head,
                                GGS_string & var_cas_imp COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_trusted_functions at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_11411 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_11411 = NULL ;
    while (((operand_11411 = enumerator_11411.nextObject ()))) {
      macroValidPointer (operand_11411) ;
      { const GGS_app_trusted_obj _var_11573 = operand_11411->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (379)) ; // CAST instruction
        if (_var_11573.getPtr () != NULL) {
          macroValidPointer (_var_11573.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_11573.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_11573.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_11490 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (381)), true) ;
              while (enumerator_11490.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_11490._key (HERE)) ;
                enumerator_11490.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  GGS_string var_cas_fcts = GGS_string ("") ;
  GGS_string var_cas_fct_ids = GGS_string ("") ;
  GGS_string var_cas_fct_table = GGS_string ("") ;
  GGS_uint  var_cas_tf_id = GGS_uint (0U) ;
  {
    GGS_stringset::cEnumerator enumerator_11710 (var_cas_tfs, true) ;
    if (enumerator_11710 .hasCurrentObject ()) {
      var_cas_fct_table = GGS_string ("CONST(tpl_trusted_fct, OS_APPL_CODE)\n") ;
      var_cas_fct_table.appendCString ("  tpl_trusted_fct_table[TRUSTED_FCT_COUNT] = {\n") ;
      bool _foreach_loop_11710 ;
      do{
        var_cas_fcts.appendCString ("FUNC(void, OS_APPL_CODE) TRUSTED_") ;
        var_cas_fcts.dotAssign_operation (enumerator_11710._key (HERE)) ;
        var_cas_fcts.appendCString ("(\n") ;
        var_cas_fcts.appendCString ("  CONST(TrustedFunctionIndexType, AUTOMATIC) idx,\n") ;
        var_cas_fcts.appendCString ("  CONST(TrustedFunctionParameterRefType, AUTOMATIC) params);\n") ;
        var_cas_fct_ids.appendCString ("#define ") ;
        var_cas_fct_ids.dotAssign_operation (enumerator_11710._key (HERE)) ;
        var_cas_fct_ids.appendCString ("_id    ") ;
        var_cas_fct_ids.dotAssign_operation (var_cas_tf_id.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (400))) ;
        var_cas_fct_ids.appendCString ("\n") ;
        var_cas_fct_ids.appendCString ("CONST(TrustedFunctionIndexType, AUTOMATIC) ") ;
        var_cas_fct_ids.dotAssign_operation (enumerator_11710._key (HERE)) ;
        var_cas_fct_ids.appendCString (" = ") ;
        var_cas_fct_ids.dotAssign_operation (enumerator_11710._key (HERE)) ;
        var_cas_fct_ids.appendCString ("_id;\n") ;
        var_cas_fct_table.appendCString ("  TRUSTED_") ;
        var_cas_fct_table.dotAssign_operation (enumerator_11710._key (HERE)) ;
        var_cas_tf_id.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (403)) ;
        enumerator_11710.next () ;
        _foreach_loop_11710 = (enumerator_11710 .hasCurrentObject ()) ;
        if (_foreach_loop_11710) {
          var_cas_fct_table.appendCString (",\n") ;
        }
      }while (_foreach_loop_11710) ;
      var_cas_fct_table.appendCString ("\n"
        "};\n") ;
    }
  }
  ::routine_doReplace (inLexique,  var_cas_imp,  GGS_string ("$TRUSTED_IDS$"),  var_cas_fct_ids COMMA_SOURCE_FILE_AT_LINE (410)) ;
  ::routine_doReplace (inLexique,  var_cas_imp,  GGS_string ("$TRUSTED_FCTS$"),  var_cas_fcts COMMA_SOURCE_FILE_AT_LINE (411)) ;
  ::routine_doReplace (inLexique,  var_cas_imp,  GGS_string ("$TRUSTED_TABLE$"),  var_cas_fct_table COMMA_SOURCE_FILE_AT_LINE (412)) ;
  ::routine_doReplace (inLexique,  var_cas_obj_head,  GGS_string ("$TRUSTED_FCT_COUNT$"),  var_cas_tf_id.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (413)) COMMA_SOURCE_FILE_AT_LINE (413)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_trusted_functions\n") ;
  #endif
}

//---------------------------------------------------------------------------*

