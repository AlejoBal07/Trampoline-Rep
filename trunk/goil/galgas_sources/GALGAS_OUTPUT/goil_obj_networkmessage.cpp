//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_obj_networkmessage.cpp'                     *
//                        Generated by version 1.8.0                         *
//                       march 5th, 2009, at 9h28'52"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 451
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_networkmessage.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_networkmessage.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'networkmess'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_networkmess_goil_obj_networkmessage_55_18_ (goil_lexique & _inLexique,
                                GGS_netmess_map  &var_cas_netmess) {
  GGS_netmess_obj  var_cas_nm ;
  GGS_lstring  var_cas_name ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NETWORKMESSAGE) COMMA_HERE) ;
  _inLexique._assignFromAttribute_att_token (var_cas_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  if ((var_cas_netmess.reader_hasKey (_inLexique, var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) COMMA_SOURCE_FILE_AT_LINE (63))).isBuiltAndTrue ()) {
    var_cas_netmess.modifier_del (_inLexique, var_cas_name, var_cas_nm COMMA_SOURCE_FILE_AT_LINE (64)) ;
  }else{
    var_cas_nm = GGS_netmess_obj ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), GGS_void_netprop ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) COMMA_HERE) ;
  }
  GGS_lstring  var_cas_ipdu ;
  var_cas_ipdu = var_cas_nm.reader_ipdu (_inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  GGS_base_netprop  var_cas_netprop ;
  var_cas_netprop = var_cas_nm.reader_netprop (_inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_networkmessage_0 (_inLexique)) {
        case 2 : {
          nt_ipdu_ref_ (_inLexique, var_cas_ipdu) ;
          } break ;
        case 3 : {
          nt_net_messageproperty_ (_inLexique, var_cas_netprop) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  GGS_lstring  automatic_var_0 ;
  nt_description_ (_inLexique, automatic_var_0) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_nm = GGS_netmess_obj ::constructor_new (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE), var_cas_ipdu, var_cas_netprop COMMA_HERE) ;
  var_cas_netmess.modifier_put (_inLexique, var_cas_name, var_cas_nm COMMA_SOURCE_FILE_AT_LINE (89)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'ipdu_ref'                *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_ipdu_ref_goil_obj_networkmessage_92_15_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_ipdu) {
  GGS_lstring  var_cas_ip ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_IPDU) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  _inLexique._assignFromAttribute_att_token (var_cas_ip) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  if (((var_cas_ipdu.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (97)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "IPDU is already defined for this network message") COMMA_SOURCE_FILE_AT_LINE (99)) ;
    var_cas_ipdu.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "wad defined here") COMMA_SOURCE_FILE_AT_LINE (100)) ;
  }else{
    var_cas_ipdu = var_cas_ip ;
  }
  GGS_lstring  automatic_var_1 ;
  nt_description_ (_inLexique, automatic_var_1) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'net_messageproperty'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_net_messageproperty_goil_obj_networkmessage_106_26_ (goil_lexique & _inLexique,
                                GGS_base_netprop  &var_cas_netprop) {
  GGS_base_netprop  var_cas_nn ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MESSAGEPROPERTY) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  switch (select_goil_obj_networkmessage_1 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STATIC) COMMA_HERE) ;
      nt_static_mp_ (_inLexique, var_cas_nn) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_DYNAMIC) COMMA_HERE) ;
      nt_dynamic_mp_ (_inLexique, var_cas_nn) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ZERO) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
      GGS_lstring  var_cas_dir ;
      nt_direction_ (_inLexique, var_cas_dir) ;
      var_cas_nn = GGS_zero_netprop ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_dir COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  { const GGS_base_netprop _var_3023 = var_cas_netprop ; // CAST instruction
    if (_var_3023.getPtr () != NULL) {
      macroValidPointer (_var_3023.getPtr ()) ;
      if (typeid (cPtr_void_netprop) == typeid (* (_var_3023.getPtr ()))) {
        var_cas_netprop = var_cas_nn ;
      }else{
        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "MESSAGEPROPERTY is already defined") COMMA_SOURCE_FILE_AT_LINE (133)) ;
        var_cas_netprop.reader_loc (_inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was defined here") COMMA_SOURCE_FILE_AT_LINE (134)) ;
      }
    }
  }
  GGS_lstring  automatic_var_2 ;
  nt_description_ (_inLexique, automatic_var_2) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'static_mp'                *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_static_mp_goil_obj_networkmessage_138_16_ (goil_lexique & _inLexique,
                                GGS_base_netprop  &var_cas_netprop) {
  GGS_lsint  var_cas_sizeinbits ;
  var_cas_sizeinbits = GGS_lsint ::constructor_new (_inLexique, GGS_sint (true, 1L)._operator_unary_minus (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_bitordering ;
  var_cas_bitordering = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lsint  var_cas_bitposition ;
  var_cas_bitposition = GGS_lsint ::constructor_new (_inLexique, GGS_sint (true, 1L)._operator_unary_minus (_inLexique COMMA_HERE), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_datainterpretation ;
  var_cas_datainterpretation = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_basic_type  var_cas_initialvalue ;
  var_cas_initialvalue = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstring  var_cas_direction ;
  var_cas_direction = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_location  var_cas_where ;
  var_cas_where = GGS_location (_inLexique) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_goil_obj_networkmessage_2 (_inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_sib ;
          nt_sizeinbits_ (_inLexique, var_cas_sib) ;
          if (((var_cas_sizeinbits.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (154)))._operator_isEqual (GGS_sint (true, 1L)._operator_unary_minus (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_sizeinbits = GGS_lsint ::constructor_new (_inLexique, var_cas_sib.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (155)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (155)), GGS_location (_inLexique) COMMA_HERE) ;
          }else{
            var_cas_sib.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "SIZEINBITS is already defined") COMMA_SOURCE_FILE_AT_LINE (158)) ;
            var_cas_sizeinbits.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was defined here") COMMA_SOURCE_FILE_AT_LINE (159)) ;
          }
          } break ;
        case 3 : {
          GGS_lstring  var_cas_bo ;
          nt_bitordering_ (_inLexique, var_cas_bo) ;
          if (((var_cas_bitordering.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            var_cas_bitordering = var_cas_bo ;
          }else{
            var_cas_bo.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "BITORDERING is already defined") COMMA_SOURCE_FILE_AT_LINE (168)) ;
            var_cas_bitordering.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was define here") COMMA_SOURCE_FILE_AT_LINE (169)) ;
          }
          } break ;
        case 4 : {
          GGS_luint64  var_cas_bp ;
          nt_bitposition_ (_inLexique, var_cas_bp) ;
          if (((var_cas_bitposition.reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (174)))._operator_isEqual (GGS_sint (true, 1L)._operator_unary_minus (_inLexique COMMA_HERE))).isBuiltAndTrue ()) {
            var_cas_bitposition = GGS_lsint ::constructor_new (_inLexique, var_cas_bp.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)).reader_sint (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)), GGS_location (_inLexique) COMMA_HERE) ;
          }else{
            var_cas_bp.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "BITPOSITION is already defined") COMMA_SOURCE_FILE_AT_LINE (178)) ;
            var_cas_bitposition.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was defined here") COMMA_SOURCE_FILE_AT_LINE (179)) ;
          }
          } break ;
        case 5 : {
          GGS_lstring  var_cas_di ;
          nt_datainterpretation_ (_inLexique, var_cas_di) ;
          if (((var_cas_datainterpretation.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (184)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            var_cas_datainterpretation = var_cas_di ;
          }else{
            var_cas_di.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "DATAINTERPRETATION is already defined") COMMA_SOURCE_FILE_AT_LINE (188)) ;
            var_cas_datainterpretation.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was define here") COMMA_SOURCE_FILE_AT_LINE (189)) ;
          }
          } break ;
        case 6 : {
          GGS_basic_type  var_cas_iv ;
          nt_initialvalue_ (_inLexique, var_cas_iv) ;
          { const GGS_basic_type _var_4782 = var_cas_initialvalue ; // CAST instruction
            if (_var_4782.getPtr () != NULL) {
              macroValidPointer (_var_4782.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_4782.getPtr ()))) {
                var_cas_initialvalue = var_cas_iv ;
              }else{
                var_cas_iv.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "INITIALVALUE already defined") COMMA_SOURCE_FILE_AT_LINE (198)) ;
                var_cas_initialvalue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (198)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was defined here") COMMA_SOURCE_FILE_AT_LINE (199)) ;
              }
            }
          }
          } break ;
        case 7 : {
          GGS_lstring  var_cas_dir ;
          nt_direction_ (_inLexique, var_cas_dir) ;
          if (((var_cas_direction.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            var_cas_direction = var_cas_dir ;
          }else{
            var_cas_dir.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "DIRECTION is already defined") COMMA_SOURCE_FILE_AT_LINE (208)) ;
            var_cas_direction.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was define here") COMMA_SOURCE_FILE_AT_LINE (209)) ;
          }
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  if (((var_cas_direction.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (215)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "DIRECTION attribute is missing") COMMA_SOURCE_FILE_AT_LINE (217)) ;
  }
  GGS_luint64  var_cas_iv ;
  { const GGS_basic_type _var_5351 = var_cas_initialvalue ; // CAST instruction
    if (_var_5351.getPtr () != NULL) {
      macroValidPointer (_var_5351.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5351.getPtr ()))) {
        const GGS_uint64_class var_cas_ui (_var_5351.getPtr ()) ;
        var_cas_iv = GGS_luint64 ::constructor_new (_inLexique, var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (222)), var_cas_ui.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (222)) COMMA_HERE) ;
      }else{
        var_cas_iv = GGS_luint64 ::constructor_new (_inLexique, GGS_uint64 (true, 0LLU), GGS_location (_inLexique) COMMA_HERE) ;
      }
    }
  }
  var_cas_netprop = GGS_static_netprop ::constructor_new (_inLexique, var_cas_where, var_cas_sizeinbits, var_cas_bitordering, var_cas_bitposition, var_cas_datainterpretation, var_cas_iv, var_cas_direction COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'dynamic_mp'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_dynamic_mp_goil_obj_networkmessage_239_17_ (goil_lexique & _inLexique,
                                GGS_base_netprop  &var_cas_netprop) {
  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "DYNAMIC network messages are not supported") COMMA_SOURCE_FILE_AT_LINE (243)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_goil_obj_networkmessage_3 (_inLexique)) {
        case 2 : {
          GGS_luint64  automatic_var_3 ;
          nt_maxsizeinbits_ (_inLexique, automatic_var_3) ;
          } break ;
        case 3 : {
          GGS_lstring  automatic_var_4 ;
          nt_bitordering_ (_inLexique, automatic_var_4) ;
          } break ;
        case 4 : {
          GGS_luint64  automatic_var_5 ;
          nt_bitposition_ (_inLexique, automatic_var_5) ;
          } break ;
        case 5 : {
          GGS_basic_type  automatic_var_6 ;
          nt_initialvalue_ (_inLexique, automatic_var_6) ;
          } break ;
        case 6 : {
          GGS_lstring  automatic_var_7 ;
          nt_direction_ (_inLexique, automatic_var_7) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  var_cas_netprop = GGS_void_netprop ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'sizeinbits'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_sizeinbits_goil_obj_networkmessage_255_17_ (goil_lexique & _inLexique,
                                GGS_luint64  &var_cas_sib) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SIZEINBITS) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  _inLexique._assignFromAttribute_integerNumber (var_cas_sib) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
  GGS_lstring  automatic_var_8 ;
  nt_description_ (_inLexique, automatic_var_8) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'maxsizeinbits'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_maxsizeinbits_goil_obj_networkmessage_264_20_ (goil_lexique & _inLexique,
                                GGS_luint64  &var_cas_msib) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MAXSIZEINBITS) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  _inLexique._assignFromAttribute_integerNumber (var_cas_msib) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
  GGS_lstring  automatic_var_9 ;
  nt_description_ (_inLexique, automatic_var_9) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'bitordering'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_bitordering_goil_obj_networkmessage_273_18_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_bo) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_BITORDERING) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  switch (select_goil_obj_networkmessage_4 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_BIGENDIAN) COMMA_HERE) ;
      var_cas_bo = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "big"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LITTLEENDIAN) COMMA_HERE) ;
      var_cas_bo = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "little"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  automatic_var_10 ;
  nt_description_ (_inLexique, automatic_var_10) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'bitposition'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_bitposition_goil_obj_networkmessage_286_18_ (goil_lexique & _inLexique,
                                GGS_luint64  &var_cas_bp) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_BITPOSITION) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  _inLexique._assignFromAttribute_integerNumber (var_cas_bp) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
  GGS_lstring  automatic_var_11 ;
  nt_description_ (_inLexique, automatic_var_11) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'datainterpretation'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_datainterpretation_goil_obj_networkmessage_295_25_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_di) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_DATAINTERPRETATION) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  switch (select_goil_obj_networkmessage_5 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_UNSIGNEDINTEGER) COMMA_HERE) ;
      var_cas_di = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "unsignedinteger"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_BYTEARRAY) COMMA_HERE) ;
      var_cas_di = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "bytearray"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  automatic_var_12 ;
  nt_description_ (_inLexique, automatic_var_12) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'direction'                *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_networkmessage::
pr_direction_goil_obj_networkmessage_308_16_ (goil_lexique & _inLexique,
                                GGS_lstring  &var_cas_dir) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_DIRECTION) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
  switch (select_goil_obj_networkmessage_6 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SENT) COMMA_HERE) ;
      var_cas_dir = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sent"), GGS_location (_inLexique) COMMA_HERE) ;
      switch (select_goil_obj_networkmessage_7 (_inLexique)) {
        case 1 : {
          GGS_lstring  automatic_var_13 ;
          nt_transferproperty_ (_inLexique, automatic_var_13) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RECEIVED) COMMA_HERE) ;
      var_cas_dir = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "received"), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  automatic_var_14 ;
  nt_description_ (_inLexique, automatic_var_14) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

