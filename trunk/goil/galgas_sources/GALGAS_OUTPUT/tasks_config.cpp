//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'tasks_config.cpp'                           *
//                        Generated by version 1.9.6                         *
//                     december 3rd, 2009, at 8h21'16"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 621
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "tasks_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "tasks_config.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTasksList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_task_map::cEnumerator enumerator_1130 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (42)), true) ;
    const GGS_task_map::cElement * operand_1130 = NULL ;
    while (((operand_1130 = enumerator_1130.nextObject ()))) {
      macroValidPointer (operand_1130) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("name"), GGS_location (inLexique) COMMA_HERE),  operand_1130->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44)) COMMA_SOURCE_FILE_AT_LINE (44)) ;
      var_cas_taskList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKS"), GGS_location (inLexique) COMMA_HERE),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (47)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*

