//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_obj_os.cpp'                           *
//                        Generated by version 1.8.0                         *
//                      march 6th, 2009, at 21h27'46"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 451
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_os.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_os.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of production rule 'os'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_os::
pr_os_goil_obj_os_48_9_ (goil_lexique & _inLexique,
                                GGS_os_obj  &var_cas_os) {
  GGS_lstring  var_cas_status ;
  var_cas_status = var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (52)) ;
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ;
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
  GGS_basic_type  var_cas_protectionhook ;
  var_cas_protectionhook = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (57)) ;
  GGS_lstring  var_cas_scalabilityclass ;
  var_cas_scalabilityclass = var_cas_os.reader_scalabilityclass (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)) ;
  GGS_basic_type  var_cas_stackmonitoring ;
  var_cas_stackmonitoring = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)) ;
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)) ;
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (61)) ;
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
  GGS_lstringlist  var_cas_app_src ;
  var_cas_app_src = var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) ;
  GGS_lstringlist  var_cas_cflags ;
  var_cas_cflags = var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
  GGS_lstringlist  var_cas_asflags ;
  var_cas_asflags = var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
  GGS_lstringlist  var_cas_ldflags ;
  var_cas_ldflags = var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_lstring  var_cas_app_name ;
  var_cas_app_name = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_ident_map  var_cas_others ;
  var_cas_others = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OS) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_os_0 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_st ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STATUS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_os_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EXTENDED) COMMA_HERE) ;
              var_cas_st = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "extended"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STANDARD) COMMA_HERE) ;
              var_cas_st = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "standard"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_0 ;
          nt_description_ (_inLexique, automatic_var_0) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_lstring_if_empty (_inLexique,  var_cas_status,  var_cas_st,  GGS_string (true, "STATUS") COMMA_SOURCE_FILE_AT_LINE (84)) ;
          } break ;
        case 3 : {
          GGS_lbool  var_cas_suh ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STARTUPHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_suh) ;
          ::routine_set_bool (_inLexique,  var_cas_startuphook,  var_cas_suh,  GGS_string (true, "STARTUPHOOK") COMMA_SOURCE_FILE_AT_LINE (88)) ;
          GGS_lstring  automatic_var_1 ;
          nt_description_ (_inLexique, automatic_var_1) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_lbool  var_cas_sdh ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SHUTDOWNHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_sdh) ;
          GGS_lstring  automatic_var_2 ;
          nt_description_ (_inLexique, automatic_var_2) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_shutdownhook,  var_cas_sdh,  GGS_string (true, "SHUTDOWNHOOK") COMMA_SOURCE_FILE_AT_LINE (93)) ;
          } break ;
        case 5 : {
          GGS_lbool  var_cas_eh ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ERRORHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_eh) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (_inLexique, automatic_var_3) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_errorhook,  var_cas_eh,  GGS_string (true, "ERRORHOOK") COMMA_SOURCE_FILE_AT_LINE (97)) ;
          } break ;
        case 6 : {
          GGS_lbool  var_cas_preth ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PRETASKHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_preth) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (_inLexique, automatic_var_4) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_pretaskhook,  var_cas_preth,  GGS_string (true, "PRETASKHOOK") COMMA_SOURCE_FILE_AT_LINE (101)) ;
          } break ;
        case 7 : {
          GGS_lbool  var_cas_posth ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_POSTTASKHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_posth) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (_inLexique, automatic_var_5) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_posttaskhook,  var_cas_posth,  GGS_string (true, "POSTTASKHOOK") COMMA_SOURCE_FILE_AT_LINE (105)) ;
          } break ;
        case 8 : {
          GGS_lbool  var_cas_proth ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PROTECTIONHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_proth) ;
          GGS_lstring  automatic_var_6 ;
          nt_description_ (_inLexique, automatic_var_6) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (109))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use PROTECTIONHOOK attribute in OS object") COMMA_SOURCE_FILE_AT_LINE (111)) ;
          }
          ::routine_set_bool (_inLexique,  var_cas_protectionhook,  var_cas_proth,  GGS_string (true, "PROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (112)) ;
          } break ;
        case 9 : {
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (114))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use SCALABILITYCLASS attribute in OS object") COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SCALABILITYCLASS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          if (((var_cas_scalabilityclass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "SCALABILITYCLASS already defined for OS object") COMMA_SOURCE_FILE_AT_LINE (120)) ;
          }
          switch (select_goil_obj_os_2 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC1) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc1"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC2) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc2"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC3) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc3"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC4) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc4"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTO) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "auto"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_7 ;
          nt_description_ (_inLexique, automatic_var_7) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 10 : {
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (134))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use STACKMONITORING attribute in OS object") COMMA_SOURCE_FILE_AT_LINE (136)) ;
          }
          GGS_lbool  var_cas_stackmon ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STACKMONITORING) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_stackmon) ;
          ::routine_set_bool (_inLexique,  var_cas_stackmonitoring,  var_cas_stackmon,  GGS_string (true, "STACKMONITORING") COMMA_SOURCE_FILE_AT_LINE (139)) ;
          GGS_lstring  automatic_var_8 ;
          nt_description_ (_inLexique, automatic_var_8) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 11 : {
          GGS_lbool  var_cas_ugsi ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_USEGETSERVICEID) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_ugsi) ;
          ::routine_set_bool (_inLexique,  var_cas_usegetserviceid,  var_cas_ugsi,  GGS_string (true, "USEGETSERVICEID") COMMA_SOURCE_FILE_AT_LINE (144)) ;
          GGS_lstring  automatic_var_9 ;
          nt_description_ (_inLexique, automatic_var_9) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 12 : {
          GGS_lbool  var_cas_upa ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_USEPARAMETERACCESS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_upa) ;
          ::routine_set_bool (_inLexique,  var_cas_useparameteraccess,  var_cas_upa,  GGS_string (true, "USEPARAMETERACCESS") COMMA_SOURCE_FILE_AT_LINE (149)) ;
          GGS_lstring  automatic_var_10 ;
          nt_description_ (_inLexique, automatic_var_10) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 13 : {
          GGS_lbool  var_cas_urs ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_USERESSCHEDULER) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_urs) ;
          ::routine_set_bool (_inLexique,  var_cas_useresscheduler,  var_cas_urs,  GGS_string (true, "USERESSCHEDULER") COMMA_SOURCE_FILE_AT_LINE (154)) ;
          GGS_lstring  automatic_var_11 ;
          nt_description_ (_inLexique, automatic_var_11) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 14 : {
          GGS_lstring  var_cas_src ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APP_5FSRC) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_src) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_12 ;
          nt_description_ (_inLexique, automatic_var_12) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_checkFileExists (_inLexique,  var_cas_src COMMA_SOURCE_FILE_AT_LINE (159)) ;
          var_cas_app_src._addAssign_operation (var_cas_src) ;
          } break ;
        case 15 : {
          GGS_lstring  var_cas_flag ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_CFLAGS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_flag) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_13 ;
          nt_description_ (_inLexique, automatic_var_13) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_cflags._addAssign_operation (var_cas_flag) ;
          } break ;
        case 16 : {
          GGS_lstring  var_cas_flag ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ASFLAGS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_flag) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_14 ;
          nt_description_ (_inLexique, automatic_var_14) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_asflags._addAssign_operation (var_cas_flag) ;
          } break ;
        case 17 : {
          GGS_lstring  var_cas_flag ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LDFLAGS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_flag) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_15 ;
          nt_description_ (_inLexique, automatic_var_15) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_ldflags._addAssign_operation (var_cas_flag) ;
          } break ;
        case 18 : {
          GGS_lstring  var_cas_an ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APP_5FNAME) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_an) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_16 ;
          nt_description_ (_inLexique, automatic_var_16) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_lstring_if_empty (_inLexique,  var_cas_app_name,  var_cas_an,  GGS_string (true, "APP_NAME") COMMA_SOURCE_FILE_AT_LINE (176)) ;
          } break ;
        case 19 : {
          GGS_lstring  var_cas_tbp ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_tbp) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_17 ;
          nt_description_ (_inLexique, automatic_var_17) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_lstring_if_empty (_inLexique,  var_cas_tpl_base_path,  var_cas_tbp,  GGS_string (true, "TRAMPOLINE_BASE_PATH") COMMA_SOURCE_FILE_AT_LINE (180)) ;
          } break ;
        case 20 : {
          nt_free_field_ (_inLexique, var_cas_others) ;
          GGS_lstring  automatic_var_18 ;
          nt_description_ (_inLexique, automatic_var_18) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_os = GGS_os_obj ::constructor_new (_inLexique, var_cas_desc, var_cas_status, var_cas_startuphook, var_cas_shutdownhook, var_cas_errorhook, var_cas_pretaskhook, var_cas_posttaskhook, var_cas_protectionhook, var_cas_scalabilityclass, var_cas_stackmonitoring, var_cas_usegetserviceid, var_cas_useparameteraccess, var_cas_useresscheduler, var_cas_app_src, var_cas_cflags, var_cas_asflags, var_cas_ldflags, var_cas_app_name, var_cas_tpl_base_path, var_cas_others COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

