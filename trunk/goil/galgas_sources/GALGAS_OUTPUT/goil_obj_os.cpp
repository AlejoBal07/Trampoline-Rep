//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_obj_os.cpp'                           *
//                        Generated by version 1.8.2                         *
//                       may 14th, 2009, at 14h52'34"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_os.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_os.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of production rule 'os'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_os::
pr_os_goil_obj_os_48_9_ (goil_lexique & _inLexique,
                                GGS_os_obj  &var_cas_os) {
  GGS_lstring  var_cas_status ;
  var_cas_status = var_cas_os.reader_status (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
  GGS_basic_type  var_cas_startuphook ;
  var_cas_startuphook = var_cas_os.reader_startuphook (_inLexique COMMA_SOURCE_FILE_AT_LINE (52)) ;
  GGS_basic_type  var_cas_shutdownhook ;
  var_cas_shutdownhook = var_cas_os.reader_shutdownhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
  GGS_basic_type  var_cas_errorhook ;
  var_cas_errorhook = var_cas_os.reader_errorhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ;
  GGS_basic_type  var_cas_pretaskhook ;
  var_cas_pretaskhook = var_cas_os.reader_pretaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_basic_type  var_cas_posttaskhook ;
  var_cas_posttaskhook = var_cas_os.reader_posttaskhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
  GGS_basic_type  var_cas_protectionhook ;
  var_cas_protectionhook = var_cas_os.reader_protectionhook (_inLexique COMMA_SOURCE_FILE_AT_LINE (57)) ;
  GGS_lstring  var_cas_scalabilityclass ;
  var_cas_scalabilityclass = var_cas_os.reader_scalabilityclass (_inLexique COMMA_SOURCE_FILE_AT_LINE (58)) ;
  GGS_basic_type  var_cas_stackmonitoring ;
  var_cas_stackmonitoring = var_cas_os.reader_stackmonitoring (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)) ;
  GGS_basic_type  var_cas_usegetserviceid ;
  var_cas_usegetserviceid = var_cas_os.reader_usegetserviceid (_inLexique COMMA_SOURCE_FILE_AT_LINE (60)) ;
  GGS_basic_type  var_cas_useparameteraccess ;
  var_cas_useparameteraccess = var_cas_os.reader_useparameteraccess (_inLexique COMMA_SOURCE_FILE_AT_LINE (61)) ;
  GGS_basic_type  var_cas_useresscheduler ;
  var_cas_useresscheduler = var_cas_os.reader_useresscheduler (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
  GGS_basic_type  var_cas_systemcall ;
  var_cas_systemcall = var_cas_os.reader_systemcall (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) ;
  GGS_lstringlist  var_cas_app_src ;
  var_cas_app_src = var_cas_os.reader_app_src (_inLexique COMMA_SOURCE_FILE_AT_LINE (64)) ;
  GGS_lstringlist  var_cas_cflags ;
  var_cas_cflags = var_cas_os.reader_cflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
  GGS_lstringlist  var_cas_asflags ;
  var_cas_asflags = var_cas_os.reader_asflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_lstringlist  var_cas_ldflags ;
  var_cas_ldflags = var_cas_os.reader_ldflags (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_lstring  var_cas_app_name ;
  var_cas_app_name = var_cas_os.reader_app_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_lstring  var_cas_tpl_base_path ;
  var_cas_tpl_base_path = var_cas_os.reader_tpl_base_path (_inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_trace  var_cas_trace ;
  var_cas_trace = var_cas_os.reader_trace (_inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_ident_map  var_cas_others ;
  var_cas_others = var_cas_os.reader_others (_inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OS) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_os_0 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_st ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STATUS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_os_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EXTENDED) COMMA_HERE) ;
              var_cas_st = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "extended"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STANDARD) COMMA_HERE) ;
              var_cas_st = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "standard"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_0 ;
          nt_description_ (_inLexique, automatic_var_0) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_lstring_if_empty (_inLexique,  var_cas_status,  var_cas_st,  GGS_string (true, "STATUS") COMMA_SOURCE_FILE_AT_LINE (86)) ;
          } break ;
        case 3 : {
          GGS_lbool  var_cas_suh ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STARTUPHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_suh) ;
          ::routine_set_bool (_inLexique,  var_cas_startuphook,  var_cas_suh,  GGS_string (true, "STARTUPHOOK") COMMA_SOURCE_FILE_AT_LINE (90)) ;
          GGS_lstring  automatic_var_1 ;
          nt_description_ (_inLexique, automatic_var_1) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_lbool  var_cas_sdh ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SHUTDOWNHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_sdh) ;
          GGS_lstring  automatic_var_2 ;
          nt_description_ (_inLexique, automatic_var_2) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_shutdownhook,  var_cas_sdh,  GGS_string (true, "SHUTDOWNHOOK") COMMA_SOURCE_FILE_AT_LINE (95)) ;
          } break ;
        case 5 : {
          GGS_lbool  var_cas_eh ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ERRORHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_eh) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (_inLexique, automatic_var_3) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_errorhook,  var_cas_eh,  GGS_string (true, "ERRORHOOK") COMMA_SOURCE_FILE_AT_LINE (99)) ;
          } break ;
        case 6 : {
          GGS_lbool  var_cas_preth ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PRETASKHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_preth) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (_inLexique, automatic_var_4) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_pretaskhook,  var_cas_preth,  GGS_string (true, "PRETASKHOOK") COMMA_SOURCE_FILE_AT_LINE (103)) ;
          } break ;
        case 7 : {
          GGS_lbool  var_cas_posth ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_POSTTASKHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_posth) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (_inLexique, automatic_var_5) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_bool (_inLexique,  var_cas_posttaskhook,  var_cas_posth,  GGS_string (true, "POSTTASKHOOK") COMMA_SOURCE_FILE_AT_LINE (107)) ;
          } break ;
        case 8 : {
          GGS_lbool  var_cas_proth ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PROTECTIONHOOK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_proth) ;
          GGS_lstring  automatic_var_6 ;
          nt_description_ (_inLexique, automatic_var_6) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (111))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use PROTECTIONHOOK attribute in OS object") COMMA_SOURCE_FILE_AT_LINE (113)) ;
          }
          ::routine_set_bool (_inLexique,  var_cas_protectionhook,  var_cas_proth,  GGS_string (true, "PROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (114)) ;
          } break ;
        case 9 : {
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (116))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use SCALABILITYCLASS attribute in OS object") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SCALABILITYCLASS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          if (((var_cas_scalabilityclass.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (120)))._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "SCALABILITYCLASS already defined for OS object") COMMA_SOURCE_FILE_AT_LINE (122)) ;
          }
          switch (select_goil_obj_os_2 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC1) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc1"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC2) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc2"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 3 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC3) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc3"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 4 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SC4) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sc4"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 5 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTO) COMMA_HERE) ;
              var_cas_scalabilityclass = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "auto"), GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_7 ;
          nt_description_ (_inLexique, automatic_var_7) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 10 : {
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (136))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use STACKMONITORING attribute in OS object") COMMA_SOURCE_FILE_AT_LINE (138)) ;
          }
          GGS_lbool  var_cas_stackmon ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STACKMONITORING) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_stackmon) ;
          ::routine_set_bool (_inLexique,  var_cas_stackmonitoring,  var_cas_stackmon,  GGS_string (true, "STACKMONITORING") COMMA_SOURCE_FILE_AT_LINE (141)) ;
          GGS_lstring  automatic_var_8 ;
          nt_description_ (_inLexique, automatic_var_8) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 11 : {
          GGS_lbool  var_cas_ugsi ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_USEGETSERVICEID) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_ugsi) ;
          ::routine_set_bool (_inLexique,  var_cas_usegetserviceid,  var_cas_ugsi,  GGS_string (true, "USEGETSERVICEID") COMMA_SOURCE_FILE_AT_LINE (146)) ;
          GGS_lstring  automatic_var_9 ;
          nt_description_ (_inLexique, automatic_var_9) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 12 : {
          GGS_lbool  var_cas_upa ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_USEPARAMETERACCESS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_upa) ;
          ::routine_set_bool (_inLexique,  var_cas_useparameteraccess,  var_cas_upa,  GGS_string (true, "USEPARAMETERACCESS") COMMA_SOURCE_FILE_AT_LINE (151)) ;
          GGS_lstring  automatic_var_10 ;
          nt_description_ (_inLexique, automatic_var_10) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 13 : {
          GGS_lbool  var_cas_urs ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_USERESSCHEDULER) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_urs) ;
          ::routine_set_bool (_inLexique,  var_cas_useresscheduler,  var_cas_urs,  GGS_string (true, "USERESSCHEDULER") COMMA_SOURCE_FILE_AT_LINE (156)) ;
          GGS_lstring  automatic_var_11 ;
          nt_description_ (_inLexique, automatic_var_11) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 14 : {
          GGS_lbool  var_cas_sc ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SYSTEM_5FCALL) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          nt_boolean_ (_inLexique, var_cas_sc) ;
          ::routine_set_bool (_inLexique,  var_cas_systemcall,  var_cas_sc,  GGS_string (true, "SYSTEM_CALL") COMMA_SOURCE_FILE_AT_LINE (161)) ;
          GGS_lstring  automatic_var_12 ;
          nt_description_ (_inLexique, automatic_var_12) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 15 : {
          GGS_lstring  var_cas_src ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APP_5FSRC) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_src) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_13 ;
          nt_description_ (_inLexique, automatic_var_13) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_checkFileExists (_inLexique,  var_cas_src COMMA_SOURCE_FILE_AT_LINE (166)) ;
          var_cas_app_src._addAssign_operation (var_cas_src) ;
          } break ;
        case 16 : {
          GGS_lstring  var_cas_flag ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_CFLAGS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_flag) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_14 ;
          nt_description_ (_inLexique, automatic_var_14) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_cflags._addAssign_operation (var_cas_flag) ;
          } break ;
        case 17 : {
          GGS_lstring  var_cas_flag ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ASFLAGS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_flag) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_15 ;
          nt_description_ (_inLexique, automatic_var_15) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_asflags._addAssign_operation (var_cas_flag) ;
          } break ;
        case 18 : {
          GGS_lstring  var_cas_flag ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_LDFLAGS) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_flag) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_16 ;
          nt_description_ (_inLexique, automatic_var_16) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          var_cas_ldflags._addAssign_operation (var_cas_flag) ;
          } break ;
        case 19 : {
          GGS_lstring  var_cas_an ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APP_5FNAME) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_an) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_17 ;
          nt_description_ (_inLexique, automatic_var_17) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_lstring_if_empty (_inLexique,  var_cas_app_name,  var_cas_an,  GGS_string (true, "APP_NAME") COMMA_SOURCE_FILE_AT_LINE (183)) ;
          } break ;
        case 20 : {
          GGS_lstring  var_cas_tbp ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_a_string (var_cas_tbp) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
          GGS_lstring  automatic_var_18 ;
          nt_description_ (_inLexique, automatic_var_18) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_set_lstring_if_empty (_inLexique,  var_cas_tpl_base_path,  var_cas_tbp,  GGS_string (true, "TRAMPOLINE_BASE_PATH") COMMA_SOURCE_FILE_AT_LINE (187)) ;
          } break ;
        case 21 : {
          GGS_trace  var_cas_t ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRACE) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_os_3 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
              GGS_trace_method  var_cas_m ;
              var_cas_m = GGS_trace_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_f ;
              var_cas_f = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
              GGS_void  var_cas_void_obj ;
              var_cas_void_obj = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
              GGS_basic_type  var_cas_tt ;
              var_cas_tt = var_cas_void_obj ;
              GGS_basic_type  var_cas_ti ;
              var_cas_ti = var_cas_void_obj ;
              GGS_basic_type  var_cas_tr ;
              var_cas_tr = var_cas_void_obj ;
              GGS_basic_type  var_cas_ta ;
              var_cas_ta = var_cas_void_obj ;
              GGS_basic_type  var_cas_tu ;
              var_cas_tu = var_cas_void_obj ;
              { bool syntaxRepeat_4 = true ;
                while (syntaxRepeat_4) {
                  switch (select_repeat_goil_obj_os_4 (_inLexique)) {
                    case 2 : {
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_METHOD) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      GGS_lstring  var_cas_file ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FILE) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NAME) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      _inLexique._assignFromAttribute_a_string (var_cas_file) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_string) COMMA_HERE) ;
                      ::routine_set_method (_inLexique,  var_cas_m,  GGS_trace_file ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_file COMMA_HERE),  GGS_string (true, "NAME") COMMA_SOURCE_FILE_AT_LINE (206)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    case 3 : {
                      GGS_lstring  var_cas_fmt ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FORMAT) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      _inLexique._assignFromAttribute_att_token (var_cas_fmt) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
                      ::routine_set_lstring_if_empty (_inLexique,  var_cas_f,  var_cas_fmt,  GGS_string (true, "FORMAT") COMMA_SOURCE_FILE_AT_LINE (212)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    case 4 : {
                      GGS_lbool  var_cas_b ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRACE_5FTASK) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      nt_boolean_ (_inLexique, var_cas_b) ;
                      ::routine_set_bool (_inLexique,  var_cas_tt,  var_cas_b,  GGS_string (true, "TRACE_TASK") COMMA_SOURCE_FILE_AT_LINE (216)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    case 5 : {
                      GGS_lbool  var_cas_b ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRACE_5FISR) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      nt_boolean_ (_inLexique, var_cas_b) ;
                      ::routine_set_bool (_inLexique,  var_cas_ti,  var_cas_b,  GGS_string (true, "TRACE_ISR") COMMA_SOURCE_FILE_AT_LINE (220)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    case 6 : {
                      GGS_lbool  var_cas_b ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRACE_5FRESOURCE) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      nt_boolean_ (_inLexique, var_cas_b) ;
                      ::routine_set_bool (_inLexique,  var_cas_tr,  var_cas_b,  GGS_string (true, "TRACE_RESOURCE") COMMA_SOURCE_FILE_AT_LINE (224)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    case 7 : {
                      GGS_lbool  var_cas_b ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRACE_5FALARM) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      nt_boolean_ (_inLexique, var_cas_b) ;
                      ::routine_set_bool (_inLexique,  var_cas_ta,  var_cas_b,  GGS_string (true, "TRACE_ALARM") COMMA_SOURCE_FILE_AT_LINE (228)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    case 8 : {
                      GGS_lbool  var_cas_b ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRACE_5FUSER) COMMA_HERE) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
                      nt_boolean_ (_inLexique, var_cas_b) ;
                      ::routine_set_bool (_inLexique,  var_cas_tu,  var_cas_b,  GGS_string (true, "TRACE_USER") COMMA_SOURCE_FILE_AT_LINE (232)) ;
                      _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_4 = false ;
                      break ;
                  }
                }
              }
              if (((var_cas_f.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (234)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Missing FORMAT in TRACE") COMMA_SOURCE_FILE_AT_LINE (236)) ;
              }
              { const GGS_trace_method _var_7564 = var_cas_m ; // CAST instruction
                if (_var_7564.getPtr () != NULL) {
                  macroValidPointer (_var_7564.getPtr ()) ;
                  if (typeid (cPtr_trace_void) == typeid (* (_var_7564.getPtr ()))) {
                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Missing METHOD in TRACE") COMMA_SOURCE_FILE_AT_LINE (240)) ;
                  }else{
                  }
                }
              }
              var_cas_t = GGS_trace_on ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_f, var_cas_m, var_cas_tt, var_cas_ti, var_cas_tr, var_cas_ta, var_cas_tu COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
              var_cas_t = GGS_trace_off ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_trace _var_7959 = var_cas_trace ; // CAST instruction
            if (_var_7959.getPtr () != NULL) {
              macroValidPointer (_var_7959.getPtr ()) ;
              if (typeid (cPtr_trace) == typeid (* (_var_7959.getPtr ()))) {
                var_cas_trace = var_cas_t ;
              }else{
                var_cas_t.reader_loc (_inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Redefinition of TRACE") COMMA_SOURCE_FILE_AT_LINE (260)) ;
                var_cas_trace.reader_loc (_inLexique COMMA_SOURCE_FILE_AT_LINE (260)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was defined here") COMMA_SOURCE_FILE_AT_LINE (261)) ;
              }
            }
          }
          } break ;
        case 22 : {
          nt_free_field_ (_inLexique, var_cas_others) ;
          GGS_lstring  automatic_var_19 ;
          nt_description_ (_inLexique, automatic_var_19) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  GGS_lstring  var_cas_desc ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_os = GGS_os_obj ::constructor_new (_inLexique, var_cas_desc, var_cas_status, var_cas_startuphook, var_cas_shutdownhook, var_cas_errorhook, var_cas_pretaskhook, var_cas_posttaskhook, var_cas_protectionhook, var_cas_scalabilityclass, var_cas_stackmonitoring, var_cas_usegetserviceid, var_cas_useparameteraccess, var_cas_useresscheduler, var_cas_systemcall, var_cas_app_src, var_cas_cflags, var_cas_asflags, var_cas_ldflags, var_cas_app_name, var_cas_tpl_base_path, var_cas_trace, var_cas_others COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

