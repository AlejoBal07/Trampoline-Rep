//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'template_expression_parser.cpp'                    *
//                       Generated by version 1.9.11                         *
//                      april 29th, 2010, at 10h35'57"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 725
  #error "This file has been compiled with a version of GALGAS that uses libpm version 725, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "template_expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "template_expression_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (119)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (120)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (122)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (143)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (165)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (166)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (168)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7316 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (181))) ;
  if (cond_7316.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the 'not' operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (183)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (184)) ;
  }
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkBitComplementOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkBitComplementOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outResultType = var_cas_inOperandType ;
  const GGS_bool cond_8092 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (199))) ;
  if (cond_8092.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (201)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (202)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkBitComplementOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (220)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (221)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (240)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (241)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (242)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (260)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (261)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (264)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (278)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (279)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (282)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (300)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (301)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (304)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "concatenation_types_checkForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_concatenation_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_concatenation_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (322)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (323)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (326)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_concatenation_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (344)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (345)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (348)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (366)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (367)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (370)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (388)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (389)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (392)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (410)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (411)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (414)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "argumentListSignature"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_argumentListSignature (C_Compiler & inLexique,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_argumentListSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  var_cas_outResult = GGS_string (" this method call has ") ;
  var_cas_outResult.dotAssign_operation (var_cas_inParameterTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (428))) ;
  var_cas_outResult.appendCString (" argument") ;
  var_cas_outResult.dotAssign_operation ((((var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) ;
  {
    GGS_goilTemplateExpressionList::cEnumerator enumerator_17761 (var_cas_inParameterTypeList, true) ;
    const GGS_goilTemplateExpressionList::cElement * operand_17761 = enumerator_17761.nextObject () ;
    if ((operand_17761 != NULL)) {
      var_cas_outResult.appendCString (": ") ;
      bool _foreach_loop_17761 ;
      do{
        macroValidPointer (operand_17761) ;
        var_cas_outResult.dotAssign_operation (operand_17761->mType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (432))) ;
        operand_17761 = enumerator_17761.nextObject () ;
        _foreach_loop_17761 = ((operand_17761 != NULL)) ;
        if (_foreach_loop_17761) {
          var_cas_outResult.appendCString (", ") ;
        }
      }while (_foreach_loop_17761) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_argumentListSignature\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_argumentListSignature (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_goilTemplateExpressionList  arg_0 = GGS_goilTemplateExpressionList ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_argumentListSignature (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_argumentListSignature [1] = {& kTypeDescriptor_GGS_goilTemplateExpressionList } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_argumentListSignature ("argumentListSignature",
                              functionForGenericCall_argumentListSignature,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_argumentListSignature) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInvocationHasNoArgument"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInvocationHasNoArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_18686 = (var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_18686.isBuiltAndTrue ()) {
    var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("calling '")).operator_concat (var_cas_inMethodName)).operator_concat (GGS_string ("' on a "))).operator_concat (var_cas_inType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (450)))).operator_concat (GGS_string (" type requires no argument; "))).operator_concat (function_argumentListSignature (inLexique, var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (451))) COMMA_SOURCE_FILE_AT_LINE (452)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInvocationHasNoArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "templateMethodInvocation"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateMethodInvocation (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_goilTemplateValue  var_cas_inValue,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList,
                                GGS_goilTemplateType & var_cas_outResultType,
                                GGS_goilTemplateValue & var_cas_outResultValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateMethodInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inType.enumValue ()) {
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_19709 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (471))).operator_isEqual (GGS_string ("trueOrFalse")) ;
    if (cond_19709.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (472)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (473)) ;
      var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (475))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("true")) : (GGS_string ("false"))) COMMA_SOURCE_FILE_AT_LINE (474)) ;
    }else if (cond_19709.isBuiltAndFalse ()) {
      const GGS_bool cond_20014 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (477))).operator_isEqual (GGS_string ("yesOrNo")) ;
      if (cond_20014.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (478)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (479)) ;
        var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (481))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("yes")) : (GGS_string ("no"))) COMMA_SOURCE_FILE_AT_LINE (480)) ;
      }else if (cond_20014.isBuiltAndFalse ()) {
        const GGS_bool cond_20233 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (483))).operator_isEqual (GGS_string ("unsigned")) ;
        if (cond_20233.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (484)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (485)) ;
          var_cas_outResultValue = var_cas_inValue ;
        }else if (cond_20233.isBuiltAndFalse ()) {
          var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (489)) ;
          var_cas_outResultValue.drop () ;
          var_cas_outResultType.drop () ;
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    const GGS_bool cond_20634 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (491))).operator_isEqual (GGS_string ("string")) ;
    if (cond_20634.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (492)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (494)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (494)) COMMA_SOURCE_FILE_AT_LINE (494)) ;
    }else if (cond_20634.isBuiltAndFalse ()) {
      const GGS_bool cond_20902 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (495))).operator_isEqual (GGS_string ("hexString")) ;
      if (cond_20902.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (496)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (497)) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (498)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (498)) COMMA_SOURCE_FILE_AT_LINE (498)) ;
      }else if (cond_20902.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (501)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_stringType:
    {
    const GGS_bool cond_21321 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (503))).operator_isEqual (GGS_string ("HTMLRepresentation")) ;
    if (cond_21321.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (504)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (505)) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (506)).reader_HTMLRepresentation () COMMA_SOURCE_FILE_AT_LINE (506)) ;
    }else if (cond_21321.isBuiltAndFalse ()) {
      const GGS_bool cond_21616 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (507))).operator_isEqual (GGS_string ("identifierRepresentation")) ;
      if (cond_21616.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (508)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (509)) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (510)).reader_identifierRepresentation () COMMA_SOURCE_FILE_AT_LINE (510)) ;
      }else if (cond_21616.isBuiltAndFalse ()) {
        const GGS_bool cond_21893 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (511))).operator_isEqual (GGS_string ("lowercaseString")) ;
        if (cond_21893.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (512)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (513)) ;
          var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (514)).reader_lowercaseString () COMMA_SOURCE_FILE_AT_LINE (514)) ;
        }else if (cond_21893.isBuiltAndFalse ()) {
          const GGS_bool cond_22165 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (515))).operator_isEqual (GGS_string ("length")) ;
          if (cond_22165.isBuiltAndTrue ()) {
            ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (516)) ;
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (517)) ;
            var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (518)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (518)) COMMA_SOURCE_FILE_AT_LINE (518)) ;
          }else if (cond_22165.isBuiltAndFalse ()) {
            const GGS_bool cond_22480 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (519))).operator_isEqual (GGS_string ("stringByCapitalizingFirstCharacter")) ;
            if (cond_22480.isBuiltAndTrue ()) {
              ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (520)) ;
              var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (521)) ;
              var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (522)).reader_stringByCapitalizingFirstCharacter () COMMA_SOURCE_FILE_AT_LINE (522)) ;
            }else if (cond_22480.isBuiltAndFalse ()) {
              const GGS_bool cond_22756 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (523))).operator_isEqual (GGS_string ("uppercaseString")) ;
              if (cond_22756.isBuiltAndTrue ()) {
                ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (524)) ;
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (525)) ;
                var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (526)).reader_uppercaseString () COMMA_SOURCE_FILE_AT_LINE (526)) ;
              }else if (cond_22756.isBuiltAndFalse ()) {
                var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (529)) ;
                var_cas_outResultValue.drop () ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    const GGS_bool cond_23162 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (531))).operator_isEqual (GGS_string ("length")) ;
    if (cond_23162.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (532)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (533)) ;
      var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (534)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (534)) COMMA_SOURCE_FILE_AT_LINE (534)) ;
    }else if (cond_23162.isBuiltAndFalse ()) {
      var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (537)) ;
      var_cas_outResultValue.drop () ;
      var_cas_outResultType.drop () ;
    }
    }
    break ;
  case GGS_goilTemplateType::enum_structType:
    {
    var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (540)) ;
    var_cas_outResultValue.drop () ;
    var_cas_outResultType.drop () ;
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateMethodInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_expression_i0_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_5F_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_template_5F_expression_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__7C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_5F_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (580))).operator_or (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (580))) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (581)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__5E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_5F_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (600))).operator_xor (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (600))) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (601)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_expression_i0_parse (C_Lexique_template_5F_scanner & inLexique) {
  nt_relation_5F_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_template_5F_expression_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__7C_) COMMA_HERE) ;
          nt_relation_5F_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__5E_) COMMA_HERE) ;
          nt_relation_5F_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_relation_5F_term_i1_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_5F_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_template_5F_expression_5F_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__26_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_5F_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (646))).operator_and (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (646))) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (647)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_relation_5F_term_i1_parse (C_Lexique_template_5F_scanner & inLexique) {
  nt_relation_5F_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_template_5F_expression_5F_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__26_) COMMA_HERE) ;
          nt_relation_5F_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_relation_5F_factor_i2_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  switch (select_template_5F_expression_5F_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (691)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (695))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (695))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (697))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (697))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (699))).operator_isEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (699))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_structType:
        {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("lists and struct may not be compared") COMMA_SOURCE_FILE_AT_LINE (702)) ;
        var_cas_result.drop () ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (703)) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__21__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (719)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (723))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (723))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (725))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (725))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (727))).operator_isNotEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (727))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_structType:
        {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("lists and struct may not be compared") COMMA_SOURCE_FILE_AT_LINE (730)) ;
        var_cas_result.drop () ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (731)) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3C__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (747)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (751))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (751))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (753))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (753))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
      case GGS_goilTemplateType::enum_structType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (757)) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (773)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (777))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (777))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (779))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (779))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
      case GGS_goilTemplateType::enum_structType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (783)) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3E_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (799)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (803))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (803))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (805))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (805))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
      case GGS_goilTemplateType::enum_structType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3C_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (825)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (829))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (829))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (831))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (831))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
      case GGS_goilTemplateType::enum_structType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (835)) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_relation_5F_factor_i2_parse (C_Lexique_template_5F_scanner & inLexique) {
  nt_simple_5F_expression_parse (inLexique) ;
  switch (select_template_5F_expression_5F_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__21__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3C__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3E_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3C_) COMMA_HERE) ;
      nt_simple_5F_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_simple_5F_expression_i3_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_template_5F_expression_5F_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3C__3C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (877)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (878)).left_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (878)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (878)) COMMA_SOURCE_FILE_AT_LINE (878)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3E__3E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (893)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (894)).right_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (894)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (894)) COMMA_SOURCE_FILE_AT_LINE (894)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2B_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (909)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (910)).add_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (910)) COMMA_SOURCE_FILE_AT_LINE (910)) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_concatenation_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (925)) ;
          var_cas_outValue.mStringValue = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (926))).operator_concat (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (926))) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2D_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (941)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (942)).substract_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (942)) COMMA_SOURCE_FILE_AT_LINE (942)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_simple_5F_expression_i3_parse (C_Lexique_template_5F_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_template_5F_expression_5F_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 6 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_term_i4_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_template_5F_expression_5F_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2A_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (983)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (984)).multiply_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (984)) COMMA_SOURCE_FILE_AT_LINE (984)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2F_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (999)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1000)).divide_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1000)) COMMA_SOURCE_FILE_AT_LINE (1000)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_mod) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1015)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)).modulo_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)) COMMA_SOURCE_FILE_AT_LINE (1016)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_term_i4_parse (C_Lexique_template_5F_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_template_5F_expression_5F_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i5_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i5_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i6_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_not) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_operandType) ;
  var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (1ULL).substract_operation (inLexique, var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)) COMMA_SOURCE_FILE_AT_LINE (1071)) COMMA_SOURCE_FILE_AT_LINE (1071)) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1072)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i6_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i7_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__7E_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_value ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_value, var_cas_operandType) ;
  var_cas_outValue = function_valueWithUnsigned (inLexique, (var_cas_value.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1100))).operator_tilde () COMMA_SOURCE_FILE_AT_LINE (1100)) ;
  ::routine_checkBitComplementOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1101)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i7_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i8_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_yes) COMMA_HERE) ;
  var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (1119)) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (1120)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i8_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_yes) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i9_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_no) COMMA_HERE) ;
  var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (0ULL) COMMA_SOURCE_FILE_AT_LINE (1138)) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i9_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_no) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i10_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outValue = function_valueWithUnsigned (inLexique, var_cas_literalInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1158)) COMMA_SOURCE_FILE_AT_LINE (1158)) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i10_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i11_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  inLexique.assignFromAttribute_a_5F_string (var_cas_literalString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_string) COMMA_HERE) ;
  var_cas_outValue = function_valueWithString (inLexique, var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) COMMA_SOURCE_FILE_AT_LINE (1177)) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (1178)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i11_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_string) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i12_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__5B_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expressionValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
  GGS_lstring  var_cas_templateMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_expressionList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  switch (select_template_5F_expression_5F_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_expressionList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_template_5F_expression_5F_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__5D_) COMMA_HERE) ;
  ::routine_templateMethodInvocation (inLexique,  var_cas_expressionType,  var_cas_expressionValue,  var_cas_templateMethodName,  var_cas_expressionList,  var_cas_outResultType,  var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1234)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i12_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_expression_5F_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            nt_expression_parse (inLexique) ;
          switch (select_template_5F_expression_5F_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "typeError"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_typeError (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFunctionName,
                                const GGS_type  var_cas_inActualType,
                                const GGS_string  var_cas_inExpectedTypeName,
                                const GGS_uint   var_cas_inParameterIndex COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_typeError at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_m = ((((GGS_string ("the function requires the parameter ")).operator_concat (var_cas_inParameterIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1258)))).operator_concat (GGS_string (" to be "))).operator_concat (var_cas_inExpectedTypeName)).operator_concat (GGS_string ("; its type is ")) ;
  const GGS_bool cond_46493 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
  if (cond_46493.isBuiltAndTrue ()) {
    var_cas_m.appendCString ("boolean") ;
  }else if (cond_46493.isBuiltAndFalse ()) {
    const GGS_bool cond_46552 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
    if (cond_46552.isBuiltAndTrue ()) {
      var_cas_m.appendCString ("unsigned") ;
    }else if (cond_46552.isBuiltAndFalse ()) {
      const GGS_bool cond_46608 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
      if (cond_46608.isBuiltAndTrue ()) {
        var_cas_m.appendCString ("string") ;
      }else if (cond_46608.isBuiltAndFalse ()) {
        var_cas_m.appendCString ("a not allowed type") ;
      }
    }
  }
  var_cas_inFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1271)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_typeError\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i13_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_functionOrVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionOrVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_expression_5F_parser_7 (inLexique)) {
    case 1 : {
      const GGS_goilTemplateVariableMap  temp_47076 = var_cas_inVariableMap ;
      if (temp_47076.isBuilt ()) {
        temp_47076 (HERE)->method_searchKey (inLexique, var_cas_functionOrVariableName, var_cas_outResultType, var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1286)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
      GGS_goilTemplateType var_cas_varType ;
      GGS_goilTemplateValue var_cas_varValue ;
      const GGS_goilTemplateVariableMap  temp_47235 = var_cas_inVariableMap ;
      if (temp_47235.isBuilt ()) {
        temp_47235 (HERE)->method_searchKey (inLexique, var_cas_functionOrVariableName, var_cas_varType, var_cas_varValue COMMA_SOURCE_FILE_AT_LINE (1291)) ;
      }
      const GGS_bool cond_47426 = (var_cas_varType).operator_isNotEqual (GGS_goilTemplateType::constructor_structType (inLexique COMMA_SOURCE_FILE_AT_LINE (1292))) ;
      if (cond_47426.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionOrVariableName)).operator_concat (GGS_string ("' is not a struct")) COMMA_SOURCE_FILE_AT_LINE (1294)) ;
      }
      nt_struct_5F_member_ (inLexique, var_cas_varValue.reader_mStructValue (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)), var_cas_outValue, var_cas_outResultType) ;
      } break ;
    case 3 : {
      GGS_function var_cas_f ;
      const GGS_bool cond_47775 = (GGS_function::constructor_isFunctionDefined (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)))).operator_not () ;
      if (cond_47775.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("there is no '")).operator_concat (var_cas_functionOrVariableName)).operator_concat (GGS_string ("' function defined in GOIL template language")) COMMA_SOURCE_FILE_AT_LINE (1301)) ;
        var_cas_f.drop () ;
      }else if (cond_47775.isBuiltAndFalse ()) {
        var_cas_f = GGS_function::constructor_functionWithName (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1302))) ;
      }
      GGS_goilTemplateExpressionList  var_cas_actualArgumentList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_actualArgumentList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_template_5F_expression_5F_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) COMMA_HERE) ;
      GGS_objectlist  var_cas_actualArgumentObjectList = GGS_objectlist ::constructor_emptyList () ;
      const GGS_typelist  var_cas_formalParameterList = var_cas_f.reader_formalParameterTypeList () ;
      const GGS_bool cond_48908 = (var_cas_formalParameterList.reader_length ()).operator_isNotEqual (var_cas_actualArgumentList.reader_length ()) ;
      if (cond_48908.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("this function is invoked with ")).operator_concat (var_cas_actualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1328)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_actualArgumentList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (", but requires "))).operator_concat (var_cas_formalParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_formalParameterList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) COMMA_SOURCE_FILE_AT_LINE (1334)) ;
        var_cas_outValue.drop () ;
        var_cas_outResultType.drop () ;
      }else if (cond_48908.isBuiltAndFalse ()) {
        GGS_uint  var_cas_idx = GGS_uint (1U) ;
        {
          GGS_typelist::cEnumerator enumerator_48964 (var_cas_formalParameterList, true) ;
          const GGS_typelist::cElement * operand_48964 = NULL ;
          GGS_goilTemplateExpressionList::cEnumerator enumerator_49003 (var_cas_actualArgumentList, true) ;
          const GGS_goilTemplateExpressionList::cElement * operand_49003 = NULL ;
          while (((operand_48964 = enumerator_48964.nextObject ()))
              && ((operand_49003 = enumerator_49003.nextObject ()))) {
            macroValidPointer (operand_48964) ;
            macroValidPointer (operand_49003) ;
            switch (operand_49003->mType.enumValue ()) {
            case GGS_goilTemplateType::enum_boolType:
              {
              const GGS_bool cond_49211 = (operand_48964->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
              if (cond_49211.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48964->mValue,  GGS_string ("boolean"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1340)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation ((((operand_49003->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1342))).operator_isEqual (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_bool (false)) : (GGS_bool (true))).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_unsignedType:
              {
              const GGS_bool cond_49496 = (operand_48964->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
              if (cond_49496.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48964->mValue,  GGS_string ("unsigned"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1345)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_49003->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_stringType:
              {
              const GGS_bool cond_49743 = (operand_48964->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_49743.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48964->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1350)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_49003->mValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_listType:
            case GGS_goilTemplateType::enum_structType:
              {
              ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_48964->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1354)) ;
              }
              break ;
            case GGS_goilTemplateType::kNotBuilt:
              break ;
            }
            var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)) ;
          }
        }
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1358)) ;
        var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (0ULL) COMMA_SOURCE_FILE_AT_LINE (1359)) ;
        const GGS_bool cond_51046 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (1360))).operator_isEqual (GGS_uint (0U)) ;
        if (cond_51046.isBuiltAndTrue ()) {
          const GGS_object var_cas_result = var_cas_f.reader_invoke (inLexique, var_cas_actualArgumentObjectList, var_cas_functionOrVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1361)) COMMA_SOURCE_FILE_AT_LINE (1361)) ;
          const GGS_bool cond_50471 = (var_cas_result.reader_objectDynamicType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
          if (cond_50471.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)) ;
            var_cas_outValue.mUnsigned64Value = GGS_uint64::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1364)) ;
          }else if (cond_50471.isBuiltAndFalse ()) {
            const GGS_bool cond_50694 = (var_cas_result.reader_objectDynamicType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
            if (cond_50694.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (1366)) ;
              var_cas_outValue.mUnsigned64Value = GGS_bool::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1367)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)) ;
            }else if (cond_50694.isBuiltAndFalse ()) {
              const GGS_bool cond_50909 = (var_cas_result.reader_objectDynamicType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_50909.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)) ;
                var_cas_outValue.mStringValue = GGS_string::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1370)) ;
              }else if (cond_50909.isBuiltAndFalse ()) {
                var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this function does not return an unsigned, boolean or string value") COMMA_SOURCE_FILE_AT_LINE (1373)) ;
              }
            }
          }
        }
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i13_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_expression_5F_parser_7 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
      nt_struct_5F_member_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            nt_expression_parse (inLexique) ;
          switch (select_template_5F_expression_5F_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i14_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_exists) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_expression_5F_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_default) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_expression ;
      GGS_goilTemplateType var_cas_resultType ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) COMMA_HERE) ;
      const GGS_bool cond_51800 = var_cas_inVariableMap.reader_hasKey (var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1404))) ;
      if (cond_51800.isBuiltAndTrue ()) {
        const GGS_goilTemplateVariableMap  temp_51752 = var_cas_inVariableMap ;
        if (temp_51752.isBuilt ()) {
          temp_51752 (HERE)->method_searchKey (inLexique, var_cas_variableName, var_cas_resultType, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1405)) ;
        }
      }
      var_cas_outValue = var_cas_expression ;
      var_cas_outResultType = var_cas_resultType ;
      } break ;
    case 2 : {
      const GGS_bool cond_51979 = var_cas_inVariableMap.reader_hasKey (var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1410))) ;
      if (cond_51979.isBuiltAndTrue ()) {
        var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (1411)) ;
      }else if (cond_51979.isBuiltAndFalse ()) {
        var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (0ULL) COMMA_SOURCE_FILE_AT_LINE (1413)) ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (1415)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i14_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_exists) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_expression_5F_parser_9 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_default) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i15_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  switch (select_template_5F_expression_5F_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_true) COMMA_HERE) ;
      var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (1431)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_false) COMMA_HERE) ;
      var_cas_outValue = function_valueWithUnsigned (inLexique, GGS_uint64 (0ULL) COMMA_SOURCE_FILE_AT_LINE (1434)) ;
      } break ;
    default :
      break ;
  }
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i15_parse (C_Lexique_template_5F_scanner & inLexique) {
  switch (select_template_5F_expression_5F_parser_10 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_true) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_false) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i16_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_emptylist) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList (), GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1450))) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (1451)) ;
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_factor_i16_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_emptylist) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'struct_member'              *
//                                                                           *
//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_struct_5F_member_i17_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_goilTemplateFieldMap  var_cas_inValue,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_memberName ;
  inLexique.assignFromAttribute_tokenString (var_cas_memberName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_goilTemplateType var_cas_memberType ;
  GGS_uint64  var_cas_memberInt ;
  GGS_string var_cas_memberString ;
  GGS_goilTemplateFieldMapList  var_cas_memberList ;
  GGS_goilTemplateFieldMap  var_cas_memberStruct ;
  const GGS_goilTemplateFieldMap  temp_53530 = var_cas_inValue ;
  if (temp_53530.isBuilt ()) {
    temp_53530 (HERE)->method_searchKey (inLexique, var_cas_memberName, var_cas_memberType, var_cas_memberInt, var_cas_memberString, var_cas_memberList, var_cas_memberStruct COMMA_SOURCE_FILE_AT_LINE (1467)) ;
  }
  switch (select_template_5F_expression_5F_parser_11 (inLexique)) {
    case 1 : {
      const GGS_bool cond_53743 = (var_cas_memberType).operator_isNotEqual (GGS_goilTemplateType::constructor_structType (inLexique COMMA_SOURCE_FILE_AT_LINE (1469))) ;
      if (cond_53743.isBuiltAndTrue ()) {
        var_cas_memberName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_memberName)).operator_concat (GGS_string ("' is a not a struct")) COMMA_SOURCE_FILE_AT_LINE (1471)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
      nt_struct_5F_member_ (inLexique, var_cas_memberStruct, var_cas_outValue, var_cas_outResultType) ;
      } break ;
    case 2 : {
      var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_memberInt, var_cas_memberString, var_cas_memberList, var_cas_memberStruct) ;
      var_cas_outResultType = var_cas_memberType ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_expression_parser::rule_template_5F_expression_5F_parser_struct_5F_member_i17_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_expression_5F_parser_11 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
      nt_struct_5F_member_parse (inLexique) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

