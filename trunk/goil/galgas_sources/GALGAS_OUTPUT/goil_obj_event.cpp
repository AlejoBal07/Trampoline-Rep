//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_obj_event.cpp'                          *
//                        Generated by version 1.8.0                         *
//                      march 19th, 2009, at 12h14'38"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 451
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_event.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_event.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'event'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_event::
pr_event_goil_obj_event_41_12_ (goil_lexique & _inLexique,
                                GGS_event_map  &var_cas_events) {
  GGS_event_obj  var_cas_event ;
  GGS_lstring  var_cas_event_name ;
  GGS_event_mask_obj  var_cas_mask ;
  GGS_lstring  var_cas_desc ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EVENT) COMMA_HERE) ;
  _inLexique._assignFromAttribute_att_token (var_cas_event_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  if ((var_cas_events.reader_hasKey (_inLexique, var_cas_event_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) COMMA_SOURCE_FILE_AT_LINE (51))).isBuiltAndTrue ()) {
    var_cas_events.modifier_del (_inLexique, var_cas_event_name, var_cas_event COMMA_SOURCE_FILE_AT_LINE (52)) ;
    var_cas_mask = var_cas_event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
    var_cas_desc = var_cas_event.reader_desc (_inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ;
  }else{
    var_cas_mask = GGS_event_mask_void_obj ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_desc = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_event = GGS_event_obj ::constructor_new (_inLexique, var_cas_desc, var_cas_mask COMMA_HERE) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  nt_event_attributes_ (_inLexique, var_cas_mask) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_event = GGS_event_obj ::constructor_new (_inLexique, var_cas_desc, var_cas_mask COMMA_HERE) ;
  var_cas_events.modifier_put (_inLexique, var_cas_event_name, var_cas_event COMMA_SOURCE_FILE_AT_LINE (67)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'event_attributes'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_event::
pr_event_attributes_goil_obj_event_70_23_ (goil_lexique & _inLexique,
                                GGS_event_mask_obj  &var_cas_mask) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_event_0 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MASK) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_event_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTO) COMMA_HERE) ;
              { const GGS_event_mask_obj _var_1812 = var_cas_mask ; // CAST instruction
                if (_var_1812.getPtr () != NULL) {
                  macroValidPointer (_var_1812.getPtr ()) ;
                  if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_1812.getPtr ()))) {
                    var_cas_mask = GGS_event_mask_auto_obj ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
                  }else{
                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "MASK attribute already defined for this EVENT") COMMA_SOURCE_FILE_AT_LINE (83)) ;
                    var_cas_mask.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was previously defined here") COMMA_SOURCE_FILE_AT_LINE (84)) ;
                  }
                }
              }
              } break ;
            case 2 : {
              GGS_luint64  var_cas_mask_value ;
              _inLexique._assignFromAttribute_integerNumber (var_cas_mask_value) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
              { const GGS_event_mask_obj _var_2929 = var_cas_mask ; // CAST instruction
                if (_var_2929.getPtr () != NULL) {
                  macroValidPointer (_var_2929.getPtr ()) ;
                  if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_2929.getPtr ()))) {
                    var_cas_mask = GGS_event_mask_user_obj ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_mask_value COMMA_HERE) ;
                    if (((var_cas_mask_value.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)))._operator_strictSup (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (91)))).isBuiltAndTrue ()) {
                      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "MASK attribute should be a 32 bits integer") COMMA_SOURCE_FILE_AT_LINE (93)) ;
                    }else{
                      GGS_uint  var_cas_nbbits ;
                      var_cas_nbbits = GGS_uint (true, 0U) ;
                      GGS_uint64  var_cas_pof2 ;
                      var_cas_pof2 = GGS_uint64 (true, 1LLU) ;
                      GGS_uint _variant_2556 = GGS_uint (true, 32U) ;
                      GGS_bool _condition_2556 (_variant_2556._isBuilt (), true) ;
                      while (_condition_2556.isBuiltAndTrue ()) {
                        _condition_2556 = (var_cas_pof2)._operator_strictInf (GGS_uint ::constructor_max (_inLexique COMMA_HERE).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (97))) ;
                        if (_condition_2556.isBuiltAndTrue ()) {
                          if (_variant_2556.uintValue () == 0) {
                            _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (102)) ;
                            _condition_2556 = GGS_bool (true, false) ;
                          }else{
                            _variant_2556._decrement_operation (_inLexique COMMA_HERE) ;
                            if ((((var_cas_pof2)._operator_and (var_cas_mask_value.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (98))))._operator_isNotEqual (GGS_uint64 (true, 0LLU))).isBuiltAndTrue ()) {
                              var_cas_nbbits._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
                            }
                            var_cas_pof2 = var_cas_pof2._left_shift_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (101)) ;
                          }
                        }
                      }
                      if (((var_cas_nbbits)._operator_strictSup (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
                        GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, GGS_string (true, "MASK attribute uses more than 1 bit") COMMA_SOURCE_FILE_AT_LINE (104)) ;
                      }
                    }
                  }else{
                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "MASK attribute already defined for this EVENT") COMMA_SOURCE_FILE_AT_LINE (109)) ;
                    var_cas_mask.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (109)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was previously defined here") COMMA_SOURCE_FILE_AT_LINE (110)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          GGS_lstring  automatic_var_0 ;
          nt_description_ (_inLexique, automatic_var_0) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

