//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_types_scheduletable.cpp'                     *
//                    Generated by version version 2.2.7                     *
//                     december 2nd, 2011, at 14h25'18"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "goil_types_scheduletable.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "goil_options.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_scheduletable.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//            Class for element of '@action_5F_list' sorted list             *
//                                                                           *
//---------------------------------------------------------------------------*

class cSortedListElement_action_5F_list : public cSortedListElement {
//--- List attributes
  public : GALGAS_uint mAttribute_order ;
  public : GALGAS_action_5F_obj mAttribute_actionobj ;

//--- Constructor
  public : cSortedListElement_action_5F_list (const GALGAS_uint & in_order,
                                              const GALGAS_action_5F_obj & in_actionobj
                                              COMMA_LOCATION_ARGS) ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cSortedListElement * copy (void) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;

//--- Virtual method that comparing element for sorting
  public : virtual typeComparisonResult compareForSorting (const cSortedListElement * inOperand) const ;
} ;

//---------------------------------------------------------------------------*

cSortedListElement_action_5F_list::cSortedListElement_action_5F_list (const GALGAS_uint & in_order,
                                                                      const GALGAS_action_5F_obj & in_actionobj
                                                                      COMMA_LOCATION_ARGS) :
cSortedListElement (THERE),
mAttribute_order (in_order),
mAttribute_actionobj (in_actionobj) {
}

//---------------------------------------------------------------------------*

bool cSortedListElement_action_5F_list::isValid (void) const {
  return mAttribute_order.isValid () && mAttribute_actionobj.isValid () ;
}

//---------------------------------------------------------------------------*

cSortedListElement * cSortedListElement_action_5F_list::copy (void) {
  cSortedListElement * result = NULL ;
  macroMyNew (result, cSortedListElement_action_5F_list (mAttribute_order, mAttribute_actionobj COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cSortedListElement_action_5F_list::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "order" ":" ;
  mAttribute_order.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "actionobj" ":" ;
  mAttribute_actionobj.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cSortedListElement_action_5F_list::compare (const cCollectionElement * inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (NULL != inOperand) {
    result = kOperandEqual ;
    cSortedListElement_action_5F_list * operand = (cSortedListElement_action_5F_list *) inOperand ;
    macroValidSharedObject (operand, cSortedListElement_action_5F_list) ;
    if (kOperandEqual == result) {
      result = mAttribute_order.objectCompare (operand->mAttribute_order) ;
    }
    if (kOperandEqual == result) {
      result = mAttribute_actionobj.objectCompare (operand->mAttribute_actionobj) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_list::GALGAS_action_5F_list (void) :
AC_GALGAS_sortedlist () {
}

//---------------------------------------------------------------------------*

typeComparisonResult cSortedListElement_action_5F_list::compareForSorting (const cSortedListElement * inOperand) const {
  typeComparisonResult result = kOperandEqual ;
  const cSortedListElement_action_5F_list * operand = (const cSortedListElement_action_5F_list *) inOperand ;
  macroValidSharedObject (operand, const cSortedListElement_action_5F_list) ;
  if (result == kOperandEqual) {
    result = mAttribute_order.objectCompare (operand->mAttribute_order) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_list GALGAS_action_5F_list::constructor_emptySortedList (LOCATION_ARGS) {
  GALGAS_action_5F_list result ;
  result.createNewEmptySortedList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_list GALGAS_action_5F_list::constructor_sortedListWithValue (const GALGAS_uint & inOperand0,
                                                                              const GALGAS_action_5F_obj & inOperand1
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_action_5F_list result = constructor_emptySortedList (THERE) ;
  cSortedListElement * p = NULL ;
  macroMyNew (p, cSortedListElement_action_5F_list (inOperand0, inOperand1 COMMA_THERE)) ;
  capSortedListElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  result.addObject (attributes) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_action_5F_list::addAssign_operation (const GALGAS_uint & inOperand0,
                                                 const GALGAS_action_5F_obj & inOperand1
                                                 COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cSortedListElement * p = NULL ;
    macroMyNew (p, cSortedListElement_action_5F_list (inOperand0, inOperand1 COMMA_THERE)) ;
    capSortedListElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_action_5F_list::dotAssign_operation (const GALGAS_action_5F_list inOperand
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid ()) {
    appendSortedList (inOperand) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_list GALGAS_action_5F_list::operator_concat (const GALGAS_action_5F_list & inOperand
                                                              COMMA_LOCATION_ARGS) const {
  GALGAS_action_5F_list result ;
  if (isValid () && inOperand.isValid ()) {
    result = constructor_emptySortedList (THERE) ;
    result = *this ;
    result.appendSortedList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_action_5F_list::modifier_popSmallest (GALGAS_uint & outOperand0,
                                                  GALGAS_action_5F_obj & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeSmallestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_action_5F_list * p = (cSortedListElement_action_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_action_5F_list) ;
    outOperand0 = p->mAttribute_order ;
    outOperand1 = p->mAttribute_actionobj ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_action_5F_list::modifier_popGreatest (GALGAS_uint & outOperand0,
                                                  GALGAS_action_5F_obj & outOperand1,
                                                  C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeGreatestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_action_5F_list * p = (cSortedListElement_action_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_action_5F_list) ;
    outOperand0 = p->mAttribute_order ;
    outOperand1 = p->mAttribute_actionobj ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_action_5F_list::method_smallest (GALGAS_uint & outOperand0,
                                             GALGAS_action_5F_obj & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  smallestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_action_5F_list * p = (cSortedListElement_action_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_action_5F_list) ;
    outOperand0 = p->mAttribute_order ;
    outOperand1 = p->mAttribute_actionobj ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_action_5F_list::method_greatest (GALGAS_uint & outOperand0,
                                             GALGAS_action_5F_obj & outOperand1,
                                             C_Compiler * inCompiler
                                             COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  greatestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_action_5F_list * p = (cSortedListElement_action_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_action_5F_list) ;
    outOperand0 = p->mAttribute_order ;
    outOperand1 = p->mAttribute_actionobj ;
  }
}

//---------------------------------------------------------------------------*

cEnumerator_action_5F_list::cEnumerator_action_5F_list (const GALGAS_action_5F_list & inEnumeratedObject,
                                                        const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_uint cEnumerator_action_5F_list::current_order (LOCATION_ARGS) const {
  const cSortedListElement_action_5F_list * p = (const cSortedListElement_action_5F_list *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cSortedListElement_action_5F_list) ;
  return p->mAttribute_order ;
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_obj cEnumerator_action_5F_list::current_actionobj (LOCATION_ARGS) const {
  const cSortedListElement_action_5F_list * p = (const cSortedListElement_action_5F_list *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cSortedListElement_action_5F_list) ;
  return p->mAttribute_actionobj ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                             @action_list type                             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_action_5F_list ("action_list",
                                       NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_action_5F_list::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_action_5F_list ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_action_5F_list::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_action_5F_list (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_list GALGAS_action_5F_list::extractObject (const GALGAS_object & inObject,
                                                            C_Compiler * inCompiler,
                                                            const GALGAS_location & inErrorLocation
                                                            COMMA_LOCATION_ARGS) {
  GALGAS_action_5F_list result ;
  const GALGAS_action_5F_list * p = (const GALGAS_action_5F_list *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_action_5F_list *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "action_list", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         Routine 'set_adjustable'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_set_5F_adjustable (GALGAS_adjustable_5F_obj & ioArgument_adj,
                                GALGAS_adjustable_5F_obj inArgument_new_5F_adj,
                                C_Compiler * inCompiler
                                COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @structuredCastInstructionForGeneration
  if (ioArgument_adj.isValid ()) {
    if (ioArgument_adj.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_adjustable_5F_void) {
      //-------- @assignmentInstructionForGeneration
      ioArgument_adj = inArgument_new_5F_adj ;
    }else{
      //-------- @errorInstructionForGeneration
      inCompiler->emitSemanticError (inArgument_new_5F_adj.reader_location (SOURCE_FILE_AT_LINE (101)), GALGAS_string ("Redefinition of ADJUSTABLE") COMMA_SOURCE_FILE_AT_LINE (101)) ;
      //-------- @errorInstructionForGeneration
      inCompiler->emitSemanticError (ioArgument_adj.reader_location (SOURCE_FILE_AT_LINE (102)), GALGAS_string ("was defined here") COMMA_SOURCE_FILE_AT_LINE (102)) ;
    }
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//        Class for element of '@expiry_5F_point_5F_list' sorted list        *
//                                                                           *
//---------------------------------------------------------------------------*

class cSortedListElement_expiry_5F_point_5F_list : public cSortedListElement {
//--- List attributes
  public : GALGAS_uint_36__34_ mAttribute_off ;
  public : GALGAS_expiry_5F_point_5F_obj mAttribute_point ;

//--- Constructor
  public : cSortedListElement_expiry_5F_point_5F_list (const GALGAS_uint_36__34_ & in_off,
                                                       const GALGAS_expiry_5F_point_5F_obj & in_point
                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cSortedListElement * copy (void) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;

//--- Virtual method that comparing element for sorting
  public : virtual typeComparisonResult compareForSorting (const cSortedListElement * inOperand) const ;
} ;

//---------------------------------------------------------------------------*

cSortedListElement_expiry_5F_point_5F_list::cSortedListElement_expiry_5F_point_5F_list (const GALGAS_uint_36__34_ & in_off,
                                                                                        const GALGAS_expiry_5F_point_5F_obj & in_point
                                                                                        COMMA_LOCATION_ARGS) :
cSortedListElement (THERE),
mAttribute_off (in_off),
mAttribute_point (in_point) {
}

//---------------------------------------------------------------------------*

bool cSortedListElement_expiry_5F_point_5F_list::isValid (void) const {
  return mAttribute_off.isValid () && mAttribute_point.isValid () ;
}

//---------------------------------------------------------------------------*

cSortedListElement * cSortedListElement_expiry_5F_point_5F_list::copy (void) {
  cSortedListElement * result = NULL ;
  macroMyNew (result, cSortedListElement_expiry_5F_point_5F_list (mAttribute_off, mAttribute_point COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cSortedListElement_expiry_5F_point_5F_list::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "off" ":" ;
  mAttribute_off.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "point" ":" ;
  mAttribute_point.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cSortedListElement_expiry_5F_point_5F_list::compare (const cCollectionElement * inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (NULL != inOperand) {
    result = kOperandEqual ;
    cSortedListElement_expiry_5F_point_5F_list * operand = (cSortedListElement_expiry_5F_point_5F_list *) inOperand ;
    macroValidSharedObject (operand, cSortedListElement_expiry_5F_point_5F_list) ;
    if (kOperandEqual == result) {
      result = mAttribute_off.objectCompare (operand->mAttribute_off) ;
    }
    if (kOperandEqual == result) {
      result = mAttribute_point.objectCompare (operand->mAttribute_point) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_list::GALGAS_expiry_5F_point_5F_list (void) :
AC_GALGAS_sortedlist () {
}

//---------------------------------------------------------------------------*

typeComparisonResult cSortedListElement_expiry_5F_point_5F_list::compareForSorting (const cSortedListElement * inOperand) const {
  typeComparisonResult result = kOperandEqual ;
  const cSortedListElement_expiry_5F_point_5F_list * operand = (const cSortedListElement_expiry_5F_point_5F_list *) inOperand ;
  macroValidSharedObject (operand, const cSortedListElement_expiry_5F_point_5F_list) ;
  if (result == kOperandEqual) {
    result = mAttribute_off.objectCompare (operand->mAttribute_off) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_list GALGAS_expiry_5F_point_5F_list::constructor_emptySortedList (LOCATION_ARGS) {
  GALGAS_expiry_5F_point_5F_list result ;
  result.createNewEmptySortedList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_list GALGAS_expiry_5F_point_5F_list::constructor_sortedListWithValue (const GALGAS_uint_36__34_ & inOperand0,
                                                                                                const GALGAS_expiry_5F_point_5F_obj & inOperand1
                                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_expiry_5F_point_5F_list result = constructor_emptySortedList (THERE) ;
  cSortedListElement * p = NULL ;
  macroMyNew (p, cSortedListElement_expiry_5F_point_5F_list (inOperand0, inOperand1 COMMA_THERE)) ;
  capSortedListElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  result.addObject (attributes) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_list::addAssign_operation (const GALGAS_uint_36__34_ & inOperand0,
                                                          const GALGAS_expiry_5F_point_5F_obj & inOperand1
                                                          COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cSortedListElement * p = NULL ;
    macroMyNew (p, cSortedListElement_expiry_5F_point_5F_list (inOperand0, inOperand1 COMMA_THERE)) ;
    capSortedListElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_list::dotAssign_operation (const GALGAS_expiry_5F_point_5F_list inOperand
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid ()) {
    appendSortedList (inOperand) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_list GALGAS_expiry_5F_point_5F_list::operator_concat (const GALGAS_expiry_5F_point_5F_list & inOperand
                                                                                COMMA_LOCATION_ARGS) const {
  GALGAS_expiry_5F_point_5F_list result ;
  if (isValid () && inOperand.isValid ()) {
    result = constructor_emptySortedList (THERE) ;
    result = *this ;
    result.appendSortedList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_list::modifier_popSmallest (GALGAS_uint_36__34_ & outOperand0,
                                                           GALGAS_expiry_5F_point_5F_obj & outOperand1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeSmallestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_expiry_5F_point_5F_list * p = (cSortedListElement_expiry_5F_point_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_expiry_5F_point_5F_list) ;
    outOperand0 = p->mAttribute_off ;
    outOperand1 = p->mAttribute_point ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_list::modifier_popGreatest (GALGAS_uint_36__34_ & outOperand0,
                                                           GALGAS_expiry_5F_point_5F_obj & outOperand1,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeGreatestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_expiry_5F_point_5F_list * p = (cSortedListElement_expiry_5F_point_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_expiry_5F_point_5F_list) ;
    outOperand0 = p->mAttribute_off ;
    outOperand1 = p->mAttribute_point ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_list::method_smallest (GALGAS_uint_36__34_ & outOperand0,
                                                      GALGAS_expiry_5F_point_5F_obj & outOperand1,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  smallestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_expiry_5F_point_5F_list * p = (cSortedListElement_expiry_5F_point_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_expiry_5F_point_5F_list) ;
    outOperand0 = p->mAttribute_off ;
    outOperand1 = p->mAttribute_point ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_list::method_greatest (GALGAS_uint_36__34_ & outOperand0,
                                                      GALGAS_expiry_5F_point_5F_obj & outOperand1,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  greatestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_expiry_5F_point_5F_list * p = (cSortedListElement_expiry_5F_point_5F_list *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
    outOperand1.drop () ;
  }else{
    macroValidSharedObject (p, cSortedListElement_expiry_5F_point_5F_list) ;
    outOperand0 = p->mAttribute_off ;
    outOperand1 = p->mAttribute_point ;
  }
}

//---------------------------------------------------------------------------*

cEnumerator_expiry_5F_point_5F_list::cEnumerator_expiry_5F_point_5F_list (const GALGAS_expiry_5F_point_5F_list & inEnumeratedObject,
                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_uint_36__34_ cEnumerator_expiry_5F_point_5F_list::current_off (LOCATION_ARGS) const {
  const cSortedListElement_expiry_5F_point_5F_list * p = (const cSortedListElement_expiry_5F_point_5F_list *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cSortedListElement_expiry_5F_point_5F_list) ;
  return p->mAttribute_off ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_obj cEnumerator_expiry_5F_point_5F_list::current_point (LOCATION_ARGS) const {
  const cSortedListElement_expiry_5F_point_5F_list * p = (const cSortedListElement_expiry_5F_point_5F_list *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cSortedListElement_expiry_5F_point_5F_list) ;
  return p->mAttribute_point ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @expiry_point_list type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_expiry_5F_point_5F_list ("expiry_point_list",
                                                NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_expiry_5F_point_5F_list::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expiry_5F_point_5F_list ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_expiry_5F_point_5F_list::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_expiry_5F_point_5F_list (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_list GALGAS_expiry_5F_point_5F_list::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler,
                                                                              const GALGAS_location & inErrorLocation
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_expiry_5F_point_5F_list result ;
  const GALGAS_expiry_5F_point_5F_list * p = (const GALGAS_expiry_5F_point_5F_list *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_expiry_5F_point_5F_list *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "expiry_point_list", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_scheduletable_5F_map::cMapElement_scheduletable_5F_map (const GALGAS_lstring & inKey,
                                                                    const GALGAS_scheduletable_5F_obj & in_scheduletable
                                                                    COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_scheduletable (in_scheduletable) {
}

//---------------------------------------------------------------------------*

bool cMapElement_scheduletable_5F_map::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_scheduletable.isValid () ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_scheduletable_5F_map::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_scheduletable_5F_map (mAttribute_lkey, mAttribute_scheduletable COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_scheduletable_5F_map::description (C_String & ioString, const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "scheduletable" ":" ;
  mAttribute_scheduletable.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

typeComparisonResult cMapElement_scheduletable_5F_map::compare (const cCollectionElement * inOperand) const {
  cMapElement_scheduletable_5F_map * operand = (cMapElement_scheduletable_5F_map *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_scheduletable.objectCompare (operand->mAttribute_scheduletable) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map::GALGAS_scheduletable_5F_map (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map::GALGAS_scheduletable_5F_map (const GALGAS_scheduletable_5F_map & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map & GALGAS_scheduletable_5F_map::operator = (const GALGAS_scheduletable_5F_map & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map GALGAS_scheduletable_5F_map::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_scheduletable_5F_map result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map GALGAS_scheduletable_5F_map::constructor_mapWithMapToOverride (const GALGAS_scheduletable_5F_map & inMapToOverride
                                                                                           COMMA_LOCATION_ARGS) {
  GALGAS_scheduletable_5F_map result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map GALGAS_scheduletable_5F_map::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_scheduletable_5F_map result ;
  getOverridenMap (result) ;
  return result ;
}
//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_map::modifier_put (GALGAS_lstring inKey,
                                                GALGAS_scheduletable_5F_obj inArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  cMapElement_scheduletable_5F_map * p = NULL ;
  macroMyNew (p, cMapElement_scheduletable_5F_map (inKey, inArgument0 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "Schedule table %K is already defined in %L" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const char * kSearchErrorMessage_scheduletable_5F_map_get = "Schedule table %K is unkown" ;

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_map::method_get (GALGAS_lstring inKey,
                                              GALGAS_scheduletable_5F_obj & outArgument0,
                                              C_Compiler * inCompiler
                                              COMMA_LOCATION_ARGS) const {
  const cMapElement_scheduletable_5F_map * p = (const cMapElement_scheduletable_5F_map *) performSearch (inKey,
                                                                                                           inCompiler,
                                                                                                           kSearchErrorMessage_scheduletable_5F_map_get
                                                                                                           COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
  }else{
    macroValidSharedObject (p, const cMapElement_scheduletable_5F_map) ;
    outArgument0 = p->mAttribute_scheduletable ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_map::modifier_del (GALGAS_lstring inKey,
                                                GALGAS_scheduletable_5F_obj & outArgument0,
                                                C_Compiler * inCompiler
                                                COMMA_LOCATION_ARGS) {
  const char * kRemoveErrorMessage = "Schedule table %K is unkown" ;
  capCollectionElement attributes ;
  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;
  cMapElement_scheduletable_5F_map * p = (cMapElement_scheduletable_5F_map *) attributes.ptr () ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_scheduletable_5F_map) ;
    outArgument0 = p->mAttribute_scheduletable ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj GALGAS_scheduletable_5F_map::reader_scheduletableForKey (const GALGAS_string & inKey,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_scheduletable_5F_map * p = (const cMapElement_scheduletable_5F_map *) attributes ;
  GALGAS_scheduletable_5F_obj result ;
  if (NULL != p) {
    macroValidSharedObject (p, const cMapElement_scheduletable_5F_map) ;
    result = p->mAttribute_scheduletable ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_map::modifier_setScheduletableForKey (GALGAS_scheduletable_5F_obj inAttributeValue,
                                                                   GALGAS_string inKey,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_scheduletable_5F_map * p = (cMapElement_scheduletable_5F_map *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_scheduletable_5F_map) ;
    p->mAttribute_scheduletable = inAttributeValue ;
  }
}

//---------------------------------------------------------------------------*

cMapElement_scheduletable_5F_map * GALGAS_scheduletable_5F_map::readWriteAccessForWithInstruction_get (C_Compiler * inCompiler,
                                                                                                       const GALGAS_lstring & inKey
                                                                                                       COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_scheduletable_5F_map_get COMMA_THERE) ;
  cMapElement_scheduletable_5F_map * result = (cMapElement_scheduletable_5F_map *) p ;
  macroNullOrValidSharedObject (result, cMapElement_scheduletable_5F_map) ;
  return result ;
}

//---------------------------------------------------------------------------*

cMapElement_scheduletable_5F_map * GALGAS_scheduletable_5F_map::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                                          const GALGAS_string & inKey
                                                                                                          COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_scheduletable_5F_map * result = (cMapElement_scheduletable_5F_map *) p ;
  macroNullOrValidSharedObject (result, cMapElement_scheduletable_5F_map) ;
  return result ;
}

//---------------------------------------------------------------------------*

cEnumerator_scheduletable_5F_map::cEnumerator_scheduletable_5F_map (const GALGAS_scheduletable_5F_map & inEnumeratedObject,
                                                                    const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_scheduletable_5F_map::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj cEnumerator_scheduletable_5F_map::current_scheduletable (LOCATION_ARGS) const {
  const cMapElement_scheduletable_5F_map * p = (const cMapElement_scheduletable_5F_map *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cMapElement_scheduletable_5F_map) ;
  return p->mAttribute_scheduletable ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @scheduletable_map type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_scheduletable_5F_map ("scheduletable_map",
                                             NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_scheduletable_5F_map::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_scheduletable_5F_map ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_scheduletable_5F_map::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_scheduletable_5F_map (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_map GALGAS_scheduletable_5F_map::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_scheduletable_5F_map result ;
  const GALGAS_scheduletable_5F_map * p = (const GALGAS_scheduletable_5F_map *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_scheduletable_5F_map *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "scheduletable_map", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Function 'default_scheduletable_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj function_default_5F_scheduletable_5F_obj (C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_scheduletable_5F_obj result_st ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  result_st = GALGAS_scheduletable_5F_obj::constructor_new (function_empty_5F_lstring (inCompiler COMMA_SOURCE_FILE_AT_LINE (313)), function_empty_5F_lstring (inCompiler COMMA_SOURCE_FILE_AT_LINE (314)), GALGAS_autostart_5F_void::constructor_new (inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (315)), GALGAS_ltgt_5F_sync_5F_void::constructor_new (inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (316)), GALGAS_void::constructor_new (inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (317)), GALGAS_void::constructor_new (inCompiler->here () COMMA_SOURCE_FILE_AT_LINE (318)), GALGAS_expiry_5F_point_5F_list::constructor_emptySortedList (SOURCE_FILE_AT_LINE (319)), GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE_AT_LINE (320)) COMMA_SOURCE_FILE_AT_LINE (312)) ;
//---
  return result_st ;
}


//---------------------------------------------------------------------------*
//  Function introspection                                                   *
//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_default_5F_scheduletable_5F_obj [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_default_5F_scheduletable_5F_obj (C_Compiler * inCompiler,
                                                                                const cObjectArray & /* inEffectiveParameterArray */,
                                                                                const GALGAS_location & /* inErrorLocation */
                                                                                COMMA_LOCATION_ARGS) {
  return function_default_5F_scheduletable_5F_obj (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_default_5F_scheduletable_5F_obj ("default_scheduletable_obj",
                                                                                 functionWithGenericHeader_default_5F_scheduletable_5F_obj,
                                                                                 & kTypeDescriptor_GALGAS_scheduletable_5F_obj,
                                                                                 0,
                                                                                 functionArgs_default_5F_scheduletable_5F_obj) ;

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_sd_5F_autostart_5F_false::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_sd_5F_autostart_5F_false * p = (const cPtr_sd_5F_autostart_5F_false *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_false) ;
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_sd_5F_autostart_5F_false::objectCompare (const GALGAS_sd_5F_autostart_5F_false & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_false::GALGAS_sd_5F_autostart_5F_false (void) :
GALGAS_autostart_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_false::GALGAS_sd_5F_autostart_5F_false (const cPtr_sd_5F_autostart_5F_false * inSourcePtr) :
GALGAS_autostart_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_sd_5F_autostart_5F_false) ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_false GALGAS_sd_5F_autostart_5F_false::constructor_new (const GALGAS_location & inAttribute_location
                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_false result ;
  if (inAttribute_location.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_sd_5F_autostart_5F_false (inAttribute_location COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_sd_5F_autostart_5F_false::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_sd_5F_autostart_5F_false * p = (cPtr_sd_5F_autostart_5F_false *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_sd_5F_autostart_5F_false) ;
    cPtr_sd_5F_autostart_5F_false * r = NULL ;
    macroMyNew (r, cPtr_sd_5F_autostart_5F_false (p->mAttribute_location COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                Pointer class for @sd_autostart_false class                *
//---------------------------------------------------------------------------*

cPtr_sd_5F_autostart_5F_false::cPtr_sd_5F_autostart_5F_false (const GALGAS_location & in_location
                                                              COMMA_LOCATION_ARGS) :
cPtr_autostart_5F_obj (in_location COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_sd_5F_autostart_5F_false::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_false ;
}

void cPtr_sd_5F_autostart_5F_false::description (C_String & ioString,
                                                 const PMSInt32 inIndentation) const {
  ioString << "[@sd_autostart_false:" ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @sd_autostart_false type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_sd_5F_autostart_5F_false ("sd_autostart_false",
                                                 & kTypeDescriptor_GALGAS_autostart_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_sd_5F_autostart_5F_false::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_false ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_sd_5F_autostart_5F_false::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_sd_5F_autostart_5F_false (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_false GALGAS_sd_5F_autostart_5F_false::extractObject (const GALGAS_object & inObject,
                                                                                C_Compiler * inCompiler,
                                                                                const GALGAS_location & inErrorLocation
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_false result ;
  const GALGAS_sd_5F_autostart_5F_false * p = (const GALGAS_sd_5F_autostart_5F_false *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_sd_5F_autostart_5F_false *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "sd_autostart_false", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_sd_5F_autostart_5F_true::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_sd_5F_autostart_5F_true * p = (const cPtr_sd_5F_autostart_5F_true *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_true) ;
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_app_5F_modes.objectCompare (p->mAttribute_app_5F_modes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_sd_5F_autostart_5F_true::objectCompare (const GALGAS_sd_5F_autostart_5F_true & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_true::GALGAS_sd_5F_autostart_5F_true (void) :
GALGAS_autostart_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_true::GALGAS_sd_5F_autostart_5F_true (const cPtr_sd_5F_autostart_5F_true * inSourcePtr) :
GALGAS_autostart_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_sd_5F_autostart_5F_true) ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_true GALGAS_sd_5F_autostart_5F_true::constructor_new (const GALGAS_location & inAttribute_location,
                                                                                const GALGAS_stringset & inAttribute_app_5F_modes
                                                                                COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_true result ;
  if (inAttribute_location.isValid () && inAttribute_app_5F_modes.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_sd_5F_autostart_5F_true (inAttribute_location, inAttribute_app_5F_modes COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_sd_5F_autostart_5F_true::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_sd_5F_autostart_5F_true * p = (cPtr_sd_5F_autostart_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_sd_5F_autostart_5F_true) ;
    cPtr_sd_5F_autostart_5F_true * r = NULL ;
    macroMyNew (r, cPtr_sd_5F_autostart_5F_true (p->mAttribute_location, p->mAttribute_app_5F_modes COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_stringset GALGAS_sd_5F_autostart_5F_true::reader_app_5F_modes (UNUSED_LOCATION_ARGS) const {
  GALGAS_stringset result ;
  if (NULL != mObjectPtr) {
    const cPtr_sd_5F_autostart_5F_true * p = (const cPtr_sd_5F_autostart_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_true) ;
    result = p->mAttribute_app_5F_modes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                Pointer class for @sd_autostart_true class                 *
//---------------------------------------------------------------------------*

cPtr_sd_5F_autostart_5F_true::cPtr_sd_5F_autostart_5F_true (const GALGAS_location & in_location,
                                                            const GALGAS_stringset & in_app_5F_modes
                                                            COMMA_LOCATION_ARGS) :
cPtr_autostart_5F_obj (in_location COMMA_THERE),
mAttribute_app_5F_modes (in_app_5F_modes) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_sd_5F_autostart_5F_true::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_true ;
}

void cPtr_sd_5F_autostart_5F_true::description (C_String & ioString,
                                                const PMSInt32 inIndentation) const {
  ioString << "[@sd_autostart_true:" ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_app_5F_modes.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @sd_autostart_true type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_sd_5F_autostart_5F_true ("sd_autostart_true",
                                                & kTypeDescriptor_GALGAS_autostart_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_sd_5F_autostart_5F_true::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_true ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_sd_5F_autostart_5F_true::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_sd_5F_autostart_5F_true (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_true GALGAS_sd_5F_autostart_5F_true::extractObject (const GALGAS_object & inObject,
                                                                              C_Compiler * inCompiler,
                                                                              const GALGAS_location & inErrorLocation
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_true result ;
  const GALGAS_sd_5F_autostart_5F_true * p = (const GALGAS_sd_5F_autostart_5F_true *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_sd_5F_autostart_5F_true *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "sd_autostart_true", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_sd_5F_autostart_5F_absolute::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_sd_5F_autostart_5F_absolute * p = (const cPtr_sd_5F_autostart_5F_absolute *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_absolute) ;
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_app_5F_modes.objectCompare (p->mAttribute_app_5F_modes) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_value.objectCompare (p->mAttribute_value) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_sd_5F_autostart_5F_absolute::objectCompare (const GALGAS_sd_5F_autostart_5F_absolute & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_absolute::GALGAS_sd_5F_autostart_5F_absolute (void) :
GALGAS_sd_5F_autostart_5F_true () {
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_absolute::GALGAS_sd_5F_autostart_5F_absolute (const cPtr_sd_5F_autostart_5F_absolute * inSourcePtr) :
GALGAS_sd_5F_autostart_5F_true (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_sd_5F_autostart_5F_absolute) ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_absolute GALGAS_sd_5F_autostart_5F_absolute::constructor_new (const GALGAS_location & inAttribute_location,
                                                                                        const GALGAS_stringset & inAttribute_app_5F_modes,
                                                                                        const GALGAS_luint_36__34_ & inAttribute_value
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_absolute result ;
  if (inAttribute_location.isValid () && inAttribute_app_5F_modes.isValid () && inAttribute_value.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_sd_5F_autostart_5F_absolute (inAttribute_location, inAttribute_app_5F_modes, inAttribute_value COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_sd_5F_autostart_5F_absolute::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_sd_5F_autostart_5F_absolute * p = (cPtr_sd_5F_autostart_5F_absolute *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_sd_5F_autostart_5F_absolute) ;
    cPtr_sd_5F_autostart_5F_absolute * r = NULL ;
    macroMyNew (r, cPtr_sd_5F_autostart_5F_absolute (p->mAttribute_location, p->mAttribute_app_5F_modes, p->mAttribute_value COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint_36__34_ GALGAS_sd_5F_autostart_5F_absolute::reader_value (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint_36__34_ result ;
  if (NULL != mObjectPtr) {
    const cPtr_sd_5F_autostart_5F_absolute * p = (const cPtr_sd_5F_autostart_5F_absolute *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_absolute) ;
    result = p->mAttribute_value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @sd_autostart_absolute class               *
//---------------------------------------------------------------------------*

cPtr_sd_5F_autostart_5F_absolute::cPtr_sd_5F_autostart_5F_absolute (const GALGAS_location & in_location,
                                                                    const GALGAS_stringset & in_app_5F_modes,
                                                                    const GALGAS_luint_36__34_ & in_value
                                                                    COMMA_LOCATION_ARGS) :
cPtr_sd_5F_autostart_5F_true (in_location, in_app_5F_modes COMMA_THERE),
mAttribute_value (in_value) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_sd_5F_autostart_5F_absolute::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_absolute ;
}

void cPtr_sd_5F_autostart_5F_absolute::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "[@sd_autostart_absolute:" ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_app_5F_modes.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_value.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @sd_autostart_absolute type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_sd_5F_autostart_5F_absolute ("sd_autostart_absolute",
                                                    & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_true) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_sd_5F_autostart_5F_absolute::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_absolute ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_sd_5F_autostart_5F_absolute::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_sd_5F_autostart_5F_absolute (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_absolute GALGAS_sd_5F_autostart_5F_absolute::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler,
                                                                                      const GALGAS_location & inErrorLocation
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_absolute result ;
  const GALGAS_sd_5F_autostart_5F_absolute * p = (const GALGAS_sd_5F_autostart_5F_absolute *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_sd_5F_autostart_5F_absolute *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "sd_autostart_absolute", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_sd_5F_autostart_5F_relative::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_sd_5F_autostart_5F_relative * p = (const cPtr_sd_5F_autostart_5F_relative *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_relative) ;
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_app_5F_modes.objectCompare (p->mAttribute_app_5F_modes) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_offset.objectCompare (p->mAttribute_offset) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_sd_5F_autostart_5F_relative::objectCompare (const GALGAS_sd_5F_autostart_5F_relative & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_relative::GALGAS_sd_5F_autostart_5F_relative (void) :
GALGAS_sd_5F_autostart_5F_true () {
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_relative::GALGAS_sd_5F_autostart_5F_relative (const cPtr_sd_5F_autostart_5F_relative * inSourcePtr) :
GALGAS_sd_5F_autostart_5F_true (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_sd_5F_autostart_5F_relative) ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_relative GALGAS_sd_5F_autostart_5F_relative::constructor_new (const GALGAS_location & inAttribute_location,
                                                                                        const GALGAS_stringset & inAttribute_app_5F_modes,
                                                                                        const GALGAS_luint_36__34_ & inAttribute_offset
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_relative result ;
  if (inAttribute_location.isValid () && inAttribute_app_5F_modes.isValid () && inAttribute_offset.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_sd_5F_autostart_5F_relative (inAttribute_location, inAttribute_app_5F_modes, inAttribute_offset COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_sd_5F_autostart_5F_relative::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_sd_5F_autostart_5F_relative * p = (cPtr_sd_5F_autostart_5F_relative *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_sd_5F_autostart_5F_relative) ;
    cPtr_sd_5F_autostart_5F_relative * r = NULL ;
    macroMyNew (r, cPtr_sd_5F_autostart_5F_relative (p->mAttribute_location, p->mAttribute_app_5F_modes, p->mAttribute_offset COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_luint_36__34_ GALGAS_sd_5F_autostart_5F_relative::reader_offset (UNUSED_LOCATION_ARGS) const {
  GALGAS_luint_36__34_ result ;
  if (NULL != mObjectPtr) {
    const cPtr_sd_5F_autostart_5F_relative * p = (const cPtr_sd_5F_autostart_5F_relative *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_relative) ;
    result = p->mAttribute_offset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//              Pointer class for @sd_autostart_relative class               *
//---------------------------------------------------------------------------*

cPtr_sd_5F_autostart_5F_relative::cPtr_sd_5F_autostart_5F_relative (const GALGAS_location & in_location,
                                                                    const GALGAS_stringset & in_app_5F_modes,
                                                                    const GALGAS_luint_36__34_ & in_offset
                                                                    COMMA_LOCATION_ARGS) :
cPtr_sd_5F_autostart_5F_true (in_location, in_app_5F_modes COMMA_THERE),
mAttribute_offset (in_offset) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_sd_5F_autostart_5F_relative::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_relative ;
}

void cPtr_sd_5F_autostart_5F_relative::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "[@sd_autostart_relative:" ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_app_5F_modes.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_offset.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @sd_autostart_relative type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_sd_5F_autostart_5F_relative ("sd_autostart_relative",
                                                    & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_true) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_sd_5F_autostart_5F_relative::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_relative ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_sd_5F_autostart_5F_relative::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_sd_5F_autostart_5F_relative (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_relative GALGAS_sd_5F_autostart_5F_relative::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler,
                                                                                      const GALGAS_location & inErrorLocation
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_relative result ;
  const GALGAS_sd_5F_autostart_5F_relative * p = (const GALGAS_sd_5F_autostart_5F_relative *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_sd_5F_autostart_5F_relative *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "sd_autostart_relative", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_sd_5F_autostart_5F_synchron::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_sd_5F_autostart_5F_synchron * p = (const cPtr_sd_5F_autostart_5F_synchron *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_sd_5F_autostart_5F_synchron) ;
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_app_5F_modes.objectCompare (p->mAttribute_app_5F_modes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_sd_5F_autostart_5F_synchron::objectCompare (const GALGAS_sd_5F_autostart_5F_synchron & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_synchron::GALGAS_sd_5F_autostart_5F_synchron (void) :
GALGAS_sd_5F_autostart_5F_true () {
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_synchron::GALGAS_sd_5F_autostart_5F_synchron (const cPtr_sd_5F_autostart_5F_synchron * inSourcePtr) :
GALGAS_sd_5F_autostart_5F_true (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_sd_5F_autostart_5F_synchron) ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_synchron GALGAS_sd_5F_autostart_5F_synchron::constructor_new (const GALGAS_location & inAttribute_location,
                                                                                        const GALGAS_stringset & inAttribute_app_5F_modes
                                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_synchron result ;
  if (inAttribute_location.isValid () && inAttribute_app_5F_modes.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_sd_5F_autostart_5F_synchron (inAttribute_location, inAttribute_app_5F_modes COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_sd_5F_autostart_5F_synchron::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_sd_5F_autostart_5F_synchron * p = (cPtr_sd_5F_autostart_5F_synchron *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_sd_5F_autostart_5F_synchron) ;
    cPtr_sd_5F_autostart_5F_synchron * r = NULL ;
    macroMyNew (r, cPtr_sd_5F_autostart_5F_synchron (p->mAttribute_location, p->mAttribute_app_5F_modes COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//              Pointer class for @sd_autostart_synchron class               *
//---------------------------------------------------------------------------*

cPtr_sd_5F_autostart_5F_synchron::cPtr_sd_5F_autostart_5F_synchron (const GALGAS_location & in_location,
                                                                    const GALGAS_stringset & in_app_5F_modes
                                                                    COMMA_LOCATION_ARGS) :
cPtr_sd_5F_autostart_5F_true (in_location, in_app_5F_modes COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_sd_5F_autostart_5F_synchron::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_synchron ;
}

void cPtr_sd_5F_autostart_5F_synchron::description (C_String & ioString,
                                                    const PMSInt32 inIndentation) const {
  ioString << "[@sd_autostart_synchron:" ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_app_5F_modes.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                        @sd_autostart_synchron type                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_sd_5F_autostart_5F_synchron ("sd_autostart_synchron",
                                                    & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_true) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_sd_5F_autostart_5F_synchron::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_sd_5F_autostart_5F_synchron ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_sd_5F_autostart_5F_synchron::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_sd_5F_autostart_5F_synchron (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_sd_5F_autostart_5F_synchron GALGAS_sd_5F_autostart_5F_synchron::extractObject (const GALGAS_object & inObject,
                                                                                      C_Compiler * inCompiler,
                                                                                      const GALGAS_location & inErrorLocation
                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_sd_5F_autostart_5F_synchron result ;
  const GALGAS_sd_5F_autostart_5F_synchron * p = (const GALGAS_sd_5F_autostart_5F_synchron *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_sd_5F_autostart_5F_synchron *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "sd_autostart_synchron", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_ltgt_5F_sync_5F_obj::objectCompare (const GALGAS_ltgt_5F_sync_5F_obj & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_obj::GALGAS_ltgt_5F_sync_5F_obj (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_obj::GALGAS_ltgt_5F_sync_5F_obj (const cPtr_ltgt_5F_sync_5F_obj * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_ltgt_5F_sync_5F_obj) ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_ltgt_5F_sync_5F_obj::reader_loc (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_ltgt_5F_sync_5F_obj * p = (const cPtr_ltgt_5F_sync_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_ltgt_5F_sync_5F_obj) ;
    result = p->mAttribute_loc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @ltgt_sync_obj class                   *
//---------------------------------------------------------------------------*

cPtr_ltgt_5F_sync_5F_obj::cPtr_ltgt_5F_sync_5F_obj (const GALGAS_location & in_loc
                                                    COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_loc (in_loc) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                            @ltgt_sync_obj type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_obj ("ltgt_sync_obj",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ltgt_5F_sync_5F_obj::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_obj ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ltgt_5F_sync_5F_obj::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ltgt_5F_sync_5F_obj (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_obj GALGAS_ltgt_5F_sync_5F_obj::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_obj result ;
  const GALGAS_ltgt_5F_sync_5F_obj * p = (const GALGAS_ltgt_5F_sync_5F_obj *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ltgt_5F_sync_5F_obj *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "ltgt_sync_obj", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_ltgt_5F_sync_5F_false::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_ltgt_5F_sync_5F_false * p = (const cPtr_ltgt_5F_sync_5F_false *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_ltgt_5F_sync_5F_false) ;
  if (kOperandEqual == result) {
    result = mAttribute_loc.objectCompare (p->mAttribute_loc) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_ltgt_5F_sync_5F_false::objectCompare (const GALGAS_ltgt_5F_sync_5F_false & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_false::GALGAS_ltgt_5F_sync_5F_false (void) :
GALGAS_ltgt_5F_sync_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_false::GALGAS_ltgt_5F_sync_5F_false (const cPtr_ltgt_5F_sync_5F_false * inSourcePtr) :
GALGAS_ltgt_5F_sync_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_ltgt_5F_sync_5F_false) ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_false GALGAS_ltgt_5F_sync_5F_false::constructor_new (const GALGAS_location & inAttribute_loc
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_false result ;
  if (inAttribute_loc.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_ltgt_5F_sync_5F_false (inAttribute_loc COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_ltgt_5F_sync_5F_false::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_ltgt_5F_sync_5F_false * p = (cPtr_ltgt_5F_sync_5F_false *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_ltgt_5F_sync_5F_false) ;
    cPtr_ltgt_5F_sync_5F_false * r = NULL ;
    macroMyNew (r, cPtr_ltgt_5F_sync_5F_false (p->mAttribute_loc COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @ltgt_sync_false class                  *
//---------------------------------------------------------------------------*

cPtr_ltgt_5F_sync_5F_false::cPtr_ltgt_5F_sync_5F_false (const GALGAS_location & in_loc
                                                        COMMA_LOCATION_ARGS) :
cPtr_ltgt_5F_sync_5F_obj (in_loc COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_ltgt_5F_sync_5F_false::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_false ;
}

void cPtr_ltgt_5F_sync_5F_false::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "[@ltgt_sync_false:" ;
  mAttribute_loc.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @ltgt_sync_false type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_false ("ltgt_sync_false",
                                              & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ltgt_5F_sync_5F_false::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_false ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ltgt_5F_sync_5F_false::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ltgt_5F_sync_5F_false (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_false GALGAS_ltgt_5F_sync_5F_false::extractObject (const GALGAS_object & inObject,
                                                                          C_Compiler * inCompiler,
                                                                          const GALGAS_location & inErrorLocation
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_false result ;
  const GALGAS_ltgt_5F_sync_5F_false * p = (const GALGAS_ltgt_5F_sync_5F_false *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ltgt_5F_sync_5F_false *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "ltgt_sync_false", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_ltgt_5F_sync_5F_true::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_ltgt_5F_sync_5F_true * p = (const cPtr_ltgt_5F_sync_5F_true *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_ltgt_5F_sync_5F_true) ;
  if (kOperandEqual == result) {
    result = mAttribute_loc.objectCompare (p->mAttribute_loc) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_strategy.objectCompare (p->mAttribute_strategy) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_precision.objectCompare (p->mAttribute_precision) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_ltgt_5F_sync_5F_true::objectCompare (const GALGAS_ltgt_5F_sync_5F_true & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_true::GALGAS_ltgt_5F_sync_5F_true (void) :
GALGAS_ltgt_5F_sync_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_true::GALGAS_ltgt_5F_sync_5F_true (const cPtr_ltgt_5F_sync_5F_true * inSourcePtr) :
GALGAS_ltgt_5F_sync_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_ltgt_5F_sync_5F_true) ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_true GALGAS_ltgt_5F_sync_5F_true::constructor_new (const GALGAS_location & inAttribute_loc,
                                                                          const GALGAS_lstring & inAttribute_strategy,
                                                                          const GALGAS_basic_5F_type & inAttribute_precision
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_true result ;
  if (inAttribute_loc.isValid () && inAttribute_strategy.isValid () && inAttribute_precision.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_ltgt_5F_sync_5F_true (inAttribute_loc, inAttribute_strategy, inAttribute_precision COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_ltgt_5F_sync_5F_true::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_ltgt_5F_sync_5F_true * p = (cPtr_ltgt_5F_sync_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_ltgt_5F_sync_5F_true) ;
    cPtr_ltgt_5F_sync_5F_true * r = NULL ;
    macroMyNew (r, cPtr_ltgt_5F_sync_5F_true (p->mAttribute_loc, p->mAttribute_strategy, p->mAttribute_precision COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_ltgt_5F_sync_5F_true::reader_strategy (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_ltgt_5F_sync_5F_true * p = (const cPtr_ltgt_5F_sync_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_ltgt_5F_sync_5F_true) ;
    result = p->mAttribute_strategy ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_basic_5F_type GALGAS_ltgt_5F_sync_5F_true::reader_precision (UNUSED_LOCATION_ARGS) const {
  GALGAS_basic_5F_type result ;
  if (NULL != mObjectPtr) {
    const cPtr_ltgt_5F_sync_5F_true * p = (const cPtr_ltgt_5F_sync_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_ltgt_5F_sync_5F_true) ;
    result = p->mAttribute_precision ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @ltgt_sync_true class                  *
//---------------------------------------------------------------------------*

cPtr_ltgt_5F_sync_5F_true::cPtr_ltgt_5F_sync_5F_true (const GALGAS_location & in_loc,
                                                      const GALGAS_lstring & in_strategy,
                                                      const GALGAS_basic_5F_type & in_precision
                                                      COMMA_LOCATION_ARGS) :
cPtr_ltgt_5F_sync_5F_obj (in_loc COMMA_THERE),
mAttribute_strategy (in_strategy),
mAttribute_precision (in_precision) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_ltgt_5F_sync_5F_true::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_true ;
}

void cPtr_ltgt_5F_sync_5F_true::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@ltgt_sync_true:" ;
  mAttribute_loc.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_strategy.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_precision.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @ltgt_sync_true type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_true ("ltgt_sync_true",
                                             & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ltgt_5F_sync_5F_true::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_true ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ltgt_5F_sync_5F_true::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ltgt_5F_sync_5F_true (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_true GALGAS_ltgt_5F_sync_5F_true::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_true result ;
  const GALGAS_ltgt_5F_sync_5F_true * p = (const GALGAS_ltgt_5F_sync_5F_true *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ltgt_5F_sync_5F_true *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "ltgt_sync_true", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_ltgt_5F_sync_5F_void::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_ltgt_5F_sync_5F_void * p = (const cPtr_ltgt_5F_sync_5F_void *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_ltgt_5F_sync_5F_void) ;
  if (kOperandEqual == result) {
    result = mAttribute_loc.objectCompare (p->mAttribute_loc) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_ltgt_5F_sync_5F_void::objectCompare (const GALGAS_ltgt_5F_sync_5F_void & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_void::GALGAS_ltgt_5F_sync_5F_void (void) :
GALGAS_ltgt_5F_sync_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_void::GALGAS_ltgt_5F_sync_5F_void (const cPtr_ltgt_5F_sync_5F_void * inSourcePtr) :
GALGAS_ltgt_5F_sync_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_ltgt_5F_sync_5F_void) ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_void GALGAS_ltgt_5F_sync_5F_void::constructor_new (const GALGAS_location & inAttribute_loc
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_void result ;
  if (inAttribute_loc.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_ltgt_5F_sync_5F_void (inAttribute_loc COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_ltgt_5F_sync_5F_void::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_ltgt_5F_sync_5F_void * p = (cPtr_ltgt_5F_sync_5F_void *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_ltgt_5F_sync_5F_void) ;
    cPtr_ltgt_5F_sync_5F_void * r = NULL ;
    macroMyNew (r, cPtr_ltgt_5F_sync_5F_void (p->mAttribute_loc COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                  Pointer class for @ltgt_sync_void class                  *
//---------------------------------------------------------------------------*

cPtr_ltgt_5F_sync_5F_void::cPtr_ltgt_5F_sync_5F_void (const GALGAS_location & in_loc
                                                      COMMA_LOCATION_ARGS) :
cPtr_ltgt_5F_sync_5F_obj (in_loc COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_ltgt_5F_sync_5F_void::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_void ;
}

void cPtr_ltgt_5F_sync_5F_void::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@ltgt_sync_void:" ;
  mAttribute_loc.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @ltgt_sync_void type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_void ("ltgt_sync_void",
                                             & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_ltgt_5F_sync_5F_void::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_ltgt_5F_sync_5F_void ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_ltgt_5F_sync_5F_void::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_ltgt_5F_sync_5F_void (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_void GALGAS_ltgt_5F_sync_5F_void::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_ltgt_5F_sync_5F_void result ;
  const GALGAS_ltgt_5F_sync_5F_void * p = (const GALGAS_ltgt_5F_sync_5F_void *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_ltgt_5F_sync_5F_void *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "ltgt_sync_void", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*



typeComparisonResult GALGAS_adjustable_5F_obj::objectCompare (const GALGAS_adjustable_5F_obj & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_obj::GALGAS_adjustable_5F_obj (void) :
GALGAS_oil_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_obj::GALGAS_adjustable_5F_obj (const cPtr_adjustable_5F_obj * inSourcePtr) :
GALGAS_oil_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_adjustable_5F_obj) ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_adjustable_5F_obj::reader_location (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_adjustable_5F_obj * p = (const cPtr_adjustable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_adjustable_5F_obj) ;
    result = p->mAttribute_location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                  Pointer class for @adjustable_obj class                  *
//---------------------------------------------------------------------------*

cPtr_adjustable_5F_obj::cPtr_adjustable_5F_obj (const GALGAS_lstring & in_desc,
                                                const GALGAS_location & in_location
                                                COMMA_LOCATION_ARGS) :
cPtr_oil_5F_obj (in_desc COMMA_THERE),
mAttribute_location (in_location) {
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @adjustable_obj type                            *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_adjustable_5F_obj ("adjustable_obj",
                                          & kTypeDescriptor_GALGAS_oil_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_adjustable_5F_obj::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_obj ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_adjustable_5F_obj::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_adjustable_5F_obj (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_obj GALGAS_adjustable_5F_obj::extractObject (const GALGAS_object & inObject,
                                                                  C_Compiler * inCompiler,
                                                                  const GALGAS_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_obj result ;
  const GALGAS_adjustable_5F_obj * p = (const GALGAS_adjustable_5F_obj *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_adjustable_5F_obj *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "adjustable_obj", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_adjustable_5F_false::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_adjustable_5F_false * p = (const cPtr_adjustable_5F_false *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_adjustable_5F_false) ;
  if (kOperandEqual == result) {
    result = mAttribute_desc.objectCompare (p->mAttribute_desc) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_adjustable_5F_false::objectCompare (const GALGAS_adjustable_5F_false & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_false::GALGAS_adjustable_5F_false (void) :
GALGAS_adjustable_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_false::GALGAS_adjustable_5F_false (const cPtr_adjustable_5F_false * inSourcePtr) :
GALGAS_adjustable_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_adjustable_5F_false) ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_false GALGAS_adjustable_5F_false::constructor_new (const GALGAS_lstring & inAttribute_desc,
                                                                        const GALGAS_location & inAttribute_location
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_false result ;
  if (inAttribute_desc.isValid () && inAttribute_location.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_adjustable_5F_false (inAttribute_desc, inAttribute_location COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_adjustable_5F_false::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_adjustable_5F_false * p = (cPtr_adjustable_5F_false *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_adjustable_5F_false) ;
    cPtr_adjustable_5F_false * r = NULL ;
    macroMyNew (r, cPtr_adjustable_5F_false (p->mAttribute_desc, p->mAttribute_location COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @adjustable_false class                 *
//---------------------------------------------------------------------------*

cPtr_adjustable_5F_false::cPtr_adjustable_5F_false (const GALGAS_lstring & in_desc,
                                                    const GALGAS_location & in_location
                                                    COMMA_LOCATION_ARGS) :
cPtr_adjustable_5F_obj (in_desc, in_location COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_adjustable_5F_false::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_false ;
}

void cPtr_adjustable_5F_false::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@adjustable_false:" ;
  mAttribute_desc.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @adjustable_false type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_adjustable_5F_false ("adjustable_false",
                                            & kTypeDescriptor_GALGAS_adjustable_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_adjustable_5F_false::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_false ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_adjustable_5F_false::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_adjustable_5F_false (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_false GALGAS_adjustable_5F_false::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_false result ;
  const GALGAS_adjustable_5F_false * p = (const GALGAS_adjustable_5F_false *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_adjustable_5F_false *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "adjustable_false", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_adjustable_5F_true::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_adjustable_5F_true * p = (const cPtr_adjustable_5F_true *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_adjustable_5F_true) ;
  if (kOperandEqual == result) {
    result = mAttribute_desc.objectCompare (p->mAttribute_desc) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_max_5F_retard.objectCompare (p->mAttribute_max_5F_retard) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_max_5F_advance.objectCompare (p->mAttribute_max_5F_advance) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_adjustable_5F_true::objectCompare (const GALGAS_adjustable_5F_true & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_true::GALGAS_adjustable_5F_true (void) :
GALGAS_adjustable_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_true::GALGAS_adjustable_5F_true (const cPtr_adjustable_5F_true * inSourcePtr) :
GALGAS_adjustable_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_adjustable_5F_true) ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_true GALGAS_adjustable_5F_true::constructor_new (const GALGAS_lstring & inAttribute_desc,
                                                                      const GALGAS_location & inAttribute_location,
                                                                      const GALGAS_basic_5F_type & inAttribute_max_5F_retard,
                                                                      const GALGAS_basic_5F_type & inAttribute_max_5F_advance
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_true result ;
  if (inAttribute_desc.isValid () && inAttribute_location.isValid () && inAttribute_max_5F_retard.isValid () && inAttribute_max_5F_advance.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_adjustable_5F_true (inAttribute_desc, inAttribute_location, inAttribute_max_5F_retard, inAttribute_max_5F_advance COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_adjustable_5F_true::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_adjustable_5F_true * p = (cPtr_adjustable_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_adjustable_5F_true) ;
    cPtr_adjustable_5F_true * r = NULL ;
    macroMyNew (r, cPtr_adjustable_5F_true (p->mAttribute_desc, p->mAttribute_location, p->mAttribute_max_5F_retard, p->mAttribute_max_5F_advance COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_basic_5F_type GALGAS_adjustable_5F_true::reader_max_5F_retard (UNUSED_LOCATION_ARGS) const {
  GALGAS_basic_5F_type result ;
  if (NULL != mObjectPtr) {
    const cPtr_adjustable_5F_true * p = (const cPtr_adjustable_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_adjustable_5F_true) ;
    result = p->mAttribute_max_5F_retard ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_basic_5F_type GALGAS_adjustable_5F_true::reader_max_5F_advance (UNUSED_LOCATION_ARGS) const {
  GALGAS_basic_5F_type result ;
  if (NULL != mObjectPtr) {
    const cPtr_adjustable_5F_true * p = (const cPtr_adjustable_5F_true *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_adjustable_5F_true) ;
    result = p->mAttribute_max_5F_advance ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                 Pointer class for @adjustable_true class                  *
//---------------------------------------------------------------------------*

cPtr_adjustable_5F_true::cPtr_adjustable_5F_true (const GALGAS_lstring & in_desc,
                                                  const GALGAS_location & in_location,
                                                  const GALGAS_basic_5F_type & in_max_5F_retard,
                                                  const GALGAS_basic_5F_type & in_max_5F_advance
                                                  COMMA_LOCATION_ARGS) :
cPtr_adjustable_5F_obj (in_desc, in_location COMMA_THERE),
mAttribute_max_5F_retard (in_max_5F_retard),
mAttribute_max_5F_advance (in_max_5F_advance) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_adjustable_5F_true::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_true ;
}

void cPtr_adjustable_5F_true::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@adjustable_true:" ;
  mAttribute_desc.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_max_5F_retard.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_max_5F_advance.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @adjustable_true type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_adjustable_5F_true ("adjustable_true",
                                           & kTypeDescriptor_GALGAS_adjustable_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_adjustable_5F_true::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_true ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_adjustable_5F_true::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_adjustable_5F_true (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_true GALGAS_adjustable_5F_true::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_true result ;
  const GALGAS_adjustable_5F_true * p = (const GALGAS_adjustable_5F_true *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_adjustable_5F_true *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "adjustable_true", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_adjustable_5F_void::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_adjustable_5F_void * p = (const cPtr_adjustable_5F_void *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_adjustable_5F_void) ;
  if (kOperandEqual == result) {
    result = mAttribute_desc.objectCompare (p->mAttribute_desc) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_location.objectCompare (p->mAttribute_location) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_adjustable_5F_void::objectCompare (const GALGAS_adjustable_5F_void & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_void::GALGAS_adjustable_5F_void (void) :
GALGAS_adjustable_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_void::GALGAS_adjustable_5F_void (const cPtr_adjustable_5F_void * inSourcePtr) :
GALGAS_adjustable_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_adjustable_5F_void) ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_void GALGAS_adjustable_5F_void::constructor_new (const GALGAS_lstring & inAttribute_desc,
                                                                      const GALGAS_location & inAttribute_location
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_void result ;
  if (inAttribute_desc.isValid () && inAttribute_location.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_adjustable_5F_void (inAttribute_desc, inAttribute_location COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_adjustable_5F_void::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_adjustable_5F_void * p = (cPtr_adjustable_5F_void *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_adjustable_5F_void) ;
    cPtr_adjustable_5F_void * r = NULL ;
    macroMyNew (r, cPtr_adjustable_5F_void (p->mAttribute_desc, p->mAttribute_location COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @adjustable_void class                  *
//---------------------------------------------------------------------------*

cPtr_adjustable_5F_void::cPtr_adjustable_5F_void (const GALGAS_lstring & in_desc,
                                                  const GALGAS_location & in_location
                                                  COMMA_LOCATION_ARGS) :
cPtr_adjustable_5F_obj (in_desc, in_location COMMA_THERE) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_adjustable_5F_void::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_void ;
}

void cPtr_adjustable_5F_void::description (C_String & ioString,
                                           const PMSInt32 inIndentation) const {
  ioString << "[@adjustable_void:" ;
  mAttribute_desc.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_location.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                           @adjustable_void type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_adjustable_5F_void ("adjustable_void",
                                           & kTypeDescriptor_GALGAS_adjustable_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_adjustable_5F_void::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_adjustable_5F_void ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_adjustable_5F_void::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_adjustable_5F_void (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_void GALGAS_adjustable_5F_void::extractObject (const GALGAS_object & inObject,
                                                                    C_Compiler * inCompiler,
                                                                    const GALGAS_location & inErrorLocation
                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_adjustable_5F_void result ;
  const GALGAS_adjustable_5F_void * p = (const GALGAS_adjustable_5F_void *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_adjustable_5F_void *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "adjustable_void", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_expiry_5F_point_5F_obj::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_expiry_5F_point_5F_obj * p = (const cPtr_expiry_5F_point_5F_obj *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_expiry_5F_point_5F_obj) ;
  if (kOperandEqual == result) {
    result = mAttribute_desc.objectCompare (p->mAttribute_desc) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_offset.objectCompare (p->mAttribute_offset) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_name.objectCompare (p->mAttribute_name) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_adjust.objectCompare (p->mAttribute_adjust) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_actions.objectCompare (p->mAttribute_actions) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_expiry_5F_point_5F_obj::objectCompare (const GALGAS_expiry_5F_point_5F_obj & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_obj::GALGAS_expiry_5F_point_5F_obj (void) :
GALGAS_oil_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_obj::GALGAS_expiry_5F_point_5F_obj (const cPtr_expiry_5F_point_5F_obj * inSourcePtr) :
GALGAS_oil_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_expiry_5F_point_5F_obj) ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_obj GALGAS_expiry_5F_point_5F_obj::constructor_new (const GALGAS_lstring & inAttribute_desc,
                                                                              const GALGAS_basic_5F_type & inAttribute_offset,
                                                                              const GALGAS_lstring & inAttribute_name,
                                                                              const GALGAS_adjustable_5F_obj & inAttribute_adjust,
                                                                              const GALGAS_action_5F_list & inAttribute_actions
                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_expiry_5F_point_5F_obj result ;
  if (inAttribute_desc.isValid () && inAttribute_offset.isValid () && inAttribute_name.isValid () && inAttribute_adjust.isValid () && inAttribute_actions.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_expiry_5F_point_5F_obj (inAttribute_desc, inAttribute_offset, inAttribute_name, inAttribute_adjust, inAttribute_actions COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_obj::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_expiry_5F_point_5F_obj * p = (cPtr_expiry_5F_point_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expiry_5F_point_5F_obj) ;
    cPtr_expiry_5F_point_5F_obj * r = NULL ;
    macroMyNew (r, cPtr_expiry_5F_point_5F_obj (p->mAttribute_desc, p->mAttribute_offset, p->mAttribute_name, p->mAttribute_adjust, p->mAttribute_actions COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_basic_5F_type GALGAS_expiry_5F_point_5F_obj::reader_offset (UNUSED_LOCATION_ARGS) const {
  GALGAS_basic_5F_type result ;
  if (NULL != mObjectPtr) {
    const cPtr_expiry_5F_point_5F_obj * p = (const cPtr_expiry_5F_point_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_expiry_5F_point_5F_obj) ;
    result = p->mAttribute_offset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_expiry_5F_point_5F_obj::reader_name (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_expiry_5F_point_5F_obj * p = (const cPtr_expiry_5F_point_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_expiry_5F_point_5F_obj) ;
    result = p->mAttribute_name ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_adjustable_5F_obj GALGAS_expiry_5F_point_5F_obj::reader_adjust (UNUSED_LOCATION_ARGS) const {
  GALGAS_adjustable_5F_obj result ;
  if (NULL != mObjectPtr) {
    const cPtr_expiry_5F_point_5F_obj * p = (const cPtr_expiry_5F_point_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_expiry_5F_point_5F_obj) ;
    result = p->mAttribute_adjust ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_action_5F_list GALGAS_expiry_5F_point_5F_obj::reader_actions (UNUSED_LOCATION_ARGS) const {
  GALGAS_action_5F_list result ;
  if (NULL != mObjectPtr) {
    const cPtr_expiry_5F_point_5F_obj * p = (const cPtr_expiry_5F_point_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_expiry_5F_point_5F_obj) ;
    result = p->mAttribute_actions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_expiry_5F_point_5F_obj::modifier_setActions (GALGAS_action_5F_list inValue
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_expiry_5F_point_5F_obj * p = (cPtr_expiry_5F_point_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expiry_5F_point_5F_obj) ;
    p->mAttribute_actions = inValue ;
  }
}

//---------------------------------------------------------------------------*
//                 Pointer class for @expiry_point_obj class                 *
//---------------------------------------------------------------------------*

cPtr_expiry_5F_point_5F_obj::cPtr_expiry_5F_point_5F_obj (const GALGAS_lstring & in_desc,
                                                          const GALGAS_basic_5F_type & in_offset,
                                                          const GALGAS_lstring & in_name,
                                                          const GALGAS_adjustable_5F_obj & in_adjust,
                                                          const GALGAS_action_5F_list & in_actions
                                                          COMMA_LOCATION_ARGS) :
cPtr_oil_5F_obj (in_desc COMMA_THERE),
mAttribute_offset (in_offset),
mAttribute_name (in_name),
mAttribute_adjust (in_adjust),
mAttribute_actions (in_actions) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_expiry_5F_point_5F_obj::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expiry_5F_point_5F_obj ;
}

void cPtr_expiry_5F_point_5F_obj::description (C_String & ioString,
                                               const PMSInt32 inIndentation) const {
  ioString << "[@expiry_point_obj:" ;
  mAttribute_desc.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_offset.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_name.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_adjust.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_actions.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @expiry_point_obj type                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_expiry_5F_point_5F_obj ("expiry_point_obj",
                                               & kTypeDescriptor_GALGAS_oil_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_expiry_5F_point_5F_obj::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expiry_5F_point_5F_obj ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_expiry_5F_point_5F_obj::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_expiry_5F_point_5F_obj (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_obj GALGAS_expiry_5F_point_5F_obj::extractObject (const GALGAS_object & inObject,
                                                                            C_Compiler * inCompiler,
                                                                            const GALGAS_location & inErrorLocation
                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_expiry_5F_point_5F_obj result ;
  const GALGAS_expiry_5F_point_5F_obj * p = (const GALGAS_expiry_5F_point_5F_obj *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_expiry_5F_point_5F_obj *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "expiry_point_obj", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

typeComparisonResult cPtr_scheduletable_5F_obj::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
  if (kOperandEqual == result) {
    result = mAttribute_desc.objectCompare (p->mAttribute_desc) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_counter.objectCompare (p->mAttribute_counter) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_autostart.objectCompare (p->mAttribute_autostart) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_ltgt_5F_sync.objectCompare (p->mAttribute_ltgt_5F_sync) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_periodic.objectCompare (p->mAttribute_periodic) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_length.objectCompare (p->mAttribute_length) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_exp_5F_points.objectCompare (p->mAttribute_exp_5F_points) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_acc_5F_apps.objectCompare (p->mAttribute_acc_5F_apps) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*


typeComparisonResult GALGAS_scheduletable_5F_obj::objectCompare (const GALGAS_scheduletable_5F_obj & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj::GALGAS_scheduletable_5F_obj (void) :
GALGAS_oil_5F_obj () {
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj::GALGAS_scheduletable_5F_obj (const cPtr_scheduletable_5F_obj * inSourcePtr) :
GALGAS_oil_5F_obj (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_scheduletable_5F_obj) ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj GALGAS_scheduletable_5F_obj::constructor_new (const GALGAS_lstring & inAttribute_desc,
                                                                          const GALGAS_lstring & inAttribute_counter,
                                                                          const GALGAS_autostart_5F_obj & inAttribute_autostart,
                                                                          const GALGAS_ltgt_5F_sync_5F_obj & inAttribute_ltgt_5F_sync,
                                                                          const GALGAS_basic_5F_type & inAttribute_periodic,
                                                                          const GALGAS_basic_5F_type & inAttribute_length,
                                                                          const GALGAS_expiry_5F_point_5F_list & inAttribute_exp_5F_points,
                                                                          const GALGAS_lstringlist & inAttribute_acc_5F_apps
                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_scheduletable_5F_obj result ;
  if (inAttribute_desc.isValid () && inAttribute_counter.isValid () && inAttribute_autostart.isValid () && inAttribute_ltgt_5F_sync.isValid () && inAttribute_periodic.isValid () && inAttribute_length.isValid () && inAttribute_exp_5F_points.isValid () && inAttribute_acc_5F_apps.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_scheduletable_5F_obj (inAttribute_desc, inAttribute_counter, inAttribute_autostart, inAttribute_ltgt_5F_sync, inAttribute_periodic, inAttribute_length, inAttribute_exp_5F_points, inAttribute_acc_5F_apps COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    cPtr_scheduletable_5F_obj * r = NULL ;
    macroMyNew (r, cPtr_scheduletable_5F_obj (p->mAttribute_desc, p->mAttribute_counter, p->mAttribute_autostart, p->mAttribute_ltgt_5F_sync, p->mAttribute_periodic, p->mAttribute_length, p->mAttribute_exp_5F_points, p->mAttribute_acc_5F_apps COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_scheduletable_5F_obj::reader_counter (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_counter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_autostart_5F_obj GALGAS_scheduletable_5F_obj::reader_autostart (UNUSED_LOCATION_ARGS) const {
  GALGAS_autostart_5F_obj result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_autostart ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_ltgt_5F_sync_5F_obj GALGAS_scheduletable_5F_obj::reader_ltgt_5F_sync (UNUSED_LOCATION_ARGS) const {
  GALGAS_ltgt_5F_sync_5F_obj result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_ltgt_5F_sync ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_basic_5F_type GALGAS_scheduletable_5F_obj::reader_periodic (UNUSED_LOCATION_ARGS) const {
  GALGAS_basic_5F_type result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_periodic ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_basic_5F_type GALGAS_scheduletable_5F_obj::reader_length (UNUSED_LOCATION_ARGS) const {
  GALGAS_basic_5F_type result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_length ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_expiry_5F_point_5F_list GALGAS_scheduletable_5F_obj::reader_exp_5F_points (UNUSED_LOCATION_ARGS) const {
  GALGAS_expiry_5F_point_5F_list result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_exp_5F_points ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_scheduletable_5F_obj::reader_acc_5F_apps (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_scheduletable_5F_obj * p = (const cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_scheduletable_5F_obj) ;
    result = p->mAttribute_acc_5F_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setCounter (GALGAS_lstring inValue
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_counter = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setAutostart (GALGAS_autostart_5F_obj inValue
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_autostart = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setLtgt_5F_sync (GALGAS_ltgt_5F_sync_5F_obj inValue
                                                            COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_ltgt_5F_sync = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setPeriodic (GALGAS_basic_5F_type inValue
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_periodic = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setLength (GALGAS_basic_5F_type inValue
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_length = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setExp_5F_points (GALGAS_expiry_5F_point_5F_list inValue
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_exp_5F_points = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_scheduletable_5F_obj::modifier_setAcc_5F_apps (GALGAS_lstringlist inValue
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  if (NULL != mObjectPtr) {
    cPtr_scheduletable_5F_obj * p = (cPtr_scheduletable_5F_obj *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_scheduletable_5F_obj) ;
    p->mAttribute_acc_5F_apps = inValue ;
  }
}

//---------------------------------------------------------------------------*
//                Pointer class for @scheduletable_obj class                 *
//---------------------------------------------------------------------------*

cPtr_scheduletable_5F_obj::cPtr_scheduletable_5F_obj (const GALGAS_lstring & in_desc,
                                                      const GALGAS_lstring & in_counter,
                                                      const GALGAS_autostart_5F_obj & in_autostart,
                                                      const GALGAS_ltgt_5F_sync_5F_obj & in_ltgt_5F_sync,
                                                      const GALGAS_basic_5F_type & in_periodic,
                                                      const GALGAS_basic_5F_type & in_length,
                                                      const GALGAS_expiry_5F_point_5F_list & in_exp_5F_points,
                                                      const GALGAS_lstringlist & in_acc_5F_apps
                                                      COMMA_LOCATION_ARGS) :
cPtr_oil_5F_obj (in_desc COMMA_THERE),
mAttribute_counter (in_counter),
mAttribute_autostart (in_autostart),
mAttribute_ltgt_5F_sync (in_ltgt_5F_sync),
mAttribute_periodic (in_periodic),
mAttribute_length (in_length),
mAttribute_exp_5F_points (in_exp_5F_points),
mAttribute_acc_5F_apps (in_acc_5F_apps) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_scheduletable_5F_obj::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_scheduletable_5F_obj ;
}

void cPtr_scheduletable_5F_obj::description (C_String & ioString,
                                             const PMSInt32 inIndentation) const {
  ioString << "[@scheduletable_obj:" ;
  mAttribute_desc.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_counter.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_autostart.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_ltgt_5F_sync.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_periodic.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_length.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_exp_5F_points.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_acc_5F_apps.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                          @scheduletable_obj type                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_scheduletable_5F_obj ("scheduletable_obj",
                                             & kTypeDescriptor_GALGAS_oil_5F_obj) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_scheduletable_5F_obj::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_scheduletable_5F_obj ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_scheduletable_5F_obj::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_scheduletable_5F_obj (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_scheduletable_5F_obj GALGAS_scheduletable_5F_obj::extractObject (const GALGAS_object & inObject,
                                                                        C_Compiler * inCompiler,
                                                                        const GALGAS_location & inErrorLocation
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_scheduletable_5F_obj result ;
  const GALGAS_scheduletable_5F_obj * p = (const GALGAS_scheduletable_5F_obj *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_scheduletable_5F_obj *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "scheduletable_obj", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


