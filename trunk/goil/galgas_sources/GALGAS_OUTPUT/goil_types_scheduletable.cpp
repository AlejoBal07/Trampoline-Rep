//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_types_scheduletable.cpp'                     *
//                        Generated by version 1.8.5                         *
//                      june 19th, 2009, at 17h46'21"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 515
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_types_scheduletable.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_scheduletable.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_sd_autostart_false'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_false::
cPtr_sd_autostart_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_autostart_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_false * GGS_sd_autostart_false::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_false *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_false * ptr = dynamic_cast <const cPtr_sd_autostart_false *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_false::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_false:"
           << location.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_false::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_false (& typeid (cPtr_sd_autostart_false), & typeid (cPtr_autostart_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_false::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_false (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_sd_autostart_false'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_false::
GGS_sd_autostart_false (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false::
GGS_sd_autostart_false (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_false GGS_sd_autostart_false::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_false *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_false) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_false),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false GGS_sd_autostart_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_false (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_false::actualTypeName (void) const {
  return "sd_autostart_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_false ("sd_autostart_false", gClassInfoFor__autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_sd_autostart_true'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_true::
cPtr_sd_autostart_true (const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_autostart_obj (argument_0 COMMA_THERE),
app_modes (argument_1) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_true * GGS_sd_autostart_true::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_true * ptr = dynamic_cast <const cPtr_sd_autostart_true *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_true::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_true:"
           << location.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << app_modes.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_true::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_true (& typeid (cPtr_sd_autostart_true), & typeid (cPtr_autostart_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_true::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_true (location, app_modes COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_sd_autostart_true'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_true::
GGS_sd_autostart_true (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true::
GGS_sd_autostart_true (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_true GGS_sd_autostart_true::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_true *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_true) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_true),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true GGS_sd_autostart_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_true (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset  GGS_sd_autostart_true::
reader_app_modes (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringset   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_true *) mPointer)->app_modes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_true::actualTypeName (void) const {
  return "sd_autostart_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_true ("sd_autostart_true", gClassInfoFor__autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_sd_autostart_synchron'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_synchron::
cPtr_sd_autostart_synchron (const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS)
:cPtr_sd_autostart_true (argument_0, argument_1 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_synchron * GGS_sd_autostart_synchron::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_synchron *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_synchron *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_synchron::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_synchron * ptr = dynamic_cast <const cPtr_sd_autostart_synchron *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_synchron::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_synchron:"
           << location.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << app_modes.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_synchron::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_synchron::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_synchron (& typeid (cPtr_sd_autostart_synchron), & typeid (cPtr_sd_autostart_true), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_synchron::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_synchron ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_synchron::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_synchron (location, app_modes COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_synchron'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron::
GGS_sd_autostart_synchron (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron::
GGS_sd_autostart_synchron (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_synchron GGS_sd_autostart_synchron::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_synchron result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_synchron *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_synchron) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_synchron (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_synchron),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_synchron GGS_sd_autostart_synchron::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_synchron result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_synchron (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_synchron::actualTypeName (void) const {
  return "sd_autostart_synchron" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_synchron ("sd_autostart_synchron", gClassInfoFor__sd_autostart_true) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_sd_autostart_relative'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_relative::
cPtr_sd_autostart_relative (const GGS_location & argument_0,
                                const GGS_stringset & argument_1,
                                const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_sd_autostart_true (argument_0, argument_1 COMMA_THERE),
offset (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_relative * GGS_sd_autostart_relative::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_relative *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_relative *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_relative::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_relative * ptr = dynamic_cast <const cPtr_sd_autostart_relative *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue ()
         && offset.operator_isEqual (ptr->offset).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_relative::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_relative:"
           << location.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << app_modes.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << offset.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_relative::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_relative::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_relative (& typeid (cPtr_sd_autostart_relative), & typeid (cPtr_sd_autostart_true), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_relative::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_relative ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_relative::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_relative (location, app_modes, offset COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_relative'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_relative::
GGS_sd_autostart_relative (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_relative::
GGS_sd_autostart_relative (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_relative GGS_sd_autostart_relative::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_relative result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_relative *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_relative) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_relative (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_relative),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_relative GGS_sd_autostart_relative::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1,
                 const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_relative result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_relative (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_sd_autostart_relative::
reader_offset (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_relative *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_relative *) mPointer)->offset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_relative::actualTypeName (void) const {
  return "sd_autostart_relative" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_relative ("sd_autostart_relative", gClassInfoFor__sd_autostart_true) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_sd_autostart_absolute'                     *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_absolute::
cPtr_sd_autostart_absolute (const GGS_location & argument_0,
                                const GGS_stringset & argument_1,
                                const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_sd_autostart_true (argument_0, argument_1 COMMA_THERE),
value (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_absolute * GGS_sd_autostart_absolute::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_absolute *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_absolute *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_absolute::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_absolute * ptr = dynamic_cast <const cPtr_sd_autostart_absolute *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = location.operator_isEqual (ptr->location).boolValue ()
         && app_modes.operator_isEqual (ptr->app_modes).boolValue ()
         && value.operator_isEqual (ptr->value).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_absolute::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_absolute:"
           << location.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << app_modes.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << value.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_absolute::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_absolute::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_absolute (& typeid (cPtr_sd_autostart_absolute), & typeid (cPtr_sd_autostart_true), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_absolute::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_absolute ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_absolute::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_absolute (location, app_modes, value COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_absolute'                  *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute::
GGS_sd_autostart_absolute (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute::
GGS_sd_autostart_absolute (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_sd_autostart_absolute GGS_sd_autostart_absolute::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_absolute result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_absolute *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_absolute) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_sd_autostart_absolute (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_absolute),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_absolute GGS_sd_autostart_absolute::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_stringset & argument_1,
                 const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_absolute result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_absolute (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_sd_autostart_absolute::
reader_value (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_absolute *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_absolute *) mPointer)->value ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_absolute::actualTypeName (void) const {
  return "sd_autostart_absolute" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_absolute ("sd_autostart_absolute", gClassInfoFor__sd_autostart_true) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_ltgt_sync_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_obj::
cPtr_ltgt_sync_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
loc (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_obj * GGS_ltgt_sync_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_obj::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_obj:"
           << loc.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_obj (& typeid (cPtr_ltgt_sync_obj), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_obj::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_ltgt_sync_obj'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj::
GGS_ltgt_sync_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj::
GGS_ltgt_sync_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_obj GGS_ltgt_sync_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_obj *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_ltgt_sync_obj::
reader_loc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_obj *) mPointer)->loc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_obj::actualTypeName (void) const {
  return "ltgt_sync_obj" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_ltgt_sync_obj::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__ltgt_sync_obj ("ltgt_sync_obj") ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_void'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_void::
cPtr_ltgt_sync_void (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_void * GGS_ltgt_sync_void::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_void *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_void *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_void::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_void * ptr = dynamic_cast <const cPtr_ltgt_sync_void *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_void::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_void:"
           << loc.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_void::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_void::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_void (& typeid (cPtr_ltgt_sync_void), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_void::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_void ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_void::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_void (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_void'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_void::
GGS_ltgt_sync_void (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void::
GGS_ltgt_sync_void (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_void GGS_ltgt_sync_void::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_void *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_void) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_void (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_void),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void GGS_ltgt_sync_void::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_void (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_void::actualTypeName (void) const {
  return "ltgt_sync_void" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_void ("ltgt_sync_void", gClassInfoFor__ltgt_sync_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_false'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_false::
cPtr_ltgt_sync_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_false * GGS_ltgt_sync_false::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_false *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_false * ptr = dynamic_cast <const cPtr_ltgt_sync_false *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_false::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_false:"
           << loc.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_false::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_false (& typeid (cPtr_ltgt_sync_false), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_false::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_false (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_false'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_false::
GGS_ltgt_sync_false (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false::
GGS_ltgt_sync_false (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_false GGS_ltgt_sync_false::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_false *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_false) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_false),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false GGS_ltgt_sync_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_false (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_false::actualTypeName (void) const {
  return "ltgt_sync_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_false ("ltgt_sync_false", gClassInfoFor__ltgt_sync_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_true'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_true::
cPtr_ltgt_sync_true (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE),
strategy (argument_1),
precision (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_true * GGS_ltgt_sync_true::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_true * ptr = dynamic_cast <const cPtr_ltgt_sync_true *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = loc.operator_isEqual (ptr->loc).boolValue ()
         && strategy.operator_isEqual (ptr->strategy).boolValue ()
         && precision.operator_isEqual (ptr->precision).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_true::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_true:"
           << loc.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << strategy.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << precision.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_true::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_true (& typeid (cPtr_ltgt_sync_true), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_true::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_true (loc, strategy, precision COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_true'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_true::
GGS_ltgt_sync_true (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true::
GGS_ltgt_sync_true (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_ltgt_sync_true GGS_ltgt_sync_true::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_true *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_true) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_ltgt_sync_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_true),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true GGS_ltgt_sync_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_true (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_ltgt_sync_true::
reader_strategy (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_true *) mPointer)->strategy ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_ltgt_sync_true::
reader_precision (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_true *) mPointer)->precision ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_true::actualTypeName (void) const {
  return "ltgt_sync_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_true ("ltgt_sync_true", gClassInfoFor__ltgt_sync_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of list '@action_list'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_action_list::
elementOf_GGS_action_list (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_action_obj & argument_2):
offset (argument_0),
order (argument_1),
act (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_action_list::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_action_list * ptr = dynamic_cast <const elementOf_GGS_action_list *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = offset.operator_isEqual (ptr->offset).boolValue ()
         && order.operator_isEqual (ptr->order).boolValue ()
         && act.operator_isEqual (ptr->act).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

sint32 elementOf_GGS_action_list::
compareForSorting (const cSortedListElement * inOperand) const {
  elementOf_GGS_action_list * operand = (elementOf_GGS_action_list *) inOperand ;
  sint32 result = offset.compareForSortedList (operand->offset) ;
  if (result == 0) {
    result = order.compareForSortedList (operand->order) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_action_list::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << offset.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << order.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << act.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           List '@action_list'                             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_action_list::GGS_action_list (void): AC_galgas_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_action_list::
GGS_action_list (const GGS_action_list & inSource): AC_galgas_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_action_list::
operator_isEqual (const GGS_action_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_action_list::
operator_isNotEqual (const GGS_action_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_internalAppendValues (const GGS_uint64 & argument_0,
                    const GGS_uint & argument_1,
                    const GGS_action_obj & argument_2) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_addAssign_operation (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_action_obj & argument_2) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

GGS_action_list GGS_action_list::
operator_concat (const GGS_action_list & inOperand) const {
  GGS_action_list result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
dotAssign_operation (const GGS_action_list inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_action_list * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint64  p_0 = p->offset ;
          GGS_uint  p_1 = p->order ;
          GGS_action_obj  p_2 = p->act ;
          _internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->offset,
                                ptr->order,
                                ptr->act) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_action_list::
constructor_emptySortedList (void) {
  GGS_action_list result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_action_list::
constructor_sortedListWithValue (const GGS_uint64 & argument_0,
                           const GGS_uint & argument_1,
                           const GGS_action_obj & argument_2) {
  GGS_action_list result ;
  result.alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_action_list::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (inLexique, "@action_list", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
method_smallest (C_Compiler & inLexique,
                 GGS_uint64 & _out_0,
                 GGS_uint & _out_1,
                 GGS_action_obj & _out_2
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->offset ;
    _out_1 = ptr->order ;
    _out_2 = ptr->act ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
method_greatest (C_Compiler & inLexique,
             GGS_uint64 & _out_0,
             GGS_uint & _out_1,
             GGS_action_obj & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->offset ;
    _out_1 = ptr->order ;
    _out_2 = ptr->act ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_uint64 & _out_0,
                 GGS_uint & _out_1,
                 GGS_action_obj & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->offset ;
    _out_1 = ptr->order ;
    _out_2 = ptr->act ;
    _insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_uint64 & _out_0,
                GGS_uint & _out_1,
                GGS_action_obj & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->offset ;
    _out_1 = ptr->order ;
    _out_2 = ptr->act ;
    _insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_action_list::cEnumerator::_offset (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->offset ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint  & GGS_action_list::cEnumerator::_order (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->order ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_action_obj  & GGS_action_list::cEnumerator::_act (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->act ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "expiry_point"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_expiry_point (C_Compiler & inLexique,
                                GGS_lstring   var_cas_name,
                                GGS_uint64   var_cas_expiry,
                                GGS_uint64   var_cas_previous_expiry,
                                GGS_uint   var_cas_index,
                                GGS_string & var_cas_i_res COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_expiry_point at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_exp_st ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_exp_st,  GGS_string ("expiry_point") COMMA_SOURCE_FILE_AT_LINE (78)) ;
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EXPIRY_POINT$"), (((var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_concat (GGS_string ("_"))).operator_concat (var_cas_expiry.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79)))).operator_concat (GGS_string ("_expirypoint")) COMMA_SOURCE_FILE_AT_LINE (79)) ;
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OFFSET$"), var_cas_expiry.substract_operation (inLexique, var_cas_previous_expiry COMMA_SOURCE_FILE_AT_LINE (81)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) COMMA_SOURCE_FILE_AT_LINE (81)) ;
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTION_COUNT$"), var_cas_index.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) COMMA_SOURCE_FILE_AT_LINE (83)) ;
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTION_ARRAY$"), ((var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (84))).operator_concat (GGS_string ("_"))).operator_concat (var_cas_expiry.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (84))) COMMA_SOURCE_FILE_AT_LINE (84)) ;
  GGS_string var_cas_res ;
  var_cas_res = ((((((GGS_string ("\n"
    "tpl_action *")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87)))).operator_concat (GGS_string ("_"))).operator_concat (var_cas_expiry.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87)))).operator_concat (GGS_string ("["))).operator_concat (var_cas_index.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87)))).operator_concat (GGS_string ("] = {\n")) ;
  GGS_uint  var_cas_i ;
  var_cas_i = GGS_uint (0U) ;
  GGS_uint _variant_2767 = var_cas_index ;
  GGS_bool _condition_2767 (_variant_2767.isBuilt (), true) ;
  while (_condition_2767.isBuiltAndTrue ()) {
    _condition_2767 = (var_cas_i).operator_strictInf (var_cas_index) ;
    if (_condition_2767.isBuiltAndTrue ()) {
      if (_variant_2767.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (98)) ;
        _condition_2767 = GGS_bool (false) ;
      }else{
        _variant_2767.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_res.appendCString ("    (tpl_action *)&") ;
        var_cas_res.dotAssign_operation (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91))) ;
        var_cas_res.appendCString ("_") ;
        var_cas_res.dotAssign_operation (var_cas_i.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91))) ;
        var_cas_res.appendCString ("_") ;
        var_cas_res.dotAssign_operation (var_cas_expiry.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91))) ;
        var_cas_res.appendCString ("_expirypoint_action") ;
        if (((var_cas_i).operator_strictInf (var_cas_index.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (92)))).isBuiltAndTrue ()) {
          var_cas_res.appendCString (",\n") ;
        }else{
          var_cas_res.appendCString ("\n") ;
        }
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }
    }
  }
  var_cas_res.appendCString ("};\n") ;
  var_cas_i_res.dotAssign_operation (var_cas_exp_st.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EXPIRY_POINT_ACTIONS$"), var_cas_res COMMA_SOURCE_FILE_AT_LINE (101))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_expiry_point\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_scheduletable_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_scheduletable_obj::
cPtr_scheduletable_obj (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_autostart_obj & argument_2,
                                const GGS_ltgt_sync_obj & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_action_list & argument_6,
                                const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
counter (argument_1),
autostart (argument_2),
ltgt_sync (argument_3),
periodic (argument_4),
length (argument_5),
actions (argument_6),
acc_apps (argument_7) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_scheduletable_obj * GGS_scheduletable_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_scheduletable_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_scheduletable_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_scheduletable_obj * ptr = dynamic_cast <const cPtr_scheduletable_obj *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = desc.operator_isEqual (ptr->desc).boolValue ()
         && counter.operator_isEqual (ptr->counter).boolValue ()
         && autostart.operator_isEqual (ptr->autostart).boolValue ()
         && ltgt_sync.operator_isEqual (ptr->ltgt_sync).boolValue ()
         && periodic.operator_isEqual (ptr->periodic).boolValue ()
         && length.operator_isEqual (ptr->length).boolValue ()
         && actions.operator_isEqual (ptr->actions).boolValue ()
         && acc_apps.operator_isEqual (ptr->acc_apps).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_scheduletable_obj::
method_generate (C_Compiler & inLexique,
                                GGS_lstring  var_cas_name,
                                GGS_string var_cas_app_name,
                                GGS_string& var_cas_i_res COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string var_cas_stres ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_stres,  GGS_string ("schedule_table") COMMA_SOURCE_FILE_AT_LINE (120)) ;
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_NAME$"),  var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (122)) COMMA_SOURCE_FILE_AT_LINE (122)) ;
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE$"),  (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (123))).operator_concat (GGS_string ("_sched_table")) COMMA_SOURCE_FILE_AT_LINE (123)) ;
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$COUNTER$"),  ((GGS_string ("&")).operator_concat (counter.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (124)))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (124)) ;
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$EXPIRY_TABLE$"),  (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125))).operator_concat (GGS_string ("_expiry_table")) COMMA_SOURCE_FILE_AT_LINE (125)) ;
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$APP_ID$"),  (var_cas_app_name).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (126)) ;
  GGS_string var_cas_perio ;
  var_cas_perio = GGS_string ("") ;
  { const GGS_basic_type _var_4359 = periodic ; // CAST instruction
    if (_var_4359.getPtr () != NULL) {
      macroValidPointer (_var_4359.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_4359.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_4359.getPtr ()) ;
        if (((var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (133))).operator_isEqual (GGS_bool (true))).isBuiltAndTrue ()) {
          var_cas_perio = GGS_string ("TRUE") ;
        }else{
          var_cas_perio = GGS_string ("FALSE") ;
        }
      }else{
        var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for PERIODIC attribute of schedule table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138))) COMMA_SOURCE_FILE_AT_LINE (139)) ;
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$PERIODIC$"),  var_cas_perio COMMA_SOURCE_FILE_AT_LINE (141)) ;
  { const GGS_autostart_obj _var_5365 = autostart ; // CAST instruction
    if (_var_5365.getPtr () != NULL) {
      macroValidPointer (_var_5365.getPtr ()) ;
      if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_5365.getPtr ()))) {
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (145)) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_STATE$"),  GGS_string ("SCHEDULETABLE_STOPPED") COMMA_SOURCE_FILE_AT_LINE (146)) ;
      }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_5365.getPtr ()))) {
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (148)) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_STATE$"),  GGS_string ("SCHEDULETABLE_AUTOSTART_SYNCHRON") COMMA_SOURCE_FILE_AT_LINE (149)) ;
      }else if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_5365.getPtr ()))) {
        const GGS_sd_autostart_relative var_cas_sa (_var_5365.getPtr ()) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_DATE$"),  var_cas_sa.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (151)) COMMA_SOURCE_FILE_AT_LINE (151)) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_STATE$"),  GGS_string ("SCHEDULETABLE_AUTOSTART_RELATIVE") COMMA_SOURCE_FILE_AT_LINE (152)) ;
      }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_5365.getPtr ()))) {
        const GGS_sd_autostart_absolute var_cas_sa (_var_5365.getPtr ()) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_DATE$"),  var_cas_sa.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (154)) COMMA_SOURCE_FILE_AT_LINE (154)) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_STATE$"),  GGS_string ("SCHEDULETABLE_AUTOSTART_ABSOLUTE") COMMA_SOURCE_FILE_AT_LINE (155)) ;
      }else{
        var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))) COMMA_SOURCE_FILE_AT_LINE (157)) ;
      }
    }
  }
  GGS_string var_cas_expiry_tpl ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_expiry_tpl,  GGS_string ("expiry_point") COMMA_SOURCE_FILE_AT_LINE (161)) ;
  GGS_string var_cas_setevent_tpl ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_setevent_tpl,  GGS_string ("notification_setevent") COMMA_SOURCE_FILE_AT_LINE (163)) ;
  GGS_string var_cas_activatetask_tpl ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_activatetask_tpl,  GGS_string ("notification_activatetask") COMMA_SOURCE_FILE_AT_LINE (165)) ;
  GGS_string var_cas_incrementcounter_tpl ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_incrementcounter_tpl,  GGS_string ("notification_incrementcounter") COMMA_SOURCE_FILE_AT_LINE (167)) ;
  GGS_string var_cas_finalizescheduletable_tpl ;
  ::routine_retrieveTemplateString (inLexique,  var_cas_finalizescheduletable_tpl,  GGS_string ("notification_finalizescheduletable") COMMA_SOURCE_FILE_AT_LINE (169)) ;
  GGS_uint64  var_cas_cur_offset ;
  var_cas_cur_offset = GGS_uint64 (0U) ;
  GGS_uint64  var_cas_previous_offset ;
  var_cas_previous_offset = GGS_uint64 (0U) ;
  GGS_uint  var_cas_index ;
  var_cas_index = GGS_uint (0U) ;
  GGS_uint  var_cas_expiry_count ;
  var_cas_expiry_count = GGS_uint (0U) ;
  GGS_string var_cas_act_table ;
  var_cas_act_table = GGS_string ("") ;
  GGS_string var_cas_act_structs ;
  var_cas_act_structs = GGS_string ("") ;
  GGS_string var_cas_expiry_table ;
  var_cas_expiry_table = ((GGS_string ("tpl_expiry_point *")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177)))).operator_concat (GGS_string ("_expiry_table[$EXPIRY_TABLE_SIZE$] = {\n")) ;
  GGS_bool var_cas_first_time ;
  var_cas_first_time = GGS_bool (true) ;
  {
    GGS_action_list::cEnumerator enumerator_6382 (actions, true) ;
    const GGS_action_list::cElement * operand_6382 = NULL ;
    while (((operand_6382 = enumerator_6382.nextObject ()))) {
      macroValidPointer (operand_6382) ;
      if ((((operand_6382->offset).operator_isNotEqual (var_cas_cur_offset)).operator_or (((operand_6382->offset).operator_isEqual (GGS_uint64 (0U))).operator_and ((var_cas_first_time).operator_isEqual (GGS_bool (true))))).isBuiltAndTrue ()) {
        if (((var_cas_first_time).operator_not ()).isBuiltAndTrue ()) {
          ::routine_expiry_point (inLexique,  var_cas_name,  var_cas_cur_offset,  var_cas_previous_offset,  var_cas_index,  var_cas_act_table COMMA_SOURCE_FILE_AT_LINE (184)) ;
          var_cas_expiry_table.appendCString ("    &") ;
          var_cas_expiry_table.dotAssign_operation (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
          var_cas_expiry_table.appendCString ("_") ;
          var_cas_expiry_table.dotAssign_operation (var_cas_cur_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
          var_cas_expiry_table.appendCString ("_expirypoint,\n") ;
        }else{
          var_cas_first_time = GGS_bool (false) ;
        }
        var_cas_previous_offset = var_cas_cur_offset ;
        var_cas_cur_offset = operand_6382->offset ;
        var_cas_index = GGS_uint (0U) ;
        var_cas_expiry_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (192)) ;
      }
      GGS_string var_cas_res ;
      var_cas_res = GGS_string ("") ;
      { const GGS_action_obj _var_7832 = operand_6382->act ; // CAST instruction
        if (_var_7832.getPtr () != NULL) {
          macroValidPointer (_var_7832.getPtr ()) ;
          if (typeid (cPtr_activatetask_action) == typeid (* (_var_7832.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_7832.getPtr ()) ;
            var_cas_res = var_cas_activatetask_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK$"), (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (198)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (198))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (198)) ;
          }else if (typeid (cPtr_setevent_action) == typeid (* (_var_7832.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_7832.getPtr ()) ;
            var_cas_res = var_cas_setevent_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK$"), (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (200))).operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (200)) ;
            var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENT$"), (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (201)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (201))).operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_7832.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_ica (_var_7832.getPtr ()) ;
            var_cas_res = var_cas_incrementcounter_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER$"), (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (203)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203))).operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
          }else{
            var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for ACTION attribute of schedule table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (204))) COMMA_SOURCE_FILE_AT_LINE (205)) ;
          }
        }
      }
      var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NOTIFICATION_NAME$"), (((GGS_string ("expiry point at offset ")).operator_concat (operand_6382->offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208)))).operator_concat (GGS_string (" of schedule table "))).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (208))) COMMA_SOURCE_FILE_AT_LINE (206)) ;
      var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NOTIFICATION$"), (((((var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211))).operator_concat (GGS_string ("_"))).operator_concat (var_cas_index.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211)))).operator_concat (GGS_string ("_"))).operator_concat (operand_6382->offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211)))).operator_concat (GGS_string ("_expirypoint_action")) COMMA_SOURCE_FILE_AT_LINE (209)) ;
      var_cas_index.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) ;
      var_cas_act_structs.dotAssign_operation (var_cas_res) ;
      var_cas_act_structs.appendCString ("\n") ;
    }
  }
  { const GGS_basic_type _var_9103 = length ; // CAST instruction
    if (_var_9103.getPtr () != NULL) {
      macroValidPointer (_var_9103.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_9103.getPtr ()))) {
        const GGS_uint64_class var_cas_len (_var_9103.getPtr ()) ;
        if (((var_cas_cur_offset).operator_isNotEqual (var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).isBuiltAndTrue ()) {
          ::routine_expiry_point (inLexique,  var_cas_name,  var_cas_cur_offset,  var_cas_previous_offset,  var_cas_index,  var_cas_act_table COMMA_SOURCE_FILE_AT_LINE (223)) ;
          var_cas_expiry_table.appendCString ("    &") ;
          var_cas_expiry_table.dotAssign_operation (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224))) ;
          var_cas_expiry_table.appendCString ("_") ;
          var_cas_expiry_table.dotAssign_operation (var_cas_cur_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224))) ;
          var_cas_expiry_table.appendCString ("_expirypoint,\n") ;
          var_cas_previous_offset = var_cas_cur_offset ;
          var_cas_cur_offset = var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) ;
          var_cas_index = GGS_uint (0U) ;
          var_cas_expiry_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ;
        }
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$LENGTH$"),  var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (230)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (230)) COMMA_SOURCE_FILE_AT_LINE (230)) ;
      }else{
        var_cas_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for LENGTH attribute of schedule table ")).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (232))) COMMA_SOURCE_FILE_AT_LINE (233)) ;
      }
    }
  }
  GGS_string var_cas_res ;
  var_cas_res = GGS_string ("") ;
  var_cas_res = var_cas_finalizescheduletable_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE$"), (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))).operator_concat (GGS_string ("_sched_table")) COMMA_SOURCE_FILE_AT_LINE (236)) ;
  var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NOTIFICATION_NAME$"), (((GGS_string ("expiry point at offset ")).operator_concat (var_cas_cur_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239)))).operator_concat (GGS_string (" of schedule table "))).operator_concat (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239))) COMMA_SOURCE_FILE_AT_LINE (237)) ;
  var_cas_res = var_cas_res.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NOTIFICATION$"), (((((var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))).operator_concat (GGS_string ("_"))).operator_concat (var_cas_index.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242)))).operator_concat (GGS_string ("_"))).operator_concat (var_cas_cur_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242)))).operator_concat (GGS_string ("_expirypoint_action")) COMMA_SOURCE_FILE_AT_LINE (240)) ;
  var_cas_index.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (243)) ;
  var_cas_act_structs.dotAssign_operation (var_cas_res) ;
  var_cas_act_structs.appendCString ("\n") ;
  ::routine_expiry_point (inLexique,  var_cas_name,  var_cas_cur_offset,  var_cas_previous_offset,  var_cas_index,  var_cas_act_table COMMA_SOURCE_FILE_AT_LINE (245)) ;
  var_cas_expiry_table.appendCString ("    &") ;
  var_cas_expiry_table.dotAssign_operation (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
  var_cas_expiry_table.appendCString ("_") ;
  var_cas_expiry_table.dotAssign_operation (var_cas_cur_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
  var_cas_expiry_table.appendCString ("_expirypoint\n"
    "};") ;
  { const GGS_ltgt_sync_obj _var_10620 = ltgt_sync ; // CAST instruction
    if (_var_10620.getPtr () != NULL) {
      macroValidPointer (_var_10620.getPtr ()) ;
      if (typeid (cPtr_ltgt_sync_void) == typeid (* (_var_10620.getPtr ()))) {
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SYNC_STRATEGY$"),  GGS_string ("SCHEDTABLE_NO_SYNC") COMMA_SOURCE_FILE_AT_LINE (251)) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$PRECISION$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (252)) ;
      }else if (typeid (cPtr_ltgt_sync_false) == typeid (* (_var_10620.getPtr ()))) {
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SYNC_STRATEGY$"),  GGS_string ("SCHEDTABLE_NO_SYNC") COMMA_SOURCE_FILE_AT_LINE (254)) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$PRECISION$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (255)) ;
      }else if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_10620.getPtr ()))) {
        const GGS_ltgt_sync_true var_cas_sst (_var_10620.getPtr ()) ;
        ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$SYNC_STRATEGY$"),  ((GGS_string ("SCHEDTABLE_")).operator_concat (var_cas_sst.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string ("_SYNC")) COMMA_SOURCE_FILE_AT_LINE (257)) ;
        { const GGS_basic_type _var_10597 = var_cas_sst.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ; // CAST instruction
          if (_var_10597.getPtr () != NULL) {
            macroValidPointer (_var_10597.getPtr ()) ;
            if (typeid (cPtr_uint64_class) == typeid (* (_var_10597.getPtr ()))) {
              const GGS_uint64_class var_cas_p (_var_10597.getPtr ()) ;
              ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$PRECISION$"),  var_cas_p.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (260)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)) ;
            }else{
              var_cas_sst.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (262)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error, wrong type for PRECISION") COMMA_SOURCE_FILE_AT_LINE (263)) ;
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$EXPIRY_POINTS$"),  ((var_cas_act_structs).operator_concat (var_cas_act_table)).operator_concat (var_cas_expiry_table) COMMA_SOURCE_FILE_AT_LINE (266)) ;
  ::routine_doReplace (inLexique,  var_cas_stres,  GGS_string ("$EXPIRY_TABLE_SIZE$"),  var_cas_expiry_count.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) COMMA_SOURCE_FILE_AT_LINE (267)) ;
  var_cas_i_res.dotAssign_operation (var_cas_stres) ;
  var_cas_i_res.appendCString ("\n") ;
}

//---------------------------------------------------------------------------*

void cPtr_scheduletable_obj::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@scheduletable_obj:"
           << desc.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << counter.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << autostart.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << ltgt_sync.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << periodic.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << length.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << actions.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << acc_apps.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_scheduletable_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_scheduletable_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_scheduletable_obj (& typeid (cPtr_scheduletable_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_scheduletable_obj::galgasRTTI (void) const {
  return & gClassInfoFor__scheduletable_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_scheduletable_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_scheduletable_obj (desc, counter, autostart, ltgt_sync, periodic, length, actions, acc_apps COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_scheduletable_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_scheduletable_obj::
GGS_scheduletable_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj::
GGS_scheduletable_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_scheduletable_obj GGS_scheduletable_obj::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_scheduletable_obj *> (inPointer) != NULL)
      : (typeid (cPtr_scheduletable_obj) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_scheduletable_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_scheduletable_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj GGS_scheduletable_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_autostart_obj & argument_2,
                 const GGS_ltgt_sync_obj & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_basic_type & argument_5,
                 const GGS_action_list & argument_6,
                 const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj result ;
  macroMyNew (result.mPointer, cPtr_scheduletable_obj (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_scheduletable_obj::
reader_counter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->counter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_autostart_obj  GGS_scheduletable_obj::
reader_autostart (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_autostart_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->autostart ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj  GGS_scheduletable_obj::
reader_ltgt_sync (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ltgt_sync_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->ltgt_sync ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_scheduletable_obj::
reader_periodic (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->periodic ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_scheduletable_obj::
reader_length (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->length ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_scheduletable_obj::
reader_actions (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_action_list   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->actions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_scheduletable_obj::
reader_acc_apps (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->acc_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setCounter (C_Compiler & /* inLexique */, const GGS_lstring & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->counter = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setAutostart (C_Compiler & /* inLexique */, const GGS_autostart_obj & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->autostart = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setLtgt_sync (C_Compiler & /* inLexique */, const GGS_ltgt_sync_obj & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->ltgt_sync = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setPeriodic (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->periodic = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setLength (C_Compiler & /* inLexique */, const GGS_basic_type & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->length = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setActions (C_Compiler & /* inLexique */, const GGS_action_list & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->actions = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_obj::
modifier_setAcc_apps (C_Compiler & /* inLexique */, const GGS_lstringlist & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_scheduletable_obj * clone = dynamic_cast <cPtr_scheduletable_obj *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_scheduletable_obj) ;
    }
    ((cPtr_scheduletable_obj *) mPointer)->acc_apps = inValue ;
  }
}

//---------------------------------------------------------------------------*

const char * GGS_scheduletable_obj::actualTypeName (void) const {
  return "scheduletable_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__scheduletable_obj ("scheduletable_obj", gClassInfoFor__oil_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_scheduletable_map'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_scheduletable_map::e_scheduletable_map (void) :
st () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@scheduletable_map'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_scheduletable_map::
elementOf_GGS_scheduletable_map (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_scheduletable_map & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_scheduletable_map::
appendForMapDescription (C_Compiler & inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.st.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_scheduletable_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_scheduletable_map * ptr = dynamic_cast <const elementOf_GGS_scheduletable_map *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.st.operator_isEqual (ptr->mInfo.st)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_scheduletable_map::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_scheduletable_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_scheduletable_map * info = (e_scheduletable_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_scheduletable_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_scheduletable_map * info = (e_scheduletable_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_scheduletable_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_scheduletable_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_scheduletable_map::
operator_isEqual (const GGS_scheduletable_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_scheduletable_map::
operator_isNotEqual (const GGS_scheduletable_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_scheduletable_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.st ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
insertElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_scheduletable_obj & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_scheduletable_map info  ;
    info.st = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
searchElement (C_Compiler & inLexique,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_scheduletable_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.st ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_scheduletable_map::kSearchMessage_get [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('o'),
  TO_UNICODE ('w'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                  kSearchMessage_get,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_scheduletable_map::kRemoveMessage_del [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('k'),
  TO_UNICODE ('o'),
  TO_UNICODE ('w'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj & outParameter0 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_del,
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_scheduletable_map::kInsertMessage_put [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_scheduletable_obj & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 kInsertMessage_put,
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_scheduletable_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_scheduletable_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_scheduletable_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_scheduletable_map::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @scheduletable_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_scheduletable_obj  & GGS_scheduletable_map::cEnumerator::_st (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.st ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of function "default_scheduletable_obj"           *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_scheduletable_obj  function_default_scheduletable_obj (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_default_scheduletable_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_scheduletable_obj  var_cas_st ;
  var_cas_st = GGS_scheduletable_obj ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (284)), function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (285)), GGS_autostart_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_ltgt_sync_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE), GGS_action_list ::constructor_emptySortedList (), GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_default_scheduletable_obj\n") ;
  #endif
  return var_cas_st ;
}

//---------------------------------------------------------------------------*

