//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'goil_types_scheduletable.cpp'                     *
//                        Generated by version 1.8.3                         *
//                       may 29th, 2009, at 11h47'31"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_types_scheduletable.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_scheduletable.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_sd_autostart_false'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_false::
cPtr_sd_autostart_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_autostart_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_false * GGS_sd_autostart_false::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_false *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_false * _p = dynamic_cast <const cPtr_sd_autostart_false *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_false::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_false:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_false::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_false (& typeid (cPtr_sd_autostart_false), & typeid (cPtr_autostart_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_false::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_false (location COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_sd_autostart_false'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_false::
GGS_sd_autostart_false (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false::
GGS_sd_autostart_false (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_sd_autostart_false GGS_sd_autostart_false::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_false *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_false) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_sd_autostart_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_false),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_false GGS_sd_autostart_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_false result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_false (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_false::actualTypeName (void) const {
  return "sd_autostart_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_false ("sd_autostart_false", gClassInfoFor__autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_sd_autostart_true'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_sd_autostart_true::
cPtr_sd_autostart_true (const GGS_location & argument_0,
                                const GGS_luint64 & argument_1,
                                const GGS_stringset & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_autostart_obj (argument_0 COMMA_THERE),
offset (argument_1),
app_modes (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_sd_autostart_true * GGS_sd_autostart_true::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_sd_autostart_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_sd_autostart_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_sd_autostart_true * _p = dynamic_cast <const cPtr_sd_autostart_true *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue ()
         && offset._operator_isEqual (_p->offset).boolValue ()
         && app_modes._operator_isEqual (_p->app_modes).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_sd_autostart_true::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@sd_autostart_true:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << offset.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << app_modes.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_true::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_sd_autostart_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_sd_autostart_true (& typeid (cPtr_sd_autostart_true), & typeid (cPtr_autostart_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_sd_autostart_true::galgasRTTI (void) const {
  return & gClassInfoFor__sd_autostart_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_sd_autostart_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_sd_autostart_true (location, offset, app_modes COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_sd_autostart_true'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_sd_autostart_true::
GGS_sd_autostart_true (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true::
GGS_sd_autostart_true (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_sd_autostart_true GGS_sd_autostart_true::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_sd_autostart_true *> (inPointer) != NULL)
      : (typeid (cPtr_sd_autostart_true) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_sd_autostart_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_sd_autostart_true),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_sd_autostart_true GGS_sd_autostart_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_luint64 & argument_1,
                 const GGS_stringset & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_sd_autostart_true result ;
  macroMyNew (result.mPointer, cPtr_sd_autostart_true (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_luint64  GGS_sd_autostart_true::
reader_offset (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_luint64   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_true *) mPointer)->offset ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_stringset  GGS_sd_autostart_true::
reader_app_modes (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_stringset   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_sd_autostart_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_sd_autostart_true *) mPointer)->app_modes ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_sd_autostart_true::actualTypeName (void) const {
  return "sd_autostart_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_true ("sd_autostart_true", gClassInfoFor__autostart_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_ltgt_sync_obj'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_obj::
cPtr_ltgt_sync_obj (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
loc (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_obj * GGS_ltgt_sync_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_obj::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_obj:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_obj (& typeid (cPtr_ltgt_sync_obj), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_obj::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_obj ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_ltgt_sync_obj'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj::
GGS_ltgt_sync_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj::
GGS_ltgt_sync_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_ltgt_sync_obj GGS_ltgt_sync_obj::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_obj _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_obj *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_obj) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_ltgt_sync_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_ltgt_sync_obj::
reader_loc (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_obj *) mPointer)->loc ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_obj::actualTypeName (void) const {
  return "ltgt_sync_obj" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_ltgt_sync_obj::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__ltgt_sync_obj ("ltgt_sync_obj") ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_void'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_void::
cPtr_ltgt_sync_void (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_void * GGS_ltgt_sync_void::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_void *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_void *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_void::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_void * _p = dynamic_cast <const cPtr_ltgt_sync_void *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_void::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_void:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_void::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_void::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_void (& typeid (cPtr_ltgt_sync_void), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_void::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_void ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_void::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_void (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_void'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_void::
GGS_ltgt_sync_void (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void::
GGS_ltgt_sync_void (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_ltgt_sync_void GGS_ltgt_sync_void::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_void *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_void) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_ltgt_sync_void (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_void),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_void GGS_ltgt_sync_void::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_void result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_void (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_void::actualTypeName (void) const {
  return "ltgt_sync_void" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_void ("ltgt_sync_void", gClassInfoFor__ltgt_sync_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_false'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_false::
cPtr_ltgt_sync_false (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_false * GGS_ltgt_sync_false::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_false *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_false *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_false::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_false * _p = dynamic_cast <const cPtr_ltgt_sync_false *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_false::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_false:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_false::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_false::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_false (& typeid (cPtr_ltgt_sync_false), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_false::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_false ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_false::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_false (loc COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_false'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_false::
GGS_ltgt_sync_false (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false::
GGS_ltgt_sync_false (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_ltgt_sync_false GGS_ltgt_sync_false::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_false *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_false) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_ltgt_sync_false (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_false),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_false GGS_ltgt_sync_false::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_false result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_false (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_false::actualTypeName (void) const {
  return "ltgt_sync_false" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_false ("ltgt_sync_false", gClassInfoFor__ltgt_sync_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_ltgt_sync_true'                         *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_ltgt_sync_true::
cPtr_ltgt_sync_true (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr_ltgt_sync_obj (argument_0 COMMA_THERE),
strategy (argument_1),
precision (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_ltgt_sync_true * GGS_ltgt_sync_true::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_ltgt_sync_true *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_ltgt_sync_true::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_ltgt_sync_true * _p = dynamic_cast <const cPtr_ltgt_sync_true *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = loc._operator_isEqual (_p->loc).boolValue ()
         && strategy._operator_isEqual (_p->strategy).boolValue ()
         && precision._operator_isEqual (_p->precision).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_ltgt_sync_true::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@ltgt_sync_true:"
           << loc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << strategy.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << precision.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_true::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_ltgt_sync_true::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_ltgt_sync_true (& typeid (cPtr_ltgt_sync_true), & typeid (cPtr_ltgt_sync_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_ltgt_sync_true::galgasRTTI (void) const {
  return & gClassInfoFor__ltgt_sync_true ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_ltgt_sync_true::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_ltgt_sync_true (loc, strategy, precision COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_true'                      *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_ltgt_sync_true::
GGS_ltgt_sync_true (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true::
GGS_ltgt_sync_true (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_ltgt_sync_true GGS_ltgt_sync_true::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_ltgt_sync_true *> (inPointer) != NULL)
      : (typeid (cPtr_ltgt_sync_true) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_ltgt_sync_true (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_ltgt_sync_true),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_true GGS_ltgt_sync_true::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_ltgt_sync_true result ;
  macroMyNew (result.mPointer, cPtr_ltgt_sync_true (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_ltgt_sync_true::
reader_strategy (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_true *) mPointer)->strategy ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_ltgt_sync_true::
reader_precision (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_ltgt_sync_true *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_ltgt_sync_true *) mPointer)->precision ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_ltgt_sync_true::actualTypeName (void) const {
  return "ltgt_sync_true" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_true ("ltgt_sync_true", gClassInfoFor__ltgt_sync_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of list '@action_list'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_action_list::
elementOf_GGS_action_list (const GGS_uint64 & argument_0,
                                const GGS_action_obj & argument_1):
offset (argument_0),
act (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_action_list::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_action_list * _p = dynamic_cast <const elementOf_GGS_action_list *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = offset._operator_isEqual (_p->offset).boolValue ()
         && act._operator_isEqual (_p->act).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

sint32 elementOf_GGS_action_list::
compareForSorting (const cSortedListElement * inOperand) const {
  elementOf_GGS_action_list * operand = (elementOf_GGS_action_list *) inOperand ;
  sint32 result = offset.compareForSortedList (operand->offset) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_action_list::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << offset.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << act.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           List '@action_list'                             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_action_list::GGS_action_list (void): AC_galgas_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_action_list::
GGS_action_list (const GGS_action_list & inSource): AC_galgas_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_action_list::
_operator_isEqual (const GGS_action_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_action_list::
_operator_isNotEqual (const GGS_action_list & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_internalAppendValues (const GGS_uint64 & argument_0,
                    const GGS_action_obj & argument_1) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_addAssign_operation (const GGS_uint64 & argument_0,
                                const GGS_action_obj & argument_1) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

GGS_action_list GGS_action_list::
_operator_concat (const GGS_action_list & inOperand) const {
  GGS_action_list result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_dotAssign_operation (const GGS_action_list inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_action_list * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_uint64  p_0 = p->offset ;
          GGS_action_obj  p_1 = p->act ;
          _internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->offset,
                                _p->act) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_action_list::
constructor_emptySortedList (void) {
  GGS_action_list result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_action_list::
constructor_sortedListWithValue (const GGS_uint64 & argument_0,
                           const GGS_action_obj & argument_1) {
  GGS_action_list result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_action_list::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@action_list", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_action_list::
method_smallest (C_Compiler & _inLexique,
                 GGS_uint64 & _out_0,
                 GGS_action_obj & _out_1
                 COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->offset ;
    _out_1 = _p->act ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
method_greatest (C_Compiler & _inLexique,
             GGS_uint64 & _out_0,
             GGS_action_obj & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->offset ;
    _out_1 = _p->act ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
modifier_popSmallest (C_Compiler & _inLexique,
                 GGS_uint64 & _out_0,
                 GGS_action_obj & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->offset ;
    _out_1 = _p->act ;
    _insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_action_list::
modifier_popGreatest (C_Compiler & _inLexique,
                GGS_uint64 & _out_0,
                GGS_action_obj & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->offset ;
    _out_1 = _p->act ;
    _insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_action_list::cEnumerator::_offset (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->offset ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_action_obj  & GGS_action_list::cEnumerator::_act (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((cElement *) mCurrentEnumeratedObject)->act ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "expiry_point"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_expiry_point (C_Compiler & _inLexique,
                                GGS_lstring   var_cas_name,
                                GGS_uint64   var_cas_expiry,
                                GGS_uint64   var_cas_previous_expiry,
                                GGS_uint   var_cas_index,
                                GGS_string & var_cas_i_res COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_expiry_point at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_exp_st ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_exp_st,  GGS_string ("expiry_point") COMMA_SOURCE_FILE_AT_LINE (71)) ;
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$EXPIRY_POINT$"), (((var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (72)))._operator_concat (GGS_string ("_")))._operator_concat (var_cas_expiry.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (72))))._operator_concat (GGS_string ("_expirypoint")) COMMA_SOURCE_FILE_AT_LINE (72)) ;
  if (((var_cas_expiry)._operator_isNotEqual (GGS_uint64 (0U))).isBuiltAndTrue ()) {
    var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OFFSET$"), var_cas_expiry._substract_operation (_inLexique, var_cas_previous_expiry COMMA_SOURCE_FILE_AT_LINE (74)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (74)) COMMA_SOURCE_FILE_AT_LINE (74)) ;
  }
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$ACTION_COUNT$"), var_cas_index.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (76)) ;
  var_cas_exp_st = var_cas_exp_st.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$ACTION_ARRAY$"), ((var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (77)))._operator_concat (GGS_string ("_")))._operator_concat (var_cas_expiry.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (77))) COMMA_SOURCE_FILE_AT_LINE (77)) ;
  GGS_string var_cas_res ;
  var_cas_res = ((((((GGS_string ("\n"
    "tpl_action *"))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (80))))._operator_concat (GGS_string ("_")))._operator_concat (var_cas_expiry.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (80))))._operator_concat (GGS_string ("[")))._operator_concat (var_cas_index.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (80))))._operator_concat (GGS_string ("] = {\n")) ;
  GGS_uint  var_cas_i ;
  var_cas_i = GGS_uint (0U) ;
  GGS_uint _variant_2573 = var_cas_index ;
  GGS_bool _condition_2573 (_variant_2573.isBuilt (), true) ;
  while (_condition_2573.isBuiltAndTrue ()) {
    _condition_2573 = (var_cas_i)._operator_strictInf (var_cas_index) ;
    if (_condition_2573.isBuiltAndTrue ()) {
      if (_variant_2573.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (91)) ;
        _condition_2573 = GGS_bool (false) ;
      }else{
        _variant_2573._decrement_operation (_inLexique COMMA_HERE) ;
        var_cas_res.appendCString ("    (tpl_action *)&") ;
        var_cas_res._dotAssign_operation (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))) ;
        var_cas_res.appendCString ("_") ;
        var_cas_res._dotAssign_operation (var_cas_i.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))) ;
        var_cas_res.appendCString ("_") ;
        var_cas_res._dotAssign_operation (var_cas_expiry.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))) ;
        var_cas_res.appendCString ("_expirypoint_action") ;
        if (((var_cas_i)._operator_strictInf (var_cas_index._substract_operation (_inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (85)))).isBuiltAndTrue ()) {
          var_cas_res.appendCString (",\n") ;
        }else{
          var_cas_res.appendCString ("\n") ;
        }
        var_cas_i._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
  }
  var_cas_res.appendCString ("};\n") ;
  var_cas_i_res._dotAssign_operation (var_cas_exp_st.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$EXPIRY_POINT_ACTIONS$"), var_cas_res COMMA_SOURCE_FILE_AT_LINE (94))) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_expiry_point\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_scheduletable_obj'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_scheduletable_obj::
cPtr_scheduletable_obj (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_autostart_obj & argument_2,
                                const GGS_ltgt_sync_obj & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_action_list & argument_6,
                                const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS)
:cPtr_oil_obj (argument_0 COMMA_THERE),
counter (argument_1),
autostart (argument_2),
ltgt_sync (argument_3),
periodic (argument_4),
length (argument_5),
actions (argument_6),
acc_apps (argument_7) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_scheduletable_obj * GGS_scheduletable_obj::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_scheduletable_obj *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_scheduletable_obj::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_scheduletable_obj * _p = dynamic_cast <const cPtr_scheduletable_obj *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = desc._operator_isEqual (_p->desc).boolValue ()
         && counter._operator_isEqual (_p->counter).boolValue ()
         && autostart._operator_isEqual (_p->autostart).boolValue ()
         && ltgt_sync._operator_isEqual (_p->ltgt_sync).boolValue ()
         && periodic._operator_isEqual (_p->periodic).boolValue ()
         && length._operator_isEqual (_p->length).boolValue ()
         && actions._operator_isEqual (_p->actions).boolValue ()
         && acc_apps._operator_isEqual (_p->acc_apps).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_scheduletable_obj::
method_generate (C_Compiler & _inLexique,
                                GGS_lstring  var_cas_name,
                                GGS_string var_cas_app_name,
                                GGS_string& var_cas_i_res COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string var_cas_stres ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_stres,  GGS_string ("schedule_table") COMMA_SOURCE_FILE_AT_LINE (113)) ;
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_NAME$"),  var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (115)) COMMA_SOURCE_FILE_AT_LINE (115)) ;
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE$"),  (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (116)))._operator_concat (GGS_string ("_sched_table")) COMMA_SOURCE_FILE_AT_LINE (116)) ;
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$COUNTER$"),  ((GGS_string ("&"))._operator_concat (counter.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (117))))._operator_concat (GGS_string ("_counter_desc")) COMMA_SOURCE_FILE_AT_LINE (117)) ;
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$EXPIRY_TABLE$"),  (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (118)))._operator_concat (GGS_string ("_expiry_table")) COMMA_SOURCE_FILE_AT_LINE (118)) ;
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$APP_ID$"),  (var_cas_app_name)._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (119)) ;
  GGS_string var_cas_perio ;
  var_cas_perio = GGS_string ("") ;
  { const GGS_basic_type _var_4084 = periodic ; // CAST instruction
    if (_var_4084.getPtr () != NULL) {
      macroValidPointer (_var_4084.getPtr ()) ;
      if (typeid (cPtr_bool_class) == typeid (* (_var_4084.getPtr ()))) {
        const GGS_bool_class var_cas_b (_var_4084.getPtr ()) ;
        if (((var_cas_b.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (129)))._operator_isEqual (GGS_bool (true))).isBuiltAndTrue ()) {
          var_cas_perio = GGS_string ("TRUE") ;
        }else{
          var_cas_perio = GGS_string ("FALSE") ;
        }
      }else{
        var_cas_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("Internal error, unexpected type for PERIODIC attribute of schedule table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (134))) COMMA_SOURCE_FILE_AT_LINE (135)) ;
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$PERIODIC$"),  var_cas_perio COMMA_SOURCE_FILE_AT_LINE (137)) ;
  { const GGS_autostart_obj _var_4680 = autostart ; // CAST instruction
    if (_var_4680.getPtr () != NULL) {
      macroValidPointer (_var_4680.getPtr ()) ;
      if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_4680.getPtr ()))) {
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_DATE$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (141)) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_STATE$"),  GGS_string ("SCHEDULETABLE_STOPPED") COMMA_SOURCE_FILE_AT_LINE (142)) ;
      }else if (typeid (cPtr_sd_autostart_true) == typeid (* (_var_4680.getPtr ()))) {
        const GGS_sd_autostart_true var_cas_sa (_var_4680.getPtr ()) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_DATE$"),  var_cas_sa.reader_offset (_inLexique COMMA_SOURCE_FILE_AT_LINE (144)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (144)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (144)) COMMA_SOURCE_FILE_AT_LINE (144)) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SCHEDTABLE_STATE$"),  GGS_string ("SCHEDULETABLE_AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (145)) ;
      }else{
        var_cas_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (146))) COMMA_SOURCE_FILE_AT_LINE (147)) ;
      }
    }
  }
  GGS_string var_cas_expiry_tpl ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_expiry_tpl,  GGS_string ("expiry_point") COMMA_SOURCE_FILE_AT_LINE (151)) ;
  GGS_string var_cas_setevent_tpl ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_setevent_tpl,  GGS_string ("notification_setevent") COMMA_SOURCE_FILE_AT_LINE (153)) ;
  GGS_string var_cas_activatetask_tpl ;
  ::routine_retrieveTemplateString (_inLexique,  var_cas_activatetask_tpl,  GGS_string ("notification_activatetask") COMMA_SOURCE_FILE_AT_LINE (155)) ;
  GGS_uint64  var_cas_cur_offset ;
  var_cas_cur_offset = GGS_uint64 (0U) ;
  GGS_uint64  var_cas_previous_offset ;
  var_cas_previous_offset = GGS_uint64 (0U) ;
  GGS_uint  var_cas_index ;
  var_cas_index = GGS_uint (0U) ;
  GGS_uint  var_cas_expiry_count ;
  var_cas_expiry_count = GGS_uint (0U) ;
  GGS_string var_cas_act_table ;
  var_cas_act_table = GGS_string ("") ;
  GGS_string var_cas_act_structs ;
  var_cas_act_structs = GGS_string ("") ;
  GGS_string var_cas_expiry_table ;
  var_cas_expiry_table = ((GGS_string ("tpl_expiry_point *"))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (163))))._operator_concat (GGS_string ("_expiry_table[$EXPIRY_TABLE_SIZE$] = {\n")) ;
  GGS_bool var_cas_first_time ;
  var_cas_first_time = GGS_bool (true) ;
  {
    GGS_action_list::cEnumerator enumerator_5446 (actions, true) ;
    const GGS_action_list::cElement * operand_5446 = NULL ;
    while (((operand_5446 = enumerator_5446.nextObject ()))) {
      macroValidPointer (operand_5446) ;
      _inLexique.printMessage ((operand_5446->offset.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)))._operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (167)) ;
      if (((operand_5446->offset)._operator_isNotEqual (var_cas_cur_offset)).isBuiltAndTrue ()) {
        if (((var_cas_first_time)._operator_not ()).isBuiltAndTrue ()) {
          ::routine_expiry_point (_inLexique,  var_cas_name,  var_cas_cur_offset,  var_cas_previous_offset,  var_cas_index,  var_cas_act_table COMMA_SOURCE_FILE_AT_LINE (171)) ;
          var_cas_expiry_table.appendCString ("    &") ;
          var_cas_expiry_table._dotAssign_operation (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (172))) ;
          var_cas_expiry_table.appendCString ("_") ;
          var_cas_expiry_table._dotAssign_operation (var_cas_cur_offset.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (172))) ;
          var_cas_expiry_table.appendCString ("_expirypoint,\n") ;
        }else{
          var_cas_first_time = GGS_bool (false) ;
        }
        var_cas_previous_offset = var_cas_cur_offset ;
        var_cas_cur_offset = operand_5446->offset ;
        var_cas_index = GGS_uint (0U) ;
        var_cas_expiry_count._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (179)) ;
      }
      GGS_string var_cas_res ;
      var_cas_res = GGS_string ("") ;
      { const GGS_action_obj _var_6734 = operand_5446->act ; // CAST instruction
        if (_var_6734.getPtr () != NULL) {
          macroValidPointer (_var_6734.getPtr ()) ;
          if (typeid (cPtr_activatetask_action) == typeid (* (_var_6734.getPtr ()))) {
            const GGS_activatetask_action var_cas_ata (_var_6734.getPtr ()) ;
            var_cas_res = var_cas_activatetask_tpl.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK$"), (var_cas_ata.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (185)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (185)) ;
          }else if (typeid (cPtr_setevent_action) == typeid (* (_var_6734.getPtr ()))) {
            const GGS_setevent_action var_cas_sea (_var_6734.getPtr ()) ;
            var_cas_res = var_cas_setevent_tpl.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$TASK$"), (var_cas_sea.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (187)))._operator_concat (GGS_string ("_id")) COMMA_SOURCE_FILE_AT_LINE (187)) ;
            var_cas_res = var_cas_res.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$EVENT$"), (var_cas_sea.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (188)))._operator_concat (GGS_string ("_mask")) COMMA_SOURCE_FILE_AT_LINE (188)) ;
          }else{
            var_cas_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("Internal error, unexpected type for ACTION attribute of schedule table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (189))) COMMA_SOURCE_FILE_AT_LINE (190)) ;
          }
        }
      }
      var_cas_res = var_cas_res.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$NOTIFICATION_NAME$"), (((GGS_string ("expiry point at offset "))._operator_concat (operand_5446->offset.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (193))))._operator_concat (GGS_string (" of schedule table ")))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (193))) COMMA_SOURCE_FILE_AT_LINE (191)) ;
      var_cas_res = var_cas_res.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$NOTIFICATION$"), (((((var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)))._operator_concat (GGS_string ("_")))._operator_concat (var_cas_index.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (196))))._operator_concat (GGS_string ("_")))._operator_concat (operand_5446->offset.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (196))))._operator_concat (GGS_string ("_expirypoint_action")) COMMA_SOURCE_FILE_AT_LINE (194)) ;
      var_cas_index._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ;
      var_cas_act_structs._dotAssign_operation (var_cas_res) ;
      var_cas_act_structs.appendCString ("\n") ;
    }
  }
  ::routine_expiry_point (_inLexique,  var_cas_name,  var_cas_cur_offset,  var_cas_previous_offset,  var_cas_index,  var_cas_act_table COMMA_SOURCE_FILE_AT_LINE (201)) ;
  var_cas_expiry_table.appendCString ("    &") ;
  var_cas_expiry_table._dotAssign_operation (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (202))) ;
  var_cas_expiry_table.appendCString ("_") ;
  var_cas_expiry_table._dotAssign_operation (var_cas_cur_offset.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (202))) ;
  var_cas_expiry_table.appendCString ("_expirypoint\n"
    "};") ;
  GGS_uint64  var_cas_lastOffset ;
  GGS_action_obj  automatic_var_1 ;
  const GGS_action_list  _temp_7609 = actions ;
  if (_temp_7609.isBuilt ()) {
    _temp_7609 (HERE)->method_greatest (_inLexique, var_cas_lastOffset, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (207)) ;
  }
  { const GGS_basic_type _var_8080 = length ; // CAST instruction
    if (_var_8080.getPtr () != NULL) {
      macroValidPointer (_var_8080.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_8080.getPtr ()))) {
        const GGS_uint64_class var_cas_len (_var_8080.getPtr ()) ;
        GGS_uint64  var_cas_delay ;
        var_cas_delay = var_cas_len.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (210))._substract_operation (_inLexique, var_cas_lastOffset COMMA_SOURCE_FILE_AT_LINE (210)) ;
        var_cas_act_table = var_cas_act_table.reader_stringByReplacingStringByString (_inLexique, GGS_string ("$OFFSET$"), var_cas_delay.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (211)) COMMA_SOURCE_FILE_AT_LINE (211)) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$LENGTH$"),  var_cas_len.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)) COMMA_SOURCE_FILE_AT_LINE (213)) ;
      }else{
        var_cas_name.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string ("Internal error, unexpected type for LENGTH attribute of schedule table "))._operator_concat (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (215))) COMMA_SOURCE_FILE_AT_LINE (216)) ;
      }
    }
  }
  { const GGS_ltgt_sync_obj _var_8884 = ltgt_sync ; // CAST instruction
    if (_var_8884.getPtr () != NULL) {
      macroValidPointer (_var_8884.getPtr ()) ;
      if (typeid (cPtr_ltgt_sync_void) == typeid (* (_var_8884.getPtr ()))) {
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SYNC_STRATEGY$"),  GGS_string ("SCHEDTABLE_NO_SYNC") COMMA_SOURCE_FILE_AT_LINE (221)) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$PRECISION$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (222)) ;
      }else if (typeid (cPtr_ltgt_sync_false) == typeid (* (_var_8884.getPtr ()))) {
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SYNC_STRATEGY$"),  GGS_string ("SCHEDTABLE_NO_SYNC") COMMA_SOURCE_FILE_AT_LINE (224)) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$PRECISION$"),  GGS_string ("0") COMMA_SOURCE_FILE_AT_LINE (225)) ;
      }else if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_8884.getPtr ()))) {
        const GGS_ltgt_sync_true var_cas_sst (_var_8884.getPtr ()) ;
        ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$SYNC_STRATEGY$"),  ((GGS_string ("SCHEDTABLE_"))._operator_concat (var_cas_sst.reader_strategy (_inLexique COMMA_SOURCE_FILE_AT_LINE (227)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (227))))._operator_concat (GGS_string ("_SYNC")) COMMA_SOURCE_FILE_AT_LINE (227)) ;
        { const GGS_basic_type _var_8860 = var_cas_sst.reader_precision (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ; // CAST instruction
          if (_var_8860.getPtr () != NULL) {
            macroValidPointer (_var_8860.getPtr ()) ;
            if (typeid (cPtr_uint64_class) == typeid (* (_var_8860.getPtr ()))) {
              const GGS_uint64_class var_cas_p (_var_8860.getPtr ()) ;
              ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$PRECISION$"),  var_cas_p.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (230)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (230)) COMMA_SOURCE_FILE_AT_LINE (230)) ;
            }else{
              var_cas_sst.reader_loc (_inLexique COMMA_SOURCE_FILE_AT_LINE (232)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string ("Internal error, wrong type for PRECISION") COMMA_SOURCE_FILE_AT_LINE (233)) ;
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$EXPIRY_POINTS$"),  ((var_cas_act_structs)._operator_concat (var_cas_act_table))._operator_concat (var_cas_expiry_table) COMMA_SOURCE_FILE_AT_LINE (236)) ;
  ::routine_doReplace (_inLexique,  var_cas_stres,  GGS_string ("$EXPIRY_TABLE_SIZE$"),  var_cas_expiry_count.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (237)) COMMA_SOURCE_FILE_AT_LINE (237)) ;
  var_cas_i_res._dotAssign_operation (var_cas_stres) ;
  var_cas_i_res.appendCString ("\n") ;
}

//---------------------------------------------------------------------------*

void cPtr_scheduletable_obj::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@scheduletable_obj:"
           << desc.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << counter.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << autostart.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << ltgt_sync.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << periodic.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << length.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << actions.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << acc_apps.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_scheduletable_obj::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_scheduletable_obj::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_scheduletable_obj (& typeid (cPtr_scheduletable_obj), & typeid (cPtr_oil_obj), "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_scheduletable_obj::galgasRTTI (void) const {
  return & gClassInfoFor__scheduletable_obj ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_scheduletable_obj::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_scheduletable_obj (desc, counter, autostart, ltgt_sync, periodic, length, actions, acc_apps COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_scheduletable_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_scheduletable_obj::
GGS_scheduletable_obj (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj::
GGS_scheduletable_obj (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_scheduletable_obj GGS_scheduletable_obj::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_scheduletable_obj *> (inPointer) != NULL)
      : (typeid (cPtr_scheduletable_obj) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_scheduletable_obj (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_scheduletable_obj),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_obj GGS_scheduletable_obj::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_autostart_obj & argument_2,
                 const GGS_ltgt_sync_obj & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_basic_type & argument_5,
                 const GGS_action_list & argument_6,
                 const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS) {
  GGS_scheduletable_obj result ;
  macroMyNew (result.mPointer, cPtr_scheduletable_obj (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_scheduletable_obj::
reader_counter (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->counter ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_autostart_obj  GGS_scheduletable_obj::
reader_autostart (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_autostart_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->autostart ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_ltgt_sync_obj  GGS_scheduletable_obj::
reader_ltgt_sync (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_ltgt_sync_obj   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->ltgt_sync ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_scheduletable_obj::
reader_periodic (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->periodic ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_scheduletable_obj::
reader_length (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->length ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_action_list  GGS_scheduletable_obj::
reader_actions (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_action_list   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->actions ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_scheduletable_obj::
reader_acc_apps (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_scheduletable_obj *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_scheduletable_obj *) mPointer)->acc_apps ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_scheduletable_obj::actualTypeName (void) const {
  return "scheduletable_obj" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__scheduletable_obj ("scheduletable_obj", gClassInfoFor__oil_obj) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'e_scheduletable_map'                         *
//                                                                           *
//---------------------------------------------------------------------------*

e_scheduletable_map::e_scheduletable_map (void) :
st () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@scheduletable_map'                       *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_scheduletable_map::
elementOf_GGS_scheduletable_map (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_scheduletable_map & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_scheduletable_map::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.st.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_scheduletable_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_scheduletable_map * _p = dynamic_cast <const elementOf_GGS_scheduletable_map *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.st._operator_isEqual (_p->mInfo.st)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_scheduletable_map::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_scheduletable_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_scheduletable_map * info = (e_scheduletable_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_scheduletable_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_scheduletable_map * info = (e_scheduletable_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_scheduletable_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_scheduletable_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_scheduletable_map::
_operator_isEqual (const GGS_scheduletable_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_scheduletable_map::
_operator_isNotEqual (const GGS_scheduletable_map & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_scheduletable_obj & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.st ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_scheduletable_obj & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap () ;
    e_scheduletable_map info  ;
    info.st = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_scheduletable_obj   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
     }
  }else{
    outParameter0 = node->mInfo.st ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_setStForKey (C_Compiler & inLexique,
                        const GGS_scheduletable_obj & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (isBuilt () && inValue.isBuilt () && inKey.isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setStForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.st = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "Schedule table %K is unkown",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_del (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "Schedule table %K is unkown",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_scheduletable_map::
modifier_put (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_scheduletable_obj & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "Schedule table %K is already defined in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_scheduletable_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_scheduletable_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_scheduletable_map GGS_scheduletable_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_scheduletable_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_scheduletable_map::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @scheduletable_map " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_scheduletable_obj  & GGS_scheduletable_map::cEnumerator::_st (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.st ;
}

//---------------------------------------------------------------------------*

