//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_types_timing_prot.cpp'                      *
//                        Generated by version 1.8.2                         *
//                      april 27th, 2009, at 22h44'37"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_types_timing_prot.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_types_timing_prot.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_rezlock_map'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_rezlock_map::e_rezlock_map (void) :
time () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@rezlock_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_rezlock_map::
elementOf_GGS_rezlock_map (const GGS_lstring & inKey,
              const sint32 inIndex,
              const e_rezlock_map & inInfo) :
AC_galgas_map_element (inKey, inIndex),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_rezlock_map::
appendForMapDescription (C_Compiler & _inLexique,
                         const sint32 inElementIndex,
                         C_String & ioString,
                         const sint32 inIndentation
                         COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " << inElementIndex << ":" << mKey.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " << inElementIndex << ":" << mInfo.time.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_rezlock_map::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_rezlock_map * _p = dynamic_cast <const elementOf_GGS_rezlock_map *> (inOperand) ;
  macroValidPointer (_p) ;
  return (mInfo.time._operator_isEqual (_p->mInfo.time)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_rezlock_map::
new_element (const GGS_lstring & inKey, void * inInfo) {
  MF_Assert (reinterpret_cast <e_rezlock_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_rezlock_map * info = (e_rezlock_map *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_rezlock_map *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_rezlock_map * info = (e_rezlock_map *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_rezlock_map result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
enterIndex (const GGS_lstring & inKey,
            AC_galgas_index_core & outIndex) {
  e_rezlock_map info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      mSharedMapRoot->_mRoot,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_rezlock_map::
_operator_isEqual (const GGS_rezlock_map & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_rezlock_map::
_operator_isNotEqual (const GGS_rezlock_map & inOperand) const {
  return GGS_bool (_isBuilt () && inOperand._isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  sint32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo,mSharedMapRoot->_mRoot, attributeIndex, existingKeyLocation) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
_removeElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_uint64 & outParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  sint32 elementID = - 1 ;
  if (_isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    bool unused ;
    _internalRemove (mSharedMapRoot->_mRoot, inKey, removedElement, unused) ;
    if (removedElement == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
      outParameter0._drop () ;
    }else{
      cElement * _p = (cElement *) removedElement ;
      elementID = _p->mID ;
      outParameter0 = _p->mInfo.time ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
  macroMyDelete (removedElement, cElement) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
_insertElement (C_Compiler & inLexique,
                const char * inErrorMessage,
                const GGS_lstring & inKey,
                const GGS_uint64 & inParameter0,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  sint32 elementID = - 1 ;
  if (_isBuilt ()
   && inParameter0._isBuilt ()
   && inKey._isBuilt ()) {
    insulateMap () ;
    e_rezlock_map info  ;
    info.time = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, mSharedMapRoot->_mRoot, elementID, existingKeyLocation) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (uint32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
_searchElement (C_Compiler & inLexique,
               const char * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_uint64   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (_isBuilt () && inKey._isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      emitMapSemanticErrorMessage (inLexique, inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0._drop () ;
    if (outIndex != NULL) {
      outIndex->_drop () ;
     }
  }else{
    outParameter0 = node->mInfo.time ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (uint32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
modifier_setTimeForKey (C_Compiler & inLexique,
                        const GGS_uint64 & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) {
  if (_isBuilt () && inValue._isBuilt () && inKey._isBuilt ()) {
    insulateMap () ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    cElement * node = (cElement *) p ;
    if (node == NULL) {
      C_String errorMessage ;
      errorMessage << "the '" << inKey << "' key does not exist when calling 'setTimeForKey' modifier" ;
      inLexique.onTheFlyRunTimeError (errorMessage COMMA_THERE) ;
    }else{
      node->mInfo.time = inValue ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64   & outParameter0 COMMA_LOCATION_ARGS) const {
  _searchElement (inLexique,
                  "Resource %K is not defined",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
modifier_del (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                GGS_uint64 & outParameter0 COMMA_LOCATION_ARGS) {
  _removeElement (_inLexique,
                  "Resource %K is not defined",
                  inKey,
                  outParameter0,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_rezlock_map::
modifier_put (C_Compiler & _inLexique,
                                const GGS_lstring & inKey,
                                const GGS_uint64 & inParameter0 COMMA_LOCATION_ARGS) {
  _insertElement (_inLexique,
                 "Resource %K is already defined in %L",
                 inKey,
                 inParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_rezlock_map & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_rezlock_map result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map GGS_rezlock_map::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_rezlock_map result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_rezlock_map::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  C_String s ;
  s << "<map @rezlock_map " ;
  if (_isBuilt ()) {
    s << count () << " object" << ((count () > 1) ? "s " : " ") ;
    cElement * p = firstObject () ;
    sint32 elementID = 0 ;
    while (p != NULL) {
      macroValidPointer (p) ;
      p->appendForMapDescription (_inLexique, elementID, s, inIndentation COMMA_THERE) ;
      p = p->nextObject () ;
      elementID ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_uint64  & GGS_rezlock_map::cEnumerator::_time (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.time ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "gen_rez_table"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_gen_rez_table (C_Compiler & _inLexique,
                                GGS_rezlock_map   var_cas_rezlocks,
                                GGS_resource_map   var_cas_rez,
                                GGS_uint64   var_cas_tpn,
                                GGS_string & var_cas_table COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_gen_rez_table at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_table = GGS_string (true, "") ;
  GGS_uint  var_cas_i ;
  var_cas_i = GGS_uint (true, 0U) ;
  {
    GGS_resource_map::cEnumerator enumerator_675 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_675 = NULL ;
    while (((operand_675 = enumerator_675.nextObject ()))) {
      macroValidPointer (operand_675) ;
      if ((var_cas_rezlocks.reader_hasKey (_inLexique, operand_675->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (24)) COMMA_SOURCE_FILE_AT_LINE (24))).isBuiltAndTrue ()) {
        GGS_uint64  var_cas_time ;
        const GGS_rezlock_map  _temp_806 = var_cas_rezlocks ;
        if (_temp_806._isBuilt ()) {
          _temp_806 (HERE)->method_get (_inLexique, operand_675->mKey, var_cas_time COMMA_SOURCE_FILE_AT_LINE (26)) ;
        }
        var_cas_table.appendCstring ("    ") ;
        var_cas_table._dotAssign_operation (var_cas_time._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (27)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (27))) ;
      }else{
        var_cas_table.appendCstring ("    0") ;
      }
      if (((var_cas_i)._operator_strictInf (var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (31))._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (31)))).isBuiltAndTrue ()) {
        var_cas_table.appendCstring (",\n") ;
      }else{
        var_cas_table.appendCstring ("\n") ;
      }
      var_cas_i._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (36)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_gen_rez_table\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'cPtr_timing_prot'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_timing_prot::
cPtr_timing_prot (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
location (argument_0) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_timing_prot * GGS_timing_prot::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_timing_prot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

void cPtr_timing_prot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@timing_prot:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_timing_prot::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_timing_prot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_timing_prot (& typeid (cPtr_timing_prot), NULL
, "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_timing_prot::galgasRTTI (void) const {
  return & gClassInfoFor__timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS class 'GGS_timing_prot'                       *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_timing_prot::
GGS_timing_prot (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot::
GGS_timing_prot (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_timing_prot GGS_timing_prot::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_timing_prot _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_timing_prot *> (inPointer) != NULL)
      : (typeid (cPtr_timing_prot) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_timing_prot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_timing_prot),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_timing_prot::
reader_location (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot *) mPointer)->location ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_timing_prot::actualTypeName (void) const {
  return "timing_prot" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_timing_prot::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__timing_prot ("timing_prot") ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_void_timing_prot'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_void_timing_prot::
cPtr_void_timing_prot (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_void_timing_prot * GGS_void_timing_prot::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_void_timing_prot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_void_timing_prot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_void_timing_prot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_void_timing_prot * _p = dynamic_cast <const cPtr_void_timing_prot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_void_timing_prot::
method_generate (C_Compiler & /* _inLexique */,
                                GGS_config  /* var_cas_cfg */,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string /* var_cas_name */,
                                GGS_resource_map  /* var_cas_rez */ COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_result = GGS_string (true, "") ;
  var_cas_st_name = GGS_string (true, "NULL") ;
}

//---------------------------------------------------------------------------*

void cPtr_void_timing_prot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@void_timing_prot:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_void_timing_prot::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_void_timing_prot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_void_timing_prot (& typeid (cPtr_void_timing_prot), & typeid (cPtr_timing_prot), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_void_timing_prot::galgasRTTI (void) const {
  return & gClassInfoFor__void_timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_void_timing_prot'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_void_timing_prot::
GGS_void_timing_prot (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_void_timing_prot::
GGS_void_timing_prot (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_void_timing_prot GGS_void_timing_prot::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_void_timing_prot _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_void_timing_prot *> (inPointer) != NULL)
      : (typeid (cPtr_void_timing_prot) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_void_timing_prot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_void_timing_prot),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_void_timing_prot GGS_void_timing_prot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_void_timing_prot result ;
  macroMyNew (result.mPointer, cPtr_void_timing_prot (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_void_timing_prot::actualTypeName (void) const {
  return "void_timing_prot" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__void_timing_prot ("void_timing_prot", gClassInfoFor__timing_prot) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_false_timing_prot'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_false_timing_prot::
cPtr_false_timing_prot (const GGS_location & argument_0
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_false_timing_prot * GGS_false_timing_prot::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_false_timing_prot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_false_timing_prot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_false_timing_prot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_false_timing_prot * _p = dynamic_cast <const cPtr_false_timing_prot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_false_timing_prot::
method_generate (C_Compiler & /* _inLexique */,
                                GGS_config  /* var_cas_cfg */,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string /* var_cas_name */,
                                GGS_resource_map  /* var_cas_rez */ COMMA_UNUSED_LOCATION_ARGS) const {
  var_cas_result = GGS_string (true, "") ;
  var_cas_st_name = GGS_string (true, "NULL") ;
}

//---------------------------------------------------------------------------*

void cPtr_false_timing_prot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@false_timing_prot:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_false_timing_prot::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_false_timing_prot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_false_timing_prot (& typeid (cPtr_false_timing_prot), & typeid (cPtr_timing_prot), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_false_timing_prot::galgasRTTI (void) const {
  return & gClassInfoFor__false_timing_prot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_false_timing_prot'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_false_timing_prot::
GGS_false_timing_prot (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_false_timing_prot::
GGS_false_timing_prot (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_false_timing_prot GGS_false_timing_prot::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_false_timing_prot _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_false_timing_prot *> (inPointer) != NULL)
      : (typeid (cPtr_false_timing_prot) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_false_timing_prot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_false_timing_prot),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_false_timing_prot GGS_false_timing_prot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) {
  GGS_false_timing_prot result ;
  macroMyNew (result.mPointer, cPtr_false_timing_prot (argument_0 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_false_timing_prot::actualTypeName (void) const {
  return "false_timing_prot" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__false_timing_prot ("false_timing_prot", gClassInfoFor__timing_prot) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'cPtr_timing_prot_task'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_timing_prot_task::
cPtr_timing_prot_task (const GGS_location & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_rezlock_map & argument_5
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE),
exe_budget (argument_1),
time_frame (argument_2),
os_it_lock (argument_3),
all_it_lock (argument_4),
rezlocks (argument_5) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_timing_prot_task * GGS_timing_prot_task::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_timing_prot_task *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_timing_prot_task::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_timing_prot_task * _p = dynamic_cast <const cPtr_timing_prot_task *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue ()
         && exe_budget._operator_isEqual (_p->exe_budget).boolValue ()
         && time_frame._operator_isEqual (_p->time_frame).boolValue ()
         && os_it_lock._operator_isEqual (_p->os_it_lock).boolValue ()
         && all_it_lock._operator_isEqual (_p->all_it_lock).boolValue ()
         && rezlocks._operator_isEqual (_p->rezlocks).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_task::
method_generate (C_Compiler & _inLexique,
                                GGS_config  var_cas_cfg,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string var_cas_name,
                                GGS_resource_map  var_cas_rez COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_uint64  var_cas_tpn ;
  var_cas_tpn = GGS_uint64 (true, 1LLU) ;
  if ((var_cas_cfg.reader_hasKey (_inLexique, GGS_string (true, "wd_ticks_per_ns") COMMA_SOURCE_FILE_AT_LINE (91))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_val ;
    const GGS_config  _temp_2500 = var_cas_cfg ;
    if (_temp_2500._isBuilt ()) {
      _temp_2500 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "wd_ticks_per_ns"), GGS_location (_inLexique) COMMA_HERE), var_cas_val COMMA_SOURCE_FILE_AT_LINE (93)) ;
    }
    { const GGS_basic_type _var_2653 = var_cas_val ; // CAST instruction
      if (_var_2653.getPtr () != NULL) {
        macroValidPointer (_var_2653.getPtr ()) ;
        if (typeid (cPtr_uint64_class) == typeid (* (_var_2653.getPtr ()))) {
          const GGS_uint64_class var_cas_ui (_var_2653.getPtr ()) ;
          var_cas_tpn = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
        }else{
        }
      }
    }
  }
  ::routine_retrieveTemplateString (_inLexique,  var_cas_result,  GGS_string (true, "timing_protection") COMMA_SOURCE_FILE_AT_LINE (99)) ;
  { const GGS_basic_type _var_2927 = exe_budget ; // CAST instruction
    if (_var_2927.getPtr () != NULL) {
      macroValidPointer (_var_2927.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_2927.getPtr ()))) {
        const GGS_uint64_class var_cas_eb (_var_2927.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EXE_BUDGET$"), var_cas_eb.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (103)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (103)) COMMA_SOURCE_FILE_AT_LINE (103)) ;
      }else{
      }
    }
  }
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNT_LIMIT$"), GGS_string (true, "0") COMMA_SOURCE_FILE_AT_LINE (105)) ;
  { const GGS_basic_type _var_3203 = time_frame ; // CAST instruction
    if (_var_3203.getPtr () != NULL) {
      macroValidPointer (_var_3203.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3203.getPtr ()))) {
        const GGS_uint64_class var_cas_tf (_var_3203.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIME_FRAME$"), var_cas_tf.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (108)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)) COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_3398 = os_it_lock ; // CAST instruction
    if (_var_3398.getPtr () != NULL) {
      macroValidPointer (_var_3398.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3398.getPtr ()))) {
        const GGS_uint64_class var_cas_oil (_var_3398.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OS_IT_LOCK$"), var_cas_oil.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (112))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (112)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)) COMMA_SOURCE_FILE_AT_LINE (112)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_3594 = all_it_lock ; // CAST instruction
    if (_var_3594.getPtr () != NULL) {
      macroValidPointer (_var_3594.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_3594.getPtr ()))) {
        const GGS_uint64_class var_cas_ail (_var_3594.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALL_IT_LOCK$"), var_cas_ail.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (116))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (116)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (116)) COMMA_SOURCE_FILE_AT_LINE (116)) ;
      }else{
      }
    }
  }
  var_cas_st_name = ((GGS_string (true, "task_"))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, "_timing_prot")) ;
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT$"), var_cas_st_name COMMA_SOURCE_FILE_AT_LINE (120)) ;
  GGS_string var_cas_table_name ;
  var_cas_table_name = ((GGS_string (true, "task_"))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, "_rez_lock_time")) ;
  GGS_string var_cas_table ;
  var_cas_table = GGS_string (true, "") ;
  ::routine_gen_rez_table (_inLexique,  rezlocks,  var_cas_rez,  var_cas_tpn,  var_cas_table COMMA_SOURCE_FILE_AT_LINE (124)) ;
  if (((var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (126)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_table = ((((((GGS_string (true, "tpl_time "))._operator_concat (var_cas_table_name))._operator_concat (GGS_string (true, "[")))._operator_concat (var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (127)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (127))))._operator_concat (GGS_string (true, "] = {\n")))._operator_concat (var_cas_table))._operator_concat (GGS_string (true, "};")) ;
  }
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$LOCK_TIME_TABLE$"), var_cas_table COMMA_SOURCE_FILE_AT_LINE (130)) ;
  if (((var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (132)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$REZ_LOCK_TIME$"), var_cas_table_name COMMA_SOURCE_FILE_AT_LINE (133)) ;
  }else{
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$REZ_LOCK_TIME$"), GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (135)) ;
  }
  var_cas_st_name = (GGS_string (true, "&"))._operator_concat (var_cas_st_name) ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_task::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@timing_prot_task:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << exe_budget.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << time_frame.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << os_it_lock.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << all_it_lock.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << rezlocks.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_task::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_task::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_timing_prot_task (& typeid (cPtr_timing_prot_task), & typeid (cPtr_timing_prot), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_timing_prot_task::galgasRTTI (void) const {
  return & gClassInfoFor__timing_prot_task ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_timing_prot_task'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_timing_prot_task::
GGS_timing_prot_task (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_task::
GGS_timing_prot_task (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_timing_prot_task GGS_timing_prot_task::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_timing_prot_task _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_timing_prot_task *> (inPointer) != NULL)
      : (typeid (cPtr_timing_prot_task) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_timing_prot_task (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_timing_prot_task),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_task GGS_timing_prot_task::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_rezlock_map & argument_5
                                COMMA_LOCATION_ARGS) {
  GGS_timing_prot_task result ;
  macroMyNew (result.mPointer, cPtr_timing_prot_task (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_exe_budget (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->exe_budget ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_time_frame (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->time_frame ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_os_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->os_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_task::
reader_all_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->all_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map  GGS_timing_prot_task::
reader_rezlocks (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_rezlock_map   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_task *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_task *) mPointer)->rezlocks ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_timing_prot_task::actualTypeName (void) const {
  return "timing_prot_task" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__timing_prot_task ("timing_prot_task", gClassInfoFor__timing_prot) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'cPtr_timing_prot_isr'                        *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_timing_prot_isr::
cPtr_timing_prot_isr (const GGS_location & argument_0,
                                const GGS_basic_type & argument_1,
                                const GGS_basic_type & argument_2,
                                const GGS_basic_type & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_rezlock_map & argument_6
                                COMMA_LOCATION_ARGS)
:cPtr_timing_prot (argument_0 COMMA_THERE),
exe_time (argument_1),
count_limit (argument_2),
time_frame (argument_3),
os_it_lock (argument_4),
all_it_lock (argument_5),
rezlocks (argument_6) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_timing_prot_isr * GGS_timing_prot_isr::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_timing_prot_isr *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_timing_prot_isr::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_timing_prot_isr * _p = dynamic_cast <const cPtr_timing_prot_isr *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = location._operator_isEqual (_p->location).boolValue ()
         && exe_time._operator_isEqual (_p->exe_time).boolValue ()
         && count_limit._operator_isEqual (_p->count_limit).boolValue ()
         && time_frame._operator_isEqual (_p->time_frame).boolValue ()
         && os_it_lock._operator_isEqual (_p->os_it_lock).boolValue ()
         && all_it_lock._operator_isEqual (_p->all_it_lock).boolValue ()
         && rezlocks._operator_isEqual (_p->rezlocks).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_isr::
method_generate (C_Compiler & _inLexique,
                                GGS_config  var_cas_cfg,
                                GGS_string& var_cas_result,
                                GGS_string& var_cas_st_name,
                                GGS_string var_cas_name,
                                GGS_resource_map  var_cas_rez COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_uint64  var_cas_tpn ;
  var_cas_tpn = GGS_uint64 (true, 1LLU) ;
  if ((var_cas_cfg.reader_hasKey (_inLexique, GGS_string (true, "wd_ticks_per_ns") COMMA_SOURCE_FILE_AT_LINE (158))).isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_val ;
    const GGS_config  _temp_4964 = var_cas_cfg ;
    if (_temp_4964._isBuilt ()) {
      _temp_4964 (HERE)->method_get (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "wd_ticks_per_ns"), GGS_location (_inLexique) COMMA_HERE), var_cas_val COMMA_SOURCE_FILE_AT_LINE (160)) ;
    }
    { const GGS_basic_type _var_5117 = var_cas_val ; // CAST instruction
      if (_var_5117.getPtr () != NULL) {
        macroValidPointer (_var_5117.getPtr ()) ;
        if (typeid (cPtr_uint64_class) == typeid (* (_var_5117.getPtr ()))) {
          const GGS_uint64_class var_cas_ui (_var_5117.getPtr ()) ;
          var_cas_tpn = var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ;
        }else{
        }
      }
    }
  }
  ::routine_retrieveTemplateString (_inLexique,  var_cas_result,  GGS_string (true, "timing_protection") COMMA_SOURCE_FILE_AT_LINE (166)) ;
  { const GGS_basic_type _var_5389 = exe_time ; // CAST instruction
    if (_var_5389.getPtr () != NULL) {
      macroValidPointer (_var_5389.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5389.getPtr ()))) {
        const GGS_uint64_class var_cas_et (_var_5389.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$EXE_BUDGET$"), var_cas_et.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (170))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)) COMMA_SOURCE_FILE_AT_LINE (170)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_5579 = count_limit ; // CAST instruction
    if (_var_5579.getPtr () != NULL) {
      macroValidPointer (_var_5579.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_5579.getPtr ()))) {
        const GGS_uint32_class var_cas_cl (_var_5579.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$COUNT_LIMIT$"), var_cas_cl.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (174)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (174)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_5772 = time_frame ; // CAST instruction
    if (_var_5772.getPtr () != NULL) {
      macroValidPointer (_var_5772.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5772.getPtr ()))) {
        const GGS_uint64_class var_cas_tf (_var_5772.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIME_FRAME$"), var_cas_tf.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (178))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (178)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (178)) COMMA_SOURCE_FILE_AT_LINE (178)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_5967 = os_it_lock ; // CAST instruction
    if (_var_5967.getPtr () != NULL) {
      macroValidPointer (_var_5967.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_5967.getPtr ()))) {
        const GGS_uint64_class var_cas_oil (_var_5967.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$OS_IT_LOCK$"), var_cas_oil.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (182))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)) ;
      }else{
      }
    }
  }
  { const GGS_basic_type _var_6163 = all_it_lock ; // CAST instruction
    if (_var_6163.getPtr () != NULL) {
      macroValidPointer (_var_6163.getPtr ()) ;
      if (typeid (cPtr_uint64_class) == typeid (* (_var_6163.getPtr ()))) {
        const GGS_uint64_class var_cas_ail (_var_6163.getPtr ()) ;
        var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$ALL_IT_LOCK$"), var_cas_ail.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (186))._divide_operation (_inLexique, var_cas_tpn COMMA_SOURCE_FILE_AT_LINE (186)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186)) ;
      }else{
      }
    }
  }
  var_cas_st_name = ((GGS_string (true, "isr_"))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, "_timing_prot")) ;
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$TIMING_PROT$"), var_cas_st_name COMMA_SOURCE_FILE_AT_LINE (190)) ;
  GGS_string var_cas_table_name ;
  var_cas_table_name = ((GGS_string (true, "isr_"))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, "_rez_lock_time")) ;
  GGS_string var_cas_table ;
  var_cas_table = GGS_string (true, "") ;
  ::routine_gen_rez_table (_inLexique,  rezlocks,  var_cas_rez,  var_cas_tpn,  var_cas_table COMMA_SOURCE_FILE_AT_LINE (194)) ;
  if (((var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_table = ((((((GGS_string (true, "tpl_time "))._operator_concat (var_cas_table_name))._operator_concat (GGS_string (true, "[")))._operator_concat (var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (197))))._operator_concat (GGS_string (true, "] = {\n")))._operator_concat (var_cas_table))._operator_concat (GGS_string (true, "};")) ;
  }
  var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$LOCK_TIME_TABLE$"), var_cas_table COMMA_SOURCE_FILE_AT_LINE (200)) ;
  if (((var_cas_rez.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$REZ_LOCK_TIME$"), var_cas_table_name COMMA_SOURCE_FILE_AT_LINE (203)) ;
  }else{
    var_cas_result = var_cas_result.reader_stringByReplacingStringByString (_inLexique, GGS_string (true, "$REZ_LOCK_TIME$"), GGS_string (true, "NULL") COMMA_SOURCE_FILE_AT_LINE (205)) ;
  }
  var_cas_st_name = (GGS_string (true, "&"))._operator_concat (var_cas_st_name) ;
}

//---------------------------------------------------------------------------*

void cPtr_timing_prot_isr::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@timing_prot_isr:"
           << location.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << exe_time.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << count_limit.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << time_frame.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << os_it_lock.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << all_it_lock.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << rezlocks.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_isr::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_timing_prot_isr::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_timing_prot_isr (& typeid (cPtr_timing_prot_isr), & typeid (cPtr_timing_prot), "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_timing_prot_isr::galgasRTTI (void) const {
  return & gClassInfoFor__timing_prot_isr ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_timing_prot_isr'                     *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_timing_prot_isr::
GGS_timing_prot_isr (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_isr::
GGS_timing_prot_isr (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_timing_prot_isr GGS_timing_prot_isr::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_timing_prot_isr _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_timing_prot_isr *> (inPointer) != NULL)
      : (typeid (cPtr_timing_prot_isr) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_timing_prot_isr (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_timing_prot_isr),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_timing_prot_isr GGS_timing_prot_isr::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_location & argument_0,
                 const GGS_basic_type & argument_1,
                 const GGS_basic_type & argument_2,
                 const GGS_basic_type & argument_3,
                 const GGS_basic_type & argument_4,
                 const GGS_basic_type & argument_5,
                 const GGS_rezlock_map & argument_6
                                COMMA_LOCATION_ARGS) {
  GGS_timing_prot_isr result ;
  macroMyNew (result.mPointer, cPtr_timing_prot_isr (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_exe_time (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->exe_time ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_count_limit (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->count_limit ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_time_frame (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->time_frame ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_os_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->os_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_basic_type  GGS_timing_prot_isr::
reader_all_it_lock (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_basic_type   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->all_it_lock ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_rezlock_map  GGS_timing_prot_isr::
reader_rezlocks (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_rezlock_map   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_timing_prot_isr *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_timing_prot_isr *) mPointer)->rezlocks ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_timing_prot_isr::actualTypeName (void) const {
  return "timing_prot_isr" ;
}

//---------------------------------------------------------------------------*

C_galgasClassRunTimeInformation gClassInfoFor__timing_prot_isr ("timing_prot_isr", gClassInfoFor__timing_prot) ;

//---------------------------------------------------------------------------*

