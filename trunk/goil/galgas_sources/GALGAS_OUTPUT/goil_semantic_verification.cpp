//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'goil_semantic_verification.cpp'                    *
//                        Generated by version 1.8.2                         *
//                       may 12th, 2009, at 17h9'26"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_semantic_verification.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_semantic_verification.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "tasks_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_tasks_well_formed (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_tasks_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_basic_type  var_cas_defined_priority ;
  var_cas_defined_priority = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_basic_type  var_cas_defined_activation ;
  var_cas_defined_activation = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_lstringlist  var_cas_defined_events ;
  var_cas_defined_events = GGS_lstringlist ::constructor_emptyList () ;
  GGS_lstring  var_cas_defined_schedule ;
  var_cas_defined_schedule = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_task_autostart_obj  var_cas_defined_autostart ;
  var_cas_defined_autostart = GGS_task_autostart_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_769 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_769 = NULL ;
    while (((operand_769 = enumerator_769.nextObject ()))) {
      macroValidPointer (operand_769) ;
      var_cas_defined_priority = operand_769->mInfo.task.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (19)) ;
      { const GGS_basic_type _var_1041 = var_cas_defined_priority ; // CAST instruction
        if (_var_1041.getPtr () != NULL) {
          macroValidPointer (_var_1041.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1041.getPtr ()))) {
            operand_769->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (22)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "PRIORITY attribute not defined for TASK "))._operator_concat (operand_769->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (22))) COMMA_SOURCE_FILE_AT_LINE (23)) ;
          }else{
          }
        }
      }
      var_cas_defined_activation = operand_769->mInfo.task.reader_activation (_inLexique COMMA_SOURCE_FILE_AT_LINE (25)) ;
      { const GGS_basic_type _var_1791 = var_cas_defined_activation ; // CAST instruction
        if (_var_1791.getPtr () != NULL) {
          macroValidPointer (_var_1791.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1791.getPtr ()))) {
            operand_769->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (28)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "ACTIVATION attribute not defined for TASK "))._operator_concat (operand_769->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (28))) COMMA_SOURCE_FILE_AT_LINE (29)) ;
          }else if (typeid (cPtr_uint32_class) == typeid (* (_var_1791.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_1791.getPtr ()) ;
            var_cas_defined_events = operand_769->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (30)) ;
            if ((((var_cas_defined_events.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (31)))._operator_strictSup (GGS_uint (true, 0U)))._operator_and ((var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (31)))._operator_strictSup (GGS_uint (true, 1U)))).isBuiltAndTrue ()) {
              operand_769->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (32)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "ACTIVATION attribute for extended task "))._operator_concat (operand_769->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (32))))._operator_concat (GGS_string (true, " should be set to 1")) COMMA_SOURCE_FILE_AT_LINE (33)) ;
              var_cas_ui.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "ACTIVATION attribute set to "))._operator_concat (var_cas_ui.reader_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (33)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (33))))._operator_concat (GGS_string (true, " here")) COMMA_SOURCE_FILE_AT_LINE (34)) ;
            }
          }else{
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "Internal error, wrong datatype for ACTIVATION in task "))._operator_concat (operand_769->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (36))) COMMA_SOURCE_FILE_AT_LINE (37)) ;
          }
        }
      }
      var_cas_defined_schedule = operand_769->mInfo.task.reader_schedule (_inLexique COMMA_SOURCE_FILE_AT_LINE (38)) ;
      if (((var_cas_defined_schedule.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        operand_769->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (40)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "SCHEDULE attribute not defined for TASK "))._operator_concat (operand_769->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (40))) COMMA_SOURCE_FILE_AT_LINE (41)) ;
      }
      var_cas_defined_autostart = operand_769->mInfo.task.reader_autostart (_inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
      { const GGS_task_autostart_obj _var_2257 = var_cas_defined_autostart ; // CAST instruction
        if (_var_2257.getPtr () != NULL) {
          macroValidPointer (_var_2257.getPtr ()) ;
          if (typeid (cPtr_task_autostart_void) == typeid (* (_var_2257.getPtr ()))) {
            operand_769->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (45)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "AUTOSTART attribute not defined for TASK "))._operator_concat (operand_769->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (45))) COMMA_SOURCE_FILE_AT_LINE (46)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_tasks_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "counters_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_counters_well_formed (C_Compiler & _inLexique,
                                GGS_counter_map   var_cas_counters COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_counters_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_basic_type  var_cas_defined_value ;
  var_cas_defined_value = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_counter_map::cEnumerator enumerator_2424 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_2424 = NULL ;
    while (((operand_2424 = enumerator_2424.nextObject ()))) {
      macroValidPointer (operand_2424) ;
      var_cas_defined_value = operand_2424->mInfo.counter.reader_max_allowed_value (_inLexique COMMA_SOURCE_FILE_AT_LINE (53)) ;
      { const GGS_basic_type _var_2742 = var_cas_defined_value ; // CAST instruction
        if (_var_2742.getPtr () != NULL) {
          macroValidPointer (_var_2742.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_2742.getPtr ()))) {
            operand_2424->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (56)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "MAXALLOWEDVALUE attribute not defined for COUNTER "))._operator_concat (operand_2424->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (56))) COMMA_SOURCE_FILE_AT_LINE (57)) ;
          }else{
          }
        }
      }
      var_cas_defined_value = operand_2424->mInfo.counter.reader_ticks_per_base (_inLexique COMMA_SOURCE_FILE_AT_LINE (59)) ;
      { const GGS_basic_type _var_3013 = var_cas_defined_value ; // CAST instruction
        if (_var_3013.getPtr () != NULL) {
          macroValidPointer (_var_3013.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_3013.getPtr ()))) {
            operand_2424->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (62)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "TICKSPERBASE attribute not defined for COUNTER "))._operator_concat (operand_2424->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (62))) COMMA_SOURCE_FILE_AT_LINE (63)) ;
          }else{
          }
        }
      }
      var_cas_defined_value = operand_2424->mInfo.counter.reader_min_cycle (_inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
      { const GGS_basic_type _var_3275 = var_cas_defined_value ; // CAST instruction
        if (_var_3275.getPtr () != NULL) {
          macroValidPointer (_var_3275.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_3275.getPtr ()))) {
            operand_2424->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (68)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "MINCYCLE attribute not defined for COUNTER "))._operator_concat (operand_2424->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (68))) COMMA_SOURCE_FILE_AT_LINE (69)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_counters_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "alarms_well_formed"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_alarms_well_formed (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_alarms_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_action_obj  var_cas_defined_action ;
  var_cas_defined_action = GGS_void_action ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_autostart_obj  var_cas_defined_autostart ;
  var_cas_defined_autostart = GGS_autostart_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_alarm_map::cEnumerator enumerator_3513 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_3513 = NULL ;
    while (((operand_3513 = enumerator_3513.nextObject ()))) {
      macroValidPointer (operand_3513) ;
      if (((operand_3513->mInfo.alarm.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
        operand_3513->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "COUNTER attribute undefined for ALARM "))._operator_concat (operand_3513->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (79))) COMMA_SOURCE_FILE_AT_LINE (80)) ;
      }
      var_cas_defined_action = operand_3513->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
      { const GGS_action_obj _var_3966 = var_cas_defined_action ; // CAST instruction
        if (_var_3966.getPtr () != NULL) {
          macroValidPointer (_var_3966.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_3966.getPtr ()))) {
            operand_3513->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "ACTION attribute undefined for ALARM "))._operator_concat (operand_3513->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))) COMMA_SOURCE_FILE_AT_LINE (85)) ;
          }else{
          }
        }
      }
      var_cas_defined_autostart = operand_3513->mInfo.alarm.reader_autostart_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ;
      { const GGS_autostart_obj _var_4223 = var_cas_defined_autostart ; // CAST instruction
        if (_var_4223.getPtr () != NULL) {
          macroValidPointer (_var_4223.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_4223.getPtr ()))) {
            operand_3513->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "AUTOSTART attribute undefined for ALARM "))._operator_concat (operand_3513->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (89))) COMMA_SOURCE_FILE_AT_LINE (90)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_alarms_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "resources_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_resources_well_formed (C_Compiler & _inLexique,
                                GGS_resource_map   var_cas_resources COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_resources_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_resource_property_obj  var_cas_defined_value ;
  var_cas_defined_value = GGS_resource_property_void_obj ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_4428 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_4428 = NULL ;
    while (((operand_4428 = enumerator_4428.nextObject ()))) {
      macroValidPointer (operand_4428) ;
      var_cas_defined_value = operand_4428->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (97)) ;
      { const GGS_resource_property_obj _var_4746 = var_cas_defined_value ; // CAST instruction
        if (_var_4746.getPtr () != NULL) {
          macroValidPointer (_var_4746.getPtr ()) ;
          if (typeid (cPtr_resource_property_void_obj) == typeid (* (_var_4746.getPtr ()))) {
            operand_4428->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (100)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "RESOURCEPROPERTY attribute undefined for RESOURCE "))._operator_concat (operand_4428->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (100))) COMMA_SOURCE_FILE_AT_LINE (101)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_resources_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "events_well_formed"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_events_well_formed (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_events_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_event_mask_obj  var_cas_defined_value ;
  var_cas_defined_value = GGS_event_mask_void_obj ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_event_map::cEnumerator enumerator_4924 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_4924 = NULL ;
    while (((operand_4924 = enumerator_4924.nextObject ()))) {
      macroValidPointer (operand_4924) ;
      var_cas_defined_value = operand_4924->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
      { const GGS_event_mask_obj _var_5267 = var_cas_defined_value ; // CAST instruction
        if (_var_5267.getPtr () != NULL) {
          macroValidPointer (_var_5267.getPtr ()) ;
          if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_5267.getPtr ()))) {
            const GGS_event_mask_void_obj var_cas_mask (_var_5267.getPtr ()) ;
            operand_4924->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (111)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "MASK attribute undefined for EVENT "))._operator_concat (operand_4924->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (111))) COMMA_SOURCE_FILE_AT_LINE (112)) ;
            var_cas_mask.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was previously defined here") COMMA_SOURCE_FILE_AT_LINE (113)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_events_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "isrs_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_isrs_well_formed (C_Compiler & _inLexique,
                                GGS_isr_map   var_cas_isrs COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_isrs_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_basic_type  var_cas_defined_value ;
  var_cas_defined_value = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_isr_map::cEnumerator enumerator_5419 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_5419 = NULL ;
    while (((operand_5419 = enumerator_5419.nextObject ()))) {
      macroValidPointer (operand_5419) ;
      var_cas_defined_value = operand_5419->mInfo.isr.reader_category (_inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
      { const GGS_basic_type _var_5669 = var_cas_defined_value ; // CAST instruction
        if (_var_5669.getPtr () != NULL) {
          macroValidPointer (_var_5669.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_5669.getPtr ()))) {
            operand_5419->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (123)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "Category attribute undefined for ISR "))._operator_concat (operand_5419->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (123))) COMMA_SOURCE_FILE_AT_LINE (124)) ;
          }else{
          }
        }
      }
      var_cas_defined_value = operand_5419->mInfo.isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (125)) ;
      { const GGS_basic_type _var_5889 = var_cas_defined_value ; // CAST instruction
        if (_var_5889.getPtr () != NULL) {
          macroValidPointer (_var_5889.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_5889.getPtr ()))) {
            operand_5419->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (128)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "Priority attribute undefined for ISR "))._operator_concat (operand_5419->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))) COMMA_SOURCE_FILE_AT_LINE (129)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_isrs_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "messages_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_messages_well_formed (C_Compiler & _inLexique,
                                GGS_message_map   var_cas_messages COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_messages_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_mess_prop_obj  var_cas_defined_mess_prop ;
  var_cas_defined_mess_prop = GGS_void_mess_prop ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_action_obj  var_cas_defined_notif ;
  var_cas_defined_notif = GGS_void_action ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  GGS_action_obj  var_cas_defined_notif_error ;
  var_cas_defined_notif_error = GGS_void_action ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
  {
    GGS_message_map::cEnumerator enumerator_6201 (var_cas_messages, true) ;
    const GGS_message_map::cElement * operand_6201 = NULL ;
    while (((operand_6201 = enumerator_6201.nextObject ()))) {
      macroValidPointer (operand_6201) ;
      var_cas_defined_mess_prop = operand_6201->mInfo.mess.reader_messageproperty (_inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
      { const GGS_mess_prop_obj _var_6503 = var_cas_defined_mess_prop ; // CAST instruction
        if (_var_6503.getPtr () != NULL) {
          macroValidPointer (_var_6503.getPtr ()) ;
          if (typeid (cPtr_void_mess_prop) == typeid (* (_var_6503.getPtr ()))) {
            operand_6201->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (143)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (GGS_string (true, "MESSAGEPROPERTY attribute missing for message "))._operator_concat (operand_6201->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (143))) COMMA_SOURCE_FILE_AT_LINE (144)) ;
          }else{
          }
        }
      }
      var_cas_defined_notif = operand_6201->mInfo.mess.reader_notification (_inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
      { const GGS_action_obj _var_7132 = var_cas_defined_notif ; // CAST instruction
        if (_var_7132.getPtr () != NULL) {
          macroValidPointer (_var_7132.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_7132.getPtr ()))) {
          }else{
            { const GGS_mess_prop_obj _var_7113 = var_cas_defined_mess_prop ; // CAST instruction
              if (_var_7113.getPtr () != NULL) {
                macroValidPointer (_var_7113.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_7113.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATION is not allowed for SEND_STATIC_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (153)) ;
                }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_7113.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATION is not allowed for SEND_ZERO_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (155)) ;
                }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_7113.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATION is not allowed for RECEIVE_ZERO_SENDERS message") COMMA_SOURCE_FILE_AT_LINE (157)) ;
                }else{
                }
              }
            }
          }
        }
      }
      var_cas_defined_notif_error = operand_6201->mInfo.mess.reader_notificationerror (_inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
      { const GGS_action_obj _var_8220 = var_cas_defined_notif_error ; // CAST instruction
        if (_var_8220.getPtr () != NULL) {
          macroValidPointer (_var_8220.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_8220.getPtr ()))) {
          }else{
            { const GGS_mess_prop_obj _var_8201 = var_cas_defined_mess_prop ; // CAST instruction
              if (_var_8201.getPtr () != NULL) {
                macroValidPointer (_var_8201.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_8201.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATIONERROR is not allowed for SEND_STATIC_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (167)) ;
                }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_8201.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATIONERROR is not allowed for SEND_ZERO_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (169)) ;
                }else if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_8201.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATIONERROR is not allowed for RECEIVE_ZERO_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (171)) ;
                }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_8201.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATIONERROR is not allowed for RECEIVE_UNQUEUED_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (173)) ;
                }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_8201.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATIONERROR is not allowed for RECEIVE_QUEUED_INTERNAL message") COMMA_SOURCE_FILE_AT_LINE (175)) ;
                }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_8201.getPtr ()))) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "NOTIFICATIONERROR is not allowed for RECEIVE_ZERO_SENDERS message") COMMA_SOURCE_FILE_AT_LINE (177)) ;
                }else{
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_messages_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "resolve_linked_resources"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_resolve_linked_resources (C_Compiler & _inLexique,
                                GGS_resource_map  & var_cas_resources COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_resolve_linked_resources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_resource_map  var_cas_resolved ;
  var_cas_resolved = GGS_resource_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_resource_map  var_cas_unresolved ;
  var_cas_unresolved = var_cas_resources ;
  GGS_resource_map  var_cas_unresolved_next ;
  var_cas_unresolved_next = GGS_resource_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_bool var_cas_first_loop ;
  var_cas_first_loop = GGS_bool (true, true) ;
  GGS_uint _variant_11597 = var_cas_unresolved.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (192))._substract_operation (_inLexique, var_cas_unresolved_next.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (192)) COMMA_SOURCE_FILE_AT_LINE (192))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (192)) ;
  GGS_bool _condition_11597 (_variant_11597._isBuilt (), true) ;
  while (_condition_11597.isBuiltAndTrue ()) {
    if ((var_cas_first_loop).isBuiltAndTrue ()) {
      var_cas_first_loop = GGS_bool (true, false) ;
    }else{
      var_cas_unresolved = var_cas_unresolved_next ;
      var_cas_unresolved_next = GGS_resource_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
    }
    _condition_11597 = (var_cas_unresolved.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (198)))._operator_strictSup (GGS_uint (true, 0U)) ;
    if (_condition_11597.isBuiltAndTrue ()) {
      if (_variant_11597.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (250)) ;
        _condition_11597 = GGS_bool (true, false) ;
      }else{
        _variant_11597._decrement_operation (_inLexique COMMA_HERE) ;
        {
          GGS_resource_map::cEnumerator enumerator_8942 (var_cas_unresolved, true) ;
          const GGS_resource_map::cElement * operand_8942 = NULL ;
          while (((operand_8942 = enumerator_8942.nextObject ()))) {
            macroValidPointer (operand_8942) ;
            GGS_resource_property_obj  var_cas_res_prop ;
            var_cas_res_prop = operand_8942->mInfo.resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
            { const GGS_resource_property_obj _var_11255 = var_cas_res_prop ; // CAST instruction
              if (_var_11255.getPtr () != NULL) {
                macroValidPointer (_var_11255.getPtr ()) ;
                if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_11255.getPtr ()))) {
                  const GGS_resource_property_linked_obj var_cas_rplo (_var_11255.getPtr ()) ;
                  if ((var_cas_resolved.reader_hasKey (_inLexique, var_cas_rplo.reader_linked_resource (_inLexique COMMA_SOURCE_FILE_AT_LINE (210)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (210)) COMMA_SOURCE_FILE_AT_LINE (210))).isBuiltAndTrue ()) {
                    GGS_resource_obj  var_cas_target_resource ;
                    GGS_resource_property_obj  var_cas_target_property ;
                    const GGS_resource_map  _temp_9547 = var_cas_resolved ;
                    if (_temp_9547._isBuilt ()) {
                      _temp_9547 (HERE)->method_get (_inLexique, var_cas_rplo.reader_linked_resource (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)), var_cas_target_resource COMMA_SOURCE_FILE_AT_LINE (213)) ;
                    }
                    var_cas_target_property = var_cas_target_resource.reader_property (_inLexique COMMA_SOURCE_FILE_AT_LINE (214)) ;
                    { const GGS_resource_property_obj _var_10916 = var_cas_target_property ; // CAST instruction
                      if (_var_10916.getPtr () != NULL) {
                        macroValidPointer (_var_10916.getPtr ()) ;
                        if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_10916.getPtr ()))) {
                          var_cas_resolved.modifier_put (_inLexique, operand_8942->mKey, operand_8942->mInfo.resource COMMA_SOURCE_FILE_AT_LINE (218)) ;
                        }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_10916.getPtr ()))) {
                          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "RESOURCE "))._operator_concat (operand_8942->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (222))))._operator_concat (GGS_string (true, " is linked to INTERNAL RESOURCE ")))._operator_concat (var_cas_rplo.reader_linked_resource (_inLexique COMMA_SOURCE_FILE_AT_LINE (222)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (222))) COMMA_SOURCE_FILE_AT_LINE (225)) ;
                        }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_10916.getPtr ()))) {
                          const GGS_resource_property_linked_obj var_cas_nrplo (_var_10916.getPtr ()) ;
                          GGS_resource_property_linked_obj  var_cas_resolved_prop ;
                          var_cas_resolved_prop = GGS_resource_property_linked_obj ::constructor_new (_inLexique, var_cas_nrplo.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (227)), var_cas_nrplo.reader_linked_resource (_inLexique COMMA_SOURCE_FILE_AT_LINE (227)) COMMA_HERE) ;
                          GGS_lstring  var_cas_resolved_desc ;
                          var_cas_resolved_desc = operand_8942->mInfo.resource.reader_desc (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ;
                          GGS_resource_obj  var_cas_resolved_res ;
                          var_cas_resolved_res = GGS_resource_obj ::constructor_new (_inLexique, var_cas_resolved_desc, var_cas_resolved_prop, operand_8942->mInfo.resource.reader_acc_apps (_inLexique COMMA_SOURCE_FILE_AT_LINE (229)) COMMA_HERE) ;
                          var_cas_resolved.modifier_put (_inLexique, operand_8942->mKey, var_cas_resolved_res COMMA_SOURCE_FILE_AT_LINE (230)) ;
                        }else{
                        }
                      }
                    }
                  }else{
                    var_cas_unresolved_next.modifier_put (_inLexique, operand_8942->mKey, operand_8942->mInfo.resource COMMA_SOURCE_FILE_AT_LINE (236)) ;
                  }
                }else{
                  var_cas_resolved.modifier_put (_inLexique, operand_8942->mKey, operand_8942->mInfo.resource COMMA_SOURCE_FILE_AT_LINE (240)) ;
                }
              }
            }
          }
        }
        if (((var_cas_unresolved.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)))._operator_isEqual (var_cas_unresolved_next.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (243)))).isBuiltAndTrue ()) {
          GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Cycle detected in linked resource") COMMA_SOURCE_FILE_AT_LINE (246)) ;
          {
            GGS_resource_map::cEnumerator enumerator_11455 (var_cas_unresolved_next, true) ;
            const GGS_resource_map::cElement * operand_11455 = NULL ;
            while (((operand_11455 = enumerator_11455.nextObject ()))) {
              macroValidPointer (operand_11455) ;
              operand_11455->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "Involved in cycle") COMMA_SOURCE_FILE_AT_LINE (248)) ;
            }
          }
        }
      }
    }
  }
  var_cas_resources = var_cas_resolved ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_resolve_linked_resources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "all_events_and_resources_and_messages_defined_and_used"*
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_events_and_resources_and_messages_defined_and_used (C_Compiler & _inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_event_map   var_cas_events,
                                GGS_resource_map   var_cas_resources,
                                GGS_message_map   var_cas_messages COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_events_and_resources_and_messages_defined_and_used at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_used_events ;
  var_cas_used_events = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_used_resources ;
  var_cas_used_resources = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_used_messages ;
  var_cas_used_messages = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_task_map::cEnumerator enumerator_12049 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_12049 = NULL ;
    while (((operand_12049 = enumerator_12049.nextObject ()))) {
      macroValidPointer (operand_12049) ;
      GGS_lstringlist  var_cas_task_events ;
      var_cas_task_events = operand_12049->mInfo.task.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (271)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_12238 (var_cas_task_events, true) ;
        const GGS_lstringlist::cElement * operand_12238 = NULL ;
        while (((operand_12238 = enumerator_12238.nextObject ()))) {
          macroValidPointer (operand_12238) ;
          var_cas_used_events._addAssign_operation (operand_12238->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (273))) ;
          if (((var_cas_events.reader_hasKey (_inLexique, operand_12238->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (274)) COMMA_SOURCE_FILE_AT_LINE (274)))._operator_not ()).isBuiltAndTrue ()) {
            operand_12238->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "EVENT "))._operator_concat (operand_12238->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (275))))._operator_concat (GGS_string (true, " is not defined")) COMMA_SOURCE_FILE_AT_LINE (276)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_task_resources ;
      var_cas_task_resources = operand_12049->mInfo.task.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (281)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_12663 (var_cas_task_resources, true) ;
        const GGS_lstringlist::cElement * operand_12663 = NULL ;
        while (((operand_12663 = enumerator_12663.nextObject ()))) {
          macroValidPointer (operand_12663) ;
          var_cas_used_resources._addAssign_operation (operand_12663->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (283))) ;
          if (((var_cas_resources.reader_hasKey (_inLexique, operand_12663->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (284)) COMMA_SOURCE_FILE_AT_LINE (284)))._operator_not ()).isBuiltAndTrue ()) {
            operand_12663->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "RESOURCE "))._operator_concat (operand_12663->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (285))))._operator_concat (GGS_string (true, " is not defined")) COMMA_SOURCE_FILE_AT_LINE (286)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_task_messages ;
      var_cas_task_messages = operand_12049->mInfo.task.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (291)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_13082 (var_cas_task_messages, true) ;
        const GGS_lstringlist::cElement * operand_13082 = NULL ;
        while (((operand_13082 = enumerator_13082.nextObject ()))) {
          macroValidPointer (operand_13082) ;
          var_cas_used_messages._addAssign_operation (operand_13082->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (293))) ;
          if (((var_cas_messages.reader_hasKey (_inLexique, operand_13082->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (294)) COMMA_SOURCE_FILE_AT_LINE (294)))._operator_not ()).isBuiltAndTrue ()) {
            operand_13082->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MESSAGE "))._operator_concat (operand_13082->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (295))))._operator_concat (GGS_string (true, " is not defined")) COMMA_SOURCE_FILE_AT_LINE (296)) ;
          }
        }
      }
    }
  }
  {
    GGS_isr_map::cEnumerator enumerator_13445 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_13445 = NULL ;
    while (((operand_13445 = enumerator_13445.nextObject ()))) {
      macroValidPointer (operand_13445) ;
      GGS_lstringlist  var_cas_isr_resources ;
      var_cas_isr_resources = operand_13445->mInfo.isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (304)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_13618 (var_cas_isr_resources, true) ;
        const GGS_lstringlist::cElement * operand_13618 = NULL ;
        while (((operand_13618 = enumerator_13618.nextObject ()))) {
          macroValidPointer (operand_13618) ;
          var_cas_used_resources._addAssign_operation (operand_13618->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (306))) ;
          if (((var_cas_resources.reader_hasKey (_inLexique, operand_13618->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (307)) COMMA_SOURCE_FILE_AT_LINE (307)))._operator_not ()).isBuiltAndTrue ()) {
            operand_13445->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "RESOURCE "))._operator_concat (operand_13618->mValue))._operator_concat (GGS_string (true, " is not defined")) COMMA_SOURCE_FILE_AT_LINE (309)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_isr_messages ;
      var_cas_isr_messages = operand_13445->mInfo.isr.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (314)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_14029 (var_cas_isr_messages, true) ;
        const GGS_lstringlist::cElement * operand_14029 = NULL ;
        while (((operand_14029 = enumerator_14029.nextObject ()))) {
          macroValidPointer (operand_14029) ;
          var_cas_used_messages._addAssign_operation (operand_14029->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (316))) ;
          if (((var_cas_messages.reader_hasKey (_inLexique, operand_14029->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (317)) COMMA_SOURCE_FILE_AT_LINE (317)))._operator_not ()).isBuiltAndTrue ()) {
            operand_13445->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "MESSAGE "))._operator_concat (operand_14029->mValue))._operator_concat (GGS_string (true, " is not defined")) COMMA_SOURCE_FILE_AT_LINE (319)) ;
          }
        }
      }
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_14381 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_14381 = NULL ;
    while (((operand_14381 = enumerator_14381.nextObject ()))) {
      macroValidPointer (operand_14381) ;
      if (((var_cas_used_events.reader_hasKey (_inLexique, operand_14381->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (326)) COMMA_SOURCE_FILE_AT_LINE (326)))._operator_not ()).isBuiltAndTrue ()) {
        operand_14381->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "EVENT "))._operator_concat (operand_14381->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (327))))._operator_concat (GGS_string (true, " is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (327)) ;
      }
    }
  }
  {
    GGS_resource_map::cEnumerator enumerator_14687 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_14687 = NULL ;
    while (((operand_14687 = enumerator_14687.nextObject ()))) {
      macroValidPointer (operand_14687) ;
      if (((var_cas_used_resources.reader_hasKey (_inLexique, operand_14687->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (333)) COMMA_SOURCE_FILE_AT_LINE (333)))._operator_not ()).isBuiltAndTrue ()) {
        operand_14687->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "RESOURCE "))._operator_concat (operand_14687->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (334))))._operator_concat (GGS_string (true, " is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
      }
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_14989 (var_cas_messages, true) ;
    const GGS_message_map::cElement * operand_14989 = NULL ;
    while (((operand_14989 = enumerator_14989.nextObject ()))) {
      macroValidPointer (operand_14989) ;
      if (((var_cas_used_messages.reader_hasKey (_inLexique, operand_14989->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (340)) COMMA_SOURCE_FILE_AT_LINE (340)))._operator_not ()).isBuiltAndTrue ()) {
        operand_14989->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "MESSAGE "))._operator_concat (operand_14989->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (341))))._operator_concat (GGS_string (true, " is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (341)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_events_and_resources_and_messages_defined_and_used\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "all_event_masks_different"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_event_masks_different (C_Compiler & _inLexique,
                                GGS_event_map   var_cas_events COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_event_masks_different at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_defined_masks ;
  var_cas_defined_masks = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_event_map::cEnumerator enumerator_15345 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_15345 = NULL ;
    while (((operand_15345 = enumerator_15345.nextObject ()))) {
      macroValidPointer (operand_15345) ;
      GGS_event_mask_obj  var_cas_mask ;
      var_cas_mask = operand_15345->mInfo.event.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (353)) ;
      { const GGS_event_mask_obj _var_15842 = var_cas_mask ; // CAST instruction
        if (_var_15842.getPtr () != NULL) {
          macroValidPointer (_var_15842.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_15842.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_m (_var_15842.getPtr ()) ;
            GGS_string var_cas_mask_in_string ;
            var_cas_mask_in_string = var_cas_m.reader_mask (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)).reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (356)) ;
            if ((var_cas_defined_masks.reader_hasKey (_inLexique, var_cas_mask_in_string COMMA_SOURCE_FILE_AT_LINE (357))).isBuiltAndTrue ()) {
              operand_15345->mKey.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((GGS_string (true, "Mask "))._operator_concat (var_cas_mask_in_string))._operator_concat (GGS_string (true, " already used")) COMMA_SOURCE_FILE_AT_LINE (358)) ;
            }else{
              var_cas_defined_masks._addAssign_operation (var_cas_mask_in_string) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_event_masks_different\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "all_alarm_actions_correct"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_alarm_actions_correct (C_Compiler & _inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_task_map   var_cas_tasks,
                                GGS_counter_map   var_cas_counters COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_alarm_actions_correct at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_defined_task_names ;
  var_cas_defined_task_names = var_cas_tasks.reader_allKeys (_inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_16098 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_16098 = NULL ;
    while (((operand_16098 = enumerator_16098.nextObject ()))) {
      macroValidPointer (operand_16098) ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_16098->mInfo.alarm.reader_action_params (_inLexique COMMA_SOURCE_FILE_AT_LINE (376)) ;
      { const GGS_action_obj _var_18013 = var_cas_alarm_action ; // CAST instruction
        if (_var_18013.getPtr () != NULL) {
          macroValidPointer (_var_18013.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_18013.getPtr ()))) {
            const GGS_setevent_action var_cas_act (_var_18013.getPtr ()) ;
            if (((var_cas_defined_task_names.reader_hasKey (_inLexique, var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (379)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (379)) COMMA_SOURCE_FILE_AT_LINE (379)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "TASK "))._operator_concat (var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (380)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (380))))._operator_concat (GGS_string (true, " is never defined")) COMMA_SOURCE_FILE_AT_LINE (381)) ;
            }else{
              GGS_task_obj  var_cas_task_data ;
              GGS_lstringlist  var_cas_known_events ;
              const GGS_task_map  _temp_16629 = var_cas_tasks ;
              if (_temp_16629._isBuilt ()) {
                _temp_16629 (HERE)->method_get (_inLexique, var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (384)), var_cas_task_data COMMA_SOURCE_FILE_AT_LINE (384)) ;
              }
              var_cas_known_events = var_cas_task_data.reader_events (_inLexique COMMA_SOURCE_FILE_AT_LINE (385)) ;
              GGS_bool var_cas_known ;
              GGS_lstring  automatic_var_0 ;
              ::routine_is_in_lstringlist (_inLexique,  var_cas_known_events,  var_cas_act.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (387)),  automatic_var_0,  var_cas_known COMMA_SOURCE_FILE_AT_LINE (387)) ;
              if (((var_cas_known)._operator_not ()).isBuiltAndTrue ()) {
                var_cas_act.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((GGS_string (true, "EVENT "))._operator_concat (var_cas_act.reader_event_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (389))))._operator_concat (GGS_string (true, " is not defined for TASK ")))._operator_concat (var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (389))) COMMA_SOURCE_FILE_AT_LINE (390)) ;
              }
            }
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_18013.getPtr ()))) {
            const GGS_activatetask_action var_cas_act (_var_18013.getPtr ()) ;
            if (((var_cas_defined_task_names.reader_hasKey (_inLexique, var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (393)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (393)) COMMA_SOURCE_FILE_AT_LINE (393)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "TASK "))._operator_concat (var_cas_act.reader_task_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (394)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (394))))._operator_concat (GGS_string (true, " is never defined")) COMMA_SOURCE_FILE_AT_LINE (395)) ;
            }
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_18013.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_act (_var_18013.getPtr ()) ;
            if ((var_cas_counters.reader_hasKey (_inLexique, var_cas_act.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (397)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (397)) COMMA_SOURCE_FILE_AT_LINE (397))).isBuiltAndTrue ()) {
              GGS_counter_obj  var_cas_cnt ;
              const GGS_counter_map  _temp_17518 = var_cas_counters ;
              if (_temp_17518._isBuilt ()) {
                _temp_17518 (HERE)->method_get (_inLexique, var_cas_act.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (399)), var_cas_cnt COMMA_SOURCE_FILE_AT_LINE (399)) ;
              }
              { const GGS_counter_type _var_17807 = var_cas_cnt.reader_type (_inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ; // CAST instruction
                if (_var_17807.getPtr () != NULL) {
                  macroValidPointer (_var_17807.getPtr ()) ;
                  if (typeid (cPtr_software_counter) == typeid (* (_var_17807.getPtr ()))) {
                  }else{
                    var_cas_act.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (403)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "COUNTER "))._operator_concat (var_cas_act.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (403)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (403))))._operator_concat (GGS_string (true, " is not a software counter")) COMMA_SOURCE_FILE_AT_LINE (404)) ;
                  }
                }
              }
            }else{
              var_cas_act.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (406)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((GGS_string (true, "COUNTER "))._operator_concat (var_cas_act.reader_counter_name (_inLexique COMMA_SOURCE_FILE_AT_LINE (406)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (406))))._operator_concat (GGS_string (true, " is never defined")) COMMA_SOURCE_FILE_AT_LINE (407)) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_alarm_actions_correct\n") ;
  #endif
}

//---------------------------------------------------------------------------*

