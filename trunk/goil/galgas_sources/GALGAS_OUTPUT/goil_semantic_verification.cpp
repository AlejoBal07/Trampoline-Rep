//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'goil_semantic_verification.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 14h44'53"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 502
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_semantic_verification.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_semantic_verification.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "counters_well_formed"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_counters_well_formed (C_Compiler & inLexique,
                                const GGS_counter_map   var_cas_counters COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_counters_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_counter_map::cEnumerator enumerator_1014 (var_cas_counters, true) ;
    const GGS_counter_map::cElement * operand_1014 = NULL ;
    while (((operand_1014 = enumerator_1014.nextObject ()))) {
      macroValidPointer (operand_1014) ;
      { const GGS_basic_type _var_1259 = operand_1014->mInfo.counter.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (35)) ; // CAST instruction
        if (_var_1259.getPtr () != NULL) {
          macroValidPointer (_var_1259.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1259.getPtr ()))) {
            operand_1014->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (37)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MAXALLOWEDVALUE attribute not defined for COUNTER ")).operator_concat (operand_1014->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (37))) COMMA_SOURCE_FILE_AT_LINE (38)) ;
          }else{
          }
        }
      }
      { const GGS_basic_type _var_1456 = operand_1014->mInfo.counter.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (41)) ; // CAST instruction
        if (_var_1456.getPtr () != NULL) {
          macroValidPointer (_var_1456.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1456.getPtr ()))) {
            operand_1014->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("TICKSPERBASE attribute not defined for COUNTER ")).operator_concat (operand_1014->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (43))) COMMA_SOURCE_FILE_AT_LINE (44)) ;
          }else{
          }
        }
      }
      { const GGS_basic_type _var_1644 = operand_1014->mInfo.counter.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ; // CAST instruction
        if (_var_1644.getPtr () != NULL) {
          macroValidPointer (_var_1644.getPtr ()) ;
          if (typeid (cPtr_void) == typeid (* (_var_1644.getPtr ()))) {
            operand_1014->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MINCYCLE attribute not defined for COUNTER ")).operator_concat (operand_1014->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49))) COMMA_SOURCE_FILE_AT_LINE (50)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_counters_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "alarms_well_formed"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_alarms_well_formed (C_Compiler & inLexique,
                                const GGS_alarm_map   var_cas_alarms COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_alarms_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_alarm_map::cEnumerator enumerator_1958 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_1958 = NULL ;
    while (((operand_1958 = enumerator_1958.nextObject ()))) {
      macroValidPointer (operand_1958) ;
      if (((operand_1958->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (73)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (73))).operator_isEqual (GGS_string (""))).isBuiltAndTrue ()) {
        operand_1958->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("COUNTER attribute undefined for ALARM ")).operator_concat (operand_1958->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74))) COMMA_SOURCE_FILE_AT_LINE (75)) ;
      }
      { const GGS_action_obj _var_2318 = operand_1958->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (77)) ; // CAST instruction
        if (_var_2318.getPtr () != NULL) {
          macroValidPointer (_var_2318.getPtr ()) ;
          if (typeid (cPtr_void_action) == typeid (* (_var_2318.getPtr ()))) {
            operand_1958->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("ACTION attribute undefined for ALARM ")).operator_concat (operand_1958->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) COMMA_SOURCE_FILE_AT_LINE (80)) ;
          }else{
          }
        }
      }
      { const GGS_autostart_obj _var_2494 = operand_1958->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ; // CAST instruction
        if (_var_2494.getPtr () != NULL) {
          macroValidPointer (_var_2494.getPtr ()) ;
          if (typeid (cPtr_autostart_void) == typeid (* (_var_2494.getPtr ()))) {
            operand_1958->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("AUTOSTART attribute undefined for ALARM ")).operator_concat (operand_1958->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (85))) COMMA_SOURCE_FILE_AT_LINE (86)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_alarms_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "events_well_formed"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_events_well_formed (C_Compiler & inLexique,
                                const GGS_event_map   var_cas_events COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_events_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_event_map::cEnumerator enumerator_2773 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_2773 = NULL ;
    while (((operand_2773 = enumerator_2773.nextObject ()))) {
      macroValidPointer (operand_2773) ;
      { const GGS_event_mask_obj _var_3052 = operand_2773->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (106)) ; // CAST instruction
        if (_var_3052.getPtr () != NULL) {
          macroValidPointer (_var_3052.getPtr ()) ;
          if (typeid (cPtr_event_mask_void_obj) == typeid (* (_var_3052.getPtr ()))) {
            const GGS_event_mask_void_obj var_cas_mask (_var_3052.getPtr ()) ;
            operand_2773->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("MASK attribute undefined for EVENT ")).operator_concat (operand_2773->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (108))) COMMA_SOURCE_FILE_AT_LINE (109)) ;
            var_cas_mask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (109)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("was previously defined here") COMMA_SOURCE_FILE_AT_LINE (110)) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_events_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "all_events_and_resources_and_messages_defined_and_used"*
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_events_and_resources_and_messages_defined_and_used (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_events_and_resources_and_messages_defined_and_used at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_task_map  var_cas_tasks ;
  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
  GGS_isr_map  var_cas_isrs ;
  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
  GGS_event_map  var_cas_events ;
  var_cas_events = var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (121)) ;
  GGS_resource_map  var_cas_resources ;
  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (122)) ;
  GGS_message_map  var_cas_messages ;
  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (123)) ;
  GGS_stringset  var_cas_used_events ;
  var_cas_used_events = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_used_resources ;
  var_cas_used_resources = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_used_messages ;
  var_cas_used_messages = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_task_map::cEnumerator enumerator_3568 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_3568 = NULL ;
    while (((operand_3568 = enumerator_3568.nextObject ()))) {
      macroValidPointer (operand_3568) ;
      GGS_lstringlist  var_cas_task_events ;
      var_cas_task_events = operand_3568->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (133)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_3738 (var_cas_task_events, true) ;
        const GGS_lstringlist::cElement * operand_3738 = NULL ;
        while (((operand_3738 = enumerator_3738.nextObject ()))) {
          macroValidPointer (operand_3738) ;
          var_cas_used_events._addAssign_operation (operand_3738->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
          if (((var_cas_events.reader_hasKey (inLexique, operand_3738->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) COMMA_SOURCE_FILE_AT_LINE (136))).operator_not ()).isBuiltAndTrue ()) {
            operand_3738->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("EVENT ")).operator_concat (operand_3738->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (138)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_task_resources ;
      var_cas_task_resources = operand_3568->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_4112 (var_cas_task_resources, true) ;
        const GGS_lstringlist::cElement * operand_4112 = NULL ;
        while (((operand_4112 = enumerator_4112.nextObject ()))) {
          macroValidPointer (operand_4112) ;
          var_cas_used_resources._addAssign_operation (operand_4112->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145))) ;
          if (((var_cas_resources.reader_hasKey (inLexique, operand_4112->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) COMMA_SOURCE_FILE_AT_LINE (146))).operator_not ()).isBuiltAndTrue ()) {
            operand_4112->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("RESOURCE ")).operator_concat (operand_4112->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (147)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (148)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_task_messages ;
      var_cas_task_messages = operand_3568->mInfo.task.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (153)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_4480 (var_cas_task_messages, true) ;
        const GGS_lstringlist::cElement * operand_4480 = NULL ;
        while (((operand_4480 = enumerator_4480.nextObject ()))) {
          macroValidPointer (operand_4480) ;
          var_cas_used_messages._addAssign_operation (operand_4480->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (155))) ;
          if (((var_cas_messages.reader_hasKey (inLexique, operand_4480->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) COMMA_SOURCE_FILE_AT_LINE (156))).operator_not ()).isBuiltAndTrue ()) {
            operand_4480->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MESSAGE ")).operator_concat (operand_4480->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (158)) ;
          }
        }
      }
    }
  }
  {
    GGS_isr_map::cEnumerator enumerator_4802 (var_cas_isrs, true) ;
    const GGS_isr_map::cElement * operand_4802 = NULL ;
    while (((operand_4802 = enumerator_4802.nextObject ()))) {
      macroValidPointer (operand_4802) ;
      GGS_lstringlist  var_cas_isr_resources ;
      var_cas_isr_resources = operand_4802->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (166)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_4961 (var_cas_isr_resources, true) ;
        const GGS_lstringlist::cElement * operand_4961 = NULL ;
        while (((operand_4961 = enumerator_4961.nextObject ()))) {
          macroValidPointer (operand_4961) ;
          var_cas_used_resources._addAssign_operation (operand_4961->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (168))) ;
          if (((var_cas_resources.reader_hasKey (inLexique, operand_4961->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (169)) COMMA_SOURCE_FILE_AT_LINE (169))).operator_not ()).isBuiltAndTrue ()) {
            operand_4802->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("RESOURCE ")).operator_concat (operand_4961->mValue)).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (171)) ;
          }
        }
      }
      GGS_lstringlist  var_cas_isr_messages ;
      var_cas_isr_messages = operand_4802->mInfo.isr.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ;
      {
        GGS_lstringlist::cEnumerator enumerator_5318 (var_cas_isr_messages, true) ;
        const GGS_lstringlist::cElement * operand_5318 = NULL ;
        while (((operand_5318 = enumerator_5318.nextObject ()))) {
          macroValidPointer (operand_5318) ;
          var_cas_used_messages._addAssign_operation (operand_5318->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (178))) ;
          if (((var_cas_messages.reader_hasKey (inLexique, operand_5318->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) COMMA_SOURCE_FILE_AT_LINE (179))).operator_not ()).isBuiltAndTrue ()) {
            operand_4802->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MESSAGE ")).operator_concat (operand_5318->mValue)).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (181)) ;
          }
        }
      }
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_5626 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_5626 = NULL ;
    while (((operand_5626 = enumerator_5626.nextObject ()))) {
      macroValidPointer (operand_5626) ;
      if (((var_cas_used_events.reader_hasKey (inLexique, operand_5626->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (188)) COMMA_SOURCE_FILE_AT_LINE (188))).operator_not ()).isBuiltAndTrue ()) {
        operand_5626->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("EVENT ")).operator_concat (operand_5626->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189)))).operator_concat (GGS_string (" is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (189)) ;
      }
    }
  }
  {
    GGS_resource_map::cEnumerator enumerator_5908 (var_cas_resources, true) ;
    const GGS_resource_map::cElement * operand_5908 = NULL ;
    while (((operand_5908 = enumerator_5908.nextObject ()))) {
      macroValidPointer (operand_5908) ;
      if (((var_cas_used_resources.reader_hasKey (inLexique, operand_5908->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) COMMA_SOURCE_FILE_AT_LINE (195))).operator_not ()).isBuiltAndTrue ()) {
        operand_5908->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("RESOURCE ")).operator_concat (operand_5908->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196)))).operator_concat (GGS_string (" is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (196)) ;
      }
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_6186 (var_cas_messages, true) ;
    const GGS_message_map::cElement * operand_6186 = NULL ;
    while (((operand_6186 = enumerator_6186.nextObject ()))) {
      macroValidPointer (operand_6186) ;
      if (((var_cas_used_messages.reader_hasKey (inLexique, operand_6186->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) COMMA_SOURCE_FILE_AT_LINE (202))).operator_not ()).isBuiltAndTrue ()) {
        operand_6186->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("MESSAGE ")).operator_concat (operand_6186->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)))).operator_concat (GGS_string (" is defined but never used")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_events_and_resources_and_messages_defined_and_used\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "all_event_masks_different"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_event_masks_different (C_Compiler & inLexique,
                                GGS_event_map   var_cas_events COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_event_masks_different at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_defined_masks ;
  var_cas_defined_masks = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_event_map::cEnumerator enumerator_6516 (var_cas_events, true) ;
    const GGS_event_map::cElement * operand_6516 = NULL ;
    while (((operand_6516 = enumerator_6516.nextObject ()))) {
      macroValidPointer (operand_6516) ;
      GGS_event_mask_obj  var_cas_mask ;
      var_cas_mask = operand_6516->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (215)) ;
      { const GGS_event_mask_obj _var_6943 = var_cas_mask ; // CAST instruction
        if (_var_6943.getPtr () != NULL) {
          macroValidPointer (_var_6943.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_6943.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_m (_var_6943.getPtr ()) ;
            GGS_string var_cas_mask_in_string ;
            var_cas_mask_in_string = var_cas_m.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (218)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (218)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (218)) ;
            if ((var_cas_defined_masks.reader_hasKey (inLexique, var_cas_mask_in_string COMMA_SOURCE_FILE_AT_LINE (219))).isBuiltAndTrue ()) {
              operand_6516->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((GGS_string ("Mask ")).operator_concat (var_cas_mask_in_string)).operator_concat (GGS_string (" already used")) COMMA_SOURCE_FILE_AT_LINE (220)) ;
            }else{
              var_cas_defined_masks._addAssign_operation (var_cas_mask_in_string) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_event_masks_different\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "all_alarm_actions_correct"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_all_alarm_actions_correct (C_Compiler & inLexique,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_task_map   var_cas_tasks,
                                GGS_counter_map   var_cas_counters COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_all_alarm_actions_correct at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_stringset  var_cas_defined_task_names ;
  var_cas_defined_task_names = var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (236)) ;
  {
    GGS_alarm_map::cEnumerator enumerator_7179 (var_cas_alarms, true) ;
    const GGS_alarm_map::cElement * operand_7179 = NULL ;
    while (((operand_7179 = enumerator_7179.nextObject ()))) {
      macroValidPointer (operand_7179) ;
      GGS_action_obj  var_cas_alarm_action ;
      var_cas_alarm_action = operand_7179->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ;
      { const GGS_action_obj _var_8766 = var_cas_alarm_action ; // CAST instruction
        if (_var_8766.getPtr () != NULL) {
          macroValidPointer (_var_8766.getPtr ()) ;
          if (typeid (cPtr_setevent_action) == typeid (* (_var_8766.getPtr ()))) {
            const GGS_setevent_action var_cas_act (_var_8766.getPtr ()) ;
            if (((var_cas_defined_task_names.reader_hasKey (inLexique, var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (242)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242)) COMMA_SOURCE_FILE_AT_LINE (242))).operator_not ()).isBuiltAndTrue ()) {
              var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (243)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("TASK ")).operator_concat (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (243)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243)))).operator_concat (GGS_string (" is never defined")) COMMA_SOURCE_FILE_AT_LINE (244)) ;
            }else{
              GGS_task_obj  var_cas_task_data ;
              GGS_lstringlist  var_cas_known_events ;
              const GGS_task_map  _temp_7628 = var_cas_tasks ;
              if (_temp_7628.isBuilt ()) {
                _temp_7628 (HERE)->method_get (inLexique, var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (247)), var_cas_task_data COMMA_SOURCE_FILE_AT_LINE (247)) ;
              }
              var_cas_known_events = var_cas_task_data.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (248)) ;
              GGS_bool var_cas_known ;
              GGS_lstring  automatic_var_0 ;
              ::routine_is_in_lstringlist (inLexique,  var_cas_known_events,  var_cas_act.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (250)),  automatic_var_0,  var_cas_known COMMA_SOURCE_FILE_AT_LINE (250)) ;
              if (((var_cas_known).operator_not ()).isBuiltAndTrue ()) {
                var_cas_act.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("EVENT ")).operator_concat (var_cas_act.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (252)))).operator_concat (GGS_string (" is not defined for TASK "))).operator_concat (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (252)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (252))) COMMA_SOURCE_FILE_AT_LINE (253)) ;
              }
            }
          }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_8766.getPtr ()))) {
            const GGS_activatetask_action var_cas_act (_var_8766.getPtr ()) ;
            if (((var_cas_defined_task_names.reader_hasKey (inLexique, var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (256)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (256)) COMMA_SOURCE_FILE_AT_LINE (256))).operator_not ()).isBuiltAndTrue ()) {
              var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("TASK ")).operator_concat (var_cas_act.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (257)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string (" is not defined")) COMMA_SOURCE_FILE_AT_LINE (258)) ;
            }
          }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_8766.getPtr ()))) {
            const GGS_incrementcounter_action var_cas_act (_var_8766.getPtr ()) ;
            if ((var_cas_counters.reader_hasKey (inLexique, var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (260)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260))).isBuiltAndTrue ()) {
              GGS_counter_obj  var_cas_cnt ;
              const GGS_counter_map  _temp_8369 = var_cas_counters ;
              if (_temp_8369.isBuilt ()) {
                _temp_8369 (HERE)->method_getCounter (inLexique, var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (262)), var_cas_cnt COMMA_SOURCE_FILE_AT_LINE (262)) ;
              }
              { const GGS_counter_type _var_8604 = var_cas_cnt.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (263)) ; // CAST instruction
                if (_var_8604.getPtr () != NULL) {
                  macroValidPointer (_var_8604.getPtr ()) ;
                  if (typeid (cPtr_software_counter) == typeid (* (_var_8604.getPtr ()))) {
                  }else{
                    var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("COUNTER ")).operator_concat (var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string (" is not a software counter")) COMMA_SOURCE_FILE_AT_LINE (267)) ;
                  }
                }
              }
            }else{
              var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (269)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("COUNTER ")).operator_concat (var_cas_act.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (269)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (269)))).operator_concat (GGS_string (" is never defined")) COMMA_SOURCE_FILE_AT_LINE (270)) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_all_alarm_actions_correct\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "verify_all"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_verify_all (C_Compiler & inLexique,
                                GGS_root_obj  & var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_verify_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_tasks_well_formed (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) COMMA_SOURCE_FILE_AT_LINE (286)) ;
  ::routine_counters_well_formed (inLexique,  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (287)) ;
  ::routine_alarms_well_formed (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (288)) COMMA_SOURCE_FILE_AT_LINE (288)) ;
  ::routine_resources_well_formed (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (289)) COMMA_SOURCE_FILE_AT_LINE (289)) ;
  ::routine_isrs_well_formed (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (290)) COMMA_SOURCE_FILE_AT_LINE (290)) ;
  ::routine_events_well_formed (inLexique,  var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (291)) COMMA_SOURCE_FILE_AT_LINE (291)) ;
  ::routine_networkmessages_well_formed (inLexique,  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (292)) COMMA_SOURCE_FILE_AT_LINE (292)) ;
  GGS_resource_map  var_cas_resources ;
  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (301)) ;
  ::routine_resolve_linked_resources (inLexique,  var_cas_resources COMMA_SOURCE_FILE_AT_LINE (302)) ;
  var_cas_cpu.modifier_setResources (inLexique, var_cas_resources COMMA_SOURCE_FILE_AT_LINE (303)) ;
  ::routine_all_events_and_resources_and_messages_defined_and_used (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (305)) ;
  ::routine_all_alarm_actions_correct (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (307)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (307)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) COMMA_SOURCE_FILE_AT_LINE (307)) ;
  ::routine_counters_of_alarms_defined (inLexique,  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (308)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (308)) COMMA_SOURCE_FILE_AT_LINE (308)) ;
  ::routine_networkmessages_exist_and_ok (inLexique,  var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (309)),  var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (309)) COMMA_SOURCE_FILE_AT_LINE (309)) ;
  if ((GGS_bool (inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (312)))).isBuiltAndTrue ()) {
    ::routine_schedule_tables_well_formed (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (313)),  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (313)) ;
    ::routine_schedule_tables_counters_exist_and_compatible (inLexique,  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (314)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (314)) COMMA_SOURCE_FILE_AT_LINE (314)) ;
    ::routine_schedule_tables_tasks_and_events_exist (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (315)) ;
    ::routine_apps_well_formed (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (316)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_verify_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

