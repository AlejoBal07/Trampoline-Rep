//---------------------------------------------------------------------------*
//                                                                           *
//                           File 'defaults.cpp'                             *
//                       Generated by version 1.9.12                         *
//                       may 17th, 2010, at 15h23'52"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 742
  #error "This file has been compiled with a version of GALGAS that uses libpm version 742, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "defaults.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "defaults.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "check_custom_field"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_custom_field (C_Compiler & inLexique,
                                GGS_ident_map  & var_cas_others,
                                GGS_lstring   var_cas_field,
                                GGS_imp_type   var_cas_f_def COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_custom_field at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_1405 = (var_cas_others.reader_hasKey (var_cas_field.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (39)))).operator_not () ;
  if (cond_1405.isBuiltAndTrue ()) {
    { const GGS_imp_type _var_1389 = var_cas_f_def ; // CAST instruction
      if (_var_1389.getPtr () != NULL) {
        macroValidPointer (_var_1389.getPtr ()) ;
        if (typeid (cPtr_uint32_type) == typeid (* (_var_1389.getPtr ()))) {
          const GGS_uint32_type var_cas_f (_var_1389.getPtr ()) ;
          GGS_uint64_class  var_cas_val = GGS_uint64_class ::constructor_new (inLexique, var_cas_f.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (43)), var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (43)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) COMMA_SOURCE_FILE_AT_LINE (43)) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_val COMMA_SOURCE_FILE_AT_LINE (44)) ;
        }else if (typeid (cPtr_sint32_type) == typeid (* (_var_1389.getPtr ()))) {
          const GGS_sint32_type var_cas_f (_var_1389.getPtr ()) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (45)) COMMA_SOURCE_FILE_AT_LINE (45)) ;
        }else if (typeid (cPtr_uint64_type) == typeid (* (_var_1389.getPtr ()))) {
          const GGS_uint64_type var_cas_f (_var_1389.getPtr ()) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) COMMA_SOURCE_FILE_AT_LINE (46)) ;
        }else if (typeid (cPtr_sint64_type) == typeid (* (_var_1389.getPtr ()))) {
          const GGS_sint64_type var_cas_f (_var_1389.getPtr ()) ;
          var_cas_others.modifier_put (inLexique, var_cas_field, var_cas_f.reader_def_val (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) COMMA_SOURCE_FILE_AT_LINE (47)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_custom_field\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "check_range"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_range (C_Compiler & inLexique,
                                GGS_basic_type   var_cas_var,
                                GGS_imp_type   var_cas_def COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_range at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_basic_type _var_1891 = var_cas_var ; // CAST instruction
    if (_var_1891.getPtr () != NULL) {
      macroValidPointer (_var_1891.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_1891.getPtr ()))) {
        const GGS_uint32_class var_cas_ui (_var_1891.getPtr ()) ;
        { const GGS_imp_type _var_1817 = var_cas_def ; // CAST instruction
          if (_var_1817.getPtr () != NULL) {
            macroValidPointer (_var_1817.getPtr ()) ;
            if (typeid (cPtr_uint32_type) == typeid (* (_var_1817.getPtr ()))) {
              const GGS_uint32_type var_cas_d (_var_1817.getPtr ()) ;
              ::routine_check_uint32_range (inLexique,  var_cas_d.reader_set (inLexique COMMA_SOURCE_FILE_AT_LINE (64)),  var_cas_ui.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (64)),  var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) COMMA_SOURCE_FILE_AT_LINE (64)) ;
            }else{
              var_cas_def.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (66)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error") COMMA_SOURCE_FILE_AT_LINE (67)) ;
            }
          }
        }
      }else{
        var_cas_var.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (69)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Internal error") COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_range\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "verify_and_set_tasks_defaults"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_verify_and_set_tasks_defaults (C_Compiler & inLexique,
                                GGS_task_map  & var_cas_tasks,
                                GGS_implementation_spec   var_cas_spec COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_verify_and_set_tasks_defaults at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_task_map  var_cas_tp = var_cas_tasks ;
  {
    GGS_task_map::cEnumerator enumerator_2161 (var_cas_tp, true) ;
    const GGS_task_map::cElement * operand_2161 = NULL ;
    while (((operand_2161 = enumerator_2161.nextObject ()))) {
      macroValidPointer (operand_2161) ;
      GGS_task_obj  automatic_var_2224_0 ;
      var_cas_tasks.modifier_del (inLexique, operand_2161->mKey, automatic_var_2224_0 COMMA_SOURCE_FILE_AT_LINE (84)) ;
      GGS_ident_map  var_cas_others = operand_2161->mInfo.task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
      {
        GGS_implementation_spec::cEnumerator enumerator_2292 (var_cas_spec, true) ;
        const GGS_implementation_spec::cElement * operand_2292 = NULL ;
        while (((operand_2292 = enumerator_2292.nextObject ()))) {
          macroValidPointer (operand_2292) ;
          const GGS_bool cond_2453 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (87))).operator_isEqual (GGS_string ("PRIORITY")) ;
          if (cond_2453.isBuiltAndTrue ()) {
            ::routine_check_range (inLexique,  operand_2161->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (88)),  operand_2292->mInfo.type COMMA_SOURCE_FILE_AT_LINE (88)) ;
          }else if (cond_2453.isBuiltAndFalse ()) {
            const GGS_bool cond_2497 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))).operator_isEqual (GGS_string ("")) ;
            if (cond_2497.isBuiltAndTrue ()) {
            }else if (cond_2497.isBuiltAndFalse ()) {
              const GGS_bool cond_2541 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90))).operator_isEqual (GGS_string ("")) ;
              if (cond_2541.isBuiltAndTrue ()) {
              }else if (cond_2541.isBuiltAndFalse ()) {
                const GGS_bool cond_2585 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (91))).operator_isEqual (GGS_string ("")) ;
                if (cond_2585.isBuiltAndTrue ()) {
                }else if (cond_2585.isBuiltAndFalse ()) {
                  const GGS_bool cond_2629 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_isEqual (GGS_string ("")) ;
                  if (cond_2629.isBuiltAndTrue ()) {
                  }else if (cond_2629.isBuiltAndFalse ()) {
                    const GGS_bool cond_2673 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93))).operator_isEqual (GGS_string ("")) ;
                    if (cond_2673.isBuiltAndTrue ()) {
                    }else if (cond_2673.isBuiltAndFalse ()) {
                      const GGS_bool cond_2716 = (operand_2292->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))).operator_isEqual (GGS_string ("")) ;
                      if (cond_2716.isBuiltAndTrue ()) {
                      }else if (cond_2716.isBuiltAndFalse ()) {
                        ::routine_check_custom_field (inLexique,  var_cas_others,  operand_2292->mKey,  operand_2292->mInfo.type COMMA_SOURCE_FILE_AT_LINE (96)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      GGS_task_obj  var_cas_updated_task = GGS_task_obj ::constructor_new (inLexique, operand_2161->mInfo.task.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (100)), operand_2161->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (101)), operand_2161->mInfo.task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (102)), operand_2161->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (103)), operand_2161->mInfo.task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (104)), operand_2161->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (105)), operand_2161->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (106)), operand_2161->mInfo.task.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (107)), operand_2161->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (108)), operand_2161->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), var_cas_others COMMA_SOURCE_FILE_AT_LINE (99)) ;
      var_cas_tasks.modifier_put (inLexique, operand_2161->mKey, var_cas_updated_task COMMA_SOURCE_FILE_AT_LINE (112)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_verify_and_set_tasks_defaults\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "verify_and_set_isrs_defaults"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_verify_and_set_isrs_defaults (C_Compiler & inLexique,
                                GGS_isr_map  & var_cas_isrs,
                                GGS_implementation_spec   var_cas_spec COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_verify_and_set_isrs_defaults at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_isr_map  var_cas_ip = var_cas_isrs ;
  {
    GGS_isr_map::cEnumerator enumerator_3507 (var_cas_ip, true) ;
    const GGS_isr_map::cElement * operand_3507 = NULL ;
    while (((operand_3507 = enumerator_3507.nextObject ()))) {
      macroValidPointer (operand_3507) ;
      GGS_isr_obj  automatic_var_3567_0 ;
      var_cas_isrs.modifier_del (inLexique, operand_3507->mKey, automatic_var_3567_0 COMMA_SOURCE_FILE_AT_LINE (127)) ;
      GGS_ident_map  var_cas_others = operand_3507->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (128)) ;
      {
        GGS_implementation_spec::cEnumerator enumerator_3640 (var_cas_spec, true) ;
        const GGS_implementation_spec::cElement * operand_3640 = NULL ;
        while (((operand_3640 = enumerator_3640.nextObject ()))) {
          macroValidPointer (operand_3640) ;
          const GGS_bool cond_3770 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130))).operator_isEqual (GGS_string ("PRIORITY")) ;
          if (cond_3770.isBuiltAndTrue ()) {
            inLexique.printMessage (GGS_string ("PRIORITY!\n") COMMA_SOURCE_FILE_AT_LINE (131)) ;
          }else if (cond_3770.isBuiltAndFalse ()) {
            const GGS_bool cond_3814 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (132))).operator_isEqual (GGS_string ("")) ;
            if (cond_3814.isBuiltAndTrue ()) {
            }else if (cond_3814.isBuiltAndFalse ()) {
              const GGS_bool cond_3858 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (133))).operator_isEqual (GGS_string ("")) ;
              if (cond_3858.isBuiltAndTrue ()) {
              }else if (cond_3858.isBuiltAndFalse ()) {
                const GGS_bool cond_3902 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (134))).operator_isEqual (GGS_string ("")) ;
                if (cond_3902.isBuiltAndTrue ()) {
                }else if (cond_3902.isBuiltAndFalse ()) {
                  const GGS_bool cond_3946 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135))).operator_isEqual (GGS_string ("")) ;
                  if (cond_3946.isBuiltAndTrue ()) {
                  }else if (cond_3946.isBuiltAndFalse ()) {
                    const GGS_bool cond_3990 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136))).operator_isEqual (GGS_string ("")) ;
                    if (cond_3990.isBuiltAndTrue ()) {
                    }else if (cond_3990.isBuiltAndFalse ()) {
                      const GGS_bool cond_4033 = (operand_3640->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137))).operator_isEqual (GGS_string ("")) ;
                      if (cond_4033.isBuiltAndTrue ()) {
                      }else if (cond_4033.isBuiltAndFalse ()) {
                        ::routine_check_custom_field (inLexique,  var_cas_others,  operand_3640->mKey,  operand_3640->mInfo.type COMMA_SOURCE_FILE_AT_LINE (139)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      GGS_isr_obj  var_cas_updated_isr = GGS_isr_obj ::constructor_new (inLexique, operand_3507->mInfo.isr.reader_desc (inLexique COMMA_SOURCE_FILE_AT_LINE (143)), operand_3507->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (144)), operand_3507->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (145)), operand_3507->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (146)), operand_3507->mInfo.isr.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (147)), operand_3507->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (148)), operand_3507->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (149)), var_cas_others COMMA_SOURCE_FILE_AT_LINE (142)) ;
      var_cas_isrs.modifier_put (inLexique, operand_3507->mKey, var_cas_updated_isr COMMA_SOURCE_FILE_AT_LINE (152)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_verify_and_set_isrs_defaults\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "add_system_counter"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_add_system_counter (C_Compiler & inLexique,
                                GGS_root_obj  & var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_add_system_counter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (166)) ;
  GGS_counter_obj  var_cas_sys_cnt ;
  GGS_lstringlist  var_cas_all_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (168)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (168)) ;
  {
    GGS_app_map::cEnumerator enumerator_4790 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (169)), true) ;
    const GGS_app_map::cElement * operand_4790 = NULL ;
    while (((operand_4790 = enumerator_4790.nextObject ()))) {
      macroValidPointer (operand_4790) ;
      var_cas_all_apps.addAssign_operation (operand_4790->mKey) ;
    }
  }
  const GGS_bool cond_5938 = var_cas_counters.reader_hasKey (GGS_string ("SystemCounter")) ;
  if (cond_5938.isBuiltAndTrue ()) {
    var_cas_counters.modifier_del (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("SystemCounter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (174)), var_cas_sys_cnt COMMA_SOURCE_FILE_AT_LINE (174)) ;
    { const GGS_basic_type _var_5113 = var_cas_sys_cnt.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ; // CAST instruction
      if (_var_5113.getPtr () != NULL) {
        macroValidPointer (_var_5113.getPtr ()) ;
        if (typeid (cPtr_void) == typeid (* (_var_5113.getPtr ()))) {
          var_cas_sys_cnt.modifier_setMax_allowed_value (inLexique, GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (32767U) COMMA_SOURCE_FILE_AT_LINE (177)) COMMA_SOURCE_FILE_AT_LINE (177)) ;
        }else{
        }
      }
    }
    { const GGS_basic_type _var_5265 = var_cas_sys_cnt.reader_ticks_per_base (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ; // CAST instruction
      if (_var_5265.getPtr () != NULL) {
        macroValidPointer (_var_5265.getPtr ()) ;
        if (typeid (cPtr_void) == typeid (* (_var_5265.getPtr ()))) {
          var_cas_sys_cnt.modifier_setTicks_per_base (inLexique, GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (182)) COMMA_SOURCE_FILE_AT_LINE (182)) ;
        }else{
        }
      }
    }
    { const GGS_basic_type _var_5407 = var_cas_sys_cnt.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (185)) ; // CAST instruction
      if (_var_5407.getPtr () != NULL) {
        macroValidPointer (_var_5407.getPtr ()) ;
        if (typeid (cPtr_void) == typeid (* (_var_5407.getPtr ()))) {
          var_cas_sys_cnt.modifier_setMin_cycle (inLexique, GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
        }else{
        }
      }
    }
    const GGS_bool cond_5527 = (var_cas_sys_cnt.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190))).operator_isEqual (GGS_string ("")) ;
    if (cond_5527.isBuiltAndTrue ()) {
      var_cas_sys_cnt.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("SystemCounter has no SOURCE") COMMA_SOURCE_FILE_AT_LINE (192)) ;
    }
    const GGS_bool cond_5927 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
    if (cond_5927.isBuiltAndTrue ()) {
      const GGS_bool cond_5748 = (var_cas_sys_cnt.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (195)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_5748.isBuiltAndTrue ()) {
        var_cas_sys_cnt.modifier_setAcc_apps (inLexique, var_cas_all_apps COMMA_SOURCE_FILE_AT_LINE (196)) ;
      }
      { const GGS_counter_type _var_5913 = var_cas_sys_cnt.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ; // CAST instruction
        if (_var_5913.getPtr () != NULL) {
          macroValidPointer (_var_5913.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_5913.getPtr ()))) {
            const GGS_software_counter var_cas_sc (_var_5913.getPtr ()) ;
            var_cas_sc.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Incompatible TYPE for SystemCounter") COMMA_SOURCE_FILE_AT_LINE (201)) ;
          }else{
          }
        }
      }
    }
  }else if (cond_5938.isBuiltAndFalse ()) {
    GGS_hardware_counter  var_cas_type = GGS_hardware_counter ::constructor_new (inLexique, GGS_location (inLexique), GGS_void_driver ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (205)), GGS_time_constants ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (205)) ;
    var_cas_sys_cnt = GGS_counter_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("Predefined SystemCounter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (207)), GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (32767U) COMMA_SOURCE_FILE_AT_LINE (208)), GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (209)), GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (210)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (211)), var_cas_all_apps, var_cas_type, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (214)) COMMA_SOURCE_FILE_AT_LINE (206)) ;
  }
  var_cas_counters.modifier_put (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("SystemCounter"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (218)), var_cas_sys_cnt COMMA_SOURCE_FILE_AT_LINE (218)) ;
  var_cas_cpu.modifier_setCounters (inLexique, var_cas_counters COMMA_SOURCE_FILE_AT_LINE (220)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_add_system_counter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "set_defaults"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_set_defaults (C_Compiler & inLexique,
                                const GGS_implementation   var_cas_imp,
                                GGS_root_obj  & var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_set_defaults at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7060 = var_cas_imp.reader_hasKey (GGS_string ("task")) ;
  if (cond_7060.isBuiltAndTrue ()) {
    GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (229)) ;
    GGS_implementation_spec  var_cas_spec ;
    const GGS_implementation  temp_6906 = var_cas_imp ;
    if (temp_6906.isBuilt ()) {
      temp_6906 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("task"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (231)), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (231)) ;
    }
    ::routine_verify_and_set_tasks_defaults (inLexique,  var_cas_tasks,  var_cas_spec COMMA_SOURCE_FILE_AT_LINE (232)) ;
    var_cas_cpu.modifier_setTasks (inLexique, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (233)) ;
    var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) ;
  }
  const GGS_bool cond_7321 = var_cas_imp.reader_hasKey (GGS_string ("isr")) ;
  if (cond_7321.isBuiltAndTrue ()) {
    GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ;
    GGS_implementation_spec  var_cas_spec ;
    const GGS_implementation  temp_7200 = var_cas_imp ;
    if (temp_7200.isBuilt ()) {
      temp_7200 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("isr"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (241)), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (241)) ;
    }
    ::routine_verify_and_set_isrs_defaults (inLexique,  var_cas_isrs,  var_cas_spec COMMA_SOURCE_FILE_AT_LINE (242)) ;
    var_cas_cpu.modifier_setIsrs (inLexique, var_cas_isrs COMMA_SOURCE_FILE_AT_LINE (243)) ;
  }
  ::routine_add_system_counter (inLexique,  var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (246)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_set_defaults\n") ;
  #endif
}

//---------------------------------------------------------------------------*

