//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_app_verif.cpp'                          *
//                       Generated by version 1.9.10                         *
//                      april 9th, 2010, at 10h17'47"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 688
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_app_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_verif.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_exists"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_exists (C_Compiler & inLexique,
                                GGS_stringset   var_cas_def,
                                GGS_lstringlist   var_cas_ref,
                                GGS_string  var_cas_obj_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_exists at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_452 (var_cas_ref, true) ;
    const GGS_lstringlist::cElement * operand_452 = NULL ;
    while (((operand_452 = enumerator_452.nextObject ()))) {
      macroValidPointer (operand_452) ;
      const GGS_bool cond_588 = (var_cas_def.reader_hasKey (operand_452->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (16)))).operator_not () ;
      if (cond_588.isBuiltAndTrue ()) {
        operand_452->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_type).operator_concat (GGS_string (" "))).operator_concat (operand_452->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)))).operator_concat (GGS_string (" referenced does not exist")) COMMA_SOURCE_FILE_AT_LINE (18)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_exists\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_in_one"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_in_one (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_objects,
                                GGS_lstring   var_cas_sName,
                                GGS_string  var_cas_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_in_one at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_764 (var_cas_objects, true) ;
    const GGS_lstringlist::cElement * operand_764 = NULL ;
    while (((operand_764 = enumerator_764.nextObject ()))) {
      macroValidPointer (operand_764) ;
      const GGS_bool cond_1031 = (operand_764->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))).operator_isEqual (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))) ;
      if (cond_1031.isBuiltAndTrue ()) {
        var_cas_not_found = GGS_bool (false) ;
        var_cas_sName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (32)))).operator_concat (GGS_string (" is already part of an OS Application")) COMMA_SOURCE_FILE_AT_LINE (33)) ;
        operand_764->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("It has been declared here") COMMA_SOURCE_FILE_AT_LINE (34)) ;
      }
    }
  }
  const GGS_bool cond_1103 = var_cas_not_found ;
  if (cond_1103.isBuiltAndTrue ()) {
    var_cas_objects.addAssign_operation (var_cas_sName) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_in_one\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "object_not_in_any"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_not_in_any (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_objs,
                                GGS_stringset   var_cas_app_objs,
                                GGS_string  var_cas_obj_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_not_in_any at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_1237 (var_cas_objs, true) ;
    const GGS_lstringlist::cElement * operand_1237 = NULL ;
    while (((operand_1237 = enumerator_1237.nextObject ()))) {
      macroValidPointer (operand_1237) ;
      GGS_string var_cas_name = operand_1237->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
      const GGS_bool cond_1423 = (var_cas_app_objs.reader_hasKey (var_cas_name)).operator_not () ;
      if (cond_1423.isBuiltAndTrue ()) {
        operand_1237->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_name)).operator_concat (GGS_string (" does not belong to any OS Application")) COMMA_SOURCE_FILE_AT_LINE (51)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_not_in_any\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "apps_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_apps_well_formed (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_apps_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_app_map  var_cas_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_alarm_map  var_cas_alarms = var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_scheduletable_map  var_cas_schedtables = var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_message_map  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  const GGS_bool cond_17693 = (var_cas_apps.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17693.isBuiltAndTrue ()) {
    {
      GGS_app_map::cEnumerator enumerator_2271 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2271 = NULL ;
      while (((operand_2271 = enumerator_2271.nextObject ()))) {
        macroValidPointer (operand_2271) ;
        ::routine_object_exists (inLexique,  var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  operand_2271->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (78)) ;
        ::routine_object_exists (inLexique,  var_cas_isrs.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  operand_2271->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (79)) ;
        ::routine_object_exists (inLexique,  var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  operand_2271->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  GGS_string ("Alarm") COMMA_SOURCE_FILE_AT_LINE (80)) ;
        ::routine_object_exists (inLexique,  var_cas_schedtables.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  operand_2271->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  GGS_string ("Schedule Table") COMMA_SOURCE_FILE_AT_LINE (81)) ;
        ::routine_object_exists (inLexique,  var_cas_counters.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  operand_2271->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  GGS_string ("Counter") COMMA_SOURCE_FILE_AT_LINE (82)) ;
        ::routine_object_exists (inLexique,  var_cas_resources.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  operand_2271->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  GGS_string ("Resource") COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
    }
    GGS_stringset  var_cas_all_apps = var_cas_apps.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
    {
      GGS_task_map::cEnumerator enumerator_2961 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_2961 = NULL ;
      while (((operand_2961 = enumerator_2961.nextObject ()))) {
        macroValidPointer (operand_2961) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_2961->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (90)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3063 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_3063 = NULL ;
      while (((operand_3063 = enumerator_3063.nextObject ()))) {
        macroValidPointer (operand_3063) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3063->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (93)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
    }
    {
      GGS_alarm_map::cEnumerator enumerator_3166 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_3166 = NULL ;
      while (((operand_3166 = enumerator_3166.nextObject ()))) {
        macroValidPointer (operand_3166) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3166->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_3276 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_3276 = NULL ;
      while (((operand_3276 = enumerator_3276.nextObject ()))) {
        macroValidPointer (operand_3276) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3276->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (99)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
    }
    {
      GGS_counter_map::cEnumerator enumerator_3391 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_3391 = NULL ;
      while (((operand_3391 = enumerator_3391.nextObject ()))) {
        macroValidPointer (operand_3391) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3391->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (102)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (102)) ;
      }
    }
    {
      GGS_resource_map::cEnumerator enumerator_3501 (var_cas_resources, true) ;
      const GGS_resource_map::cElement * operand_3501 = NULL ;
      while (((operand_3501 = enumerator_3501.nextObject ()))) {
        macroValidPointer (operand_3501) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3501->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (105)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
    }
    {
      GGS_message_map::cEnumerator enumerator_3611 (var_cas_messages, true) ;
      const GGS_message_map::cElement * operand_3611 = NULL ;
      while (((operand_3611 = enumerator_3611.nextObject ()))) {
        macroValidPointer (operand_3611) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3611->mInfo.mess.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (108)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_lstringlist  var_cas_objects = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_app_map::cEnumerator enumerator_3803 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_3803 = NULL ;
      while (((operand_3803 = enumerator_3803.nextObject ()))) {
        macroValidPointer (operand_3803) ;
        {
          GGS_ident_map::cEnumerator enumerator_3822 (operand_3803->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (114)), true) ;
          const GGS_ident_map::cElement * operand_3822 = NULL ;
          while (((operand_3822 = enumerator_3822.nextObject ()))) {
            macroValidPointer (operand_3822) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3822->mKey,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (114)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3904 (operand_3803->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (115)), true) ;
          const GGS_ident_map::cElement * operand_3904 = NULL ;
          while (((operand_3904 = enumerator_3904.nextObject ()))) {
            macroValidPointer (operand_3904) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3904->mKey,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (115)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3984 (operand_3803->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
          const GGS_ident_map::cElement * operand_3984 = NULL ;
          while (((operand_3984 = enumerator_3984.nextObject ()))) {
            macroValidPointer (operand_3984) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3984->mKey,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4068 (operand_3803->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
          const GGS_ident_map::cElement * operand_4068 = NULL ;
          while (((operand_4068 = enumerator_4068.nextObject ()))) {
            macroValidPointer (operand_4068) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4068->mKey,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (117)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4168 (operand_3803->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
          const GGS_ident_map::cElement * operand_4168 = NULL ;
          while (((operand_4168 = enumerator_4168.nextObject ()))) {
            macroValidPointer (operand_4168) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4168->mKey,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4256 (operand_3803->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), true) ;
          const GGS_ident_map::cElement * operand_4256 = NULL ;
          while (((operand_4256 = enumerator_4256.nextObject ()))) {
            macroValidPointer (operand_4256) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4256->mKey,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (119)) ;
          }
        }
      }
    }
    GGS_stringset  var_cas_all_tasks_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_isrs_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_alarms_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_sts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_cnts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_rezs_in_app = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_app_map::cEnumerator enumerator_4772 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_4772 = NULL ;
      while (((operand_4772 = enumerator_4772.nextObject ()))) {
        macroValidPointer (operand_4772) ;
        var_cas_all_tasks_in_app = (var_cas_all_tasks_in_app).operator_or (operand_4772->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
        var_cas_all_isrs_in_app = (var_cas_all_isrs_in_app).operator_or (operand_4772->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
        var_cas_all_alarms_in_app = (var_cas_all_alarms_in_app).operator_or (operand_4772->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
        var_cas_all_sts_in_app = (var_cas_all_sts_in_app).operator_or (operand_4772->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
        var_cas_all_cnts_in_app = (var_cas_all_cnts_in_app).operator_or (operand_4772->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
        var_cas_all_rezs_in_app = (var_cas_all_rezs_in_app).operator_or (operand_4772->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_tasks.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (141)),  var_cas_all_tasks_in_app,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (141)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_isrs.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (143)),  var_cas_all_isrs_in_app,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (143)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_alarms.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_all_alarms_in_app,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (145)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_schedtables.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (147)),  var_cas_all_sts_in_app,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (147)) ;
    GGS_lstringlist  var_cas_counter_keys = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_counter_map::cEnumerator enumerator_5780 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_5780 = NULL ;
      while (((operand_5780 = enumerator_5780.nextObject ()))) {
        macroValidPointer (operand_5780) ;
        const GGS_bool cond_5869 = (operand_5780->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
        if (cond_5869.isBuiltAndTrue ()) {
          var_cas_counter_keys.addAssign_operation (operand_5780->mKey) ;
        }
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_counter_keys,  var_cas_all_cnts_in_app,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (156)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_resources.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (158)),  var_cas_all_rezs_in_app,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (158)) ;
    {
      GGS_app_map::cEnumerator enumerator_6155 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_6155 = NULL ;
      while (((operand_6155 = enumerator_6155.nextObject ()))) {
        macroValidPointer (operand_6155) ;
        const GGS_bool cond_6493 = ((operand_6155->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_6155->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_length ()).operator_isEqual (GGS_uint (0U))) ;
        if (cond_6493.isBuiltAndTrue ()) {
          operand_6155->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS445 - An application should have at least one Task OR ISR2.") COMMA_SOURCE_FILE_AT_LINE (165)) ;
        }
      }
    }
    GGS_bool var_cas_right_app = GGS_bool (false) ;
    GGS_bool var_cas_access_app = GGS_bool (false) ;
    {
      GGS_alarm_map::cEnumerator enumerator_6728 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_6728 = NULL ;
      while (((operand_6728 = enumerator_6728.nextObject ()))) {
        macroValidPointer (operand_6728) ;
        {
          GGS_app_map::cEnumerator enumerator_6864 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_6864 = NULL ;
          while (((operand_6864 = enumerator_6864.nextObject ()))) {
            macroValidPointer (operand_6864) ;
            {
              GGS_ident_map::cEnumerator enumerator_6945 (operand_6864->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (175)), true) ;
              const GGS_ident_map::cElement * operand_6945 = NULL ;
              while (((operand_6945 = enumerator_6945.nextObject ()))) {
                macroValidPointer (operand_6945) ;
                const GGS_bool cond_8064 = (operand_6945->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))).operator_isEqual (operand_6728->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))) ;
                if (cond_8064.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_7197 (operand_6864->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
                    const GGS_ident_map::cElement * operand_7197 = NULL ;
                    while (((operand_7197 = enumerator_7197.nextObject ()))) {
                      macroValidPointer (operand_7197) ;
                      const GGS_bool cond_7391 = (operand_7197->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))).operator_isEqual (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))) ;
                      if (cond_7391.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_7994 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_7994.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_7505 (operand_6728->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (184)), true) ;
                      const GGS_lstringlist::cElement * operand_7505 = NULL ;
                      while (((operand_7505 = enumerator_7505.nextObject ()))) {
                        macroValidPointer (operand_7505) ;
                        const GGS_bool cond_7667 = (operand_7505->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))).operator_isEqual (operand_6864->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
                        if (cond_7667.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_7930 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_7930.isBuiltAndTrue ()) {
                      operand_6728->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_6728->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190))) COMMA_SOURCE_FILE_AT_LINE (191)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_action_obj  var_cas_alarm_action ;
        var_cas_alarm_action = operand_6728->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
        { const GGS_action_obj _var_12605 = var_cas_alarm_action ; // CAST instruction
          if (_var_12605.getPtr () != NULL) {
            macroValidPointer (_var_12605.getPtr ()) ;
            if (typeid (cPtr_setevent_action) == typeid (* (_var_12605.getPtr ()))) {
              const GGS_setevent_action var_cas_sea (_var_12605.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_8371 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_8371 = NULL ;
                while (((operand_8371 = enumerator_8371.nextObject ()))) {
                  macroValidPointer (operand_8371) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_8456 (operand_8371->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), true) ;
                    const GGS_ident_map::cElement * operand_8456 = NULL ;
                    while (((operand_8456 = enumerator_8456.nextObject ()))) {
                      macroValidPointer (operand_8456) ;
                      const GGS_bool cond_9630 = (operand_8456->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))) ;
                      if (cond_9630.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_8703 (operand_8371->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (209)), true) ;
                          const GGS_ident_map::cElement * operand_8703 = NULL ;
                          while (((operand_8703 = enumerator_8703.nextObject ()))) {
                            macroValidPointer (operand_8703) ;
                            const GGS_bool cond_8909 = (operand_8703->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))).operator_isEqual (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))) ;
                            if (cond_8909.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_9552 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_9552.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_9035 (operand_6728->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (215)), true) ;
                            const GGS_lstringlist::cElement * operand_9035 = NULL ;
                            while (((operand_9035 = enumerator_9035.nextObject ()))) {
                              macroValidPointer (operand_9035) ;
                              const GGS_bool cond_9209 = (operand_9035->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))).operator_isEqual (operand_8371->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))) ;
                              if (cond_9209.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_9480 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_9480.isBuiltAndTrue ()) {
                            operand_6728->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221))) COMMA_SOURCE_FILE_AT_LINE (222)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_12605.getPtr ()))) {
              const GGS_activatetask_action var_cas_ata (_var_12605.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_9798 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_9798 = NULL ;
                while (((operand_9798 = enumerator_9798.nextObject ()))) {
                  macroValidPointer (operand_9798) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_9883 (operand_9798->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (232)), true) ;
                    const GGS_ident_map::cElement * operand_9883 = NULL ;
                    while (((operand_9883 = enumerator_9883.nextObject ()))) {
                      macroValidPointer (operand_9883) ;
                      const GGS_bool cond_11057 = (operand_9883->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (233)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
                      if (cond_11057.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_10130 (operand_9798->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (235)), true) ;
                          const GGS_ident_map::cElement * operand_10130 = NULL ;
                          while (((operand_10130 = enumerator_10130.nextObject ()))) {
                            macroValidPointer (operand_10130) ;
                            const GGS_bool cond_10336 = (operand_10130->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))).operator_isEqual (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))) ;
                            if (cond_10336.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_10979 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_10979.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_10462 (operand_6728->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (241)), true) ;
                            const GGS_lstringlist::cElement * operand_10462 = NULL ;
                            while (((operand_10462 = enumerator_10462.nextObject ()))) {
                              macroValidPointer (operand_10462) ;
                              const GGS_bool cond_10636 = (operand_10462->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))).operator_isEqual (operand_9798->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))) ;
                              if (cond_10636.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_10907 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_10907.isBuiltAndTrue ()) {
                            operand_6728->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (247)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247))) COMMA_SOURCE_FILE_AT_LINE (248)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_12605.getPtr ()))) {
              const GGS_incrementcounter_action var_cas_ica (_var_12605.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_11240 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_11240 = NULL ;
                while (((operand_11240 = enumerator_11240.nextObject ()))) {
                  macroValidPointer (operand_11240) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_11325 (operand_11240->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (258)), true) ;
                    const GGS_ident_map::cElement * operand_11325 = NULL ;
                    while (((operand_11325 = enumerator_11325.nextObject ()))) {
                      macroValidPointer (operand_11325) ;
                      const GGS_bool cond_12520 = (operand_11325->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_isEqual (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
                      if (cond_12520.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_11587 (operand_11240->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (261)), true) ;
                          const GGS_ident_map::cElement * operand_11587 = NULL ;
                          while (((operand_11587 = enumerator_11587.nextObject ()))) {
                            macroValidPointer (operand_11587) ;
                            const GGS_bool cond_11793 = (operand_11587->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))).operator_isEqual (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))) ;
                            if (cond_11793.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_12442 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_12442.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_11919 (operand_6728->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (267)), true) ;
                            const GGS_lstringlist::cElement * operand_11919 = NULL ;
                            while (((operand_11919 = enumerator_11919.nextObject ()))) {
                              macroValidPointer (operand_11919) ;
                              const GGS_bool cond_12093 = (operand_11919->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))).operator_isEqual (operand_11240->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))) ;
                              if (cond_12093.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_12370 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_12370.isBuiltAndTrue ()) {
                            operand_6728->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273))) COMMA_SOURCE_FILE_AT_LINE (274)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_12664 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_12664 = NULL ;
      while (((operand_12664 = enumerator_12664.nextObject ()))) {
        macroValidPointer (operand_12664) ;
        {
          GGS_app_map::cEnumerator enumerator_12808 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_12808 = NULL ;
          while (((operand_12808 = enumerator_12808.nextObject ()))) {
            macroValidPointer (operand_12808) ;
            {
              GGS_ident_map::cEnumerator enumerator_12889 (operand_12808->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (288)), true) ;
              const GGS_ident_map::cElement * operand_12889 = NULL ;
              while (((operand_12889 = enumerator_12889.nextObject ()))) {
                macroValidPointer (operand_12889) ;
                const GGS_bool cond_14040 = (operand_12889->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_isEqual (operand_12664->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (289)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))) ;
                if (cond_14040.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_13145 (operand_12808->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (291)), true) ;
                    const GGS_ident_map::cElement * operand_13145 = NULL ;
                    while (((operand_13145 = enumerator_13145.nextObject ()))) {
                      macroValidPointer (operand_13145) ;
                      const GGS_bool cond_13346 = (operand_13145->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isEqual (operand_12664->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))) ;
                      if (cond_13346.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_13970 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_13970.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_13460 (operand_12664->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (297)), true) ;
                      const GGS_lstringlist::cElement * operand_13460 = NULL ;
                      while (((operand_13460 = enumerator_13460.nextObject ()))) {
                        macroValidPointer (operand_13460) ;
                        const GGS_bool cond_13622 = (operand_13460->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))).operator_isEqual (operand_12808->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))) ;
                        if (cond_13622.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_13906 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_13906.isBuiltAndTrue ()) {
                      operand_12664->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_12664->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (303)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12664->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303))) COMMA_SOURCE_FILE_AT_LINE (304)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_expiry_point_list  var_cas_eps = operand_12664->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (313)) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_14215 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_14215 = NULL ;
          while (((operand_14215 = enumerator_14215.nextObject ()))) {
            macroValidPointer (operand_14215) ;
            GGS_action_list  var_cas_eps_action ;
            var_cas_eps_action = operand_14215->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (319)) ;
            {
              GGS_action_list::cEnumerator enumerator_14455 (var_cas_eps_action, true) ;
              const GGS_action_list::cElement * operand_14455 = NULL ;
              while (((operand_14455 = enumerator_14455.nextObject ()))) {
                macroValidPointer (operand_14455) ;
                { const GGS_action_obj _var_17603 = operand_14455->action ; // CAST instruction
                  if (_var_17603.getPtr () != NULL) {
                    macroValidPointer (_var_17603.getPtr ()) ;
                    if (typeid (cPtr_setevent_action) == typeid (* (_var_17603.getPtr ()))) {
                      const GGS_setevent_action var_cas_sea (_var_17603.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_14641 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_14641 = NULL ;
                        while (((operand_14641 = enumerator_14641.nextObject ()))) {
                          macroValidPointer (operand_14641) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_14728 (operand_14641->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (325)), true) ;
                            const GGS_ident_map::cElement * operand_14728 = NULL ;
                            while (((operand_14728 = enumerator_14728.nextObject ()))) {
                              macroValidPointer (operand_14728) ;
                              const GGS_bool cond_15972 = (operand_14728->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (326)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326))) ;
                              if (cond_15972.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_14990 (operand_14641->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (328)), true) ;
                                  const GGS_ident_map::cElement * operand_14990 = NULL ;
                                  while (((operand_14990 = enumerator_14990.nextObject ()))) {
                                    macroValidPointer (operand_14990) ;
                                    const GGS_bool cond_15209 = (operand_14990->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))).operator_isEqual (operand_12664->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))) ;
                                    if (cond_15209.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_15890 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_15890.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_15346 (operand_12664->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (334)), true) ;
                                    const GGS_lstringlist::cElement * operand_15346 = NULL ;
                                    while (((operand_15346 = enumerator_15346.nextObject ()))) {
                                      macroValidPointer (operand_15346) ;
                                      const GGS_bool cond_15526 = (operand_15346->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))).operator_isEqual (operand_14641->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))) ;
                                      if (cond_15526.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_15814 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_15814.isBuiltAndTrue ()) {
                                    operand_12664->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (340)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12664->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340))) COMMA_SOURCE_FILE_AT_LINE (341)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17603.getPtr ()))) {
                      const GGS_activatetask_action var_cas_ata (_var_17603.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_16156 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_16156 = NULL ;
                        while (((operand_16156 = enumerator_16156.nextObject ()))) {
                          macroValidPointer (operand_16156) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_16243 (operand_16156->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (351)), true) ;
                            const GGS_ident_map::cElement * operand_16243 = NULL ;
                            while (((operand_16243 = enumerator_16243.nextObject ()))) {
                              macroValidPointer (operand_16243) ;
                              const GGS_bool cond_17509 = (operand_16243->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))) ;
                              if (cond_17509.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_16505 (operand_16156->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (354)), true) ;
                                  const GGS_ident_map::cElement * operand_16505 = NULL ;
                                  while (((operand_16505 = enumerator_16505.nextObject ()))) {
                                    macroValidPointer (operand_16505) ;
                                    const GGS_bool cond_16724 = (operand_16505->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))).operator_isEqual (operand_12664->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))) ;
                                    if (cond_16724.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_17427 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_17427.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_16861 (operand_12664->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (360)), true) ;
                                    const GGS_lstringlist::cElement * operand_16861 = NULL ;
                                    while (((operand_16861 = enumerator_16861.nextObject ()))) {
                                      macroValidPointer (operand_16861) ;
                                      const GGS_bool cond_17041 = (operand_16861->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))).operator_isEqual (operand_16156->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))) ;
                                      if (cond_17041.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_17351 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_17351.isBuiltAndTrue ()) {
                                    operand_12664->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (366)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12664->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366))) COMMA_SOURCE_FILE_AT_LINE (367)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_apps_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

