//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_app_verif.cpp'                          *
//                        Generated by version 2.0.1                         *
//                     november 17th, 2010, at 11h28'9"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 837
  #error "This file has been compiled with a version of GALGAS that uses libpm version 837, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_app_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_exists"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_exists (C_Compiler & inLexique,
                                GGS_stringset   var_cas_def,
                                GGS_lstringlist   var_cas_ref,
                                GGS_string  var_cas_obj_type
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_exists at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_496 (var_cas_ref, true) ;
    const GGS_lstringlist::cElement * operand_496 = NULL ;
    while (((operand_496 = enumerator_496.nextObject ()))) {
      macroValidPointer (operand_496) ;
      const GGS_bool cond_632 = (var_cas_def.reader_hasKey (operand_496->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)))).operator_not () ;
      if (cond_632.isBuiltAndTrue ()) {
        operand_496->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_type).operator_concat (GGS_string (" "))).operator_concat (operand_496->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (18)))).operator_concat (GGS_string (" referenced does not exist")) COMMA_SOURCE_FILE_AT_LINE (19)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_exists\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_in_one"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_in_one (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_objects,
                                GGS_lstring   var_cas_sName,
                                GGS_string  var_cas_kind
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_in_one at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_808 (var_cas_objects, true) ;
    const GGS_lstringlist::cElement * operand_808 = NULL ;
    while (((operand_808 = enumerator_808.nextObject ()))) {
      macroValidPointer (operand_808) ;
      const GGS_bool cond_1075 = (operand_808->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31))).operator_isEqual (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (31))) ;
      if (cond_1075.isBuiltAndTrue ()) {
        var_cas_not_found = GGS_bool (false) ;
        var_cas_sName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (33)))).operator_concat (GGS_string (" is already part of an OS Application")) COMMA_SOURCE_FILE_AT_LINE (34)) ;
        operand_808->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("It has been declared here") COMMA_SOURCE_FILE_AT_LINE (35)) ;
      }
    }
  }
  const GGS_bool cond_1147 = var_cas_not_found ;
  if (cond_1147.isBuiltAndTrue ()) {
    var_cas_objects.addAssign_operation (var_cas_sName) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_in_one\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "object_not_in_any"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_not_in_any (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_objs,
                                GGS_stringset   var_cas_app_objs,
                                GGS_string  var_cas_obj_kind
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_not_in_any at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_1281 (var_cas_objs, true) ;
    const GGS_lstringlist::cElement * operand_1281 = NULL ;
    while (((operand_1281 = enumerator_1281.nextObject ()))) {
      macroValidPointer (operand_1281) ;
      GGS_string var_cas_name = operand_1281->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
      const GGS_bool cond_1467 = (var_cas_app_objs.reader_hasKey (var_cas_name)).operator_not () ;
      if (cond_1467.isBuiltAndTrue ()) {
        operand_1281->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_name)).operator_concat (GGS_string (" does not belong to any OS Application")) COMMA_SOURCE_FILE_AT_LINE (52)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_not_in_any\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "apps_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_apps_well_formed (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_apps_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_app_map  var_cas_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_alarm_map  var_cas_alarms = var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_scheduletable_map  var_cas_schedtables = var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  GGS_message_map  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
  GGS_uint64  var_cas_sc ;
  GGS_bool automatic_var_2257_0 ;
  GGS_bool automatic_var_2257_1 ;
  ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  automatic_var_2257_0,  automatic_var_2257_1 COMMA_SOURCE_FILE_AT_LINE (77)) ;
  const GGS_bool cond_17837 = (var_cas_sc).operator_strictSup (GGS_uint64 (2ULL)) ;
  if (cond_17837.isBuiltAndTrue ()) {
    {
      GGS_app_map::cEnumerator enumerator_2358 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2358 = NULL ;
      while (((operand_2358 = enumerator_2358.nextObject ()))) {
        macroValidPointer (operand_2358) ;
        ::routine_object_exists (inLexique,  var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  operand_2358->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (82)) ;
        ::routine_object_exists (inLexique,  var_cas_isrs.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  operand_2358->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (83)) ;
        ::routine_object_exists (inLexique,  var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (84)),  operand_2358->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (84)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (84)),  GGS_string ("Alarm") COMMA_SOURCE_FILE_AT_LINE (84)) ;
        ::routine_object_exists (inLexique,  var_cas_schedtables.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (85)),  operand_2358->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (85)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (85)),  GGS_string ("Schedule Table") COMMA_SOURCE_FILE_AT_LINE (85)) ;
        ::routine_object_exists (inLexique,  var_cas_counters.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (86)),  operand_2358->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (86)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (86)),  GGS_string ("Counter") COMMA_SOURCE_FILE_AT_LINE (86)) ;
        ::routine_object_exists (inLexique,  var_cas_resources.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (87)),  operand_2358->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (87)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (87)),  GGS_string ("Resource") COMMA_SOURCE_FILE_AT_LINE (87)) ;
      }
    }
    GGS_stringset  var_cas_all_apps = var_cas_apps.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ;
    {
      GGS_task_map::cEnumerator enumerator_3067 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_3067 = NULL ;
      while (((operand_3067 = enumerator_3067.nextObject ()))) {
        macroValidPointer (operand_3067) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3067->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (94)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (94)) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3169 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_3169 = NULL ;
      while (((operand_3169 = enumerator_3169.nextObject ()))) {
        macroValidPointer (operand_3169) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3169->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (97)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (97)) ;
      }
    }
    {
      GGS_alarm_map::cEnumerator enumerator_3272 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_3272 = NULL ;
      while (((operand_3272 = enumerator_3272.nextObject ()))) {
        macroValidPointer (operand_3272) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3272->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (100)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (100)) ;
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_3382 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_3382 = NULL ;
      while (((operand_3382 = enumerator_3382.nextObject ()))) {
        macroValidPointer (operand_3382) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3382->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (103)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (103)) ;
      }
    }
    {
      GGS_counter_map::cEnumerator enumerator_3497 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_3497 = NULL ;
      while (((operand_3497 = enumerator_3497.nextObject ()))) {
        macroValidPointer (operand_3497) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3497->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (106)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (106)) ;
      }
    }
    {
      GGS_resource_map::cEnumerator enumerator_3607 (var_cas_resources, true) ;
      const GGS_resource_map::cElement * operand_3607 = NULL ;
      while (((operand_3607 = enumerator_3607.nextObject ()))) {
        macroValidPointer (operand_3607) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3607->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (109)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (109)) ;
      }
    }
    {
      GGS_message_map::cEnumerator enumerator_3717 (var_cas_messages, true) ;
      const GGS_message_map::cElement * operand_3717 = NULL ;
      while (((operand_3717 = enumerator_3717.nextObject ()))) {
        macroValidPointer (operand_3717) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3717->mInfo.mess.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (112)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (112)) ;
      }
    }
    GGS_lstringlist  var_cas_objects = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_app_map::cEnumerator enumerator_3909 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_3909 = NULL ;
      while (((operand_3909 = enumerator_3909.nextObject ()))) {
        macroValidPointer (operand_3909) ;
        {
          GGS_ident_map::cEnumerator enumerator_3928 (operand_3909->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
          const GGS_ident_map::cElement * operand_3928 = NULL ;
          while (((operand_3928 = enumerator_3928.nextObject ()))) {
            macroValidPointer (operand_3928) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3928->mKey,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4011 (operand_3909->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), true) ;
          const GGS_ident_map::cElement * operand_4011 = NULL ;
          while (((operand_4011 = enumerator_4011.nextObject ()))) {
            macroValidPointer (operand_4011) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4011->mKey,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (119)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4092 (operand_3909->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (120)), true) ;
          const GGS_ident_map::cElement * operand_4092 = NULL ;
          while (((operand_4092 = enumerator_4092.nextObject ()))) {
            macroValidPointer (operand_4092) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4092->mKey,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (120)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4177 (operand_3909->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (121)), true) ;
          const GGS_ident_map::cElement * operand_4177 = NULL ;
          while (((operand_4177 = enumerator_4177.nextObject ()))) {
            macroValidPointer (operand_4177) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4177->mKey,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (121)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4278 (operand_3909->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (122)), true) ;
          const GGS_ident_map::cElement * operand_4278 = NULL ;
          while (((operand_4278 = enumerator_4278.nextObject ()))) {
            macroValidPointer (operand_4278) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4278->mKey,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (122)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4367 (operand_3909->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), true) ;
          const GGS_ident_map::cElement * operand_4367 = NULL ;
          while (((operand_4367 = enumerator_4367.nextObject ()))) {
            macroValidPointer (operand_4367) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4367->mKey,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (123)) ;
          }
        }
      }
    }
    GGS_stringset  var_cas_all_tasks_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_isrs_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_alarms_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_sts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_cnts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_rezs_in_app = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_app_map::cEnumerator enumerator_4884 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_4884 = NULL ;
      while (((operand_4884 = enumerator_4884.nextObject ()))) {
        macroValidPointer (operand_4884) ;
        var_cas_all_tasks_in_app = (var_cas_all_tasks_in_app).operator_or (operand_4884->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
        var_cas_all_isrs_in_app = (var_cas_all_isrs_in_app).operator_or (operand_4884->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
        var_cas_all_alarms_in_app = (var_cas_all_alarms_in_app).operator_or (operand_4884->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (138))) ;
        var_cas_all_sts_in_app = (var_cas_all_sts_in_app).operator_or (operand_4884->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (139)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (139))) ;
        var_cas_all_cnts_in_app = (var_cas_all_cnts_in_app).operator_or (operand_4884->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (140)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (140))) ;
        var_cas_all_rezs_in_app = (var_cas_all_rezs_in_app).operator_or (operand_4884->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (141)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (141))) ;
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_tasks.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_all_tasks_in_app,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (145)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_isrs.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (147)),  var_cas_all_isrs_in_app,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (147)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_alarms.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (149)),  var_cas_all_alarms_in_app,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (149)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_schedtables.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (151)),  var_cas_all_sts_in_app,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (151)) ;
    GGS_lstringlist  var_cas_counter_keys = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_counter_map::cEnumerator enumerator_5904 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_5904 = NULL ;
      while (((operand_5904 = enumerator_5904.nextObject ()))) {
        macroValidPointer (operand_5904) ;
        const GGS_bool cond_5995 = (operand_5904->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
        if (cond_5995.isBuiltAndTrue ()) {
          var_cas_counter_keys.addAssign_operation (operand_5904->mKey) ;
        }
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_counter_keys,  var_cas_all_cnts_in_app,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (160)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_resources.reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (162)),  var_cas_all_rezs_in_app,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (162)) ;
    {
      GGS_app_map::cEnumerator enumerator_6284 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_6284 = NULL ;
      while (((operand_6284 = enumerator_6284.nextObject ()))) {
        macroValidPointer (operand_6284) ;
        const GGS_bool cond_6631 = ((operand_6284->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_6284->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_length ()).operator_isEqual (GGS_uint (0U))) ;
        if (cond_6631.isBuiltAndTrue ()) {
          operand_6284->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS445 - An application should have at least one Task OR ISR2.") COMMA_SOURCE_FILE_AT_LINE (169)) ;
        }
      }
    }
    GGS_bool var_cas_right_app = GGS_bool (false) ;
    GGS_bool var_cas_access_app = GGS_bool (false) ;
    {
      GGS_alarm_map::cEnumerator enumerator_6866 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_6866 = NULL ;
      while (((operand_6866 = enumerator_6866.nextObject ()))) {
        macroValidPointer (operand_6866) ;
        {
          GGS_app_map::cEnumerator enumerator_7002 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_7002 = NULL ;
          while (((operand_7002 = enumerator_7002.nextObject ()))) {
            macroValidPointer (operand_7002) ;
            {
              GGS_ident_map::cEnumerator enumerator_7083 (operand_7002->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (179)), true) ;
              const GGS_ident_map::cElement * operand_7083 = NULL ;
              while (((operand_7083 = enumerator_7083.nextObject ()))) {
                macroValidPointer (operand_7083) ;
                const GGS_bool cond_8202 = (operand_7083->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180))).operator_isEqual (operand_6866->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
                if (cond_8202.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_7335 (operand_7002->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (182)), true) ;
                    const GGS_ident_map::cElement * operand_7335 = NULL ;
                    while (((operand_7335 = enumerator_7335.nextObject ()))) {
                      macroValidPointer (operand_7335) ;
                      const GGS_bool cond_7529 = (operand_7335->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183))).operator_isEqual (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (183))) ;
                      if (cond_7529.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_8132 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_8132.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_7643 (operand_6866->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (188)), true) ;
                      const GGS_lstringlist::cElement * operand_7643 = NULL ;
                      while (((operand_7643 = enumerator_7643.nextObject ()))) {
                        macroValidPointer (operand_7643) ;
                        const GGS_bool cond_7805 = (operand_7643->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))).operator_isEqual (operand_7002->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
                        if (cond_7805.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_8068 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_8068.isBuiltAndTrue ()) {
                      operand_6866->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_6866->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (194)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (194))) COMMA_SOURCE_FILE_AT_LINE (195)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_action_obj  var_cas_alarm_action ;
        var_cas_alarm_action = operand_6866->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) ;
        { const GGS_action_obj _var_12743 = var_cas_alarm_action ; // CAST instruction
          if (_var_12743.getPtr () != NULL) {
            macroValidPointer (_var_12743.getPtr ()) ;
            if (typeid (cPtr_setevent_action) == typeid (* (_var_12743.getPtr ()))) {
              const GGS_setevent_action var_cas_sea (_var_12743.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_8509 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_8509 = NULL ;
                while (((operand_8509 = enumerator_8509.nextObject ()))) {
                  macroValidPointer (operand_8509) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_8594 (operand_8509->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (210)), true) ;
                    const GGS_ident_map::cElement * operand_8594 = NULL ;
                    while (((operand_8594 = enumerator_8594.nextObject ()))) {
                      macroValidPointer (operand_8594) ;
                      const GGS_bool cond_9768 = (operand_8594->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (211)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211))) ;
                      if (cond_9768.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_8841 (operand_8509->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (213)), true) ;
                          const GGS_ident_map::cElement * operand_8841 = NULL ;
                          while (((operand_8841 = enumerator_8841.nextObject ()))) {
                            macroValidPointer (operand_8841) ;
                            const GGS_bool cond_9047 = (operand_8841->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214))).operator_isEqual (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
                            if (cond_9047.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_9690 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_9690.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_9173 (operand_6866->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (219)), true) ;
                            const GGS_lstringlist::cElement * operand_9173 = NULL ;
                            while (((operand_9173 = enumerator_9173.nextObject ()))) {
                              macroValidPointer (operand_9173) ;
                              const GGS_bool cond_9347 = (operand_9173->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (220))).operator_isEqual (operand_8509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (220))) ;
                              if (cond_9347.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_9618 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_9618.isBuiltAndTrue ()) {
                            operand_6866->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (225)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225))) COMMA_SOURCE_FILE_AT_LINE (226)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_12743.getPtr ()))) {
              const GGS_activatetask_action var_cas_ata (_var_12743.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_9936 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_9936 = NULL ;
                while (((operand_9936 = enumerator_9936.nextObject ()))) {
                  macroValidPointer (operand_9936) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_10021 (operand_9936->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (236)), true) ;
                    const GGS_ident_map::cElement * operand_10021 = NULL ;
                    while (((operand_10021 = enumerator_10021.nextObject ()))) {
                      macroValidPointer (operand_10021) ;
                      const GGS_bool cond_11195 = (operand_10021->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (237)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (237))) ;
                      if (cond_11195.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_10268 (operand_9936->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), true) ;
                          const GGS_ident_map::cElement * operand_10268 = NULL ;
                          while (((operand_10268 = enumerator_10268.nextObject ()))) {
                            macroValidPointer (operand_10268) ;
                            const GGS_bool cond_10474 = (operand_10268->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (240))).operator_isEqual (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (240))) ;
                            if (cond_10474.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_11117 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_11117.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_10600 (operand_6866->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (245)), true) ;
                            const GGS_lstringlist::cElement * operand_10600 = NULL ;
                            while (((operand_10600 = enumerator_10600.nextObject ()))) {
                              macroValidPointer (operand_10600) ;
                              const GGS_bool cond_10774 = (operand_10600->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))).operator_isEqual (operand_9936->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (246))) ;
                              if (cond_10774.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_11045 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_11045.isBuiltAndTrue ()) {
                            operand_6866->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (251)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (251))) COMMA_SOURCE_FILE_AT_LINE (252)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_12743.getPtr ()))) {
              const GGS_incrementcounter_action var_cas_ica (_var_12743.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_11378 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_11378 = NULL ;
                while (((operand_11378 = enumerator_11378.nextObject ()))) {
                  macroValidPointer (operand_11378) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_11463 (operand_11378->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (262)), true) ;
                    const GGS_ident_map::cElement * operand_11463 = NULL ;
                    while (((operand_11463 = enumerator_11463.nextObject ()))) {
                      macroValidPointer (operand_11463) ;
                      const GGS_bool cond_12658 = (operand_11463->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263))).operator_isEqual (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (263))) ;
                      if (cond_12658.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_11725 (operand_11378->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (265)), true) ;
                          const GGS_ident_map::cElement * operand_11725 = NULL ;
                          while (((operand_11725 = enumerator_11725.nextObject ()))) {
                            macroValidPointer (operand_11725) ;
                            const GGS_bool cond_11931 = (operand_11725->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))).operator_isEqual (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266))) ;
                            if (cond_11931.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_12580 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_12580.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_12057 (operand_6866->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (271)), true) ;
                            const GGS_lstringlist::cElement * operand_12057 = NULL ;
                            while (((operand_12057 = enumerator_12057.nextObject ()))) {
                              macroValidPointer (operand_12057) ;
                              const GGS_bool cond_12231 = (operand_12057->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))).operator_isEqual (operand_11378->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
                              if (cond_12231.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_12508 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_12508.isBuiltAndTrue ()) {
                            operand_6866->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (277)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (277)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6866->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (277))) COMMA_SOURCE_FILE_AT_LINE (278)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_12802 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_12802 = NULL ;
      while (((operand_12802 = enumerator_12802.nextObject ()))) {
        macroValidPointer (operand_12802) ;
        {
          GGS_app_map::cEnumerator enumerator_12946 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_12946 = NULL ;
          while (((operand_12946 = enumerator_12946.nextObject ()))) {
            macroValidPointer (operand_12946) ;
            {
              GGS_ident_map::cEnumerator enumerator_13027 (operand_12946->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (292)), true) ;
              const GGS_ident_map::cElement * operand_13027 = NULL ;
              while (((operand_13027 = enumerator_13027.nextObject ()))) {
                macroValidPointer (operand_13027) ;
                const GGS_bool cond_14178 = (operand_13027->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))).operator_isEqual (operand_12802->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (293)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))) ;
                if (cond_14178.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_13283 (operand_12946->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (295)), true) ;
                    const GGS_ident_map::cElement * operand_13283 = NULL ;
                    while (((operand_13283 = enumerator_13283.nextObject ()))) {
                      macroValidPointer (operand_13283) ;
                      const GGS_bool cond_13484 = (operand_13283->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296))).operator_isEqual (operand_12802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296))) ;
                      if (cond_13484.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_14108 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_14108.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_13598 (operand_12802->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (301)), true) ;
                      const GGS_lstringlist::cElement * operand_13598 = NULL ;
                      while (((operand_13598 = enumerator_13598.nextObject ()))) {
                        macroValidPointer (operand_13598) ;
                        const GGS_bool cond_13760 = (operand_13598->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (302))).operator_isEqual (operand_12946->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (302))) ;
                        if (cond_13760.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_14044 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_14044.isBuiltAndTrue ()) {
                      operand_12802->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_12802->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (307)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) COMMA_SOURCE_FILE_AT_LINE (308)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_expiry_point_list  var_cas_eps = operand_12802->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (317)) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_14353 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_14353 = NULL ;
          while (((operand_14353 = enumerator_14353.nextObject ()))) {
            macroValidPointer (operand_14353) ;
            GGS_action_list  var_cas_eps_action ;
            var_cas_eps_action = operand_14353->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (323)) ;
            {
              GGS_action_list::cEnumerator enumerator_14593 (var_cas_eps_action, true) ;
              const GGS_action_list::cElement * operand_14593 = NULL ;
              while (((operand_14593 = enumerator_14593.nextObject ()))) {
                macroValidPointer (operand_14593) ;
                { const GGS_action_obj _var_17747 = operand_14593->actionobj ; // CAST instruction
                  if (_var_17747.getPtr () != NULL) {
                    macroValidPointer (_var_17747.getPtr ()) ;
                    if (typeid (cPtr_setevent_action) == typeid (* (_var_17747.getPtr ()))) {
                      const GGS_setevent_action var_cas_sea (_var_17747.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_14785 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_14785 = NULL ;
                        while (((operand_14785 = enumerator_14785.nextObject ()))) {
                          macroValidPointer (operand_14785) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_14872 (operand_14785->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (329)), true) ;
                            const GGS_ident_map::cElement * operand_14872 = NULL ;
                            while (((operand_14872 = enumerator_14872.nextObject ()))) {
                              macroValidPointer (operand_14872) ;
                              const GGS_bool cond_16116 = (operand_14872->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (330)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330))) ;
                              if (cond_16116.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_15134 (operand_14785->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (332)), true) ;
                                  const GGS_ident_map::cElement * operand_15134 = NULL ;
                                  while (((operand_15134 = enumerator_15134.nextObject ()))) {
                                    macroValidPointer (operand_15134) ;
                                    const GGS_bool cond_15353 = (operand_15134->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333))).operator_isEqual (operand_12802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
                                    if (cond_15353.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_16034 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_16034.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_15490 (operand_12802->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (338)), true) ;
                                    const GGS_lstringlist::cElement * operand_15490 = NULL ;
                                    while (((operand_15490 = enumerator_15490.nextObject ()))) {
                                      macroValidPointer (operand_15490) ;
                                      const GGS_bool cond_15670 = (operand_15490->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (339))).operator_isEqual (operand_14785->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (339))) ;
                                      if (cond_15670.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_15958 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_15958.isBuiltAndTrue ()) {
                                    operand_12802->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (344)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (344))) COMMA_SOURCE_FILE_AT_LINE (345)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17747.getPtr ()))) {
                      const GGS_activatetask_action var_cas_ata (_var_17747.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_16300 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_16300 = NULL ;
                        while (((operand_16300 = enumerator_16300.nextObject ()))) {
                          macroValidPointer (operand_16300) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_16387 (operand_16300->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (355)), true) ;
                            const GGS_ident_map::cElement * operand_16387 = NULL ;
                            while (((operand_16387 = enumerator_16387.nextObject ()))) {
                              macroValidPointer (operand_16387) ;
                              const GGS_bool cond_17653 = (operand_16387->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (356)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356))) ;
                              if (cond_17653.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_16649 (operand_16300->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (358)), true) ;
                                  const GGS_ident_map::cElement * operand_16649 = NULL ;
                                  while (((operand_16649 = enumerator_16649.nextObject ()))) {
                                    macroValidPointer (operand_16649) ;
                                    const GGS_bool cond_16868 = (operand_16649->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (359))).operator_isEqual (operand_12802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (359))) ;
                                    if (cond_16868.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_17571 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_17571.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_17005 (operand_12802->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (364)), true) ;
                                    const GGS_lstringlist::cElement * operand_17005 = NULL ;
                                    while (((operand_17005 = enumerator_17005.nextObject ()))) {
                                      macroValidPointer (operand_17005) ;
                                      const GGS_bool cond_17185 = (operand_17005->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (365))).operator_isEqual (operand_16300->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (365))) ;
                                      if (cond_17185.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_17495 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_17495.isBuiltAndTrue ()) {
                                    operand_12802->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (370)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (370)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12802->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (370))) COMMA_SOURCE_FILE_AT_LINE (371)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_apps_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

