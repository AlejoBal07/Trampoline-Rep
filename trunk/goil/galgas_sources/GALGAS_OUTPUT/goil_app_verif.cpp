//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_app_verif.cpp'                          *
//                        Generated by version 1.9.7                         *
//                     december 17th, 2009, at 9h52'48"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 629
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_app_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_verif.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_exists"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_exists (C_Compiler & inLexique,
                                GGS_stringset   var_cas_def,
                                GGS_lstringlist   var_cas_ref,
                                GGS_string  var_cas_obj_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_exists at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_452 (var_cas_ref, true) ;
    const GGS_lstringlist::cElement * operand_452 = NULL ;
    while (((operand_452 = enumerator_452.nextObject ()))) {
      macroValidPointer (operand_452) ;
      const GGS_bool cond_588 = (var_cas_def.reader_hasKey (operand_452->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (16)))).operator_not () ;
      if (cond_588.isBuiltAndTrue ()) {
        operand_452->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_type).operator_concat (GGS_string (" "))).operator_concat (operand_452->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)))).operator_concat (GGS_string (" referenced does not exist")) COMMA_SOURCE_FILE_AT_LINE (18)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_exists\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_in_one"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_in_one (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_objects,
                                GGS_lstring   var_cas_sName,
                                GGS_string  var_cas_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_in_one at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_764 (var_cas_objects, true) ;
    const GGS_lstringlist::cElement * operand_764 = NULL ;
    while (((operand_764 = enumerator_764.nextObject ()))) {
      macroValidPointer (operand_764) ;
      const GGS_bool cond_1031 = (operand_764->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))).operator_isEqual (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))) ;
      if (cond_1031.isBuiltAndTrue ()) {
        var_cas_not_found = GGS_bool (false) ;
        var_cas_sName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (32)))).operator_concat (GGS_string (" is already part of an OS Application")) COMMA_SOURCE_FILE_AT_LINE (33)) ;
        operand_764->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("It has been declared here") COMMA_SOURCE_FILE_AT_LINE (34)) ;
      }
    }
  }
  const GGS_bool cond_1103 = var_cas_not_found ;
  if (cond_1103.isBuiltAndTrue ()) {
    var_cas_objects.addAssign_operation (var_cas_sName) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_in_one\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "object_not_in_any"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_not_in_any (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_objs,
                                GGS_stringset   var_cas_app_objs,
                                GGS_string  var_cas_obj_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_not_in_any at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_1237 (var_cas_objs, true) ;
    const GGS_lstringlist::cElement * operand_1237 = NULL ;
    while (((operand_1237 = enumerator_1237.nextObject ()))) {
      macroValidPointer (operand_1237) ;
      GGS_string var_cas_name = operand_1237->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
      const GGS_bool cond_1423 = (var_cas_app_objs.reader_hasKey (var_cas_name)).operator_not () ;
      if (cond_1423.isBuiltAndTrue ()) {
        operand_1237->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_name)).operator_concat (GGS_string (" does not belong to any OS Application")) COMMA_SOURCE_FILE_AT_LINE (51)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_not_in_any\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "apps_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_apps_well_formed (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_apps_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_app_map  var_cas_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_alarm_map  var_cas_alarms = var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_scheduletable_map  var_cas_schedtables = var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_message_map  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  const GGS_bool cond_17649 = (var_cas_apps.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17649.isBuiltAndTrue ()) {
    {
      GGS_app_map::cEnumerator enumerator_2271 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2271 = NULL ;
      while (((operand_2271 = enumerator_2271.nextObject ()))) {
        macroValidPointer (operand_2271) ;
        ::routine_object_exists (inLexique,  var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  operand_2271->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (78)) ;
        ::routine_object_exists (inLexique,  var_cas_isrs.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  operand_2271->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (79)) ;
        ::routine_object_exists (inLexique,  var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  operand_2271->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  GGS_string ("Alarm") COMMA_SOURCE_FILE_AT_LINE (80)) ;
        ::routine_object_exists (inLexique,  var_cas_schedtables.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  operand_2271->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  GGS_string ("Schedule Table") COMMA_SOURCE_FILE_AT_LINE (81)) ;
        ::routine_object_exists (inLexique,  var_cas_counters.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  operand_2271->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  GGS_string ("Counter") COMMA_SOURCE_FILE_AT_LINE (82)) ;
        ::routine_object_exists (inLexique,  var_cas_resources.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  operand_2271->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  GGS_string ("Resource") COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
    }
    GGS_stringset  var_cas_all_apps = var_cas_apps.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
    {
      GGS_task_map::cEnumerator enumerator_2958 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_2958 = NULL ;
      while (((operand_2958 = enumerator_2958.nextObject ()))) {
        macroValidPointer (operand_2958) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_2958->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (90)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3060 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_3060 = NULL ;
      while (((operand_3060 = enumerator_3060.nextObject ()))) {
        macroValidPointer (operand_3060) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3060->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (93)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
    }
    {
      GGS_alarm_map::cEnumerator enumerator_3163 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_3163 = NULL ;
      while (((operand_3163 = enumerator_3163.nextObject ()))) {
        macroValidPointer (operand_3163) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3163->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_3273 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_3273 = NULL ;
      while (((operand_3273 = enumerator_3273.nextObject ()))) {
        macroValidPointer (operand_3273) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3273->mInfo.st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (99)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
    }
    {
      GGS_counter_map::cEnumerator enumerator_3377 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_3377 = NULL ;
      while (((operand_3377 = enumerator_3377.nextObject ()))) {
        macroValidPointer (operand_3377) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3377->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (102)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (102)) ;
      }
    }
    {
      GGS_resource_map::cEnumerator enumerator_3487 (var_cas_resources, true) ;
      const GGS_resource_map::cElement * operand_3487 = NULL ;
      while (((operand_3487 = enumerator_3487.nextObject ()))) {
        macroValidPointer (operand_3487) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3487->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (105)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
    }
    {
      GGS_message_map::cEnumerator enumerator_3597 (var_cas_messages, true) ;
      const GGS_message_map::cElement * operand_3597 = NULL ;
      while (((operand_3597 = enumerator_3597.nextObject ()))) {
        macroValidPointer (operand_3597) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3597->mInfo.mess.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (108)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_lstringlist  var_cas_objects = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_app_map::cEnumerator enumerator_3789 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_3789 = NULL ;
      while (((operand_3789 = enumerator_3789.nextObject ()))) {
        macroValidPointer (operand_3789) ;
        {
          GGS_ident_map::cEnumerator enumerator_3808 (operand_3789->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (114)), true) ;
          const GGS_ident_map::cElement * operand_3808 = NULL ;
          while (((operand_3808 = enumerator_3808.nextObject ()))) {
            macroValidPointer (operand_3808) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3808->mKey,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (114)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3890 (operand_3789->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (115)), true) ;
          const GGS_ident_map::cElement * operand_3890 = NULL ;
          while (((operand_3890 = enumerator_3890.nextObject ()))) {
            macroValidPointer (operand_3890) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3890->mKey,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (115)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3970 (operand_3789->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
          const GGS_ident_map::cElement * operand_3970 = NULL ;
          while (((operand_3970 = enumerator_3970.nextObject ()))) {
            macroValidPointer (operand_3970) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3970->mKey,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4054 (operand_3789->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
          const GGS_ident_map::cElement * operand_4054 = NULL ;
          while (((operand_4054 = enumerator_4054.nextObject ()))) {
            macroValidPointer (operand_4054) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4054->mKey,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (117)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4151 (operand_3789->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
          const GGS_ident_map::cElement * operand_4151 = NULL ;
          while (((operand_4151 = enumerator_4151.nextObject ()))) {
            macroValidPointer (operand_4151) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4151->mKey,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4239 (operand_3789->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), true) ;
          const GGS_ident_map::cElement * operand_4239 = NULL ;
          while (((operand_4239 = enumerator_4239.nextObject ()))) {
            macroValidPointer (operand_4239) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4239->mKey,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (119)) ;
          }
        }
      }
    }
    GGS_stringset  var_cas_all_tasks_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_isrs_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_alarms_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_sts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_cnts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_rezs_in_app = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_app_map::cEnumerator enumerator_4755 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_4755 = NULL ;
      while (((operand_4755 = enumerator_4755.nextObject ()))) {
        macroValidPointer (operand_4755) ;
        var_cas_all_tasks_in_app = (var_cas_all_tasks_in_app).operator_or (operand_4755->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
        var_cas_all_isrs_in_app = (var_cas_all_isrs_in_app).operator_or (operand_4755->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
        var_cas_all_alarms_in_app = (var_cas_all_alarms_in_app).operator_or (operand_4755->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
        var_cas_all_sts_in_app = (var_cas_all_sts_in_app).operator_or (operand_4755->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
        var_cas_all_cnts_in_app = (var_cas_all_cnts_in_app).operator_or (operand_4755->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
        var_cas_all_rezs_in_app = (var_cas_all_rezs_in_app).operator_or (operand_4755->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_tasks.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (141)),  var_cas_all_tasks_in_app,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (141)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_isrs.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (143)),  var_cas_all_isrs_in_app,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (143)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_alarms.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_all_alarms_in_app,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (145)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_schedtables.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (147)),  var_cas_all_sts_in_app,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (147)) ;
    GGS_lstringlist  var_cas_counter_keys = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_counter_map::cEnumerator enumerator_5745 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_5745 = NULL ;
      while (((operand_5745 = enumerator_5745.nextObject ()))) {
        macroValidPointer (operand_5745) ;
        const GGS_bool cond_5834 = (operand_5745->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
        if (cond_5834.isBuiltAndTrue ()) {
          var_cas_counter_keys.addAssign_operation (operand_5745->mKey) ;
        }
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_counter_keys,  var_cas_all_cnts_in_app,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (156)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_resources.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (158)),  var_cas_all_rezs_in_app,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (158)) ;
    {
      GGS_app_map::cEnumerator enumerator_6120 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_6120 = NULL ;
      while (((operand_6120 = enumerator_6120.nextObject ()))) {
        macroValidPointer (operand_6120) ;
        const GGS_bool cond_6458 = ((operand_6120->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_6120->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_length ()).operator_isEqual (GGS_uint (0U))) ;
        if (cond_6458.isBuiltAndTrue ()) {
          operand_6120->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS445 - An application should have at least one Task OR ISR2.") COMMA_SOURCE_FILE_AT_LINE (165)) ;
        }
      }
    }
    GGS_bool var_cas_right_app = GGS_bool (false) ;
    GGS_bool var_cas_access_app = GGS_bool (false) ;
    {
      GGS_alarm_map::cEnumerator enumerator_6693 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_6693 = NULL ;
      while (((operand_6693 = enumerator_6693.nextObject ()))) {
        macroValidPointer (operand_6693) ;
        {
          GGS_app_map::cEnumerator enumerator_6829 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_6829 = NULL ;
          while (((operand_6829 = enumerator_6829.nextObject ()))) {
            macroValidPointer (operand_6829) ;
            {
              GGS_ident_map::cEnumerator enumerator_6910 (operand_6829->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (175)), true) ;
              const GGS_ident_map::cElement * operand_6910 = NULL ;
              while (((operand_6910 = enumerator_6910.nextObject ()))) {
                macroValidPointer (operand_6910) ;
                const GGS_bool cond_8029 = (operand_6910->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))).operator_isEqual (operand_6693->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))) ;
                if (cond_8029.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_7162 (operand_6829->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
                    const GGS_ident_map::cElement * operand_7162 = NULL ;
                    while (((operand_7162 = enumerator_7162.nextObject ()))) {
                      macroValidPointer (operand_7162) ;
                      const GGS_bool cond_7356 = (operand_7162->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))).operator_isEqual (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))) ;
                      if (cond_7356.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_7959 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_7959.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_7470 (operand_6693->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (184)), true) ;
                      const GGS_lstringlist::cElement * operand_7470 = NULL ;
                      while (((operand_7470 = enumerator_7470.nextObject ()))) {
                        macroValidPointer (operand_7470) ;
                        const GGS_bool cond_7632 = (operand_7470->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))).operator_isEqual (operand_6829->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
                        if (cond_7632.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_7895 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_7895.isBuiltAndTrue ()) {
                      operand_6693->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_6693->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190))) COMMA_SOURCE_FILE_AT_LINE (191)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_action_obj  var_cas_alarm_action ;
        var_cas_alarm_action = operand_6693->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
        { const GGS_action_obj _var_12570 = var_cas_alarm_action ; // CAST instruction
          if (_var_12570.getPtr () != NULL) {
            macroValidPointer (_var_12570.getPtr ()) ;
            if (typeid (cPtr_setevent_action) == typeid (* (_var_12570.getPtr ()))) {
              const GGS_setevent_action var_cas_sea (_var_12570.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_8336 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_8336 = NULL ;
                while (((operand_8336 = enumerator_8336.nextObject ()))) {
                  macroValidPointer (operand_8336) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_8421 (operand_8336->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), true) ;
                    const GGS_ident_map::cElement * operand_8421 = NULL ;
                    while (((operand_8421 = enumerator_8421.nextObject ()))) {
                      macroValidPointer (operand_8421) ;
                      const GGS_bool cond_9595 = (operand_8421->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))) ;
                      if (cond_9595.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_8668 (operand_8336->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (209)), true) ;
                          const GGS_ident_map::cElement * operand_8668 = NULL ;
                          while (((operand_8668 = enumerator_8668.nextObject ()))) {
                            macroValidPointer (operand_8668) ;
                            const GGS_bool cond_8874 = (operand_8668->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))).operator_isEqual (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))) ;
                            if (cond_8874.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_9517 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_9517.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_9000 (operand_6693->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (215)), true) ;
                            const GGS_lstringlist::cElement * operand_9000 = NULL ;
                            while (((operand_9000 = enumerator_9000.nextObject ()))) {
                              macroValidPointer (operand_9000) ;
                              const GGS_bool cond_9174 = (operand_9000->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))).operator_isEqual (operand_8336->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))) ;
                              if (cond_9174.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_9445 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_9445.isBuiltAndTrue ()) {
                            operand_6693->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221))) COMMA_SOURCE_FILE_AT_LINE (222)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_12570.getPtr ()))) {
              const GGS_activatetask_action var_cas_ata (_var_12570.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_9763 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_9763 = NULL ;
                while (((operand_9763 = enumerator_9763.nextObject ()))) {
                  macroValidPointer (operand_9763) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_9848 (operand_9763->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (232)), true) ;
                    const GGS_ident_map::cElement * operand_9848 = NULL ;
                    while (((operand_9848 = enumerator_9848.nextObject ()))) {
                      macroValidPointer (operand_9848) ;
                      const GGS_bool cond_11022 = (operand_9848->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (233)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
                      if (cond_11022.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_10095 (operand_9763->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (235)), true) ;
                          const GGS_ident_map::cElement * operand_10095 = NULL ;
                          while (((operand_10095 = enumerator_10095.nextObject ()))) {
                            macroValidPointer (operand_10095) ;
                            const GGS_bool cond_10301 = (operand_10095->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))).operator_isEqual (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))) ;
                            if (cond_10301.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_10944 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_10944.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_10427 (operand_6693->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (241)), true) ;
                            const GGS_lstringlist::cElement * operand_10427 = NULL ;
                            while (((operand_10427 = enumerator_10427.nextObject ()))) {
                              macroValidPointer (operand_10427) ;
                              const GGS_bool cond_10601 = (operand_10427->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))).operator_isEqual (operand_9763->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))) ;
                              if (cond_10601.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_10872 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_10872.isBuiltAndTrue ()) {
                            operand_6693->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (247)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247))) COMMA_SOURCE_FILE_AT_LINE (248)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_12570.getPtr ()))) {
              const GGS_incrementcounter_action var_cas_ica (_var_12570.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_11205 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_11205 = NULL ;
                while (((operand_11205 = enumerator_11205.nextObject ()))) {
                  macroValidPointer (operand_11205) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_11290 (operand_11205->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (258)), true) ;
                    const GGS_ident_map::cElement * operand_11290 = NULL ;
                    while (((operand_11290 = enumerator_11290.nextObject ()))) {
                      macroValidPointer (operand_11290) ;
                      const GGS_bool cond_12485 = (operand_11290->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_isEqual (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
                      if (cond_12485.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_11552 (operand_11205->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (261)), true) ;
                          const GGS_ident_map::cElement * operand_11552 = NULL ;
                          while (((operand_11552 = enumerator_11552.nextObject ()))) {
                            macroValidPointer (operand_11552) ;
                            const GGS_bool cond_11758 = (operand_11552->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))).operator_isEqual (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))) ;
                            if (cond_11758.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_12407 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_12407.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_11884 (operand_6693->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (267)), true) ;
                            const GGS_lstringlist::cElement * operand_11884 = NULL ;
                            while (((operand_11884 = enumerator_11884.nextObject ()))) {
                              macroValidPointer (operand_11884) ;
                              const GGS_bool cond_12058 = (operand_11884->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))).operator_isEqual (operand_11205->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))) ;
                              if (cond_12058.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_12335 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_12335.isBuiltAndTrue ()) {
                            operand_6693->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6693->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273))) COMMA_SOURCE_FILE_AT_LINE (274)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_12629 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_12629 = NULL ;
      while (((operand_12629 = enumerator_12629.nextObject ()))) {
        macroValidPointer (operand_12629) ;
        {
          GGS_app_map::cEnumerator enumerator_12773 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_12773 = NULL ;
          while (((operand_12773 = enumerator_12773.nextObject ()))) {
            macroValidPointer (operand_12773) ;
            {
              GGS_ident_map::cEnumerator enumerator_12854 (operand_12773->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (288)), true) ;
              const GGS_ident_map::cElement * operand_12854 = NULL ;
              while (((operand_12854 = enumerator_12854.nextObject ()))) {
                macroValidPointer (operand_12854) ;
                const GGS_bool cond_14002 = (operand_12854->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_isEqual (operand_12629->mInfo.st.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (289)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))) ;
                if (cond_14002.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_13110 (operand_12773->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (291)), true) ;
                    const GGS_ident_map::cElement * operand_13110 = NULL ;
                    while (((operand_13110 = enumerator_13110.nextObject ()))) {
                      macroValidPointer (operand_13110) ;
                      const GGS_bool cond_13308 = (operand_13110->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isEqual (operand_12629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))) ;
                      if (cond_13308.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_13932 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_13932.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_13422 (operand_12629->mInfo.st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (297)), true) ;
                      const GGS_lstringlist::cElement * operand_13422 = NULL ;
                      while (((operand_13422 = enumerator_13422.nextObject ()))) {
                        macroValidPointer (operand_13422) ;
                        const GGS_bool cond_13584 = (operand_13422->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))).operator_isEqual (operand_12773->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))) ;
                        if (cond_13584.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_13868 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_13868.isBuiltAndTrue ()) {
                      operand_12629->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_12629->mInfo.st.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (303)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303))) COMMA_SOURCE_FILE_AT_LINE (304)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_expiry_point_list  var_cas_eps = operand_12629->mInfo.st.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (313)) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_14177 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_14177 = NULL ;
          while (((operand_14177 = enumerator_14177.nextObject ()))) {
            macroValidPointer (operand_14177) ;
            GGS_action_list  var_cas_eps_action ;
            var_cas_eps_action = operand_14177->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (319)) ;
            {
              GGS_action_list::cEnumerator enumerator_14417 (var_cas_eps_action, true) ;
              const GGS_action_list::cElement * operand_14417 = NULL ;
              while (((operand_14417 = enumerator_14417.nextObject ()))) {
                macroValidPointer (operand_14417) ;
                { const GGS_action_obj _var_17559 = operand_14417->action ; // CAST instruction
                  if (_var_17559.getPtr () != NULL) {
                    macroValidPointer (_var_17559.getPtr ()) ;
                    if (typeid (cPtr_setevent_action) == typeid (* (_var_17559.getPtr ()))) {
                      const GGS_setevent_action var_cas_sea (_var_17559.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_14603 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_14603 = NULL ;
                        while (((operand_14603 = enumerator_14603.nextObject ()))) {
                          macroValidPointer (operand_14603) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_14690 (operand_14603->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (325)), true) ;
                            const GGS_ident_map::cElement * operand_14690 = NULL ;
                            while (((operand_14690 = enumerator_14690.nextObject ()))) {
                              macroValidPointer (operand_14690) ;
                              const GGS_bool cond_15931 = (operand_14690->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (326)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326))) ;
                              if (cond_15931.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_14952 (operand_14603->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (328)), true) ;
                                  const GGS_ident_map::cElement * operand_14952 = NULL ;
                                  while (((operand_14952 = enumerator_14952.nextObject ()))) {
                                    macroValidPointer (operand_14952) ;
                                    const GGS_bool cond_15168 = (operand_14952->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))).operator_isEqual (operand_12629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))) ;
                                    if (cond_15168.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_15849 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_15849.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_15305 (operand_12629->mInfo.st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (334)), true) ;
                                    const GGS_lstringlist::cElement * operand_15305 = NULL ;
                                    while (((operand_15305 = enumerator_15305.nextObject ()))) {
                                      macroValidPointer (operand_15305) ;
                                      const GGS_bool cond_15485 = (operand_15305->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))).operator_isEqual (operand_14603->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))) ;
                                      if (cond_15485.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_15773 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_15773.isBuiltAndTrue ()) {
                                    operand_12629->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (340)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340))) COMMA_SOURCE_FILE_AT_LINE (341)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17559.getPtr ()))) {
                      const GGS_activatetask_action var_cas_ata (_var_17559.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_16115 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_16115 = NULL ;
                        while (((operand_16115 = enumerator_16115.nextObject ()))) {
                          macroValidPointer (operand_16115) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_16202 (operand_16115->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (351)), true) ;
                            const GGS_ident_map::cElement * operand_16202 = NULL ;
                            while (((operand_16202 = enumerator_16202.nextObject ()))) {
                              macroValidPointer (operand_16202) ;
                              const GGS_bool cond_17465 = (operand_16202->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))) ;
                              if (cond_17465.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_16464 (operand_16115->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (354)), true) ;
                                  const GGS_ident_map::cElement * operand_16464 = NULL ;
                                  while (((operand_16464 = enumerator_16464.nextObject ()))) {
                                    macroValidPointer (operand_16464) ;
                                    const GGS_bool cond_16680 = (operand_16464->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))).operator_isEqual (operand_12629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))) ;
                                    if (cond_16680.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_17383 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_17383.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_16817 (operand_12629->mInfo.st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (360)), true) ;
                                    const GGS_lstringlist::cElement * operand_16817 = NULL ;
                                    while (((operand_16817 = enumerator_16817.nextObject ()))) {
                                      macroValidPointer (operand_16817) ;
                                      const GGS_bool cond_16997 = (operand_16817->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))).operator_isEqual (operand_16115->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))) ;
                                      if (cond_16997.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_17307 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_17307.isBuiltAndTrue ()) {
                                    operand_12629->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (366)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366))) COMMA_SOURCE_FILE_AT_LINE (367)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_apps_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

