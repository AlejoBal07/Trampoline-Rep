//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_app_verif.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 14h44'54"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 502
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_app_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_verif.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_exists"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_exists (C_Compiler & inLexique,
                                GGS_stringset   var_cas_def,
                                GGS_lstringlist   var_cas_ref,
                                GGS_string  var_cas_obj_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_exists at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_452 (var_cas_ref, true) ;
    const GGS_lstringlist::cElement * operand_452 = NULL ;
    while (((operand_452 = enumerator_452.nextObject ()))) {
      macroValidPointer (operand_452) ;
      if (((var_cas_def.reader_hasKey (inLexique, operand_452->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (16)) COMMA_SOURCE_FILE_AT_LINE (16))).operator_not ()).isBuiltAndTrue ()) {
        operand_452->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_type).operator_concat (GGS_string (" "))).operator_concat (operand_452->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)))).operator_concat (GGS_string (" referenced does not exist")) COMMA_SOURCE_FILE_AT_LINE (18)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_exists\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_in_one"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_in_one (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_objects,
                                GGS_lstring   var_cas_sName,
                                GGS_string  var_cas_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_in_one at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_not_found ;
  var_cas_not_found = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_764 (var_cas_objects, true) ;
    const GGS_lstringlist::cElement * operand_764 = NULL ;
    while (((operand_764 = enumerator_764.nextObject ()))) {
      macroValidPointer (operand_764) ;
      if (((operand_764->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))).operator_isEqual (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30)))).isBuiltAndTrue ()) {
        var_cas_not_found = GGS_bool (false) ;
        var_cas_sName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (32)))).operator_concat (GGS_string (" is already part of an OS Application")) COMMA_SOURCE_FILE_AT_LINE (33)) ;
        operand_764->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("It has been declared here") COMMA_SOURCE_FILE_AT_LINE (34)) ;
      }
    }
  }
  if ((var_cas_not_found).isBuiltAndTrue ()) {
    var_cas_objects._addAssign_operation (var_cas_sName) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_in_one\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "object_not_in_any"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_not_in_any (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_objs,
                                GGS_stringset   var_cas_app_objs,
                                GGS_string  var_cas_obj_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_not_in_any at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_1237 (var_cas_objs, true) ;
    const GGS_lstringlist::cElement * operand_1237 = NULL ;
    while (((operand_1237 = enumerator_1237.nextObject ()))) {
      macroValidPointer (operand_1237) ;
      GGS_string var_cas_name ;
      var_cas_name = operand_1237->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
      if (((var_cas_app_objs.reader_hasKey (inLexique, var_cas_name COMMA_SOURCE_FILE_AT_LINE (49))).operator_not ()).isBuiltAndTrue ()) {
        operand_1237->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_name)).operator_concat (GGS_string (" does not belong to any OS Application")) COMMA_SOURCE_FILE_AT_LINE (51)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_not_in_any\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "apps_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_apps_well_formed (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_apps_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_app_map  var_cas_apps ;
  var_cas_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_task_map  var_cas_tasks ;
  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_isr_map  var_cas_isrs ;
  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_alarm_map  var_cas_alarms ;
  var_cas_alarms = var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_scheduletable_map  var_cas_schedtables ;
  var_cas_schedtables = var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_counter_map  var_cas_counters ;
  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_resource_map  var_cas_resources ;
  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_message_map  var_cas_messages ;
  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  if (((var_cas_apps.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (75))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    {
      GGS_app_map::cEnumerator enumerator_2271 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2271 = NULL ;
      while (((operand_2271 = enumerator_2271.nextObject ()))) {
        macroValidPointer (operand_2271) ;
        ::routine_object_exists (inLexique,  var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  operand_2271->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (78)) ;
        ::routine_object_exists (inLexique,  var_cas_isrs.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  operand_2271->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (79)) ;
        ::routine_object_exists (inLexique,  var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  operand_2271->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  GGS_string ("Alarm") COMMA_SOURCE_FILE_AT_LINE (80)) ;
        ::routine_object_exists (inLexique,  var_cas_schedtables.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  operand_2271->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  GGS_string ("Schedule Table") COMMA_SOURCE_FILE_AT_LINE (81)) ;
        ::routine_object_exists (inLexique,  var_cas_counters.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  operand_2271->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  GGS_string ("Counter") COMMA_SOURCE_FILE_AT_LINE (82)) ;
        ::routine_object_exists (inLexique,  var_cas_resources.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  operand_2271->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  GGS_string ("Resource") COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
    }
    GGS_stringset  var_cas_all_apps ;
    var_cas_all_apps = var_cas_apps.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
    {
      GGS_task_map::cEnumerator enumerator_2958 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_2958 = NULL ;
      while (((operand_2958 = enumerator_2958.nextObject ()))) {
        macroValidPointer (operand_2958) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_2958->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (90)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3060 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_3060 = NULL ;
      while (((operand_3060 = enumerator_3060.nextObject ()))) {
        macroValidPointer (operand_3060) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3060->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (93)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
    }
    {
      GGS_alarm_map::cEnumerator enumerator_3163 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_3163 = NULL ;
      while (((operand_3163 = enumerator_3163.nextObject ()))) {
        macroValidPointer (operand_3163) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3163->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_3273 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_3273 = NULL ;
      while (((operand_3273 = enumerator_3273.nextObject ()))) {
        macroValidPointer (operand_3273) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3273->mInfo.st.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (99)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
    }
    {
      GGS_counter_map::cEnumerator enumerator_3377 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_3377 = NULL ;
      while (((operand_3377 = enumerator_3377.nextObject ()))) {
        macroValidPointer (operand_3377) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3377->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (102)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (102)) ;
      }
    }
    {
      GGS_resource_map::cEnumerator enumerator_3487 (var_cas_resources, true) ;
      const GGS_resource_map::cElement * operand_3487 = NULL ;
      while (((operand_3487 = enumerator_3487.nextObject ()))) {
        macroValidPointer (operand_3487) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3487->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (105)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
    }
    {
      GGS_message_map::cEnumerator enumerator_3597 (var_cas_messages, true) ;
      const GGS_message_map::cElement * operand_3597 = NULL ;
      while (((operand_3597 = enumerator_3597.nextObject ()))) {
        macroValidPointer (operand_3597) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3597->mInfo.mess.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (108)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_lstringlist  var_cas_objects ;
    var_cas_objects = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_app_map::cEnumerator enumerator_3789 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_3789 = NULL ;
      while (((operand_3789 = enumerator_3789.nextObject ()))) {
        macroValidPointer (operand_3789) ;
        {
          GGS_ident_map::cEnumerator enumerator_3808 (operand_3789->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (114)), true) ;
          const GGS_ident_map::cElement * operand_3808 = NULL ;
          while (((operand_3808 = enumerator_3808.nextObject ()))) {
            macroValidPointer (operand_3808) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3808->mKey,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (114)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3890 (operand_3789->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (115)), true) ;
          const GGS_ident_map::cElement * operand_3890 = NULL ;
          while (((operand_3890 = enumerator_3890.nextObject ()))) {
            macroValidPointer (operand_3890) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3890->mKey,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (115)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3970 (operand_3789->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
          const GGS_ident_map::cElement * operand_3970 = NULL ;
          while (((operand_3970 = enumerator_3970.nextObject ()))) {
            macroValidPointer (operand_3970) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3970->mKey,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4054 (operand_3789->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
          const GGS_ident_map::cElement * operand_4054 = NULL ;
          while (((operand_4054 = enumerator_4054.nextObject ()))) {
            macroValidPointer (operand_4054) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4054->mKey,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (117)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4151 (operand_3789->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
          const GGS_ident_map::cElement * operand_4151 = NULL ;
          while (((operand_4151 = enumerator_4151.nextObject ()))) {
            macroValidPointer (operand_4151) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4151->mKey,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4239 (operand_3789->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), true) ;
          const GGS_ident_map::cElement * operand_4239 = NULL ;
          while (((operand_4239 = enumerator_4239.nextObject ()))) {
            macroValidPointer (operand_4239) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4239->mKey,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (119)) ;
          }
        }
      }
    }
    GGS_stringset  var_cas_all_tasks_in_app ;
    var_cas_all_tasks_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_isrs_in_app ;
    var_cas_all_isrs_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_alarms_in_app ;
    var_cas_all_alarms_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_sts_in_app ;
    var_cas_all_sts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_cnts_in_app ;
    var_cas_all_cnts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_rezs_in_app ;
    var_cas_all_rezs_in_app = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_app_map::cEnumerator enumerator_4755 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_4755 = NULL ;
      while (((operand_4755 = enumerator_4755.nextObject ()))) {
        macroValidPointer (operand_4755) ;
        var_cas_all_tasks_in_app = (var_cas_all_tasks_in_app).operator_or (operand_4755->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
        var_cas_all_isrs_in_app = (var_cas_all_isrs_in_app).operator_or (operand_4755->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
        var_cas_all_alarms_in_app = (var_cas_all_alarms_in_app).operator_or (operand_4755->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
        var_cas_all_sts_in_app = (var_cas_all_sts_in_app).operator_or (operand_4755->mInfo.app.reader_schedtables (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
        var_cas_all_cnts_in_app = (var_cas_all_cnts_in_app).operator_or (operand_4755->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
        var_cas_all_rezs_in_app = (var_cas_all_rezs_in_app).operator_or (operand_4755->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_tasks.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (141)),  var_cas_all_tasks_in_app,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (141)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_isrs.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (143)),  var_cas_all_isrs_in_app,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (143)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_alarms.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_all_alarms_in_app,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (145)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_schedtables.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (147)),  var_cas_all_sts_in_app,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (147)) ;
    GGS_lstringlist  var_cas_counter_keys ;
    var_cas_counter_keys = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_counter_map::cEnumerator enumerator_5745 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_5745 = NULL ;
      while (((operand_5745 = enumerator_5745.nextObject ()))) {
        macroValidPointer (operand_5745) ;
        if (((operand_5745->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152))).operator_isNotEqual (GGS_string ("SystemCounter"))).isBuiltAndTrue ()) {
          var_cas_counter_keys._addAssign_operation (operand_5745->mKey) ;
        }
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_counter_keys,  var_cas_all_cnts_in_app,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (156)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_resources.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (158)),  var_cas_all_rezs_in_app,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (158)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_apps_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

