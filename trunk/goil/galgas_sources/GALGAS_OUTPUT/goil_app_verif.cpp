//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'goil_app_verif.cpp'                          *
//                       Generated by version 1.9.11                         *
//                      april 30th, 2010, at 16h49'4"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 725
  #error "This file has been compiled with a version of GALGAS that uses libpm version 725, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_app_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_app_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_exists"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_exists (C_Compiler & inLexique,
                                GGS_stringset   var_cas_def,
                                GGS_lstringlist   var_cas_ref,
                                GGS_string  var_cas_obj_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_exists at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_459 (var_cas_ref, true) ;
    const GGS_lstringlist::cElement * operand_459 = NULL ;
    while (((operand_459 = enumerator_459.nextObject ()))) {
      macroValidPointer (operand_459) ;
      const GGS_bool cond_595 = (var_cas_def.reader_hasKey (operand_459->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (16)))).operator_not () ;
      if (cond_595.isBuiltAndTrue ()) {
        operand_459->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_type).operator_concat (GGS_string (" "))).operator_concat (operand_459->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (17)))).operator_concat (GGS_string (" referenced does not exist")) COMMA_SOURCE_FILE_AT_LINE (18)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_exists\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "object_in_one"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_in_one (C_Compiler & inLexique,
                                GGS_lstringlist  & var_cas_objects,
                                GGS_lstring   var_cas_sName,
                                GGS_string  var_cas_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_in_one at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_not_found = GGS_bool (true) ;
  {
    GGS_lstringlist::cEnumerator enumerator_771 (var_cas_objects, true) ;
    const GGS_lstringlist::cElement * operand_771 = NULL ;
    while (((operand_771 = enumerator_771.nextObject ()))) {
      macroValidPointer (operand_771) ;
      const GGS_bool cond_1038 = (operand_771->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))).operator_isEqual (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (30))) ;
      if (cond_1038.isBuiltAndTrue ()) {
        var_cas_not_found = GGS_bool (false) ;
        var_cas_sName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_sName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (32)))).operator_concat (GGS_string (" is already part of an OS Application")) COMMA_SOURCE_FILE_AT_LINE (33)) ;
        operand_771->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("It has been declared here") COMMA_SOURCE_FILE_AT_LINE (34)) ;
      }
    }
  }
  const GGS_bool cond_1110 = var_cas_not_found ;
  if (cond_1110.isBuiltAndTrue ()) {
    var_cas_objects.addAssign_operation (var_cas_sName) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_in_one\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "object_not_in_any"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_object_not_in_any (C_Compiler & inLexique,
                                GGS_lstringlist   var_cas_objs,
                                GGS_stringset   var_cas_app_objs,
                                GGS_string  var_cas_obj_kind COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_object_not_in_any at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_1244 (var_cas_objs, true) ;
    const GGS_lstringlist::cElement * operand_1244 = NULL ;
    while (((operand_1244 = enumerator_1244.nextObject ()))) {
      macroValidPointer (operand_1244) ;
      GGS_string var_cas_name = operand_1244->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (48)) ;
      const GGS_bool cond_1430 = (var_cas_app_objs.reader_hasKey (var_cas_name)).operator_not () ;
      if (cond_1430.isBuiltAndTrue ()) {
        operand_1244->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_obj_kind).operator_concat (GGS_string (" "))).operator_concat (var_cas_name)).operator_concat (GGS_string (" does not belong to any OS Application")) COMMA_SOURCE_FILE_AT_LINE (51)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_object_not_in_any\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "apps_well_formed"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_apps_well_formed (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_apps_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_app_map  var_cas_apps = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  GGS_task_map  var_cas_tasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (67)) ;
  GGS_isr_map  var_cas_isrs = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (68)) ;
  GGS_alarm_map  var_cas_alarms = var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_scheduletable_map  var_cas_schedtables = var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  GGS_resource_map  var_cas_resources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
  GGS_message_map  var_cas_messages = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (73)) ;
  const GGS_bool cond_17700 = (var_cas_apps.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17700.isBuiltAndTrue ()) {
    {
      GGS_app_map::cEnumerator enumerator_2278 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_2278 = NULL ;
      while (((operand_2278 = enumerator_2278.nextObject ()))) {
        macroValidPointer (operand_2278) ;
        ::routine_object_exists (inLexique,  var_cas_tasks.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  operand_2278->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (78)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (78)) ;
        ::routine_object_exists (inLexique,  var_cas_isrs.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  operand_2278->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (79)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (79)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (79)) ;
        ::routine_object_exists (inLexique,  var_cas_alarms.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  operand_2278->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (80)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (80)),  GGS_string ("Alarm") COMMA_SOURCE_FILE_AT_LINE (80)) ;
        ::routine_object_exists (inLexique,  var_cas_schedtables.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  operand_2278->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (81)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (81)),  GGS_string ("Schedule Table") COMMA_SOURCE_FILE_AT_LINE (81)) ;
        ::routine_object_exists (inLexique,  var_cas_counters.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  operand_2278->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (82)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (82)),  GGS_string ("Counter") COMMA_SOURCE_FILE_AT_LINE (82)) ;
        ::routine_object_exists (inLexique,  var_cas_resources.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  operand_2278->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (83)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (83)),  GGS_string ("Resource") COMMA_SOURCE_FILE_AT_LINE (83)) ;
      }
    }
    GGS_stringset  var_cas_all_apps = var_cas_apps.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (88)) ;
    {
      GGS_task_map::cEnumerator enumerator_2968 (var_cas_tasks, true) ;
      const GGS_task_map::cElement * operand_2968 = NULL ;
      while (((operand_2968 = enumerator_2968.nextObject ()))) {
        macroValidPointer (operand_2968) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_2968->mInfo.task.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (90)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (90)) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3070 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_3070 = NULL ;
      while (((operand_3070 = enumerator_3070.nextObject ()))) {
        macroValidPointer (operand_3070) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3070->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (93)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (93)) ;
      }
    }
    {
      GGS_alarm_map::cEnumerator enumerator_3173 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_3173 = NULL ;
      while (((operand_3173 = enumerator_3173.nextObject ()))) {
        macroValidPointer (operand_3173) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3173->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (96)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_3283 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_3283 = NULL ;
      while (((operand_3283 = enumerator_3283.nextObject ()))) {
        macroValidPointer (operand_3283) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3283->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (99)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (99)) ;
      }
    }
    {
      GGS_counter_map::cEnumerator enumerator_3398 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_3398 = NULL ;
      while (((operand_3398 = enumerator_3398.nextObject ()))) {
        macroValidPointer (operand_3398) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3398->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (102)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (102)) ;
      }
    }
    {
      GGS_resource_map::cEnumerator enumerator_3508 (var_cas_resources, true) ;
      const GGS_resource_map::cElement * operand_3508 = NULL ;
      while (((operand_3508 = enumerator_3508.nextObject ()))) {
        macroValidPointer (operand_3508) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3508->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (105)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (105)) ;
      }
    }
    {
      GGS_message_map::cEnumerator enumerator_3618 (var_cas_messages, true) ;
      const GGS_message_map::cElement * operand_3618 = NULL ;
      while (((operand_3618 = enumerator_3618.nextObject ()))) {
        macroValidPointer (operand_3618) ;
        ::routine_object_exists (inLexique,  var_cas_all_apps,  operand_3618->mInfo.mess.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (108)),  GGS_string ("Application") COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
    GGS_lstringlist  var_cas_objects = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_app_map::cEnumerator enumerator_3810 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_3810 = NULL ;
      while (((operand_3810 = enumerator_3810.nextObject ()))) {
        macroValidPointer (operand_3810) ;
        {
          GGS_ident_map::cEnumerator enumerator_3829 (operand_3810->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (114)), true) ;
          const GGS_ident_map::cElement * operand_3829 = NULL ;
          while (((operand_3829 = enumerator_3829.nextObject ()))) {
            macroValidPointer (operand_3829) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3829->mKey,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (114)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3911 (operand_3810->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (115)), true) ;
          const GGS_ident_map::cElement * operand_3911 = NULL ;
          while (((operand_3911 = enumerator_3911.nextObject ()))) {
            macroValidPointer (operand_3911) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3911->mKey,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (115)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_3991 (operand_3810->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (116)), true) ;
          const GGS_ident_map::cElement * operand_3991 = NULL ;
          while (((operand_3991 = enumerator_3991.nextObject ()))) {
            macroValidPointer (operand_3991) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_3991->mKey,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (116)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4075 (operand_3810->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (117)), true) ;
          const GGS_ident_map::cElement * operand_4075 = NULL ;
          while (((operand_4075 = enumerator_4075.nextObject ()))) {
            macroValidPointer (operand_4075) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4075->mKey,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (117)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4175 (operand_3810->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (118)), true) ;
          const GGS_ident_map::cElement * operand_4175 = NULL ;
          while (((operand_4175 = enumerator_4175.nextObject ()))) {
            macroValidPointer (operand_4175) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4175->mKey,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (118)) ;
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_4263 (operand_3810->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (119)), true) ;
          const GGS_ident_map::cElement * operand_4263 = NULL ;
          while (((operand_4263 = enumerator_4263.nextObject ()))) {
            macroValidPointer (operand_4263) ;
            ::routine_object_in_one (inLexique,  var_cas_objects,  operand_4263->mKey,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (119)) ;
          }
        }
      }
    }
    GGS_stringset  var_cas_all_tasks_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_isrs_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_alarms_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_sts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_cnts_in_app = GGS_stringset ::constructor_emptySet () ;
    GGS_stringset  var_cas_all_rezs_in_app = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_app_map::cEnumerator enumerator_4779 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_4779 = NULL ;
      while (((operand_4779 = enumerator_4779.nextObject ()))) {
        macroValidPointer (operand_4779) ;
        var_cas_all_tasks_in_app = (var_cas_all_tasks_in_app).operator_or (operand_4779->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (132))) ;
        var_cas_all_isrs_in_app = (var_cas_all_isrs_in_app).operator_or (operand_4779->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (133)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (133))) ;
        var_cas_all_alarms_in_app = (var_cas_all_alarms_in_app).operator_or (operand_4779->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (134))) ;
        var_cas_all_sts_in_app = (var_cas_all_sts_in_app).operator_or (operand_4779->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
        var_cas_all_cnts_in_app = (var_cas_all_cnts_in_app).operator_or (operand_4779->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
        var_cas_all_rezs_in_app = (var_cas_all_rezs_in_app).operator_or (operand_4779->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_tasks.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (141)),  var_cas_all_tasks_in_app,  GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (141)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_isrs.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (143)),  var_cas_all_isrs_in_app,  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (143)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_alarms.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_all_alarms_in_app,  GGS_string ("ALARM") COMMA_SOURCE_FILE_AT_LINE (145)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_schedtables.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (147)),  var_cas_all_sts_in_app,  GGS_string ("SCHEDULETABLE") COMMA_SOURCE_FILE_AT_LINE (147)) ;
    GGS_lstringlist  var_cas_counter_keys = GGS_lstringlist ::constructor_emptyList () ;
    {
      GGS_counter_map::cEnumerator enumerator_5787 (var_cas_counters, true) ;
      const GGS_counter_map::cElement * operand_5787 = NULL ;
      while (((operand_5787 = enumerator_5787.nextObject ()))) {
        macroValidPointer (operand_5787) ;
        const GGS_bool cond_5876 = (operand_5787->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
        if (cond_5876.isBuiltAndTrue ()) {
          var_cas_counter_keys.addAssign_operation (operand_5787->mKey) ;
        }
      }
    }
    ::routine_object_not_in_any (inLexique,  var_cas_counter_keys,  var_cas_all_cnts_in_app,  GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (156)) ;
    ::routine_object_not_in_any (inLexique,  var_cas_resources.reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (158)),  var_cas_all_rezs_in_app,  GGS_string ("RESOURCE") COMMA_SOURCE_FILE_AT_LINE (158)) ;
    {
      GGS_app_map::cEnumerator enumerator_6162 (var_cas_apps, true) ;
      const GGS_app_map::cElement * operand_6162 = NULL ;
      while (((operand_6162 = enumerator_6162.nextObject ()))) {
        macroValidPointer (operand_6162) ;
        const GGS_bool cond_6500 = ((operand_6162->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((operand_6162->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (163)).reader_length ()).operator_isEqual (GGS_uint (0U))) ;
        if (cond_6500.isBuiltAndTrue ()) {
          operand_6162->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS445 - An application should have at least one Task OR ISR2.") COMMA_SOURCE_FILE_AT_LINE (165)) ;
        }
      }
    }
    GGS_bool var_cas_right_app = GGS_bool (false) ;
    GGS_bool var_cas_access_app = GGS_bool (false) ;
    {
      GGS_alarm_map::cEnumerator enumerator_6735 (var_cas_alarms, true) ;
      const GGS_alarm_map::cElement * operand_6735 = NULL ;
      while (((operand_6735 = enumerator_6735.nextObject ()))) {
        macroValidPointer (operand_6735) ;
        {
          GGS_app_map::cEnumerator enumerator_6871 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_6871 = NULL ;
          while (((operand_6871 = enumerator_6871.nextObject ()))) {
            macroValidPointer (operand_6871) ;
            {
              GGS_ident_map::cEnumerator enumerator_6952 (operand_6871->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (175)), true) ;
              const GGS_ident_map::cElement * operand_6952 = NULL ;
              while (((operand_6952 = enumerator_6952.nextObject ()))) {
                macroValidPointer (operand_6952) ;
                const GGS_bool cond_8071 = (operand_6952->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))).operator_isEqual (operand_6735->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))) ;
                if (cond_8071.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_7204 (operand_6871->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (178)), true) ;
                    const GGS_ident_map::cElement * operand_7204 = NULL ;
                    while (((operand_7204 = enumerator_7204.nextObject ()))) {
                      macroValidPointer (operand_7204) ;
                      const GGS_bool cond_7398 = (operand_7204->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))).operator_isEqual (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179))) ;
                      if (cond_7398.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_8001 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_8001.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_7512 (operand_6735->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (184)), true) ;
                      const GGS_lstringlist::cElement * operand_7512 = NULL ;
                      while (((operand_7512 = enumerator_7512.nextObject ()))) {
                        macroValidPointer (operand_7512) ;
                        const GGS_bool cond_7674 = (operand_7512->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))).operator_isEqual (operand_6871->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
                        if (cond_7674.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_7937 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_7937.isBuiltAndTrue ()) {
                      operand_6735->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_6735->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190))) COMMA_SOURCE_FILE_AT_LINE (191)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_action_obj  var_cas_alarm_action ;
        var_cas_alarm_action = operand_6735->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) ;
        { const GGS_action_obj _var_12612 = var_cas_alarm_action ; // CAST instruction
          if (_var_12612.getPtr () != NULL) {
            macroValidPointer (_var_12612.getPtr ()) ;
            if (typeid (cPtr_setevent_action) == typeid (* (_var_12612.getPtr ()))) {
              const GGS_setevent_action var_cas_sea (_var_12612.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_8378 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_8378 = NULL ;
                while (((operand_8378 = enumerator_8378.nextObject ()))) {
                  macroValidPointer (operand_8378) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_8463 (operand_8378->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), true) ;
                    const GGS_ident_map::cElement * operand_8463 = NULL ;
                    while (((operand_8463 = enumerator_8463.nextObject ()))) {
                      macroValidPointer (operand_8463) ;
                      const GGS_bool cond_9637 = (operand_8463->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (207)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207))) ;
                      if (cond_9637.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_8710 (operand_8378->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (209)), true) ;
                          const GGS_ident_map::cElement * operand_8710 = NULL ;
                          while (((operand_8710 = enumerator_8710.nextObject ()))) {
                            macroValidPointer (operand_8710) ;
                            const GGS_bool cond_8916 = (operand_8710->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))).operator_isEqual (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (210))) ;
                            if (cond_8916.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_9559 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_9559.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_9042 (operand_6735->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (215)), true) ;
                            const GGS_lstringlist::cElement * operand_9042 = NULL ;
                            while (((operand_9042 = enumerator_9042.nextObject ()))) {
                              macroValidPointer (operand_9042) ;
                              const GGS_bool cond_9216 = (operand_9042->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))).operator_isEqual (operand_8378->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))) ;
                              if (cond_9216.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_9487 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_9487.isBuiltAndTrue ()) {
                            operand_6735->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (221)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221))) COMMA_SOURCE_FILE_AT_LINE (222)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_12612.getPtr ()))) {
              const GGS_activatetask_action var_cas_ata (_var_12612.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_9805 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_9805 = NULL ;
                while (((operand_9805 = enumerator_9805.nextObject ()))) {
                  macroValidPointer (operand_9805) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_9890 (operand_9805->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (232)), true) ;
                    const GGS_ident_map::cElement * operand_9890 = NULL ;
                    while (((operand_9890 = enumerator_9890.nextObject ()))) {
                      macroValidPointer (operand_9890) ;
                      const GGS_bool cond_11064 = (operand_9890->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (233)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233))) ;
                      if (cond_11064.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_10137 (operand_9805->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (235)), true) ;
                          const GGS_ident_map::cElement * operand_10137 = NULL ;
                          while (((operand_10137 = enumerator_10137.nextObject ()))) {
                            macroValidPointer (operand_10137) ;
                            const GGS_bool cond_10343 = (operand_10137->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))).operator_isEqual (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (236))) ;
                            if (cond_10343.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_10986 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_10986.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_10469 (operand_6735->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (241)), true) ;
                            const GGS_lstringlist::cElement * operand_10469 = NULL ;
                            while (((operand_10469 = enumerator_10469.nextObject ()))) {
                              macroValidPointer (operand_10469) ;
                              const GGS_bool cond_10643 = (operand_10469->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))).operator_isEqual (operand_9805->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))) ;
                              if (cond_10643.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_10914 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_10914.isBuiltAndTrue ()) {
                            operand_6735->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (247)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (247))) COMMA_SOURCE_FILE_AT_LINE (248)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_12612.getPtr ()))) {
              const GGS_incrementcounter_action var_cas_ica (_var_12612.getPtr ()) ;
              {
                GGS_app_map::cEnumerator enumerator_11247 (var_cas_apps, true) ;
                const GGS_app_map::cElement * operand_11247 = NULL ;
                while (((operand_11247 = enumerator_11247.nextObject ()))) {
                  macroValidPointer (operand_11247) ;
                  {
                    GGS_ident_map::cEnumerator enumerator_11332 (operand_11247->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (258)), true) ;
                    const GGS_ident_map::cElement * operand_11332 = NULL ;
                    while (((operand_11332 = enumerator_11332.nextObject ()))) {
                      macroValidPointer (operand_11332) ;
                      const GGS_bool cond_12527 = (operand_11332->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_isEqual (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (259))) ;
                      if (cond_12527.isBuiltAndTrue ()) {
                        {
                          GGS_ident_map::cEnumerator enumerator_11594 (operand_11247->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (261)), true) ;
                          const GGS_ident_map::cElement * operand_11594 = NULL ;
                          while (((operand_11594 = enumerator_11594.nextObject ()))) {
                            macroValidPointer (operand_11594) ;
                            const GGS_bool cond_11800 = (operand_11594->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))).operator_isEqual (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262))) ;
                            if (cond_11800.isBuiltAndTrue ()) {
                              var_cas_right_app = GGS_bool (true) ;
                            }
                          }
                        }
                        const GGS_bool cond_12449 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                        if (cond_12449.isBuiltAndTrue ()) {
                          {
                            GGS_lstringlist::cEnumerator enumerator_11926 (operand_6735->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (267)), true) ;
                            const GGS_lstringlist::cElement * operand_11926 = NULL ;
                            while (((operand_11926 = enumerator_11926.nextObject ()))) {
                              macroValidPointer (operand_11926) ;
                              const GGS_bool cond_12100 = (operand_11926->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))).operator_isEqual (operand_11247->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))) ;
                              if (cond_12100.isBuiltAndTrue ()) {
                                var_cas_access_app = GGS_bool (true) ;
                              }
                            }
                          }
                          const GGS_bool cond_12377 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                          if (cond_12377.isBuiltAndTrue ()) {
                            operand_6735->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (var_cas_ica.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273)))).operator_concat (GGS_string (" doesn't belong to the same application of alarm "))).operator_concat (operand_6735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273))) COMMA_SOURCE_FILE_AT_LINE (274)) ;
                          }
                          var_cas_access_app = GGS_bool (false) ;
                        }
                        var_cas_right_app = GGS_bool (false) ;
                      }
                    }
                  }
                }
              }
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_12671 (var_cas_schedtables, true) ;
      const GGS_scheduletable_map::cElement * operand_12671 = NULL ;
      while (((operand_12671 = enumerator_12671.nextObject ()))) {
        macroValidPointer (operand_12671) ;
        {
          GGS_app_map::cEnumerator enumerator_12815 (var_cas_apps, true) ;
          const GGS_app_map::cElement * operand_12815 = NULL ;
          while (((operand_12815 = enumerator_12815.nextObject ()))) {
            macroValidPointer (operand_12815) ;
            {
              GGS_ident_map::cEnumerator enumerator_12896 (operand_12815->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (288)), true) ;
              const GGS_ident_map::cElement * operand_12896 = NULL ;
              while (((operand_12896 = enumerator_12896.nextObject ()))) {
                macroValidPointer (operand_12896) ;
                const GGS_bool cond_14047 = (operand_12896->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))).operator_isEqual (operand_12671->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (289)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289))) ;
                if (cond_14047.isBuiltAndTrue ()) {
                  {
                    GGS_ident_map::cEnumerator enumerator_13152 (operand_12815->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (291)), true) ;
                    const GGS_ident_map::cElement * operand_13152 = NULL ;
                    while (((operand_13152 = enumerator_13152.nextObject ()))) {
                      macroValidPointer (operand_13152) ;
                      const GGS_bool cond_13353 = (operand_13152->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isEqual (operand_12671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))) ;
                      if (cond_13353.isBuiltAndTrue ()) {
                        var_cas_right_app = GGS_bool (true) ;
                      }
                    }
                  }
                  const GGS_bool cond_13977 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                  if (cond_13977.isBuiltAndTrue ()) {
                    {
                      GGS_lstringlist::cEnumerator enumerator_13467 (operand_12671->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (297)), true) ;
                      const GGS_lstringlist::cElement * operand_13467 = NULL ;
                      while (((operand_13467 = enumerator_13467.nextObject ()))) {
                        macroValidPointer (operand_13467) ;
                        const GGS_bool cond_13629 = (operand_13467->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))).operator_isEqual (operand_12815->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))) ;
                        if (cond_13629.isBuiltAndTrue ()) {
                          var_cas_access_app = GGS_bool (true) ;
                        }
                      }
                    }
                    const GGS_bool cond_13913 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                    if (cond_13913.isBuiltAndTrue ()) {
                      operand_12671->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Counter ")).operator_concat (operand_12671->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (303)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (303))) COMMA_SOURCE_FILE_AT_LINE (304)) ;
                    }
                    var_cas_access_app = GGS_bool (false) ;
                  }
                  var_cas_right_app = GGS_bool (false) ;
                }
              }
            }
          }
        }
        GGS_expiry_point_list  var_cas_eps = operand_12671->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (313)) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_14222 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_14222 = NULL ;
          while (((operand_14222 = enumerator_14222.nextObject ()))) {
            macroValidPointer (operand_14222) ;
            GGS_action_list  var_cas_eps_action ;
            var_cas_eps_action = operand_14222->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (319)) ;
            {
              GGS_action_list::cEnumerator enumerator_14462 (var_cas_eps_action, true) ;
              const GGS_action_list::cElement * operand_14462 = NULL ;
              while (((operand_14462 = enumerator_14462.nextObject ()))) {
                macroValidPointer (operand_14462) ;
                { const GGS_action_obj _var_17610 = operand_14462->action ; // CAST instruction
                  if (_var_17610.getPtr () != NULL) {
                    macroValidPointer (_var_17610.getPtr ()) ;
                    if (typeid (cPtr_setevent_action) == typeid (* (_var_17610.getPtr ()))) {
                      const GGS_setevent_action var_cas_sea (_var_17610.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_14648 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_14648 = NULL ;
                        while (((operand_14648 = enumerator_14648.nextObject ()))) {
                          macroValidPointer (operand_14648) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_14735 (operand_14648->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (325)), true) ;
                            const GGS_ident_map::cElement * operand_14735 = NULL ;
                            while (((operand_14735 = enumerator_14735.nextObject ()))) {
                              macroValidPointer (operand_14735) ;
                              const GGS_bool cond_15979 = (operand_14735->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326))).operator_isEqual (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (326)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (326))) ;
                              if (cond_15979.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_14997 (operand_14648->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (328)), true) ;
                                  const GGS_ident_map::cElement * operand_14997 = NULL ;
                                  while (((operand_14997 = enumerator_14997.nextObject ()))) {
                                    macroValidPointer (operand_14997) ;
                                    const GGS_bool cond_15216 = (operand_14997->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))).operator_isEqual (operand_12671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))) ;
                                    if (cond_15216.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_15897 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_15897.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_15353 (operand_12671->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (334)), true) ;
                                    const GGS_lstringlist::cElement * operand_15353 = NULL ;
                                    while (((operand_15353 = enumerator_15353.nextObject ()))) {
                                      macroValidPointer (operand_15353) ;
                                      const GGS_bool cond_15533 = (operand_15353->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))).operator_isEqual (operand_14648->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))) ;
                                      if (cond_15533.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_15821 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_15821.isBuiltAndTrue ()) {
                                    operand_12671->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (340)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340))) COMMA_SOURCE_FILE_AT_LINE (341)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17610.getPtr ()))) {
                      const GGS_activatetask_action var_cas_ata (_var_17610.getPtr ()) ;
                      {
                        GGS_app_map::cEnumerator enumerator_16163 (var_cas_apps, true) ;
                        const GGS_app_map::cElement * operand_16163 = NULL ;
                        while (((operand_16163 = enumerator_16163.nextObject ()))) {
                          macroValidPointer (operand_16163) ;
                          {
                            GGS_ident_map::cEnumerator enumerator_16250 (operand_16163->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (351)), true) ;
                            const GGS_ident_map::cElement * operand_16250 = NULL ;
                            while (((operand_16250 = enumerator_16250.nextObject ()))) {
                              macroValidPointer (operand_16250) ;
                              const GGS_bool cond_17516 = (operand_16250->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))).operator_isEqual (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (352)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (352))) ;
                              if (cond_17516.isBuiltAndTrue ()) {
                                {
                                  GGS_ident_map::cEnumerator enumerator_16512 (operand_16163->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (354)), true) ;
                                  const GGS_ident_map::cElement * operand_16512 = NULL ;
                                  while (((operand_16512 = enumerator_16512.nextObject ()))) {
                                    macroValidPointer (operand_16512) ;
                                    const GGS_bool cond_16731 = (operand_16512->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))).operator_isEqual (operand_12671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355))) ;
                                    if (cond_16731.isBuiltAndTrue ()) {
                                      var_cas_right_app = GGS_bool (true) ;
                                    }
                                  }
                                }
                                const GGS_bool cond_17434 = (var_cas_right_app).operator_isEqual (GGS_bool (false)) ;
                                if (cond_17434.isBuiltAndTrue ()) {
                                  {
                                    GGS_lstringlist::cEnumerator enumerator_16868 (operand_12671->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (360)), true) ;
                                    const GGS_lstringlist::cElement * operand_16868 = NULL ;
                                    while (((operand_16868 = enumerator_16868.nextObject ()))) {
                                      macroValidPointer (operand_16868) ;
                                      const GGS_bool cond_17048 = (operand_16868->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))).operator_isEqual (operand_16163->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361))) ;
                                      if (cond_17048.isBuiltAndTrue ()) {
                                        var_cas_access_app = GGS_bool (true) ;
                                      }
                                    }
                                  }
                                  const GGS_bool cond_17358 = (var_cas_access_app).operator_isEqual (GGS_bool (false)) ;
                                  if (cond_17358.isBuiltAndTrue ()) {
                                    operand_12671->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("Task ")).operator_concat (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (366)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366)))).operator_concat (GGS_string (" doesn't belong to the same application of schedule table "))).operator_concat (operand_12671->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (366))) COMMA_SOURCE_FILE_AT_LINE (367)) ;
                                  }
                                  var_cas_access_app = GGS_bool (false) ;
                                }
                                var_cas_right_app = GGS_bool (false) ;
                              }
                            }
                          }
                        }
                      }
                    }else{
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_apps_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*

