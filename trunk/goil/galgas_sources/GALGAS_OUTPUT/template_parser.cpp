//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'template_parser.cpp'                         *
//                       Generated by version 1.9.10                         *
//                      april 9th, 2010, at 10h17'31"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 688
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "template_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "template_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i0_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__21_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_expression, var_cas_resultType) ;
  switch (var_cas_resultType.enumValue ()) {
  case GGS_goilTemplateType::enum_stringType:
    {
    var_cas_ioResultingString.dotAssign_operation (var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    var_cas_ioResultingString.dotAssign_operation (var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
    }
    break ;
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_3342 = (var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).operator_isEqual (GGS_uint64 (0ULL)) ;
    if (cond_3342.isBuiltAndTrue ()) {
      var_cas_ioResultingString.appendCString ("false") ;
    }else if (cond_3342.isBuiltAndFalse ()) {
      var_cas_ioResultingString.appendCString ("true") ;
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a list expression cannot be emitted") COMMA_SOURCE_FILE_AT_LINE (103)) ;
    }
    break ;
  case GGS_goilTemplateType::enum_structType:
    {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a struct expression cannot be emitted") COMMA_SOURCE_FILE_AT_LINE (105)) ;
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i0_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__21_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i1_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  GGS_bool var_cas_fileNameOk = GGS_bool (true) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_write) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_to) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_expressionType ;
  GGS_goilTemplateVariableMap  var_cas_templateVariableMap = var_cas_ioTemplateVariableMap ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_expression, var_cas_expressionType) ;
  const GGS_bool cond_4287 = var_cas_templateVariableMap.reader_hasKey (GGS_string ("FILENAME")) ;
  if (cond_4287.isBuiltAndTrue ()) {
    GGS_goilTemplateType automatic_var_4280_0 ;
    GGS_goilTemplateValue automatic_var_4280_1 ;
    var_cas_templateVariableMap.modifier_removeKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILENAME") COMMA_SOURCE_FILE_AT_LINE (131)), automatic_var_4280_0, automatic_var_4280_1 COMMA_SOURCE_FILE_AT_LINE (131)) ;
  }
  const GGS_bool cond_4419 = var_cas_templateVariableMap.reader_hasKey (GGS_string ("FILEPATH")) ;
  if (cond_4419.isBuiltAndTrue ()) {
    GGS_goilTemplateType automatic_var_4412_0 ;
    GGS_goilTemplateValue automatic_var_4412_1 ;
    var_cas_templateVariableMap.modifier_removeKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILEPATH") COMMA_SOURCE_FILE_AT_LINE (134)), automatic_var_4412_0, automatic_var_4412_1 COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }
  GGS_goilTemplateValue var_cas_fileName = function_valueWithString (inLexique, var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (136)) ;
  GGS_goilTemplateValue var_cas_nativeFilePath = function_valueWithString (inLexique, var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_nativePathWithUnixPath () COMMA_SOURCE_FILE_AT_LINE (137)) ;
  var_cas_templateVariableMap.modifier_insertKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILENAME") COMMA_SOURCE_FILE_AT_LINE (138)), var_cas_expressionType, var_cas_fileName COMMA_SOURCE_FILE_AT_LINE (138)) ;
  var_cas_templateVariableMap.modifier_insertKey (inLexique, function_lstringWith (inLexique, GGS_string ("FILEPATH") COMMA_SOURCE_FILE_AT_LINE (139)), var_cas_expressionType, var_cas_nativeFilePath COMMA_SOURCE_FILE_AT_LINE (139)) ;
  GGS_location  var_cas_fileNameLocation = GGS_location (inLexique) ;
  const GGS_bool cond_5002 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
  if (cond_5002.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a file name should be of type string") COMMA_SOURCE_FILE_AT_LINE (143)) ;
    var_cas_fileNameOk = GGS_bool (false) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_string var_cas_writeBlockResult = GGS_string ("") ;
  nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_writeBlockResult) ;
  const GGS_bool cond_5313 = (var_cas_fileNameOk).operator_and ((GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U))) ;
  if (cond_5313.isBuiltAndTrue ()) {
    const GGS_string temp_5278 = var_cas_writeBlockResult ;
    if (temp_5278.isBuilt ()) {
      temp_5278 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_expression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) COMMA_SOURCE_FILE_AT_LINE (155)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_write) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i1_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_write) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_to) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) COMMA_HERE) ;
  nt_template_5F_instruction_5F_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_write) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i2_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  GGS_string var_cas_nextPrefix = var_cas_inPrefix ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_template) COMMA_HERE) ;
  switch (select_template_5F_parser_0 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_if) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_exists) COMMA_HERE) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_bool var_cas_found ;
      switch (select_template_5F_parser_1 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_in) COMMA_HERE) ;
          GGS_lstring  var_cas_prefix ;
          inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_nextPrefix = function_fullPrefix (inLexique, var_cas_ioTemplateVariableMap, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (177)) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      ::routine_goilTemplateInvocation (inLexique,  var_cas_templateName,  var_cas_nextPrefix,  var_cas_inPath,  var_cas_inTemplateDirectory,  GGS_bool (false),  var_cas_ioTemplateVariableMap,  var_cas_ioResultingString,  var_cas_found COMMA_SOURCE_FILE_AT_LINE (180)) ;
      switch (select_template_5F_parser_2 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_or) COMMA_HERE) ;
          if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
            GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
            nt_template_5F_instruction_5F_list_ (inLexique, var_cas_nextPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
            var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (202)) ;
          }else{
            nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_template) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
      switch (select_template_5F_parser_3 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_in) COMMA_HERE) ;
          GGS_lstring  var_cas_prefix ;
          inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_nextPrefix = function_fullPrefix (inLexique, var_cas_ioTemplateVariableMap, var_cas_prefix COMMA_SOURCE_FILE_AT_LINE (213)) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      GGS_bool automatic_var_7014_0 ;
      ::routine_goilTemplateInvocation (inLexique,  var_cas_templateName,  var_cas_nextPrefix,  var_cas_inPath,  var_cas_inTemplateDirectory,  GGS_bool (true),  var_cas_ioTemplateVariableMap,  var_cas_ioResultingString,  automatic_var_7014_0 COMMA_SOURCE_FILE_AT_LINE (216)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i2_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_template) COMMA_HERE) ;
  switch (select_template_5F_parser_0 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_if) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_exists) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
      switch (select_template_5F_parser_1 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_in) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      switch (select_template_5F_parser_2 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_or) COMMA_HERE) ;
            nt_template_5F_instruction_5F_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_template) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
      switch (select_template_5F_parser_3 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_in) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i3_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_string /* var_cas_inTemplateDirectory */,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_columnConstantName ;
  inLexique.assignFromAttribute_tokenString (var_cas_columnConstantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_string var_cas_value = GGS_string ("") ;
  GGS_bool var_cas_searchEndOfLine = GGS_bool (true) ;
  GGS_uint  var_cas_idx = var_cas_ioResultingString.reader_length () ;
  GGS_uint _variant_7707 = var_cas_ioResultingString.reader_length () ;
  GGS_bool _condition_7707 (_variant_7707.isBuilt (), true) ;
  while (_condition_7707.isBuiltAndTrue ()) {
    _condition_7707 = ((var_cas_idx).operator_strictSup (GGS_uint (0U))).operator_and (var_cas_searchEndOfLine) ;
    if (_condition_7707.isBuiltAndTrue ()) {
      if (_variant_7707.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (251)) ;
        _condition_7707 = GGS_bool (false) ;
      }else{
        _variant_7707.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_searchEndOfLine = (var_cas_ioResultingString.reader_characterAtIndex (inLexique, var_cas_idx.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (246)) COMMA_SOURCE_FILE_AT_LINE (246))).operator_isNotEqual (GGS_char (TO_UNICODE ('\n'))) ;
        var_cas_idx.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (247)) ;
        const GGS_bool cond_7697 = var_cas_searchEndOfLine ;
        if (cond_7697.isBuiltAndTrue ()) {
          var_cas_value.appendCString (" ") ;
        }
      }
    }
  }
  var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_columnConstantName, GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE), function_valueWithString (inLexique, var_cas_value COMMA_SOURCE_FILE_AT_LINE (255)) COMMA_SOURCE_FILE_AT_LINE (252)) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i3_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i4_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_if) COMMA_HERE) ;
  GGS_bool var_cas_currentCondition = GGS_bool (false) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        if (((var_cas_currentCondition).operator_not ()).isBuiltAndTrue ()) {
          GGS_goilTemplateValue var_cas_expression ;
          GGS_goilTemplateType var_cas_expressionType ;
          nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_expression, var_cas_expressionType) ;
          const GGS_bool cond_9898 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE)) ;
          if (cond_9898.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the operand of the 'not' operator should be boolean") COMMA_SOURCE_FILE_AT_LINE (331)) ;
          }
          var_cas_currentCondition = (var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (332))).operator_isEqual (GGS_uint64 (1ULL)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_then) COMMA_HERE) ;
          if ((var_cas_currentCondition).isBuiltAndTrue ()) {
            GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
            nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
            var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
          }else{
            nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
          }
        }else{
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_then) COMMA_HERE) ;
          nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
        }
      switch (select_template_5F_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  switch (select_template_5F_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_else) COMMA_HERE) ;
      if (((var_cas_currentCondition).operator_not ()).isBuiltAndTrue ()) {
        GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
        var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (370)) ;
      }else{
        nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_if) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i4_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_if) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_then) COMMA_HERE) ;
          nt_template_5F_instruction_5F_list_parse (inLexique) ;
      switch (select_template_5F_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  switch (select_template_5F_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_else) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_if) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'template_instruction_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_5F_list_i5_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  var_cas_ioResultingString.dotAssign_operation (GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE).ggs_string ()) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_template_5F_parser_6 (inLexique)) {
        case 2 : {
          nt_template_5F_instruction_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
          var_cas_ioResultingString.dotAssign_operation (GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE).ggs_string ()) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_5F_list_i5_parseAndResetTemplateString (C_Lexique_template_5F_scanner & inLexique) {
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_template_5F_parser_6 (inLexique)) {
        case 2 : {
          nt_template_5F_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_5F_list_i5_parse (C_Lexique_template_5F_scanner & inLexique) {
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_template_5F_parser_6 (inLexique)) {
        case 2 : {
          nt_template_5F_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'goil_template_start_symbol'       *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_goil_5F_template_5F_start_5F_symbol_i6_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_inTemplateVariableMap, var_cas_ioResultingString) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i7_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_foreach) COMMA_HERE) ;
  GGS_uint  var_cas_shortestListLentgh = GGS_uint ::constructor_max (inLexique COMMA_HERE) ;
  GGS_goilTemplateEnumationList  var_cas_enumerationList = GGS_goilTemplateEnumationList ::constructor_emptyList () ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
        GGS_goilTemplateValue var_cas_enumeratedValue ;
        GGS_goilTemplateType var_cas_expressionType ;
        nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
        const GGS_bool cond_13105 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE)) ;
        if (cond_13105.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only a list can be enumerated") COMMA_SOURCE_FILE_AT_LINE (455)) ;
        }else if (cond_13105.isBuiltAndFalse ()) {
          const GGS_bool cond_13251 = (var_cas_shortestListLentgh).operator_strictSup (var_cas_enumeratedValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (455)).reader_length ()) ;
          if (cond_13251.isBuiltAndTrue ()) {
            var_cas_shortestListLentgh = var_cas_enumeratedValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (456)).reader_length () ;
          }
        }
        GGS_string var_cas_foreachPrefix ;
        switch (select_template_5F_parser_8 (inLexique)) {
          case 1 : {
            var_cas_foreachPrefix = GGS_string ("") ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_prefixedby) COMMA_HERE) ;
            GGS_lstring  var_cas_prefixString ;
            inLexique.assignFromAttribute_tokenString (var_cas_prefixString) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_foreachPrefix = var_cas_prefixString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (464)) ;
            } break ;
          default :
            break ;
        }
        var_cas_enumerationList.addAssign_operation (var_cas_enumeratedValue, var_cas_foreachPrefix) ;
      switch (select_template_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  switch (select_template_5F_parser_9 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_before) COMMA_HERE) ;
      if (((var_cas_shortestListLentgh).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_uint  var_cas_idx = GGS_uint (0U) ;
  GGS_uint _variant_15586 = var_cas_shortestListLentgh ;
  const C_parsingContext context_15586 = inLexique.parsingContext () ;
  nt_template_5F_instruction_5F_list_parse (inLexique) ;
  switch (select_template_5F_parser_10 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_bool _condition_15586 ;
  if (_variant_15586.isBuilt ()) {
    _condition_15586 = (var_cas_idx).operator_strictInf (var_cas_shortestListLentgh) ;
  }
  while (_condition_15586.isBuiltAndTrue ()) {
    inLexique.setParsingContext (context_15586) ;
    if (_variant_15586.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (538)) ;
      _condition_15586 = GGS_bool (false) ;
    }else{
      _variant_15586.decrement_operation (inLexique COMMA_HERE) ;
      GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
      {
        GGS_goilTemplateEnumationList::cEnumerator enumerator_14128 (var_cas_enumerationList, true) ;
        const GGS_goilTemplateEnumationList::cElement * operand_14128 = NULL ;
        while (((operand_14128 = enumerator_14128.nextObject ()))) {
          macroValidPointer (operand_14128) ;
          const GGS_goilTemplateFieldMap  var_cas_fieldMap = operand_14128->mEnumeratedValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (494)).reader_mMapAtIndex (inLexique, var_cas_idx COMMA_SOURCE_FILE_AT_LINE (494)) ;
          {
            GGS_goilTemplateFieldMap::cEnumerator enumerator_14253 (var_cas_fieldMap, true) ;
            const GGS_goilTemplateFieldMap::cElement * operand_14253 = NULL ;
            while (((operand_14253 = enumerator_14253.nextObject ()))) {
              macroValidPointer (operand_14253) ;
              GGS_lstring  var_cas_varName = GGS_lstring ::constructor_new (inLexique, (operand_14128->mPrefix).operator_concat (operand_14253->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (496))), operand_14253->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (496)) COMMA_HERE) ;
              var_cas_templateVariableMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_14128->mPrefix).operator_concat (operand_14253->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (501))), operand_14253->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (501)) COMMA_HERE), operand_14253->mInfo.mType, GGS_goilTemplateValue::constructor_new (operand_14253->mInfo.mUnsigned64Value, operand_14253->mInfo.mStringValue, operand_14253->mInfo.mListValue, operand_14253->mInfo.mStructValue) COMMA_SOURCE_FILE_AT_LINE (500)) ;
            }
          }
        }
      }
      ::routine_addUnsignedValue (inLexique,  var_cas_templateVariableMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INDEX"), GGS_location (inLexique) COMMA_HERE),  var_cas_idx.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (511)) COMMA_SOURCE_FILE_AT_LINE (511)) ;
      nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
      var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (520)) ;
      switch (select_template_5F_parser_10 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
          if (((var_cas_idx).operator_strictInf (var_cas_shortestListLentgh)).isBuiltAndTrue ()) {
            nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
          }else{
            nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (537)) ;
      _condition_15586 = (var_cas_idx).operator_strictInf (var_cas_shortestListLentgh) ;
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  switch (select_template_5F_parser_11 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_after) COMMA_HERE) ;
      if (((var_cas_shortestListLentgh).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
        nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_foreach) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i7_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_foreach) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
        nt_expression_parse (inLexique) ;
        switch (select_template_5F_parser_8 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_prefixedby) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_template_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  switch (select_template_5F_parser_9 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_before) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_do) COMMA_HERE) ;
    nt_template_5F_instruction_5F_list_parse (inLexique) ;
    switch (select_template_5F_parser_10 (inLexique)) {
      case 1 : {
        } break ;
      case 2 : {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
          nt_template_5F_instruction_5F_list_parse (inLexique) ;
        } break ;
      default :
        break ;
    }
  switch (select_template_5F_parser_11 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_after) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_foreach) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i8_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_for) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_in) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_enumerationList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        GGS_goilTemplateValue var_cas_enumeratedValue ;
        GGS_goilTemplateType var_cas_expressionType ;
        nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
        const GGS_bool cond_17071 = (((var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE))).operator_and ((var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)))).operator_and ((var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE))) ;
        if (cond_17071.isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only a bool, integer or string can be enumerated") COMMA_SOURCE_FILE_AT_LINE (592)) ;
        }
        var_cas_enumerationList.addAssign_operation (var_cas_enumeratedValue, var_cas_expressionType) ;
      switch (select_template_5F_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_uint  var_cas_idx = GGS_uint (0U) ;
  GGS_uint _variant_18421 = var_cas_enumerationList.reader_length () ;
  const C_parsingContext context_18421 = inLexique.parsingContext () ;
  nt_template_5F_instruction_5F_list_parse (inLexique) ;
  switch (select_template_5F_parser_13 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_bool _condition_18421 ;
  if (_variant_18421.isBuilt ()) {
    _condition_18421 = (var_cas_enumerationList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  }
  while (_condition_18421.isBuiltAndTrue ()) {
    inLexique.setParsingContext (context_18421) ;
    if (_variant_18421.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (641)) ;
      _condition_18421 = GGS_bool (false) ;
    }else{
      _variant_18421.decrement_operation (inLexique COMMA_HERE) ;
      GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_value ;
      GGS_goilTemplateType var_cas_type ;
      var_cas_enumerationList.modifier_popFirst (inLexique, var_cas_value, var_cas_type COMMA_SOURCE_FILE_AT_LINE (605)) ;
      var_cas_templateVariableMap.modifier_insertKey (inLexique, var_cas_variableName, var_cas_type, var_cas_value COMMA_SOURCE_FILE_AT_LINE (606)) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_templateVariableMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INDEX"), GGS_location (inLexique) COMMA_HERE),  var_cas_idx.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (614)) COMMA_SOURCE_FILE_AT_LINE (614)) ;
      nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
      var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (623)) ;
      switch (select_template_5F_parser_13 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
          if (((var_cas_enumerationList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
          }else{
            nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (640)) ;
      _condition_18421 = (var_cas_enumerationList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_for) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i8_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_for) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_in) COMMA_HERE) ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        nt_expression_parse (inLexique) ;
      switch (select_template_5F_parser_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_do) COMMA_HERE) ;
    nt_template_5F_instruction_5F_list_parse (inLexique) ;
    switch (select_template_5F_parser_13 (inLexique)) {
      case 1 : {
        } break ;
      case 2 : {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
          nt_template_5F_instruction_5F_list_parse (inLexique) ;
        } break ;
      default :
        break ;
    }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_for) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i9_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &var_cas_ioResultingString) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_loop) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_from) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_startValue ;
  GGS_goilTemplateType var_cas_startType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_startValue, var_cas_startType) ;
  const GGS_bool cond_19168 = (var_cas_startType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_19168.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("loop start value should be an integer") COMMA_SOURCE_FILE_AT_LINE (671)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_to) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_endValue ;
  GGS_goilTemplateType var_cas_endType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_endValue, var_cas_endType) ;
  const GGS_bool cond_19478 = (var_cas_endType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_19478.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("loop end value should be an integer") COMMA_SOURCE_FILE_AT_LINE (685)) ;
  }
  switch (select_template_5F_parser_14 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_before) COMMA_HERE) ;
      if (((var_cas_endValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (691))).operator_supOrEqual (var_cas_startValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (691)))).isBuiltAndTrue ()) {
        nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_uint  var_cas_start = var_cas_startValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (705)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (705)) ;
  GGS_uint  var_cas_stop = var_cas_endValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (706)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ;
  GGS_uint  var_cas_idx = var_cas_start ;
  GGS_uint _variant_20981 = var_cas_stop.substract_operation (inLexique, var_cas_start COMMA_SOURCE_FILE_AT_LINE (708)).add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (708)) ;
  const C_parsingContext context_20981 = inLexique.parsingContext () ;
  nt_template_5F_instruction_5F_list_parse (inLexique) ;
  switch (select_template_5F_parser_15 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_bool _condition_20981 ;
  if (_variant_20981.isBuilt ()) {
    _condition_20981 = (var_cas_idx).operator_infOrEqual (var_cas_stop) ;
  }
  while (_condition_20981.isBuiltAndTrue ()) {
    inLexique.setParsingContext (context_20981) ;
    if (_variant_20981.uintValue () == 0) {
      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (741)) ;
      _condition_20981 = GGS_bool (false) ;
    }else{
      _variant_20981.decrement_operation (inLexique COMMA_HERE) ;
      GGS_goilTemplateVariableMap  var_cas_templateVariableMap = GGS_goilTemplateVariableMap ::constructor_mapWithMapToOverride (inLexique, var_cas_ioTemplateVariableMap COMMA_HERE) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_templateVariableMap,  var_cas_variableName,  var_cas_idx.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) COMMA_SOURCE_FILE_AT_LINE (714)) ;
      nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
      var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (723)) ;
      switch (select_template_5F_parser_15 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
          if (((var_cas_idx).operator_infOrEqual (var_cas_stop)).isBuiltAndTrue ()) {
            nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_templateVariableMap, var_cas_ioResultingString) ;
          }else{
            nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
          }
          } break ;
        default :
          break ;
      }
      var_cas_ioTemplateVariableMap = var_cas_templateVariableMap.reader_overriddenMap (inLexique COMMA_SOURCE_FILE_AT_LINE (740)) ;
      _condition_20981 = (var_cas_idx).operator_infOrEqual (var_cas_stop) ;
    }
  }
  GGS_lstring  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  switch (select_template_5F_parser_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_after) COMMA_HERE) ;
      if (((var_cas_stop).operator_supOrEqual (var_cas_start)).isBuiltAndTrue ()) {
        nt_template_5F_instruction_5F_list_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_ioResultingString) ;
      }else{
        nt_template_5F_instruction_5F_list_parseAndResetTemplateString (inLexique) ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_loop) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i9_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_from) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_to) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  switch (select_template_5F_parser_14 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_before) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_do) COMMA_HERE) ;
    nt_template_5F_instruction_5F_list_parse (inLexique) ;
    switch (select_template_5F_parser_15 (inLexique)) {
      case 1 : {
        } break ;
      case 2 : {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_between) COMMA_HERE) ;
          nt_template_5F_instruction_5F_list_parse (inLexique) ;
        } break ;
      default :
        break ;
    }
  switch (select_template_5F_parser_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_after) COMMA_HERE) ;
        nt_template_5F_instruction_5F_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_loop) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i10_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_let) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_enumeratedValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  switch (select_template_5F_parser_17 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3D_) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
      const GGS_bool cond_22257 = var_cas_ioTemplateVariableMap.reader_hasKey (var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (787))) ;
      if (cond_22257.isBuiltAndTrue ()) {
        var_cas_ioTemplateVariableMap.modifier_setMTypeForKey (inLexique, var_cas_expressionType, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (788)) COMMA_SOURCE_FILE_AT_LINE (788)) ;
        var_cas_ioTemplateVariableMap.modifier_setMValueForKey (inLexique, var_cas_enumeratedValue, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (789)) COMMA_SOURCE_FILE_AT_LINE (789)) ;
      }else if (cond_22257.isBuiltAndFalse ()) {
        var_cas_ioTemplateVariableMap.modifier_insertKey (inLexique, var_cas_variableName, var_cas_expressionType, var_cas_enumeratedValue COMMA_SOURCE_FILE_AT_LINE (791)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2B__3D_) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
      const GGS_bool cond_22640 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
      if (cond_22640.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("string type expected") COMMA_SOURCE_FILE_AT_LINE (805)) ;
      }else if (cond_22640.isBuiltAndFalse ()) {
        GGS_goilTemplateValue var_cas_variableValue ;
        GGS_goilTemplateType var_cas_variableType ;
        const GGS_goilTemplateVariableMap  temp_22757 = var_cas_ioTemplateVariableMap ;
        if (temp_22757.isBuilt ()) {
          temp_22757 (HERE)->method_searchKey (inLexique, var_cas_variableName, var_cas_variableType, var_cas_variableValue COMMA_SOURCE_FILE_AT_LINE (808)) ;
        }
        const GGS_bool cond_22922 = (var_cas_variableType).operator_isNotEqual (GGS_goilTemplateType::constructor_listType (inLexique COMMA_HERE)) ;
        if (cond_22922.isBuiltAndTrue ()) {
          var_cas_variableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("list type expected") COMMA_SOURCE_FILE_AT_LINE (811)) ;
        }else if (cond_22922.isBuiltAndFalse ()) {
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          var_cas_fieldMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_HERE), var_cas_expressionType, GGS_uint64 (0ULL), var_cas_enumeratedValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (813)), GGS_goilTemplateFieldMapList ::constructor_emptyList (), GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (813)) ;
          var_cas_variableValue.mMapListValue.addAssign_operation (var_cas_fieldMap) ;
          var_cas_ioTemplateVariableMap.modifier_setMTypeForKey (inLexique, var_cas_variableType, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (815)) COMMA_SOURCE_FILE_AT_LINE (815)) ;
          var_cas_ioTemplateVariableMap.modifier_setMValueForKey (inLexique, var_cas_variableValue, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (816)) COMMA_SOURCE_FILE_AT_LINE (816)) ;
        }
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i10_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_let) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_template_5F_parser_17 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3D_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken__2B__3D_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'variable_or_here'            *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_variable_5F_or_5F_here_i11_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_goilTemplateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_location  &var_cas_outWhere) {
  switch (select_template_5F_parser_18 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_here) COMMA_HERE) ;
      var_cas_outWhere = GGS_location (inLexique) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_variableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_outWhere = var_cas_inTemplateVariableMap.reader_locationForKey (inLexique, var_cas_variableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (833)) COMMA_SOURCE_FILE_AT_LINE (833)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_variable_5F_or_5F_here_i11_parse (C_Lexique_template_5F_scanner & inLexique) {
  switch (select_template_5F_parser_18 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_here) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i12_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_error) COMMA_HERE) ;
  GGS_location  var_cas_where ;
  nt_variable_5F_or_5F_here_ (inLexique, var_cas_ioTemplateVariableMap, var_cas_where) ;
  GGS_goilTemplateValue var_cas_enumeratedValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
  const GGS_bool cond_24500 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
  if (cond_24500.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("error message should by a string expression") COMMA_SOURCE_FILE_AT_LINE (861)) ;
  }else if (cond_24500.isBuiltAndFalse ()) {
    var_cas_where.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_enumeratedValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (862)) COMMA_SOURCE_FILE_AT_LINE (863)) ;
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i12_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_error) COMMA_HERE) ;
  nt_variable_5F_or_5F_here_parse (inLexique) ;
  nt_expression_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i13_ (C_Lexique_template_5F_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_string var_cas_inTemplateDirectory,
                                GGS_goilTemplateVariableMap  &var_cas_ioTemplateVariableMap,
                                GGS_string &/* var_cas_ioResultingString */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_warning) COMMA_HERE) ;
  GGS_location  var_cas_where ;
  nt_variable_5F_or_5F_here_ (inLexique, var_cas_ioTemplateVariableMap, var_cas_where) ;
  GGS_goilTemplateValue var_cas_enumeratedValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inTemplateDirectory, var_cas_ioTemplateVariableMap, var_cas_enumeratedValue, var_cas_expressionType) ;
  const GGS_bool cond_25264 = (var_cas_expressionType).operator_isNotEqual (GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE)) ;
  if (cond_25264.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("error message should by a string expression") COMMA_SOURCE_FILE_AT_LINE (890)) ;
  }else if (cond_25264.isBuiltAndFalse ()) {
    var_cas_where.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, var_cas_enumeratedValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (891)) COMMA_SOURCE_FILE_AT_LINE (891)) ;
  }
}

//---------------------------------------------------------------------------*

void template_parser::rule_template_5F_parser_template_5F_instruction_i13_parse (C_Lexique_template_5F_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_template_5F_scanner::kToken_warning) COMMA_HERE) ;
  nt_variable_5F_or_5F_here_parse (inLexique) ;
  nt_expression_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

