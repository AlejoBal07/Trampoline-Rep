//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'system_config.cpp'                          *
//                        Generated by version 2.0.1                         *
//                    september 9th, 2010, at 17h52'36"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 837
  #error "This file has been compiled with a version of GALGAS that uses libpm version 837, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "system_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "system_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     Class for 'taskKind' Enumeration                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_taskKind ("taskKind", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_taskKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isNotEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_infOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_supOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictInf (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictSup (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_taskKind::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @taskKind" ;
  switch (mValue) {
  case enum_all:
    s << " all>" ;
    break ;
  case enum_basic:
    s << " basic>" ;
    break ;
  case enum_extended:
    s << " extended>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_taskKind::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_taskKind * p = NULL ;
    macroMyNew (p, GGS_taskKind (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_taskKind GGS_taskKind::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_taskKind result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_taskKind * p = dynamic_cast <const GGS_taskKind *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_taskKind, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_taskKind::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_taskKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "setAppRelatedAttributes"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAppRelatedAttributes (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_lstring   var_cas_objName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAppRelatedAttributes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2773 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_2773.isBuiltAndTrue ()) {
    const GGS_bool cond_2763 = (var_cas_appForObj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_2763.isBuiltAndTrue ()) {
      GGS_bool var_cas_trustedApp = GGS_bool (false) ;
      GGS_string var_cas_appName ;
      if (var_cas_appForObj.isBuilt ()) {
        var_cas_appForObj (HERE)->method_get (inLexique, var_cas_objName, var_cas_appName COMMA_SOURCE_FILE_AT_LINE (85)) ;
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPLICATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (86)),  var_cas_appName COMMA_SOURCE_FILE_AT_LINE (86)) ;
      GGS_app_obj  var_cas_app ;
      const GGS_app_map  temp_2533 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      if (temp_2533.isBuilt ()) {
        temp_2533 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_appName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (91)), var_cas_app COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
      { const GGS_app_trusted_obj _var_2668 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ; // CAST instruction
        if (_var_2668.getPtr () != NULL) {
          macroValidPointer (_var_2668.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_2668.getPtr ()))) {
            var_cas_trustedApp = GGS_bool (true) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRUSTED"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (95)),  var_cas_trustedApp COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAppRelatedAttributes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "orderedTaskList"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tasks_by_type  function_orderedTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_orderedTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_taskList ;
  var_cas_taskList = GGS_tasks_by_type ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_3054 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), true) ;
    const GGS_task_map::cElement * operand_3054 = NULL ;
    while (((operand_3054 = enumerator_3054.nextObject ()))) {
      macroValidPointer (operand_3054) ;
      const GGS_bool cond_3152 = (operand_3054->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_3152.isBuiltAndTrue ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (0U), operand_3054->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
      }else if (cond_3152.isBuiltAndFalse ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (1U), operand_3054->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_orderedTaskList\n") ;
  #endif
  return var_cas_taskList ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_orderedTaskList (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_tasks_by_type  result = function_orderedTaskList (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_orderedTaskList [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_orderedTaskList ("orderedTaskList",
                              functionForGenericCall_orderedTaskList,
                              & kTypeDescriptor_GGS_tasks_by_type ,
                              1,
                              kArgumentTypeList_orderedTaskList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "computeTaskList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_taskKind  var_cas_kind,
                                GGS_goilTemplateFieldMapList  & var_cas_taskList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_sTasks = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (128)) ;
  {
    GGS_tasks_by_type::cEnumerator enumerator_3505 (var_cas_sTasks, true) ;
    const GGS_tasks_by_type::cElement * operand_3505 = NULL ;
    while (((operand_3505 = enumerator_3505.nextObject ()))) {
      macroValidPointer (operand_3505) ;
      const GGS_bool cond_8240 = (((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_or (((operand_3505->type).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (132)))))).operator_or (((operand_3505->type).operator_isEqual (GGS_uint (1U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (133))))) ;
      if (cond_8240.isBuiltAndTrue ()) {
        GGS_task_obj  var_cas_task ;
        GGS_lstring  var_cas_taskName = GGS_lstring ::constructor_new (inLexique, operand_3505->name, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        const GGS_task_map  temp_3755 = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
        if (temp_3755.isBuilt ()) {
          temp_3755 (HERE)->method_get (inLexique, var_cas_taskName, var_cas_task COMMA_SOURCE_FILE_AT_LINE (136)) ;
        }
        GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_locationForKey (inLexique, operand_3505->name COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)),  operand_3505->name COMMA_SOURCE_FILE_AT_LINE (138)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (139)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (139)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (140)),  (operand_3505->type).operator_isEqual (GGS_uint (0U)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NONPREEMPTABLE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (141)),  (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (141)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))).operator_isEqual (GGS_string ("NON")) COMMA_SOURCE_FILE_AT_LINE (141)) ;
        GGS_uint  var_cas_actualPrio ;
        GGS_uint  var_cas_activation ;
        if (var_cas_actualPriorities.isBuilt ()) {
          var_cas_actualPriorities (HERE)->method_get (inLexique, var_cas_taskName, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (144)) ;
        }
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (146)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) COMMA_SOURCE_FILE_AT_LINE (146)) ;
        { const GGS_task_autostart_obj _var_4893 = var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ; // CAST instruction
          if (_var_4893.getPtr () != NULL) {
            macroValidPointer (_var_4893.getPtr ()) ;
            if (typeid (cPtr_task_autostart_true) == typeid (* (_var_4893.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (150)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (150)) ;
            }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_4893.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (152)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (152)) ;
            }else{
              var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, AUTOSTART type is undefined") COMMA_SOURCE_FILE_AT_LINE (155)) ;
            }
          }
        }
        const GGS_bool cond_5820 = (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (156)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_string ("FULL")) ;
        if (cond_5820.isBuiltAndTrue ()) {
          GGS_bool var_cas_internalFound = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_5004 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (158)), true) ;
            const GGS_lstringlist::cElement * operand_5004 = NULL ;
            while (((operand_5004 = enumerator_5004.nextObject ()))) {
              macroValidPointer (operand_5004) ;
              const GGS_bool cond_5554 = (var_cas_internalFound).operator_not () ;
              if (cond_5554.isBuiltAndTrue ()) {
                GGS_resource_obj  var_cas_resource ;
                const GGS_resource_map  temp_5151 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
                if (temp_5151.isBuilt ()) {
                  temp_5151 (HERE)->method_get (inLexique, operand_5004->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (161)) ;
                }
                { const GGS_resource_property_obj _var_5534 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ; // CAST instruction
                  if (_var_5534.getPtr () != NULL) {
                    macroValidPointer (_var_5534.getPtr ()) ;
                    if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_5534.getPtr ()))) {
                      var_cas_internalFound = GGS_bool (true) ;
                      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (165)),  operand_5004->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (165)) COMMA_SOURCE_FILE_AT_LINE (165)) ;
                      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (166)) ;
                    }else{
                    }
                  }
                }
              }
            }
          }
          const GGS_bool cond_5805 = (var_cas_internalFound).operator_not () ;
          if (cond_5805.isBuiltAndTrue ()) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (171)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (171)) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (172)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (172)) ;
          }
        }else if (cond_5820.isBuiltAndFalse ()) {
          ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (175)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (175)) ;
          ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (176)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (176)) ;
        }
        GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
        {
          GGS_lstringlist::cEnumerator enumerator_6089 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (180)), true) ;
          const GGS_lstringlist::cElement * operand_6089 = NULL ;
          while (((operand_6089 = enumerator_6089.nextObject ()))) {
            macroValidPointer (operand_6089) ;
            GGS_resource_obj  var_cas_resource ;
            const GGS_resource_map  temp_6192 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
            if (temp_6192.isBuilt ()) {
              temp_6192 (HERE)->method_get (inLexique, operand_6089->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (182)) ;
            }
            { const GGS_resource_property_obj _var_6545 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ; // CAST instruction
              if (_var_6545.getPtr () != NULL) {
                macroValidPointer (_var_6545.getPtr ()) ;
                if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_6545.getPtr ()))) {
                }else{
                  GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187)),  operand_6089->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                  var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                }
              }
            }
          }
        }
        ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (191)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (191)) ;
        { const GGS_timing_prot _var_7691 = var_cas_task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ; // CAST instruction
          if (_var_7691.getPtr () != NULL) {
            macroValidPointer (_var_7691.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_7691.getPtr ()))) {
              const GGS_timing_prot_task var_cas_tpt (_var_7691.getPtr ()) ;
              GGS_goilTemplateFieldMap  var_cas_tpFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXECUTIONBUDGET"), var_cas_tpt.reader_exe_budget (inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)),  function_uint64OrError (inLexique, var_cas_tpt.reader_exe_budget (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), GGS_string ("EXECUTIONBUDGET") COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMEFRAME"), var_cas_tpt.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (198)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)),  function_uint64OrError (inLexique, var_cas_tpt.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (198)), GGS_string ("TIMEFRAME") COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)) ;
              { const GGS_basic_type _var_7342 = var_cas_tpt.reader_os_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ; // CAST instruction
                if (_var_7342.getPtr () != NULL) {
                  macroValidPointer (_var_7342.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_7342.getPtr ()))) {
                    const GGS_uint64_class var_cas_osItLock (_var_7342.getPtr ()) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME"), var_cas_osItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)),  var_cas_osItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)) ;
                  }else{
                  }
                }
              }
              { const GGS_basic_type _var_7568 = var_cas_tpt.reader_all_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ; // CAST instruction
                if (_var_7568.getPtr () != NULL) {
                  macroValidPointer (_var_7568.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_7568.getPtr ()))) {
                    const GGS_uint64_class var_cas_allItLock (_var_7568.getPtr ()) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME"), var_cas_allItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)),  var_cas_allItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)) ;
                  }else{
                  }
                }
              }
              ::routine_addStructFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMINGPROTECTION"), var_cas_tpt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) COMMA_SOURCE_FILE_AT_LINE (207)),  var_cas_tpFields COMMA_SOURCE_FILE_AT_LINE (207)) ;
            }else{
            }
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_7754 (var_cas_task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (211)), true) ;
          const GGS_ident_map::cElement * operand_7754 = NULL ;
          while (((operand_7754 = enumerator_7754.nextObject ()))) {
            macroValidPointer (operand_7754) ;
            { const GGS_basic_type _var_8106 = operand_7754->mInfo.value ; // CAST instruction
              if (_var_8106.getPtr () != NULL) {
                macroValidPointer (_var_8106.getPtr ()) ;
                if (typeid (cPtr_bool_class) == typeid (* (_var_8106.getPtr ()))) {
                  const GGS_bool_class var_cas_bool (_var_8106.getPtr ()) ;
                  ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_7754->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (214)) COMMA_SOURCE_FILE_AT_LINE (214)) ;
                }else if (typeid (cPtr_uint64_class) == typeid (* (_var_8106.getPtr ()))) {
                  const GGS_uint64_class var_cas_number (_var_8106.getPtr ()) ;
                  ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_7754->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (216)) COMMA_SOURCE_FILE_AT_LINE (216)) ;
                }else if (typeid (cPtr_string_class) == typeid (* (_var_8106.getPtr ()))) {
                  const GGS_string_class var_cas_str (_var_8106.getPtr ()) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_7754->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (218)) COMMA_SOURCE_FILE_AT_LINE (218)) ;
                }else{
                }
              }
            }
          }
        }
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  var_cas_taskName COMMA_SOURCE_FILE_AT_LINE (222)) ;
        var_cas_taskList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "computeWrapperTaskList"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeWrapperTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_uint   /* var_cas_maxTaskPrio */,
                                GGS_goilTemplateFieldMapList  & /* var_cas_wrapperList */
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeWrapperTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_app_map::cEnumerator enumerator_8497 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (238)), true) ;
    const GGS_app_map::cElement * operand_8497 = NULL ;
    while (((operand_8497 = enumerator_8497.nextObject ()))) {
      macroValidPointer (operand_8497) ;
      { const GGS_basic_type _var_8589 = operand_8497->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ; // CAST instruction
        if (_var_8589.getPtr () != NULL) {
          macroValidPointer (_var_8589.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_8589.getPtr ()))) {
            const GGS_bool_class var_cas_sh (_var_8589.getPtr ()) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeWrapperTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeISRList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeISRList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_uint64   var_cas_isrCategory,
                                GGS_goilTemplateFieldMapList  & var_cas_isrList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeISRList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_isr_map::cEnumerator enumerator_8844 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (256)), true) ;
    const GGS_isr_map::cElement * operand_8844 = NULL ;
    while (((operand_8844 = enumerator_8844.nextObject ()))) {
      macroValidPointer (operand_8844) ;
      { const GGS_basic_type _var_11389 = operand_8844->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (257)) ; // CAST instruction
        if (_var_11389.getPtr () != NULL) {
          macroValidPointer (_var_11389.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_11389.getPtr ()))) {
            const GGS_uint64_class var_cas_category (_var_11389.getPtr ()) ;
            const GGS_bool cond_11372 = (var_cas_category.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_isEqual (var_cas_isrCategory) ;
            if (cond_11372.isBuiltAndTrue ()) {
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (261)),  operand_8844->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) COMMA_SOURCE_FILE_AT_LINE (261)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (262)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (262)) ;
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (263)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (263)) ;
              GGS_uint  var_cas_actualPrio ;
              GGS_uint  var_cas_activation ;
              if (var_cas_actualPriorities.isBuilt ()) {
                var_cas_actualPriorities (HERE)->method_get (inLexique, operand_8844->mKey, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (266)) ;
              }
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (267)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) COMMA_SOURCE_FILE_AT_LINE (267)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (268)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (268)) COMMA_SOURCE_FILE_AT_LINE (268)) ;
              {
                GGS_ident_map::cEnumerator enumerator_9629 (operand_8844->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (271)), true) ;
                const GGS_ident_map::cElement * operand_9629 = NULL ;
                while (((operand_9629 = enumerator_9629.nextObject ()))) {
                  macroValidPointer (operand_9629) ;
                  { const GGS_basic_type _var_10002 = operand_9629->mInfo.value ; // CAST instruction
                    if (_var_10002.getPtr () != NULL) {
                      macroValidPointer (_var_10002.getPtr ()) ;
                      if (typeid (cPtr_bool_class) == typeid (* (_var_10002.getPtr ()))) {
                        const GGS_bool_class var_cas_bool (_var_10002.getPtr ()) ;
                        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_9629->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) COMMA_SOURCE_FILE_AT_LINE (274)) ;
                      }else if (typeid (cPtr_uint64_class) == typeid (* (_var_10002.getPtr ()))) {
                        const GGS_uint64_class var_cas_number (_var_10002.getPtr ()) ;
                        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_9629->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (276)) COMMA_SOURCE_FILE_AT_LINE (276)) ;
                      }else if (typeid (cPtr_string_class) == typeid (* (_var_10002.getPtr ()))) {
                        const GGS_string_class var_cas_str (_var_10002.getPtr ()) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_9629->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) COMMA_SOURCE_FILE_AT_LINE (278)) ;
                      }else{
                      }
                    }
                  }
                }
              }
              GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
              {
                GGS_lstringlist::cEnumerator enumerator_10108 (operand_8844->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (283)), true) ;
                const GGS_lstringlist::cElement * operand_10108 = NULL ;
                while (((operand_10108 = enumerator_10108.nextObject ()))) {
                  macroValidPointer (operand_10108) ;
                  GGS_resource_obj  var_cas_resource ;
                  const GGS_resource_map  temp_10214 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (285)) ;
                  if (temp_10214.isBuilt ()) {
                    temp_10214 (HERE)->method_get (inLexique, operand_10108->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (285)) ;
                  }
                  { const GGS_resource_property_obj _var_10581 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) ; // CAST instruction
                    if (_var_10581.getPtr () != NULL) {
                      macroValidPointer (_var_10581.getPtr ()) ;
                      if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_10581.getPtr ()))) {
                      }else{
                        GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (290)),  operand_10108->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290)) COMMA_SOURCE_FILE_AT_LINE (290)) ;
                        var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                      }
                    }
                  }
                }
              }
              ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (294)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (294)) ;
              ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_8844->mKey COMMA_SOURCE_FILE_AT_LINE (296)) ;
              { const GGS_timing_prot _var_11313 = operand_8844->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (298)) ; // CAST instruction
                if (_var_11313.getPtr () != NULL) {
                  macroValidPointer (_var_11313.getPtr ()) ;
                  if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_11313.getPtr ()))) {
                    const GGS_timing_prot_isr var_cas_tpi (_var_11313.getPtr ()) ;
                    GGS_goilTemplateFieldMap  var_cas_tpFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXECUTIONTIME"), var_cas_tpi.reader_exe_time (inLexique COMMA_SOURCE_FILE_AT_LINE (301)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (301)),  function_uint64OrError (inLexique, var_cas_tpi.reader_exe_time (inLexique COMMA_SOURCE_FILE_AT_LINE (301)), GGS_string ("EXECUTIONTIME") COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (301)) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMEFRAME"), var_cas_tpi.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (302)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)),  function_uint64OrError (inLexique, var_cas_tpi.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (302)), GGS_string ("TIMEFRAME") COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)) ;
                    ::routine_addStructFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMINGPROTECTION"), var_cas_tpi.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) COMMA_SOURCE_FILE_AT_LINE (303)),  var_cas_tpFields COMMA_SOURCE_FILE_AT_LINE (303)) ;
                  }else{
                  }
                }
              }
              var_cas_isrList.addAssign_operation (var_cas_fieldMap) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeISRList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTasksList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (322)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (322)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (323)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (323)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setBasicTasksList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBasicTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBasicTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (336)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (336)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (337)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (337)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBasicTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setExtendedTasksList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtendedTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtendedTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (350)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (350)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (351)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (351)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtendedTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs1List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs1List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs1List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (1ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (364)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS1"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (365)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (365)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs1List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs2List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs2List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs2List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (378)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (379)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (379)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs2List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_processesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (392)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (392)) ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (393)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (394)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (394)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCountersList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCountersList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCountersList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_countersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_hardCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_softCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_counter_map::cEnumerator enumerator_14197 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (408)), true) ;
    const GGS_counter_map::cElement * operand_14197 = NULL ;
    while (((operand_14197 = enumerator_14197.nextObject ()))) {
      macroValidPointer (operand_14197) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (409)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (410)),  operand_14197->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (410)) COMMA_SOURCE_FILE_AT_LINE (410)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (411)),  function_maxAllowedValue (inLexique, operand_14197->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (411)) COMMA_SOURCE_FILE_AT_LINE (411)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (412)),  function_minCycle (inLexique, operand_14197->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (412)) COMMA_SOURCE_FILE_AT_LINE (412)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TICKSPERBASE") COMMA_SOURCE_FILE_AT_LINE (413)),  function_ticksPerBase (inLexique, operand_14197->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (413)) COMMA_SOURCE_FILE_AT_LINE (413)) ;
      GGS_string var_cas_type = GGS_string ("HARDWARE_COUNTER") ;
      { const GGS_counter_type _var_14817 = operand_14197->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) ; // CAST instruction
        if (_var_14817.getPtr () != NULL) {
          macroValidPointer (_var_14817.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_14817.getPtr ()))) {
            var_cas_type = GGS_string ("SOFTWARE_COUNTER") ;
          }else{
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  operand_14197->mInfo.counter.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) COMMA_SOURCE_FILE_AT_LINE (418)) ;
          }
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TYPE") COMMA_SOURCE_FILE_AT_LINE (420)),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (420)) ;
      const GGS_bool cond_15005 = (operand_14197->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (422))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
      if (cond_15005.isBuiltAndTrue ()) {
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_14197->mKey COMMA_SOURCE_FILE_AT_LINE (423)) ;
      }
      var_cas_countersList.addAssign_operation (var_cas_fieldMap) ;
      const GGS_bool cond_15126 = (var_cas_type).operator_isEqual (GGS_string ("HARDWARE_COUNTER")) ;
      if (cond_15126.isBuiltAndTrue ()) {
        var_cas_hardCountersList.addAssign_operation (var_cas_fieldMap) ;
      }else if (cond_15126.isBuiltAndFalse ()) {
        var_cas_softCountersList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (433)),  var_cas_countersList COMMA_SOURCE_FILE_AT_LINE (433)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("HARDWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (434)),  var_cas_hardCountersList COMMA_SOURCE_FILE_AT_LINE (434)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOFTWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (435)),  var_cas_softCountersList COMMA_SOURCE_FILE_AT_LINE (435)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCountersList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setEventsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEventsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_eventMaskMap   var_cas_eventMasks,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEventsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_eventsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_event_map::cEnumerator enumerator_15625 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (447)), true) ;
    const GGS_event_map::cElement * operand_15625 = NULL ;
    while (((operand_15625 = enumerator_15625.nextObject ()))) {
      macroValidPointer (operand_15625) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (448)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (449)),  operand_15625->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (449)) COMMA_SOURCE_FILE_AT_LINE (449)) ;
      GGS_uint64  var_cas_eventMask ;
      if (var_cas_eventMasks.isBuilt ()) {
        var_cas_eventMasks (HERE)->method_get (inLexique, operand_15625->mKey, var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (451)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MASK"), operand_15625->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (452)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (452)) COMMA_SOURCE_FILE_AT_LINE (452)),  var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (452)) ;
      var_cas_eventsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EVENTS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (455)),  var_cas_eventsList COMMA_SOURCE_FILE_AT_LINE (455)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEventsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setAction"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAction (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_action_obj   var_cas_actionobj
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_action_obj _var_17357 = var_cas_actionobj ; // CAST instruction
    if (_var_17357.getPtr () != NULL) {
      macroValidPointer (_var_17357.getPtr ()) ;
      if (typeid (cPtr_setevent_action) == typeid (* (_var_17357.getPtr ()))) {
        const GGS_setevent_action var_cas_setEvent (_var_17357.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (464)),  GGS_string ("setEvent") COMMA_SOURCE_FILE_AT_LINE (464)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (465)),  var_cas_setEvent.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (465)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (465)) COMMA_SOURCE_FILE_AT_LINE (465)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EVENT") COMMA_SOURCE_FILE_AT_LINE (466)),  var_cas_setEvent.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (466)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (466)) COMMA_SOURCE_FILE_AT_LINE (466)) ;
      }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17357.getPtr ()))) {
        const GGS_activatetask_action var_cas_activateTask (_var_17357.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (468)),  GGS_string ("activateTask") COMMA_SOURCE_FILE_AT_LINE (468)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (469)),  var_cas_activateTask.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (469)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (469)) COMMA_SOURCE_FILE_AT_LINE (469)) ;
      }else if (typeid (cPtr_callback_action) == typeid (* (_var_17357.getPtr ()))) {
        const GGS_callback_action var_cas_callback (_var_17357.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (471)),  GGS_string ("callback") COMMA_SOURCE_FILE_AT_LINE (471)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FUNCTION") COMMA_SOURCE_FILE_AT_LINE (472)),  var_cas_callback.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (472)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (472)) COMMA_SOURCE_FILE_AT_LINE (472)) ;
      }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_17357.getPtr ()))) {
        const GGS_incrementcounter_action var_cas_incrementCounter (_var_17357.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (474)),  GGS_string ("incrementCounter") COMMA_SOURCE_FILE_AT_LINE (474)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TARGETCOUNTER") COMMA_SOURCE_FILE_AT_LINE (475)),  var_cas_incrementCounter.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (475)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (475)) COMMA_SOURCE_FILE_AT_LINE (475)) ;
      }else if (typeid (cPtr_finalize_st_action) == typeid (* (_var_17357.getPtr ()))) {
        const GGS_finalize_st_action var_cas_finalizeScheduletable (_var_17357.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (477)),  GGS_string ("finalizeScheduletable") COMMA_SOURCE_FILE_AT_LINE (477)) ;
        ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGETCOUNTER"),  var_cas_finalizeScheduletable.reader_scheduleTableName (inLexique COMMA_SOURCE_FILE_AT_LINE (478)) COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAlarmsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAlarmsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAlarmsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_alarmsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_alarm_map::cEnumerator enumerator_17584 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (491)), true) ;
    const GGS_alarm_map::cElement * operand_17584 = NULL ;
    while (((operand_17584 = enumerator_17584.nextObject ()))) {
      macroValidPointer (operand_17584) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (492)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (493)),  operand_17584->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) COMMA_SOURCE_FILE_AT_LINE (493)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (494)),  operand_17584->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (494)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (494)) COMMA_SOURCE_FILE_AT_LINE (494)) ;
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_17584->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (496)) COMMA_SOURCE_FILE_AT_LINE (496)) ;
      { const GGS_autostart_obj _var_18813 = operand_17584->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (498)) ; // CAST instruction
        if (_var_18813.getPtr () != NULL) {
          macroValidPointer (_var_18813.getPtr ()) ;
          if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_18813.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_autostart (_var_18813.getPtr ()) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (500)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (500)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMTIME") COMMA_SOURCE_FILE_AT_LINE (501)),  var_cas_autostart.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (501)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (501)) COMMA_SOURCE_FILE_AT_LINE (501)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("CYCLETIME") COMMA_SOURCE_FILE_AT_LINE (502)),  var_cas_autostart.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (502)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (502)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
            GGS_goilTemplateFieldMapList  var_cas_appmodesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
            {
              GGS_stringset::cEnumerator enumerator_18286 (var_cas_autostart.reader_app_modes (inLexique COMMA_SOURCE_FILE_AT_LINE (504)), true) ;
              while (enumerator_18286.hasCurrentObject ()) {
                GGS_goilTemplateFieldMap  var_cas_appModeFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (505)) ;
                ::routine_addStringFieldValue (inLexique,  var_cas_appModeFields,  function_lstringWith (inLexique, GGS_string ("APPMODE") COMMA_SOURCE_FILE_AT_LINE (506)),  enumerator_18286._key (HERE) COMMA_SOURCE_FILE_AT_LINE (506)) ;
                var_cas_appmodesList.addAssign_operation (var_cas_appModeFields) ;
                enumerator_18286.next () ;
              }
            }
            ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("APPMODES") COMMA_SOURCE_FILE_AT_LINE (509)),  var_cas_appmodesList COMMA_SOURCE_FILE_AT_LINE (509)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_18813.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (511)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (511)) ;
          }else if (typeid (cPtr_autostart_void) == typeid (* (_var_18813.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (513)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (513)) ;
          }else{
          }
        }
      }
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_17584->mKey COMMA_SOURCE_FILE_AT_LINE (516)) ;
      var_cas_alarmsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ALARMS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (520)),  var_cas_alarmsList COMMA_SOURCE_FILE_AT_LINE (520)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAlarmsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourcesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourcesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_resourcesPrio,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourcesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_regularList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_internalList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_resource_map::cEnumerator enumerator_19311 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (534)), true) ;
    const GGS_resource_map::cElement * operand_19311 = NULL ;
    while (((operand_19311 = enumerator_19311.nextObject ()))) {
      macroValidPointer (operand_19311) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (535)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (536)),  operand_19311->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (536)) COMMA_SOURCE_FILE_AT_LINE (536)) ;
      GGS_uint  var_cas_priority ;
      GGS_uint  automatic_var_19519_0 ;
      if (var_cas_resourcesPrio.isBuilt ()) {
        var_cas_resourcesPrio (HERE)->method_get (inLexique, operand_19311->mKey, var_cas_priority, automatic_var_19519_0 COMMA_SOURCE_FILE_AT_LINE (538)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (539)),  var_cas_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (539)) COMMA_SOURCE_FILE_AT_LINE (539)) ;
      GGS_goilTemplateFieldMapList  var_cas_taskUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_task_map::cEnumerator enumerator_19679 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (542)), true) ;
        const GGS_task_map::cElement * operand_19679 = NULL ;
        while (((operand_19679 = enumerator_19679.nextObject ()))) {
          macroValidPointer (operand_19679) ;
          const GGS_bool cond_19934 = function_isInLstringlist (inLexique, operand_19679->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (543)), operand_19311->mKey COMMA_SOURCE_FILE_AT_LINE (543)) ;
          if (cond_19934.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (544)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (545)),  operand_19679->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (545)) COMMA_SOURCE_FILE_AT_LINE (545)) ;
            var_cas_taskUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (550)),  var_cas_taskUsage COMMA_SOURCE_FILE_AT_LINE (550)) ;
      GGS_goilTemplateFieldMapList  var_cas_isrUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_isr_map::cEnumerator enumerator_20111 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (553)), true) ;
        const GGS_isr_map::cElement * operand_20111 = NULL ;
        while (((operand_20111 = enumerator_20111.nextObject ()))) {
          macroValidPointer (operand_20111) ;
          const GGS_bool cond_20363 = function_isInLstringlist (inLexique, operand_20111->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (554)), operand_19311->mKey COMMA_SOURCE_FILE_AT_LINE (554)) ;
          if (cond_20363.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (555)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (556)),  operand_20111->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (556)) COMMA_SOURCE_FILE_AT_LINE (556)) ;
            var_cas_isrUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (561)),  var_cas_isrUsage COMMA_SOURCE_FILE_AT_LINE (561)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_19311->mKey COMMA_SOURCE_FILE_AT_LINE (563)) ;
      { const GGS_resource_property_obj _var_20916 = operand_19311->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (566)) ; // CAST instruction
        if (_var_20916.getPtr () != NULL) {
          macroValidPointer (_var_20916.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_20916.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_20916.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_20916.getPtr ()))) {
            var_cas_internalList.addAssign_operation (var_cas_fieldMap) ;
          }else{
            operand_19311->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (574)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (574)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (575)) ;
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (577)),  var_cas_regularList COMMA_SOURCE_FILE_AT_LINE (577)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (578)),  var_cas_internalList COMMA_SOURCE_FILE_AT_LINE (578)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourcesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@receiverSortedList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverSortedList::
elementOf_GGS_receiverSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverSortedList * operand = (const elementOf_GGS_receiverSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = - receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Sorted list '@receiverSortedList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverSortedList ("receiverSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverSortedList::GGS_receiverSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList::
GGS_receiverSortedList (const GGS_receiverSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isNotEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::
operator_concat (const GGS_receiverSortedList & inOperand) const {
  GGS_receiverSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
dotAssign_operation (const GGS_receiverSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_emptySortedList (void) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverSortedList * p = dynamic_cast <const GGS_receiverSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@receiverReverseSortedList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverReverseSortedList::
elementOf_GGS_receiverReverseSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverReverseSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverReverseSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverReverseSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverReverseSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverReverseSortedList * operand = (const elementOf_GGS_receiverReverseSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverReverseSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Sorted list '@receiverReverseSortedList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverReverseSortedList ("receiverReverseSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::GGS_receiverReverseSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::
GGS_receiverReverseSortedList (const GGS_receiverReverseSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isNotEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::
operator_concat (const GGS_receiverReverseSortedList & inOperand) const {
  GGS_receiverReverseSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
dotAssign_operation (const GGS_receiverReverseSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverReverseSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_emptySortedList (void) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverReverseSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverReverseSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverReverseSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverReverseSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverReverseSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverReverseSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverReverseSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverReverseSortedList * p = dynamic_cast <const GGS_receiverReverseSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverReverseSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverReverseSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverReverseSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setFilter"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setFilter (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_filter_prop_obj   var_cas_filter
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setFilter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_filter_prop_obj _var_24723 = var_cas_filter ; // CAST instruction
    if (_var_24723.getPtr () != NULL) {
      macroValidPointer (_var_24723.getPtr ()) ;
      if (typeid (cPtr_always_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (612)) COMMA_SOURCE_FILE_AT_LINE (612)),  GGS_string ("ALWAYS") COMMA_SOURCE_FILE_AT_LINE (612)) ;
      }else if (typeid (cPtr_never_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (614)) COMMA_SOURCE_FILE_AT_LINE (614)),  GGS_string ("NEVER") COMMA_SOURCE_FILE_AT_LINE (614)) ;
      }else if (typeid (cPtr_maskednewequalsx_filter) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_maskednewequalsx_filter var_cas_maskedNewEqualsXFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (616)) COMMA_SOURCE_FILE_AT_LINE (616)),  GGS_string ("MASKEDNEWEQUALSX") COMMA_SOURCE_FILE_AT_LINE (616)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (617)) COMMA_SOURCE_FILE_AT_LINE (617)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewEqualsXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (618)) COMMA_SOURCE_FILE_AT_LINE (618)) ;
      }else if (typeid (cPtr_maskednewdiffersx_filter) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_maskednewdiffersx_filter var_cas_maskedNewDiffersXFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (620)) COMMA_SOURCE_FILE_AT_LINE (620)),  GGS_string ("MASKEDNEWDIFFERSX") COMMA_SOURCE_FILE_AT_LINE (620)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (621)) COMMA_SOURCE_FILE_AT_LINE (621)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewDiffersXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (622)) COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }else if (typeid (cPtr_newisequal_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (624)) COMMA_SOURCE_FILE_AT_LINE (624)),  GGS_string ("NEWISEQUAL") COMMA_SOURCE_FILE_AT_LINE (624)) ;
      }else if (typeid (cPtr_newisdifferent_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (626)) COMMA_SOURCE_FILE_AT_LINE (626)),  GGS_string ("NEWISDIFFERENT") COMMA_SOURCE_FILE_AT_LINE (626)) ;
      }else if (typeid (cPtr_maskednewequalsmaskedold_filter) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_maskednewequalsmaskedold_filter var_cas_maskedNewEqualsMaskedOldFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (628)) COMMA_SOURCE_FILE_AT_LINE (628)),  GGS_string ("MASKEDNEWEQUALSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (628)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (629)) COMMA_SOURCE_FILE_AT_LINE (629)) ;
      }else if (typeid (cPtr_maskednewdiffersmaskedold_filter) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_maskednewdiffersmaskedold_filter var_cas_maskedNewDiffersMaskedOldFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (631)) COMMA_SOURCE_FILE_AT_LINE (631)),  GGS_string ("MASKEDNEWDIFFERSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (631)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (632)) COMMA_SOURCE_FILE_AT_LINE (632)) ;
      }else if (typeid (cPtr_newiswithin) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_newiswithin var_cas_newIsWithinFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (634)) COMMA_SOURCE_FILE_AT_LINE (634)),  GGS_string ("NEWISWITHIN") COMMA_SOURCE_FILE_AT_LINE (634)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsWithinFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (635)) COMMA_SOURCE_FILE_AT_LINE (635)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsWithinFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (636)) COMMA_SOURCE_FILE_AT_LINE (636)) ;
      }else if (typeid (cPtr_newisoutside) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_newisoutside var_cas_newIsOutsideFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (638)) COMMA_SOURCE_FILE_AT_LINE (638)),  GGS_string ("NEWISOUTSIDE") COMMA_SOURCE_FILE_AT_LINE (638)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsOutsideFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (639)) COMMA_SOURCE_FILE_AT_LINE (639)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsOutsideFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (640)) COMMA_SOURCE_FILE_AT_LINE (640)) ;
      }else if (typeid (cPtr_newisgreater_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_SOURCE_FILE_AT_LINE (642)),  GGS_string ("NEWISGREATER") COMMA_SOURCE_FILE_AT_LINE (642)) ;
      }else if (typeid (cPtr_newislessorequal_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (644)) COMMA_SOURCE_FILE_AT_LINE (644)),  GGS_string ("NEWISLESSOREQUAL") COMMA_SOURCE_FILE_AT_LINE (644)) ;
      }else if (typeid (cPtr_newisless_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (646)) COMMA_SOURCE_FILE_AT_LINE (646)),  GGS_string ("NEWISLESS") COMMA_SOURCE_FILE_AT_LINE (646)) ;
      }else if (typeid (cPtr_newisgreaterorequal_filter) == typeid (* (_var_24723.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)),  GGS_string ("NEWISGREATEROREQUAL") COMMA_SOURCE_FILE_AT_LINE (648)) ;
      }else if (typeid (cPtr_oneeveryn_filter) == typeid (* (_var_24723.getPtr ()))) {
        const GGS_oneeveryn_filter var_cas_oneEveryNFilter (_var_24723.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (650)) COMMA_SOURCE_FILE_AT_LINE (650)),  GGS_string ("ONEEVERYN") COMMA_SOURCE_FILE_AT_LINE (650)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PERIOD"),  var_cas_oneEveryNFilter.reader_period (inLexique COMMA_SOURCE_FILE_AT_LINE (651)) COMMA_SOURCE_FILE_AT_LINE (651)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("OFFSET"),  var_cas_oneEveryNFilter.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (652)) COMMA_SOURCE_FILE_AT_LINE (652)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setFilter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMessagesList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMessagesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMessagesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_receiverSortedList  var_cas_internalReceiversList = GGS_receiverSortedList ::constructor_emptySortedList () ;
  {
    GGS_message_map::cEnumerator enumerator_25107 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (665)), true) ;
    const GGS_message_map::cElement * operand_25107 = NULL ;
    while (((operand_25107 = enumerator_25107.nextObject ()))) {
      macroValidPointer (operand_25107) ;
      { const GGS_mess_prop_obj _var_25925 = operand_25107->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (666)) ; // CAST instruction
        if (_var_25925.getPtr () != NULL) {
          macroValidPointer (_var_25925.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_25925.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_25925.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (668)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_25107->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (669)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (669)), operand_25107->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (669)), operand_25107->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (669))) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_25925.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_25925.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (671)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_25107->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (672)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (672)), operand_25107->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (672)), operand_25107->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (672))) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_25925.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_25925.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (674)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_25107->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (675)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (675)), operand_25107->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (675)), operand_25107->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (675))) ;
          }else{
          }
        }
      }
    }
  }
  GGS_lstringMap  var_cas_internalTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (688)) ;
  GGS_lstringMap  var_cas_nextTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (689)) ;
  GGS_receiverReverseSortedList  var_cas_actualInternalReceiverList = GGS_receiverReverseSortedList ::constructor_emptySortedList () ;
  GGS_string var_cas_previousReceiver = GGS_string ("") ;
  GGS_string var_cas_previousSender = GGS_string ("") ;
  {
    GGS_receiverSortedList::cEnumerator enumerator_26674 (var_cas_internalReceiversList, true) ;
    const GGS_receiverSortedList::cElement * operand_26674 = NULL ;
    while (((operand_26674 = enumerator_26674.nextObject ()))) {
      macroValidPointer (operand_26674) ;
      const GGS_bool cond_26843 = (var_cas_internalTargets.reader_hasKey (operand_26674->senderName)).operator_not () ;
      if (cond_26843.isBuiltAndTrue ()) {
        var_cas_internalTargets.modifier_put (inLexique, function_lstringWith (inLexique, operand_26674->senderName COMMA_SOURCE_FILE_AT_LINE (695)), GGS_lstring ::constructor_new (inLexique, operand_26674->receiverName, operand_26674->receiverLocation COMMA_SOURCE_FILE_AT_LINE (695)) COMMA_SOURCE_FILE_AT_LINE (695)) ;
      }
      const GGS_bool cond_27003 = (operand_26674->senderName).operator_isEqual (var_cas_previousSender) ;
      if (cond_27003.isBuiltAndTrue ()) {
        var_cas_nextTargets.modifier_put (inLexique, function_lstringWith (inLexique, var_cas_previousReceiver COMMA_SOURCE_FILE_AT_LINE (698)), GGS_lstring ::constructor_new (inLexique, operand_26674->receiverName, operand_26674->receiverLocation COMMA_SOURCE_FILE_AT_LINE (698)) COMMA_SOURCE_FILE_AT_LINE (698)) ;
      }
      var_cas_previousSender = operand_26674->senderName ;
      var_cas_previousReceiver = operand_26674->receiverName ;
      var_cas_actualInternalReceiverList.addAssign_operation (operand_26674->mess, operand_26674->senderName, operand_26674->senderLocation, operand_26674->receiverName, operand_26674->receiverLocation) ;
    }
  }
  GGS_goilTemplateFieldMapList  var_cas_messagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_sendMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_receiveMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_receiverReverseSortedList::cEnumerator enumerator_27497 (var_cas_actualInternalReceiverList, true) ;
    const GGS_receiverReverseSortedList::cElement * operand_27497 = NULL ;
    while (((operand_27497 = enumerator_27497.nextObject ()))) {
      macroValidPointer (operand_27497) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_27497->receiverLocation COMMA_SOURCE_FILE_AT_LINE (714)),  operand_27497->receiverName COMMA_SOURCE_FILE_AT_LINE (714)) ;
      const GGS_bool cond_27970 = var_cas_nextTargets.reader_hasKey (operand_27497->receiverName) ;
      if (cond_27970.isBuiltAndTrue ()) {
        GGS_lstring  var_cas_nextReceiveMessage ;
        if (var_cas_nextTargets.isBuilt ()) {
          var_cas_nextTargets (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_27497->receiverName, operand_27497->receiverLocation COMMA_SOURCE_FILE_AT_LINE (718)), var_cas_nextReceiveMessage COMMA_SOURCE_FILE_AT_LINE (718)) ;
        }
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NEXT"), var_cas_nextReceiveMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (719)) COMMA_SOURCE_FILE_AT_LINE (719)),  var_cas_nextReceiveMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (719)) COMMA_SOURCE_FILE_AT_LINE (719)) ;
      }
      GGS_mess_prop_obj  var_cas_messageProperty = operand_27497->mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (721)) ;
      { const GGS_mess_prop_obj _var_30531 = var_cas_messageProperty ; // CAST instruction
        if (_var_30531.getPtr () != NULL) {
          macroValidPointer (_var_30531.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_30531.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_30531.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (724)) COMMA_SOURCE_FILE_AT_LINE (724)),  GGS_string ("RECEIVE_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (724)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (725)) COMMA_SOURCE_FILE_AT_LINE (725)) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_30531.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_30531.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (727)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (728)) COMMA_SOURCE_FILE_AT_LINE (728)),  GGS_string ("RECEIVE_UNQUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (728)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (729)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_28722 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (731)) ;
            if (temp_28722.isBuilt ()) {
              temp_28722 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (731)) ;
            }
            { const GGS_mess_prop_obj _var_29479 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (732)) ; // CAST instruction
              if (_var_29479.getPtr () != NULL) {
                macroValidPointer (_var_29479.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_29479.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_29479.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (734)) COMMA_SOURCE_FILE_AT_LINE (734)) ;
                  GGS_basic_type  var_cas_initialValue = var_cas_receiveUnqueuedInternalMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (735)) ;
                  GGS_string var_cas_initialValueString ;
                  if (var_cas_initialValue.isBuilt ()) {
                    var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (737)) ;
                  }
                  const GGS_bool cond_29268 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
                  if (cond_29268.isBuiltAndTrue ()) {
                    ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (739)) COMMA_SOURCE_FILE_AT_LINE (739)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (739)) ;
                  }
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (742)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (743)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (744)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveUnqueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (745)) COMMA_SOURCE_FILE_AT_LINE (745)) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_30531.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_30531.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (748)) COMMA_SOURCE_FILE_AT_LINE (748)),  GGS_string ("RECEIVE_QUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (748)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (749)) ;
            ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("QUEUESIZE"),  var_cas_receiveQueuedInternalMessage.reader_queuesize (inLexique COMMA_SOURCE_FILE_AT_LINE (750)) COMMA_SOURCE_FILE_AT_LINE (750)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_30027 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (752)) ;
            if (temp_30027.isBuilt ()) {
              temp_30027 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (752)) ;
            }
            { const GGS_mess_prop_obj _var_30438 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (753)) ; // CAST instruction
              if (_var_30438.getPtr () != NULL) {
                macroValidPointer (_var_30438.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_30438.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_30438.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (755)) COMMA_SOURCE_FILE_AT_LINE (755)) ;
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (757)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (758)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (759)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveQueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (761)) COMMA_SOURCE_FILE_AT_LINE (761)) ;
          }else{
          }
        }
      }
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_27497->mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (764)) COMMA_SOURCE_FILE_AT_LINE (764)) ;
      var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
      var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_30688 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (769)), true) ;
    const GGS_message_map::cElement * operand_30688 = NULL ;
    while (((operand_30688 = enumerator_30688.nextObject ()))) {
      macroValidPointer (operand_30688) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (770)) ;
      GGS_mess_prop_obj  var_cas_messageProperty = operand_30688->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (771)) ;
      GGS_bool var_cas_okMessage = GGS_bool (true) ;
      GGS_bool var_cas_isSendMessage = GGS_bool (true) ;
      { const GGS_mess_prop_obj _var_33863 = var_cas_messageProperty ; // CAST instruction
        if (_var_33863.getPtr () != NULL) {
          macroValidPointer (_var_33863.getPtr ()) ;
          if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_33863.getPtr ()))) {
            const GGS_ssi_mess_prop var_cas_sendStaticInternalMessage (_var_33863.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (776)) COMMA_SOURCE_FILE_AT_LINE (776)),  GGS_string ("SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (776)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) COMMA_SOURCE_FILE_AT_LINE (777)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_30688->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (779)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (780)) ;
          }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_33863.getPtr ()))) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) COMMA_SOURCE_FILE_AT_LINE (782)),  GGS_string ("SEND_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (782)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_30688->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (784)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (785)) ;
          }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_33863.getPtr ()))) {
            const GGS_rzs_mess_prop var_cas_receiveZeroSendersMessage (_var_33863.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) COMMA_SOURCE_FILE_AT_LINE (808)),  GGS_string ("RECEIVE_ZERO_SENDERS") COMMA_SOURCE_FILE_AT_LINE (808)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_receiveZeroSendersMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) COMMA_SOURCE_FILE_AT_LINE (809)) ;
            GGS_basic_type  var_cas_initialValue = var_cas_receiveZeroSendersMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (810)) ;
            GGS_string var_cas_initialValueString ;
            if (var_cas_initialValue.isBuilt ()) {
              var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (812)) ;
            }
            const GGS_bool cond_33786 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
            if (cond_33786.isBuiltAndTrue ()) {
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (814)) COMMA_SOURCE_FILE_AT_LINE (814)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (814)) ;
            }
            var_cas_isSendMessage = GGS_bool (false) ;
          }else{
            var_cas_okMessage = GGS_bool (false) ;
          }
        }
      }
      const GGS_bool cond_34141 = var_cas_okMessage ;
      if (cond_34141.isBuiltAndTrue ()) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (821)),  operand_30688->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (821)) COMMA_SOURCE_FILE_AT_LINE (821)) ;
        var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
        const GGS_bool cond_34077 = var_cas_isSendMessage ;
        if (cond_34077.isBuiltAndTrue ()) {
          var_cas_sendMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }else if (cond_34077.isBuiltAndFalse ()) {
          var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (830)),  var_cas_messagesList COMMA_SOURCE_FILE_AT_LINE (830)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SENDMESSAGES") COMMA_SOURCE_FILE_AT_LINE (831)),  var_cas_sendMessagesList COMMA_SOURCE_FILE_AT_LINE (831)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("RECEIVEMESSAGES") COMMA_SOURCE_FILE_AT_LINE (832)),  var_cas_receiveMessagesList COMMA_SOURCE_FILE_AT_LINE (832)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMessagesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setScheduletablesList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScheduletablesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScheduletablesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_scheduletablesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_scheduletable_map::cEnumerator enumerator_34600 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (844)), true) ;
    const GGS_scheduletable_map::cElement * operand_34600 = NULL ;
    while (((operand_34600 = enumerator_34600.nextObject ()))) {
      macroValidPointer (operand_34600) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (845)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (846)),  operand_34600->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (846)) COMMA_SOURCE_FILE_AT_LINE (846)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (847)),  operand_34600->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (847)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (847)) COMMA_SOURCE_FILE_AT_LINE (847)) ;
      GGS_bool var_cas_periodic = GGS_bool (false) ;
      { const GGS_basic_type _var_34971 = operand_34600->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (850)) ; // CAST instruction
        if (_var_34971.getPtr () != NULL) {
          macroValidPointer (_var_34971.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_34971.getPtr ()))) {
            const GGS_bool_class var_cas_p (_var_34971.getPtr ()) ;
            var_cas_periodic = var_cas_p.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (851)) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PERIODIC") COMMA_SOURCE_FILE_AT_LINE (853)),  var_cas_periodic COMMA_SOURCE_FILE_AT_LINE (853)) ;
      GGS_lstring  var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDTABLE_NO_SYNC"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (855)) ;
      GGS_luint64  var_cas_precision = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (856)) ;
      { const GGS_ltgt_sync_obj _var_35509 = operand_34600->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (857)) ; // CAST instruction
        if (_var_35509.getPtr () != NULL) {
          macroValidPointer (_var_35509.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_35509.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_syncStrategyTrue (_var_35509.getPtr ()) ;
            GGS_lstring  var_cas_strategy = var_cas_syncStrategyTrue.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (859)) ;
            var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("SCHEDTABLE_")).operator_concat (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (860)))).operator_concat (GGS_string ("_SYNC")), var_cas_strategy.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (860)) COMMA_SOURCE_FILE_AT_LINE (860)) ;
            var_cas_precision = function_luint64OrError (inLexique, var_cas_syncStrategyTrue.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (861)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (861)) ;
          }else{
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SYNCSTRATEGY"),  var_cas_syncStrategy COMMA_SOURCE_FILE_AT_LINE (863)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PRECISION"),  var_cas_precision COMMA_SOURCE_FILE_AT_LINE (864)) ;
      GGS_lstring  var_cas_scheduletableState = function_lstringWith (inLexique, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (866)) ;
      GGS_luint64  var_cas_scheduletableDate = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (867)) ;
      { const GGS_autostart_obj _var_36675 = operand_34600->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (868)) ; // CAST instruction
        if (_var_36675.getPtr () != NULL) {
          macroValidPointer (_var_36675.getPtr ()) ;
          if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_36675.getPtr ()))) {
            const GGS_sd_autostart_false var_cas_autostartFalse (_var_36675.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_STOPPED"), var_cas_autostartFalse.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (870)) COMMA_SOURCE_FILE_AT_LINE (870)) ;
          }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_36675.getPtr ()))) {
            const GGS_sd_autostart_synchron var_cas_autostartSynchron (_var_36675.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_SYNCHRON"), var_cas_autostartSynchron.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) COMMA_SOURCE_FILE_AT_LINE (872)) ;
          }else if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_36675.getPtr ()))) {
            const GGS_sd_autostart_relative var_cas_autostartRelative (_var_36675.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_RELATIVE"), var_cas_autostartRelative.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (874)) COMMA_SOURCE_FILE_AT_LINE (874)) ;
            var_cas_scheduletableDate = var_cas_autostartRelative.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (875)) ;
          }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_36675.getPtr ()))) {
            const GGS_sd_autostart_absolute var_cas_autostartAbsolute (_var_36675.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_ABSOLUTE"), var_cas_autostartAbsolute.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (877)) COMMA_SOURCE_FILE_AT_LINE (877)) ;
            var_cas_scheduletableDate = var_cas_autostartAbsolute.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (878)) ;
          }else{
            operand_34600->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table ")).operator_concat (operand_34600->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (879))) COMMA_SOURCE_FILE_AT_LINE (880)) ;
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("STATE"),  var_cas_scheduletableState COMMA_SOURCE_FILE_AT_LINE (881)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("DATE"),  var_cas_scheduletableDate COMMA_SOURCE_FILE_AT_LINE (882)) ;
      GGS_uint64  var_cas_length = GGS_uint64 (0ULL) ;
      { const GGS_basic_type _var_37099 = operand_34600->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (885)) ; // CAST instruction
        if (_var_37099.getPtr () != NULL) {
          macroValidPointer (_var_37099.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_37099.getPtr ()))) {
            const GGS_uint64_class var_cas_len (_var_37099.getPtr ()) ;
            var_cas_length = var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (887)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LENGTH"), var_cas_len.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (888)) COMMA_SOURCE_FILE_AT_LINE (888)),  var_cas_length COMMA_SOURCE_FILE_AT_LINE (888)) ;
          }else{
            operand_34600->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for LENGTH attribute") COMMA_SOURCE_FILE_AT_LINE (890)) ;
          }
        }
      }
      GGS_expiry_point_list  var_cas_expiryPoints = operand_34600->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (894)) ;
      GGS_expiry_point_obj  var_cas_lastPoint ;
      GGS_uint64  var_cas_lastOffset ;
      var_cas_expiryPoints.modifier_popGreatest (inLexique, var_cas_lastOffset, var_cas_lastPoint COMMA_SOURCE_FILE_AT_LINE (897)) ;
      const GGS_bool cond_37627 = (var_cas_lastOffset).operator_isEqual (var_cas_length) ;
      if (cond_37627.isBuiltAndTrue ()) {
        GGS_action_list  var_cas_actions = var_cas_lastPoint.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (900)) ;
        var_cas_actions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_34600->mKey COMMA_SOURCE_FILE_AT_LINE (901))) ;
        var_cas_lastPoint.modifier_setActions (inLexique, var_cas_actions COMMA_SOURCE_FILE_AT_LINE (902)) ;
      }else if (cond_37627.isBuiltAndFalse ()) {
        GGS_action_list  var_cas_finalizeExpiryPointActions = GGS_action_list ::constructor_emptySortedList () ;
        var_cas_finalizeExpiryPointActions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_34600->mKey COMMA_SOURCE_FILE_AT_LINE (906))) ;
        GGS_expiry_point_obj  var_cas_finalizeExpiryPoint = GGS_expiry_point_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (909)), GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length COMMA_SOURCE_FILE_AT_LINE (910)), GGS_lstring ::constructor_new (inLexique, GGS_string ("finalize"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (911)), GGS_adjustable_void ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (912)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (912)), var_cas_finalizeExpiryPointActions COMMA_SOURCE_FILE_AT_LINE (908)) ;
        var_cas_expiryPoints.addAssign_operation (var_cas_length, var_cas_finalizeExpiryPoint) ;
      }
      var_cas_expiryPoints.addAssign_operation (var_cas_lastOffset, var_cas_lastPoint) ;
      GGS_goilTemplateFieldMapList  var_cas_expiryPointsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_uint64  var_cas_previousOffset = GGS_uint64 (0ULL) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_38405 (var_cas_expiryPoints, true) ;
        const GGS_expiry_point_list::cElement * operand_38405 = NULL ;
        while (((operand_38405 = enumerator_38405.nextObject ()))) {
          macroValidPointer (operand_38405) ;
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (923)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ABSOLUTEOFFSET") COMMA_SOURCE_FILE_AT_LINE (924)),  operand_38405->off COMMA_SOURCE_FILE_AT_LINE (924)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RELATIVEOFFSET") COMMA_SOURCE_FILE_AT_LINE (925)),  operand_38405->off.substract_operation (inLexique, var_cas_previousOffset COMMA_SOURCE_FILE_AT_LINE (925)) COMMA_SOURCE_FILE_AT_LINE (925)) ;
          var_cas_previousOffset = operand_38405->off ;
          GGS_goilTemplateFieldMapList  var_cas_actionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_action_list::cEnumerator enumerator_38840 (operand_38405->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (930)), true) ;
            const GGS_action_list::cElement * operand_38840 = NULL ;
            while (((operand_38840 = enumerator_38840.nextObject ()))) {
              macroValidPointer (operand_38840) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (931)) ;
              ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_38840->actionobj COMMA_SOURCE_FILE_AT_LINE (932)) ;
              var_cas_actionsList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTIONS") COMMA_SOURCE_FILE_AT_LINE (935)),  var_cas_actionsList COMMA_SOURCE_FILE_AT_LINE (935)) ;
          GGS_luint64  var_cas_maxAdvance = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (937)) ;
          GGS_luint64  var_cas_maxRetard = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (938)) ;
          { const GGS_adjustable_obj _var_39469 = operand_38405->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (939)) ; // CAST instruction
            if (_var_39469.getPtr () != NULL) {
              macroValidPointer (_var_39469.getPtr ()) ;
              if (typeid (cPtr_adjustable_true) == typeid (* (_var_39469.getPtr ()))) {
                const GGS_adjustable_true var_cas_adjustableExpiryPoint (_var_39469.getPtr ()) ;
                var_cas_maxAdvance = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (941)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (941)) ;
                var_cas_maxRetard = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (942)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (942)) ;
              }else{
              }
            }
          }
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXRETARD"),  var_cas_maxRetard COMMA_SOURCE_FILE_AT_LINE (944)) ;
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXADVANCE"),  var_cas_maxAdvance COMMA_SOURCE_FILE_AT_LINE (945)) ;
          var_cas_expiryPointsList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EXPIRYPOINTS") COMMA_SOURCE_FILE_AT_LINE (949)),  var_cas_expiryPointsList COMMA_SOURCE_FILE_AT_LINE (949)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_34600->mKey COMMA_SOURCE_FILE_AT_LINE (951)) ;
      var_cas_scheduletablesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (955)),  var_cas_scheduletablesList COMMA_SOURCE_FILE_AT_LINE (955)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScheduletablesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "computeBinaryVector"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeBinaryVector (C_Compiler & inLexique,
                                const GGS_string  var_cas_vec,
                                GGS_string & var_cas_res,
                                GGS_uint  & var_cas_byteCount
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeBinaryVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_byteCount = var_cas_vec.reader_length ().divide_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (971)) ;
  const GGS_bool cond_40310 = (var_cas_vec.reader_length ().modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (972))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_40310.isBuiltAndTrue ()) {
    var_cas_byteCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (972)) ;
  }
  GGS_stringlist  var_cas_data = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  GGS_uint  var_cas_start = GGS_uint (0U) ;
  GGS_uint _variant_40861 = var_cas_byteCount ;
  GGS_bool _condition_40861 (_variant_40861.isBuilt (), true) ;
  while (_condition_40861.isBuiltAndTrue ()) {
    _condition_40861 = (var_cas_i).operator_strictInf (var_cas_byteCount) ;
    if (_condition_40861.isBuiltAndTrue ()) {
      if (_variant_40861.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (997)) ;
        _condition_40861 = GGS_bool (false) ;
      }else{
        _variant_40861.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_byte = var_cas_vec.reader_subString (var_cas_start, GGS_uint (8U)).reader_reversedString () ;
        GGS_uint  var_cas_bitPos = GGS_uint (0U) ;
        GGS_uint  var_cas_val = GGS_uint (0U) ;
        GGS_uint _variant_40785 = GGS_uint (8U) ;
        GGS_bool _condition_40785 (_variant_40785.isBuilt (), true) ;
        while (_condition_40785.isBuiltAndTrue ()) {
          _condition_40785 = (var_cas_bitPos).operator_strictInf (var_cas_byte.reader_length ()) ;
          if (_condition_40785.isBuiltAndTrue ()) {
            if (_variant_40785.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (993)) ;
              _condition_40785 = GGS_bool (false) ;
            }else{
              _variant_40785.decrement_operation (inLexique COMMA_HERE) ;
              GGS_char var_cas_bit = var_cas_byte.reader_characterAtIndex (inLexique, var_cas_bitPos COMMA_SOURCE_FILE_AT_LINE (987)) ;
              var_cas_val = var_cas_val.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (988)) ;
              const GGS_bool cond_40755 = (var_cas_bit).operator_isEqual (GGS_char (TO_UNICODE ('1'))) ;
              if (cond_40755.isBuiltAndTrue ()) {
                var_cas_val.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (990)) ;
              }
              var_cas_bitPos.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (992)) ;
            }
          }
        }
        var_cas_data.addAssign_operation (var_cas_val.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (994))) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (995)) ;
        var_cas_start = var_cas_start.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (996)) ;
      }
    }
  }
  var_cas_res = GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_data, GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (998)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeBinaryVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeVector"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeVector (C_Compiler & inLexique,
                                GGS_string & var_cas_vector,
                                const GGS_lstring   var_cas_objectName,
                                const GGS_lstring   var_cas_applicationName,
                                const GGS_lstringlist   var_cas_ownedObjects,
                                const GGS_lstringlist   var_cas_accessingObjects
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_41181 = function_isInLstringlist (inLexique, var_cas_ownedObjects, var_cas_objectName COMMA_SOURCE_FILE_AT_LINE (1008)) ;
  if (cond_41181.isBuiltAndTrue ()) {
    var_cas_vector.appendCString ("11") ;
  }else if (cond_41181.isBuiltAndFalse ()) {
    var_cas_vector.appendCString ("0") ;
    const GGS_bool cond_41333 = function_isInLstringlist (inLexique, var_cas_accessingObjects, var_cas_applicationName COMMA_SOURCE_FILE_AT_LINE (1013)) ;
    if (cond_41333.isBuiltAndTrue ()) {
      var_cas_vector.appendCString ("1") ;
    }else if (cond_41333.isBuiltAndFalse ()) {
      var_cas_vector.appendCString ("0") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setOsapplicationsList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsapplicationsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsapplicationsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_osapplicationsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_stringset  var_cas_trustedFunctionSet = GGS_stringset ::constructor_emptySet () ;
  GGS_tasks_by_type  var_cas_allTaskList = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1029)) ;
  {
    GGS_app_map::cEnumerator enumerator_41679 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1030)), true) ;
    const GGS_app_map::cElement * operand_41679 = NULL ;
    while (((operand_41679 = enumerator_41679.nextObject ()))) {
      macroValidPointer (operand_41679) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1031)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1032)),  operand_41679->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1032)) COMMA_SOURCE_FILE_AT_LINE (1032)) ;
      { const GGS_basic_type _var_42100 = operand_41679->mInfo.app.reader_restart (inLexique COMMA_SOURCE_FILE_AT_LINE (1035)) ; // CAST instruction
        if (_var_42100.getPtr () != NULL) {
          macroValidPointer (_var_42100.getPtr ()) ;
          if (typeid (cPtr_string_class) == typeid (* (_var_42100.getPtr ()))) {
            const GGS_string_class var_cas_restartTask (_var_42100.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESTART"), var_cas_restartTask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) COMMA_SOURCE_FILE_AT_LINE (1037)),  var_cas_restartTask.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) COMMA_SOURCE_FILE_AT_LINE (1037)) ;
          }else{
          }
        }
      }
      GGS_bool var_cas_hasStartup ;
      { const GGS_basic_type _var_42308 = operand_41679->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)) ; // CAST instruction
        if (_var_42308.getPtr () != NULL) {
          macroValidPointer (_var_42308.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_42308.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_42308.getPtr ()) ;
            var_cas_hasStartup = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)) ;
          }else{
            var_cas_hasStartup = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSTARTUPHOOK"), operand_41679->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)) COMMA_SOURCE_FILE_AT_LINE (1047)),  var_cas_hasStartup COMMA_SOURCE_FILE_AT_LINE (1047)) ;
      GGS_bool var_cas_hasShutdown ;
      { const GGS_basic_type _var_42644 = operand_41679->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)) ; // CAST instruction
        if (_var_42644.getPtr () != NULL) {
          macroValidPointer (_var_42644.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_42644.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_42644.getPtr ()) ;
            var_cas_hasShutdown = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) ;
          }else{
            var_cas_hasShutdown = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSHUTDOWNHOOK"), operand_41679->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)) COMMA_SOURCE_FILE_AT_LINE (1056)),  var_cas_hasShutdown COMMA_SOURCE_FILE_AT_LINE (1056)) ;
      GGS_string var_cas_vector = GGS_string ("") ;
      GGS_string var_cas_binaryVector ;
      GGS_uint  var_cas_numberOfItems ;
      GGS_task_map  var_cas_allTasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      {
        GGS_tasks_by_type::cEnumerator enumerator_43006 (var_cas_allTaskList, true) ;
        const GGS_tasks_by_type::cElement * operand_43006 = NULL ;
        while (((operand_43006 = enumerator_43006.nextObject ()))) {
          macroValidPointer (operand_43006) ;
          GGS_task_obj  var_cas_taskItem ;
          if (var_cas_allTasks.isBuilt ()) {
            var_cas_allTasks (HERE)->method_get (inLexique, function_lstringWith (inLexique, operand_43006->name COMMA_SOURCE_FILE_AT_LINE (1068)), var_cas_taskItem COMMA_SOURCE_FILE_AT_LINE (1068)) ;
          }
          ::routine_computeVector (inLexique,  var_cas_vector,  function_lstringWith (inLexique, operand_43006->name COMMA_SOURCE_FILE_AT_LINE (1069)),  operand_41679->mKey,  operand_41679->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1069)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1069)),  var_cas_taskItem.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1069)) COMMA_SOURCE_FILE_AT_LINE (1069)) ;
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_43281 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1072)), true) ;
        const GGS_isr_map::cElement * operand_43281 = NULL ;
        while (((operand_43281 = enumerator_43281.nextObject ()))) {
          macroValidPointer (operand_43281) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_43281->mKey,  operand_41679->mKey,  operand_41679->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)),  operand_43281->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)) COMMA_SOURCE_FILE_AT_LINE (1073)) ;
        }
      }
      var_cas_vector.appendCString ("01") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1077)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1077)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1078)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1079)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1079)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1080)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1080)) COMMA_SOURCE_FILE_AT_LINE (1080)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_alarm_map::cEnumerator enumerator_43921 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1084)), true) ;
        const GGS_alarm_map::cElement * operand_43921 = NULL ;
        while (((operand_43921 = enumerator_43921.nextObject ()))) {
          macroValidPointer (operand_43921) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_43921->mKey,  operand_41679->mKey,  operand_41679->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1085)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1085)),  operand_43921->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1085)) COMMA_SOURCE_FILE_AT_LINE (1085)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1087)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1087)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1089)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1089)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1090)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)) COMMA_SOURCE_FILE_AT_LINE (1090)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_resource_map::cEnumerator enumerator_44456 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)), true) ;
        const GGS_resource_map::cElement * operand_44456 = NULL ;
        while (((operand_44456 = enumerator_44456.nextObject ()))) {
          macroValidPointer (operand_44456) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_44456->mKey,  operand_41679->mKey,  operand_41679->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)),  operand_44456->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)) COMMA_SOURCE_FILE_AT_LINE (1095)) ;
        }
      }
      var_cas_vector.appendCString ("10") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1100)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1101)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1102)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1102)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1103)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_scheduletable_map::cEnumerator enumerator_45120 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1107)), true) ;
        const GGS_scheduletable_map::cElement * operand_45120 = NULL ;
        while (((operand_45120 = enumerator_45120.nextObject ()))) {
          macroValidPointer (operand_45120) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_45120->mKey,  operand_41679->mKey,  operand_41679->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1108)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1108)),  operand_45120->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1108)) COMMA_SOURCE_FILE_AT_LINE (1108)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1110)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1112)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1112)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1113)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1113)) COMMA_SOURCE_FILE_AT_LINE (1113)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_counter_map::cEnumerator enumerator_45706 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1117)), true) ;
        const GGS_counter_map::cElement * operand_45706 = NULL ;
        while (((operand_45706 = enumerator_45706.nextObject ()))) {
          macroValidPointer (operand_45706) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_45706->mKey,  operand_41679->mKey,  operand_41679->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1118)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1118)),  operand_45706->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1118)) COMMA_SOURCE_FILE_AT_LINE (1118)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1120)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1121)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1122)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1122)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1123)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) COMMA_SOURCE_FILE_AT_LINE (1123)) ;
      GGS_goilTemplateFieldMapList  var_cas_procList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46382 (operand_41679->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)), true) ;
        const GGS_ident_map::cElement * operand_46382 = NULL ;
        while (((operand_46382 = enumerator_46382.nextObject ()))) {
          macroValidPointer (operand_46382) ;
          GGS_goilTemplateFieldMap  var_cas_taskFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1130)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_taskFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46382->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) COMMA_SOURCE_FILE_AT_LINE (1131)),  operand_46382->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) COMMA_SOURCE_FILE_AT_LINE (1131)) ;
          var_cas_procList.addAssign_operation (var_cas_taskFieldMap) ;
          var_cas_taskList.addAssign_operation (var_cas_taskFieldMap) ;
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_46651 (operand_41679->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)), true) ;
        const GGS_ident_map::cElement * operand_46651 = NULL ;
        while (((operand_46651 = enumerator_46651.nextObject ()))) {
          macroValidPointer (operand_46651) ;
          GGS_goilTemplateFieldMap  var_cas_isrFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1136)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_isrFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46651->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)) COMMA_SOURCE_FILE_AT_LINE (1137)),  operand_46651->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)) COMMA_SOURCE_FILE_AT_LINE (1137)) ;
          GGS_isr_obj  var_cas_isr ;
          const GGS_isr_map  temp_46862 = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) ;
          if (temp_46862.isBuilt ()) {
            temp_46862 (HERE)->method_get (inLexique, operand_46651->mKey, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (1139)) ;
          }
          { const GGS_basic_type _var_47116 = var_cas_isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)) ; // CAST instruction
            if (_var_47116.getPtr () != NULL) {
              macroValidPointer (_var_47116.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_47116.getPtr ()))) {
                const GGS_uint64_class var_cas_cat (_var_47116.getPtr ()) ;
                const GGS_bool cond_47097 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1142))).operator_isEqual (GGS_uint64 (2ULL)) ;
                if (cond_47097.isBuiltAndTrue ()) {
                  var_cas_procList.addAssign_operation (var_cas_isrFieldMap) ;
                }
              }else{
              }
            }
          }
          var_cas_isrList.addAssign_operation (var_cas_isrFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (1150)),  var_cas_procList COMMA_SOURCE_FILE_AT_LINE (1150)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASKS") COMMA_SOURCE_FILE_AT_LINE (1151)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (1151)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ISRS") COMMA_SOURCE_FILE_AT_LINE (1152)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (1152)) ;
      GGS_goilTemplateFieldMapList  var_cas_alarmList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_47475 (operand_41679->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)), true) ;
        const GGS_ident_map::cElement * operand_47475 = NULL ;
        while (((operand_47475 = enumerator_47475.nextObject ()))) {
          macroValidPointer (operand_47475) ;
          GGS_goilTemplateFieldMap  var_cas_alarmFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1157)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_alarmFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_47475->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1158)) COMMA_SOURCE_FILE_AT_LINE (1158)),  operand_47475->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1158)) COMMA_SOURCE_FILE_AT_LINE (1158)) ;
          var_cas_alarmList.addAssign_operation (var_cas_alarmFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMS") COMMA_SOURCE_FILE_AT_LINE (1161)),  var_cas_alarmList COMMA_SOURCE_FILE_AT_LINE (1161)) ;
      GGS_goilTemplateFieldMapList  var_cas_resourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_regularResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_internalResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_48008 (operand_41679->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)), true) ;
        const GGS_ident_map::cElement * operand_48008 = NULL ;
        while (((operand_48008 = enumerator_48008.nextObject ()))) {
          macroValidPointer (operand_48008) ;
          GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_48008->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) COMMA_SOURCE_FILE_AT_LINE (1169)),  operand_48008->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) COMMA_SOURCE_FILE_AT_LINE (1169)) ;
          var_cas_resourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
          GGS_resource_map  var_cas_allResources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
          GGS_resource_obj  var_cas_resource ;
          if (var_cas_allResources.isBuilt ()) {
            var_cas_allResources (HERE)->method_get (inLexique, operand_48008->mKey, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (1173)) ;
          }
          { const GGS_resource_property_obj _var_48564 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1174)) ; // CAST instruction
            if (_var_48564.getPtr () != NULL) {
              macroValidPointer (_var_48564.getPtr ()) ;
              if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_48564.getPtr ()))) {
                var_cas_internalResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }else{
                var_cas_regularResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }
            }
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCES") COMMA_SOURCE_FILE_AT_LINE (1181)),  var_cas_resourcesList COMMA_SOURCE_FILE_AT_LINE (1181)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("REGULARRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1182)),  var_cas_regularResourcesList COMMA_SOURCE_FILE_AT_LINE (1182)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("INTERNALRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1183)),  var_cas_internalResourcesList COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      GGS_goilTemplateFieldMapList  var_cas_scheduletableList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_48963 (operand_41679->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1187)), true) ;
        const GGS_ident_map::cElement * operand_48963 = NULL ;
        while (((operand_48963 = enumerator_48963.nextObject ()))) {
          macroValidPointer (operand_48963) ;
          GGS_goilTemplateFieldMap  var_cas_scheduletableFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_scheduletableFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_48963->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1189)) COMMA_SOURCE_FILE_AT_LINE (1189)),  operand_48963->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1189)) COMMA_SOURCE_FILE_AT_LINE (1189)) ;
          var_cas_scheduletableList.addAssign_operation (var_cas_scheduletableFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (1192)),  var_cas_scheduletableList COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      GGS_goilTemplateFieldMapList  var_cas_counterList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_49420 (operand_41679->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)), true) ;
        const GGS_ident_map::cElement * operand_49420 = NULL ;
        while (((operand_49420 = enumerator_49420.nextObject ()))) {
          macroValidPointer (operand_49420) ;
          GGS_goilTemplateFieldMap  var_cas_counterFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_counterFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_49420->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) COMMA_SOURCE_FILE_AT_LINE (1198)),  operand_49420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) COMMA_SOURCE_FILE_AT_LINE (1198)) ;
          var_cas_counterList.addAssign_operation (var_cas_counterFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (1201)),  var_cas_counterList COMMA_SOURCE_FILE_AT_LINE (1201)) ;
      GGS_goilTemplateFieldMapList  var_cas_messageList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_49835 (operand_41679->mInfo.app.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)), true) ;
        const GGS_ident_map::cElement * operand_49835 = NULL ;
        while (((operand_49835 = enumerator_49835.nextObject ()))) {
          macroValidPointer (operand_49835) ;
          GGS_goilTemplateFieldMap  var_cas_messageFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_messageFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_49835->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1207)) COMMA_SOURCE_FILE_AT_LINE (1207)),  operand_49835->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1207)) COMMA_SOURCE_FILE_AT_LINE (1207)) ;
          var_cas_messageList.addAssign_operation (var_cas_messageFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (1210)),  var_cas_messageList COMMA_SOURCE_FILE_AT_LINE (1210)) ;
      var_cas_osapplicationsList.addAssign_operation (var_cas_fieldMap) ;
      { const GGS_app_trusted_obj _var_50407 = operand_41679->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)) ; // CAST instruction
        if (_var_50407.getPtr () != NULL) {
          macroValidPointer (_var_50407.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_50407.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_50407.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_50275 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)), true) ;
              while (enumerator_50275.hasCurrentObject ()) {
                var_cas_trustedFunctionSet.addAssign_operation (enumerator_50275._key (HERE)) ;
                enumerator_50275.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OSAPPLICATIONS") COMMA_SOURCE_FILE_AT_LINE (1221)),  var_cas_osapplicationsList COMMA_SOURCE_FILE_AT_LINE (1221)) ;
  GGS_goilTemplateFieldMapList  var_cas_trustedfunctionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_stringset::cEnumerator enumerator_50596 (var_cas_trustedFunctionSet, true) ;
    while (enumerator_50596.hasCurrentObject ()) {
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1226)),  enumerator_50596._key (HERE) COMMA_SOURCE_FILE_AT_LINE (1226)) ;
      var_cas_trustedfunctionsList.addAssign_operation (var_cas_fieldMap) ;
      enumerator_50596.next () ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRUSTEDFUNCTIONS") COMMA_SOURCE_FILE_AT_LINE (1229)),  var_cas_trustedfunctionsList COMMA_SOURCE_FILE_AT_LINE (1229)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsapplicationsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setReadyList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setReadyList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_list   var_cas_readyList,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setReadyList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)).reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)) ;
  GGS_goilTemplateFieldMapList  var_cas_fifoList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  const GGS_bool cond_51551 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_51551.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    if (var_cas_config.isBuilt ()) {
      var_cas_config (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1249)), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1249)) ;
    }
    { const GGS_basic_type _var_51539 = var_cas_pw ; // CAST instruction
      if (_var_51539.getPtr () != NULL) {
        macroValidPointer (_var_51539.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_51539.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_51539.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1252)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1255)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_51578 (var_cas_readyList, true) ;
    const GGS_prio_list::cElement * operand_51578 = NULL ;
    while (((operand_51578 = enumerator_51578.nextObject ()))) {
      macroValidPointer (operand_51578) ;
      GGS_goilTemplateFieldMap  var_cas_fifoFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      GGS_uint  var_cas_maxSize ;
      const GGS_bool cond_51809 = var_cas_powerof2 ;
      if (cond_51809.isBuiltAndTrue ()) {
        var_cas_maxSize = GGS_uint (1U) ;
        GGS_uint _variant_51794 = GGS_uint (32U) ;
        GGS_bool _condition_51794 (_variant_51794.isBuilt (), true) ;
        while (_condition_51794.isBuiltAndTrue ()) {
          _condition_51794 = (operand_51578->fifosize).operator_strictSup (var_cas_maxSize) ;
          if (_condition_51794.isBuiltAndTrue ()) {
            if (_variant_51794.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1266)) ;
              _condition_51794 = GGS_bool (false) ;
            }else{
              _variant_51794.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_maxSize = var_cas_maxSize.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1265)) ;
            }
          }
        }
      }else if (cond_51809.isBuiltAndFalse ()) {
        var_cas_maxSize = operand_51578->fifosize ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fifoFieldMap,  function_lstringWith (inLexique, GGS_string ("SIZE") COMMA_SOURCE_FILE_AT_LINE (1270)),  var_cas_maxSize.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) COMMA_SOURCE_FILE_AT_LINE (1270)) ;
      var_cas_fifoList.addAssign_operation (var_cas_fifoFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("READYLIST") COMMA_SOURCE_FILE_AT_LINE (1273)),  var_cas_fifoList COMMA_SOURCE_FILE_AT_LINE (1273)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setReadyList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessCount"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_taskCount = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1285)) ;
  GGS_uint64  var_cas_isrCount = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)) ;
  GGS_uint64  var_cas_extendedCount = GGS_uint64 (0ULL) ;
  {
    GGS_task_map::cEnumerator enumerator_52403 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1288)), true) ;
    const GGS_task_map::cElement * operand_52403 = NULL ;
    while (((operand_52403 = enumerator_52403.nextObject ()))) {
      macroValidPointer (operand_52403) ;
      const GGS_bool cond_52486 = (operand_52403->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1289)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_52486.isBuiltAndTrue ()) {
        var_cas_extendedCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1290)) ;
      }
    }
  }
  GGS_uint64  var_cas_isr2Count = GGS_uint64 (0ULL) ;
  {
    GGS_isr_map::cEnumerator enumerator_52544 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)), true) ;
    const GGS_isr_map::cElement * operand_52544 = NULL ;
    while (((operand_52544 = enumerator_52544.nextObject ()))) {
      macroValidPointer (operand_52544) ;
      { const GGS_basic_type _var_52746 = operand_52544->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1295)) ; // CAST instruction
        if (_var_52746.getPtr () != NULL) {
          macroValidPointer (_var_52746.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_52746.getPtr ()))) {
            const GGS_uint64_class var_cas_cat (_var_52746.getPtr ()) ;
            const GGS_bool cond_52677 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1297))).operator_isEqual (GGS_uint64 (2ULL)) ;
            if (cond_52677.isBuiltAndTrue ()) {
              var_cas_isr2Count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1298)) ;
            }
          }else{
            operand_52544->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("missing CATEGORY attribute") COMMA_SOURCE_FILE_AT_LINE (1302)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1304)),  var_cas_taskCount COMMA_SOURCE_FILE_AT_LINE (1304)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1305)),  var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1305)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1306)),  var_cas_taskCount.substract_operation (inLexique, var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1306)) COMMA_SOURCE_FILE_AT_LINE (1306)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1307)),  var_cas_taskCount.add_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1307)) COMMA_SOURCE_FILE_AT_LINE (1307)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1308)),  var_cas_isrCount COMMA_SOURCE_FILE_AT_LINE (1308)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR2COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1309)),  var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1309)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR1COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1310)),  var_cas_isrCount.substract_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1310)) COMMA_SOURCE_FILE_AT_LINE (1310)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourceCount"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourceCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourceCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1317)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)) COMMA_SOURCE_FILE_AT_LINE (1317)) ;
  GGS_uint64  var_cas_regularCount = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_internalCount = GGS_uint64 (0ULL) ;
  {
    GGS_resource_map::cEnumerator enumerator_53666 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1320)), true) ;
    const GGS_resource_map::cElement * operand_53666 = NULL ;
    while (((operand_53666 = enumerator_53666.nextObject ()))) {
      macroValidPointer (operand_53666) ;
      { const GGS_resource_property_obj _var_54035 = operand_53666->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1321)) ; // CAST instruction
        if (_var_54035.getPtr () != NULL) {
          macroValidPointer (_var_54035.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54035.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1323)) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54035.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54035.getPtr ()))) {
            var_cas_internalCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1327)) ;
          }else{
            operand_53666->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1329)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1329)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (1330)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1332)),  var_cas_regularCount COMMA_SOURCE_FILE_AT_LINE (1332)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1333)),  var_cas_internalCount COMMA_SOURCE_FILE_AT_LINE (1333)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourceCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setSourceFileList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSourceFileList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSourceFileList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_sourceFileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_54421 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)).reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)), true) ;
    const GGS_lstringlist::cElement * operand_54421 = NULL ;
    while (((operand_54421 = enumerator_54421.nextObject ()))) {
      macroValidPointer (operand_54421) ;
      GGS_goilTemplateFieldMap  var_cas_sourceFileFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_sourceFileFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILE"), operand_54421->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) COMMA_SOURCE_FILE_AT_LINE (1343)),  operand_54421->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) COMMA_SOURCE_FILE_AT_LINE (1343)) ;
      var_cas_sourceFileList.addAssign_operation (var_cas_sourceFileFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1346)),  var_cas_sourceFileList COMMA_SOURCE_FILE_AT_LINE (1346)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSourceFileList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setCFlagsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_54936 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)).reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)), true) ;
    const GGS_lstringlist::cElement * operand_54936 = NULL ;
    while (((operand_54936 = enumerator_54936.nextObject ()))) {
      macroValidPointer (operand_54936) ;
      const GGS_bool cond_55219 = (function_stripString (inLexique, operand_54936->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1355)) COMMA_SOURCE_FILE_AT_LINE (1355))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_55219.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CFLAG"), operand_54936->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)) COMMA_SOURCE_FILE_AT_LINE (1357)),  operand_54936->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1357)) COMMA_SOURCE_FILE_AT_LINE (1357)) ;
        var_cas_cFlagsList.addAssign_operation (var_cas_cFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CFLAGS") COMMA_SOURCE_FILE_AT_LINE (1361)),  var_cas_cFlagsList COMMA_SOURCE_FILE_AT_LINE (1361)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCPPFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCPPFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCPPFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cppFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_55479 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)).reader_cppflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)), true) ;
    const GGS_lstringlist::cElement * operand_55479 = NULL ;
    while (((operand_55479 = enumerator_55479.nextObject ()))) {
      macroValidPointer (operand_55479) ;
      const GGS_bool cond_55782 = (function_stripString (inLexique, operand_55479->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)) COMMA_SOURCE_FILE_AT_LINE (1370))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_55782.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cppFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1371)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cppFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPPFLAG"), operand_55479->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)) COMMA_SOURCE_FILE_AT_LINE (1372)),  operand_55479->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1372)) COMMA_SOURCE_FILE_AT_LINE (1372)) ;
        var_cas_cppFlagsList.addAssign_operation (var_cas_cppFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CPPFLAGS") COMMA_SOURCE_FILE_AT_LINE (1376)),  var_cas_cppFlagsList COMMA_SOURCE_FILE_AT_LINE (1376)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCPPFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAsFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAsFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAsFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_asFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_56043 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)).reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)), true) ;
    const GGS_lstringlist::cElement * operand_56043 = NULL ;
    while (((operand_56043 = enumerator_56043.nextObject ()))) {
      macroValidPointer (operand_56043) ;
      const GGS_bool cond_56336 = (function_stripString (inLexique, operand_56043->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1385)) COMMA_SOURCE_FILE_AT_LINE (1385))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_56336.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_asFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1386)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_asFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASFLAG"), operand_56043->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)) COMMA_SOURCE_FILE_AT_LINE (1387)),  operand_56043->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)) COMMA_SOURCE_FILE_AT_LINE (1387)) ;
        var_cas_asFlagsList.addAssign_operation (var_cas_asFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ASFLAGS") COMMA_SOURCE_FILE_AT_LINE (1391)),  var_cas_asFlagsList COMMA_SOURCE_FILE_AT_LINE (1391)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAsFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLdFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLdFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLdFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_ldFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_56595 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)).reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)), true) ;
    const GGS_lstringlist::cElement * operand_56595 = NULL ;
    while (((operand_56595 = enumerator_56595.nextObject ()))) {
      macroValidPointer (operand_56595) ;
      const GGS_bool cond_56888 = (function_stripString (inLexique, operand_56595->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1400)) COMMA_SOURCE_FILE_AT_LINE (1400))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_56888.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_ldFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1401)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_ldFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LDFLAG"), operand_56595->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1402)) COMMA_SOURCE_FILE_AT_LINE (1402)),  operand_56595->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1402)) COMMA_SOURCE_FILE_AT_LINE (1402)) ;
        var_cas_ldFlagsList.addAssign_operation (var_cas_ldFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("LDFLAGS") COMMA_SOURCE_FILE_AT_LINE (1406)),  var_cas_ldFlagsList COMMA_SOURCE_FILE_AT_LINE (1406)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLdFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTraceFlag"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTraceFlag (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTraceFlag at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_trace _var_59336 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)) ; // CAST instruction
    if (_var_59336.getPtr () != NULL) {
      macroValidPointer (_var_59336.getPtr ()) ;
      if (typeid (cPtr_trace) == typeid (* (_var_59336.getPtr ()))) {
        const GGS_trace var_cas_noTrace (_var_59336.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_noTrace.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1415)) COMMA_SOURCE_FILE_AT_LINE (1415)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1415)) ;
      }else if (typeid (cPtr_trace_off) == typeid (* (_var_59336.getPtr ()))) {
        const GGS_trace_off var_cas_traceOff (_var_59336.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOff.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1417)) COMMA_SOURCE_FILE_AT_LINE (1417)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1417)) ;
      }else if (typeid (cPtr_trace_on) == typeid (* (_var_59336.getPtr ()))) {
        const GGS_trace_on var_cas_traceOn (_var_59336.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOn.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1419)) COMMA_SOURCE_FILE_AT_LINE (1419)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1419)) ;
        ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFORMAT"), var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)) COMMA_SOURCE_FILE_AT_LINE (1420)),  var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)) COMMA_SOURCE_FILE_AT_LINE (1420)) ;
        const GGS_bool cond_57745 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1422)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1422))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_57745.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)) COMMA_SOURCE_FILE_AT_LINE (1423)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1423)) COMMA_SOURCE_FILE_AT_LINE (1423)) ;
        }else if (cond_57745.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)) COMMA_SOURCE_FILE_AT_LINE (1425)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1425)) COMMA_SOURCE_FILE_AT_LINE (1425)) ;
        }
        const GGS_bool cond_58074 = (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1428))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_58074.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)) COMMA_SOURCE_FILE_AT_LINE (1429)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1429)) COMMA_SOURCE_FILE_AT_LINE (1429)) ;
        }else if (cond_58074.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)) COMMA_SOURCE_FILE_AT_LINE (1431)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1431)) COMMA_SOURCE_FILE_AT_LINE (1431)) ;
        }
        const GGS_bool cond_58421 = (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1434)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1434))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_58421.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)) COMMA_SOURCE_FILE_AT_LINE (1435)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1435)) COMMA_SOURCE_FILE_AT_LINE (1435)) ;
        }else if (cond_58421.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)) COMMA_SOURCE_FILE_AT_LINE (1437)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1437)) COMMA_SOURCE_FILE_AT_LINE (1437)) ;
        }
        const GGS_bool cond_58766 = (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1440))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_58766.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)) COMMA_SOURCE_FILE_AT_LINE (1441)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1441)) COMMA_SOURCE_FILE_AT_LINE (1441)) ;
        }else if (cond_58766.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)) COMMA_SOURCE_FILE_AT_LINE (1443)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1443)) COMMA_SOURCE_FILE_AT_LINE (1443)) ;
        }
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEUSEREVENT"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)) COMMA_SOURCE_FILE_AT_LINE (1445)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_user_event (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1445)) COMMA_SOURCE_FILE_AT_LINE (1445)) ;
        { const GGS_trace_method _var_59319 = var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)) ; // CAST instruction
          if (_var_59319.getPtr () != NULL) {
            macroValidPointer (_var_59319.getPtr ()) ;
            if (typeid (cPtr_trace_file) == typeid (* (_var_59319.getPtr ()))) {
              const GGS_trace_file var_cas_traceFile (_var_59319.getPtr ()) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEMETHOD"), var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)).reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)) COMMA_SOURCE_FILE_AT_LINE (1448)),  GGS_string ("file") COMMA_SOURCE_FILE_AT_LINE (1448)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFILE"), var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) COMMA_SOURCE_FILE_AT_LINE (1449)),  var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) COMMA_SOURCE_FILE_AT_LINE (1449)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTraceFlag\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLinkScript"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinkScript (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinkScript at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linkScriptName = function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1458)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1458)) COMMA_SOURCE_FILE_AT_LINE (1458)) ;
  GGS_bool var_cas_useLinkScript = (var_cas_linkScriptName).operator_isNotEqual (GGS_string ("")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USELINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)) COMMA_SOURCE_FILE_AT_LINE (1460)),  var_cas_useLinkScript COMMA_SOURCE_FILE_AT_LINE (1460)) ;
  const GGS_bool cond_59809 = var_cas_useLinkScript ;
  if (cond_59809.isBuiltAndTrue ()) {
    ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)) COMMA_SOURCE_FILE_AT_LINE (1462)),  var_cas_linkScriptName COMMA_SOURCE_FILE_AT_LINE (1462)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinkScript\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMemoryMapping"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMemoryMapping (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMemoryMapping at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useMemoryMapping = GGS_bool (false) ;
  GGS_bool var_cas_useCompilerSettings = GGS_bool (false) ;
  { const GGS_basic_type _var_60789 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)) ; // CAST instruction
    if (_var_60789.getPtr () != NULL) {
      macroValidPointer (_var_60789.getPtr ()) ;
      if (typeid (cPtr_memmap_false) == typeid (* (_var_60789.getPtr ()))) {
        var_cas_useMemoryMapping = GGS_bool (false) ;
        var_cas_useCompilerSettings = GGS_bool (false) ;
      }else if (typeid (cPtr_memmap_true) == typeid (* (_var_60789.getPtr ()))) {
        const GGS_memmap_true var_cas_trueMemmap (_var_60789.getPtr ()) ;
        var_cas_useMemoryMapping = GGS_bool (true) ;
        GGS_lstring  var_cas_compiler = var_cas_trueMemmap.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1478)) ;
        const GGS_bool cond_60375 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1479))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_60375.isBuiltAndTrue ()) {
          var_cas_useCompilerSettings = GGS_bool (true) ;
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("COMPILER"),  var_cas_compiler COMMA_SOURCE_FILE_AT_LINE (1481)) ;
        }
        GGS_lstring  var_cas_assembler = var_cas_trueMemmap.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1483)) ;
        const GGS_bool cond_60527 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1484))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_60527.isBuiltAndTrue ()) {
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("ASSEMBLER"),  var_cas_assembler COMMA_SOURCE_FILE_AT_LINE (1485)) ;
        }
        { const GGS_basic_type _var_60772 = var_cas_trueMemmap.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)) ; // CAST instruction
          if (_var_60772.getPtr () != NULL) {
            macroValidPointer (_var_60772.getPtr ()) ;
            if (typeid (cPtr_no_linker) == typeid (* (_var_60772.getPtr ()))) {
            }else if (typeid (cPtr_yes_linker) == typeid (* (_var_60772.getPtr ()))) {
              const GGS_yes_linker var_cas_yesLinker (_var_60772.getPtr ()) ;
              GGS_lstring  var_cas_linker = var_cas_yesLinker.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKER"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) COMMA_SOURCE_FILE_AT_LINE (1491)),  var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) COMMA_SOURCE_FILE_AT_LINE (1491)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEMEMORYMAPPING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)) COMMA_SOURCE_FILE_AT_LINE (1494)),  var_cas_useMemoryMapping COMMA_SOURCE_FILE_AT_LINE (1494)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPILERSETTINGS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)) COMMA_SOURCE_FILE_AT_LINE (1495)),  var_cas_useCompilerSettings COMMA_SOURCE_FILE_AT_LINE (1495)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMemoryMapping\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setCompiler"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCompiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCompiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_compiler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)).reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)) ;
  GGS_string var_cas_actualCompiler = GGS_string ("gcc") ;
  const GGS_bool cond_61282 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1504))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_61282.isBuiltAndTrue ()) {
    var_cas_actualCompiler = var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1504)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMPILEREXE"), var_cas_compiler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1505)) COMMA_SOURCE_FILE_AT_LINE (1505)),  var_cas_actualCompiler COMMA_SOURCE_FILE_AT_LINE (1505)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCompiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setAssembler"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAssembler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAssembler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_assembler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1512)).reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1512)) ;
  GGS_string var_cas_actualAssembler = GGS_string ("as") ;
  const GGS_bool cond_61654 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1514))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_61654.isBuiltAndTrue ()) {
    var_cas_actualAssembler = var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1514)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASSEMBLEREXE"), var_cas_assembler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1515)) COMMA_SOURCE_FILE_AT_LINE (1515)),  var_cas_actualAssembler COMMA_SOURCE_FILE_AT_LINE (1515)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAssembler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setLinker"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinker (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinker at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_linker = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)).reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  GGS_string var_cas_actualLinker = GGS_string ("gcc") ;
  const GGS_bool cond_62006 = (var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1524))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_62006.isBuiltAndTrue ()) {
    var_cas_actualLinker = var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1524)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKEREXE"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1525)) COMMA_SOURCE_FILE_AT_LINE (1525)),  var_cas_actualLinker COMMA_SOURCE_FILE_AT_LINE (1525)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinker\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setTarget"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTarget (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TARGET") COMMA_SOURCE_FILE_AT_LINE (1532)),  gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ARCH") COMMA_SOURCE_FILE_AT_LINE (1533)),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (1533)) COMMA_SOURCE_FILE_AT_LINE (1533)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CHIP") COMMA_SOURCE_FILE_AT_LINE (1534)),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (1534)) COMMA_SOURCE_FILE_AT_LINE (1534)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("BOARD") COMMA_SOURCE_FILE_AT_LINE (1535)),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (1535)) COMMA_SOURCE_FILE_AT_LINE (1535)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setTemplatePath"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTemplatePath (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTemplatePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_templatePath = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TEMPLATEPATH") COMMA_SOURCE_FILE_AT_LINE (1543)),  var_cas_templatePath COMMA_SOURCE_FILE_AT_LINE (1543)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTemplatePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setTrampolinePath"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTrampolinePath (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTrampolinePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_trampolinePath = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)).reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)) ;
  const GGS_bool cond_63059 = (var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1551))).operator_isEqual (GGS_string ("")) ;
  if (cond_63059.isBuiltAndTrue ()) {
    var_cas_trampolinePath = GGS_lstring ::constructor_new (inLexique, GGS_string (".."), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)) COMMA_SOURCE_FILE_AT_LINE (1552)) ;
  }
  ::routine_checkTrampolinePath (inLexique,  var_cas_trampolinePath COMMA_SOURCE_FILE_AT_LINE (1554)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRAMPOLINEPATH"), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1555)) COMMA_SOURCE_FILE_AT_LINE (1555)),  var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1555)) COMMA_SOURCE_FILE_AT_LINE (1555)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTrampolinePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setSystemCall"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSystemCall (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSystemCall at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESYSTEMCALL"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)) COMMA_SOURCE_FILE_AT_LINE (1562)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1562)) COMMA_SOURCE_FILE_AT_LINE (1562)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSystemCall\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "setDebug"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setDebug (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setDebug at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEDEBUG"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1569)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1569)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1569)) COMMA_SOURCE_FILE_AT_LINE (1569)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1569)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1569)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1569)) COMMA_SOURCE_FILE_AT_LINE (1569)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setDebug\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setUseInterruptTable"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseInterruptTable (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseInterruptTable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEINTERRUPTTABLE") COMMA_SOURCE_FILE_AT_LINE (1576)),  gOption_goil_5F_options_posix_5F_it.reader_value () COMMA_SOURCE_FILE_AT_LINE (1576)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseInterruptTable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setBuildConfig"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBuildConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBuildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setSourceFileList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1583)) ;
  ::routine_setCFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1584)) ;
  ::routine_setCPPFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1585)) ;
  ::routine_setAsFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1586)) ;
  ::routine_setLdFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1587)) ;
  ::routine_setTraceFlag (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1588)) ;
  ::routine_setLinkScript (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1589)) ;
  ::routine_setMemoryMapping (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1590)) ;
  ::routine_setCompiler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1591)) ;
  ::routine_setAssembler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1592)) ;
  ::routine_setLinker (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1593)) ;
  ::routine_setTarget (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1594)) ;
  ::routine_setTemplatePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1595)) ;
  ::routine_setTrampolinePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1596)) ;
  ::routine_setSystemCall (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1597)) ;
  ::routine_setDebug (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1598)) ;
  ::routine_setUseInterruptTable (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1599)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBuildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "useCommunication"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_useCommunication (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_useCommunication at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom ;
  var_cas_useCom = GGS_bool (false) ;
  GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1604)) ;
  const GGS_bool cond_64701 = var_cas_comObject.reader_usecom (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)) ;
  if (cond_64701.isBuiltAndTrue ()) {
    var_cas_useCom = GGS_bool (true) ;
  }else if (cond_64701.isBuiltAndFalse ()) {
    var_cas_useCom = ((var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1608)).reader_count ()).operator_strictSup (GGS_uint (0U))).operator_or ((var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1609)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_useCommunication\n") ;
  #endif
  return var_cas_useCom ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_useCommunication (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_useCommunication (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_useCommunication [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_useCommunication ("useCommunication",
                              functionForGenericCall_useCommunication,
                              & kTypeDescriptor_GGS_bool,
                              1,
                              kArgumentTypeList_useCommunication) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setUseCom"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseCom (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseCom at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1619)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOM"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1620)),  var_cas_useCom COMMA_SOURCE_FILE_AT_LINE (1620)) ;
  const GGS_bool cond_66391 = var_cas_useCom ;
  if (cond_66391.isBuiltAndTrue ()) {
    GGS_uint64  var_cas_timeBaseInNanoseconds = GGS_uint64 (1000000ULL) ;
    GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1623)) ;
    { const GGS_basic_type _var_65413 = var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1624)) ; // CAST instruction
      if (_var_65413.getPtr () != NULL) {
        macroValidPointer (_var_65413.getPtr ()) ;
        if (typeid (cPtr_float_class) == typeid (* (_var_65413.getPtr ()))) {
          const GGS_float_class var_cas_timeBase (_var_65413.getPtr ()) ;
          var_cas_timeBaseInNanoseconds = var_cas_timeBase.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1626)).multiply_operation (inLexique, GGS_double (1.000000e+09) COMMA_SOURCE_FILE_AT_LINE (1626)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1626)) ;
        }else{
        }
      }
    }
    ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMTIMEBASE"), var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)) COMMA_SOURCE_FILE_AT_LINE (1629)),  var_cas_timeBaseInNanoseconds COMMA_SOURCE_FILE_AT_LINE (1629)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMERRORHOOK"), var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1630)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1630)) COMMA_SOURCE_FILE_AT_LINE (1630)),  function_getBool (inLexique, var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1630)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1630)) COMMA_SOURCE_FILE_AT_LINE (1630)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMGETSERVICEID"), var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)) COMMA_SOURCE_FILE_AT_LINE (1631)),  function_getBool (inLexique, var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1631)) COMMA_SOURCE_FILE_AT_LINE (1631)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPARAMETERACCESS"), var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)) COMMA_SOURCE_FILE_AT_LINE (1632)),  function_getBool (inLexique, var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1632)) COMMA_SOURCE_FILE_AT_LINE (1632)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTCOMEXTENSION"), var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)) COMMA_SOURCE_FILE_AT_LINE (1633)),  function_getBool (inLexique, var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1633)) COMMA_SOURCE_FILE_AT_LINE (1633)) ;
    GGS_lstring  var_cas_comStatus = var_cas_comObject.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1635)) ;
    GGS_bool var_cas_comExtended = GGS_bool (false) ;
    const GGS_bool cond_66290 = (var_cas_comStatus.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1637))).operator_isEqual (GGS_string ("extended")) ;
    if (cond_66290.isBuiltAndTrue ()) {
      var_cas_comExtended = GGS_bool (true) ;
    }
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMEXTENDED"), var_cas_comStatus.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1640)) COMMA_SOURCE_FILE_AT_LINE (1640)),  var_cas_comExtended COMMA_SOURCE_FILE_AT_LINE (1640)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseCom\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setExtended"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtended (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtended at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_extended = (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1649)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1649)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1649))).operator_isEqual (GGS_string ("extended")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDED"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1650)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1650)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1650)) COMMA_SOURCE_FILE_AT_LINE (1650)),  var_cas_extended COMMA_SOURCE_FILE_AT_LINE (1650)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtended\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "scalabilityClass"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_scalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_uint64  & var_cas_sc,
                                GGS_bool & var_cas_useTimingProtection,
                                GGS_bool & var_cas_useProtectionHook
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_scalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_sc = GGS_uint64 (0ULL) ;
  var_cas_useTimingProtection = GGS_bool (false) ;
  var_cas_useProtectionHook = GGS_bool (false) ;
  GGS_bool var_cas_useGlobalTime = GGS_bool (false) ;
  GGS_bool var_cas_useOSApplication = GGS_bool (false) ;
  const GGS_bool cond_70186 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_70186.isBuiltAndTrue ()) {
    {
      GGS_task_map::cEnumerator enumerator_67029 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1667)), true) ;
      const GGS_task_map::cElement * operand_67029 = NULL ;
      while (((operand_67029 = enumerator_67029.nextObject ()))) {
        macroValidPointer (operand_67029) ;
        { const GGS_timing_prot _var_67152 = operand_67029->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1668)) ; // CAST instruction
          if (_var_67152.getPtr () != NULL) {
            macroValidPointer (_var_67152.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_67152.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_67196 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1673)), true) ;
      const GGS_isr_map::cElement * operand_67196 = NULL ;
      while (((operand_67196 = enumerator_67196.nextObject ()))) {
        macroValidPointer (operand_67196) ;
        { const GGS_timing_prot _var_67316 = operand_67196->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1674)) ; // CAST instruction
          if (_var_67316.getPtr () != NULL) {
            macroValidPointer (_var_67316.getPtr ()) ;
            if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_67316.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_67358 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1679)), true) ;
      const GGS_scheduletable_map::cElement * operand_67358 = NULL ;
      while (((operand_67358 = enumerator_67358.nextObject ()))) {
        macroValidPointer (operand_67358) ;
        { const GGS_ltgt_sync_obj _var_67489 = operand_67358->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (1680)) ; // CAST instruction
          if (_var_67489.getPtr () != NULL) {
            macroValidPointer (_var_67489.getPtr ()) ;
            if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_67489.getPtr ()))) {
              var_cas_useGlobalTime = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    var_cas_useOSApplication = (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1685)).reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    { const GGS_basic_type _var_67692 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1687)).reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1687)) ; // CAST instruction
      if (_var_67692.getPtr () != NULL) {
        macroValidPointer (_var_67692.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_67692.getPtr ()))) {
          const GGS_bool_class var_cas_ph (_var_67692.getPtr ()) ;
          var_cas_useProtectionHook = var_cas_ph.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1689)) ;
        }else{
        }
      }
    }
    var_cas_sc = GGS_uint64 (1ULL) ;
    GGS_string var_cas_setSC = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1696)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1696)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1696)) ;
    const GGS_bool cond_68407 = ((var_cas_setSC).operator_isEqual (GGS_string (""))).operator_or ((var_cas_setSC).operator_isEqual (GGS_string ("AUTO"))) ;
    if (cond_68407.isBuiltAndTrue ()) {
      const GGS_bool cond_68117 = ((var_cas_useTimingProtection).operator_or (var_cas_useProtectionHook)).operator_or (var_cas_useGlobalTime) ;
      if (cond_68117.isBuiltAndTrue ()) {
        var_cas_sc = GGS_uint64 (2ULL) ;
      }
      const GGS_bool cond_68387 = (function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)) COMMA_SOURCE_FILE_AT_LINE (1710))).operator_or ((var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
      if (cond_68387.isBuiltAndTrue ()) {
        var_cas_sc = var_cas_sc.add_operation (inLexique, GGS_uint64 (2ULL) COMMA_SOURCE_FILE_AT_LINE (1711)) ;
      }
    }else if (cond_68407.isBuiltAndFalse ()) {
      const GGS_bool cond_69207 = (var_cas_setSC).operator_isEqual (GGS_string ("sc1")) ;
      if (cond_69207.isBuiltAndTrue ()) {
        const GGS_bool cond_68958 = var_cas_useTimingProtection ;
        if (cond_68958.isBuiltAndTrue ()) {
          const GGS_bool cond_68793 = var_cas_useOSApplication ;
          if (cond_68793.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (4ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1721)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1721)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1721)) ;
          }else if (cond_68793.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (2ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1724)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1724)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 2 because Timing Protection is used") COMMA_SOURCE_FILE_AT_LINE (1724)) ;
          }
        }else if (cond_68958.isBuiltAndFalse ()) {
          const GGS_bool cond_69139 = var_cas_useOSApplication ;
          if (cond_69139.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (3ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1729)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1729)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1729)) ;
          }else if (cond_69139.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (1ULL) ;
          }
        }
      }else if (cond_69207.isBuiltAndFalse ()) {
        const GGS_bool cond_69769 = (var_cas_setSC).operator_isEqual (GGS_string ("sc2")) ;
        if (cond_69769.isBuiltAndTrue ()) {
          const GGS_bool cond_69520 = var_cas_useTimingProtection ;
          if (cond_69520.isBuiltAndTrue ()) {
            const GGS_bool cond_69467 = var_cas_useOSApplication ;
            if (cond_69467.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1738)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1738)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1738)) ;
            }else if (cond_69467.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }else if (cond_69520.isBuiltAndFalse ()) {
            const GGS_bool cond_69701 = var_cas_useOSApplication ;
            if (cond_69701.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1745)) ;
            }else if (cond_69701.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }
        }else if (cond_69769.isBuiltAndFalse ()) {
          const GGS_bool cond_70130 = (var_cas_setSC).operator_isEqual (GGS_string ("sc3")) ;
          if (cond_70130.isBuiltAndTrue ()) {
            const GGS_bool cond_70082 = var_cas_useTimingProtection ;
            if (cond_70082.isBuiltAndTrue ()) {
              const GGS_bool cond_70029 = var_cas_useOSApplication ;
              if (cond_70029.isBuiltAndTrue ()) {
                var_cas_sc = GGS_uint64 (4ULL) ;
                var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1754)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1754)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1754)) ;
              }else if (cond_70029.isBuiltAndFalse ()) {
                var_cas_sc = GGS_uint64 (3ULL) ;
              }
            }else if (cond_70082.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
            }
          }else if (cond_70130.isBuiltAndFalse ()) {
            const GGS_bool cond_70164 = (var_cas_setSC).operator_isEqual (GGS_string ("sc4")) ;
            if (cond_70164.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_scalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setScalabilityClass"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_sc ;
  GGS_bool var_cas_useTimingProtection ;
  GGS_bool var_cas_useProtectionHook ;
  ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  var_cas_useTimingProtection,  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1774)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCALABILITYCLASS") COMMA_SOURCE_FILE_AT_LINE (1775)),  var_cas_sc COMMA_SOURCE_FILE_AT_LINE (1775)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USETIMINGPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1776)),  var_cas_useTimingProtection COMMA_SOURCE_FILE_AT_LINE (1776)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEPROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (1777)),  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1777)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEMEMORYPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1778)),  function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)) COMMA_SOURCE_FILE_AT_LINE (1778)) COMMA_SOURCE_FILE_AT_LINE (1778)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEOSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1779)),  ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) COMMA_SOURCE_FILE_AT_LINE (1779)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setUseHooks"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseHooks (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseHooks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTUPHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1786)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1786)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1786)) COMMA_SOURCE_FILE_AT_LINE (1786)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1786)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1786)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1786)) COMMA_SOURCE_FILE_AT_LINE (1786)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESHUTDOWNHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1787)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1787)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1787)) COMMA_SOURCE_FILE_AT_LINE (1787)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1787)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1787)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1787)) COMMA_SOURCE_FILE_AT_LINE (1787)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEERRORHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)) COMMA_SOURCE_FILE_AT_LINE (1788)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1788)) COMMA_SOURCE_FILE_AT_LINE (1788)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPRETASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1789)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1789)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1789)) COMMA_SOURCE_FILE_AT_LINE (1789)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1789)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1789)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1789)) COMMA_SOURCE_FILE_AT_LINE (1789)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPOSTTASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)) COMMA_SOURCE_FILE_AT_LINE (1790)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1790)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1790)) COMMA_SOURCE_FILE_AT_LINE (1790)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEGETSERVICEID"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)) COMMA_SOURCE_FILE_AT_LINE (1791)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1791)) COMMA_SOURCE_FILE_AT_LINE (1791)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPARAMETERACCESS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1792)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1792)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1792)) COMMA_SOURCE_FILE_AT_LINE (1792)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1792)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1792)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1792)) COMMA_SOURCE_FILE_AT_LINE (1792)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USERESSCHEDULER"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1793)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1793)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1793)) COMMA_SOURCE_FILE_AT_LINE (1793)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1793)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1793)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1793)) COMMA_SOURCE_FILE_AT_LINE (1793)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTACKMONITORING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)) COMMA_SOURCE_FILE_AT_LINE (1794)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1794)) COMMA_SOURCE_FILE_AT_LINE (1794)) ;
  GGS_uint64  var_cas_osapp_startuphook_count = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_osapp_shutdownhook_count = GGS_uint64 (0ULL) ;
  {
    GGS_app_map::cEnumerator enumerator_72467 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)), true) ;
    const GGS_app_map::cElement * operand_72467 = NULL ;
    while (((operand_72467 = enumerator_72467.nextObject ()))) {
      macroValidPointer (operand_72467) ;
      { const GGS_basic_type _var_72636 = operand_72467->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)) ; // CAST instruction
        if (_var_72636.getPtr () != NULL) {
          macroValidPointer (_var_72636.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_72636.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_72636.getPtr ()) ;
            const GGS_bool cond_72619 = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)) ;
            if (cond_72619.isBuiltAndTrue ()) {
              var_cas_osapp_startuphook_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1803)) ;
            }
          }else{
          }
        }
      }
      { const GGS_basic_type _var_72801 = operand_72467->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1806)) ; // CAST instruction
        if (_var_72801.getPtr () != NULL) {
          macroValidPointer (_var_72801.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_72801.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_72801.getPtr ()) ;
            const GGS_bool cond_72784 = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1808)) ;
            if (cond_72784.isBuiltAndTrue ()) {
              var_cas_osapp_shutdownhook_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1809)) ;
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OSAPPLICATIONSTARTUPHOOK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1813)),  var_cas_osapp_startuphook_count COMMA_SOURCE_FILE_AT_LINE (1813)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OSAPPLICATIONSHUTDOWNHOOK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1814)),  var_cas_osapp_shutdownhook_count COMMA_SOURCE_FILE_AT_LINE (1814)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseHooks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setOsConfig"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setExtended (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1818)) ;
  ::routine_setUseCom (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1819)) ;
  ::routine_setScalabilityClass (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1820)) ;
  ::routine_setUseHooks (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1821)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setInterruptSources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setInterruptSources (C_Compiler & inLexique,
                                const GGS_config   var_cas_targetConfiguration,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setInterruptSources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_74196 = var_cas_targetConfiguration.reader_hasKey (GGS_string ("it_sources")) ;
  if (cond_74196.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_interruptSources ;
    if (var_cas_targetConfiguration.isBuilt ()) {
      var_cas_targetConfiguration (HERE)->method_get (inLexique, function_lstringWith (inLexique, GGS_string ("it_sources") COMMA_SOURCE_FILE_AT_LINE (1830)), var_cas_interruptSources COMMA_SOURCE_FILE_AT_LINE (1830)) ;
    }
    { const GGS_basic_type _var_74184 = var_cas_interruptSources ; // CAST instruction
      if (_var_74184.getPtr () != NULL) {
        macroValidPointer (_var_74184.getPtr ()) ;
        if (typeid (cPtr_interrupts) == typeid (* (_var_74184.getPtr ()))) {
          const GGS_interrupts var_cas_interrupts (_var_74184.getPtr ()) ;
          ::routine_addLUnsignedValue (inLexique,  var_cas_cfg,  GGS_string ("ITSOURCESLENGTH"),  var_cas_interrupts.reader_it_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1833)) COMMA_SOURCE_FILE_AT_LINE (1833)) ;
          GGS_goilTemplateFieldMapList  var_cas_interruptSourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_ident_map::cEnumerator enumerator_73760 (var_cas_interrupts.reader_it_sources (inLexique COMMA_SOURCE_FILE_AT_LINE (1835)), true) ;
            const GGS_ident_map::cElement * operand_73760 = NULL ;
            while (((operand_73760 = enumerator_73760.nextObject ()))) {
              macroValidPointer (operand_73760) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1836)) ;
              ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("NAME"),  operand_73760->mKey COMMA_SOURCE_FILE_AT_LINE (1837)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NUMBER"), operand_73760->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)) COMMA_SOURCE_FILE_AT_LINE (1838)),  function_uint64OrError (inLexique, operand_73760->mInfo.value, GGS_string ("interrupt source number") COMMA_SOURCE_FILE_AT_LINE (1838)) COMMA_SOURCE_FILE_AT_LINE (1838)) ;
              var_cas_interruptSourcesList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("INTERRUPTSOURCES") COMMA_SOURCE_FILE_AT_LINE (1841)),  var_cas_interruptSourcesList COMMA_SOURCE_FILE_AT_LINE (1841)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setInterruptSources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addDirectoryAndFile"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addDirectoryAndFile (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMapList  & var_cas_fileList,
                                const GGS_string  var_cas_directory,
                                const GGS_string  var_cas_file
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addDirectoryAndFile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1852)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("DIRECTORY") COMMA_SOURCE_FILE_AT_LINE (1853)),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (1853)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FILE") COMMA_SOURCE_FILE_AT_LINE (1854)),  var_cas_file COMMA_SOURCE_FILE_AT_LINE (1854)) ;
  var_cas_fileList.addAssign_operation (var_cas_fieldMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addDirectoryAndFile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setEnvData"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEnvData (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEnvData at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OILFILENAME") COMMA_SOURCE_FILE_AT_LINE (1862)),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1862)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1862)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPUNAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1863)),  var_cas_cpu.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1863)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1863)) COMMA_SOURCE_FILE_AT_LINE (1863)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMESTAMP"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1864)),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_SOURCE_FILE_AT_LINE (1864)) COMMA_SOURCE_FILE_AT_LINE (1864)) ;
  GGS_lstring  var_cas_appName = function_applicationName (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1865)) COMMA_SOURCE_FILE_AT_LINE (1865)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPNAME"), var_cas_appName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1866)) COMMA_SOURCE_FILE_AT_LINE (1866)),  var_cas_appName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1866)) COMMA_SOURCE_FILE_AT_LINE (1866)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECT") COMMA_SOURCE_FILE_AT_LINE (1867)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1867)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1867)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECTPATH") COMMA_SOURCE_FILE_AT_LINE (1868)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1868)) COMMA_SOURCE_FILE_AT_LINE (1868)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEBUILDFILE") COMMA_SOURCE_FILE_AT_LINE (1869)),  gOption_goil_5F_options_generate_5F_makefile.reader_value () COMMA_SOURCE_FILE_AT_LINE (1869)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USELOGFILE") COMMA_SOURCE_FILE_AT_LINE (1870)),  gOption_goil_5F_options_generate_5F_log.reader_value () COMMA_SOURCE_FILE_AT_LINE (1870)) ;
  GGS_goilTemplateFieldMapList  var_cas_fileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1875)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1876)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1877)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1878)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1879)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_timeobj_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1880)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1881)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_action.c") COMMA_SOURCE_FILE_AT_LINE (1882)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_error.c") COMMA_SOURCE_FILE_AT_LINE (1883)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_dispatch_table.c") COMMA_SOURCE_FILE_AT_LINE (1884)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os.c") COMMA_SOURCE_FILE_AT_LINE (1885)) ;
  const GGS_bool cond_76546 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1886)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1886))).operator_not () ;
  if (cond_76546.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm.c") COMMA_SOURCE_FILE_AT_LINE (1887)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event.c") COMMA_SOURCE_FILE_AT_LINE (1888)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it.c") COMMA_SOURCE_FILE_AT_LINE (1889)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez.c") COMMA_SOURCE_FILE_AT_LINE (1890)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task.c") COMMA_SOURCE_FILE_AT_LINE (1891)) ;
  }
  { const GGS_trace _var_76666 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)) ; // CAST instruction
    if (_var_76666.getPtr () != NULL) {
      macroValidPointer (_var_76666.getPtr ()) ;
      if (typeid (cPtr_trace_on) == typeid (* (_var_76666.getPtr ()))) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_trace.c") COMMA_SOURCE_FILE_AT_LINE (1895)) ;
      }else{
      }
    }
  }
  const GGS_bool cond_77316 = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1897)) ;
  if (cond_77316.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_app_copy.c") COMMA_SOURCE_FILE_AT_LINE (1898)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filtering.c") COMMA_SOURCE_FILE_AT_LINE (1899)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filters.c") COMMA_SOURCE_FILE_AT_LINE (1900)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_internal_com.c") COMMA_SOURCE_FILE_AT_LINE (1901)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_external_com.c") COMMA_SOURCE_FILE_AT_LINE (1902)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_notification.c") COMMA_SOURCE_FILE_AT_LINE (1903)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_queue.c") COMMA_SOURCE_FILE_AT_LINE (1904)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_message_management.c") COMMA_SOURCE_FILE_AT_LINE (1905)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_errorhook.c") COMMA_SOURCE_FILE_AT_LINE (1906)) ;
  }
  const GGS_bool cond_78593 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_78593.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1909)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_st_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1910)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1911)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_stack_monitor.c") COMMA_SOURCE_FILE_AT_LINE (1912)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_timing_protec.c") COMMA_SOURCE_FILE_AT_LINE (1913)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_action.c") COMMA_SOURCE_FILE_AT_LINE (1914)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_protec_hook.c") COMMA_SOURCE_FILE_AT_LINE (1915)) ;
    GGS_uint64  var_cas_sc ;
    GGS_bool automatic_var_77918_0 ;
    GGS_bool automatic_var_77918_1 ;
    ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  automatic_var_77918_0,  automatic_var_77918_1 COMMA_SOURCE_FILE_AT_LINE (1917)) ;
    const GGS_bool cond_78111 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
    if (cond_78111.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_app_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1919)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1920)) ;
    }
    const GGS_bool cond_78583 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1922)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1922)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1922))).operator_not () ;
    if (cond_78583.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter.c") COMMA_SOURCE_FILE_AT_LINE (1923)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr.c") COMMA_SOURCE_FILE_AT_LINE (1924)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_schedtable.c") COMMA_SOURCE_FILE_AT_LINE (1925)) ;
      const GGS_bool cond_78571 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
      if (cond_78571.isBuiltAndTrue ()) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct.c") COMMA_SOURCE_FILE_AT_LINE (1927)) ;
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_application.c") COMMA_SOURCE_FILE_AT_LINE (1928)) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRAMPOLINESOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1932)),  var_cas_fileList COMMA_SOURCE_FILE_AT_LINE (1932)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEnvData\n") ;
  #endif
}

//---------------------------------------------------------------------------*

