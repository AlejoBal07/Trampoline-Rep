//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'system_config.cpp'                          *
//                        Generated by version 1.9.7                         *
//                     december 17th, 2009, at 9h55'29"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 629
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "system_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "system_config.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'cPtr_systemConfig'                          *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_systemConfig::
cPtr_systemConfig (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_goilTemplateFieldMapList & argument_2
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
version (argument_0),
compilerKind (argument_1),
tasks (argument_2) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_systemConfig * GGS_systemConfig::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_systemConfig *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_systemConfig *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_systemConfig::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_systemConfig * ptr = dynamic_cast <const cPtr_systemConfig *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = version.operator_isEqual (ptr->version).boolValue ()
         && compilerKind.operator_isEqual (ptr->compilerKind).boolValue ()
         && tasks.operator_isEqual (ptr->tasks).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_systemConfig::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@systemConfig:"
           << version.reader_description (inIndentation + 1)
           << compilerKind.reader_description (inIndentation + 1)
           << tasks.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_systemConfig::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_systemConfig::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_systemConfig (& typeid (cPtr_systemConfig), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_systemConfig::galgasRTTI (void) const {
  return & gClassInfoFor__systemConfig ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_systemConfig::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_systemConfig (version, compilerKind, tasks COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_systemConfig'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor kTypeDescriptor_GGS_systemConfig ("systemConfig", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_systemConfig::
GGS_systemConfig (const cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_systemConfig::
GGS_systemConfig (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_systemConfig GGS_systemConfig::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_systemConfig result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_systemConfig *> (inPointer) != NULL)
      : (typeid (cPtr_systemConfig) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_systemConfig (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_systemConfig),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_systemConfig GGS_systemConfig::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_string& argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_goilTemplateFieldMapList & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_systemConfig result ;
  macroMyNew (result.mPointer, cPtr_systemConfig (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_systemConfig::
reader_version (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_string  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_systemConfig *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_systemConfig *) mPointer)->version ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_systemConfig::
reader_compilerKind (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_systemConfig *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_systemConfig *) mPointer)->compilerKind ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_goilTemplateFieldMapList  GGS_systemConfig::
reader_tasks (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_goilTemplateFieldMapList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_systemConfig *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_systemConfig *) mPointer)->tasks ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_systemConfig::
modifier_setVersion (C_Compiler & /* inLexique */, const GGS_string& inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_systemConfig * clone = dynamic_cast <cPtr_systemConfig *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_systemConfig) ;
    }
    ((cPtr_systemConfig *) mPointer)->version = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_systemConfig::
modifier_setCompilerKind (C_Compiler & /* inLexique */, const GGS_lstring & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_systemConfig * clone = dynamic_cast <cPtr_systemConfig *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_systemConfig) ;
    }
    ((cPtr_systemConfig *) mPointer)->compilerKind = inValue ;
  }
}

//---------------------------------------------------------------------------*

void GGS_systemConfig::
modifier_setTasks (C_Compiler & /* inLexique */, const GGS_goilTemplateFieldMapList & inValue COMMA_UNUSED_LOCATION_ARGS) {
  if ((mPointer != NULL) && inValue.isBuilt ()) {
    macroValidPointer (mPointer) ;
    if (mPointer->retainCount () > 1) {
      cPtr_systemConfig * clone = dynamic_cast <cPtr_systemConfig *> (mPointer->makeClone ()) ;
      macroAssignPointer (mPointer, clone) ;
      macroDetachPointer (clone, cPtr_systemConfig) ;
    }
    ((cPtr_systemConfig *) mPointer)->tasks = inValue ;
  }
}

//---------------------------------------------------------------------------*

const char * GGS_systemConfig::actualTypeName (void) const {
  return "systemConfig" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_systemConfig::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__systemConfig ("systemConfig", & kTypeDescriptor_GGS_systemConfig) ;

//---------------------------------------------------------------------------*

GGS_object GGS_systemConfig::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_systemConfig * p = NULL ;
    macroMyNew (p, GGS_systemConfig (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_systemConfig GGS_systemConfig::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_systemConfig result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_systemConfig * p = dynamic_cast <const GGS_systemConfig *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_systemConfig, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GGS_systemConfig::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_systemConfig ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCompilerKind"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCompilerKind (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_systemConfig  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCompilerKind at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_basic_type _var_1441 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ; // CAST instruction
    if (_var_1441.getPtr () != NULL) {
      macroValidPointer (_var_1441.getPtr ()) ;
      if (typeid (cPtr_memmap_true) == typeid (* (_var_1441.getPtr ()))) {
        const GGS_memmap_true var_cas_mm (_var_1441.getPtr ()) ;
        var_cas_cfg.modifier_setCompilerKind (inLexique, var_cas_mm.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (50)) COMMA_SOURCE_FILE_AT_LINE (50)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCompilerKind\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "emptySystemConfig"               *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_systemConfig  function_emptySystemConfig (C_Compiler & inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_emptySystemConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_systemConfig  var_cas_cfg ;
  var_cas_cfg = GGS_systemConfig ::constructor_new (inLexique, GGS_string ("1.0"), function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (57)), GGS_goilTemplateFieldMapList ::constructor_emptyList () COMMA_HERE) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_emptySystemConfig\n") ;
  #endif
  return var_cas_cfg ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_emptySystemConfig (C_Compiler & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_systemConfig  result = function_emptySystemConfig (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptor kFunction_descriptor_emptySystemConfig ("emptySystemConfig",
                              functionForGenericCall_emptySystemConfig,
                              & kTypeDescriptor_GGS_systemConfig ,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*

