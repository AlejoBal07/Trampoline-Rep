//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'system_config.cpp'                          *
//                       Generated by version 1.9.12                         *
//                       may 17th, 2010, at 15h24'38"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 742
  #error "This file has been compiled with a version of GALGAS that uses libpm version 742, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "system_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "system_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     Class for 'taskKind' Enumeration                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_taskKind ("taskKind", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_taskKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isNotEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_infOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_supOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictInf (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictSup (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_taskKind::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @taskKind" ;
  switch (mValue) {
  case enum_all:
    s << " all>" ;
    break ;
  case enum_basic:
    s << " basic>" ;
    break ;
  case enum_extended:
    s << " extended>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_taskKind::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_taskKind * p = NULL ;
    macroMyNew (p, GGS_taskKind (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_taskKind GGS_taskKind::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_taskKind result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_taskKind * p = dynamic_cast <const GGS_taskKind *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_taskKind, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_taskKind::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_taskKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "setAppRelatedAttributes"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAppRelatedAttributes (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_lstring   var_cas_objName COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAppRelatedAttributes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2619 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_2619.isBuiltAndTrue ()) {
    const GGS_bool cond_2609 = (var_cas_appForObj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_2609.isBuiltAndTrue ()) {
      GGS_bool var_cas_trustedApp = GGS_bool (false) ;
      GGS_string var_cas_appName ;
      const GGS_stringMap  temp_2130 = var_cas_appForObj ;
      if (temp_2130.isBuilt ()) {
        temp_2130 (HERE)->method_get (inLexique, var_cas_objName, var_cas_appName COMMA_SOURCE_FILE_AT_LINE (79)) ;
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPLICATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (80)),  var_cas_appName COMMA_SOURCE_FILE_AT_LINE (80)) ;
      GGS_app_obj  var_cas_app ;
      const GGS_app_map  temp_2379 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (85)) ;
      if (temp_2379.isBuilt ()) {
        temp_2379 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_appName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (85)), var_cas_app COMMA_SOURCE_FILE_AT_LINE (85)) ;
      }
      { const GGS_app_trusted_obj _var_2514 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (86)) ; // CAST instruction
        if (_var_2514.getPtr () != NULL) {
          macroValidPointer (_var_2514.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_2514.getPtr ()))) {
            var_cas_trustedApp = GGS_bool (true) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRUSTED"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (89)),  var_cas_trustedApp COMMA_SOURCE_FILE_AT_LINE (89)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAppRelatedAttributes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "orderedTaskList"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tasks_by_type  function_orderedTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_orderedTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_taskList ;
  var_cas_taskList = GGS_tasks_by_type ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_2902 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (103)), true) ;
    const GGS_task_map::cElement * operand_2902 = NULL ;
    while (((operand_2902 = enumerator_2902.nextObject ()))) {
      macroValidPointer (operand_2902) ;
      const GGS_bool cond_2999 = (operand_2902->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (104)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_2999.isBuiltAndTrue ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (0U), operand_2902->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
      }else if (cond_2999.isBuiltAndFalse ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (1U), operand_2902->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (107))) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_orderedTaskList\n") ;
  #endif
  return var_cas_taskList ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_orderedTaskList (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_tasks_by_type  result = function_orderedTaskList (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_orderedTaskList [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_orderedTaskList ("orderedTaskList",
                              functionForGenericCall_orderedTaskList,
                              & kTypeDescriptor_GGS_tasks_by_type ,
                              1,
                              kArgumentTypeList_orderedTaskList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "computeTaskList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_taskKind  var_cas_kind,
                                GGS_goilTemplateFieldMapList  & var_cas_taskList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_sTasks = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (122)) ;
  {
    GGS_tasks_by_type::cEnumerator enumerator_3351 (var_cas_sTasks, true) ;
    const GGS_tasks_by_type::cElement * operand_3351 = NULL ;
    while (((operand_3351 = enumerator_3351.nextObject ()))) {
      macroValidPointer (operand_3351) ;
      const GGS_bool cond_7033 = (((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (125)))).operator_or (((operand_3351->type).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (126)))))).operator_or (((operand_3351->type).operator_isEqual (GGS_uint (1U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (127))))) ;
      if (cond_7033.isBuiltAndTrue ()) {
        GGS_task_obj  var_cas_task ;
        GGS_lstring  var_cas_taskName = GGS_lstring ::constructor_new (inLexique, operand_3351->name, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (129)) ;
        const GGS_task_map  temp_3601 = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (130)) ;
        if (temp_3601.isBuilt ()) {
          temp_3601 (HERE)->method_get (inLexique, var_cas_taskName, var_cas_task COMMA_SOURCE_FILE_AT_LINE (130)) ;
        }
        GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (131)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (132)).reader_locationForKey (inLexique, operand_3351->name COMMA_SOURCE_FILE_AT_LINE (132)) COMMA_SOURCE_FILE_AT_LINE (132)),  operand_3351->name COMMA_SOURCE_FILE_AT_LINE (132)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (133)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (133)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (134)),  (operand_3351->type).operator_isEqual (GGS_uint (0U)) COMMA_SOURCE_FILE_AT_LINE (134)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NONPREEMPTABLE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (135)),  (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135))).operator_isEqual (GGS_string ("NON")) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        GGS_uint  var_cas_actualPrio ;
        GGS_uint  var_cas_activation ;
        const GGS_prio_map  temp_4129 = var_cas_actualPriorities ;
        if (temp_4129.isBuilt ()) {
          temp_4129 (HERE)->method_get (inLexique, var_cas_taskName, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (138)) ;
        }
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (139)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (139)) COMMA_SOURCE_FILE_AT_LINE (139)) ;
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (140)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
        { const GGS_task_autostart_obj _var_4739 = var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (142)) ; // CAST instruction
          if (_var_4739.getPtr () != NULL) {
            macroValidPointer (_var_4739.getPtr ()) ;
            if (typeid (cPtr_task_autostart_true) == typeid (* (_var_4739.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (144)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (144)) ;
            }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_4739.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (146)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (146)) ;
            }else{
              var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (148)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (148)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, AUTOSTART type is undefined") COMMA_SOURCE_FILE_AT_LINE (149)) ;
            }
          }
        }
        const GGS_bool cond_5666 = (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (150)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150))).operator_isEqual (GGS_string ("FULL")) ;
        if (cond_5666.isBuiltAndTrue ()) {
          GGS_bool var_cas_internalFound = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_4850 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (152)), true) ;
            const GGS_lstringlist::cElement * operand_4850 = NULL ;
            while (((operand_4850 = enumerator_4850.nextObject ()))) {
              macroValidPointer (operand_4850) ;
              const GGS_bool cond_5400 = (var_cas_internalFound).operator_not () ;
              if (cond_5400.isBuiltAndTrue ()) {
                GGS_resource_obj  var_cas_resource ;
                const GGS_resource_map  temp_4997 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
                if (temp_4997.isBuilt ()) {
                  temp_4997 (HERE)->method_get (inLexique, operand_4850->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (155)) ;
                }
                { const GGS_resource_property_obj _var_5380 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) ; // CAST instruction
                  if (_var_5380.getPtr () != NULL) {
                    macroValidPointer (_var_5380.getPtr ()) ;
                    if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_5380.getPtr ()))) {
                      var_cas_internalFound = GGS_bool (true) ;
                      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (159)),  operand_4850->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) COMMA_SOURCE_FILE_AT_LINE (159)) ;
                      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (160)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (160)) ;
                    }else{
                    }
                  }
                }
              }
            }
          }
          const GGS_bool cond_5651 = (var_cas_internalFound).operator_not () ;
          if (cond_5651.isBuiltAndTrue ()) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (165)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (165)) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (166)) ;
          }
        }else if (cond_5666.isBuiltAndFalse ()) {
          ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (169)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (169)) ;
          ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (170)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (170)) ;
        }
        GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
        {
          GGS_lstringlist::cEnumerator enumerator_5935 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (174)), true) ;
          const GGS_lstringlist::cElement * operand_5935 = NULL ;
          while (((operand_5935 = enumerator_5935.nextObject ()))) {
            macroValidPointer (operand_5935) ;
            GGS_resource_obj  var_cas_resource ;
            const GGS_resource_map  temp_6038 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) ;
            if (temp_6038.isBuilt ()) {
              temp_6038 (HERE)->method_get (inLexique, operand_5935->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (176)) ;
            }
            { const GGS_resource_property_obj _var_6391 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) ; // CAST instruction
              if (_var_6391.getPtr () != NULL) {
                macroValidPointer (_var_6391.getPtr ()) ;
                if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_6391.getPtr ()))) {
                }else{
                  GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (181)),  operand_5935->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181)) COMMA_SOURCE_FILE_AT_LINE (181)) ;
                  var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                }
              }
            }
          }
        }
        ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (185)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (185)) ;
        {
          GGS_ident_map::cEnumerator enumerator_6550 (var_cas_task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (188)), true) ;
          const GGS_ident_map::cElement * operand_6550 = NULL ;
          while (((operand_6550 = enumerator_6550.nextObject ()))) {
            macroValidPointer (operand_6550) ;
            { const GGS_basic_type _var_6899 = operand_6550->mInfo.value ; // CAST instruction
              if (_var_6899.getPtr () != NULL) {
                macroValidPointer (_var_6899.getPtr ()) ;
                if (typeid (cPtr_bool_class) == typeid (* (_var_6899.getPtr ()))) {
                  const GGS_bool_class var_cas_bool (_var_6899.getPtr ()) ;
                  ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_6550->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) COMMA_SOURCE_FILE_AT_LINE (191)) ;
                }else if (typeid (cPtr_uint64_class) == typeid (* (_var_6899.getPtr ()))) {
                  const GGS_uint64_class var_cas_number (_var_6899.getPtr ()) ;
                  ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_6550->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (193)) COMMA_SOURCE_FILE_AT_LINE (193)) ;
                }else if (typeid (cPtr_string_class) == typeid (* (_var_6899.getPtr ()))) {
                  const GGS_string_class var_cas_str (_var_6899.getPtr ()) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_6550->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) COMMA_SOURCE_FILE_AT_LINE (195)) ;
                }else{
                }
              }
            }
          }
        }
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  var_cas_taskName COMMA_SOURCE_FILE_AT_LINE (199)) ;
        var_cas_taskList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeISRList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeISRList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_uint64   var_cas_isrCategory,
                                GGS_goilTemplateFieldMapList  & var_cas_isrList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeISRList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_isr_map::cEnumerator enumerator_7286 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (216)), true) ;
    const GGS_isr_map::cElement * operand_7286 = NULL ;
    while (((operand_7286 = enumerator_7286.nextObject ()))) {
      macroValidPointer (operand_7286) ;
      { const GGS_basic_type _var_9258 = operand_7286->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) ; // CAST instruction
        if (_var_9258.getPtr () != NULL) {
          macroValidPointer (_var_9258.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_9258.getPtr ()))) {
            const GGS_uint64_class var_cas_category (_var_9258.getPtr ()) ;
            const GGS_bool cond_9241 = (var_cas_category.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (219))).operator_isEqual (var_cas_isrCategory) ;
            if (cond_9241.isBuiltAndTrue ()) {
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (221)),  operand_7286->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (221)) COMMA_SOURCE_FILE_AT_LINE (221)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (222)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (222)) ;
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (223)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (223)) ;
              GGS_uint  var_cas_actualPrio ;
              GGS_uint  var_cas_activation ;
              const GGS_prio_map  temp_7793 = var_cas_actualPriorities ;
              if (temp_7793.isBuilt ()) {
                temp_7793 (HERE)->method_get (inLexique, operand_7286->mKey, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (226)) ;
              }
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (227)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) COMMA_SOURCE_FILE_AT_LINE (227)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (228)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) COMMA_SOURCE_FILE_AT_LINE (228)) ;
              {
                GGS_ident_map::cEnumerator enumerator_8069 (operand_7286->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (231)), true) ;
                const GGS_ident_map::cElement * operand_8069 = NULL ;
                while (((operand_8069 = enumerator_8069.nextObject ()))) {
                  macroValidPointer (operand_8069) ;
                  { const GGS_basic_type _var_8439 = operand_8069->mInfo.value ; // CAST instruction
                    if (_var_8439.getPtr () != NULL) {
                      macroValidPointer (_var_8439.getPtr ()) ;
                      if (typeid (cPtr_bool_class) == typeid (* (_var_8439.getPtr ()))) {
                        const GGS_bool_class var_cas_bool (_var_8439.getPtr ()) ;
                        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_8069->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) COMMA_SOURCE_FILE_AT_LINE (234)) ;
                      }else if (typeid (cPtr_uint64_class) == typeid (* (_var_8439.getPtr ()))) {
                        const GGS_uint64_class var_cas_number (_var_8439.getPtr ()) ;
                        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_8069->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (236)) COMMA_SOURCE_FILE_AT_LINE (236)) ;
                      }else if (typeid (cPtr_string_class) == typeid (* (_var_8439.getPtr ()))) {
                        const GGS_string_class var_cas_str (_var_8439.getPtr ()) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_8069->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (238)) COMMA_SOURCE_FILE_AT_LINE (238)) ;
                      }else{
                      }
                    }
                  }
                }
              }
              GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
              {
                GGS_lstringlist::cEnumerator enumerator_8545 (operand_7286->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (243)), true) ;
                const GGS_lstringlist::cElement * operand_8545 = NULL ;
                while (((operand_8545 = enumerator_8545.nextObject ()))) {
                  macroValidPointer (operand_8545) ;
                  GGS_resource_obj  var_cas_resource ;
                  const GGS_resource_map  temp_8651 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (245)) ;
                  if (temp_8651.isBuilt ()) {
                    temp_8651 (HERE)->method_get (inLexique, operand_8545->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (245)) ;
                  }
                  { const GGS_resource_property_obj _var_9018 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (246)) ; // CAST instruction
                    if (_var_9018.getPtr () != NULL) {
                      macroValidPointer (_var_9018.getPtr ()) ;
                      if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_9018.getPtr ()))) {
                      }else{
                        GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (250)),  operand_8545->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (250)) COMMA_SOURCE_FILE_AT_LINE (250)) ;
                        var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                      }
                    }
                  }
                }
              }
              ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (254)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (254)) ;
              ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_7286->mKey COMMA_SOURCE_FILE_AT_LINE (256)) ;
              var_cas_isrList.addAssign_operation (var_cas_fieldMap) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeISRList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTasksList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (274)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (274)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (275)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (275)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setBasicTasksList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBasicTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBasicTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (288)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (288)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (289)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (289)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBasicTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setExtendedTasksList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtendedTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtendedTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (302)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (302)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (303)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (303)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtendedTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs1List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs1List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs1List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (1ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (316)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS1"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (317)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (317)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs1List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs2List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs2List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs2List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (330)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (331)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (331)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs2List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_processesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (344)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (344)) ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (345)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (346)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (346)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCountersList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCountersList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCountersList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_countersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_hardCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_softCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_counter_map::cEnumerator enumerator_12066 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (360)), true) ;
    const GGS_counter_map::cElement * operand_12066 = NULL ;
    while (((operand_12066 = enumerator_12066.nextObject ()))) {
      macroValidPointer (operand_12066) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (361)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (362)),  operand_12066->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) COMMA_SOURCE_FILE_AT_LINE (362)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (363)),  function_maxAllowedValue (inLexique, operand_12066->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (363)) COMMA_SOURCE_FILE_AT_LINE (363)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (364)),  function_minCycle (inLexique, operand_12066->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (364)) COMMA_SOURCE_FILE_AT_LINE (364)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TICKSPERBASE") COMMA_SOURCE_FILE_AT_LINE (365)),  function_ticksPerBase (inLexique, operand_12066->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (365)) COMMA_SOURCE_FILE_AT_LINE (365)) ;
      GGS_string var_cas_type = GGS_string ("HARDWARE_COUNTER") ;
      { const GGS_counter_type _var_12685 = operand_12066->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (367)) ; // CAST instruction
        if (_var_12685.getPtr () != NULL) {
          macroValidPointer (_var_12685.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_12685.getPtr ()))) {
            var_cas_type = GGS_string ("SOFTWARE_COUNTER") ;
          }else{
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  operand_12066->mInfo.counter.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (370)) COMMA_SOURCE_FILE_AT_LINE (370)) ;
          }
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TYPE") COMMA_SOURCE_FILE_AT_LINE (372)),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (372)) ;
      const GGS_bool cond_12871 = (operand_12066->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (374))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
      if (cond_12871.isBuiltAndTrue ()) {
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_12066->mKey COMMA_SOURCE_FILE_AT_LINE (375)) ;
      }
      var_cas_countersList.addAssign_operation (var_cas_fieldMap) ;
      const GGS_bool cond_12992 = (var_cas_type).operator_isEqual (GGS_string ("HARDWARE_COUNTER")) ;
      if (cond_12992.isBuiltAndTrue ()) {
        var_cas_hardCountersList.addAssign_operation (var_cas_fieldMap) ;
      }else if (cond_12992.isBuiltAndFalse ()) {
        var_cas_softCountersList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (385)),  var_cas_countersList COMMA_SOURCE_FILE_AT_LINE (385)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("HARDWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (386)),  var_cas_hardCountersList COMMA_SOURCE_FILE_AT_LINE (386)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOFTWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (387)),  var_cas_softCountersList COMMA_SOURCE_FILE_AT_LINE (387)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCountersList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setEventsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEventsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_eventMaskMap   var_cas_eventMasks,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEventsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_eventsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_event_map::cEnumerator enumerator_13491 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (399)), true) ;
    const GGS_event_map::cElement * operand_13491 = NULL ;
    while (((operand_13491 = enumerator_13491.nextObject ()))) {
      macroValidPointer (operand_13491) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (401)),  operand_13491->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (401)) COMMA_SOURCE_FILE_AT_LINE (401)) ;
      GGS_uint64  var_cas_eventMask ;
      const GGS_eventMaskMap  temp_13675 = var_cas_eventMasks ;
      if (temp_13675.isBuilt ()) {
        temp_13675 (HERE)->method_get (inLexique, operand_13491->mKey, var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (403)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MASK"), operand_13491->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (404)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (404)) COMMA_SOURCE_FILE_AT_LINE (404)),  var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (404)) ;
      var_cas_eventsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EVENTS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (407)),  var_cas_eventsList COMMA_SOURCE_FILE_AT_LINE (407)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEventsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setAction"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAction (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_action_obj   var_cas_actionobj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_action_obj _var_15221 = var_cas_actionobj ; // CAST instruction
    if (_var_15221.getPtr () != NULL) {
      macroValidPointer (_var_15221.getPtr ()) ;
      if (typeid (cPtr_setevent_action) == typeid (* (_var_15221.getPtr ()))) {
        const GGS_setevent_action var_cas_setEvent (_var_15221.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (416)),  GGS_string ("setEvent") COMMA_SOURCE_FILE_AT_LINE (416)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (417)),  var_cas_setEvent.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (417)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) COMMA_SOURCE_FILE_AT_LINE (417)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EVENT") COMMA_SOURCE_FILE_AT_LINE (418)),  var_cas_setEvent.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (418)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) COMMA_SOURCE_FILE_AT_LINE (418)) ;
      }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_15221.getPtr ()))) {
        const GGS_activatetask_action var_cas_activateTask (_var_15221.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (420)),  GGS_string ("activateTask") COMMA_SOURCE_FILE_AT_LINE (420)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (421)),  var_cas_activateTask.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (421)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (421)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
      }else if (typeid (cPtr_callback_action) == typeid (* (_var_15221.getPtr ()))) {
        const GGS_callback_action var_cas_callback (_var_15221.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (423)),  GGS_string ("callback") COMMA_SOURCE_FILE_AT_LINE (423)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FUNCTION") COMMA_SOURCE_FILE_AT_LINE (424)),  var_cas_callback.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (424)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (424)) COMMA_SOURCE_FILE_AT_LINE (424)) ;
      }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_15221.getPtr ()))) {
        const GGS_incrementcounter_action var_cas_incrementCounter (_var_15221.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (426)),  GGS_string ("incrementCounter") COMMA_SOURCE_FILE_AT_LINE (426)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TARGETCOUNTER") COMMA_SOURCE_FILE_AT_LINE (427)),  var_cas_incrementCounter.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (427)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) ;
      }else if (typeid (cPtr_finalize_st_action) == typeid (* (_var_15221.getPtr ()))) {
        const GGS_finalize_st_action var_cas_finalizeScheduletable (_var_15221.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (429)),  GGS_string ("finalizeScheduletable") COMMA_SOURCE_FILE_AT_LINE (429)) ;
        ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGETCOUNTER"),  var_cas_finalizeScheduletable.reader_scheduleTableName (inLexique COMMA_SOURCE_FILE_AT_LINE (430)) COMMA_SOURCE_FILE_AT_LINE (430)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAlarmsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAlarmsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAlarmsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_alarmsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_alarm_map::cEnumerator enumerator_15448 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (443)), true) ;
    const GGS_alarm_map::cElement * operand_15448 = NULL ;
    while (((operand_15448 = enumerator_15448.nextObject ()))) {
      macroValidPointer (operand_15448) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (444)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (445)),  operand_15448->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (445)) COMMA_SOURCE_FILE_AT_LINE (445)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (446)),  operand_15448->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (446)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (446)) COMMA_SOURCE_FILE_AT_LINE (446)) ;
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_15448->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (448)) COMMA_SOURCE_FILE_AT_LINE (448)) ;
      { const GGS_autostart_obj _var_16676 = operand_15448->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (450)) ; // CAST instruction
        if (_var_16676.getPtr () != NULL) {
          macroValidPointer (_var_16676.getPtr ()) ;
          if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_16676.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_autostart (_var_16676.getPtr ()) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (452)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (452)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMTIME") COMMA_SOURCE_FILE_AT_LINE (453)),  var_cas_autostart.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (453)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (453)) COMMA_SOURCE_FILE_AT_LINE (453)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("CYCLETIME") COMMA_SOURCE_FILE_AT_LINE (454)),  var_cas_autostart.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (454)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (454)) COMMA_SOURCE_FILE_AT_LINE (454)) ;
            GGS_goilTemplateFieldMapList  var_cas_appmodesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
            {
              GGS_stringset::cEnumerator enumerator_16149 (var_cas_autostart.reader_app_modes (inLexique COMMA_SOURCE_FILE_AT_LINE (456)), true) ;
              while (enumerator_16149.hasCurrentObject ()) {
                GGS_goilTemplateFieldMap  var_cas_appModeFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (457)) ;
                ::routine_addStringFieldValue (inLexique,  var_cas_appModeFields,  function_lstringWith (inLexique, GGS_string ("APPMODE") COMMA_SOURCE_FILE_AT_LINE (458)),  enumerator_16149._key (HERE) COMMA_SOURCE_FILE_AT_LINE (458)) ;
                var_cas_appmodesList.addAssign_operation (var_cas_appModeFields) ;
                enumerator_16149.next () ;
              }
            }
            ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("APPMODES") COMMA_SOURCE_FILE_AT_LINE (461)),  var_cas_appmodesList COMMA_SOURCE_FILE_AT_LINE (461)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_16676.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (463)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (463)) ;
          }else if (typeid (cPtr_autostart_void) == typeid (* (_var_16676.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (465)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (465)) ;
          }else{
          }
        }
      }
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_15448->mKey COMMA_SOURCE_FILE_AT_LINE (468)) ;
      var_cas_alarmsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ALARMS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (472)),  var_cas_alarmsList COMMA_SOURCE_FILE_AT_LINE (472)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAlarmsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourcesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourcesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_resourcesPrio,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourcesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_regularList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_internalList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_resource_map::cEnumerator enumerator_17173 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (486)), true) ;
    const GGS_resource_map::cElement * operand_17173 = NULL ;
    while (((operand_17173 = enumerator_17173.nextObject ()))) {
      macroValidPointer (operand_17173) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (487)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (488)),  operand_17173->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (488)) COMMA_SOURCE_FILE_AT_LINE (488)) ;
      GGS_uint  var_cas_priority ;
      GGS_string var_cas_usage ;
      GGS_uint  automatic_var_17398_0 ;
      const GGS_prio_map  temp_17379 = var_cas_resourcesPrio ;
      if (temp_17379.isBuilt ()) {
        temp_17379 (HERE)->method_get (inLexique, operand_17173->mKey, var_cas_priority, automatic_var_17398_0 COMMA_SOURCE_FILE_AT_LINE (491)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (492)),  var_cas_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (492)) COMMA_SOURCE_FILE_AT_LINE (492)) ;
      GGS_goilTemplateFieldMapList  var_cas_taskUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_task_map::cEnumerator enumerator_17558 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (495)), true) ;
        const GGS_task_map::cElement * operand_17558 = NULL ;
        while (((operand_17558 = enumerator_17558.nextObject ()))) {
          macroValidPointer (operand_17558) ;
          const GGS_bool cond_17811 = function_isInLstringlist (inLexique, operand_17558->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (496)), operand_17173->mKey COMMA_SOURCE_FILE_AT_LINE (496)) ;
          if (cond_17811.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (497)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (498)),  operand_17558->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (498)) COMMA_SOURCE_FILE_AT_LINE (498)) ;
            var_cas_taskUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (503)),  var_cas_taskUsage COMMA_SOURCE_FILE_AT_LINE (503)) ;
      GGS_goilTemplateFieldMapList  var_cas_isrUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_isr_map::cEnumerator enumerator_17988 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (506)), true) ;
        const GGS_isr_map::cElement * operand_17988 = NULL ;
        while (((operand_17988 = enumerator_17988.nextObject ()))) {
          macroValidPointer (operand_17988) ;
          const GGS_bool cond_18238 = function_isInLstringlist (inLexique, operand_17988->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (507)), operand_17173->mKey COMMA_SOURCE_FILE_AT_LINE (507)) ;
          if (cond_18238.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (508)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (509)),  operand_17988->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (509)) COMMA_SOURCE_FILE_AT_LINE (509)) ;
            var_cas_isrUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (514)),  var_cas_isrUsage COMMA_SOURCE_FILE_AT_LINE (514)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_17173->mKey COMMA_SOURCE_FILE_AT_LINE (516)) ;
      { const GGS_resource_property_obj _var_18790 = operand_17173->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (519)) ; // CAST instruction
        if (_var_18790.getPtr () != NULL) {
          macroValidPointer (_var_18790.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_18790.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_18790.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_18790.getPtr ()))) {
            var_cas_internalList.addAssign_operation (var_cas_fieldMap) ;
          }else{
            operand_17173->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (527)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (527)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (528)) ;
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (530)),  var_cas_regularList COMMA_SOURCE_FILE_AT_LINE (530)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (531)),  var_cas_internalList COMMA_SOURCE_FILE_AT_LINE (531)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourcesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@receiverSortedList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverSortedList::
elementOf_GGS_receiverSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverSortedList * operand = (const elementOf_GGS_receiverSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = - receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Sorted list '@receiverSortedList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverSortedList ("receiverSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverSortedList::GGS_receiverSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList::
GGS_receiverSortedList (const GGS_receiverSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isNotEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::
operator_concat (const GGS_receiverSortedList & inOperand) const {
  GGS_receiverSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
dotAssign_operation (const GGS_receiverSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_emptySortedList (void) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverSortedList * p = dynamic_cast <const GGS_receiverSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@receiverReverseSortedList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverReverseSortedList::
elementOf_GGS_receiverReverseSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverReverseSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverReverseSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverReverseSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverReverseSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverReverseSortedList * operand = (const elementOf_GGS_receiverReverseSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverReverseSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Sorted list '@receiverReverseSortedList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverReverseSortedList ("receiverReverseSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::GGS_receiverReverseSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::
GGS_receiverReverseSortedList (const GGS_receiverReverseSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isNotEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::
operator_concat (const GGS_receiverReverseSortedList & inOperand) const {
  GGS_receiverReverseSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
dotAssign_operation (const GGS_receiverReverseSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverReverseSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_emptySortedList (void) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverReverseSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverReverseSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverReverseSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverReverseSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverReverseSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverReverseSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverReverseSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverReverseSortedList * p = dynamic_cast <const GGS_receiverReverseSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverReverseSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverReverseSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverReverseSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setFilter"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setFilter (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_filter_prop_obj   var_cas_filter COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setFilter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_filter_prop_obj _var_22597 = var_cas_filter ; // CAST instruction
    if (_var_22597.getPtr () != NULL) {
      macroValidPointer (_var_22597.getPtr ()) ;
      if (typeid (cPtr_always_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (565)) COMMA_SOURCE_FILE_AT_LINE (565)),  GGS_string ("ALWAYS") COMMA_SOURCE_FILE_AT_LINE (565)) ;
      }else if (typeid (cPtr_never_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (567)) COMMA_SOURCE_FILE_AT_LINE (567)),  GGS_string ("NEVER") COMMA_SOURCE_FILE_AT_LINE (567)) ;
      }else if (typeid (cPtr_maskednewequalsx_filter) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_maskednewequalsx_filter var_cas_maskedNewEqualsXFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (569)) COMMA_SOURCE_FILE_AT_LINE (569)),  GGS_string ("MASKEDNEWEQUALSX") COMMA_SOURCE_FILE_AT_LINE (569)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (570)) COMMA_SOURCE_FILE_AT_LINE (570)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewEqualsXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) COMMA_SOURCE_FILE_AT_LINE (571)) ;
      }else if (typeid (cPtr_maskednewdiffersx_filter) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_maskednewdiffersx_filter var_cas_maskedNewDiffersXFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (573)) COMMA_SOURCE_FILE_AT_LINE (573)),  GGS_string ("MASKEDNEWDIFFERSX") COMMA_SOURCE_FILE_AT_LINE (573)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (574)) COMMA_SOURCE_FILE_AT_LINE (574)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewDiffersXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (575)) COMMA_SOURCE_FILE_AT_LINE (575)) ;
      }else if (typeid (cPtr_newisequal_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (577)) COMMA_SOURCE_FILE_AT_LINE (577)),  GGS_string ("NEWISEQUAL") COMMA_SOURCE_FILE_AT_LINE (577)) ;
      }else if (typeid (cPtr_newisdifferent_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (579)) COMMA_SOURCE_FILE_AT_LINE (579)),  GGS_string ("NEWISDIFFERENT") COMMA_SOURCE_FILE_AT_LINE (579)) ;
      }else if (typeid (cPtr_maskednewequalsmaskedold_filter) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_maskednewequalsmaskedold_filter var_cas_maskedNewEqualsMaskedOldFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (581)) COMMA_SOURCE_FILE_AT_LINE (581)),  GGS_string ("MASKEDNEWEQUALSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (581)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (582)) COMMA_SOURCE_FILE_AT_LINE (582)) ;
      }else if (typeid (cPtr_maskednewdiffersmaskedold_filter) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_maskednewdiffersmaskedold_filter var_cas_maskedNewDiffersMaskedOldFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (584)) COMMA_SOURCE_FILE_AT_LINE (584)),  GGS_string ("MASKEDNEWDIFFERSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (584)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (585)) COMMA_SOURCE_FILE_AT_LINE (585)) ;
      }else if (typeid (cPtr_newiswithin) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_newiswithin var_cas_newIsWithinFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (587)) COMMA_SOURCE_FILE_AT_LINE (587)),  GGS_string ("NEWISWITHIN") COMMA_SOURCE_FILE_AT_LINE (587)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsWithinFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (588)) COMMA_SOURCE_FILE_AT_LINE (588)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsWithinFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (589)) COMMA_SOURCE_FILE_AT_LINE (589)) ;
      }else if (typeid (cPtr_newisoutside) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_newisoutside var_cas_newIsOutsideFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (591)) COMMA_SOURCE_FILE_AT_LINE (591)),  GGS_string ("NEWISOUTSIDE") COMMA_SOURCE_FILE_AT_LINE (591)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsOutsideFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (592)) COMMA_SOURCE_FILE_AT_LINE (592)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsOutsideFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (593)) COMMA_SOURCE_FILE_AT_LINE (593)) ;
      }else if (typeid (cPtr_newisgreater_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (595)) COMMA_SOURCE_FILE_AT_LINE (595)),  GGS_string ("NEWISGREATER") COMMA_SOURCE_FILE_AT_LINE (595)) ;
      }else if (typeid (cPtr_newislessorequal_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (597)) COMMA_SOURCE_FILE_AT_LINE (597)),  GGS_string ("NEWISLESSOREQUAL") COMMA_SOURCE_FILE_AT_LINE (597)) ;
      }else if (typeid (cPtr_newisless_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (599)) COMMA_SOURCE_FILE_AT_LINE (599)),  GGS_string ("NEWISLESS") COMMA_SOURCE_FILE_AT_LINE (599)) ;
      }else if (typeid (cPtr_newisgreaterorequal_filter) == typeid (* (_var_22597.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) COMMA_SOURCE_FILE_AT_LINE (601)),  GGS_string ("NEWISGREATEROREQUAL") COMMA_SOURCE_FILE_AT_LINE (601)) ;
      }else if (typeid (cPtr_oneeveryn_filter) == typeid (* (_var_22597.getPtr ()))) {
        const GGS_oneeveryn_filter var_cas_oneEveryNFilter (_var_22597.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (603)) COMMA_SOURCE_FILE_AT_LINE (603)),  GGS_string ("ONEEVERYN") COMMA_SOURCE_FILE_AT_LINE (603)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PERIOD"),  var_cas_oneEveryNFilter.reader_period (inLexique COMMA_SOURCE_FILE_AT_LINE (604)) COMMA_SOURCE_FILE_AT_LINE (604)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("OFFSET"),  var_cas_oneEveryNFilter.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (605)) COMMA_SOURCE_FILE_AT_LINE (605)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setFilter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMessagesList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMessagesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMessagesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_receiverSortedList  var_cas_internalReceiversList = GGS_receiverSortedList ::constructor_emptySortedList () ;
  {
    GGS_message_map::cEnumerator enumerator_22981 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (618)), true) ;
    const GGS_message_map::cElement * operand_22981 = NULL ;
    while (((operand_22981 = enumerator_22981.nextObject ()))) {
      macroValidPointer (operand_22981) ;
      { const GGS_mess_prop_obj _var_23793 = operand_22981->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (619)) ; // CAST instruction
        if (_var_23793.getPtr () != NULL) {
          macroValidPointer (_var_23793.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_23793.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_23793.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (621)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_22981->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (622)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (622)), operand_22981->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (622)), operand_22981->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (622))) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_23793.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_23793.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (624)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_22981->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (625)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (625)), operand_22981->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (625)), operand_22981->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (625))) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_23793.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_23793.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (627)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_22981->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (628)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (628)), operand_22981->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (628)), operand_22981->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (628))) ;
          }else{
          }
        }
      }
    }
  }
  GGS_lstringMap  var_cas_internalTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (641)) ;
  GGS_lstringMap  var_cas_nextTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) ;
  GGS_receiverReverseSortedList  var_cas_actualInternalReceiverList = GGS_receiverReverseSortedList ::constructor_emptySortedList () ;
  GGS_string var_cas_previousReceiver = GGS_string ("") ;
  GGS_string var_cas_previousSender = GGS_string ("") ;
  {
    GGS_receiverSortedList::cEnumerator enumerator_24542 (var_cas_internalReceiversList, true) ;
    const GGS_receiverSortedList::cElement * operand_24542 = NULL ;
    while (((operand_24542 = enumerator_24542.nextObject ()))) {
      macroValidPointer (operand_24542) ;
      const GGS_bool cond_24711 = (var_cas_internalTargets.reader_hasKey (operand_24542->senderName)).operator_not () ;
      if (cond_24711.isBuiltAndTrue ()) {
        var_cas_internalTargets.modifier_put (inLexique, function_lstringWith (inLexique, operand_24542->senderName COMMA_SOURCE_FILE_AT_LINE (648)), GGS_lstring ::constructor_new (inLexique, operand_24542->receiverName, operand_24542->receiverLocation COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) ;
      }
      const GGS_bool cond_24871 = (operand_24542->senderName).operator_isEqual (var_cas_previousSender) ;
      if (cond_24871.isBuiltAndTrue ()) {
        var_cas_nextTargets.modifier_put (inLexique, function_lstringWith (inLexique, var_cas_previousReceiver COMMA_SOURCE_FILE_AT_LINE (651)), GGS_lstring ::constructor_new (inLexique, operand_24542->receiverName, operand_24542->receiverLocation COMMA_SOURCE_FILE_AT_LINE (651)) COMMA_SOURCE_FILE_AT_LINE (651)) ;
      }
      var_cas_previousSender = operand_24542->senderName ;
      var_cas_previousReceiver = operand_24542->receiverName ;
      var_cas_actualInternalReceiverList.addAssign_operation (operand_24542->mess, operand_24542->senderName, operand_24542->senderLocation, operand_24542->receiverName, operand_24542->receiverLocation) ;
    }
  }
  GGS_goilTemplateFieldMapList  var_cas_messagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_sendMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_receiveMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_receiverReverseSortedList::cEnumerator enumerator_25365 (var_cas_actualInternalReceiverList, true) ;
    const GGS_receiverReverseSortedList::cElement * operand_25365 = NULL ;
    while (((operand_25365 = enumerator_25365.nextObject ()))) {
      macroValidPointer (operand_25365) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (666)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_25365->receiverLocation COMMA_SOURCE_FILE_AT_LINE (667)),  operand_25365->receiverName COMMA_SOURCE_FILE_AT_LINE (667)) ;
      const GGS_bool cond_25838 = var_cas_nextTargets.reader_hasKey (operand_25365->receiverName) ;
      if (cond_25838.isBuiltAndTrue ()) {
        GGS_lstring  var_cas_nextReceiveMessage ;
        const GGS_lstringMap  temp_25638 = var_cas_nextTargets ;
        if (temp_25638.isBuilt ()) {
          temp_25638 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_25365->receiverName, operand_25365->receiverLocation COMMA_SOURCE_FILE_AT_LINE (671)), var_cas_nextReceiveMessage COMMA_SOURCE_FILE_AT_LINE (671)) ;
        }
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NEXT"), var_cas_nextReceiveMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (672)) COMMA_SOURCE_FILE_AT_LINE (672)),  var_cas_nextReceiveMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (672)) COMMA_SOURCE_FILE_AT_LINE (672)) ;
      }
      GGS_mess_prop_obj  var_cas_messageProperty = operand_25365->mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (674)) ;
      { const GGS_mess_prop_obj _var_28399 = var_cas_messageProperty ; // CAST instruction
        if (_var_28399.getPtr () != NULL) {
          macroValidPointer (_var_28399.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_28399.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_28399.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) COMMA_SOURCE_FILE_AT_LINE (677)),  GGS_string ("RECEIVE_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (677)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (678)) COMMA_SOURCE_FILE_AT_LINE (678)) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_28399.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_28399.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (680)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (681)) COMMA_SOURCE_FILE_AT_LINE (681)),  GGS_string ("RECEIVE_UNQUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (681)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (682)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_26590 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (684)) ;
            if (temp_26590.isBuilt ()) {
              temp_26590 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (684)) ;
            }
            { const GGS_mess_prop_obj _var_27347 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (685)) ; // CAST instruction
              if (_var_27347.getPtr () != NULL) {
                macroValidPointer (_var_27347.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_27347.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_27347.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (687)) COMMA_SOURCE_FILE_AT_LINE (687)) ;
                  GGS_basic_type  var_cas_initialValue = var_cas_receiveUnqueuedInternalMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (688)) ;
                  GGS_string var_cas_initialValueString ;
                  const GGS_basic_type  temp_26942 = var_cas_initialValue ;
                  if (temp_26942.isBuilt ()) {
                    temp_26942 (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (690)) ;
                  }
                  const GGS_bool cond_27136 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
                  if (cond_27136.isBuiltAndTrue ()) {
                    ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (692)) COMMA_SOURCE_FILE_AT_LINE (692)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (692)) ;
                  }
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (695)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (696)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (697)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveUnqueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (698)) COMMA_SOURCE_FILE_AT_LINE (698)) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_28399.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_28399.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (701)) COMMA_SOURCE_FILE_AT_LINE (701)),  GGS_string ("RECEIVE_QUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (701)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (702)) ;
            ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("QUEUESIZE"),  var_cas_receiveQueuedInternalMessage.reader_queuesize (inLexique COMMA_SOURCE_FILE_AT_LINE (703)) COMMA_SOURCE_FILE_AT_LINE (703)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_27895 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (705)) ;
            if (temp_27895.isBuilt ()) {
              temp_27895 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (705)) ;
            }
            { const GGS_mess_prop_obj _var_28306 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ; // CAST instruction
              if (_var_28306.getPtr () != NULL) {
                macroValidPointer (_var_28306.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_28306.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_28306.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) COMMA_SOURCE_FILE_AT_LINE (708)) ;
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (710)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (711)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (712)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveQueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) COMMA_SOURCE_FILE_AT_LINE (714)) ;
          }else{
          }
        }
      }
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_25365->mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (717)) COMMA_SOURCE_FILE_AT_LINE (717)) ;
      var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
      var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_28556 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (722)), true) ;
    const GGS_message_map::cElement * operand_28556 = NULL ;
    while (((operand_28556 = enumerator_28556.nextObject ()))) {
      macroValidPointer (operand_28556) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (723)) ;
      GGS_mess_prop_obj  var_cas_messageProperty = operand_28556->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (724)) ;
      GGS_bool var_cas_okMessage = GGS_bool (true) ;
      GGS_bool var_cas_isSendMessage = GGS_bool (true) ;
      { const GGS_mess_prop_obj _var_31729 = var_cas_messageProperty ; // CAST instruction
        if (_var_31729.getPtr () != NULL) {
          macroValidPointer (_var_31729.getPtr ()) ;
          if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_31729.getPtr ()))) {
            const GGS_ssi_mess_prop var_cas_sendStaticInternalMessage (_var_31729.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (729)) COMMA_SOURCE_FILE_AT_LINE (729)),  GGS_string ("SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (729)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (730)) COMMA_SOURCE_FILE_AT_LINE (730)) ;
            GGS_lstring  var_cas_targetMessage ;
            const GGS_lstringMap  temp_29094 = var_cas_internalTargets ;
            if (temp_29094.isBuilt ()) {
              temp_29094 (HERE)->method_get (inLexique, operand_28556->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (732)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (733)) ;
          }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_31729.getPtr ()))) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (735)) COMMA_SOURCE_FILE_AT_LINE (735)),  GGS_string ("SEND_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (735)) ;
            GGS_lstring  var_cas_targetMessage ;
            const GGS_lstringMap  temp_29390 = var_cas_internalTargets ;
            if (temp_29390.isBuilt ()) {
              temp_29390 (HERE)->method_get (inLexique, operand_28556->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (737)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (738)) ;
          }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_31729.getPtr ()))) {
            const GGS_rzs_mess_prop var_cas_receiveZeroSendersMessage (_var_31729.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (761)) COMMA_SOURCE_FILE_AT_LINE (761)),  GGS_string ("RECEIVE_ZERO_SENDERS") COMMA_SOURCE_FILE_AT_LINE (761)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_receiveZeroSendersMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (762)) COMMA_SOURCE_FILE_AT_LINE (762)) ;
            GGS_basic_type  var_cas_initialValue = var_cas_receiveZeroSendersMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (763)) ;
            GGS_string var_cas_initialValueString ;
            const GGS_basic_type  temp_31464 = var_cas_initialValue ;
            if (temp_31464.isBuilt ()) {
              temp_31464 (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (765)) ;
            }
            const GGS_bool cond_31652 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
            if (cond_31652.isBuiltAndTrue ()) {
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (767)) COMMA_SOURCE_FILE_AT_LINE (767)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (767)) ;
            }
            var_cas_isSendMessage = GGS_bool (false) ;
          }else{
            var_cas_okMessage = GGS_bool (false) ;
          }
        }
      }
      const GGS_bool cond_32006 = var_cas_okMessage ;
      if (cond_32006.isBuiltAndTrue ()) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (774)),  operand_28556->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (774)) COMMA_SOURCE_FILE_AT_LINE (774)) ;
        var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
        const GGS_bool cond_31942 = var_cas_isSendMessage ;
        if (cond_31942.isBuiltAndTrue ()) {
          var_cas_sendMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }else if (cond_31942.isBuiltAndFalse ()) {
          var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (783)),  var_cas_messagesList COMMA_SOURCE_FILE_AT_LINE (783)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SENDMESSAGES") COMMA_SOURCE_FILE_AT_LINE (784)),  var_cas_sendMessagesList COMMA_SOURCE_FILE_AT_LINE (784)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("RECEIVEMESSAGES") COMMA_SOURCE_FILE_AT_LINE (785)),  var_cas_receiveMessagesList COMMA_SOURCE_FILE_AT_LINE (785)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMessagesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setScheduletablesList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScheduletablesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScheduletablesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_scheduletablesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_scheduletable_map::cEnumerator enumerator_32465 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (797)), true) ;
    const GGS_scheduletable_map::cElement * operand_32465 = NULL ;
    while (((operand_32465 = enumerator_32465.nextObject ()))) {
      macroValidPointer (operand_32465) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (798)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (799)),  operand_32465->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (799)) COMMA_SOURCE_FILE_AT_LINE (799)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (800)),  operand_32465->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (800)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (800)) COMMA_SOURCE_FILE_AT_LINE (800)) ;
      GGS_bool var_cas_periodic = GGS_bool (false) ;
      { const GGS_basic_type _var_32835 = operand_32465->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (803)) ; // CAST instruction
        if (_var_32835.getPtr () != NULL) {
          macroValidPointer (_var_32835.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_32835.getPtr ()))) {
            const GGS_bool_class var_cas_p (_var_32835.getPtr ()) ;
            var_cas_periodic = var_cas_p.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (804)) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PERIODIC") COMMA_SOURCE_FILE_AT_LINE (806)),  var_cas_periodic COMMA_SOURCE_FILE_AT_LINE (806)) ;
      GGS_lstring  var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDTABLE_NO_SYNC"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (808)) ;
      GGS_luint64  var_cas_precision = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (809)) ;
      { const GGS_ltgt_sync_obj _var_33373 = operand_32465->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (810)) ; // CAST instruction
        if (_var_33373.getPtr () != NULL) {
          macroValidPointer (_var_33373.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_33373.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_syncStrategyTrue (_var_33373.getPtr ()) ;
            GGS_lstring  var_cas_strategy = var_cas_syncStrategyTrue.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (812)) ;
            var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("SCHEDTABLE_")).operator_concat (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (813)))).operator_concat (GGS_string ("_SYNC")), var_cas_strategy.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (813)) COMMA_SOURCE_FILE_AT_LINE (813)) ;
            var_cas_precision = function_luint64OrError (inLexique, var_cas_syncStrategyTrue.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (814)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (814)) ;
          }else{
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SYNCSTRATEGY"),  var_cas_syncStrategy COMMA_SOURCE_FILE_AT_LINE (816)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PRECISION"),  var_cas_precision COMMA_SOURCE_FILE_AT_LINE (817)) ;
      GGS_lstring  var_cas_scheduletableState = function_lstringWith (inLexique, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (819)) ;
      GGS_luint64  var_cas_scheduletableDate = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (820)) ;
      { const GGS_autostart_obj _var_34537 = operand_32465->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (821)) ; // CAST instruction
        if (_var_34537.getPtr () != NULL) {
          macroValidPointer (_var_34537.getPtr ()) ;
          if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_34537.getPtr ()))) {
            const GGS_sd_autostart_false var_cas_autostartFalse (_var_34537.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_STOPPED"), var_cas_autostartFalse.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (823)) COMMA_SOURCE_FILE_AT_LINE (823)) ;
          }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_34537.getPtr ()))) {
            const GGS_sd_autostart_synchron var_cas_autostartSynchron (_var_34537.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_SYNCHRON"), var_cas_autostartSynchron.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (825)) COMMA_SOURCE_FILE_AT_LINE (825)) ;
          }else if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_34537.getPtr ()))) {
            const GGS_sd_autostart_relative var_cas_autostartRelative (_var_34537.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_RELATIVE"), var_cas_autostartRelative.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (827)) COMMA_SOURCE_FILE_AT_LINE (827)) ;
            var_cas_scheduletableDate = var_cas_autostartRelative.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (828)) ;
          }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_34537.getPtr ()))) {
            const GGS_sd_autostart_absolute var_cas_autostartAbsolute (_var_34537.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_ABSOLUTE"), var_cas_autostartAbsolute.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (830)) COMMA_SOURCE_FILE_AT_LINE (830)) ;
            var_cas_scheduletableDate = var_cas_autostartAbsolute.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (831)) ;
          }else{
            operand_32465->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table ")).operator_concat (operand_32465->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (832))) COMMA_SOURCE_FILE_AT_LINE (833)) ;
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("STATE"),  var_cas_scheduletableState COMMA_SOURCE_FILE_AT_LINE (834)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("DATE"),  var_cas_scheduletableDate COMMA_SOURCE_FILE_AT_LINE (835)) ;
      GGS_uint64  var_cas_length = GGS_uint64 (0ULL) ;
      { const GGS_basic_type _var_34960 = operand_32465->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (838)) ; // CAST instruction
        if (_var_34960.getPtr () != NULL) {
          macroValidPointer (_var_34960.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_34960.getPtr ()))) {
            const GGS_uint64_class var_cas_len (_var_34960.getPtr ()) ;
            var_cas_length = var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (840)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LENGTH"), var_cas_len.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (841)) COMMA_SOURCE_FILE_AT_LINE (841)),  var_cas_length COMMA_SOURCE_FILE_AT_LINE (841)) ;
          }else{
            operand_32465->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for LENGTH attribute") COMMA_SOURCE_FILE_AT_LINE (843)) ;
          }
        }
      }
      GGS_expiry_point_list  var_cas_expiryPoints = operand_32465->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (847)) ;
      GGS_expiry_point_obj  var_cas_lastPoint ;
      GGS_uint64  var_cas_lastOffset ;
      var_cas_expiryPoints.modifier_popGreatest (inLexique, var_cas_lastOffset, var_cas_lastPoint COMMA_SOURCE_FILE_AT_LINE (850)) ;
      const GGS_bool cond_35487 = (var_cas_lastOffset).operator_isEqual (var_cas_length) ;
      if (cond_35487.isBuiltAndTrue ()) {
        GGS_action_list  var_cas_actions = var_cas_lastPoint.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (853)) ;
        var_cas_actions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_32465->mKey COMMA_SOURCE_FILE_AT_LINE (854))) ;
        var_cas_lastPoint.modifier_setActions (inLexique, var_cas_actions COMMA_SOURCE_FILE_AT_LINE (855)) ;
      }else if (cond_35487.isBuiltAndFalse ()) {
        GGS_action_list  var_cas_finalizeExpiryPointActions = GGS_action_list ::constructor_emptySortedList () ;
        var_cas_finalizeExpiryPointActions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_32465->mKey COMMA_SOURCE_FILE_AT_LINE (859))) ;
        GGS_expiry_point_obj  var_cas_finalizeExpiryPoint = GGS_expiry_point_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (862)), GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length COMMA_SOURCE_FILE_AT_LINE (863)), GGS_lstring ::constructor_new (inLexique, GGS_string ("finalize"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (864)), GGS_adjustable_void ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (865)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (865)), var_cas_finalizeExpiryPointActions COMMA_SOURCE_FILE_AT_LINE (861)) ;
        var_cas_expiryPoints.addAssign_operation (var_cas_length, var_cas_finalizeExpiryPoint) ;
      }
      var_cas_expiryPoints.addAssign_operation (var_cas_lastOffset, var_cas_lastPoint) ;
      GGS_goilTemplateFieldMapList  var_cas_expiryPointsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_uint64  var_cas_previousOffset = GGS_uint64 (0ULL) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_36264 (var_cas_expiryPoints, true) ;
        const GGS_expiry_point_list::cElement * operand_36264 = NULL ;
        while (((operand_36264 = enumerator_36264.nextObject ()))) {
          macroValidPointer (operand_36264) ;
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (876)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ABSOLUTEOFFSET") COMMA_SOURCE_FILE_AT_LINE (877)),  operand_36264->off COMMA_SOURCE_FILE_AT_LINE (877)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RELATIVEOFFSET") COMMA_SOURCE_FILE_AT_LINE (878)),  operand_36264->off.substract_operation (inLexique, var_cas_previousOffset COMMA_SOURCE_FILE_AT_LINE (878)) COMMA_SOURCE_FILE_AT_LINE (878)) ;
          var_cas_previousOffset = operand_36264->off ;
          GGS_goilTemplateFieldMapList  var_cas_actionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_action_list::cEnumerator enumerator_36699 (operand_36264->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (883)), true) ;
            const GGS_action_list::cElement * operand_36699 = NULL ;
            while (((operand_36699 = enumerator_36699.nextObject ()))) {
              macroValidPointer (operand_36699) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (884)) ;
              ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_36699->actionobj COMMA_SOURCE_FILE_AT_LINE (885)) ;
              var_cas_actionsList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTIONS") COMMA_SOURCE_FILE_AT_LINE (888)),  var_cas_actionsList COMMA_SOURCE_FILE_AT_LINE (888)) ;
          GGS_luint64  var_cas_maxAdvance = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (890)) ;
          GGS_luint64  var_cas_maxRetard = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (891)) ;
          { const GGS_adjustable_obj _var_37328 = operand_36264->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (892)) ; // CAST instruction
            if (_var_37328.getPtr () != NULL) {
              macroValidPointer (_var_37328.getPtr ()) ;
              if (typeid (cPtr_adjustable_true) == typeid (* (_var_37328.getPtr ()))) {
                const GGS_adjustable_true var_cas_adjustableExpiryPoint (_var_37328.getPtr ()) ;
                var_cas_maxAdvance = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (894)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (894)) ;
                var_cas_maxRetard = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (895)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (895)) ;
              }else{
              }
            }
          }
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXRETARD"),  var_cas_maxRetard COMMA_SOURCE_FILE_AT_LINE (897)) ;
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXADVANCE"),  var_cas_maxAdvance COMMA_SOURCE_FILE_AT_LINE (898)) ;
          var_cas_expiryPointsList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EXPIRYPOINTS") COMMA_SOURCE_FILE_AT_LINE (902)),  var_cas_expiryPointsList COMMA_SOURCE_FILE_AT_LINE (902)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_32465->mKey COMMA_SOURCE_FILE_AT_LINE (904)) ;
      var_cas_scheduletablesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (908)),  var_cas_scheduletablesList COMMA_SOURCE_FILE_AT_LINE (908)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScheduletablesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "computeBinaryVector"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeBinaryVector (C_Compiler & inLexique,
                                const GGS_string  var_cas_vec,
                                GGS_string & var_cas_res,
                                GGS_uint  & var_cas_byteCount COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeBinaryVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_byteCount = var_cas_vec.reader_length ().divide_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (924)) ;
  const GGS_bool cond_38168 = (var_cas_vec.reader_length ().modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (925))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_38168.isBuiltAndTrue ()) {
    var_cas_byteCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (925)) ;
  }
  GGS_stringlist  var_cas_data = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  GGS_uint  var_cas_start = GGS_uint (0U) ;
  GGS_uint _variant_38719 = var_cas_byteCount ;
  GGS_bool _condition_38719 (_variant_38719.isBuilt (), true) ;
  while (_condition_38719.isBuiltAndTrue ()) {
    _condition_38719 = (var_cas_i).operator_strictInf (var_cas_byteCount) ;
    if (_condition_38719.isBuiltAndTrue ()) {
      if (_variant_38719.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (950)) ;
        _condition_38719 = GGS_bool (false) ;
      }else{
        _variant_38719.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_byte = var_cas_vec.reader_subString (var_cas_start, GGS_uint (8U)).reader_reversedString () ;
        GGS_uint  var_cas_bitPos = GGS_uint (0U) ;
        GGS_uint  var_cas_val = GGS_uint (0U) ;
        GGS_uint _variant_38643 = GGS_uint (8U) ;
        GGS_bool _condition_38643 (_variant_38643.isBuilt (), true) ;
        while (_condition_38643.isBuiltAndTrue ()) {
          _condition_38643 = (var_cas_bitPos).operator_strictInf (var_cas_byte.reader_length ()) ;
          if (_condition_38643.isBuiltAndTrue ()) {
            if (_variant_38643.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (946)) ;
              _condition_38643 = GGS_bool (false) ;
            }else{
              _variant_38643.decrement_operation (inLexique COMMA_HERE) ;
              GGS_char var_cas_bit = var_cas_byte.reader_characterAtIndex (inLexique, var_cas_bitPos COMMA_SOURCE_FILE_AT_LINE (940)) ;
              var_cas_val = var_cas_val.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (941)) ;
              const GGS_bool cond_38613 = (var_cas_bit).operator_isEqual (GGS_char (TO_UNICODE ('1'))) ;
              if (cond_38613.isBuiltAndTrue ()) {
                var_cas_val.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (943)) ;
              }
              var_cas_bitPos.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (945)) ;
            }
          }
        }
        var_cas_data.addAssign_operation (var_cas_val.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (947))) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (948)) ;
        var_cas_start = var_cas_start.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (949)) ;
      }
    }
  }
  var_cas_res = GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_data, GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (951)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeBinaryVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeVector"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeVector (C_Compiler & inLexique,
                                GGS_string & var_cas_vector,
                                const GGS_lstring   var_cas_objectName,
                                const GGS_lstring   var_cas_applicationName,
                                const GGS_lstringlist   var_cas_ownedObjects,
                                const GGS_lstringlist   var_cas_accessingObjects COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_39039 = function_isInLstringlist (inLexique, var_cas_ownedObjects, var_cas_objectName COMMA_SOURCE_FILE_AT_LINE (961)) ;
  if (cond_39039.isBuiltAndTrue ()) {
    var_cas_vector.appendCString ("11") ;
  }else if (cond_39039.isBuiltAndFalse ()) {
    var_cas_vector.appendCString ("0") ;
    const GGS_bool cond_39191 = function_isInLstringlist (inLexique, var_cas_accessingObjects, var_cas_applicationName COMMA_SOURCE_FILE_AT_LINE (966)) ;
    if (cond_39191.isBuiltAndTrue ()) {
      var_cas_vector.appendCString ("1") ;
    }else if (cond_39191.isBuiltAndFalse ()) {
      var_cas_vector.appendCString ("0") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setOsapplicationsList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsapplicationsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsapplicationsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_osapplicationsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_stringset  var_cas_trustedFunctionSet = GGS_stringset ::constructor_emptySet () ;
  GGS_tasks_by_type  var_cas_allTaskList = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (982)) ;
  {
    GGS_app_map::cEnumerator enumerator_39537 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (983)), true) ;
    const GGS_app_map::cElement * operand_39537 = NULL ;
    while (((operand_39537 = enumerator_39537.nextObject ()))) {
      macroValidPointer (operand_39537) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (984)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (985)),  operand_39537->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (985)) COMMA_SOURCE_FILE_AT_LINE (985)) ;
      { const GGS_basic_type _var_39958 = operand_39537->mInfo.app.reader_restart (inLexique COMMA_SOURCE_FILE_AT_LINE (988)) ; // CAST instruction
        if (_var_39958.getPtr () != NULL) {
          macroValidPointer (_var_39958.getPtr ()) ;
          if (typeid (cPtr_string_class) == typeid (* (_var_39958.getPtr ()))) {
            const GGS_string_class var_cas_restartTask (_var_39958.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESTART"), var_cas_restartTask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (990)) COMMA_SOURCE_FILE_AT_LINE (990)),  var_cas_restartTask.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (990)) COMMA_SOURCE_FILE_AT_LINE (990)) ;
          }else{
          }
        }
      }
      GGS_string var_cas_vector = GGS_string ("") ;
      GGS_string var_cas_binaryVector ;
      GGS_uint  var_cas_numberOfItems ;
      GGS_task_map  var_cas_allTasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (999)) ;
      {
        GGS_tasks_by_type::cEnumerator enumerator_40195 (var_cas_allTaskList, true) ;
        const GGS_tasks_by_type::cElement * operand_40195 = NULL ;
        while (((operand_40195 = enumerator_40195.nextObject ()))) {
          macroValidPointer (operand_40195) ;
          GGS_task_obj  var_cas_taskItem ;
          const GGS_task_map  temp_40244 = var_cas_allTasks ;
          if (temp_40244.isBuilt ()) {
            temp_40244 (HERE)->method_get (inLexique, function_lstringWith (inLexique, operand_40195->name COMMA_SOURCE_FILE_AT_LINE (1002)), var_cas_taskItem COMMA_SOURCE_FILE_AT_LINE (1002)) ;
          }
          ::routine_computeVector (inLexique,  var_cas_vector,  function_lstringWith (inLexique, operand_40195->name COMMA_SOURCE_FILE_AT_LINE (1003)),  operand_39537->mKey,  operand_39537->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)),  var_cas_taskItem.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)) COMMA_SOURCE_FILE_AT_LINE (1003)) ;
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_40467 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1006)), true) ;
        const GGS_isr_map::cElement * operand_40467 = NULL ;
        while (((operand_40467 = enumerator_40467.nextObject ()))) {
          macroValidPointer (operand_40467) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_40467->mKey,  operand_39537->mKey,  operand_39537->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1007)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1007)),  operand_40467->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1007)) COMMA_SOURCE_FILE_AT_LINE (1007)) ;
        }
      }
      var_cas_vector.appendCString ("01") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1011)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1011)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1012)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1013)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1013)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1014)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)) COMMA_SOURCE_FILE_AT_LINE (1014)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_alarm_map::cEnumerator enumerator_41103 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1018)), true) ;
        const GGS_alarm_map::cElement * operand_41103 = NULL ;
        while (((operand_41103 = enumerator_41103.nextObject ()))) {
          macroValidPointer (operand_41103) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_41103->mKey,  operand_39537->mKey,  operand_39537->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)),  operand_41103->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) COMMA_SOURCE_FILE_AT_LINE (1019)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1021)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1021)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1022)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1023)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1023)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1024)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1024)) COMMA_SOURCE_FILE_AT_LINE (1024)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_resource_map::cEnumerator enumerator_41634 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1028)), true) ;
        const GGS_resource_map::cElement * operand_41634 = NULL ;
        while (((operand_41634 = enumerator_41634.nextObject ()))) {
          macroValidPointer (operand_41634) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_41634->mKey,  operand_39537->mKey,  operand_39537->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1029)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1029)),  operand_41634->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1029)) COMMA_SOURCE_FILE_AT_LINE (1029)) ;
        }
      }
      var_cas_vector.appendCString ("10") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1034)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1034)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1035)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1036)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1036)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1037)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1037)) COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_scheduletable_map::cEnumerator enumerator_42294 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1041)), true) ;
        const GGS_scheduletable_map::cElement * operand_42294 = NULL ;
        while (((operand_42294 = enumerator_42294.nextObject ()))) {
          macroValidPointer (operand_42294) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_42294->mKey,  operand_39537->mKey,  operand_39537->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)),  operand_42294->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)) COMMA_SOURCE_FILE_AT_LINE (1042)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1044)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1044)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1045)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1046)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1046)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1047)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1047)) COMMA_SOURCE_FILE_AT_LINE (1047)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_counter_map::cEnumerator enumerator_42876 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)), true) ;
        const GGS_counter_map::cElement * operand_42876 = NULL ;
        while (((operand_42876 = enumerator_42876.nextObject ()))) {
          macroValidPointer (operand_42876) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_42876->mKey,  operand_39537->mKey,  operand_39537->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)).reader_keyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)),  operand_42876->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) COMMA_SOURCE_FILE_AT_LINE (1052)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1054)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1054)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1055)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1056)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1056)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1057)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) COMMA_SOURCE_FILE_AT_LINE (1057)) ;
      GGS_goilTemplateFieldMapList  var_cas_procList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_43548 (operand_39537->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1063)), true) ;
        const GGS_ident_map::cElement * operand_43548 = NULL ;
        while (((operand_43548 = enumerator_43548.nextObject ()))) {
          macroValidPointer (operand_43548) ;
          GGS_goilTemplateFieldMap  var_cas_taskFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_taskFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_43548->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)) COMMA_SOURCE_FILE_AT_LINE (1065)),  operand_43548->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1065)) COMMA_SOURCE_FILE_AT_LINE (1065)) ;
          var_cas_procList.addAssign_operation (var_cas_taskFieldMap) ;
          var_cas_taskList.addAssign_operation (var_cas_taskFieldMap) ;
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_43815 (operand_39537->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1069)), true) ;
        const GGS_ident_map::cElement * operand_43815 = NULL ;
        while (((operand_43815 = enumerator_43815.nextObject ()))) {
          macroValidPointer (operand_43815) ;
          GGS_goilTemplateFieldMap  var_cas_isrFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_isrFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_43815->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)) COMMA_SOURCE_FILE_AT_LINE (1071)),  operand_43815->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)) COMMA_SOURCE_FILE_AT_LINE (1071)) ;
          GGS_isr_obj  var_cas_isr ;
          const GGS_isr_map  temp_44024 = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)) ;
          if (temp_44024.isBuilt ()) {
            temp_44024 (HERE)->method_get (inLexique, operand_43815->mKey, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (1073)) ;
          }
          { const GGS_basic_type _var_44276 = var_cas_isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1074)) ; // CAST instruction
            if (_var_44276.getPtr () != NULL) {
              macroValidPointer (_var_44276.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_44276.getPtr ()))) {
                const GGS_uint64_class var_cas_cat (_var_44276.getPtr ()) ;
                const GGS_bool cond_44257 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1076))).operator_isEqual (GGS_uint64 (2ULL)) ;
                if (cond_44257.isBuiltAndTrue ()) {
                  var_cas_procList.addAssign_operation (var_cas_isrFieldMap) ;
                }
              }else{
              }
            }
          }
          var_cas_isrList.addAssign_operation (var_cas_isrFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (1084)),  var_cas_procList COMMA_SOURCE_FILE_AT_LINE (1084)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASKS") COMMA_SOURCE_FILE_AT_LINE (1085)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (1085)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ISRS") COMMA_SOURCE_FILE_AT_LINE (1086)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (1086)) ;
      GGS_goilTemplateFieldMapList  var_cas_alarmList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_44635 (operand_39537->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)), true) ;
        const GGS_ident_map::cElement * operand_44635 = NULL ;
        while (((operand_44635 = enumerator_44635.nextObject ()))) {
          macroValidPointer (operand_44635) ;
          GGS_goilTemplateFieldMap  var_cas_alarmFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_alarmFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_44635->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)) COMMA_SOURCE_FILE_AT_LINE (1092)),  operand_44635->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)) COMMA_SOURCE_FILE_AT_LINE (1092)) ;
          var_cas_alarmList.addAssign_operation (var_cas_alarmFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMS") COMMA_SOURCE_FILE_AT_LINE (1095)),  var_cas_alarmList COMMA_SOURCE_FILE_AT_LINE (1095)) ;
      GGS_goilTemplateFieldMapList  var_cas_resourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_regularResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_internalResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_45166 (operand_39537->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1101)), true) ;
        const GGS_ident_map::cElement * operand_45166 = NULL ;
        while (((operand_45166 = enumerator_45166.nextObject ()))) {
          macroValidPointer (operand_45166) ;
          GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1102)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_45166->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)),  operand_45166->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
          var_cas_resourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
          GGS_resource_map  var_cas_allResources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1105)) ;
          GGS_resource_obj  var_cas_resource ;
          const GGS_resource_map  temp_45497 = var_cas_allResources ;
          if (temp_45497.isBuilt ()) {
            temp_45497 (HERE)->method_get (inLexique, operand_45166->mKey, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (1107)) ;
          }
          { const GGS_resource_property_obj _var_45719 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1108)) ; // CAST instruction
            if (_var_45719.getPtr () != NULL) {
              macroValidPointer (_var_45719.getPtr ()) ;
              if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_45719.getPtr ()))) {
                var_cas_internalResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }else{
                var_cas_regularResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }
            }
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCES") COMMA_SOURCE_FILE_AT_LINE (1115)),  var_cas_resourcesList COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("REGULARRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1116)),  var_cas_regularResourcesList COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("INTERNALRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1117)),  var_cas_internalResourcesList COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      GGS_goilTemplateFieldMapList  var_cas_scheduletableList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46118 (operand_39537->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1121)), true) ;
        const GGS_ident_map::cElement * operand_46118 = NULL ;
        while (((operand_46118 = enumerator_46118.nextObject ()))) {
          macroValidPointer (operand_46118) ;
          GGS_goilTemplateFieldMap  var_cas_scheduletableFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_scheduletableFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46118->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) COMMA_SOURCE_FILE_AT_LINE (1123)),  operand_46118->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1123)) COMMA_SOURCE_FILE_AT_LINE (1123)) ;
          var_cas_scheduletableList.addAssign_operation (var_cas_scheduletableFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (1126)),  var_cas_scheduletableList COMMA_SOURCE_FILE_AT_LINE (1126)) ;
      GGS_goilTemplateFieldMapList  var_cas_counterList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46573 (operand_39537->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1130)), true) ;
        const GGS_ident_map::cElement * operand_46573 = NULL ;
        while (((operand_46573 = enumerator_46573.nextObject ()))) {
          macroValidPointer (operand_46573) ;
          GGS_goilTemplateFieldMap  var_cas_counterFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_counterFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46573->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1132)) COMMA_SOURCE_FILE_AT_LINE (1132)),  operand_46573->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1132)) COMMA_SOURCE_FILE_AT_LINE (1132)) ;
          var_cas_counterList.addAssign_operation (var_cas_counterFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (1135)),  var_cas_counterList COMMA_SOURCE_FILE_AT_LINE (1135)) ;
      GGS_goilTemplateFieldMapList  var_cas_messageList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46986 (operand_39537->mInfo.app.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)), true) ;
        const GGS_ident_map::cElement * operand_46986 = NULL ;
        while (((operand_46986 = enumerator_46986.nextObject ()))) {
          macroValidPointer (operand_46986) ;
          GGS_goilTemplateFieldMap  var_cas_messageFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_messageFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46986->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1141)) COMMA_SOURCE_FILE_AT_LINE (1141)),  operand_46986->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1141)) COMMA_SOURCE_FILE_AT_LINE (1141)) ;
          var_cas_messageList.addAssign_operation (var_cas_messageFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (1144)),  var_cas_messageList COMMA_SOURCE_FILE_AT_LINE (1144)) ;
      var_cas_osapplicationsList.addAssign_operation (var_cas_fieldMap) ;
      { const GGS_app_trusted_obj _var_47556 = operand_39537->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1148)) ; // CAST instruction
        if (_var_47556.getPtr () != NULL) {
          macroValidPointer (_var_47556.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_47556.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_47556.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_47424 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)), true) ;
              while (enumerator_47424.hasCurrentObject ()) {
                var_cas_trustedFunctionSet.addAssign_operation (enumerator_47424._key (HERE)) ;
                enumerator_47424.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OSAPPLICATIONS") COMMA_SOURCE_FILE_AT_LINE (1155)),  var_cas_osapplicationsList COMMA_SOURCE_FILE_AT_LINE (1155)) ;
  GGS_goilTemplateFieldMapList  var_cas_trustedfunctionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_stringset::cEnumerator enumerator_47745 (var_cas_trustedFunctionSet, true) ;
    while (enumerator_47745.hasCurrentObject ()) {
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1159)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1160)),  enumerator_47745._key (HERE) COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      var_cas_trustedfunctionsList.addAssign_operation (var_cas_fieldMap) ;
      enumerator_47745.next () ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRUSTEDFUNCTIONS") COMMA_SOURCE_FILE_AT_LINE (1163)),  var_cas_trustedfunctionsList COMMA_SOURCE_FILE_AT_LINE (1163)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsapplicationsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setReadyList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setReadyList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_list   var_cas_readyList,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setReadyList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)).reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) ;
  GGS_goilTemplateFieldMapList  var_cas_fifoList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  const GGS_bool cond_48700 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_48700.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    const GGS_ident_map  temp_48489 = var_cas_config ;
    if (temp_48489.isBuilt ()) {
      temp_48489 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1183)), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1183)) ;
    }
    { const GGS_basic_type _var_48688 = var_cas_pw ; // CAST instruction
      if (_var_48688.getPtr () != NULL) {
        macroValidPointer (_var_48688.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_48688.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_48688.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1186)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1189)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_48727 (var_cas_readyList, true) ;
    const GGS_prio_list::cElement * operand_48727 = NULL ;
    while (((operand_48727 = enumerator_48727.nextObject ()))) {
      macroValidPointer (operand_48727) ;
      GGS_goilTemplateFieldMap  var_cas_fifoFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1193)) ;
      GGS_uint  var_cas_maxSize ;
      const GGS_bool cond_48958 = var_cas_powerof2 ;
      if (cond_48958.isBuiltAndTrue ()) {
        var_cas_maxSize = GGS_uint (1U) ;
        GGS_uint _variant_48943 = GGS_uint (32U) ;
        GGS_bool _condition_48943 (_variant_48943.isBuilt (), true) ;
        while (_condition_48943.isBuiltAndTrue ()) {
          _condition_48943 = (operand_48727->fifosize).operator_strictSup (var_cas_maxSize) ;
          if (_condition_48943.isBuiltAndTrue ()) {
            if (_variant_48943.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1200)) ;
              _condition_48943 = GGS_bool (false) ;
            }else{
              _variant_48943.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_maxSize = var_cas_maxSize.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1199)) ;
            }
          }
        }
      }else if (cond_48958.isBuiltAndFalse ()) {
        var_cas_maxSize = operand_48727->fifosize ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fifoFieldMap,  function_lstringWith (inLexique, GGS_string ("SIZE") COMMA_SOURCE_FILE_AT_LINE (1204)),  var_cas_maxSize.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1204)) COMMA_SOURCE_FILE_AT_LINE (1204)) ;
      var_cas_fifoList.addAssign_operation (var_cas_fifoFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("READYLIST") COMMA_SOURCE_FILE_AT_LINE (1207)),  var_cas_fifoList COMMA_SOURCE_FILE_AT_LINE (1207)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setReadyList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessCount"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_taskCount = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1219)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1219)) ;
  GGS_uint64  var_cas_isrCount = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)) ;
  GGS_uint64  var_cas_extendedCount = GGS_uint64 (0ULL) ;
  {
    GGS_task_map::cEnumerator enumerator_49552 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)), true) ;
    const GGS_task_map::cElement * operand_49552 = NULL ;
    while (((operand_49552 = enumerator_49552.nextObject ()))) {
      macroValidPointer (operand_49552) ;
      const GGS_bool cond_49635 = (operand_49552->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_49635.isBuiltAndTrue ()) {
        var_cas_extendedCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)) ;
      }
    }
  }
  GGS_uint64  var_cas_isr2Count = GGS_uint64 (0ULL) ;
  {
    GGS_isr_map::cEnumerator enumerator_49693 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)), true) ;
    const GGS_isr_map::cElement * operand_49693 = NULL ;
    while (((operand_49693 = enumerator_49693.nextObject ()))) {
      macroValidPointer (operand_49693) ;
      { const GGS_basic_type _var_49894 = operand_49693->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1229)) ; // CAST instruction
        if (_var_49894.getPtr () != NULL) {
          macroValidPointer (_var_49894.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_49894.getPtr ()))) {
            const GGS_uint64_class var_cas_cat (_var_49894.getPtr ()) ;
            const GGS_bool cond_49826 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1231))).operator_isEqual (GGS_uint64 (2ULL)) ;
            if (cond_49826.isBuiltAndTrue ()) {
              var_cas_isr2Count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)) ;
            }
          }else{
            operand_49693->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("missing CATEGORY attribute") COMMA_SOURCE_FILE_AT_LINE (1236)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1238)),  var_cas_taskCount COMMA_SOURCE_FILE_AT_LINE (1238)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1239)),  var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1239)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1240)),  var_cas_taskCount.substract_operation (inLexique, var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1240)) COMMA_SOURCE_FILE_AT_LINE (1240)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1241)),  var_cas_taskCount.add_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1241)) COMMA_SOURCE_FILE_AT_LINE (1241)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1242)),  var_cas_isrCount COMMA_SOURCE_FILE_AT_LINE (1242)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR2COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1243)),  var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1243)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR1COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1244)),  var_cas_isrCount.substract_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1244)) COMMA_SOURCE_FILE_AT_LINE (1244)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourceCount"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourceCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourceCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1251)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1251)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1251)) COMMA_SOURCE_FILE_AT_LINE (1251)) ;
  GGS_uint64  var_cas_regularCount = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_internalCount = GGS_uint64 (0ULL) ;
  {
    GGS_resource_map::cEnumerator enumerator_50814 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)), true) ;
    const GGS_resource_map::cElement * operand_50814 = NULL ;
    while (((operand_50814 = enumerator_50814.nextObject ()))) {
      macroValidPointer (operand_50814) ;
      { const GGS_resource_property_obj _var_51183 = operand_50814->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1255)) ; // CAST instruction
        if (_var_51183.getPtr () != NULL) {
          macroValidPointer (_var_51183.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_51183.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_51183.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1259)) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_51183.getPtr ()))) {
            var_cas_internalCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)) ;
          }else{
            operand_50814->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1263)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1263)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (1264)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1266)),  var_cas_regularCount COMMA_SOURCE_FILE_AT_LINE (1266)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1267)),  var_cas_internalCount COMMA_SOURCE_FILE_AT_LINE (1267)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourceCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setSourceFileList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSourceFileList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSourceFileList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_sourceFileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_51569 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)).reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (1275)), true) ;
    const GGS_lstringlist::cElement * operand_51569 = NULL ;
    while (((operand_51569 = enumerator_51569.nextObject ()))) {
      macroValidPointer (operand_51569) ;
      GGS_goilTemplateFieldMap  var_cas_sourceFileFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_sourceFileFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILE"), operand_51569->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1277)) COMMA_SOURCE_FILE_AT_LINE (1277)),  operand_51569->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1277)) COMMA_SOURCE_FILE_AT_LINE (1277)) ;
      var_cas_sourceFileList.addAssign_operation (var_cas_sourceFileFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1280)),  var_cas_sourceFileList COMMA_SOURCE_FILE_AT_LINE (1280)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSourceFileList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setCFlagsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_52084 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1288)).reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1288)), true) ;
    const GGS_lstringlist::cElement * operand_52084 = NULL ;
    while (((operand_52084 = enumerator_52084.nextObject ()))) {
      macroValidPointer (operand_52084) ;
      const GGS_bool cond_52367 = (function_stripString (inLexique, operand_52084->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1289)) COMMA_SOURCE_FILE_AT_LINE (1289))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_52367.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1290)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CFLAG"), operand_52084->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1291)) COMMA_SOURCE_FILE_AT_LINE (1291)),  operand_52084->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1291)) COMMA_SOURCE_FILE_AT_LINE (1291)) ;
        var_cas_cFlagsList.addAssign_operation (var_cas_cFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CFLAGS") COMMA_SOURCE_FILE_AT_LINE (1295)),  var_cas_cFlagsList COMMA_SOURCE_FILE_AT_LINE (1295)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAsFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAsFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAsFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_asFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_52624 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)).reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)), true) ;
    const GGS_lstringlist::cElement * operand_52624 = NULL ;
    while (((operand_52624 = enumerator_52624.nextObject ()))) {
      macroValidPointer (operand_52624) ;
      const GGS_bool cond_52917 = (function_stripString (inLexique, operand_52624->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1304)) COMMA_SOURCE_FILE_AT_LINE (1304))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_52917.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_asFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1305)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_asFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASFLAG"), operand_52624->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)) COMMA_SOURCE_FILE_AT_LINE (1306)),  operand_52624->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)) COMMA_SOURCE_FILE_AT_LINE (1306)) ;
        var_cas_asFlagsList.addAssign_operation (var_cas_asFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ASFLAGS") COMMA_SOURCE_FILE_AT_LINE (1310)),  var_cas_asFlagsList COMMA_SOURCE_FILE_AT_LINE (1310)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAsFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLdFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLdFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLdFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_ldFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_53176 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1318)).reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1318)), true) ;
    const GGS_lstringlist::cElement * operand_53176 = NULL ;
    while (((operand_53176 = enumerator_53176.nextObject ()))) {
      macroValidPointer (operand_53176) ;
      const GGS_bool cond_53469 = (function_stripString (inLexique, operand_53176->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1319)) COMMA_SOURCE_FILE_AT_LINE (1319))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_53469.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_ldFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1320)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_ldFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LDFLAG"), operand_53176->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1321)) COMMA_SOURCE_FILE_AT_LINE (1321)),  operand_53176->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1321)) COMMA_SOURCE_FILE_AT_LINE (1321)) ;
        var_cas_ldFlagsList.addAssign_operation (var_cas_ldFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("LDFLAGS") COMMA_SOURCE_FILE_AT_LINE (1325)),  var_cas_ldFlagsList COMMA_SOURCE_FILE_AT_LINE (1325)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLdFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTraceFlag"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTraceFlag (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTraceFlag at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_trace _var_55917 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1332)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1332)) ; // CAST instruction
    if (_var_55917.getPtr () != NULL) {
      macroValidPointer (_var_55917.getPtr ()) ;
      if (typeid (cPtr_trace) == typeid (* (_var_55917.getPtr ()))) {
        const GGS_trace var_cas_noTrace (_var_55917.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_noTrace.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1334)) COMMA_SOURCE_FILE_AT_LINE (1334)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1334)) ;
      }else if (typeid (cPtr_trace_off) == typeid (* (_var_55917.getPtr ()))) {
        const GGS_trace_off var_cas_traceOff (_var_55917.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOff.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1336)) COMMA_SOURCE_FILE_AT_LINE (1336)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      }else if (typeid (cPtr_trace_on) == typeid (* (_var_55917.getPtr ()))) {
        const GGS_trace_on var_cas_traceOn (_var_55917.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOn.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1338)) COMMA_SOURCE_FILE_AT_LINE (1338)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1338)) ;
        ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFORMAT"), var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) COMMA_SOURCE_FILE_AT_LINE (1339)),  var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) COMMA_SOURCE_FILE_AT_LINE (1339)) ;
        const GGS_bool cond_54326 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1341))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_54326.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)) COMMA_SOURCE_FILE_AT_LINE (1342)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1342)) COMMA_SOURCE_FILE_AT_LINE (1342)) ;
        }else if (cond_54326.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) COMMA_SOURCE_FILE_AT_LINE (1344)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1344)) COMMA_SOURCE_FILE_AT_LINE (1344)) ;
        }
        const GGS_bool cond_54655 = (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1347))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_54655.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)) COMMA_SOURCE_FILE_AT_LINE (1348)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1348)) COMMA_SOURCE_FILE_AT_LINE (1348)) ;
        }else if (cond_54655.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)) COMMA_SOURCE_FILE_AT_LINE (1350)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1350)) COMMA_SOURCE_FILE_AT_LINE (1350)) ;
        }
        const GGS_bool cond_55002 = (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1353)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1353))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_55002.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)) COMMA_SOURCE_FILE_AT_LINE (1354)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1354)) COMMA_SOURCE_FILE_AT_LINE (1354)) ;
        }else if (cond_55002.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)) COMMA_SOURCE_FILE_AT_LINE (1356)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1356)) COMMA_SOURCE_FILE_AT_LINE (1356)) ;
        }
        const GGS_bool cond_55347 = (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1359))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_55347.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)) COMMA_SOURCE_FILE_AT_LINE (1360)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1360)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1360)) COMMA_SOURCE_FILE_AT_LINE (1360)) ;
        }else if (cond_55347.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)) COMMA_SOURCE_FILE_AT_LINE (1362)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1362)) COMMA_SOURCE_FILE_AT_LINE (1362)) ;
        }
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEUSEREVENT"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) COMMA_SOURCE_FILE_AT_LINE (1364)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_user_event (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1364)) COMMA_SOURCE_FILE_AT_LINE (1364)) ;
        { const GGS_trace_method _var_55900 = var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)) ; // CAST instruction
          if (_var_55900.getPtr () != NULL) {
            macroValidPointer (_var_55900.getPtr ()) ;
            if (typeid (cPtr_trace_file) == typeid (* (_var_55900.getPtr ()))) {
              const GGS_trace_file var_cas_traceFile (_var_55900.getPtr ()) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEMETHOD"), var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)).reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1367)) COMMA_SOURCE_FILE_AT_LINE (1367)),  GGS_string ("file") COMMA_SOURCE_FILE_AT_LINE (1367)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFILE"), var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)) COMMA_SOURCE_FILE_AT_LINE (1368)),  var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)) COMMA_SOURCE_FILE_AT_LINE (1368)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTraceFlag\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLinkScript"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinkScript (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinkScript at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linkScriptName = function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)) COMMA_SOURCE_FILE_AT_LINE (1377)) ;
  GGS_bool var_cas_useLinkScript = (var_cas_linkScriptName).operator_isNotEqual (GGS_string ("")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USELINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)) COMMA_SOURCE_FILE_AT_LINE (1379)),  var_cas_useLinkScript COMMA_SOURCE_FILE_AT_LINE (1379)) ;
  const GGS_bool cond_56390 = var_cas_useLinkScript ;
  if (cond_56390.isBuiltAndTrue ()) {
    ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)) COMMA_SOURCE_FILE_AT_LINE (1381)),  var_cas_linkScriptName COMMA_SOURCE_FILE_AT_LINE (1381)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinkScript\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMemoryMapping"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMemoryMapping (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMemoryMapping at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useMemoryMapping = GGS_bool (false) ;
  GGS_bool var_cas_useCompilerSettings = GGS_bool (false) ;
  { const GGS_basic_type _var_57370 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1391)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1391)) ; // CAST instruction
    if (_var_57370.getPtr () != NULL) {
      macroValidPointer (_var_57370.getPtr ()) ;
      if (typeid (cPtr_memmap_false) == typeid (* (_var_57370.getPtr ()))) {
        var_cas_useMemoryMapping = GGS_bool (false) ;
        var_cas_useCompilerSettings = GGS_bool (false) ;
      }else if (typeid (cPtr_memmap_true) == typeid (* (_var_57370.getPtr ()))) {
        const GGS_memmap_true var_cas_trueMemmap (_var_57370.getPtr ()) ;
        var_cas_useMemoryMapping = GGS_bool (true) ;
        GGS_lstring  var_cas_compiler = var_cas_trueMemmap.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)) ;
        const GGS_bool cond_56956 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1398))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_56956.isBuiltAndTrue ()) {
          var_cas_useCompilerSettings = GGS_bool (true) ;
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("COMPILER"),  var_cas_compiler COMMA_SOURCE_FILE_AT_LINE (1400)) ;
        }
        GGS_lstring  var_cas_assembler = var_cas_trueMemmap.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1402)) ;
        const GGS_bool cond_57108 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1403))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_57108.isBuiltAndTrue ()) {
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("ASSEMBLER"),  var_cas_assembler COMMA_SOURCE_FILE_AT_LINE (1404)) ;
        }
        { const GGS_basic_type _var_57353 = var_cas_trueMemmap.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1406)) ; // CAST instruction
          if (_var_57353.getPtr () != NULL) {
            macroValidPointer (_var_57353.getPtr ()) ;
            if (typeid (cPtr_no_linker) == typeid (* (_var_57353.getPtr ()))) {
            }else if (typeid (cPtr_yes_linker) == typeid (* (_var_57353.getPtr ()))) {
              const GGS_yes_linker var_cas_yesLinker (_var_57353.getPtr ()) ;
              GGS_lstring  var_cas_linker = var_cas_yesLinker.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKER"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1410)) COMMA_SOURCE_FILE_AT_LINE (1410)),  var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1410)) COMMA_SOURCE_FILE_AT_LINE (1410)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEMEMORYMAPPING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)) COMMA_SOURCE_FILE_AT_LINE (1413)),  var_cas_useMemoryMapping COMMA_SOURCE_FILE_AT_LINE (1413)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPILERSETTINGS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)) COMMA_SOURCE_FILE_AT_LINE (1414)),  var_cas_useCompilerSettings COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMemoryMapping\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setCompiler"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCompiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCompiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_compiler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1421)).reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1421)) ;
  GGS_string var_cas_actualCompiler = GGS_string ("gcc") ;
  const GGS_bool cond_57863 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1423))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_57863.isBuiltAndTrue ()) {
    var_cas_actualCompiler = var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMPILEREXE"), var_cas_compiler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1424)) COMMA_SOURCE_FILE_AT_LINE (1424)),  var_cas_actualCompiler COMMA_SOURCE_FILE_AT_LINE (1424)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCompiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setAssembler"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAssembler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAssembler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_assembler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)).reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)) ;
  GGS_string var_cas_actualAssembler = GGS_string ("as") ;
  const GGS_bool cond_58235 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1433))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_58235.isBuiltAndTrue ()) {
    var_cas_actualAssembler = var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASSEMBLEREXE"), var_cas_assembler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1434)) COMMA_SOURCE_FILE_AT_LINE (1434)),  var_cas_actualAssembler COMMA_SOURCE_FILE_AT_LINE (1434)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAssembler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setLinker"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinker (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinker at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_linker = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)).reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1441)) ;
  GGS_string var_cas_actualLinker = GGS_string ("gcc") ;
  const GGS_bool cond_58587 = (var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1443))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_58587.isBuiltAndTrue ()) {
    var_cas_actualLinker = var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKEREXE"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1444)) COMMA_SOURCE_FILE_AT_LINE (1444)),  var_cas_actualLinker COMMA_SOURCE_FILE_AT_LINE (1444)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinker\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setTarget"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTarget (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TARGET") COMMA_SOURCE_FILE_AT_LINE (1451)),  gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (1451)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ARCH") COMMA_SOURCE_FILE_AT_LINE (1452)),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)) COMMA_SOURCE_FILE_AT_LINE (1452)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CHIP") COMMA_SOURCE_FILE_AT_LINE (1453)),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)) COMMA_SOURCE_FILE_AT_LINE (1453)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("BOARD") COMMA_SOURCE_FILE_AT_LINE (1454)),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (1454)) COMMA_SOURCE_FILE_AT_LINE (1454)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setTemplatePath"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTemplatePath (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTemplatePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_templatePath = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TEMPLATEPATH") COMMA_SOURCE_FILE_AT_LINE (1462)),  var_cas_templatePath COMMA_SOURCE_FILE_AT_LINE (1462)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTemplatePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setTrampolinePath"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTrampolinePath (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTrampolinePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_trampolinePath = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1469)).reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (1469)) ;
  const GGS_bool cond_59640 = (var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1470))).operator_isEqual (GGS_string ("")) ;
  if (cond_59640.isBuiltAndTrue ()) {
    var_cas_trampolinePath = GGS_lstring ::constructor_new (inLexique, GGS_string (".."), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1471)) COMMA_SOURCE_FILE_AT_LINE (1471)) ;
  }
  ::routine_checkTrampolinePath (inLexique,  var_cas_trampolinePath COMMA_SOURCE_FILE_AT_LINE (1473)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRAMPOLINEPATH"), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)) COMMA_SOURCE_FILE_AT_LINE (1474)),  var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)) COMMA_SOURCE_FILE_AT_LINE (1474)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTrampolinePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setSystemCall"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSystemCall (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSystemCall at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESYSTEMCALL"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)) COMMA_SOURCE_FILE_AT_LINE (1481)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1481)) COMMA_SOURCE_FILE_AT_LINE (1481)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSystemCall\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "setDebug"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setDebug (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setDebug at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEDEBUG"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)) COMMA_SOURCE_FILE_AT_LINE (1488)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1488)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1488)) COMMA_SOURCE_FILE_AT_LINE (1488)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setDebug\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setUseInterruptTable"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseInterruptTable (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseInterruptTable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEINTERRUPTTABLE") COMMA_SOURCE_FILE_AT_LINE (1495)),  gOption_goil_5F_options_posix_5F_it.reader_value () COMMA_SOURCE_FILE_AT_LINE (1495)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseInterruptTable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setBuildConfig"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBuildConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBuildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setSourceFileList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1502)) ;
  ::routine_setCFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1503)) ;
  ::routine_setAsFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1504)) ;
  ::routine_setLdFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1505)) ;
  ::routine_setTraceFlag (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1506)) ;
  ::routine_setLinkScript (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1507)) ;
  ::routine_setMemoryMapping (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1508)) ;
  ::routine_setCompiler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1509)) ;
  ::routine_setAssembler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1510)) ;
  ::routine_setLinker (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1511)) ;
  ::routine_setTarget (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1512)) ;
  ::routine_setTemplatePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1513)) ;
  ::routine_setTrampolinePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1514)) ;
  ::routine_setSystemCall (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1515)) ;
  ::routine_setDebug (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1516)) ;
  ::routine_setUseInterruptTable (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1517)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBuildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "useCommunication"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_useCommunication (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_useCommunication at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom ;
  var_cas_useCom = GGS_bool (false) ;
  GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  const GGS_bool cond_61252 = var_cas_comObject.reader_usecom (inLexique COMMA_SOURCE_FILE_AT_LINE (1523)) ;
  if (cond_61252.isBuiltAndTrue ()) {
    var_cas_useCom = GGS_bool (true) ;
  }else if (cond_61252.isBuiltAndFalse ()) {
    var_cas_useCom = ((var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1526)).reader_count ()).operator_strictSup (GGS_uint (0U))).operator_or ((var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1527)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_useCommunication\n") ;
  #endif
  return var_cas_useCom ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_useCommunication (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_useCommunication (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_useCommunication [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_useCommunication ("useCommunication",
                              functionForGenericCall_useCommunication,
                              & kTypeDescriptor_GGS_bool,
                              1,
                              kArgumentTypeList_useCommunication) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setUseCom"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseCom (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseCom at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1537)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOM"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1538)),  var_cas_useCom COMMA_SOURCE_FILE_AT_LINE (1538)) ;
  const GGS_bool cond_62942 = var_cas_useCom ;
  if (cond_62942.isBuiltAndTrue ()) {
    GGS_uint64  var_cas_timeBaseInNanoseconds = GGS_uint64 (1000000ULL) ;
    GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) ;
    { const GGS_basic_type _var_61964 = var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1542)) ; // CAST instruction
      if (_var_61964.getPtr () != NULL) {
        macroValidPointer (_var_61964.getPtr ()) ;
        if (typeid (cPtr_float_class) == typeid (* (_var_61964.getPtr ()))) {
          const GGS_float_class var_cas_timeBase (_var_61964.getPtr ()) ;
          var_cas_timeBaseInNanoseconds = var_cas_timeBase.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1544)).multiply_operation (inLexique, GGS_double (1.000000e+09) COMMA_SOURCE_FILE_AT_LINE (1544)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1544)) ;
        }else{
        }
      }
    }
    ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMTIMEBASE"), var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1547)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1547)) COMMA_SOURCE_FILE_AT_LINE (1547)),  var_cas_timeBaseInNanoseconds COMMA_SOURCE_FILE_AT_LINE (1547)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMERRORHOOK"), var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1548)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1548)) COMMA_SOURCE_FILE_AT_LINE (1548)),  function_getBool (inLexique, var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1548)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1548)) COMMA_SOURCE_FILE_AT_LINE (1548)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMGETSERVICEID"), var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)) COMMA_SOURCE_FILE_AT_LINE (1549)),  function_getBool (inLexique, var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1549)) COMMA_SOURCE_FILE_AT_LINE (1549)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPARAMETERACCESS"), var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)) COMMA_SOURCE_FILE_AT_LINE (1550)),  function_getBool (inLexique, var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1550)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1550)) COMMA_SOURCE_FILE_AT_LINE (1550)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTCOMEXTENSION"), var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)) COMMA_SOURCE_FILE_AT_LINE (1551)),  function_getBool (inLexique, var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1551)) COMMA_SOURCE_FILE_AT_LINE (1551)) ;
    GGS_lstring  var_cas_comStatus = var_cas_comObject.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1553)) ;
    GGS_bool var_cas_comExtended = GGS_bool (false) ;
    const GGS_bool cond_62841 = (var_cas_comStatus.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1555))).operator_isEqual (GGS_string ("extended")) ;
    if (cond_62841.isBuiltAndTrue ()) {
      var_cas_comExtended = GGS_bool (true) ;
    }
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMEXTENDED"), var_cas_comStatus.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1558)) COMMA_SOURCE_FILE_AT_LINE (1558)),  var_cas_comExtended COMMA_SOURCE_FILE_AT_LINE (1558)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseCom\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setExtended"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtended (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtended at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_extended = (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1567)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1567)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1567))).operator_isEqual (GGS_string ("extended")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDED"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)) COMMA_SOURCE_FILE_AT_LINE (1568)),  var_cas_extended COMMA_SOURCE_FILE_AT_LINE (1568)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtended\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "scalabilityClass"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_scalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_uint64  & var_cas_sc,
                                GGS_bool & var_cas_useTimingProtection,
                                GGS_bool & var_cas_useProtectionHook COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_scalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_sc = GGS_uint64 (0ULL) ;
  var_cas_useTimingProtection = GGS_bool (false) ;
  var_cas_useProtectionHook = GGS_bool (false) ;
  GGS_bool var_cas_useGlobalTime = GGS_bool (false) ;
  GGS_bool var_cas_useOSApplication = GGS_bool (false) ;
  const GGS_bool cond_66737 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_66737.isBuiltAndTrue ()) {
    {
      GGS_task_map::cEnumerator enumerator_63580 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1585)), true) ;
      const GGS_task_map::cElement * operand_63580 = NULL ;
      while (((operand_63580 = enumerator_63580.nextObject ()))) {
        macroValidPointer (operand_63580) ;
        { const GGS_timing_prot _var_63703 = operand_63580->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1586)) ; // CAST instruction
          if (_var_63703.getPtr () != NULL) {
            macroValidPointer (_var_63703.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_63703.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_63747 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1591)), true) ;
      const GGS_isr_map::cElement * operand_63747 = NULL ;
      while (((operand_63747 = enumerator_63747.nextObject ()))) {
        macroValidPointer (operand_63747) ;
        { const GGS_timing_prot _var_63867 = operand_63747->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1592)) ; // CAST instruction
          if (_var_63867.getPtr () != NULL) {
            macroValidPointer (_var_63867.getPtr ()) ;
            if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_63867.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_63909 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1597)), true) ;
      const GGS_scheduletable_map::cElement * operand_63909 = NULL ;
      while (((operand_63909 = enumerator_63909.nextObject ()))) {
        macroValidPointer (operand_63909) ;
        { const GGS_ltgt_sync_obj _var_64040 = operand_63909->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) ; // CAST instruction
          if (_var_64040.getPtr () != NULL) {
            macroValidPointer (_var_64040.getPtr ()) ;
            if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_64040.getPtr ()))) {
              var_cas_useGlobalTime = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    var_cas_useOSApplication = (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1603)).reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    { const GGS_basic_type _var_64243 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)).reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1605)) ; // CAST instruction
      if (_var_64243.getPtr () != NULL) {
        macroValidPointer (_var_64243.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_64243.getPtr ()))) {
          const GGS_bool_class var_cas_ph (_var_64243.getPtr ()) ;
          var_cas_useProtectionHook = var_cas_ph.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)) ;
        }else{
        }
      }
    }
    var_cas_sc = GGS_uint64 (1ULL) ;
    GGS_string var_cas_setSC = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1614)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1614)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1614)) ;
    const GGS_bool cond_64958 = ((var_cas_setSC).operator_isEqual (GGS_string (""))).operator_or ((var_cas_setSC).operator_isEqual (GGS_string ("AUTO"))) ;
    if (cond_64958.isBuiltAndTrue ()) {
      const GGS_bool cond_64668 = ((var_cas_useTimingProtection).operator_or (var_cas_useProtectionHook)).operator_or (var_cas_useGlobalTime) ;
      if (cond_64668.isBuiltAndTrue ()) {
        var_cas_sc = GGS_uint64 (2ULL) ;
      }
      const GGS_bool cond_64938 = (function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1628)) COMMA_SOURCE_FILE_AT_LINE (1628))).operator_or ((var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1628)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
      if (cond_64938.isBuiltAndTrue ()) {
        var_cas_sc = var_cas_sc.add_operation (inLexique, GGS_uint64 (2ULL) COMMA_SOURCE_FILE_AT_LINE (1629)) ;
      }
    }else if (cond_64958.isBuiltAndFalse ()) {
      const GGS_bool cond_65758 = (var_cas_setSC).operator_isEqual (GGS_string ("sc1")) ;
      if (cond_65758.isBuiltAndTrue ()) {
        const GGS_bool cond_65509 = var_cas_useTimingProtection ;
        if (cond_65509.isBuiltAndTrue ()) {
          const GGS_bool cond_65344 = var_cas_useOSApplication ;
          if (cond_65344.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (4ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1639)) ;
          }else if (cond_65344.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (2ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1642)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1642)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 2 because Timing Protection is used") COMMA_SOURCE_FILE_AT_LINE (1642)) ;
          }
        }else if (cond_65509.isBuiltAndFalse ()) {
          const GGS_bool cond_65690 = var_cas_useOSApplication ;
          if (cond_65690.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (3ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1647)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1647)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1647)) ;
          }else if (cond_65690.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (1ULL) ;
          }
        }
      }else if (cond_65758.isBuiltAndFalse ()) {
        const GGS_bool cond_66320 = (var_cas_setSC).operator_isEqual (GGS_string ("sc2")) ;
        if (cond_66320.isBuiltAndTrue ()) {
          const GGS_bool cond_66071 = var_cas_useTimingProtection ;
          if (cond_66071.isBuiltAndTrue ()) {
            const GGS_bool cond_66018 = var_cas_useOSApplication ;
            if (cond_66018.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1656)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1656)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1656)) ;
            }else if (cond_66018.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }else if (cond_66071.isBuiltAndFalse ()) {
            const GGS_bool cond_66252 = var_cas_useOSApplication ;
            if (cond_66252.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1663)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1663)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1663)) ;
            }else if (cond_66252.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }
        }else if (cond_66320.isBuiltAndFalse ()) {
          const GGS_bool cond_66681 = (var_cas_setSC).operator_isEqual (GGS_string ("sc3")) ;
          if (cond_66681.isBuiltAndTrue ()) {
            const GGS_bool cond_66633 = var_cas_useTimingProtection ;
            if (cond_66633.isBuiltAndTrue ()) {
              const GGS_bool cond_66580 = var_cas_useOSApplication ;
              if (cond_66580.isBuiltAndTrue ()) {
                var_cas_sc = GGS_uint64 (4ULL) ;
                var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1672)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1672)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1672)) ;
              }else if (cond_66580.isBuiltAndFalse ()) {
                var_cas_sc = GGS_uint64 (3ULL) ;
              }
            }else if (cond_66633.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
            }
          }else if (cond_66681.isBuiltAndFalse ()) {
            const GGS_bool cond_66715 = (var_cas_setSC).operator_isEqual (GGS_string ("sc4")) ;
            if (cond_66715.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_scalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setScalabilityClass"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_sc ;
  GGS_bool var_cas_useTimingProtection ;
  GGS_bool var_cas_useProtectionHook ;
  ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  var_cas_useTimingProtection,  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1692)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCALABILITYCLASS") COMMA_SOURCE_FILE_AT_LINE (1693)),  var_cas_sc COMMA_SOURCE_FILE_AT_LINE (1693)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USETIMINGPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1694)),  var_cas_useTimingProtection COMMA_SOURCE_FILE_AT_LINE (1694)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEPROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (1695)),  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1695)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEMEMORYPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1696)),  function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1696)) COMMA_SOURCE_FILE_AT_LINE (1696)) COMMA_SOURCE_FILE_AT_LINE (1696)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEOSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1697)),  ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) COMMA_SOURCE_FILE_AT_LINE (1697)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setUseHooks"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseHooks (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseHooks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTUPHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)) COMMA_SOURCE_FILE_AT_LINE (1704)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1704)) COMMA_SOURCE_FILE_AT_LINE (1704)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESHUTDOWNHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)) COMMA_SOURCE_FILE_AT_LINE (1705)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1705)) COMMA_SOURCE_FILE_AT_LINE (1705)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEERRORHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)) COMMA_SOURCE_FILE_AT_LINE (1706)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1706)) COMMA_SOURCE_FILE_AT_LINE (1706)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPRETASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)) COMMA_SOURCE_FILE_AT_LINE (1707)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1707)) COMMA_SOURCE_FILE_AT_LINE (1707)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPOSTTASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)) COMMA_SOURCE_FILE_AT_LINE (1708)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1708)) COMMA_SOURCE_FILE_AT_LINE (1708)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEGETSERVICEID"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)) COMMA_SOURCE_FILE_AT_LINE (1709)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1709)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1709)) COMMA_SOURCE_FILE_AT_LINE (1709)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPARAMETERACCESS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)) COMMA_SOURCE_FILE_AT_LINE (1710)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1710)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1710)) COMMA_SOURCE_FILE_AT_LINE (1710)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USERESSCHEDULER"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1711)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1711)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1711)) COMMA_SOURCE_FILE_AT_LINE (1711)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1711)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1711)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1711)) COMMA_SOURCE_FILE_AT_LINE (1711)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTACKMONITORING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)) COMMA_SOURCE_FILE_AT_LINE (1712)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)).reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (1712)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1712)) COMMA_SOURCE_FILE_AT_LINE (1712)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseHooks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setOsConfig"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setExtended (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1716)) ;
  ::routine_setUseCom (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1717)) ;
  ::routine_setScalabilityClass (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1718)) ;
  ::routine_setUseHooks (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1719)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setInterruptSources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setInterruptSources (C_Compiler & inLexique,
                                const GGS_config   var_cas_targetConfiguration,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setInterruptSources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_69993 = var_cas_targetConfiguration.reader_hasKey (GGS_string ("it_sources")) ;
  if (cond_69993.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_interruptSources ;
    const GGS_config  temp_69290 = var_cas_targetConfiguration ;
    if (temp_69290.isBuilt ()) {
      temp_69290 (HERE)->method_get (inLexique, function_lstringWith (inLexique, GGS_string ("it_sources") COMMA_SOURCE_FILE_AT_LINE (1728)), var_cas_interruptSources COMMA_SOURCE_FILE_AT_LINE (1728)) ;
    }
    { const GGS_basic_type _var_69981 = var_cas_interruptSources ; // CAST instruction
      if (_var_69981.getPtr () != NULL) {
        macroValidPointer (_var_69981.getPtr ()) ;
        if (typeid (cPtr_interrupts) == typeid (* (_var_69981.getPtr ()))) {
          const GGS_interrupts var_cas_interrupts (_var_69981.getPtr ()) ;
          ::routine_addLUnsignedValue (inLexique,  var_cas_cfg,  GGS_string ("ITSOURCESLENGTH"),  var_cas_interrupts.reader_it_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1731)) COMMA_SOURCE_FILE_AT_LINE (1731)) ;
          GGS_goilTemplateFieldMapList  var_cas_interruptSourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_ident_map::cEnumerator enumerator_69558 (var_cas_interrupts.reader_it_sources (inLexique COMMA_SOURCE_FILE_AT_LINE (1733)), true) ;
            const GGS_ident_map::cElement * operand_69558 = NULL ;
            while (((operand_69558 = enumerator_69558.nextObject ()))) {
              macroValidPointer (operand_69558) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1734)) ;
              ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("NAME"),  operand_69558->mKey COMMA_SOURCE_FILE_AT_LINE (1735)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NUMBER"), operand_69558->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1736)) COMMA_SOURCE_FILE_AT_LINE (1736)),  function_uint64OrError (inLexique, operand_69558->mInfo.value, GGS_string ("interrupt source number") COMMA_SOURCE_FILE_AT_LINE (1736)) COMMA_SOURCE_FILE_AT_LINE (1736)) ;
              var_cas_interruptSourcesList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("INTERRUPTSOURCES") COMMA_SOURCE_FILE_AT_LINE (1739)),  var_cas_interruptSourcesList COMMA_SOURCE_FILE_AT_LINE (1739)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setInterruptSources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addDirectoryAndFile"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addDirectoryAndFile (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMapList  & var_cas_fileList,
                                const GGS_string  var_cas_directory,
                                const GGS_string  var_cas_file COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addDirectoryAndFile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("DIRECTORY") COMMA_SOURCE_FILE_AT_LINE (1751)),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (1751)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FILE") COMMA_SOURCE_FILE_AT_LINE (1752)),  var_cas_file COMMA_SOURCE_FILE_AT_LINE (1752)) ;
  var_cas_fileList.addAssign_operation (var_cas_fieldMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addDirectoryAndFile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setEnvData"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEnvData (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEnvData at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OILFILENAME") COMMA_SOURCE_FILE_AT_LINE (1760)),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1760)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1760)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPUNAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1761)),  var_cas_cpu.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1761)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1761)) COMMA_SOURCE_FILE_AT_LINE (1761)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMESTAMP"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1762)),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_SOURCE_FILE_AT_LINE (1762)) COMMA_SOURCE_FILE_AT_LINE (1762)) ;
  GGS_lstring  var_cas_appName = function_applicationName (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1763)) COMMA_SOURCE_FILE_AT_LINE (1763)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPNAME"), var_cas_appName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1764)) COMMA_SOURCE_FILE_AT_LINE (1764)),  var_cas_appName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1764)) COMMA_SOURCE_FILE_AT_LINE (1764)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECT") COMMA_SOURCE_FILE_AT_LINE (1765)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1765)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1765)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECTPATH") COMMA_SOURCE_FILE_AT_LINE (1766)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1766)) COMMA_SOURCE_FILE_AT_LINE (1766)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEBUILDFILE") COMMA_SOURCE_FILE_AT_LINE (1767)),  gOption_goil_5F_options_generate_5F_makefile.reader_value () COMMA_SOURCE_FILE_AT_LINE (1767)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USELOGFILE") COMMA_SOURCE_FILE_AT_LINE (1768)),  gOption_goil_5F_options_generate_5F_log.reader_value () COMMA_SOURCE_FILE_AT_LINE (1768)) ;
  GGS_goilTemplateFieldMapList  var_cas_fileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1773)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1774)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1775)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1776)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1777)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_timeobj_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1778)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1779)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_action.c") COMMA_SOURCE_FILE_AT_LINE (1780)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_error.c") COMMA_SOURCE_FILE_AT_LINE (1781)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_dispatch_table.c") COMMA_SOURCE_FILE_AT_LINE (1782)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os.c") COMMA_SOURCE_FILE_AT_LINE (1783)) ;
  const GGS_bool cond_72343 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1784)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1784)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1784))).operator_not () ;
  if (cond_72343.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm.c") COMMA_SOURCE_FILE_AT_LINE (1785)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event.c") COMMA_SOURCE_FILE_AT_LINE (1786)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it.c") COMMA_SOURCE_FILE_AT_LINE (1787)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez.c") COMMA_SOURCE_FILE_AT_LINE (1788)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task.c") COMMA_SOURCE_FILE_AT_LINE (1789)) ;
  }
  { const GGS_trace _var_72463 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1791)) ; // CAST instruction
    if (_var_72463.getPtr () != NULL) {
      macroValidPointer (_var_72463.getPtr ()) ;
      if (typeid (cPtr_trace_on) == typeid (* (_var_72463.getPtr ()))) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_trace.c") COMMA_SOURCE_FILE_AT_LINE (1793)) ;
      }else{
      }
    }
  }
  const GGS_bool cond_73113 = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1795)) ;
  if (cond_73113.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_app_copy.c") COMMA_SOURCE_FILE_AT_LINE (1796)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filtering.c") COMMA_SOURCE_FILE_AT_LINE (1797)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filters.c") COMMA_SOURCE_FILE_AT_LINE (1798)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_internal_com.c") COMMA_SOURCE_FILE_AT_LINE (1799)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_external_com.c") COMMA_SOURCE_FILE_AT_LINE (1800)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_notification.c") COMMA_SOURCE_FILE_AT_LINE (1801)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_queue.c") COMMA_SOURCE_FILE_AT_LINE (1802)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_message_management.c") COMMA_SOURCE_FILE_AT_LINE (1803)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_errorhook.c") COMMA_SOURCE_FILE_AT_LINE (1804)) ;
  }
  const GGS_bool cond_74390 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_74390.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1807)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_st_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1808)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1809)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_stack_monitor.c") COMMA_SOURCE_FILE_AT_LINE (1810)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_timing_protec.c") COMMA_SOURCE_FILE_AT_LINE (1811)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_action.c") COMMA_SOURCE_FILE_AT_LINE (1812)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_protec_hook.c") COMMA_SOURCE_FILE_AT_LINE (1813)) ;
    GGS_uint64  var_cas_sc ;
    GGS_bool automatic_var_73715_0 ;
    GGS_bool automatic_var_73715_1 ;
    ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  automatic_var_73715_0,  automatic_var_73715_1 COMMA_SOURCE_FILE_AT_LINE (1815)) ;
    const GGS_bool cond_73908 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
    if (cond_73908.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_app_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1817)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1818)) ;
    }
    const GGS_bool cond_74380 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1820)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1820)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1820))).operator_not () ;
    if (cond_74380.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter.c") COMMA_SOURCE_FILE_AT_LINE (1821)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr.c") COMMA_SOURCE_FILE_AT_LINE (1822)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_schedtable.c") COMMA_SOURCE_FILE_AT_LINE (1823)) ;
      const GGS_bool cond_74368 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
      if (cond_74368.isBuiltAndTrue ()) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct.c") COMMA_SOURCE_FILE_AT_LINE (1825)) ;
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_application.c") COMMA_SOURCE_FILE_AT_LINE (1826)) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRAMPOLINESOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1830)),  var_cas_fileList COMMA_SOURCE_FILE_AT_LINE (1830)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEnvData\n") ;
  #endif
}

//---------------------------------------------------------------------------*

