//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'system_config.cpp'                          *
//                        Generated by version 2.0.1                         *
//                     november 17th, 2010, at 11h22'2"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 837
  #error "This file has been compiled with a version of GALGAS that uses libpm version 837, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "system_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "system_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     Class for 'taskKind' Enumeration                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_taskKind ("taskKind", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_taskKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isNotEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_infOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_supOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictInf (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictSup (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_taskKind::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @taskKind" ;
  switch (mValue) {
  case enum_all:
    s << " all>" ;
    break ;
  case enum_basic:
    s << " basic>" ;
    break ;
  case enum_extended:
    s << " extended>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_taskKind::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_taskKind * p = NULL ;
    macroMyNew (p, GGS_taskKind (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_taskKind GGS_taskKind::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_taskKind result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_taskKind * p = dynamic_cast <const GGS_taskKind *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_taskKind, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_taskKind::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_taskKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "setAppRelatedAttributes"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAppRelatedAttributes (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_lstring   var_cas_objName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAppRelatedAttributes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2773 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_2773.isBuiltAndTrue ()) {
    const GGS_bool cond_2763 = (var_cas_appForObj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_2763.isBuiltAndTrue ()) {
      GGS_bool var_cas_trustedApp = GGS_bool (false) ;
      GGS_string var_cas_appName ;
      if (var_cas_appForObj.isBuilt ()) {
        var_cas_appForObj (HERE)->method_get (inLexique, var_cas_objName, var_cas_appName COMMA_SOURCE_FILE_AT_LINE (85)) ;
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPLICATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (86)),  var_cas_appName COMMA_SOURCE_FILE_AT_LINE (86)) ;
      GGS_app_obj  var_cas_app ;
      const GGS_app_map  temp_2533 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      if (temp_2533.isBuilt ()) {
        temp_2533 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_appName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (91)), var_cas_app COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
      { const GGS_app_trusted_obj _var_2668 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ; // CAST instruction
        if (_var_2668.getPtr () != NULL) {
          macroValidPointer (_var_2668.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_2668.getPtr ()))) {
            var_cas_trustedApp = GGS_bool (true) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRUSTED"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (95)),  var_cas_trustedApp COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAppRelatedAttributes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "orderedTaskList"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tasks_by_type  function_orderedTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_orderedTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_taskList ;
  var_cas_taskList = GGS_tasks_by_type ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_3054 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), true) ;
    const GGS_task_map::cElement * operand_3054 = NULL ;
    while (((operand_3054 = enumerator_3054.nextObject ()))) {
      macroValidPointer (operand_3054) ;
      const GGS_bool cond_3152 = (operand_3054->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_3152.isBuiltAndTrue ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (0U), operand_3054->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
      }else if (cond_3152.isBuiltAndFalse ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (1U), operand_3054->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_orderedTaskList\n") ;
  #endif
  return var_cas_taskList ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_orderedTaskList (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_tasks_by_type  result = function_orderedTaskList (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_orderedTaskList [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_orderedTaskList ("orderedTaskList",
                              functionForGenericCall_orderedTaskList,
                              & kTypeDescriptor_GGS_tasks_by_type ,
                              1,
                              kArgumentTypeList_orderedTaskList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "computeTaskList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_taskKind  var_cas_kind,
                                GGS_goilTemplateFieldMapList  & var_cas_taskList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_sTasks = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (128)) ;
  {
    GGS_tasks_by_type::cEnumerator enumerator_3505 (var_cas_sTasks, true) ;
    const GGS_tasks_by_type::cElement * operand_3505 = NULL ;
    while (((operand_3505 = enumerator_3505.nextObject ()))) {
      macroValidPointer (operand_3505) ;
      const GGS_bool cond_8777 = (((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_or (((operand_3505->type).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (132)))))).operator_or (((operand_3505->type).operator_isEqual (GGS_uint (1U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (133))))) ;
      if (cond_8777.isBuiltAndTrue ()) {
        GGS_task_obj  var_cas_task ;
        GGS_lstring  var_cas_taskName = GGS_lstring ::constructor_new (inLexique, operand_3505->name, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        const GGS_task_map  temp_3755 = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
        if (temp_3755.isBuilt ()) {
          temp_3755 (HERE)->method_get (inLexique, var_cas_taskName, var_cas_task COMMA_SOURCE_FILE_AT_LINE (136)) ;
        }
        GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_locationForKey (inLexique, operand_3505->name COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)),  operand_3505->name COMMA_SOURCE_FILE_AT_LINE (138)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (139)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (139)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (140)),  (operand_3505->type).operator_isEqual (GGS_uint (0U)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NONPREEMPTABLE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (141)),  (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (141)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))).operator_isEqual (GGS_string ("NON")) COMMA_SOURCE_FILE_AT_LINE (141)) ;
        GGS_uint  var_cas_actualPrio ;
        GGS_uint  var_cas_activation ;
        if (var_cas_actualPriorities.isBuilt ()) {
          var_cas_actualPriorities (HERE)->method_get (inLexique, var_cas_taskName, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (144)) ;
        }
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (146)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) COMMA_SOURCE_FILE_AT_LINE (146)) ;
        { const GGS_task_autostart_obj _var_4893 = var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ; // CAST instruction
          if (_var_4893.getPtr () != NULL) {
            macroValidPointer (_var_4893.getPtr ()) ;
            if (typeid (cPtr_task_autostart_true) == typeid (* (_var_4893.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (150)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (150)) ;
            }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_4893.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (152)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (152)) ;
            }else{
              var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, AUTOSTART type is undefined") COMMA_SOURCE_FILE_AT_LINE (155)) ;
            }
          }
        }
        const GGS_bool cond_5820 = (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (156)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_string ("FULL")) ;
        if (cond_5820.isBuiltAndTrue ()) {
          GGS_bool var_cas_internalFound = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_5004 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (158)), true) ;
            const GGS_lstringlist::cElement * operand_5004 = NULL ;
            while (((operand_5004 = enumerator_5004.nextObject ()))) {
              macroValidPointer (operand_5004) ;
              const GGS_bool cond_5554 = (var_cas_internalFound).operator_not () ;
              if (cond_5554.isBuiltAndTrue ()) {
                GGS_resource_obj  var_cas_resource ;
                const GGS_resource_map  temp_5151 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
                if (temp_5151.isBuilt ()) {
                  temp_5151 (HERE)->method_get (inLexique, operand_5004->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (161)) ;
                }
                { const GGS_resource_property_obj _var_5534 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ; // CAST instruction
                  if (_var_5534.getPtr () != NULL) {
                    macroValidPointer (_var_5534.getPtr ()) ;
                    if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_5534.getPtr ()))) {
                      var_cas_internalFound = GGS_bool (true) ;
                      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (165)),  operand_5004->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (165)) COMMA_SOURCE_FILE_AT_LINE (165)) ;
                      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (166)) ;
                    }else{
                    }
                  }
                }
              }
            }
          }
          const GGS_bool cond_5805 = (var_cas_internalFound).operator_not () ;
          if (cond_5805.isBuiltAndTrue ()) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (171)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (171)) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (172)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (172)) ;
          }
        }else if (cond_5820.isBuiltAndFalse ()) {
          ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (175)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (175)) ;
          ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (176)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (176)) ;
        }
        GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
        {
          GGS_lstringlist::cEnumerator enumerator_6089 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (180)), true) ;
          const GGS_lstringlist::cElement * operand_6089 = NULL ;
          while (((operand_6089 = enumerator_6089.nextObject ()))) {
            macroValidPointer (operand_6089) ;
            GGS_resource_obj  var_cas_resource ;
            const GGS_resource_map  temp_6192 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
            if (temp_6192.isBuilt ()) {
              temp_6192 (HERE)->method_get (inLexique, operand_6089->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (182)) ;
            }
            { const GGS_resource_property_obj _var_6545 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ; // CAST instruction
              if (_var_6545.getPtr () != NULL) {
                macroValidPointer (_var_6545.getPtr ()) ;
                if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_6545.getPtr ()))) {
                }else{
                  GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187)),  operand_6089->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                  var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                }
              }
            }
          }
        }
        ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (191)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (191)) ;
        { const GGS_timing_prot _var_8228 = var_cas_task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ; // CAST instruction
          if (_var_8228.getPtr () != NULL) {
            macroValidPointer (_var_8228.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_8228.getPtr ()))) {
              const GGS_timing_prot_task var_cas_tpt (_var_8228.getPtr ()) ;
              GGS_goilTemplateFieldMap  var_cas_tpFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXECUTIONBUDGET"), var_cas_tpt.reader_exe_budget (inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)),  function_uint64OrError (inLexique, var_cas_tpt.reader_exe_budget (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), GGS_string ("EXECUTIONBUDGET") COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMEFRAME"), var_cas_tpt.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (198)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)),  function_uint64OrError (inLexique, var_cas_tpt.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (198)), GGS_string ("TIMEFRAME") COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)) ;
              { const GGS_basic_type _var_7342 = var_cas_tpt.reader_os_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ; // CAST instruction
                if (_var_7342.getPtr () != NULL) {
                  macroValidPointer (_var_7342.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_7342.getPtr ()))) {
                    const GGS_uint64_class var_cas_osItLock (_var_7342.getPtr ()) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME"), var_cas_osItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)),  var_cas_osItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)) ;
                  }else{
                  }
                }
              }
              { const GGS_basic_type _var_7568 = var_cas_tpt.reader_all_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ; // CAST instruction
                if (_var_7568.getPtr () != NULL) {
                  macroValidPointer (_var_7568.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_7568.getPtr ()))) {
                    const GGS_uint64_class var_cas_allItLock (_var_7568.getPtr ()) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME"), var_cas_allItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)),  var_cas_allItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)) ;
                  }else{
                  }
                }
              }
              GGS_goilTemplateFieldMapList  var_cas_resourcesLockList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
              {
                GGS_rezlock_map::cEnumerator enumerator_7666 (var_cas_tpt.reader_rezlocks (inLexique COMMA_SOURCE_FILE_AT_LINE (209)), true) ;
                const GGS_rezlock_map::cElement * operand_7666 = NULL ;
                while (((operand_7666 = enumerator_7666.nextObject ()))) {
                  macroValidPointer (operand_7666) ;
                  GGS_goilTemplateFieldMap  var_cas_resourceLockFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (210)) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_resourceLockFieldMap,  GGS_string ("RESOURCENAME"),  operand_7666->mKey COMMA_SOURCE_FILE_AT_LINE (211)) ;
                  ::routine_addUnsignedFieldValue (inLexique,  var_cas_resourceLockFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LOCKTIME"), operand_7666->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) COMMA_SOURCE_FILE_AT_LINE (212)),  operand_7666->mInfo.time COMMA_SOURCE_FILE_AT_LINE (212)) ;
                  var_cas_resourcesLockList.addAssign_operation (var_cas_resourceLockFieldMap) ;
                }
              }
              ::routine_addListFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCESLOCK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (215)),  var_cas_resourcesLockList COMMA_SOURCE_FILE_AT_LINE (215)) ;
              ::routine_addStructFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMINGPROTECTION"), var_cas_tpt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (217)) COMMA_SOURCE_FILE_AT_LINE (217)),  var_cas_tpFields COMMA_SOURCE_FILE_AT_LINE (217)) ;
            }else{
            }
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_8291 (var_cas_task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (221)), true) ;
          const GGS_ident_map::cElement * operand_8291 = NULL ;
          while (((operand_8291 = enumerator_8291.nextObject ()))) {
            macroValidPointer (operand_8291) ;
            { const GGS_basic_type _var_8643 = operand_8291->mInfo.value ; // CAST instruction
              if (_var_8643.getPtr () != NULL) {
                macroValidPointer (_var_8643.getPtr ()) ;
                if (typeid (cPtr_bool_class) == typeid (* (_var_8643.getPtr ()))) {
                  const GGS_bool_class var_cas_bool (_var_8643.getPtr ()) ;
                  ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_8291->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) COMMA_SOURCE_FILE_AT_LINE (224)) ;
                }else if (typeid (cPtr_uint64_class) == typeid (* (_var_8643.getPtr ()))) {
                  const GGS_uint64_class var_cas_number (_var_8643.getPtr ()) ;
                  ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_8291->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) COMMA_SOURCE_FILE_AT_LINE (226)) ;
                }else if (typeid (cPtr_string_class) == typeid (* (_var_8643.getPtr ()))) {
                  const GGS_string_class var_cas_str (_var_8643.getPtr ()) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_8291->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) COMMA_SOURCE_FILE_AT_LINE (228)) ;
                }else{
                }
              }
            }
          }
        }
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  var_cas_taskName COMMA_SOURCE_FILE_AT_LINE (232)) ;
        var_cas_taskList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "computeWrapperTaskList"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeWrapperTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_uint   /* var_cas_maxTaskPrio */,
                                GGS_goilTemplateFieldMapList  & /* var_cas_wrapperList */
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeWrapperTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_app_map::cEnumerator enumerator_9034 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (248)), true) ;
    const GGS_app_map::cElement * operand_9034 = NULL ;
    while (((operand_9034 = enumerator_9034.nextObject ()))) {
      macroValidPointer (operand_9034) ;
      { const GGS_basic_type _var_9126 = operand_9034->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (249)) ; // CAST instruction
        if (_var_9126.getPtr () != NULL) {
          macroValidPointer (_var_9126.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_9126.getPtr ()))) {
            const GGS_bool_class var_cas_sh (_var_9126.getPtr ()) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeWrapperTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeISRList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeISRList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_uint64   var_cas_isrCategory,
                                GGS_goilTemplateFieldMapList  & var_cas_isrList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeISRList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_isr_map::cEnumerator enumerator_9381 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (266)), true) ;
    const GGS_isr_map::cElement * operand_9381 = NULL ;
    while (((operand_9381 = enumerator_9381.nextObject ()))) {
      macroValidPointer (operand_9381) ;
      { const GGS_basic_type _var_12930 = operand_9381->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) ; // CAST instruction
        if (_var_12930.getPtr () != NULL) {
          macroValidPointer (_var_12930.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_12930.getPtr ()))) {
            const GGS_uint64_class var_cas_category (_var_12930.getPtr ()) ;
            const GGS_bool cond_12913 = (var_cas_category.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (269))).operator_isEqual (var_cas_isrCategory) ;
            if (cond_12913.isBuiltAndTrue ()) {
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (270)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (271)),  operand_9381->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (271)) COMMA_SOURCE_FILE_AT_LINE (271)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (272)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (272)) ;
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (273)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (273)) ;
              GGS_uint  var_cas_actualPrio ;
              GGS_uint  var_cas_activation ;
              if (var_cas_actualPriorities.isBuilt ()) {
                var_cas_actualPriorities (HERE)->method_get (inLexique, operand_9381->mKey, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (276)) ;
              }
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (277)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (277)) COMMA_SOURCE_FILE_AT_LINE (277)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (278)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) COMMA_SOURCE_FILE_AT_LINE (278)) ;
              {
                GGS_ident_map::cEnumerator enumerator_10166 (operand_9381->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (281)), true) ;
                const GGS_ident_map::cElement * operand_10166 = NULL ;
                while (((operand_10166 = enumerator_10166.nextObject ()))) {
                  macroValidPointer (operand_10166) ;
                  { const GGS_basic_type _var_10539 = operand_10166->mInfo.value ; // CAST instruction
                    if (_var_10539.getPtr () != NULL) {
                      macroValidPointer (_var_10539.getPtr ()) ;
                      if (typeid (cPtr_bool_class) == typeid (* (_var_10539.getPtr ()))) {
                        const GGS_bool_class var_cas_bool (_var_10539.getPtr ()) ;
                        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_10166->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (284)) COMMA_SOURCE_FILE_AT_LINE (284)) ;
                      }else if (typeid (cPtr_uint64_class) == typeid (* (_var_10539.getPtr ()))) {
                        const GGS_uint64_class var_cas_number (_var_10539.getPtr ()) ;
                        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_10166->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) COMMA_SOURCE_FILE_AT_LINE (286)) ;
                      }else if (typeid (cPtr_string_class) == typeid (* (_var_10539.getPtr ()))) {
                        const GGS_string_class var_cas_str (_var_10539.getPtr ()) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_10166->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (288)) COMMA_SOURCE_FILE_AT_LINE (288)) ;
                      }else{
                      }
                    }
                  }
                }
              }
              GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
              {
                GGS_lstringlist::cEnumerator enumerator_10645 (operand_9381->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (293)), true) ;
                const GGS_lstringlist::cElement * operand_10645 = NULL ;
                while (((operand_10645 = enumerator_10645.nextObject ()))) {
                  macroValidPointer (operand_10645) ;
                  GGS_resource_obj  var_cas_resource ;
                  const GGS_resource_map  temp_10751 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (295)) ;
                  if (temp_10751.isBuilt ()) {
                    temp_10751 (HERE)->method_get (inLexique, operand_10645->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (295)) ;
                  }
                  { const GGS_resource_property_obj _var_11118 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ; // CAST instruction
                    if (_var_11118.getPtr () != NULL) {
                      macroValidPointer (_var_11118.getPtr ()) ;
                      if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_11118.getPtr ()))) {
                      }else{
                        GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (299)) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (300)),  operand_10645->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) COMMA_SOURCE_FILE_AT_LINE (300)) ;
                        var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                      }
                    }
                  }
                }
              }
              ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (304)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (304)) ;
              ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_9381->mKey COMMA_SOURCE_FILE_AT_LINE (306)) ;
              { const GGS_timing_prot _var_12854 = operand_9381->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (308)) ; // CAST instruction
                if (_var_12854.getPtr () != NULL) {
                  macroValidPointer (_var_12854.getPtr ()) ;
                  if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_12854.getPtr ()))) {
                    const GGS_timing_prot_isr var_cas_tpi (_var_12854.getPtr ()) ;
                    GGS_goilTemplateFieldMap  var_cas_tpFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (310)) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXECUTIONTIME"), var_cas_tpi.reader_exe_time (inLexique COMMA_SOURCE_FILE_AT_LINE (311)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (311)) COMMA_SOURCE_FILE_AT_LINE (311)),  function_uint64OrError (inLexique, var_cas_tpi.reader_exe_time (inLexique COMMA_SOURCE_FILE_AT_LINE (311)), GGS_string ("EXECUTIONTIME") COMMA_SOURCE_FILE_AT_LINE (311)) COMMA_SOURCE_FILE_AT_LINE (311)) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMEFRAME"), var_cas_tpi.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (312)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (312)) COMMA_SOURCE_FILE_AT_LINE (312)),  function_uint64OrError (inLexique, var_cas_tpi.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (312)), GGS_string ("TIMEFRAME") COMMA_SOURCE_FILE_AT_LINE (312)) COMMA_SOURCE_FILE_AT_LINE (312)) ;
                    { const GGS_basic_type _var_11952 = var_cas_tpi.reader_os_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (313)) ; // CAST instruction
                      if (_var_11952.getPtr () != NULL) {
                        macroValidPointer (_var_11952.getPtr ()) ;
                        if (typeid (cPtr_uint64_class) == typeid (* (_var_11952.getPtr ()))) {
                          const GGS_uint64_class var_cas_osItLock (_var_11952.getPtr ()) ;
                          ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME"), var_cas_osItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (315)) COMMA_SOURCE_FILE_AT_LINE (315)),  var_cas_osItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (315)) COMMA_SOURCE_FILE_AT_LINE (315)) ;
                        }else{
                        }
                      }
                    }
                    { const GGS_basic_type _var_12186 = var_cas_tpi.reader_all_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (317)) ; // CAST instruction
                      if (_var_12186.getPtr () != NULL) {
                        macroValidPointer (_var_12186.getPtr ()) ;
                        if (typeid (cPtr_uint64_class) == typeid (* (_var_12186.getPtr ()))) {
                          const GGS_uint64_class var_cas_allItLock (_var_12186.getPtr ()) ;
                          ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME"), var_cas_allItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (319)) COMMA_SOURCE_FILE_AT_LINE (319)),  var_cas_allItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (319)) COMMA_SOURCE_FILE_AT_LINE (319)) ;
                        }else{
                        }
                      }
                    }
                    GGS_goilTemplateFieldMapList  var_cas_resourcesLockList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
                    {
                      GGS_rezlock_map::cEnumerator enumerator_12279 (var_cas_tpi.reader_rezlocks (inLexique COMMA_SOURCE_FILE_AT_LINE (322)), true) ;
                      const GGS_rezlock_map::cElement * operand_12279 = NULL ;
                      while (((operand_12279 = enumerator_12279.nextObject ()))) {
                        macroValidPointer (operand_12279) ;
                        GGS_goilTemplateFieldMap  var_cas_resourceLockFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (323)) ;
                        ::routine_addLStringFieldValue (inLexique,  var_cas_resourceLockFieldMap,  GGS_string ("RESOURCENAME"),  operand_12279->mKey COMMA_SOURCE_FILE_AT_LINE (324)) ;
                        ::routine_addUnsignedFieldValue (inLexique,  var_cas_resourceLockFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LOCKTIME"), operand_12279->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) COMMA_SOURCE_FILE_AT_LINE (325)),  operand_12279->mInfo.time COMMA_SOURCE_FILE_AT_LINE (325)) ;
                        var_cas_resourcesLockList.addAssign_operation (var_cas_resourceLockFieldMap) ;
                      }
                    }
                    ::routine_addListFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCESLOCK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (328)),  var_cas_resourcesLockList COMMA_SOURCE_FILE_AT_LINE (328)) ;
                    ::routine_addStructFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMINGPROTECTION"), var_cas_tpi.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (330)) COMMA_SOURCE_FILE_AT_LINE (330)),  var_cas_tpFields COMMA_SOURCE_FILE_AT_LINE (330)) ;
                  }else{
                  }
                }
              }
              var_cas_isrList.addAssign_operation (var_cas_fieldMap) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeISRList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTasksList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (349)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (349)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (350)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (350)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setBasicTasksList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBasicTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBasicTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (363)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (363)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (364)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (364)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBasicTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setExtendedTasksList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtendedTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtendedTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (377)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (377)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (378)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (378)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtendedTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs1List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs1List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs1List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (1ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (391)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS1"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (392)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (392)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs1List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs2List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs2List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs2List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (405)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (406)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (406)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs2List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_processesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (419)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (419)) ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (420)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (421)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (421)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCountersList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCountersList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCountersList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_countersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_hardCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_softCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_counter_map::cEnumerator enumerator_15738 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (435)), true) ;
    const GGS_counter_map::cElement * operand_15738 = NULL ;
    while (((operand_15738 = enumerator_15738.nextObject ()))) {
      macroValidPointer (operand_15738) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (436)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (437)),  operand_15738->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (437)) COMMA_SOURCE_FILE_AT_LINE (437)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (438)),  function_maxAllowedValue (inLexique, operand_15738->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (438)) COMMA_SOURCE_FILE_AT_LINE (438)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (439)),  function_minCycle (inLexique, operand_15738->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (439)) COMMA_SOURCE_FILE_AT_LINE (439)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TICKSPERBASE") COMMA_SOURCE_FILE_AT_LINE (440)),  function_ticksPerBase (inLexique, operand_15738->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (440)) COMMA_SOURCE_FILE_AT_LINE (440)) ;
      GGS_string var_cas_type = GGS_string ("HARDWARE_COUNTER") ;
      { const GGS_counter_type _var_16358 = operand_15738->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (442)) ; // CAST instruction
        if (_var_16358.getPtr () != NULL) {
          macroValidPointer (_var_16358.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_16358.getPtr ()))) {
            var_cas_type = GGS_string ("SOFTWARE_COUNTER") ;
          }else{
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  operand_15738->mInfo.counter.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (445)) COMMA_SOURCE_FILE_AT_LINE (445)) ;
          }
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TYPE") COMMA_SOURCE_FILE_AT_LINE (447)),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (447)) ;
      const GGS_bool cond_16546 = (operand_15738->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (449))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
      if (cond_16546.isBuiltAndTrue ()) {
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_15738->mKey COMMA_SOURCE_FILE_AT_LINE (450)) ;
      }
      var_cas_countersList.addAssign_operation (var_cas_fieldMap) ;
      const GGS_bool cond_16667 = (var_cas_type).operator_isEqual (GGS_string ("HARDWARE_COUNTER")) ;
      if (cond_16667.isBuiltAndTrue ()) {
        var_cas_hardCountersList.addAssign_operation (var_cas_fieldMap) ;
      }else if (cond_16667.isBuiltAndFalse ()) {
        var_cas_softCountersList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (460)),  var_cas_countersList COMMA_SOURCE_FILE_AT_LINE (460)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("HARDWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (461)),  var_cas_hardCountersList COMMA_SOURCE_FILE_AT_LINE (461)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOFTWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (462)),  var_cas_softCountersList COMMA_SOURCE_FILE_AT_LINE (462)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCountersList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setEventsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEventsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_eventMaskMap   var_cas_eventMasks,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEventsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_eventsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_event_map::cEnumerator enumerator_17166 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (474)), true) ;
    const GGS_event_map::cElement * operand_17166 = NULL ;
    while (((operand_17166 = enumerator_17166.nextObject ()))) {
      macroValidPointer (operand_17166) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (475)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (476)),  operand_17166->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (476)) COMMA_SOURCE_FILE_AT_LINE (476)) ;
      GGS_uint64  var_cas_eventMask ;
      if (var_cas_eventMasks.isBuilt ()) {
        var_cas_eventMasks (HERE)->method_get (inLexique, operand_17166->mKey, var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (478)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MASK"), operand_17166->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (479)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (479)) COMMA_SOURCE_FILE_AT_LINE (479)),  var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (479)) ;
      var_cas_eventsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EVENTS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (482)),  var_cas_eventsList COMMA_SOURCE_FILE_AT_LINE (482)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEventsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setAction"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAction (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_action_obj   var_cas_actionobj
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_action_obj _var_18898 = var_cas_actionobj ; // CAST instruction
    if (_var_18898.getPtr () != NULL) {
      macroValidPointer (_var_18898.getPtr ()) ;
      if (typeid (cPtr_setevent_action) == typeid (* (_var_18898.getPtr ()))) {
        const GGS_setevent_action var_cas_setEvent (_var_18898.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (491)),  GGS_string ("setEvent") COMMA_SOURCE_FILE_AT_LINE (491)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (492)),  var_cas_setEvent.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (492)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (492)) COMMA_SOURCE_FILE_AT_LINE (492)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EVENT") COMMA_SOURCE_FILE_AT_LINE (493)),  var_cas_setEvent.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (493)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) COMMA_SOURCE_FILE_AT_LINE (493)) ;
      }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_18898.getPtr ()))) {
        const GGS_activatetask_action var_cas_activateTask (_var_18898.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (495)),  GGS_string ("activateTask") COMMA_SOURCE_FILE_AT_LINE (495)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (496)),  var_cas_activateTask.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (496)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (496)) COMMA_SOURCE_FILE_AT_LINE (496)) ;
      }else if (typeid (cPtr_callback_action) == typeid (* (_var_18898.getPtr ()))) {
        const GGS_callback_action var_cas_callback (_var_18898.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (498)),  GGS_string ("callback") COMMA_SOURCE_FILE_AT_LINE (498)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FUNCTION") COMMA_SOURCE_FILE_AT_LINE (499)),  var_cas_callback.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (499)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (499)) COMMA_SOURCE_FILE_AT_LINE (499)) ;
      }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_18898.getPtr ()))) {
        const GGS_incrementcounter_action var_cas_incrementCounter (_var_18898.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (501)),  GGS_string ("incrementCounter") COMMA_SOURCE_FILE_AT_LINE (501)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TARGETCOUNTER") COMMA_SOURCE_FILE_AT_LINE (502)),  var_cas_incrementCounter.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (502)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (502)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
      }else if (typeid (cPtr_finalize_st_action) == typeid (* (_var_18898.getPtr ()))) {
        const GGS_finalize_st_action var_cas_finalizeScheduletable (_var_18898.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (504)),  GGS_string ("finalizeScheduletable") COMMA_SOURCE_FILE_AT_LINE (504)) ;
        ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGETCOUNTER"),  var_cas_finalizeScheduletable.reader_scheduleTableName (inLexique COMMA_SOURCE_FILE_AT_LINE (505)) COMMA_SOURCE_FILE_AT_LINE (505)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAlarmsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAlarmsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAlarmsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_alarmsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_alarm_map::cEnumerator enumerator_19125 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (518)), true) ;
    const GGS_alarm_map::cElement * operand_19125 = NULL ;
    while (((operand_19125 = enumerator_19125.nextObject ()))) {
      macroValidPointer (operand_19125) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (519)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (520)),  operand_19125->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (520)) COMMA_SOURCE_FILE_AT_LINE (520)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (521)),  operand_19125->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (521)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (521)) COMMA_SOURCE_FILE_AT_LINE (521)) ;
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_19125->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (523)) COMMA_SOURCE_FILE_AT_LINE (523)) ;
      { const GGS_autostart_obj _var_20354 = operand_19125->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (525)) ; // CAST instruction
        if (_var_20354.getPtr () != NULL) {
          macroValidPointer (_var_20354.getPtr ()) ;
          if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_20354.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_autostart (_var_20354.getPtr ()) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (527)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (527)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMTIME") COMMA_SOURCE_FILE_AT_LINE (528)),  var_cas_autostart.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (528)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (528)) COMMA_SOURCE_FILE_AT_LINE (528)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("CYCLETIME") COMMA_SOURCE_FILE_AT_LINE (529)),  var_cas_autostart.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (529)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (529)) COMMA_SOURCE_FILE_AT_LINE (529)) ;
            GGS_goilTemplateFieldMapList  var_cas_appmodesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
            {
              GGS_stringset::cEnumerator enumerator_19827 (var_cas_autostart.reader_app_modes (inLexique COMMA_SOURCE_FILE_AT_LINE (531)), true) ;
              while (enumerator_19827.hasCurrentObject ()) {
                GGS_goilTemplateFieldMap  var_cas_appModeFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (532)) ;
                ::routine_addStringFieldValue (inLexique,  var_cas_appModeFields,  function_lstringWith (inLexique, GGS_string ("APPMODE") COMMA_SOURCE_FILE_AT_LINE (533)),  enumerator_19827._key (HERE) COMMA_SOURCE_FILE_AT_LINE (533)) ;
                var_cas_appmodesList.addAssign_operation (var_cas_appModeFields) ;
                enumerator_19827.next () ;
              }
            }
            ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("APPMODES") COMMA_SOURCE_FILE_AT_LINE (536)),  var_cas_appmodesList COMMA_SOURCE_FILE_AT_LINE (536)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_20354.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (538)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (538)) ;
          }else if (typeid (cPtr_autostart_void) == typeid (* (_var_20354.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (540)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (540)) ;
          }else{
          }
        }
      }
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_19125->mKey COMMA_SOURCE_FILE_AT_LINE (543)) ;
      var_cas_alarmsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ALARMS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (547)),  var_cas_alarmsList COMMA_SOURCE_FILE_AT_LINE (547)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAlarmsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourcesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourcesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_resourcesPrio,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourcesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_regularList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_internalList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_resource_map::cEnumerator enumerator_20852 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (561)), true) ;
    const GGS_resource_map::cElement * operand_20852 = NULL ;
    while (((operand_20852 = enumerator_20852.nextObject ()))) {
      macroValidPointer (operand_20852) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (562)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (563)),  operand_20852->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (563)) COMMA_SOURCE_FILE_AT_LINE (563)) ;
      GGS_uint  var_cas_priority ;
      GGS_uint  automatic_var_21060_0 ;
      if (var_cas_resourcesPrio.isBuilt ()) {
        var_cas_resourcesPrio (HERE)->method_get (inLexique, operand_20852->mKey, var_cas_priority, automatic_var_21060_0 COMMA_SOURCE_FILE_AT_LINE (565)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (566)),  var_cas_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (566)) COMMA_SOURCE_FILE_AT_LINE (566)) ;
      GGS_goilTemplateFieldMapList  var_cas_taskUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_task_map::cEnumerator enumerator_21220 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (569)), true) ;
        const GGS_task_map::cElement * operand_21220 = NULL ;
        while (((operand_21220 = enumerator_21220.nextObject ()))) {
          macroValidPointer (operand_21220) ;
          const GGS_bool cond_21475 = function_isInLstringlist (inLexique, operand_21220->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (570)), operand_20852->mKey COMMA_SOURCE_FILE_AT_LINE (570)) ;
          if (cond_21475.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (572)),  operand_21220->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (572)) COMMA_SOURCE_FILE_AT_LINE (572)) ;
            var_cas_taskUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (577)),  var_cas_taskUsage COMMA_SOURCE_FILE_AT_LINE (577)) ;
      GGS_goilTemplateFieldMapList  var_cas_isrUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_isr_map::cEnumerator enumerator_21652 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (580)), true) ;
        const GGS_isr_map::cElement * operand_21652 = NULL ;
        while (((operand_21652 = enumerator_21652.nextObject ()))) {
          macroValidPointer (operand_21652) ;
          const GGS_bool cond_21904 = function_isInLstringlist (inLexique, operand_21652->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (581)), operand_20852->mKey COMMA_SOURCE_FILE_AT_LINE (581)) ;
          if (cond_21904.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (582)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (583)),  operand_21652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (583)) COMMA_SOURCE_FILE_AT_LINE (583)) ;
            var_cas_isrUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (588)),  var_cas_isrUsage COMMA_SOURCE_FILE_AT_LINE (588)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_20852->mKey COMMA_SOURCE_FILE_AT_LINE (590)) ;
      { const GGS_resource_property_obj _var_22457 = operand_20852->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (593)) ; // CAST instruction
        if (_var_22457.getPtr () != NULL) {
          macroValidPointer (_var_22457.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_22457.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_22457.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_22457.getPtr ()))) {
            var_cas_internalList.addAssign_operation (var_cas_fieldMap) ;
          }else{
            operand_20852->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (601)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (601)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (602)) ;
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (604)),  var_cas_regularList COMMA_SOURCE_FILE_AT_LINE (604)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (605)),  var_cas_internalList COMMA_SOURCE_FILE_AT_LINE (605)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourcesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@receiverSortedList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverSortedList::
elementOf_GGS_receiverSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverSortedList * operand = (const elementOf_GGS_receiverSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = - receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Sorted list '@receiverSortedList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverSortedList ("receiverSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverSortedList::GGS_receiverSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList::
GGS_receiverSortedList (const GGS_receiverSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isNotEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::
operator_concat (const GGS_receiverSortedList & inOperand) const {
  GGS_receiverSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
dotAssign_operation (const GGS_receiverSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_emptySortedList (void) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverSortedList * p = dynamic_cast <const GGS_receiverSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@receiverReverseSortedList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverReverseSortedList::
elementOf_GGS_receiverReverseSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverReverseSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverReverseSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverReverseSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverReverseSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverReverseSortedList * operand = (const elementOf_GGS_receiverReverseSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverReverseSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Sorted list '@receiverReverseSortedList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverReverseSortedList ("receiverReverseSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::GGS_receiverReverseSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::
GGS_receiverReverseSortedList (const GGS_receiverReverseSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isNotEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::
operator_concat (const GGS_receiverReverseSortedList & inOperand) const {
  GGS_receiverReverseSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
dotAssign_operation (const GGS_receiverReverseSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverReverseSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_emptySortedList (void) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverReverseSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverReverseSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverReverseSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverReverseSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverReverseSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverReverseSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverReverseSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverReverseSortedList * p = dynamic_cast <const GGS_receiverReverseSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverReverseSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverReverseSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverReverseSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setFilter"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setFilter (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_filter_prop_obj   var_cas_filter
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setFilter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_filter_prop_obj _var_26264 = var_cas_filter ; // CAST instruction
    if (_var_26264.getPtr () != NULL) {
      macroValidPointer (_var_26264.getPtr ()) ;
      if (typeid (cPtr_always_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (639)) COMMA_SOURCE_FILE_AT_LINE (639)),  GGS_string ("ALWAYS") COMMA_SOURCE_FILE_AT_LINE (639)) ;
      }else if (typeid (cPtr_never_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (641)) COMMA_SOURCE_FILE_AT_LINE (641)),  GGS_string ("NEVER") COMMA_SOURCE_FILE_AT_LINE (641)) ;
      }else if (typeid (cPtr_maskednewequalsx_filter) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_maskednewequalsx_filter var_cas_maskedNewEqualsXFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)),  GGS_string ("MASKEDNEWEQUALSX") COMMA_SOURCE_FILE_AT_LINE (643)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (644)) COMMA_SOURCE_FILE_AT_LINE (644)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewEqualsXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (645)) COMMA_SOURCE_FILE_AT_LINE (645)) ;
      }else if (typeid (cPtr_maskednewdiffersx_filter) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_maskednewdiffersx_filter var_cas_maskedNewDiffersXFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (647)) COMMA_SOURCE_FILE_AT_LINE (647)),  GGS_string ("MASKEDNEWDIFFERSX") COMMA_SOURCE_FILE_AT_LINE (647)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewDiffersXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (649)) COMMA_SOURCE_FILE_AT_LINE (649)) ;
      }else if (typeid (cPtr_newisequal_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (651)) COMMA_SOURCE_FILE_AT_LINE (651)),  GGS_string ("NEWISEQUAL") COMMA_SOURCE_FILE_AT_LINE (651)) ;
      }else if (typeid (cPtr_newisdifferent_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (653)) COMMA_SOURCE_FILE_AT_LINE (653)),  GGS_string ("NEWISDIFFERENT") COMMA_SOURCE_FILE_AT_LINE (653)) ;
      }else if (typeid (cPtr_maskednewequalsmaskedold_filter) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_maskednewequalsmaskedold_filter var_cas_maskedNewEqualsMaskedOldFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (655)) COMMA_SOURCE_FILE_AT_LINE (655)),  GGS_string ("MASKEDNEWEQUALSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (655)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (656)) COMMA_SOURCE_FILE_AT_LINE (656)) ;
      }else if (typeid (cPtr_maskednewdiffersmaskedold_filter) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_maskednewdiffersmaskedold_filter var_cas_maskedNewDiffersMaskedOldFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (658)) COMMA_SOURCE_FILE_AT_LINE (658)),  GGS_string ("MASKEDNEWDIFFERSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (658)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (659)) COMMA_SOURCE_FILE_AT_LINE (659)) ;
      }else if (typeid (cPtr_newiswithin) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_newiswithin var_cas_newIsWithinFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (661)) COMMA_SOURCE_FILE_AT_LINE (661)),  GGS_string ("NEWISWITHIN") COMMA_SOURCE_FILE_AT_LINE (661)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsWithinFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (662)) COMMA_SOURCE_FILE_AT_LINE (662)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsWithinFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (663)) COMMA_SOURCE_FILE_AT_LINE (663)) ;
      }else if (typeid (cPtr_newisoutside) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_newisoutside var_cas_newIsOutsideFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (665)) COMMA_SOURCE_FILE_AT_LINE (665)),  GGS_string ("NEWISOUTSIDE") COMMA_SOURCE_FILE_AT_LINE (665)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsOutsideFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (666)) COMMA_SOURCE_FILE_AT_LINE (666)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsOutsideFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (667)) COMMA_SOURCE_FILE_AT_LINE (667)) ;
      }else if (typeid (cPtr_newisgreater_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (669)) COMMA_SOURCE_FILE_AT_LINE (669)),  GGS_string ("NEWISGREATER") COMMA_SOURCE_FILE_AT_LINE (669)) ;
      }else if (typeid (cPtr_newislessorequal_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (671)) COMMA_SOURCE_FILE_AT_LINE (671)),  GGS_string ("NEWISLESSOREQUAL") COMMA_SOURCE_FILE_AT_LINE (671)) ;
      }else if (typeid (cPtr_newisless_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (673)) COMMA_SOURCE_FILE_AT_LINE (673)),  GGS_string ("NEWISLESS") COMMA_SOURCE_FILE_AT_LINE (673)) ;
      }else if (typeid (cPtr_newisgreaterorequal_filter) == typeid (* (_var_26264.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (675)) COMMA_SOURCE_FILE_AT_LINE (675)),  GGS_string ("NEWISGREATEROREQUAL") COMMA_SOURCE_FILE_AT_LINE (675)) ;
      }else if (typeid (cPtr_oneeveryn_filter) == typeid (* (_var_26264.getPtr ()))) {
        const GGS_oneeveryn_filter var_cas_oneEveryNFilter (_var_26264.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (677)) COMMA_SOURCE_FILE_AT_LINE (677)),  GGS_string ("ONEEVERYN") COMMA_SOURCE_FILE_AT_LINE (677)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PERIOD"),  var_cas_oneEveryNFilter.reader_period (inLexique COMMA_SOURCE_FILE_AT_LINE (678)) COMMA_SOURCE_FILE_AT_LINE (678)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("OFFSET"),  var_cas_oneEveryNFilter.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (679)) COMMA_SOURCE_FILE_AT_LINE (679)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setFilter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMessagesList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMessagesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMessagesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_receiverSortedList  var_cas_internalReceiversList = GGS_receiverSortedList ::constructor_emptySortedList () ;
  {
    GGS_message_map::cEnumerator enumerator_26648 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (692)), true) ;
    const GGS_message_map::cElement * operand_26648 = NULL ;
    while (((operand_26648 = enumerator_26648.nextObject ()))) {
      macroValidPointer (operand_26648) ;
      { const GGS_mess_prop_obj _var_27466 = operand_26648->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (693)) ; // CAST instruction
        if (_var_27466.getPtr () != NULL) {
          macroValidPointer (_var_27466.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_27466.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_27466.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (695)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_26648->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (696)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (696)), operand_26648->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (696)), operand_26648->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (696))) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_27466.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_27466.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (698)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_26648->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (699)), operand_26648->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)), operand_26648->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (699))) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_27466.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_27466.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (701)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_26648->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (702)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (702)), operand_26648->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (702)), operand_26648->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (702))) ;
          }else{
          }
        }
      }
    }
  }
  GGS_lstringMap  var_cas_internalTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (715)) ;
  GGS_lstringMap  var_cas_nextTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (716)) ;
  GGS_receiverReverseSortedList  var_cas_actualInternalReceiverList = GGS_receiverReverseSortedList ::constructor_emptySortedList () ;
  GGS_string var_cas_previousReceiver = GGS_string ("") ;
  GGS_string var_cas_previousSender = GGS_string ("") ;
  {
    GGS_receiverSortedList::cEnumerator enumerator_28215 (var_cas_internalReceiversList, true) ;
    const GGS_receiverSortedList::cElement * operand_28215 = NULL ;
    while (((operand_28215 = enumerator_28215.nextObject ()))) {
      macroValidPointer (operand_28215) ;
      const GGS_bool cond_28384 = (var_cas_internalTargets.reader_hasKey (operand_28215->senderName)).operator_not () ;
      if (cond_28384.isBuiltAndTrue ()) {
        var_cas_internalTargets.modifier_put (inLexique, function_lstringWith (inLexique, operand_28215->senderName COMMA_SOURCE_FILE_AT_LINE (722)), GGS_lstring ::constructor_new (inLexique, operand_28215->receiverName, operand_28215->receiverLocation COMMA_SOURCE_FILE_AT_LINE (722)) COMMA_SOURCE_FILE_AT_LINE (722)) ;
      }
      const GGS_bool cond_28544 = (operand_28215->senderName).operator_isEqual (var_cas_previousSender) ;
      if (cond_28544.isBuiltAndTrue ()) {
        var_cas_nextTargets.modifier_put (inLexique, function_lstringWith (inLexique, var_cas_previousReceiver COMMA_SOURCE_FILE_AT_LINE (725)), GGS_lstring ::constructor_new (inLexique, operand_28215->receiverName, operand_28215->receiverLocation COMMA_SOURCE_FILE_AT_LINE (725)) COMMA_SOURCE_FILE_AT_LINE (725)) ;
      }
      var_cas_previousSender = operand_28215->senderName ;
      var_cas_previousReceiver = operand_28215->receiverName ;
      var_cas_actualInternalReceiverList.addAssign_operation (operand_28215->mess, operand_28215->senderName, operand_28215->senderLocation, operand_28215->receiverName, operand_28215->receiverLocation) ;
    }
  }
  GGS_goilTemplateFieldMapList  var_cas_messagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_sendMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_receiveMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_receiverReverseSortedList::cEnumerator enumerator_29038 (var_cas_actualInternalReceiverList, true) ;
    const GGS_receiverReverseSortedList::cElement * operand_29038 = NULL ;
    while (((operand_29038 = enumerator_29038.nextObject ()))) {
      macroValidPointer (operand_29038) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (740)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_29038->receiverLocation COMMA_SOURCE_FILE_AT_LINE (741)),  operand_29038->receiverName COMMA_SOURCE_FILE_AT_LINE (741)) ;
      const GGS_bool cond_29511 = var_cas_nextTargets.reader_hasKey (operand_29038->receiverName) ;
      if (cond_29511.isBuiltAndTrue ()) {
        GGS_lstring  var_cas_nextReceiveMessage ;
        if (var_cas_nextTargets.isBuilt ()) {
          var_cas_nextTargets (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_29038->receiverName, operand_29038->receiverLocation COMMA_SOURCE_FILE_AT_LINE (745)), var_cas_nextReceiveMessage COMMA_SOURCE_FILE_AT_LINE (745)) ;
        }
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NEXT"), var_cas_nextReceiveMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (746)) COMMA_SOURCE_FILE_AT_LINE (746)),  var_cas_nextReceiveMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (746)) COMMA_SOURCE_FILE_AT_LINE (746)) ;
      }
      GGS_mess_prop_obj  var_cas_messageProperty = operand_29038->mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (748)) ;
      { const GGS_mess_prop_obj _var_32072 = var_cas_messageProperty ; // CAST instruction
        if (_var_32072.getPtr () != NULL) {
          macroValidPointer (_var_32072.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_32072.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_32072.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (751)) COMMA_SOURCE_FILE_AT_LINE (751)),  GGS_string ("RECEIVE_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (751)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (752)) COMMA_SOURCE_FILE_AT_LINE (752)) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_32072.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_32072.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (754)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (755)) COMMA_SOURCE_FILE_AT_LINE (755)),  GGS_string ("RECEIVE_UNQUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (755)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (756)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_30263 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (758)) ;
            if (temp_30263.isBuilt ()) {
              temp_30263 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (758)) ;
            }
            { const GGS_mess_prop_obj _var_31020 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (759)) ; // CAST instruction
              if (_var_31020.getPtr () != NULL) {
                macroValidPointer (_var_31020.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_31020.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_31020.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (761)) COMMA_SOURCE_FILE_AT_LINE (761)) ;
                  GGS_basic_type  var_cas_initialValue = var_cas_receiveUnqueuedInternalMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (762)) ;
                  GGS_string var_cas_initialValueString ;
                  if (var_cas_initialValue.isBuilt ()) {
                    var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (764)) ;
                  }
                  const GGS_bool cond_30809 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
                  if (cond_30809.isBuiltAndTrue ()) {
                    ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (766)) COMMA_SOURCE_FILE_AT_LINE (766)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (766)) ;
                  }
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (769)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (770)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (771)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveUnqueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (772)) COMMA_SOURCE_FILE_AT_LINE (772)) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_32072.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_32072.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (774)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (775)) COMMA_SOURCE_FILE_AT_LINE (775)),  GGS_string ("RECEIVE_QUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (775)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (776)) ;
            ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("QUEUESIZE"),  var_cas_receiveQueuedInternalMessage.reader_queuesize (inLexique COMMA_SOURCE_FILE_AT_LINE (777)) COMMA_SOURCE_FILE_AT_LINE (777)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_31568 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (779)) ;
            if (temp_31568.isBuilt ()) {
              temp_31568 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (779)) ;
            }
            { const GGS_mess_prop_obj _var_31979 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ; // CAST instruction
              if (_var_31979.getPtr () != NULL) {
                macroValidPointer (_var_31979.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_31979.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_31979.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (782)) COMMA_SOURCE_FILE_AT_LINE (782)) ;
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (784)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (785)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (786)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveQueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (788)) COMMA_SOURCE_FILE_AT_LINE (788)) ;
          }else{
          }
        }
      }
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_29038->mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) COMMA_SOURCE_FILE_AT_LINE (791)) ;
      var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
      var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_32229 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (796)), true) ;
    const GGS_message_map::cElement * operand_32229 = NULL ;
    while (((operand_32229 = enumerator_32229.nextObject ()))) {
      macroValidPointer (operand_32229) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (797)) ;
      GGS_mess_prop_obj  var_cas_messageProperty = operand_32229->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (798)) ;
      GGS_bool var_cas_okMessage = GGS_bool (true) ;
      GGS_bool var_cas_isSendMessage = GGS_bool (true) ;
      { const GGS_mess_prop_obj _var_35404 = var_cas_messageProperty ; // CAST instruction
        if (_var_35404.getPtr () != NULL) {
          macroValidPointer (_var_35404.getPtr ()) ;
          if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_35404.getPtr ()))) {
            const GGS_ssi_mess_prop var_cas_sendStaticInternalMessage (_var_35404.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (803)) COMMA_SOURCE_FILE_AT_LINE (803)),  GGS_string ("SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (803)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (804)) COMMA_SOURCE_FILE_AT_LINE (804)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_32229->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (806)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (807)) ;
          }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_35404.getPtr ()))) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) COMMA_SOURCE_FILE_AT_LINE (809)),  GGS_string ("SEND_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (809)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_32229->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (811)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (812)) ;
          }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_35404.getPtr ()))) {
            const GGS_rzs_mess_prop var_cas_receiveZeroSendersMessage (_var_35404.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (835)) COMMA_SOURCE_FILE_AT_LINE (835)),  GGS_string ("RECEIVE_ZERO_SENDERS") COMMA_SOURCE_FILE_AT_LINE (835)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_receiveZeroSendersMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (836)) COMMA_SOURCE_FILE_AT_LINE (836)) ;
            GGS_basic_type  var_cas_initialValue = var_cas_receiveZeroSendersMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (837)) ;
            GGS_string var_cas_initialValueString ;
            if (var_cas_initialValue.isBuilt ()) {
              var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (839)) ;
            }
            const GGS_bool cond_35327 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
            if (cond_35327.isBuiltAndTrue ()) {
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (841)) COMMA_SOURCE_FILE_AT_LINE (841)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (841)) ;
            }
            var_cas_isSendMessage = GGS_bool (false) ;
          }else{
            var_cas_okMessage = GGS_bool (false) ;
          }
        }
      }
      const GGS_bool cond_35682 = var_cas_okMessage ;
      if (cond_35682.isBuiltAndTrue ()) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (848)),  operand_32229->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (848)) COMMA_SOURCE_FILE_AT_LINE (848)) ;
        var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
        const GGS_bool cond_35618 = var_cas_isSendMessage ;
        if (cond_35618.isBuiltAndTrue ()) {
          var_cas_sendMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }else if (cond_35618.isBuiltAndFalse ()) {
          var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (857)),  var_cas_messagesList COMMA_SOURCE_FILE_AT_LINE (857)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SENDMESSAGES") COMMA_SOURCE_FILE_AT_LINE (858)),  var_cas_sendMessagesList COMMA_SOURCE_FILE_AT_LINE (858)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("RECEIVEMESSAGES") COMMA_SOURCE_FILE_AT_LINE (859)),  var_cas_receiveMessagesList COMMA_SOURCE_FILE_AT_LINE (859)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMessagesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setScheduletablesList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScheduletablesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScheduletablesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_scheduletablesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_scheduletable_map::cEnumerator enumerator_36141 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (871)), true) ;
    const GGS_scheduletable_map::cElement * operand_36141 = NULL ;
    while (((operand_36141 = enumerator_36141.nextObject ()))) {
      macroValidPointer (operand_36141) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (873)),  operand_36141->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (873)) COMMA_SOURCE_FILE_AT_LINE (873)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (874)),  operand_36141->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (874)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874)) COMMA_SOURCE_FILE_AT_LINE (874)) ;
      GGS_bool var_cas_periodic = GGS_bool (false) ;
      { const GGS_basic_type _var_36512 = operand_36141->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (877)) ; // CAST instruction
        if (_var_36512.getPtr () != NULL) {
          macroValidPointer (_var_36512.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_36512.getPtr ()))) {
            const GGS_bool_class var_cas_p (_var_36512.getPtr ()) ;
            var_cas_periodic = var_cas_p.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (878)) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PERIODIC") COMMA_SOURCE_FILE_AT_LINE (880)),  var_cas_periodic COMMA_SOURCE_FILE_AT_LINE (880)) ;
      GGS_lstring  var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDTABLE_NO_SYNC"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (882)) ;
      GGS_luint64  var_cas_precision = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (883)) ;
      { const GGS_ltgt_sync_obj _var_37050 = operand_36141->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (884)) ; // CAST instruction
        if (_var_37050.getPtr () != NULL) {
          macroValidPointer (_var_37050.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_37050.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_syncStrategyTrue (_var_37050.getPtr ()) ;
            GGS_lstring  var_cas_strategy = var_cas_syncStrategyTrue.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (886)) ;
            var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("SCHEDTABLE_")).operator_concat (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (887)))).operator_concat (GGS_string ("_SYNC")), var_cas_strategy.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (887)) COMMA_SOURCE_FILE_AT_LINE (887)) ;
            var_cas_precision = function_luint64OrError (inLexique, var_cas_syncStrategyTrue.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (888)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (888)) ;
          }else{
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SYNCSTRATEGY"),  var_cas_syncStrategy COMMA_SOURCE_FILE_AT_LINE (890)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PRECISION"),  var_cas_precision COMMA_SOURCE_FILE_AT_LINE (891)) ;
      GGS_lstring  var_cas_scheduletableState = function_lstringWith (inLexique, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (893)) ;
      GGS_luint64  var_cas_scheduletableDate = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (894)) ;
      { const GGS_autostart_obj _var_38216 = operand_36141->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (895)) ; // CAST instruction
        if (_var_38216.getPtr () != NULL) {
          macroValidPointer (_var_38216.getPtr ()) ;
          if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_38216.getPtr ()))) {
            const GGS_sd_autostart_false var_cas_autostartFalse (_var_38216.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_STOPPED"), var_cas_autostartFalse.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (897)) COMMA_SOURCE_FILE_AT_LINE (897)) ;
          }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_38216.getPtr ()))) {
            const GGS_sd_autostart_synchron var_cas_autostartSynchron (_var_38216.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_SYNCHRON"), var_cas_autostartSynchron.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (899)) COMMA_SOURCE_FILE_AT_LINE (899)) ;
          }else if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_38216.getPtr ()))) {
            const GGS_sd_autostart_relative var_cas_autostartRelative (_var_38216.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_RELATIVE"), var_cas_autostartRelative.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (901)) COMMA_SOURCE_FILE_AT_LINE (901)) ;
            var_cas_scheduletableDate = var_cas_autostartRelative.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (902)) ;
          }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_38216.getPtr ()))) {
            const GGS_sd_autostart_absolute var_cas_autostartAbsolute (_var_38216.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_ABSOLUTE"), var_cas_autostartAbsolute.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (904)) COMMA_SOURCE_FILE_AT_LINE (904)) ;
            var_cas_scheduletableDate = var_cas_autostartAbsolute.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (905)) ;
          }else{
            operand_36141->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table ")).operator_concat (operand_36141->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (906))) COMMA_SOURCE_FILE_AT_LINE (907)) ;
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("STATE"),  var_cas_scheduletableState COMMA_SOURCE_FILE_AT_LINE (908)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("DATE"),  var_cas_scheduletableDate COMMA_SOURCE_FILE_AT_LINE (909)) ;
      GGS_uint64  var_cas_length = GGS_uint64 (0ULL) ;
      { const GGS_basic_type _var_38640 = operand_36141->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (912)) ; // CAST instruction
        if (_var_38640.getPtr () != NULL) {
          macroValidPointer (_var_38640.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_38640.getPtr ()))) {
            const GGS_uint64_class var_cas_len (_var_38640.getPtr ()) ;
            var_cas_length = var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (914)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LENGTH"), var_cas_len.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (915)) COMMA_SOURCE_FILE_AT_LINE (915)),  var_cas_length COMMA_SOURCE_FILE_AT_LINE (915)) ;
          }else{
            operand_36141->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for LENGTH attribute") COMMA_SOURCE_FILE_AT_LINE (917)) ;
          }
        }
      }
      GGS_expiry_point_list  var_cas_expiryPoints = operand_36141->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (921)) ;
      GGS_expiry_point_obj  var_cas_lastPoint ;
      GGS_uint64  var_cas_lastOffset ;
      var_cas_expiryPoints.modifier_popGreatest (inLexique, var_cas_lastOffset, var_cas_lastPoint COMMA_SOURCE_FILE_AT_LINE (924)) ;
      const GGS_bool cond_39168 = (var_cas_lastOffset).operator_isEqual (var_cas_length) ;
      if (cond_39168.isBuiltAndTrue ()) {
        GGS_action_list  var_cas_actions = var_cas_lastPoint.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (927)) ;
        var_cas_actions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_36141->mKey COMMA_SOURCE_FILE_AT_LINE (928))) ;
        var_cas_lastPoint.modifier_setActions (inLexique, var_cas_actions COMMA_SOURCE_FILE_AT_LINE (929)) ;
      }else if (cond_39168.isBuiltAndFalse ()) {
        GGS_action_list  var_cas_finalizeExpiryPointActions = GGS_action_list ::constructor_emptySortedList () ;
        var_cas_finalizeExpiryPointActions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_36141->mKey COMMA_SOURCE_FILE_AT_LINE (933))) ;
        GGS_expiry_point_obj  var_cas_finalizeExpiryPoint = GGS_expiry_point_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (936)), GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length COMMA_SOURCE_FILE_AT_LINE (937)), GGS_lstring ::constructor_new (inLexique, GGS_string ("finalize"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (938)), GGS_adjustable_void ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (939)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (939)), var_cas_finalizeExpiryPointActions COMMA_SOURCE_FILE_AT_LINE (935)) ;
        var_cas_expiryPoints.addAssign_operation (var_cas_length, var_cas_finalizeExpiryPoint) ;
      }
      var_cas_expiryPoints.addAssign_operation (var_cas_lastOffset, var_cas_lastPoint) ;
      GGS_goilTemplateFieldMapList  var_cas_expiryPointsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_uint64  var_cas_previousOffset = GGS_uint64 (0ULL) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_39946 (var_cas_expiryPoints, true) ;
        const GGS_expiry_point_list::cElement * operand_39946 = NULL ;
        while (((operand_39946 = enumerator_39946.nextObject ()))) {
          macroValidPointer (operand_39946) ;
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (950)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ABSOLUTEOFFSET") COMMA_SOURCE_FILE_AT_LINE (951)),  operand_39946->off COMMA_SOURCE_FILE_AT_LINE (951)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RELATIVEOFFSET") COMMA_SOURCE_FILE_AT_LINE (952)),  operand_39946->off.substract_operation (inLexique, var_cas_previousOffset COMMA_SOURCE_FILE_AT_LINE (952)) COMMA_SOURCE_FILE_AT_LINE (952)) ;
          var_cas_previousOffset = operand_39946->off ;
          GGS_goilTemplateFieldMapList  var_cas_actionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_action_list::cEnumerator enumerator_40381 (operand_39946->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (957)), true) ;
            const GGS_action_list::cElement * operand_40381 = NULL ;
            while (((operand_40381 = enumerator_40381.nextObject ()))) {
              macroValidPointer (operand_40381) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (958)) ;
              ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_40381->actionobj COMMA_SOURCE_FILE_AT_LINE (959)) ;
              var_cas_actionsList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTIONS") COMMA_SOURCE_FILE_AT_LINE (962)),  var_cas_actionsList COMMA_SOURCE_FILE_AT_LINE (962)) ;
          GGS_luint64  var_cas_maxAdvance = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (964)) ;
          GGS_luint64  var_cas_maxRetard = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (965)) ;
          { const GGS_adjustable_obj _var_41010 = operand_39946->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (966)) ; // CAST instruction
            if (_var_41010.getPtr () != NULL) {
              macroValidPointer (_var_41010.getPtr ()) ;
              if (typeid (cPtr_adjustable_true) == typeid (* (_var_41010.getPtr ()))) {
                const GGS_adjustable_true var_cas_adjustableExpiryPoint (_var_41010.getPtr ()) ;
                var_cas_maxAdvance = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (968)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (968)) ;
                var_cas_maxRetard = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (969)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (969)) ;
              }else{
              }
            }
          }
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXRETARD"),  var_cas_maxRetard COMMA_SOURCE_FILE_AT_LINE (971)) ;
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXADVANCE"),  var_cas_maxAdvance COMMA_SOURCE_FILE_AT_LINE (972)) ;
          var_cas_expiryPointsList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EXPIRYPOINTS") COMMA_SOURCE_FILE_AT_LINE (976)),  var_cas_expiryPointsList COMMA_SOURCE_FILE_AT_LINE (976)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_36141->mKey COMMA_SOURCE_FILE_AT_LINE (978)) ;
      var_cas_scheduletablesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (982)),  var_cas_scheduletablesList COMMA_SOURCE_FILE_AT_LINE (982)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScheduletablesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "computeBinaryVector"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeBinaryVector (C_Compiler & inLexique,
                                const GGS_string  var_cas_vec,
                                GGS_string & var_cas_res,
                                GGS_uint  & var_cas_byteCount
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeBinaryVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_byteCount = var_cas_vec.reader_length ().divide_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (998)) ;
  const GGS_bool cond_41851 = (var_cas_vec.reader_length ().modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (999))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_41851.isBuiltAndTrue ()) {
    var_cas_byteCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (999)) ;
  }
  GGS_stringlist  var_cas_data = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  GGS_uint  var_cas_start = GGS_uint (0U) ;
  GGS_uint _variant_42402 = var_cas_byteCount ;
  GGS_bool _condition_42402 (_variant_42402.isBuilt (), true) ;
  while (_condition_42402.isBuiltAndTrue ()) {
    _condition_42402 = (var_cas_i).operator_strictInf (var_cas_byteCount) ;
    if (_condition_42402.isBuiltAndTrue ()) {
      if (_variant_42402.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1024)) ;
        _condition_42402 = GGS_bool (false) ;
      }else{
        _variant_42402.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_byte = var_cas_vec.reader_subString (var_cas_start, GGS_uint (8U)).reader_reversedString () ;
        GGS_uint  var_cas_bitPos = GGS_uint (0U) ;
        GGS_uint  var_cas_val = GGS_uint (0U) ;
        GGS_uint _variant_42326 = GGS_uint (8U) ;
        GGS_bool _condition_42326 (_variant_42326.isBuilt (), true) ;
        while (_condition_42326.isBuiltAndTrue ()) {
          _condition_42326 = (var_cas_bitPos).operator_strictInf (var_cas_byte.reader_length ()) ;
          if (_condition_42326.isBuiltAndTrue ()) {
            if (_variant_42326.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1020)) ;
              _condition_42326 = GGS_bool (false) ;
            }else{
              _variant_42326.decrement_operation (inLexique COMMA_HERE) ;
              GGS_char var_cas_bit = var_cas_byte.reader_characterAtIndex (inLexique, var_cas_bitPos COMMA_SOURCE_FILE_AT_LINE (1014)) ;
              var_cas_val = var_cas_val.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1015)) ;
              const GGS_bool cond_42296 = (var_cas_bit).operator_isEqual (GGS_char (TO_UNICODE ('1'))) ;
              if (cond_42296.isBuiltAndTrue ()) {
                var_cas_val.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1017)) ;
              }
              var_cas_bitPos.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
            }
          }
        }
        var_cas_data.addAssign_operation (var_cas_val.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1021))) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1022)) ;
        var_cas_start = var_cas_start.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (1023)) ;
      }
    }
  }
  var_cas_res = GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_data, GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (1025)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeBinaryVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeVector"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeVector (C_Compiler & inLexique,
                                GGS_string & var_cas_vector,
                                const GGS_lstring   var_cas_objectName,
                                const GGS_lstring   var_cas_applicationName,
                                const GGS_lstringlist   var_cas_ownedObjects,
                                const GGS_lstringlist   var_cas_accessingObjects
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_42722 = function_isInLstringlist (inLexique, var_cas_ownedObjects, var_cas_objectName COMMA_SOURCE_FILE_AT_LINE (1035)) ;
  if (cond_42722.isBuiltAndTrue ()) {
    var_cas_vector.appendCString ("11") ;
  }else if (cond_42722.isBuiltAndFalse ()) {
    var_cas_vector.appendCString ("0") ;
    const GGS_bool cond_42874 = function_isInLstringlist (inLexique, var_cas_accessingObjects, var_cas_applicationName COMMA_SOURCE_FILE_AT_LINE (1040)) ;
    if (cond_42874.isBuiltAndTrue ()) {
      var_cas_vector.appendCString ("1") ;
    }else if (cond_42874.isBuiltAndFalse ()) {
      var_cas_vector.appendCString ("0") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setOsapplicationsList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsapplicationsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsapplicationsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_osapplicationsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_stringset  var_cas_trustedFunctionSet = GGS_stringset ::constructor_emptySet () ;
  GGS_tasks_by_type  var_cas_allTaskList = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1056)) ;
  {
    GGS_app_map::cEnumerator enumerator_43220 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)), true) ;
    const GGS_app_map::cElement * operand_43220 = NULL ;
    while (((operand_43220 = enumerator_43220.nextObject ()))) {
      macroValidPointer (operand_43220) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1058)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1059)),  operand_43220->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)) COMMA_SOURCE_FILE_AT_LINE (1059)) ;
      { const GGS_basic_type _var_43641 = operand_43220->mInfo.app.reader_restart (inLexique COMMA_SOURCE_FILE_AT_LINE (1062)) ; // CAST instruction
        if (_var_43641.getPtr () != NULL) {
          macroValidPointer (_var_43641.getPtr ()) ;
          if (typeid (cPtr_string_class) == typeid (* (_var_43641.getPtr ()))) {
            const GGS_string_class var_cas_restartTask (_var_43641.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESTART"), var_cas_restartTask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) COMMA_SOURCE_FILE_AT_LINE (1064)),  var_cas_restartTask.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) COMMA_SOURCE_FILE_AT_LINE (1064)) ;
          }else{
          }
        }
      }
      GGS_bool var_cas_hasStartup ;
      { const GGS_basic_type _var_43849 = operand_43220->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1068)) ; // CAST instruction
        if (_var_43849.getPtr () != NULL) {
          macroValidPointer (_var_43849.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_43849.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_43849.getPtr ()) ;
            var_cas_hasStartup = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)) ;
          }else{
            var_cas_hasStartup = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSTARTUPHOOK"), operand_43220->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1074)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1074)) COMMA_SOURCE_FILE_AT_LINE (1074)),  var_cas_hasStartup COMMA_SOURCE_FILE_AT_LINE (1074)) ;
      GGS_bool var_cas_hasShutdown ;
      { const GGS_basic_type _var_44185 = operand_43220->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1077)) ; // CAST instruction
        if (_var_44185.getPtr () != NULL) {
          macroValidPointer (_var_44185.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_44185.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_44185.getPtr ()) ;
            var_cas_hasShutdown = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1079)) ;
          }else{
            var_cas_hasShutdown = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSHUTDOWNHOOK"), operand_43220->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1083)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1083)) COMMA_SOURCE_FILE_AT_LINE (1083)),  var_cas_hasShutdown COMMA_SOURCE_FILE_AT_LINE (1083)) ;
      GGS_string var_cas_vector = GGS_string ("") ;
      GGS_string var_cas_binaryVector ;
      GGS_uint  var_cas_numberOfItems ;
      GGS_task_map  var_cas_allTasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)) ;
      {
        GGS_tasks_by_type::cEnumerator enumerator_44547 (var_cas_allTaskList, true) ;
        const GGS_tasks_by_type::cElement * operand_44547 = NULL ;
        while (((operand_44547 = enumerator_44547.nextObject ()))) {
          macroValidPointer (operand_44547) ;
          GGS_task_obj  var_cas_taskItem ;
          if (var_cas_allTasks.isBuilt ()) {
            var_cas_allTasks (HERE)->method_get (inLexique, function_lstringWith (inLexique, operand_44547->name COMMA_SOURCE_FILE_AT_LINE (1095)), var_cas_taskItem COMMA_SOURCE_FILE_AT_LINE (1095)) ;
          }
          ::routine_computeVector (inLexique,  var_cas_vector,  function_lstringWith (inLexique, operand_44547->name COMMA_SOURCE_FILE_AT_LINE (1096)),  operand_43220->mKey,  operand_43220->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1096)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1096)),  var_cas_taskItem.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1096)) COMMA_SOURCE_FILE_AT_LINE (1096)) ;
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_44822 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)), true) ;
        const GGS_isr_map::cElement * operand_44822 = NULL ;
        while (((operand_44822 = enumerator_44822.nextObject ()))) {
          macroValidPointer (operand_44822) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_44822->mKey,  operand_43220->mKey,  operand_43220->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1100)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1100)),  operand_44822->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1100)) COMMA_SOURCE_FILE_AT_LINE (1100)) ;
        }
      }
      var_cas_vector.appendCString ("01") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1104)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1105)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1106)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1106)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1107)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1107)) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_alarm_map::cEnumerator enumerator_45462 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)), true) ;
        const GGS_alarm_map::cElement * operand_45462 = NULL ;
        while (((operand_45462 = enumerator_45462.nextObject ()))) {
          macroValidPointer (operand_45462) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_45462->mKey,  operand_43220->mKey,  operand_43220->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1112)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1112)),  operand_45462->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1112)) COMMA_SOURCE_FILE_AT_LINE (1112)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1114)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1114)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1115)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1116)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1116)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1117)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1117)) COMMA_SOURCE_FILE_AT_LINE (1117)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_resource_map::cEnumerator enumerator_45997 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1121)), true) ;
        const GGS_resource_map::cElement * operand_45997 = NULL ;
        while (((operand_45997 = enumerator_45997.nextObject ()))) {
          macroValidPointer (operand_45997) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_45997->mKey,  operand_43220->mKey,  operand_43220->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)),  operand_45997->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1122)) COMMA_SOURCE_FILE_AT_LINE (1122)) ;
        }
      }
      var_cas_vector.appendCString ("10") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1127)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1128)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1129)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1129)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1130)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1130)) COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_scheduletable_map::cEnumerator enumerator_46661 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)), true) ;
        const GGS_scheduletable_map::cElement * operand_46661 = NULL ;
        while (((operand_46661 = enumerator_46661.nextObject ()))) {
          macroValidPointer (operand_46661) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_46661->mKey,  operand_43220->mKey,  operand_43220->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)),  operand_46661->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)) COMMA_SOURCE_FILE_AT_LINE (1135)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1137)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1137)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1138)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1139)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1139)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1140)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)) COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_counter_map::cEnumerator enumerator_47247 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1144)), true) ;
        const GGS_counter_map::cElement * operand_47247 = NULL ;
        while (((operand_47247 = enumerator_47247.nextObject ()))) {
          macroValidPointer (operand_47247) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_47247->mKey,  operand_43220->mKey,  operand_43220->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)),  operand_47247->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) COMMA_SOURCE_FILE_AT_LINE (1145)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1147)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1147)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1148)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1149)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1149)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1150)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1150)) COMMA_SOURCE_FILE_AT_LINE (1150)) ;
      GGS_goilTemplateFieldMapList  var_cas_procList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_47923 (operand_43220->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1156)), true) ;
        const GGS_ident_map::cElement * operand_47923 = NULL ;
        while (((operand_47923 = enumerator_47923.nextObject ()))) {
          macroValidPointer (operand_47923) ;
          GGS_goilTemplateFieldMap  var_cas_taskFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1157)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_taskFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_47923->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1158)) COMMA_SOURCE_FILE_AT_LINE (1158)),  operand_47923->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1158)) COMMA_SOURCE_FILE_AT_LINE (1158)) ;
          var_cas_procList.addAssign_operation (var_cas_taskFieldMap) ;
          var_cas_taskList.addAssign_operation (var_cas_taskFieldMap) ;
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_48192 (operand_43220->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1162)), true) ;
        const GGS_ident_map::cElement * operand_48192 = NULL ;
        while (((operand_48192 = enumerator_48192.nextObject ()))) {
          macroValidPointer (operand_48192) ;
          GGS_goilTemplateFieldMap  var_cas_isrFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_isrFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_48192->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) COMMA_SOURCE_FILE_AT_LINE (1164)),  operand_48192->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) COMMA_SOURCE_FILE_AT_LINE (1164)) ;
          GGS_isr_obj  var_cas_isr ;
          const GGS_isr_map  temp_48403 = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1166)) ;
          if (temp_48403.isBuilt ()) {
            temp_48403 (HERE)->method_get (inLexique, operand_48192->mKey, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (1166)) ;
          }
          { const GGS_basic_type _var_48657 = var_cas_isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)) ; // CAST instruction
            if (_var_48657.getPtr () != NULL) {
              macroValidPointer (_var_48657.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_48657.getPtr ()))) {
                const GGS_uint64_class var_cas_cat (_var_48657.getPtr ()) ;
                const GGS_bool cond_48638 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1169))).operator_isEqual (GGS_uint64 (2ULL)) ;
                if (cond_48638.isBuiltAndTrue ()) {
                  var_cas_procList.addAssign_operation (var_cas_isrFieldMap) ;
                }
              }else{
              }
            }
          }
          var_cas_isrList.addAssign_operation (var_cas_isrFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (1177)),  var_cas_procList COMMA_SOURCE_FILE_AT_LINE (1177)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASKS") COMMA_SOURCE_FILE_AT_LINE (1178)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (1178)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ISRS") COMMA_SOURCE_FILE_AT_LINE (1179)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (1179)) ;
      GGS_goilTemplateFieldMapList  var_cas_alarmList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_49016 (operand_43220->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1183)), true) ;
        const GGS_ident_map::cElement * operand_49016 = NULL ;
        while (((operand_49016 = enumerator_49016.nextObject ()))) {
          macroValidPointer (operand_49016) ;
          GGS_goilTemplateFieldMap  var_cas_alarmFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1184)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_alarmFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_49016->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) COMMA_SOURCE_FILE_AT_LINE (1185)),  operand_49016->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1185)) COMMA_SOURCE_FILE_AT_LINE (1185)) ;
          var_cas_alarmList.addAssign_operation (var_cas_alarmFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMS") COMMA_SOURCE_FILE_AT_LINE (1188)),  var_cas_alarmList COMMA_SOURCE_FILE_AT_LINE (1188)) ;
      GGS_goilTemplateFieldMapList  var_cas_resourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_regularResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_internalResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_49549 (operand_43220->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1194)), true) ;
        const GGS_ident_map::cElement * operand_49549 = NULL ;
        while (((operand_49549 = enumerator_49549.nextObject ()))) {
          macroValidPointer (operand_49549) ;
          GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_49549->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)) COMMA_SOURCE_FILE_AT_LINE (1196)),  operand_49549->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)) COMMA_SOURCE_FILE_AT_LINE (1196)) ;
          var_cas_resourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
          GGS_resource_map  var_cas_allResources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) ;
          GGS_resource_obj  var_cas_resource ;
          if (var_cas_allResources.isBuilt ()) {
            var_cas_allResources (HERE)->method_get (inLexique, operand_49549->mKey, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (1200)) ;
          }
          { const GGS_resource_property_obj _var_50105 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1201)) ; // CAST instruction
            if (_var_50105.getPtr () != NULL) {
              macroValidPointer (_var_50105.getPtr ()) ;
              if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_50105.getPtr ()))) {
                var_cas_internalResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }else{
                var_cas_regularResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }
            }
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCES") COMMA_SOURCE_FILE_AT_LINE (1208)),  var_cas_resourcesList COMMA_SOURCE_FILE_AT_LINE (1208)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("REGULARRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1209)),  var_cas_regularResourcesList COMMA_SOURCE_FILE_AT_LINE (1209)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("INTERNALRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1210)),  var_cas_internalResourcesList COMMA_SOURCE_FILE_AT_LINE (1210)) ;
      GGS_goilTemplateFieldMapList  var_cas_scheduletableList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_50504 (operand_43220->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)), true) ;
        const GGS_ident_map::cElement * operand_50504 = NULL ;
        while (((operand_50504 = enumerator_50504.nextObject ()))) {
          macroValidPointer (operand_50504) ;
          GGS_goilTemplateFieldMap  var_cas_scheduletableFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1215)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_scheduletableFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_50504->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)) COMMA_SOURCE_FILE_AT_LINE (1216)),  operand_50504->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)) COMMA_SOURCE_FILE_AT_LINE (1216)) ;
          var_cas_scheduletableList.addAssign_operation (var_cas_scheduletableFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (1219)),  var_cas_scheduletableList COMMA_SOURCE_FILE_AT_LINE (1219)) ;
      GGS_goilTemplateFieldMapList  var_cas_counterList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_50961 (operand_43220->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)), true) ;
        const GGS_ident_map::cElement * operand_50961 = NULL ;
        while (((operand_50961 = enumerator_50961.nextObject ()))) {
          macroValidPointer (operand_50961) ;
          GGS_goilTemplateFieldMap  var_cas_counterFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_counterFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_50961->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) COMMA_SOURCE_FILE_AT_LINE (1225)),  operand_50961->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)) COMMA_SOURCE_FILE_AT_LINE (1225)) ;
          var_cas_counterList.addAssign_operation (var_cas_counterFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (1228)),  var_cas_counterList COMMA_SOURCE_FILE_AT_LINE (1228)) ;
      GGS_goilTemplateFieldMapList  var_cas_messageList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_51376 (operand_43220->mInfo.app.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)), true) ;
        const GGS_ident_map::cElement * operand_51376 = NULL ;
        while (((operand_51376 = enumerator_51376.nextObject ()))) {
          macroValidPointer (operand_51376) ;
          GGS_goilTemplateFieldMap  var_cas_messageFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1233)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_messageFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_51376->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1234)) COMMA_SOURCE_FILE_AT_LINE (1234)),  operand_51376->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1234)) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
          var_cas_messageList.addAssign_operation (var_cas_messageFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (1237)),  var_cas_messageList COMMA_SOURCE_FILE_AT_LINE (1237)) ;
      var_cas_osapplicationsList.addAssign_operation (var_cas_fieldMap) ;
      { const GGS_app_trusted_obj _var_51948 = operand_43220->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1241)) ; // CAST instruction
        if (_var_51948.getPtr () != NULL) {
          macroValidPointer (_var_51948.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_51948.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_51948.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_51816 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (1243)), true) ;
              while (enumerator_51816.hasCurrentObject ()) {
                var_cas_trustedFunctionSet.addAssign_operation (enumerator_51816._key (HERE)) ;
                enumerator_51816.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OSAPPLICATIONS") COMMA_SOURCE_FILE_AT_LINE (1248)),  var_cas_osapplicationsList COMMA_SOURCE_FILE_AT_LINE (1248)) ;
  GGS_goilTemplateFieldMapList  var_cas_trustedfunctionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_stringset::cEnumerator enumerator_52137 (var_cas_trustedFunctionSet, true) ;
    while (enumerator_52137.hasCurrentObject ()) {
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1253)),  enumerator_52137._key (HERE) COMMA_SOURCE_FILE_AT_LINE (1253)) ;
      var_cas_trustedfunctionsList.addAssign_operation (var_cas_fieldMap) ;
      enumerator_52137.next () ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRUSTEDFUNCTIONS") COMMA_SOURCE_FILE_AT_LINE (1256)),  var_cas_trustedfunctionsList COMMA_SOURCE_FILE_AT_LINE (1256)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsapplicationsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setReadyList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setReadyList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_list   var_cas_readyList,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setReadyList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)).reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) ;
  GGS_goilTemplateFieldMapList  var_cas_fifoList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  const GGS_bool cond_53092 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_53092.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    if (var_cas_config.isBuilt ()) {
      var_cas_config (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1276)), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1276)) ;
    }
    { const GGS_basic_type _var_53080 = var_cas_pw ; // CAST instruction
      if (_var_53080.getPtr () != NULL) {
        macroValidPointer (_var_53080.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_53080.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_53080.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1281)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1282)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_53119 (var_cas_readyList, true) ;
    const GGS_prio_list::cElement * operand_53119 = NULL ;
    while (((operand_53119 = enumerator_53119.nextObject ()))) {
      macroValidPointer (operand_53119) ;
      GGS_goilTemplateFieldMap  var_cas_fifoFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)) ;
      GGS_uint  var_cas_maxSize ;
      const GGS_bool cond_53350 = var_cas_powerof2 ;
      if (cond_53350.isBuiltAndTrue ()) {
        var_cas_maxSize = GGS_uint (1U) ;
        GGS_uint _variant_53335 = GGS_uint (32U) ;
        GGS_bool _condition_53335 (_variant_53335.isBuilt (), true) ;
        while (_condition_53335.isBuiltAndTrue ()) {
          _condition_53335 = (operand_53119->fifosize).operator_strictSup (var_cas_maxSize) ;
          if (_condition_53335.isBuiltAndTrue ()) {
            if (_variant_53335.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1293)) ;
              _condition_53335 = GGS_bool (false) ;
            }else{
              _variant_53335.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_maxSize = var_cas_maxSize.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1292)) ;
            }
          }
        }
      }else if (cond_53350.isBuiltAndFalse ()) {
        var_cas_maxSize = operand_53119->fifosize ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fifoFieldMap,  function_lstringWith (inLexique, GGS_string ("SIZE") COMMA_SOURCE_FILE_AT_LINE (1297)),  var_cas_maxSize.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1297)) COMMA_SOURCE_FILE_AT_LINE (1297)) ;
      var_cas_fifoList.addAssign_operation (var_cas_fifoFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("READYLIST") COMMA_SOURCE_FILE_AT_LINE (1300)),  var_cas_fifoList COMMA_SOURCE_FILE_AT_LINE (1300)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setReadyList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessCount"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_taskCount = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1312)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1312)) ;
  GGS_uint64  var_cas_isrCount = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1313)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1313)) ;
  GGS_uint64  var_cas_extendedCount = GGS_uint64 (0ULL) ;
  {
    GGS_task_map::cEnumerator enumerator_53944 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1315)), true) ;
    const GGS_task_map::cElement * operand_53944 = NULL ;
    while (((operand_53944 = enumerator_53944.nextObject ()))) {
      macroValidPointer (operand_53944) ;
      const GGS_bool cond_54027 = (operand_53944->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1316)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_54027.isBuiltAndTrue ()) {
        var_cas_extendedCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)) ;
      }
    }
  }
  GGS_uint64  var_cas_isr2Count = GGS_uint64 (0ULL) ;
  {
    GGS_isr_map::cEnumerator enumerator_54085 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1321)), true) ;
    const GGS_isr_map::cElement * operand_54085 = NULL ;
    while (((operand_54085 = enumerator_54085.nextObject ()))) {
      macroValidPointer (operand_54085) ;
      { const GGS_basic_type _var_54287 = operand_54085->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)) ; // CAST instruction
        if (_var_54287.getPtr () != NULL) {
          macroValidPointer (_var_54287.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_54287.getPtr ()))) {
            const GGS_uint64_class var_cas_cat (_var_54287.getPtr ()) ;
            const GGS_bool cond_54218 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1324))).operator_isEqual (GGS_uint64 (2ULL)) ;
            if (cond_54218.isBuiltAndTrue ()) {
              var_cas_isr2Count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)) ;
            }
          }else{
            operand_54085->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("missing CATEGORY attribute") COMMA_SOURCE_FILE_AT_LINE (1329)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1331)),  var_cas_taskCount COMMA_SOURCE_FILE_AT_LINE (1331)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1332)),  var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1332)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1333)),  var_cas_taskCount.substract_operation (inLexique, var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1333)) COMMA_SOURCE_FILE_AT_LINE (1333)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1334)),  var_cas_taskCount.add_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1334)) COMMA_SOURCE_FILE_AT_LINE (1334)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1335)),  var_cas_isrCount COMMA_SOURCE_FILE_AT_LINE (1335)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR2COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1336)),  var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1336)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR1COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1337)),  var_cas_isrCount.substract_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1337)) COMMA_SOURCE_FILE_AT_LINE (1337)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourceCount"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourceCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourceCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1344)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) COMMA_SOURCE_FILE_AT_LINE (1344)) ;
  GGS_uint64  var_cas_regularCount = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_internalCount = GGS_uint64 (0ULL) ;
  {
    GGS_resource_map::cEnumerator enumerator_55207 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)), true) ;
    const GGS_resource_map::cElement * operand_55207 = NULL ;
    while (((operand_55207 = enumerator_55207.nextObject ()))) {
      macroValidPointer (operand_55207) ;
      { const GGS_resource_property_obj _var_55576 = operand_55207->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)) ; // CAST instruction
        if (_var_55576.getPtr () != NULL) {
          macroValidPointer (_var_55576.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_55576.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_55576.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_55576.getPtr ()))) {
            var_cas_internalCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1354)) ;
          }else{
            operand_55207->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1356)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (1357)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1359)),  var_cas_regularCount COMMA_SOURCE_FILE_AT_LINE (1359)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1360)),  var_cas_internalCount COMMA_SOURCE_FILE_AT_LINE (1360)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourceCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setSourceFileList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSourceFileList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSourceFileList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_sourceFileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_55962 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)).reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (1368)), true) ;
    const GGS_lstringlist::cElement * operand_55962 = NULL ;
    while (((operand_55962 = enumerator_55962.nextObject ()))) {
      macroValidPointer (operand_55962) ;
      GGS_goilTemplateFieldMap  var_cas_sourceFileFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_sourceFileFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILE"), operand_55962->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)) COMMA_SOURCE_FILE_AT_LINE (1370)),  operand_55962->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1370)) COMMA_SOURCE_FILE_AT_LINE (1370)) ;
      var_cas_sourceFileList.addAssign_operation (var_cas_sourceFileFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1373)),  var_cas_sourceFileList COMMA_SOURCE_FILE_AT_LINE (1373)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSourceFileList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setCFlagsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_56477 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)).reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)), true) ;
    const GGS_lstringlist::cElement * operand_56477 = NULL ;
    while (((operand_56477 = enumerator_56477.nextObject ()))) {
      macroValidPointer (operand_56477) ;
      const GGS_bool cond_56760 = (function_stripString (inLexique, operand_56477->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1382)) COMMA_SOURCE_FILE_AT_LINE (1382))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_56760.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1383)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CFLAG"), operand_56477->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)) COMMA_SOURCE_FILE_AT_LINE (1384)),  operand_56477->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)) COMMA_SOURCE_FILE_AT_LINE (1384)) ;
        var_cas_cFlagsList.addAssign_operation (var_cas_cFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CFLAGS") COMMA_SOURCE_FILE_AT_LINE (1388)),  var_cas_cFlagsList COMMA_SOURCE_FILE_AT_LINE (1388)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCPPFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCPPFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCPPFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cppFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_57020 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1396)).reader_cppflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1396)), true) ;
    const GGS_lstringlist::cElement * operand_57020 = NULL ;
    while (((operand_57020 = enumerator_57020.nextObject ()))) {
      macroValidPointer (operand_57020) ;
      const GGS_bool cond_57323 = (function_stripString (inLexique, operand_57020->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)) COMMA_SOURCE_FILE_AT_LINE (1397))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_57323.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cppFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1398)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cppFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPPFLAG"), operand_57020->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)) COMMA_SOURCE_FILE_AT_LINE (1399)),  operand_57020->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)) COMMA_SOURCE_FILE_AT_LINE (1399)) ;
        var_cas_cppFlagsList.addAssign_operation (var_cas_cppFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CPPFLAGS") COMMA_SOURCE_FILE_AT_LINE (1403)),  var_cas_cppFlagsList COMMA_SOURCE_FILE_AT_LINE (1403)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCPPFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAsFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAsFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAsFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_asFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_57584 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1411)).reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1411)), true) ;
    const GGS_lstringlist::cElement * operand_57584 = NULL ;
    while (((operand_57584 = enumerator_57584.nextObject ()))) {
      macroValidPointer (operand_57584) ;
      const GGS_bool cond_57877 = (function_stripString (inLexique, operand_57584->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1412)) COMMA_SOURCE_FILE_AT_LINE (1412))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_57877.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_asFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_asFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASFLAG"), operand_57584->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)) COMMA_SOURCE_FILE_AT_LINE (1414)),  operand_57584->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)) COMMA_SOURCE_FILE_AT_LINE (1414)) ;
        var_cas_asFlagsList.addAssign_operation (var_cas_asFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ASFLAGS") COMMA_SOURCE_FILE_AT_LINE (1418)),  var_cas_asFlagsList COMMA_SOURCE_FILE_AT_LINE (1418)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAsFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLdFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLdFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLdFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_ldFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_58136 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1426)).reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1426)), true) ;
    const GGS_lstringlist::cElement * operand_58136 = NULL ;
    while (((operand_58136 = enumerator_58136.nextObject ()))) {
      macroValidPointer (operand_58136) ;
      const GGS_bool cond_58429 = (function_stripString (inLexique, operand_58136->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1427)) COMMA_SOURCE_FILE_AT_LINE (1427))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_58429.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_ldFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_ldFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LDFLAG"), operand_58136->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)) COMMA_SOURCE_FILE_AT_LINE (1429)),  operand_58136->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)) COMMA_SOURCE_FILE_AT_LINE (1429)) ;
        var_cas_ldFlagsList.addAssign_operation (var_cas_ldFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("LDFLAGS") COMMA_SOURCE_FILE_AT_LINE (1433)),  var_cas_ldFlagsList COMMA_SOURCE_FILE_AT_LINE (1433)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLdFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTraceFlag"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTraceFlag (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTraceFlag at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_trace _var_60877 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1440)) ; // CAST instruction
    if (_var_60877.getPtr () != NULL) {
      macroValidPointer (_var_60877.getPtr ()) ;
      if (typeid (cPtr_trace) == typeid (* (_var_60877.getPtr ()))) {
        const GGS_trace var_cas_noTrace (_var_60877.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_noTrace.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1442)) COMMA_SOURCE_FILE_AT_LINE (1442)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1442)) ;
      }else if (typeid (cPtr_trace_off) == typeid (* (_var_60877.getPtr ()))) {
        const GGS_trace_off var_cas_traceOff (_var_60877.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOff.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1444)) COMMA_SOURCE_FILE_AT_LINE (1444)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1444)) ;
      }else if (typeid (cPtr_trace_on) == typeid (* (_var_60877.getPtr ()))) {
        const GGS_trace_on var_cas_traceOn (_var_60877.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOn.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)) COMMA_SOURCE_FILE_AT_LINE (1446)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1446)) ;
        ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFORMAT"), var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)) COMMA_SOURCE_FILE_AT_LINE (1447)),  var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1447)) COMMA_SOURCE_FILE_AT_LINE (1447)) ;
        const GGS_bool cond_59286 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1449))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_59286.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1450)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1450)) COMMA_SOURCE_FILE_AT_LINE (1450)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1450)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1450)) COMMA_SOURCE_FILE_AT_LINE (1450)) ;
        }else if (cond_59286.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)) COMMA_SOURCE_FILE_AT_LINE (1452)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1452)) COMMA_SOURCE_FILE_AT_LINE (1452)) ;
        }
        const GGS_bool cond_59615 = (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1455)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1455))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_59615.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)) COMMA_SOURCE_FILE_AT_LINE (1456)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1456)) COMMA_SOURCE_FILE_AT_LINE (1456)) ;
        }else if (cond_59615.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1458)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1458)) COMMA_SOURCE_FILE_AT_LINE (1458)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1458)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1458)) COMMA_SOURCE_FILE_AT_LINE (1458)) ;
        }
        const GGS_bool cond_59962 = (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1461)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1461))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_59962.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)) COMMA_SOURCE_FILE_AT_LINE (1462)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1462)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1462)) COMMA_SOURCE_FILE_AT_LINE (1462)) ;
        }else if (cond_59962.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)) COMMA_SOURCE_FILE_AT_LINE (1464)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1464)) COMMA_SOURCE_FILE_AT_LINE (1464)) ;
        }
        const GGS_bool cond_60307 = (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1467)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1467))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_60307.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)) COMMA_SOURCE_FILE_AT_LINE (1468)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1468)) COMMA_SOURCE_FILE_AT_LINE (1468)) ;
        }else if (cond_60307.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)) COMMA_SOURCE_FILE_AT_LINE (1470)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1470)) COMMA_SOURCE_FILE_AT_LINE (1470)) ;
        }
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEUSEREVENT"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)) COMMA_SOURCE_FILE_AT_LINE (1472)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_user_event (inLexique COMMA_SOURCE_FILE_AT_LINE (1472)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1472)) COMMA_SOURCE_FILE_AT_LINE (1472)) ;
        { const GGS_trace_method _var_60860 = var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1473)) ; // CAST instruction
          if (_var_60860.getPtr () != NULL) {
            macroValidPointer (_var_60860.getPtr ()) ;
            if (typeid (cPtr_trace_file) == typeid (* (_var_60860.getPtr ()))) {
              const GGS_trace_file var_cas_traceFile (_var_60860.getPtr ()) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEMETHOD"), var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1475)).reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1475)) COMMA_SOURCE_FILE_AT_LINE (1475)),  GGS_string ("file") COMMA_SOURCE_FILE_AT_LINE (1475)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFILE"), var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)) COMMA_SOURCE_FILE_AT_LINE (1476)),  var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)) COMMA_SOURCE_FILE_AT_LINE (1476)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTraceFlag\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLinkScript"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinkScript (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinkScript at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linkScriptName = function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1485)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1485)) COMMA_SOURCE_FILE_AT_LINE (1485)) ;
  GGS_bool var_cas_useLinkScript = (var_cas_linkScriptName).operator_isNotEqual (GGS_string ("")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USELINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)) COMMA_SOURCE_FILE_AT_LINE (1487)),  var_cas_useLinkScript COMMA_SOURCE_FILE_AT_LINE (1487)) ;
  const GGS_bool cond_61350 = var_cas_useLinkScript ;
  if (cond_61350.isBuiltAndTrue ()) {
    ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) COMMA_SOURCE_FILE_AT_LINE (1489)),  var_cas_linkScriptName COMMA_SOURCE_FILE_AT_LINE (1489)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinkScript\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMemoryMapping"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMemoryMapping (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMemoryMapping at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useMemoryMapping = GGS_bool (false) ;
  GGS_bool var_cas_useCompilerSettings = GGS_bool (false) ;
  { const GGS_basic_type _var_62330 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1499)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1499)) ; // CAST instruction
    if (_var_62330.getPtr () != NULL) {
      macroValidPointer (_var_62330.getPtr ()) ;
      if (typeid (cPtr_memmap_false) == typeid (* (_var_62330.getPtr ()))) {
        var_cas_useMemoryMapping = GGS_bool (false) ;
        var_cas_useCompilerSettings = GGS_bool (false) ;
      }else if (typeid (cPtr_memmap_true) == typeid (* (_var_62330.getPtr ()))) {
        const GGS_memmap_true var_cas_trueMemmap (_var_62330.getPtr ()) ;
        var_cas_useMemoryMapping = GGS_bool (true) ;
        GGS_lstring  var_cas_compiler = var_cas_trueMemmap.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1505)) ;
        const GGS_bool cond_61916 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1506))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_61916.isBuiltAndTrue ()) {
          var_cas_useCompilerSettings = GGS_bool (true) ;
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("COMPILER"),  var_cas_compiler COMMA_SOURCE_FILE_AT_LINE (1508)) ;
        }
        GGS_lstring  var_cas_assembler = var_cas_trueMemmap.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1510)) ;
        const GGS_bool cond_62068 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1511))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_62068.isBuiltAndTrue ()) {
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("ASSEMBLER"),  var_cas_assembler COMMA_SOURCE_FILE_AT_LINE (1512)) ;
        }
        { const GGS_basic_type _var_62313 = var_cas_trueMemmap.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1514)) ; // CAST instruction
          if (_var_62313.getPtr () != NULL) {
            macroValidPointer (_var_62313.getPtr ()) ;
            if (typeid (cPtr_no_linker) == typeid (* (_var_62313.getPtr ()))) {
            }else if (typeid (cPtr_yes_linker) == typeid (* (_var_62313.getPtr ()))) {
              const GGS_yes_linker var_cas_yesLinker (_var_62313.getPtr ()) ;
              GGS_lstring  var_cas_linker = var_cas_yesLinker.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1517)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKER"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1518)) COMMA_SOURCE_FILE_AT_LINE (1518)),  var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1518)) COMMA_SOURCE_FILE_AT_LINE (1518)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEMEMORYMAPPING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)) COMMA_SOURCE_FILE_AT_LINE (1521)),  var_cas_useMemoryMapping COMMA_SOURCE_FILE_AT_LINE (1521)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPILERSETTINGS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) COMMA_SOURCE_FILE_AT_LINE (1522)),  var_cas_useCompilerSettings COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMemoryMapping\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setCompiler"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCompiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCompiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_compiler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1529)).reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1529)) ;
  GGS_string var_cas_actualCompiler = GGS_string ("gcc") ;
  const GGS_bool cond_62823 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1531))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_62823.isBuiltAndTrue ()) {
    var_cas_actualCompiler = var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1531)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMPILEREXE"), var_cas_compiler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) COMMA_SOURCE_FILE_AT_LINE (1532)),  var_cas_actualCompiler COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCompiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setAssembler"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAssembler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAssembler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_assembler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1539)).reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1539)) ;
  GGS_string var_cas_actualAssembler = GGS_string ("as") ;
  const GGS_bool cond_63195 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1541))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_63195.isBuiltAndTrue ()) {
    var_cas_actualAssembler = var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASSEMBLEREXE"), var_cas_assembler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1542)) COMMA_SOURCE_FILE_AT_LINE (1542)),  var_cas_actualAssembler COMMA_SOURCE_FILE_AT_LINE (1542)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAssembler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setLinker"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinker (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinker at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_linker = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)).reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)) ;
  GGS_string var_cas_actualLinker = GGS_string ("gcc") ;
  const GGS_bool cond_63547 = (var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1551))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_63547.isBuiltAndTrue ()) {
    var_cas_actualLinker = var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1551)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKEREXE"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)) COMMA_SOURCE_FILE_AT_LINE (1552)),  var_cas_actualLinker COMMA_SOURCE_FILE_AT_LINE (1552)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinker\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setTarget"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTarget (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TARGET") COMMA_SOURCE_FILE_AT_LINE (1559)),  gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (1559)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ARCH") COMMA_SOURCE_FILE_AT_LINE (1560)),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (1560)) COMMA_SOURCE_FILE_AT_LINE (1560)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CHIP") COMMA_SOURCE_FILE_AT_LINE (1561)),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (1561)) COMMA_SOURCE_FILE_AT_LINE (1561)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("BOARD") COMMA_SOURCE_FILE_AT_LINE (1562)),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)) COMMA_SOURCE_FILE_AT_LINE (1562)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setTemplatePath"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTemplatePath (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTemplatePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_templatePath = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TEMPLATEPATH") COMMA_SOURCE_FILE_AT_LINE (1570)),  var_cas_templatePath COMMA_SOURCE_FILE_AT_LINE (1570)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTemplatePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setTrampolinePath"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTrampolinePath (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTrampolinePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_trampolinePath = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)).reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)) ;
  const GGS_bool cond_64600 = (var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1578))).operator_isEqual (GGS_string ("")) ;
  if (cond_64600.isBuiltAndTrue ()) {
    var_cas_trampolinePath = GGS_lstring ::constructor_new (inLexique, GGS_string (".."), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1579)) COMMA_SOURCE_FILE_AT_LINE (1579)) ;
  }
  ::routine_checkTrampolinePath (inLexique,  var_cas_trampolinePath COMMA_SOURCE_FILE_AT_LINE (1581)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRAMPOLINEPATH"), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)) COMMA_SOURCE_FILE_AT_LINE (1582)),  var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)) COMMA_SOURCE_FILE_AT_LINE (1582)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTrampolinePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setSystemCall"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSystemCall (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSystemCall at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESYSTEMCALL"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)) COMMA_SOURCE_FILE_AT_LINE (1589)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1589)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1589)) COMMA_SOURCE_FILE_AT_LINE (1589)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSystemCall\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "setDebug"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setDebug (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setDebug at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEDEBUG"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1596)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1596)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1596)) COMMA_SOURCE_FILE_AT_LINE (1596)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1596)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1596)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1596)) COMMA_SOURCE_FILE_AT_LINE (1596)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setDebug\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setUseInterruptTable"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseInterruptTable (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseInterruptTable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEINTERRUPTTABLE") COMMA_SOURCE_FILE_AT_LINE (1603)),  gOption_goil_5F_options_posix_5F_it.reader_value () COMMA_SOURCE_FILE_AT_LINE (1603)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseInterruptTable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setBuildConfig"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBuildConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBuildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setSourceFileList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1610)) ;
  ::routine_setCFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1611)) ;
  ::routine_setCPPFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1612)) ;
  ::routine_setAsFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1613)) ;
  ::routine_setLdFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1614)) ;
  ::routine_setTraceFlag (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1615)) ;
  ::routine_setLinkScript (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1616)) ;
  ::routine_setMemoryMapping (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1617)) ;
  ::routine_setCompiler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1618)) ;
  ::routine_setAssembler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1619)) ;
  ::routine_setLinker (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1620)) ;
  ::routine_setTarget (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1621)) ;
  ::routine_setTemplatePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1622)) ;
  ::routine_setTrampolinePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1623)) ;
  ::routine_setSystemCall (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1624)) ;
  ::routine_setDebug (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1625)) ;
  ::routine_setUseInterruptTable (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1626)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBuildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "useCommunication"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_useCommunication (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_useCommunication at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom ;
  var_cas_useCom = GGS_bool (false) ;
  GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)) ;
  const GGS_bool cond_66242 = var_cas_comObject.reader_usecom (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)) ;
  if (cond_66242.isBuiltAndTrue ()) {
    var_cas_useCom = GGS_bool (true) ;
  }else if (cond_66242.isBuiltAndFalse ()) {
    var_cas_useCom = ((var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1635)).reader_count ()).operator_strictSup (GGS_uint (0U))).operator_or ((var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1636)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_useCommunication\n") ;
  #endif
  return var_cas_useCom ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_useCommunication (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_useCommunication (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_useCommunication [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_useCommunication ("useCommunication",
                              functionForGenericCall_useCommunication,
                              & kTypeDescriptor_GGS_bool,
                              1,
                              kArgumentTypeList_useCommunication) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setUseCom"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseCom (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseCom at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1646)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOM"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1647)),  var_cas_useCom COMMA_SOURCE_FILE_AT_LINE (1647)) ;
  const GGS_bool cond_67932 = var_cas_useCom ;
  if (cond_67932.isBuiltAndTrue ()) {
    GGS_uint64  var_cas_timeBaseInNanoseconds = GGS_uint64 (1000000ULL) ;
    GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1650)) ;
    { const GGS_basic_type _var_66954 = var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1651)) ; // CAST instruction
      if (_var_66954.getPtr () != NULL) {
        macroValidPointer (_var_66954.getPtr ()) ;
        if (typeid (cPtr_float_class) == typeid (* (_var_66954.getPtr ()))) {
          const GGS_float_class var_cas_timeBase (_var_66954.getPtr ()) ;
          var_cas_timeBaseInNanoseconds = var_cas_timeBase.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1653)).multiply_operation (inLexique, GGS_double (1.000000e+09) COMMA_SOURCE_FILE_AT_LINE (1653)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1653)) ;
        }else{
        }
      }
    }
    ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMTIMEBASE"), var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1656)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1656)) COMMA_SOURCE_FILE_AT_LINE (1656)),  var_cas_timeBaseInNanoseconds COMMA_SOURCE_FILE_AT_LINE (1656)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMERRORHOOK"), var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)) COMMA_SOURCE_FILE_AT_LINE (1657)),  function_getBool (inLexique, var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1657)) COMMA_SOURCE_FILE_AT_LINE (1657)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMGETSERVICEID"), var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)) COMMA_SOURCE_FILE_AT_LINE (1658)),  function_getBool (inLexique, var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1658)) COMMA_SOURCE_FILE_AT_LINE (1658)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPARAMETERACCESS"), var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1659)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1659)) COMMA_SOURCE_FILE_AT_LINE (1659)),  function_getBool (inLexique, var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1659)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1659)) COMMA_SOURCE_FILE_AT_LINE (1659)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTCOMEXTENSION"), var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1660)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1660)) COMMA_SOURCE_FILE_AT_LINE (1660)),  function_getBool (inLexique, var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1660)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1660)) COMMA_SOURCE_FILE_AT_LINE (1660)) ;
    GGS_lstring  var_cas_comStatus = var_cas_comObject.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1662)) ;
    GGS_bool var_cas_comExtended = GGS_bool (false) ;
    const GGS_bool cond_67831 = (var_cas_comStatus.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1664))).operator_isEqual (GGS_string ("extended")) ;
    if (cond_67831.isBuiltAndTrue ()) {
      var_cas_comExtended = GGS_bool (true) ;
    }
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMEXTENDED"), var_cas_comStatus.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1667)) COMMA_SOURCE_FILE_AT_LINE (1667)),  var_cas_comExtended COMMA_SOURCE_FILE_AT_LINE (1667)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseCom\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setExtended"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtended (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtended at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_extended = (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1676)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1676)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1676))).operator_isEqual (GGS_string ("extended")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDED"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1677)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1677)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1677)) COMMA_SOURCE_FILE_AT_LINE (1677)),  var_cas_extended COMMA_SOURCE_FILE_AT_LINE (1677)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtended\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setScalabilityClass"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_sc ;
  GGS_bool var_cas_useTimingProtection ;
  GGS_bool var_cas_useProtectionHook ;
  ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  var_cas_useTimingProtection,  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1688)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCALABILITYCLASS") COMMA_SOURCE_FILE_AT_LINE (1689)),  var_cas_sc COMMA_SOURCE_FILE_AT_LINE (1689)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USETIMINGPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1690)),  var_cas_useTimingProtection COMMA_SOURCE_FILE_AT_LINE (1690)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEPROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (1691)),  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1691)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEMEMORYPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1692)),  function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1692)) COMMA_SOURCE_FILE_AT_LINE (1692)) COMMA_SOURCE_FILE_AT_LINE (1692)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEOSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1693)),  ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) COMMA_SOURCE_FILE_AT_LINE (1693)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setUseHooks"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseHooks (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseHooks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTUPHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)) COMMA_SOURCE_FILE_AT_LINE (1700)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1700)) COMMA_SOURCE_FILE_AT_LINE (1700)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESHUTDOWNHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1701)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1701)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1701)) COMMA_SOURCE_FILE_AT_LINE (1701)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1701)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1701)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1701)) COMMA_SOURCE_FILE_AT_LINE (1701)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEERRORHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)) COMMA_SOURCE_FILE_AT_LINE (1702)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1702)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1702)) COMMA_SOURCE_FILE_AT_LINE (1702)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPRETASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)) COMMA_SOURCE_FILE_AT_LINE (1703)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1703)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1703)) COMMA_SOURCE_FILE_AT_LINE (1703)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPOSTTASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)) COMMA_SOURCE_FILE_AT_LINE (1704)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1704)) COMMA_SOURCE_FILE_AT_LINE (1704)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEGETSERVICEID"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)) COMMA_SOURCE_FILE_AT_LINE (1705)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1705)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1705)) COMMA_SOURCE_FILE_AT_LINE (1705)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPARAMETERACCESS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)) COMMA_SOURCE_FILE_AT_LINE (1706)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1706)) COMMA_SOURCE_FILE_AT_LINE (1706)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USERESSCHEDULER"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)) COMMA_SOURCE_FILE_AT_LINE (1707)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1707)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1707)) COMMA_SOURCE_FILE_AT_LINE (1707)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTACKMONITORING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)) COMMA_SOURCE_FILE_AT_LINE (1708)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)).reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (1708)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1708)) COMMA_SOURCE_FILE_AT_LINE (1708)) ;
  GGS_uint64  var_cas_osapp_startuphook_count = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_osapp_shutdownhook_count = GGS_uint64 (0ULL) ;
  {
    GGS_app_map::cEnumerator enumerator_70483 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1713)), true) ;
    const GGS_app_map::cElement * operand_70483 = NULL ;
    while (((operand_70483 = enumerator_70483.nextObject ()))) {
      macroValidPointer (operand_70483) ;
      { const GGS_basic_type _var_70652 = operand_70483->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1714)) ; // CAST instruction
        if (_var_70652.getPtr () != NULL) {
          macroValidPointer (_var_70652.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_70652.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_70652.getPtr ()) ;
            const GGS_bool cond_70635 = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1716)) ;
            if (cond_70635.isBuiltAndTrue ()) {
              var_cas_osapp_startuphook_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1717)) ;
            }
          }else{
          }
        }
      }
      { const GGS_basic_type _var_70817 = operand_70483->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1720)) ; // CAST instruction
        if (_var_70817.getPtr () != NULL) {
          macroValidPointer (_var_70817.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_70817.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_70817.getPtr ()) ;
            const GGS_bool cond_70800 = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1722)) ;
            if (cond_70800.isBuiltAndTrue ()) {
              var_cas_osapp_shutdownhook_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)) ;
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OSAPPLICATIONSTARTUPHOOK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1727)),  var_cas_osapp_startuphook_count COMMA_SOURCE_FILE_AT_LINE (1727)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OSAPPLICATIONSHUTDOWNHOOK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1728)),  var_cas_osapp_shutdownhook_count COMMA_SOURCE_FILE_AT_LINE (1728)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseHooks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setOsConfig"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setExtended (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1732)) ;
  ::routine_setUseCom (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1733)) ;
  ::routine_setScalabilityClass (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1734)) ;
  ::routine_setUseHooks (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1735)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setInterruptSources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setInterruptSources (C_Compiler & inLexique,
                                const GGS_config   var_cas_targetConfiguration,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setInterruptSources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_72212 = var_cas_targetConfiguration.reader_hasKey (GGS_string ("it_sources")) ;
  if (cond_72212.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_interruptSources ;
    if (var_cas_targetConfiguration.isBuilt ()) {
      var_cas_targetConfiguration (HERE)->method_get (inLexique, function_lstringWith (inLexique, GGS_string ("it_sources") COMMA_SOURCE_FILE_AT_LINE (1744)), var_cas_interruptSources COMMA_SOURCE_FILE_AT_LINE (1744)) ;
    }
    { const GGS_basic_type _var_72200 = var_cas_interruptSources ; // CAST instruction
      if (_var_72200.getPtr () != NULL) {
        macroValidPointer (_var_72200.getPtr ()) ;
        if (typeid (cPtr_interrupts) == typeid (* (_var_72200.getPtr ()))) {
          const GGS_interrupts var_cas_interrupts (_var_72200.getPtr ()) ;
          ::routine_addLUnsignedValue (inLexique,  var_cas_cfg,  GGS_string ("ITSOURCESLENGTH"),  var_cas_interrupts.reader_it_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1747)) COMMA_SOURCE_FILE_AT_LINE (1747)) ;
          GGS_goilTemplateFieldMapList  var_cas_interruptSourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_ident_map::cEnumerator enumerator_71776 (var_cas_interrupts.reader_it_sources (inLexique COMMA_SOURCE_FILE_AT_LINE (1749)), true) ;
            const GGS_ident_map::cElement * operand_71776 = NULL ;
            while (((operand_71776 = enumerator_71776.nextObject ()))) {
              macroValidPointer (operand_71776) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1750)) ;
              ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("NAME"),  operand_71776->mKey COMMA_SOURCE_FILE_AT_LINE (1751)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NUMBER"), operand_71776->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1752)) COMMA_SOURCE_FILE_AT_LINE (1752)),  function_uint64OrError (inLexique, operand_71776->mInfo.value, GGS_string ("interrupt source number") COMMA_SOURCE_FILE_AT_LINE (1752)) COMMA_SOURCE_FILE_AT_LINE (1752)) ;
              var_cas_interruptSourcesList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("INTERRUPTSOURCES") COMMA_SOURCE_FILE_AT_LINE (1755)),  var_cas_interruptSourcesList COMMA_SOURCE_FILE_AT_LINE (1755)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setInterruptSources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addDirectoryAndFile"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addDirectoryAndFile (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMapList  & var_cas_fileList,
                                const GGS_string  var_cas_directory,
                                const GGS_string  var_cas_file
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addDirectoryAndFile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1766)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("DIRECTORY") COMMA_SOURCE_FILE_AT_LINE (1767)),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (1767)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FILE") COMMA_SOURCE_FILE_AT_LINE (1768)),  var_cas_file COMMA_SOURCE_FILE_AT_LINE (1768)) ;
  var_cas_fileList.addAssign_operation (var_cas_fieldMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addDirectoryAndFile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setEnvData"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEnvData (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEnvData at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OILFILENAME") COMMA_SOURCE_FILE_AT_LINE (1776)),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1776)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1776)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPUNAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1777)),  var_cas_cpu.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1777)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1777)) COMMA_SOURCE_FILE_AT_LINE (1777)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMESTAMP"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1778)),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_SOURCE_FILE_AT_LINE (1778)) COMMA_SOURCE_FILE_AT_LINE (1778)) ;
  GGS_lstring  var_cas_appName = function_applicationName (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1779)) COMMA_SOURCE_FILE_AT_LINE (1779)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPNAME"), var_cas_appName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1780)) COMMA_SOURCE_FILE_AT_LINE (1780)),  var_cas_appName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1780)) COMMA_SOURCE_FILE_AT_LINE (1780)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECT") COMMA_SOURCE_FILE_AT_LINE (1781)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1781)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1781)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECTPATH") COMMA_SOURCE_FILE_AT_LINE (1782)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1782)) COMMA_SOURCE_FILE_AT_LINE (1782)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEBUILDFILE") COMMA_SOURCE_FILE_AT_LINE (1783)),  gOption_goil_5F_options_generate_5F_makefile.reader_value () COMMA_SOURCE_FILE_AT_LINE (1783)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USELOGFILE") COMMA_SOURCE_FILE_AT_LINE (1784)),  gOption_goil_5F_options_generate_5F_log.reader_value () COMMA_SOURCE_FILE_AT_LINE (1784)) ;
  GGS_goilTemplateFieldMapList  var_cas_fileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1789)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1790)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1791)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1792)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1793)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_timeobj_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1794)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1795)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_action.c") COMMA_SOURCE_FILE_AT_LINE (1796)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_error.c") COMMA_SOURCE_FILE_AT_LINE (1797)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_dispatch_table.c") COMMA_SOURCE_FILE_AT_LINE (1798)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os.c") COMMA_SOURCE_FILE_AT_LINE (1799)) ;
  const GGS_bool cond_74562 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1800))).operator_not () ;
  if (cond_74562.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm.c") COMMA_SOURCE_FILE_AT_LINE (1801)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event.c") COMMA_SOURCE_FILE_AT_LINE (1802)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it.c") COMMA_SOURCE_FILE_AT_LINE (1803)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez.c") COMMA_SOURCE_FILE_AT_LINE (1804)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task.c") COMMA_SOURCE_FILE_AT_LINE (1805)) ;
  }
  { const GGS_trace _var_74682 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)) ; // CAST instruction
    if (_var_74682.getPtr () != NULL) {
      macroValidPointer (_var_74682.getPtr ()) ;
      if (typeid (cPtr_trace_on) == typeid (* (_var_74682.getPtr ()))) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_trace.c") COMMA_SOURCE_FILE_AT_LINE (1809)) ;
      }else{
      }
    }
  }
  const GGS_bool cond_75332 = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1811)) ;
  if (cond_75332.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_app_copy.c") COMMA_SOURCE_FILE_AT_LINE (1812)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filtering.c") COMMA_SOURCE_FILE_AT_LINE (1813)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filters.c") COMMA_SOURCE_FILE_AT_LINE (1814)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_internal_com.c") COMMA_SOURCE_FILE_AT_LINE (1815)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_external_com.c") COMMA_SOURCE_FILE_AT_LINE (1816)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_notification.c") COMMA_SOURCE_FILE_AT_LINE (1817)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_queue.c") COMMA_SOURCE_FILE_AT_LINE (1818)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_message_management.c") COMMA_SOURCE_FILE_AT_LINE (1819)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_errorhook.c") COMMA_SOURCE_FILE_AT_LINE (1820)) ;
  }
  const GGS_bool cond_76609 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_76609.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1823)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_st_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1824)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1825)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_stack_monitor.c") COMMA_SOURCE_FILE_AT_LINE (1826)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_timing_protec.c") COMMA_SOURCE_FILE_AT_LINE (1827)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_action.c") COMMA_SOURCE_FILE_AT_LINE (1828)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_protec_hook.c") COMMA_SOURCE_FILE_AT_LINE (1829)) ;
    GGS_uint64  var_cas_sc ;
    GGS_bool automatic_var_75934_0 ;
    GGS_bool automatic_var_75934_1 ;
    ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  automatic_var_75934_0,  automatic_var_75934_1 COMMA_SOURCE_FILE_AT_LINE (1831)) ;
    const GGS_bool cond_76127 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
    if (cond_76127.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_app_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1833)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1834)) ;
    }
    const GGS_bool cond_76599 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1836)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1836)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1836))).operator_not () ;
    if (cond_76599.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter.c") COMMA_SOURCE_FILE_AT_LINE (1837)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr.c") COMMA_SOURCE_FILE_AT_LINE (1838)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_schedtable.c") COMMA_SOURCE_FILE_AT_LINE (1839)) ;
      const GGS_bool cond_76587 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
      if (cond_76587.isBuiltAndTrue ()) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct.c") COMMA_SOURCE_FILE_AT_LINE (1841)) ;
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_application.c") COMMA_SOURCE_FILE_AT_LINE (1842)) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRAMPOLINESOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1846)),  var_cas_fileList COMMA_SOURCE_FILE_AT_LINE (1846)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEnvData\n") ;
  #endif
}

//---------------------------------------------------------------------------*

