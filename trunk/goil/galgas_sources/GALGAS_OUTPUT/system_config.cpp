//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'system_config.cpp'                          *
//                        Generated by version 2.0.1                         *
//                     september 9th, 2010, at 18h5'10"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 837
  #error "This file has been compiled with a version of GALGAS that uses libpm version 837, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "system_config.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "system_config.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     Class for 'taskKind' Enumeration                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_taskKind ("taskKind", false, NULL) ;

//---------------------------------------------------------------------------*

bool GGS_taskKind::
isBuilt (void) const {
  return mValue > kNotBuilt ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue == inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_isNotEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue != inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_infOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue <= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_supOrEqual (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue >= inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictInf (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue < inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_taskKind::
operator_strictSup (const GGS_taskKind inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   mValue > inOperand.mValue) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_taskKind::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<enum @taskKind" ;
  switch (mValue) {
  case enum_all:
    s << " all>" ;
    break ;
  case enum_basic:
    s << " basic>" ;
    break ;
  case enum_extended:
    s << " extended>" ;
    break ;
  case kNotBuilt:
    s << " (not built)>" ;
    break ;
  }
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_taskKind::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_taskKind * p = NULL ;
    macroMyNew (p, GGS_taskKind (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_taskKind GGS_taskKind::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_taskKind result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_taskKind * p = dynamic_cast <const GGS_taskKind *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_taskKind, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_taskKind::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_taskKind ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "setAppRelatedAttributes"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAppRelatedAttributes (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_lstring   var_cas_objName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAppRelatedAttributes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_2773 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_2773.isBuiltAndTrue ()) {
    const GGS_bool cond_2763 = (var_cas_appForObj.reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_2763.isBuiltAndTrue ()) {
      GGS_bool var_cas_trustedApp = GGS_bool (false) ;
      GGS_string var_cas_appName ;
      if (var_cas_appForObj.isBuilt ()) {
        var_cas_appForObj (HERE)->method_get (inLexique, var_cas_objName, var_cas_appName COMMA_SOURCE_FILE_AT_LINE (85)) ;
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPLICATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (86)),  var_cas_appName COMMA_SOURCE_FILE_AT_LINE (86)) ;
      GGS_app_obj  var_cas_app ;
      const GGS_app_map  temp_2533 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (91)) ;
      if (temp_2533.isBuilt ()) {
        temp_2533 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_appName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (91)), var_cas_app COMMA_SOURCE_FILE_AT_LINE (91)) ;
      }
      { const GGS_app_trusted_obj _var_2668 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ; // CAST instruction
        if (_var_2668.getPtr () != NULL) {
          macroValidPointer (_var_2668.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_2668.getPtr ()))) {
            var_cas_trustedApp = GGS_bool (true) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRUSTED"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (95)),  var_cas_trustedApp COMMA_SOURCE_FILE_AT_LINE (95)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAppRelatedAttributes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "orderedTaskList"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_tasks_by_type  function_orderedTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_orderedTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_taskList ;
  var_cas_taskList = GGS_tasks_by_type ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_3054 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), true) ;
    const GGS_task_map::cElement * operand_3054 = NULL ;
    while (((operand_3054 = enumerator_3054.nextObject ()))) {
      macroValidPointer (operand_3054) ;
      const GGS_bool cond_3152 = (operand_3054->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_3152.isBuiltAndTrue ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (0U), operand_3054->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
      }else if (cond_3152.isBuiltAndFalse ()) {
        var_cas_taskList.addAssign_operation (GGS_uint (1U), operand_3054->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_orderedTaskList\n") ;
  #endif
  return var_cas_taskList ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_orderedTaskList (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_tasks_by_type  result = function_orderedTaskList (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_orderedTaskList [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_orderedTaskList ("orderedTaskList",
                              functionForGenericCall_orderedTaskList,
                              & kTypeDescriptor_GGS_tasks_by_type ,
                              1,
                              kArgumentTypeList_orderedTaskList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "computeTaskList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_taskKind  var_cas_kind,
                                GGS_goilTemplateFieldMapList  & var_cas_taskList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_tasks_by_type  var_cas_sTasks = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (128)) ;
  {
    GGS_tasks_by_type::cEnumerator enumerator_3505 (var_cas_sTasks, true) ;
    const GGS_tasks_by_type::cElement * operand_3505 = NULL ;
    while (((operand_3505 = enumerator_3505.nextObject ()))) {
      macroValidPointer (operand_3505) ;
      const GGS_bool cond_8240 = (((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_or (((operand_3505->type).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (132)))))).operator_or (((operand_3505->type).operator_isEqual (GGS_uint (1U))).operator_and ((var_cas_kind).operator_isEqual (GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (133))))) ;
      if (cond_8240.isBuiltAndTrue ()) {
        GGS_task_obj  var_cas_task ;
        GGS_lstring  var_cas_taskName = GGS_lstring ::constructor_new (inLexique, operand_3505->name, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (135)) ;
        const GGS_task_map  temp_3755 = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
        if (temp_3755.isBuilt ()) {
          temp_3755 (HERE)->method_get (inLexique, var_cas_taskName, var_cas_task COMMA_SOURCE_FILE_AT_LINE (136)) ;
        }
        GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (137)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (138)).reader_locationForKey (inLexique, operand_3505->name COMMA_SOURCE_FILE_AT_LINE (138)) COMMA_SOURCE_FILE_AT_LINE (138)),  operand_3505->name COMMA_SOURCE_FILE_AT_LINE (138)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (139)),  GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (139)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (140)),  (operand_3505->type).operator_isEqual (GGS_uint (0U)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NONPREEMPTABLE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (141)),  (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (141)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (141))).operator_isEqual (GGS_string ("NON")) COMMA_SOURCE_FILE_AT_LINE (141)) ;
        GGS_uint  var_cas_actualPrio ;
        GGS_uint  var_cas_activation ;
        if (var_cas_actualPriorities.isBuilt ()) {
          var_cas_actualPriorities (HERE)->method_get (inLexique, var_cas_taskName, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (144)) ;
        }
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (145)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) COMMA_SOURCE_FILE_AT_LINE (145)) ;
        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (146)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) COMMA_SOURCE_FILE_AT_LINE (146)) ;
        { const GGS_task_autostart_obj _var_4893 = var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (148)) ; // CAST instruction
          if (_var_4893.getPtr () != NULL) {
            macroValidPointer (_var_4893.getPtr ()) ;
            if (typeid (cPtr_task_autostart_true) == typeid (* (_var_4893.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (150)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (150)) ;
            }else if (typeid (cPtr_task_autostart_false) == typeid (* (_var_4893.getPtr ()))) {
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSTART"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (152)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (152)) ;
            }else{
              var_cas_task.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (154)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, AUTOSTART type is undefined") COMMA_SOURCE_FILE_AT_LINE (155)) ;
            }
          }
        }
        const GGS_bool cond_5820 = (var_cas_task.reader_schedule (inLexique COMMA_SOURCE_FILE_AT_LINE (156)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156))).operator_isEqual (GGS_string ("FULL")) ;
        if (cond_5820.isBuiltAndTrue ()) {
          GGS_bool var_cas_internalFound = GGS_bool (false) ;
          {
            GGS_lstringlist::cEnumerator enumerator_5004 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (158)), true) ;
            const GGS_lstringlist::cElement * operand_5004 = NULL ;
            while (((operand_5004 = enumerator_5004.nextObject ()))) {
              macroValidPointer (operand_5004) ;
              const GGS_bool cond_5554 = (var_cas_internalFound).operator_not () ;
              if (cond_5554.isBuiltAndTrue ()) {
                GGS_resource_obj  var_cas_resource ;
                const GGS_resource_map  temp_5151 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (161)) ;
                if (temp_5151.isBuilt ()) {
                  temp_5151 (HERE)->method_get (inLexique, operand_5004->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (161)) ;
                }
                { const GGS_resource_property_obj _var_5534 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ; // CAST instruction
                  if (_var_5534.getPtr () != NULL) {
                    macroValidPointer (_var_5534.getPtr ()) ;
                    if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_5534.getPtr ()))) {
                      var_cas_internalFound = GGS_bool (true) ;
                      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (165)),  operand_5004->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (165)) COMMA_SOURCE_FILE_AT_LINE (165)) ;
                      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (166)) ;
                    }else{
                    }
                  }
                }
              }
            }
          }
          const GGS_bool cond_5805 = (var_cas_internalFound).operator_not () ;
          if (cond_5805.isBuiltAndTrue ()) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (171)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (171)) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (172)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (172)) ;
          }
        }else if (cond_5820.isBuiltAndFalse ()) {
          ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (175)),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (175)) ;
          ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEINTERNALRESOURCE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (176)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (176)) ;
        }
        GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
        {
          GGS_lstringlist::cEnumerator enumerator_6089 (var_cas_task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (180)), true) ;
          const GGS_lstringlist::cElement * operand_6089 = NULL ;
          while (((operand_6089 = enumerator_6089.nextObject ()))) {
            macroValidPointer (operand_6089) ;
            GGS_resource_obj  var_cas_resource ;
            const GGS_resource_map  temp_6192 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (182)) ;
            if (temp_6192.isBuilt ()) {
              temp_6192 (HERE)->method_get (inLexique, operand_6089->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (182)) ;
            }
            { const GGS_resource_property_obj _var_6545 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (183)) ; // CAST instruction
              if (_var_6545.getPtr () != NULL) {
                macroValidPointer (_var_6545.getPtr ()) ;
                if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_6545.getPtr ()))) {
                }else{
                  GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (187)),  operand_6089->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                  var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                }
              }
            }
          }
        }
        ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (191)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (191)) ;
        { const GGS_timing_prot _var_7691 = var_cas_task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (194)) ; // CAST instruction
          if (_var_7691.getPtr () != NULL) {
            macroValidPointer (_var_7691.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_7691.getPtr ()))) {
              const GGS_timing_prot_task var_cas_tpt (_var_7691.getPtr ()) ;
              GGS_goilTemplateFieldMap  var_cas_tpFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXECUTIONBUDGET"), var_cas_tpt.reader_exe_budget (inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)),  function_uint64OrError (inLexique, var_cas_tpt.reader_exe_budget (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), GGS_string ("EXECUTIONBUDGET") COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMEFRAME"), var_cas_tpt.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (198)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)),  function_uint64OrError (inLexique, var_cas_tpt.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (198)), GGS_string ("TIMEFRAME") COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)) ;
              { const GGS_basic_type _var_7342 = var_cas_tpt.reader_os_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) ; // CAST instruction
                if (_var_7342.getPtr () != NULL) {
                  macroValidPointer (_var_7342.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_7342.getPtr ()))) {
                    const GGS_uint64_class var_cas_osItLock (_var_7342.getPtr ()) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME"), var_cas_osItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)),  var_cas_osItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (201)) COMMA_SOURCE_FILE_AT_LINE (201)) ;
                  }else{
                  }
                }
              }
              { const GGS_basic_type _var_7568 = var_cas_tpt.reader_all_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (203)) ; // CAST instruction
                if (_var_7568.getPtr () != NULL) {
                  macroValidPointer (_var_7568.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_7568.getPtr ()))) {
                    const GGS_uint64_class var_cas_allItLock (_var_7568.getPtr ()) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME"), var_cas_allItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)),  var_cas_allItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)) ;
                  }else{
                  }
                }
              }
              ::routine_addStructFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMINGPROTECTION"), var_cas_tpt.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) COMMA_SOURCE_FILE_AT_LINE (207)),  var_cas_tpFields COMMA_SOURCE_FILE_AT_LINE (207)) ;
            }else{
            }
          }
        }
        {
          GGS_ident_map::cEnumerator enumerator_7754 (var_cas_task.reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (211)), true) ;
          const GGS_ident_map::cElement * operand_7754 = NULL ;
          while (((operand_7754 = enumerator_7754.nextObject ()))) {
            macroValidPointer (operand_7754) ;
            { const GGS_basic_type _var_8106 = operand_7754->mInfo.value ; // CAST instruction
              if (_var_8106.getPtr () != NULL) {
                macroValidPointer (_var_8106.getPtr ()) ;
                if (typeid (cPtr_bool_class) == typeid (* (_var_8106.getPtr ()))) {
                  const GGS_bool_class var_cas_bool (_var_8106.getPtr ()) ;
                  ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_7754->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (214)) COMMA_SOURCE_FILE_AT_LINE (214)) ;
                }else if (typeid (cPtr_uint64_class) == typeid (* (_var_8106.getPtr ()))) {
                  const GGS_uint64_class var_cas_number (_var_8106.getPtr ()) ;
                  ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_7754->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (216)) COMMA_SOURCE_FILE_AT_LINE (216)) ;
                }else if (typeid (cPtr_string_class) == typeid (* (_var_8106.getPtr ()))) {
                  const GGS_string_class var_cas_str (_var_8106.getPtr ()) ;
                  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_7754->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (218)) COMMA_SOURCE_FILE_AT_LINE (218)) ;
                }else{
                }
              }
            }
          }
        }
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  var_cas_taskName COMMA_SOURCE_FILE_AT_LINE (222)) ;
        var_cas_taskList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "computeWrapperTaskList"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeWrapperTaskList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_uint   /* var_cas_maxTaskPrio */,
                                GGS_goilTemplateFieldMapList  & /* var_cas_wrapperList */
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeWrapperTaskList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_app_map::cEnumerator enumerator_8497 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (238)), true) ;
    const GGS_app_map::cElement * operand_8497 = NULL ;
    while (((operand_8497 = enumerator_8497.nextObject ()))) {
      macroValidPointer (operand_8497) ;
      { const GGS_basic_type _var_8589 = operand_8497->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (239)) ; // CAST instruction
        if (_var_8589.getPtr () != NULL) {
          macroValidPointer (_var_8589.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_8589.getPtr ()))) {
            const GGS_bool_class var_cas_sh (_var_8589.getPtr ()) ;
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeWrapperTaskList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeISRList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeISRList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                const GGS_uint64   var_cas_isrCategory,
                                GGS_goilTemplateFieldMapList  & var_cas_isrList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeISRList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_isr_map::cEnumerator enumerator_8844 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (256)), true) ;
    const GGS_isr_map::cElement * operand_8844 = NULL ;
    while (((operand_8844 = enumerator_8844.nextObject ()))) {
      macroValidPointer (operand_8844) ;
      { const GGS_basic_type _var_11854 = operand_8844->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (257)) ; // CAST instruction
        if (_var_11854.getPtr () != NULL) {
          macroValidPointer (_var_11854.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_11854.getPtr ()))) {
            const GGS_uint64_class var_cas_category (_var_11854.getPtr ()) ;
            const GGS_bool cond_11837 = (var_cas_category.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (259))).operator_isEqual (var_cas_isrCategory) ;
            if (cond_11837.isBuiltAndTrue ()) {
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (260)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (261)),  operand_8844->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) COMMA_SOURCE_FILE_AT_LINE (261)) ;
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSKIND"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (262)),  GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (262)) ;
              ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (263)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (263)) ;
              GGS_uint  var_cas_actualPrio ;
              GGS_uint  var_cas_activation ;
              if (var_cas_actualPriorities.isBuilt ()) {
                var_cas_actualPriorities (HERE)->method_get (inLexique, operand_8844->mKey, var_cas_actualPrio, var_cas_activation COMMA_SOURCE_FILE_AT_LINE (266)) ;
              }
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (267)),  var_cas_actualPrio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (267)) COMMA_SOURCE_FILE_AT_LINE (267)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (268)),  var_cas_activation.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (268)) COMMA_SOURCE_FILE_AT_LINE (268)) ;
              {
                GGS_ident_map::cEnumerator enumerator_9629 (operand_8844->mInfo.isr.reader_other_fields (inLexique COMMA_SOURCE_FILE_AT_LINE (271)), true) ;
                const GGS_ident_map::cElement * operand_9629 = NULL ;
                while (((operand_9629 = enumerator_9629.nextObject ()))) {
                  macroValidPointer (operand_9629) ;
                  { const GGS_basic_type _var_10002 = operand_9629->mInfo.value ; // CAST instruction
                    if (_var_10002.getPtr () != NULL) {
                      macroValidPointer (_var_10002.getPtr ()) ;
                      if (typeid (cPtr_bool_class) == typeid (* (_var_10002.getPtr ()))) {
                        const GGS_bool_class var_cas_bool (_var_10002.getPtr ()) ;
                        ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  operand_9629->mKey,  var_cas_bool.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) COMMA_SOURCE_FILE_AT_LINE (274)) ;
                      }else if (typeid (cPtr_uint64_class) == typeid (* (_var_10002.getPtr ()))) {
                        const GGS_uint64_class var_cas_number (_var_10002.getPtr ()) ;
                        ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  operand_9629->mKey,  var_cas_number.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (276)) COMMA_SOURCE_FILE_AT_LINE (276)) ;
                      }else if (typeid (cPtr_string_class) == typeid (* (_var_10002.getPtr ()))) {
                        const GGS_string_class var_cas_str (_var_10002.getPtr ()) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  operand_9629->mKey,  var_cas_str.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (278)) COMMA_SOURCE_FILE_AT_LINE (278)) ;
                      }else{
                      }
                    }
                  }
                }
              }
              GGS_goilTemplateFieldMapList  var_cas_resourceList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
              {
                GGS_lstringlist::cEnumerator enumerator_10108 (operand_8844->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (283)), true) ;
                const GGS_lstringlist::cElement * operand_10108 = NULL ;
                while (((operand_10108 = enumerator_10108.nextObject ()))) {
                  macroValidPointer (operand_10108) ;
                  GGS_resource_obj  var_cas_resource ;
                  const GGS_resource_map  temp_10214 = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (285)) ;
                  if (temp_10214.isBuilt ()) {
                    temp_10214 (HERE)->method_get (inLexique, operand_10108->mValue, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (285)) ;
                  }
                  { const GGS_resource_property_obj _var_10581 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (286)) ; // CAST instruction
                    if (_var_10581.getPtr () != NULL) {
                      macroValidPointer (_var_10581.getPtr ()) ;
                      if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_10581.getPtr ()))) {
                      }else{
                        GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
                        ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCENAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (290)),  operand_10108->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290)) COMMA_SOURCE_FILE_AT_LINE (290)) ;
                        var_cas_resourceList.addAssign_operation (var_cas_resourceFieldMap) ;
                      }
                    }
                  }
                }
              }
              ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (294)),  var_cas_resourceList COMMA_SOURCE_FILE_AT_LINE (294)) ;
              ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_8844->mKey COMMA_SOURCE_FILE_AT_LINE (296)) ;
              { const GGS_timing_prot _var_11778 = operand_8844->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (298)) ; // CAST instruction
                if (_var_11778.getPtr () != NULL) {
                  macroValidPointer (_var_11778.getPtr ()) ;
                  if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_11778.getPtr ()))) {
                    const GGS_timing_prot_isr var_cas_tpi (_var_11778.getPtr ()) ;
                    GGS_goilTemplateFieldMap  var_cas_tpFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXECUTIONTIME"), var_cas_tpi.reader_exe_time (inLexique COMMA_SOURCE_FILE_AT_LINE (301)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (301)),  function_uint64OrError (inLexique, var_cas_tpi.reader_exe_time (inLexique COMMA_SOURCE_FILE_AT_LINE (301)), GGS_string ("EXECUTIONTIME") COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (301)) ;
                    ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMEFRAME"), var_cas_tpi.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (302)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)),  function_uint64OrError (inLexique, var_cas_tpi.reader_time_frame (inLexique COMMA_SOURCE_FILE_AT_LINE (302)), GGS_string ("TIMEFRAME") COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)) ;
                    { const GGS_basic_type _var_11415 = var_cas_tpi.reader_os_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (303)) ; // CAST instruction
                      if (_var_11415.getPtr () != NULL) {
                        macroValidPointer (_var_11415.getPtr ()) ;
                        if (typeid (cPtr_uint64_class) == typeid (* (_var_11415.getPtr ()))) {
                          const GGS_uint64_class var_cas_osItLock (_var_11415.getPtr ()) ;
                          ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXOSINTERRUPTLOCKTIME"), var_cas_osItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (305)) COMMA_SOURCE_FILE_AT_LINE (305)),  var_cas_osItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (305)) COMMA_SOURCE_FILE_AT_LINE (305)) ;
                        }else{
                        }
                      }
                    }
                    { const GGS_basic_type _var_11649 = var_cas_tpi.reader_all_it_lock (inLexique COMMA_SOURCE_FILE_AT_LINE (307)) ; // CAST instruction
                      if (_var_11649.getPtr () != NULL) {
                        macroValidPointer (_var_11649.getPtr ()) ;
                        if (typeid (cPtr_uint64_class) == typeid (* (_var_11649.getPtr ()))) {
                          const GGS_uint64_class var_cas_allItLock (_var_11649.getPtr ()) ;
                          ::routine_addUnsignedFieldValue (inLexique,  var_cas_tpFields,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXALLINTERRUPTLOCKTIME"), var_cas_allItLock.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (309)) COMMA_SOURCE_FILE_AT_LINE (309)),  var_cas_allItLock.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (309)) COMMA_SOURCE_FILE_AT_LINE (309)) ;
                        }else{
                        }
                      }
                    }
                    ::routine_addStructFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMINGPROTECTION"), var_cas_tpi.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (311)) COMMA_SOURCE_FILE_AT_LINE (311)),  var_cas_tpFields COMMA_SOURCE_FILE_AT_LINE (311)) ;
                  }else{
                  }
                }
              }
              var_cas_isrList.addAssign_operation (var_cas_fieldMap) ;
            }
          }else{
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeISRList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTasksList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (330)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (330)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (331)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (331)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setBasicTasksList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBasicTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBasicTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_basic (inLexique COMMA_SOURCE_FILE_AT_LINE (344)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (344)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (345)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (345)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBasicTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setExtendedTasksList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtendedTasksList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtendedTasksList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_extended (inLexique COMMA_SOURCE_FILE_AT_LINE (358)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (358)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (359)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (359)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtendedTasksList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs1List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs1List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs1List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (1ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (372)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS1"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (373)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (373)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs1List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setISRs2List"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setISRs2List (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setISRs2List at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (386)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRS2"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (387)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (387)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setISRs2List\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_actualPriorities,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_processesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_computeTaskList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_taskKind::constructor_all (inLexique COMMA_SOURCE_FILE_AT_LINE (400)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (400)) ;
  ::routine_computeISRList (inLexique,  var_cas_cpu,  var_cas_actualPriorities,  var_cas_appForObj,  GGS_uint64 (2ULL),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (401)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (402)),  var_cas_processesList COMMA_SOURCE_FILE_AT_LINE (402)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCountersList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCountersList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCountersList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_countersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_hardCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_softCountersList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_counter_map::cEnumerator enumerator_14662 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (416)), true) ;
    const GGS_counter_map::cElement * operand_14662 = NULL ;
    while (((operand_14662 = enumerator_14662.nextObject ()))) {
      macroValidPointer (operand_14662) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (418)),  operand_14662->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (418)) COMMA_SOURCE_FILE_AT_LINE (418)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (419)),  function_maxAllowedValue (inLexique, operand_14662->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (419)) COMMA_SOURCE_FILE_AT_LINE (419)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (420)),  function_minCycle (inLexique, operand_14662->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (420)) COMMA_SOURCE_FILE_AT_LINE (420)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TICKSPERBASE") COMMA_SOURCE_FILE_AT_LINE (421)),  function_ticksPerBase (inLexique, operand_14662->mInfo.counter COMMA_SOURCE_FILE_AT_LINE (421)) COMMA_SOURCE_FILE_AT_LINE (421)) ;
      GGS_string var_cas_type = GGS_string ("HARDWARE_COUNTER") ;
      { const GGS_counter_type _var_15282 = operand_14662->mInfo.counter.reader_type (inLexique COMMA_SOURCE_FILE_AT_LINE (423)) ; // CAST instruction
        if (_var_15282.getPtr () != NULL) {
          macroValidPointer (_var_15282.getPtr ()) ;
          if (typeid (cPtr_software_counter) == typeid (* (_var_15282.getPtr ()))) {
            var_cas_type = GGS_string ("SOFTWARE_COUNTER") ;
          }else{
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  operand_14662->mInfo.counter.reader_source (inLexique COMMA_SOURCE_FILE_AT_LINE (426)) COMMA_SOURCE_FILE_AT_LINE (426)) ;
          }
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TYPE") COMMA_SOURCE_FILE_AT_LINE (428)),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (428)) ;
      const GGS_bool cond_15470 = (operand_14662->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (430))).operator_isNotEqual (GGS_string ("SystemCounter")) ;
      if (cond_15470.isBuiltAndTrue ()) {
        ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_14662->mKey COMMA_SOURCE_FILE_AT_LINE (431)) ;
      }
      var_cas_countersList.addAssign_operation (var_cas_fieldMap) ;
      const GGS_bool cond_15591 = (var_cas_type).operator_isEqual (GGS_string ("HARDWARE_COUNTER")) ;
      if (cond_15591.isBuiltAndTrue ()) {
        var_cas_hardCountersList.addAssign_operation (var_cas_fieldMap) ;
      }else if (cond_15591.isBuiltAndFalse ()) {
        var_cas_softCountersList.addAssign_operation (var_cas_fieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (441)),  var_cas_countersList COMMA_SOURCE_FILE_AT_LINE (441)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("HARDWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (442)),  var_cas_hardCountersList COMMA_SOURCE_FILE_AT_LINE (442)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOFTWARECOUNTERS") COMMA_SOURCE_FILE_AT_LINE (443)),  var_cas_softCountersList COMMA_SOURCE_FILE_AT_LINE (443)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCountersList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setEventsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEventsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_eventMaskMap   var_cas_eventMasks,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEventsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_eventsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_event_map::cEnumerator enumerator_16090 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (455)), true) ;
    const GGS_event_map::cElement * operand_16090 = NULL ;
    while (((operand_16090 = enumerator_16090.nextObject ()))) {
      macroValidPointer (operand_16090) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (456)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (457)),  operand_16090->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457)) COMMA_SOURCE_FILE_AT_LINE (457)) ;
      GGS_uint64  var_cas_eventMask ;
      if (var_cas_eventMasks.isBuilt ()) {
        var_cas_eventMasks (HERE)->method_get (inLexique, operand_16090->mKey, var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (459)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MASK"), operand_16090->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (460)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (460)) COMMA_SOURCE_FILE_AT_LINE (460)),  var_cas_eventMask COMMA_SOURCE_FILE_AT_LINE (460)) ;
      var_cas_eventsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EVENTS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (463)),  var_cas_eventsList COMMA_SOURCE_FILE_AT_LINE (463)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEventsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setAction"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAction (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_action_obj   var_cas_actionobj
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAction at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_action_obj _var_17822 = var_cas_actionobj ; // CAST instruction
    if (_var_17822.getPtr () != NULL) {
      macroValidPointer (_var_17822.getPtr ()) ;
      if (typeid (cPtr_setevent_action) == typeid (* (_var_17822.getPtr ()))) {
        const GGS_setevent_action var_cas_setEvent (_var_17822.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (472)),  GGS_string ("setEvent") COMMA_SOURCE_FILE_AT_LINE (472)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (473)),  var_cas_setEvent.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (473)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (473)) COMMA_SOURCE_FILE_AT_LINE (473)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EVENT") COMMA_SOURCE_FILE_AT_LINE (474)),  var_cas_setEvent.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (474)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (474)) COMMA_SOURCE_FILE_AT_LINE (474)) ;
      }else if (typeid (cPtr_activatetask_action) == typeid (* (_var_17822.getPtr ()))) {
        const GGS_activatetask_action var_cas_activateTask (_var_17822.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (476)),  GGS_string ("activateTask") COMMA_SOURCE_FILE_AT_LINE (476)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASK") COMMA_SOURCE_FILE_AT_LINE (477)),  var_cas_activateTask.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (477)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (477)) COMMA_SOURCE_FILE_AT_LINE (477)) ;
      }else if (typeid (cPtr_callback_action) == typeid (* (_var_17822.getPtr ()))) {
        const GGS_callback_action var_cas_callback (_var_17822.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (479)),  GGS_string ("callback") COMMA_SOURCE_FILE_AT_LINE (479)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FUNCTION") COMMA_SOURCE_FILE_AT_LINE (480)),  var_cas_callback.reader_function_name (inLexique COMMA_SOURCE_FILE_AT_LINE (480)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (480)) COMMA_SOURCE_FILE_AT_LINE (480)) ;
      }else if (typeid (cPtr_incrementcounter_action) == typeid (* (_var_17822.getPtr ()))) {
        const GGS_incrementcounter_action var_cas_incrementCounter (_var_17822.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (482)),  GGS_string ("incrementCounter") COMMA_SOURCE_FILE_AT_LINE (482)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TARGETCOUNTER") COMMA_SOURCE_FILE_AT_LINE (483)),  var_cas_incrementCounter.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (483)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (483)) COMMA_SOURCE_FILE_AT_LINE (483)) ;
      }else if (typeid (cPtr_finalize_st_action) == typeid (* (_var_17822.getPtr ()))) {
        const GGS_finalize_st_action var_cas_finalizeScheduletable (_var_17822.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTION") COMMA_SOURCE_FILE_AT_LINE (485)),  GGS_string ("finalizeScheduletable") COMMA_SOURCE_FILE_AT_LINE (485)) ;
        ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGETCOUNTER"),  var_cas_finalizeScheduletable.reader_scheduleTableName (inLexique COMMA_SOURCE_FILE_AT_LINE (486)) COMMA_SOURCE_FILE_AT_LINE (486)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAction\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAlarmsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAlarmsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAlarmsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_alarmsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_alarm_map::cEnumerator enumerator_18049 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (499)), true) ;
    const GGS_alarm_map::cElement * operand_18049 = NULL ;
    while (((operand_18049 = enumerator_18049.nextObject ()))) {
      macroValidPointer (operand_18049) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (500)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (501)),  operand_18049->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (501)) COMMA_SOURCE_FILE_AT_LINE (501)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (502)),  operand_18049->mInfo.alarm.reader_counter_name (inLexique COMMA_SOURCE_FILE_AT_LINE (502)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (502)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_18049->mInfo.alarm.reader_action_params (inLexique COMMA_SOURCE_FILE_AT_LINE (504)) COMMA_SOURCE_FILE_AT_LINE (504)) ;
      { const GGS_autostart_obj _var_19278 = operand_18049->mInfo.alarm.reader_autostart_params (inLexique COMMA_SOURCE_FILE_AT_LINE (506)) ; // CAST instruction
        if (_var_19278.getPtr () != NULL) {
          macroValidPointer (_var_19278.getPtr ()) ;
          if (typeid (cPtr_alarm_autostart_true) == typeid (* (_var_19278.getPtr ()))) {
            const GGS_alarm_autostart_true var_cas_autostart (_var_19278.getPtr ()) ;
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (508)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (508)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMTIME") COMMA_SOURCE_FILE_AT_LINE (509)),  var_cas_autostart.reader_alarm_time (inLexique COMMA_SOURCE_FILE_AT_LINE (509)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (509)) COMMA_SOURCE_FILE_AT_LINE (509)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("CYCLETIME") COMMA_SOURCE_FILE_AT_LINE (510)),  var_cas_autostart.reader_cycle_time (inLexique COMMA_SOURCE_FILE_AT_LINE (510)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (510)) COMMA_SOURCE_FILE_AT_LINE (510)) ;
            GGS_goilTemplateFieldMapList  var_cas_appmodesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
            {
              GGS_stringset::cEnumerator enumerator_18751 (var_cas_autostart.reader_app_modes (inLexique COMMA_SOURCE_FILE_AT_LINE (512)), true) ;
              while (enumerator_18751.hasCurrentObject ()) {
                GGS_goilTemplateFieldMap  var_cas_appModeFields = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (513)) ;
                ::routine_addStringFieldValue (inLexique,  var_cas_appModeFields,  function_lstringWith (inLexique, GGS_string ("APPMODE") COMMA_SOURCE_FILE_AT_LINE (514)),  enumerator_18751._key (HERE) COMMA_SOURCE_FILE_AT_LINE (514)) ;
                var_cas_appmodesList.addAssign_operation (var_cas_appModeFields) ;
                enumerator_18751.next () ;
              }
            }
            ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("APPMODES") COMMA_SOURCE_FILE_AT_LINE (517)),  var_cas_appmodesList COMMA_SOURCE_FILE_AT_LINE (517)) ;
          }else if (typeid (cPtr_autostart_false) == typeid (* (_var_19278.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (519)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (519)) ;
          }else if (typeid (cPtr_autostart_void) == typeid (* (_var_19278.getPtr ()))) {
            ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("AUTOSTART") COMMA_SOURCE_FILE_AT_LINE (521)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (521)) ;
          }else{
          }
        }
      }
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_18049->mKey COMMA_SOURCE_FILE_AT_LINE (524)) ;
      var_cas_alarmsList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ALARMS"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (528)),  var_cas_alarmsList COMMA_SOURCE_FILE_AT_LINE (528)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAlarmsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourcesList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourcesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_map   var_cas_resourcesPrio,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourcesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_regularList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_internalList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_resource_map::cEnumerator enumerator_19776 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (542)), true) ;
    const GGS_resource_map::cElement * operand_19776 = NULL ;
    while (((operand_19776 = enumerator_19776.nextObject ()))) {
      macroValidPointer (operand_19776) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (543)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (544)),  operand_19776->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (544)) COMMA_SOURCE_FILE_AT_LINE (544)) ;
      GGS_uint  var_cas_priority ;
      GGS_uint  automatic_var_19984_0 ;
      if (var_cas_resourcesPrio.isBuilt ()) {
        var_cas_resourcesPrio (HERE)->method_get (inLexique, operand_19776->mKey, var_cas_priority, automatic_var_19984_0 COMMA_SOURCE_FILE_AT_LINE (546)) ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (547)),  var_cas_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (547)) COMMA_SOURCE_FILE_AT_LINE (547)) ;
      GGS_goilTemplateFieldMapList  var_cas_taskUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_task_map::cEnumerator enumerator_20144 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (550)), true) ;
        const GGS_task_map::cElement * operand_20144 = NULL ;
        while (((operand_20144 = enumerator_20144.nextObject ()))) {
          macroValidPointer (operand_20144) ;
          const GGS_bool cond_20399 = function_isInLstringlist (inLexique, operand_20144->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (551)), operand_19776->mKey COMMA_SOURCE_FILE_AT_LINE (551)) ;
          if (cond_20399.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (552)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (553)),  operand_20144->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (553)) COMMA_SOURCE_FILE_AT_LINE (553)) ;
            var_cas_taskUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (558)),  var_cas_taskUsage COMMA_SOURCE_FILE_AT_LINE (558)) ;
      GGS_goilTemplateFieldMapList  var_cas_isrUsage = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_isr_map::cEnumerator enumerator_20576 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (561)), true) ;
        const GGS_isr_map::cElement * operand_20576 = NULL ;
        while (((operand_20576 = enumerator_20576.nextObject ()))) {
          macroValidPointer (operand_20576) ;
          const GGS_bool cond_20828 = function_isInLstringlist (inLexique, operand_20576->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (562)), operand_19776->mKey COMMA_SOURCE_FILE_AT_LINE (562)) ;
          if (cond_20828.isBuiltAndTrue ()) {
            GGS_goilTemplateFieldMap  var_cas_usage = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (563)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_usage,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (564)),  operand_20576->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (564)) COMMA_SOURCE_FILE_AT_LINE (564)) ;
            var_cas_isrUsage.addAssign_operation (var_cas_usage) ;
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRUSAGE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (569)),  var_cas_isrUsage COMMA_SOURCE_FILE_AT_LINE (569)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_19776->mKey COMMA_SOURCE_FILE_AT_LINE (571)) ;
      { const GGS_resource_property_obj _var_21381 = operand_19776->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (574)) ; // CAST instruction
        if (_var_21381.getPtr () != NULL) {
          macroValidPointer (_var_21381.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_21381.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_21381.getPtr ()))) {
            var_cas_regularList.addAssign_operation (var_cas_fieldMap) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_21381.getPtr ()))) {
            var_cas_internalList.addAssign_operation (var_cas_fieldMap) ;
          }else{
            operand_19776->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (582)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (582)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (583)) ;
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (585)),  var_cas_regularList COMMA_SOURCE_FILE_AT_LINE (585)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCES"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (586)),  var_cas_internalList COMMA_SOURCE_FILE_AT_LINE (586)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourcesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of list '@receiverSortedList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverSortedList::
elementOf_GGS_receiverSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverSortedList * operand = (const elementOf_GGS_receiverSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = - receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Sorted list '@receiverSortedList'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverSortedList ("receiverSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverSortedList::GGS_receiverSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList::
GGS_receiverSortedList (const GGS_receiverSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverSortedList::
operator_isNotEqual (const GGS_receiverSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::
operator_concat (const GGS_receiverSortedList & inOperand) const {
  GGS_receiverSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
dotAssign_operation (const GGS_receiverSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_emptySortedList (void) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList  GGS_receiverSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverSortedList GGS_receiverSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverSortedList * p = dynamic_cast <const GGS_receiverSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@receiverReverseSortedList'                *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_receiverReverseSortedList::
elementOf_GGS_receiverReverseSortedList (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4):
mess (argument_0),
senderName (argument_1),
senderLocation (argument_2),
receiverName (argument_3),
receiverLocation (argument_4) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_receiverReverseSortedList::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_receiverReverseSortedList * ptr = dynamic_cast <const elementOf_GGS_receiverReverseSortedList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mess.operator_isEqual (ptr->mess).boolValue ()
         && senderName.operator_isEqual (ptr->senderName).boolValue ()
         && senderLocation.operator_isEqual (ptr->senderLocation).boolValue ()
         && receiverName.operator_isEqual (ptr->receiverName).boolValue ()
         && receiverLocation.operator_isEqual (ptr->receiverLocation).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_receiverReverseSortedList::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_receiverReverseSortedList * operand = (const elementOf_GGS_receiverReverseSortedList *) inOperand ;
  PMSInt32 result = - senderName.genericObjectCompare (operand->senderName) ;
  if (result == 0) {
    result = receiverName.genericObjectCompare (operand->receiverName) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_receiverReverseSortedList::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mess.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << senderLocation.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverName.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << receiverLocation.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Sorted list '@receiverReverseSortedList'                  *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_receiverReverseSortedList ("receiverReverseSortedList", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::GGS_receiverReverseSortedList (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList::
GGS_receiverReverseSortedList (const GGS_receiverReverseSortedList & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_receiverReverseSortedList::
operator_isNotEqual (const GGS_receiverReverseSortedList & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
internalAppendValues (const GGS_message_obj & argument_0,
                    const GGS_string& argument_1,
                    const GGS_location & argument_2,
                    const GGS_string& argument_3,
                    const GGS_location & argument_4) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
addAssign_operation (const GGS_message_obj & argument_0,
                                const GGS_string& argument_1,
                                const GGS_location & argument_2,
                                const GGS_string& argument_3,
                                const GGS_location & argument_4) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4) ;
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::
operator_concat (const GGS_receiverReverseSortedList & inOperand) const {
  GGS_receiverReverseSortedList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
dotAssign_operation (const GGS_receiverReverseSortedList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_receiverReverseSortedList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_message_obj  p_0 = p->mess ;
          GGS_string p_1 = p->senderName ;
          GGS_location  p_2 = p->senderLocation ;
          GGS_string p_3 = p->receiverName ;
          GGS_location  p_4 = p->receiverLocation ;
          internalAppendValues (p_0, p_1, p_2, p_3, p_4) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mess,
                                ptr->senderName,
                                ptr->senderLocation,
                                ptr->receiverName,
                                ptr->receiverLocation) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_emptySortedList (void) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList  GGS_receiverReverseSortedList::
constructor_sortedListWithValue (const GGS_message_obj & argument_0,
                           const GGS_string& argument_1,
                           const GGS_location & argument_2,
                           const GGS_string& argument_3,
                           const GGS_location & argument_4) {
  GGS_receiverReverseSortedList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2, argument_3, argument_4) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_receiverReverseSortedList::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@receiverReverseSortedList", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_smallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
method_greatest (C_Compiler & inLexique,
             GGS_message_obj & _out_0,
             GGS_string& _out_1,
             GGS_location & _out_2,
             GGS_string& _out_3,
             GGS_location & _out_4
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_message_obj & _out_0,
                 GGS_string& _out_1,
                 GGS_location & _out_2,
                 GGS_string& _out_3,
                 GGS_location & _out_4
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_receiverReverseSortedList::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_message_obj & _out_0,
                GGS_string& _out_1,
                GGS_location & _out_2,
                GGS_string& _out_3,
                GGS_location & _out_4
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mess ;
    _out_1 = ptr->senderName ;
    _out_2 = ptr->senderLocation ;
    _out_3 = ptr->receiverName ;
    _out_4 = ptr->receiverLocation ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
    _out_3.drop () ;
    _out_4.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_message_obj  & GGS_receiverReverseSortedList::cEnumerator::_mess (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mess ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_senderName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_senderLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->senderLocation ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_receiverReverseSortedList::cEnumerator::_receiverName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_location  & GGS_receiverReverseSortedList::cEnumerator::_receiverLocation (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->receiverLocation ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_receiverReverseSortedList::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_receiverReverseSortedList * p = NULL ;
    macroMyNew (p, GGS_receiverReverseSortedList (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_receiverReverseSortedList GGS_receiverReverseSortedList::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_receiverReverseSortedList result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_receiverReverseSortedList * p = dynamic_cast <const GGS_receiverReverseSortedList *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_receiverReverseSortedList, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_receiverReverseSortedList::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_receiverReverseSortedList ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setFilter"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setFilter (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMap  & var_cas_fieldMap,
                                const GGS_filter_prop_obj   var_cas_filter
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setFilter at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_filter_prop_obj _var_25188 = var_cas_filter ; // CAST instruction
    if (_var_25188.getPtr () != NULL) {
      macroValidPointer (_var_25188.getPtr ()) ;
      if (typeid (cPtr_always_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (620)) COMMA_SOURCE_FILE_AT_LINE (620)),  GGS_string ("ALWAYS") COMMA_SOURCE_FILE_AT_LINE (620)) ;
      }else if (typeid (cPtr_never_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (622)) COMMA_SOURCE_FILE_AT_LINE (622)),  GGS_string ("NEVER") COMMA_SOURCE_FILE_AT_LINE (622)) ;
      }else if (typeid (cPtr_maskednewequalsx_filter) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_maskednewequalsx_filter var_cas_maskedNewEqualsXFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (624)) COMMA_SOURCE_FILE_AT_LINE (624)),  GGS_string ("MASKEDNEWEQUALSX") COMMA_SOURCE_FILE_AT_LINE (624)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (625)) COMMA_SOURCE_FILE_AT_LINE (625)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewEqualsXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (626)) COMMA_SOURCE_FILE_AT_LINE (626)) ;
      }else if (typeid (cPtr_maskednewdiffersx_filter) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_maskednewdiffersx_filter var_cas_maskedNewDiffersXFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (628)) COMMA_SOURCE_FILE_AT_LINE (628)),  GGS_string ("MASKEDNEWDIFFERSX") COMMA_SOURCE_FILE_AT_LINE (628)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersXFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (629)) COMMA_SOURCE_FILE_AT_LINE (629)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("X"),  var_cas_maskedNewDiffersXFilter.reader_x (inLexique COMMA_SOURCE_FILE_AT_LINE (630)) COMMA_SOURCE_FILE_AT_LINE (630)) ;
      }else if (typeid (cPtr_newisequal_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (632)) COMMA_SOURCE_FILE_AT_LINE (632)),  GGS_string ("NEWISEQUAL") COMMA_SOURCE_FILE_AT_LINE (632)) ;
      }else if (typeid (cPtr_newisdifferent_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (634)) COMMA_SOURCE_FILE_AT_LINE (634)),  GGS_string ("NEWISDIFFERENT") COMMA_SOURCE_FILE_AT_LINE (634)) ;
      }else if (typeid (cPtr_maskednewequalsmaskedold_filter) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_maskednewequalsmaskedold_filter var_cas_maskedNewEqualsMaskedOldFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (636)) COMMA_SOURCE_FILE_AT_LINE (636)),  GGS_string ("MASKEDNEWEQUALSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (636)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewEqualsMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (637)) COMMA_SOURCE_FILE_AT_LINE (637)) ;
      }else if (typeid (cPtr_maskednewdiffersmaskedold_filter) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_maskednewdiffersmaskedold_filter var_cas_maskedNewDiffersMaskedOldFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (639)) COMMA_SOURCE_FILE_AT_LINE (639)),  GGS_string ("MASKEDNEWDIFFERSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (639)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MASK"),  var_cas_maskedNewDiffersMaskedOldFilter.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (640)) COMMA_SOURCE_FILE_AT_LINE (640)) ;
      }else if (typeid (cPtr_newiswithin) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_newiswithin var_cas_newIsWithinFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (642)) COMMA_SOURCE_FILE_AT_LINE (642)),  GGS_string ("NEWISWITHIN") COMMA_SOURCE_FILE_AT_LINE (642)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsWithinFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (643)) COMMA_SOURCE_FILE_AT_LINE (643)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsWithinFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (644)) COMMA_SOURCE_FILE_AT_LINE (644)) ;
      }else if (typeid (cPtr_newisoutside) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_newisoutside var_cas_newIsOutsideFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (646)) COMMA_SOURCE_FILE_AT_LINE (646)),  GGS_string ("NEWISOUTSIDE") COMMA_SOURCE_FILE_AT_LINE (646)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MIN"),  var_cas_newIsOutsideFilter.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (647)) COMMA_SOURCE_FILE_AT_LINE (647)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAX"),  var_cas_newIsOutsideFilter.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (648)) COMMA_SOURCE_FILE_AT_LINE (648)) ;
      }else if (typeid (cPtr_newisgreater_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (650)) COMMA_SOURCE_FILE_AT_LINE (650)),  GGS_string ("NEWISGREATER") COMMA_SOURCE_FILE_AT_LINE (650)) ;
      }else if (typeid (cPtr_newislessorequal_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (652)) COMMA_SOURCE_FILE_AT_LINE (652)),  GGS_string ("NEWISLESSOREQUAL") COMMA_SOURCE_FILE_AT_LINE (652)) ;
      }else if (typeid (cPtr_newisless_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (654)) COMMA_SOURCE_FILE_AT_LINE (654)),  GGS_string ("NEWISLESS") COMMA_SOURCE_FILE_AT_LINE (654)) ;
      }else if (typeid (cPtr_newisgreaterorequal_filter) == typeid (* (_var_25188.getPtr ()))) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (656)) COMMA_SOURCE_FILE_AT_LINE (656)),  GGS_string ("NEWISGREATEROREQUAL") COMMA_SOURCE_FILE_AT_LINE (656)) ;
      }else if (typeid (cPtr_oneeveryn_filter) == typeid (* (_var_25188.getPtr ()))) {
        const GGS_oneeveryn_filter var_cas_oneEveryNFilter (_var_25188.getPtr ()) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILTER"), var_cas_filter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (658)) COMMA_SOURCE_FILE_AT_LINE (658)),  GGS_string ("ONEEVERYN") COMMA_SOURCE_FILE_AT_LINE (658)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PERIOD"),  var_cas_oneEveryNFilter.reader_period (inLexique COMMA_SOURCE_FILE_AT_LINE (659)) COMMA_SOURCE_FILE_AT_LINE (659)) ;
        ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("OFFSET"),  var_cas_oneEveryNFilter.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (660)) COMMA_SOURCE_FILE_AT_LINE (660)) ;
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setFilter\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMessagesList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMessagesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMessagesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_receiverSortedList  var_cas_internalReceiversList = GGS_receiverSortedList ::constructor_emptySortedList () ;
  {
    GGS_message_map::cEnumerator enumerator_25572 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (673)), true) ;
    const GGS_message_map::cElement * operand_25572 = NULL ;
    while (((operand_25572 = enumerator_25572.nextObject ()))) {
      macroValidPointer (operand_25572) ;
      { const GGS_mess_prop_obj _var_26390 = operand_25572->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (674)) ; // CAST instruction
        if (_var_26390.getPtr () != NULL) {
          macroValidPointer (_var_26390.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_26390.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_26390.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_25572->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), operand_25572->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), operand_25572->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (677))) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_26390.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_26390.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (679)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_25572->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (680)), operand_25572->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680)), operand_25572->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (680))) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_26390.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_26390.getPtr ()) ;
            GGS_lstring  var_cas_sendMessage = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (682)) ;
            var_cas_internalReceiversList.addAssign_operation (operand_25572->mInfo.mess, var_cas_sendMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683)), var_cas_sendMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (683)), operand_25572->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683)), operand_25572->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (683))) ;
          }else{
          }
        }
      }
    }
  }
  GGS_lstringMap  var_cas_internalTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (696)) ;
  GGS_lstringMap  var_cas_nextTargets = GGS_lstringMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (697)) ;
  GGS_receiverReverseSortedList  var_cas_actualInternalReceiverList = GGS_receiverReverseSortedList ::constructor_emptySortedList () ;
  GGS_string var_cas_previousReceiver = GGS_string ("") ;
  GGS_string var_cas_previousSender = GGS_string ("") ;
  {
    GGS_receiverSortedList::cEnumerator enumerator_27139 (var_cas_internalReceiversList, true) ;
    const GGS_receiverSortedList::cElement * operand_27139 = NULL ;
    while (((operand_27139 = enumerator_27139.nextObject ()))) {
      macroValidPointer (operand_27139) ;
      const GGS_bool cond_27308 = (var_cas_internalTargets.reader_hasKey (operand_27139->senderName)).operator_not () ;
      if (cond_27308.isBuiltAndTrue ()) {
        var_cas_internalTargets.modifier_put (inLexique, function_lstringWith (inLexique, operand_27139->senderName COMMA_SOURCE_FILE_AT_LINE (703)), GGS_lstring ::constructor_new (inLexique, operand_27139->receiverName, operand_27139->receiverLocation COMMA_SOURCE_FILE_AT_LINE (703)) COMMA_SOURCE_FILE_AT_LINE (703)) ;
      }
      const GGS_bool cond_27468 = (operand_27139->senderName).operator_isEqual (var_cas_previousSender) ;
      if (cond_27468.isBuiltAndTrue ()) {
        var_cas_nextTargets.modifier_put (inLexique, function_lstringWith (inLexique, var_cas_previousReceiver COMMA_SOURCE_FILE_AT_LINE (706)), GGS_lstring ::constructor_new (inLexique, operand_27139->receiverName, operand_27139->receiverLocation COMMA_SOURCE_FILE_AT_LINE (706)) COMMA_SOURCE_FILE_AT_LINE (706)) ;
      }
      var_cas_previousSender = operand_27139->senderName ;
      var_cas_previousReceiver = operand_27139->receiverName ;
      var_cas_actualInternalReceiverList.addAssign_operation (operand_27139->mess, operand_27139->senderName, operand_27139->senderLocation, operand_27139->receiverName, operand_27139->receiverLocation) ;
    }
  }
  GGS_goilTemplateFieldMapList  var_cas_messagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_sendMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_goilTemplateFieldMapList  var_cas_receiveMessagesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_receiverReverseSortedList::cEnumerator enumerator_27962 (var_cas_actualInternalReceiverList, true) ;
    const GGS_receiverReverseSortedList::cElement * operand_27962 = NULL ;
    while (((operand_27962 = enumerator_27962.nextObject ()))) {
      macroValidPointer (operand_27962) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (721)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_27962->receiverLocation COMMA_SOURCE_FILE_AT_LINE (722)),  operand_27962->receiverName COMMA_SOURCE_FILE_AT_LINE (722)) ;
      const GGS_bool cond_28435 = var_cas_nextTargets.reader_hasKey (operand_27962->receiverName) ;
      if (cond_28435.isBuiltAndTrue ()) {
        GGS_lstring  var_cas_nextReceiveMessage ;
        if (var_cas_nextTargets.isBuilt ()) {
          var_cas_nextTargets (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_27962->receiverName, operand_27962->receiverLocation COMMA_SOURCE_FILE_AT_LINE (726)), var_cas_nextReceiveMessage COMMA_SOURCE_FILE_AT_LINE (726)) ;
        }
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NEXT"), var_cas_nextReceiveMessage.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (727)) COMMA_SOURCE_FILE_AT_LINE (727)),  var_cas_nextReceiveMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (727)) COMMA_SOURCE_FILE_AT_LINE (727)) ;
      }
      GGS_mess_prop_obj  var_cas_messageProperty = operand_27962->mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (729)) ;
      { const GGS_mess_prop_obj _var_30996 = var_cas_messageProperty ; // CAST instruction
        if (_var_30996.getPtr () != NULL) {
          macroValidPointer (_var_30996.getPtr ()) ;
          if (typeid (cPtr_rzi_mess_prop) == typeid (* (_var_30996.getPtr ()))) {
            const GGS_rzi_mess_prop var_cas_receiveZeroInternalMessage (_var_30996.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (732)) COMMA_SOURCE_FILE_AT_LINE (732)),  GGS_string ("RECEIVE_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (732)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_receiveZeroInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (733)) COMMA_SOURCE_FILE_AT_LINE (733)) ;
          }else if (typeid (cPtr_rui_mess_prop) == typeid (* (_var_30996.getPtr ()))) {
            const GGS_rui_mess_prop var_cas_receiveUnqueuedInternalMessage (_var_30996.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveUnqueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (735)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (736)) COMMA_SOURCE_FILE_AT_LINE (736)),  GGS_string ("RECEIVE_UNQUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (736)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (737)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_29187 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (739)) ;
            if (temp_29187.isBuilt ()) {
              temp_29187 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (739)) ;
            }
            { const GGS_mess_prop_obj _var_29944 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (740)) ; // CAST instruction
              if (_var_29944.getPtr () != NULL) {
                macroValidPointer (_var_29944.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_29944.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_29944.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (742)) COMMA_SOURCE_FILE_AT_LINE (742)) ;
                  GGS_basic_type  var_cas_initialValue = var_cas_receiveUnqueuedInternalMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (743)) ;
                  GGS_string var_cas_initialValueString ;
                  if (var_cas_initialValue.isBuilt ()) {
                    var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (745)) ;
                  }
                  const GGS_bool cond_29733 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
                  if (cond_29733.isBuiltAndTrue ()) {
                    ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) COMMA_SOURCE_FILE_AT_LINE (747)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (747)) ;
                  }
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (750)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (751)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (752)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveUnqueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (753)) COMMA_SOURCE_FILE_AT_LINE (753)) ;
          }else if (typeid (cPtr_rqi_mess_prop) == typeid (* (_var_30996.getPtr ()))) {
            const GGS_rqi_mess_prop var_cas_receiveQueuedInternalMessage (_var_30996.getPtr ()) ;
            GGS_lstring  var_cas_senderName = var_cas_receiveQueuedInternalMessage.reader_sendingmessage (inLexique COMMA_SOURCE_FILE_AT_LINE (755)) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (756)) COMMA_SOURCE_FILE_AT_LINE (756)),  GGS_string ("RECEIVE_QUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (756)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SOURCE"),  var_cas_senderName COMMA_SOURCE_FILE_AT_LINE (757)) ;
            ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("QUEUESIZE"),  var_cas_receiveQueuedInternalMessage.reader_queuesize (inLexique COMMA_SOURCE_FILE_AT_LINE (758)) COMMA_SOURCE_FILE_AT_LINE (758)) ;
            GGS_message_obj  var_cas_sender ;
            const GGS_message_map  temp_30492 = var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (760)) ;
            if (temp_30492.isBuilt ()) {
              temp_30492 (HERE)->method_get (inLexique, var_cas_senderName, var_cas_sender COMMA_SOURCE_FILE_AT_LINE (760)) ;
            }
            { const GGS_mess_prop_obj _var_30903 = var_cas_sender.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (761)) ; // CAST instruction
              if (_var_30903.getPtr () != NULL) {
                macroValidPointer (_var_30903.getPtr ()) ;
                if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_30903.getPtr ()))) {
                  const GGS_ssi_mess_prop var_cas_sendStaticInternalSender (_var_30903.getPtr ()) ;
                  ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalSender.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (763)) COMMA_SOURCE_FILE_AT_LINE (763)) ;
                }else{
                  var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (765)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender has an incompatible property") COMMA_SOURCE_FILE_AT_LINE (766)) ;
                  var_cas_senderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("MESSAGEPROPERTY of sender should be SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (767)) ;
                }
              }
            }
            ::routine_setFilter (inLexique,  var_cas_fieldMap,  var_cas_receiveQueuedInternalMessage.reader_filter (inLexique COMMA_SOURCE_FILE_AT_LINE (769)) COMMA_SOURCE_FILE_AT_LINE (769)) ;
          }else{
          }
        }
      }
      ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_27962->mess.reader_notification (inLexique COMMA_SOURCE_FILE_AT_LINE (772)) COMMA_SOURCE_FILE_AT_LINE (772)) ;
      var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
      var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  {
    GGS_message_map::cEnumerator enumerator_31153 (var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (777)), true) ;
    const GGS_message_map::cElement * operand_31153 = NULL ;
    while (((operand_31153 = enumerator_31153.nextObject ()))) {
      macroValidPointer (operand_31153) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (778)) ;
      GGS_mess_prop_obj  var_cas_messageProperty = operand_31153->mInfo.mess.reader_messageproperty (inLexique COMMA_SOURCE_FILE_AT_LINE (779)) ;
      GGS_bool var_cas_okMessage = GGS_bool (true) ;
      GGS_bool var_cas_isSendMessage = GGS_bool (true) ;
      { const GGS_mess_prop_obj _var_34328 = var_cas_messageProperty ; // CAST instruction
        if (_var_34328.getPtr () != NULL) {
          macroValidPointer (_var_34328.getPtr ()) ;
          if (typeid (cPtr_ssi_mess_prop) == typeid (* (_var_34328.getPtr ()))) {
            const GGS_ssi_mess_prop var_cas_sendStaticInternalMessage (_var_34328.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (784)) COMMA_SOURCE_FILE_AT_LINE (784)),  GGS_string ("SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (784)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_sendStaticInternalMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (785)) COMMA_SOURCE_FILE_AT_LINE (785)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_31153->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (787)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (788)) ;
          }else if (typeid (cPtr_szi_mess_prop) == typeid (* (_var_34328.getPtr ()))) {
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (790)) COMMA_SOURCE_FILE_AT_LINE (790)),  GGS_string ("SEND_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (790)) ;
            GGS_lstring  var_cas_targetMessage ;
            if (var_cas_internalTargets.isBuilt ()) {
              var_cas_internalTargets (HERE)->method_get (inLexique, operand_31153->mKey, var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (792)) ;
            }
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("TARGET"),  var_cas_targetMessage COMMA_SOURCE_FILE_AT_LINE (793)) ;
          }else if (typeid (cPtr_rzs_mess_prop) == typeid (* (_var_34328.getPtr ()))) {
            const GGS_rzs_mess_prop var_cas_receiveZeroSendersMessage (_var_34328.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("MESSAGEPROPERTY"), var_cas_messageProperty.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (816)) COMMA_SOURCE_FILE_AT_LINE (816)),  GGS_string ("RECEIVE_ZERO_SENDERS") COMMA_SOURCE_FILE_AT_LINE (816)) ;
            ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("CTYPE"),  var_cas_receiveZeroSendersMessage.reader_cdatatype (inLexique COMMA_SOURCE_FILE_AT_LINE (817)) COMMA_SOURCE_FILE_AT_LINE (817)) ;
            GGS_basic_type  var_cas_initialValue = var_cas_receiveZeroSendersMessage.reader_initialvalue (inLexique COMMA_SOURCE_FILE_AT_LINE (818)) ;
            GGS_string var_cas_initialValueString ;
            if (var_cas_initialValue.isBuilt ()) {
              var_cas_initialValue (HERE)->method_string (inLexique, var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (820)) ;
            }
            const GGS_bool cond_34251 = (var_cas_initialValueString).operator_isNotEqual (GGS_string ("")) ;
            if (cond_34251.isBuiltAndTrue ()) {
              ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INITIALVALUE"), var_cas_initialValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (822)) COMMA_SOURCE_FILE_AT_LINE (822)),  var_cas_initialValueString COMMA_SOURCE_FILE_AT_LINE (822)) ;
            }
            var_cas_isSendMessage = GGS_bool (false) ;
          }else{
            var_cas_okMessage = GGS_bool (false) ;
          }
        }
      }
      const GGS_bool cond_34606 = var_cas_okMessage ;
      if (cond_34606.isBuiltAndTrue ()) {
        ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (829)),  operand_31153->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (829)) COMMA_SOURCE_FILE_AT_LINE (829)) ;
        var_cas_messagesList.addAssign_operation (var_cas_fieldMap) ;
        const GGS_bool cond_34542 = var_cas_isSendMessage ;
        if (cond_34542.isBuiltAndTrue ()) {
          var_cas_sendMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }else if (cond_34542.isBuiltAndFalse ()) {
          var_cas_receiveMessagesList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (838)),  var_cas_messagesList COMMA_SOURCE_FILE_AT_LINE (838)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SENDMESSAGES") COMMA_SOURCE_FILE_AT_LINE (839)),  var_cas_sendMessagesList COMMA_SOURCE_FILE_AT_LINE (839)) ;
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("RECEIVEMESSAGES") COMMA_SOURCE_FILE_AT_LINE (840)),  var_cas_receiveMessagesList COMMA_SOURCE_FILE_AT_LINE (840)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMessagesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setScheduletablesList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScheduletablesList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   var_cas_appForObj,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScheduletablesList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_scheduletablesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_scheduletable_map::cEnumerator enumerator_35065 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (852)), true) ;
    const GGS_scheduletable_map::cElement * operand_35065 = NULL ;
    while (((operand_35065 = enumerator_35065.nextObject ()))) {
      macroValidPointer (operand_35065) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (853)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (854)),  operand_35065->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (854)) COMMA_SOURCE_FILE_AT_LINE (854)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTER") COMMA_SOURCE_FILE_AT_LINE (855)),  operand_35065->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (855)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (855)) COMMA_SOURCE_FILE_AT_LINE (855)) ;
      GGS_bool var_cas_periodic = GGS_bool (false) ;
      { const GGS_basic_type _var_35436 = operand_35065->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (858)) ; // CAST instruction
        if (_var_35436.getPtr () != NULL) {
          macroValidPointer (_var_35436.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_35436.getPtr ()))) {
            const GGS_bool_class var_cas_p (_var_35436.getPtr ()) ;
            var_cas_periodic = var_cas_p.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (859)) ;
          }else{
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PERIODIC") COMMA_SOURCE_FILE_AT_LINE (861)),  var_cas_periodic COMMA_SOURCE_FILE_AT_LINE (861)) ;
      GGS_lstring  var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDTABLE_NO_SYNC"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (863)) ;
      GGS_luint64  var_cas_precision = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (864)) ;
      { const GGS_ltgt_sync_obj _var_35974 = operand_35065->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (865)) ; // CAST instruction
        if (_var_35974.getPtr () != NULL) {
          macroValidPointer (_var_35974.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_35974.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_syncStrategyTrue (_var_35974.getPtr ()) ;
            GGS_lstring  var_cas_strategy = var_cas_syncStrategyTrue.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (867)) ;
            var_cas_syncStrategy = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("SCHEDTABLE_")).operator_concat (var_cas_strategy.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (868)))).operator_concat (GGS_string ("_SYNC")), var_cas_strategy.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (868)) COMMA_SOURCE_FILE_AT_LINE (868)) ;
            var_cas_precision = function_luint64OrError (inLexique, var_cas_syncStrategyTrue.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (869)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (869)) ;
          }else{
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("SYNCSTRATEGY"),  var_cas_syncStrategy COMMA_SOURCE_FILE_AT_LINE (871)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("PRECISION"),  var_cas_precision COMMA_SOURCE_FILE_AT_LINE (872)) ;
      GGS_lstring  var_cas_scheduletableState = function_lstringWith (inLexique, GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (874)) ;
      GGS_luint64  var_cas_scheduletableDate = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (875)) ;
      { const GGS_autostart_obj _var_37140 = operand_35065->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (876)) ; // CAST instruction
        if (_var_37140.getPtr () != NULL) {
          macroValidPointer (_var_37140.getPtr ()) ;
          if (typeid (cPtr_sd_autostart_false) == typeid (* (_var_37140.getPtr ()))) {
            const GGS_sd_autostart_false var_cas_autostartFalse (_var_37140.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_STOPPED"), var_cas_autostartFalse.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (878)) COMMA_SOURCE_FILE_AT_LINE (878)) ;
          }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_37140.getPtr ()))) {
            const GGS_sd_autostart_synchron var_cas_autostartSynchron (_var_37140.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_SYNCHRON"), var_cas_autostartSynchron.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (880)) COMMA_SOURCE_FILE_AT_LINE (880)) ;
          }else if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_37140.getPtr ()))) {
            const GGS_sd_autostart_relative var_cas_autostartRelative (_var_37140.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_RELATIVE"), var_cas_autostartRelative.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (882)) COMMA_SOURCE_FILE_AT_LINE (882)) ;
            var_cas_scheduletableDate = var_cas_autostartRelative.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (883)) ;
          }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_37140.getPtr ()))) {
            const GGS_sd_autostart_absolute var_cas_autostartAbsolute (_var_37140.getPtr ()) ;
            var_cas_scheduletableState = GGS_lstring ::constructor_new (inLexique, GGS_string ("SCHEDULETABLE_AUTOSTART_ABSOLUTE"), var_cas_autostartAbsolute.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (885)) COMMA_SOURCE_FILE_AT_LINE (885)) ;
            var_cas_scheduletableDate = var_cas_autostartAbsolute.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (886)) ;
          }else{
            operand_35065->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, unexpected type for AUTOSTART attribute of schedule table ")).operator_concat (operand_35065->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (887))) COMMA_SOURCE_FILE_AT_LINE (888)) ;
          }
        }
      }
      ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("STATE"),  var_cas_scheduletableState COMMA_SOURCE_FILE_AT_LINE (889)) ;
      ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("DATE"),  var_cas_scheduletableDate COMMA_SOURCE_FILE_AT_LINE (890)) ;
      GGS_uint64  var_cas_length = GGS_uint64 (0ULL) ;
      { const GGS_basic_type _var_37564 = operand_35065->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (893)) ; // CAST instruction
        if (_var_37564.getPtr () != NULL) {
          macroValidPointer (_var_37564.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_37564.getPtr ()))) {
            const GGS_uint64_class var_cas_len (_var_37564.getPtr ()) ;
            var_cas_length = var_cas_len.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (895)) ;
            ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LENGTH"), var_cas_len.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (896)) COMMA_SOURCE_FILE_AT_LINE (896)),  var_cas_length COMMA_SOURCE_FILE_AT_LINE (896)) ;
          }else{
            operand_35065->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal, wrong type for LENGTH attribute") COMMA_SOURCE_FILE_AT_LINE (898)) ;
          }
        }
      }
      GGS_expiry_point_list  var_cas_expiryPoints = operand_35065->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (902)) ;
      GGS_expiry_point_obj  var_cas_lastPoint ;
      GGS_uint64  var_cas_lastOffset ;
      var_cas_expiryPoints.modifier_popGreatest (inLexique, var_cas_lastOffset, var_cas_lastPoint COMMA_SOURCE_FILE_AT_LINE (905)) ;
      const GGS_bool cond_38092 = (var_cas_lastOffset).operator_isEqual (var_cas_length) ;
      if (cond_38092.isBuiltAndTrue ()) {
        GGS_action_list  var_cas_actions = var_cas_lastPoint.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (908)) ;
        var_cas_actions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_35065->mKey COMMA_SOURCE_FILE_AT_LINE (909))) ;
        var_cas_lastPoint.modifier_setActions (inLexique, var_cas_actions COMMA_SOURCE_FILE_AT_LINE (910)) ;
      }else if (cond_38092.isBuiltAndFalse ()) {
        GGS_action_list  var_cas_finalizeExpiryPointActions = GGS_action_list ::constructor_emptySortedList () ;
        var_cas_finalizeExpiryPointActions.addAssign_operation (GGS_uint (10U), GGS_finalize_st_action ::constructor_new (inLexique, GGS_location (inLexique), operand_35065->mKey COMMA_SOURCE_FILE_AT_LINE (914))) ;
        GGS_expiry_point_obj  var_cas_finalizeExpiryPoint = GGS_expiry_point_obj ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (917)), GGS_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_length COMMA_SOURCE_FILE_AT_LINE (918)), GGS_lstring ::constructor_new (inLexique, GGS_string ("finalize"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (919)), GGS_adjustable_void ::constructor_new (inLexique, function_empty_lstring (inLexique COMMA_SOURCE_FILE_AT_LINE (920)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (920)), var_cas_finalizeExpiryPointActions COMMA_SOURCE_FILE_AT_LINE (916)) ;
        var_cas_expiryPoints.addAssign_operation (var_cas_length, var_cas_finalizeExpiryPoint) ;
      }
      var_cas_expiryPoints.addAssign_operation (var_cas_lastOffset, var_cas_lastPoint) ;
      GGS_goilTemplateFieldMapList  var_cas_expiryPointsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_uint64  var_cas_previousOffset = GGS_uint64 (0ULL) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_38870 (var_cas_expiryPoints, true) ;
        const GGS_expiry_point_list::cElement * operand_38870 = NULL ;
        while (((operand_38870 = enumerator_38870.nextObject ()))) {
          macroValidPointer (operand_38870) ;
          GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (931)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ABSOLUTEOFFSET") COMMA_SOURCE_FILE_AT_LINE (932)),  operand_38870->off COMMA_SOURCE_FILE_AT_LINE (932)) ;
          ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RELATIVEOFFSET") COMMA_SOURCE_FILE_AT_LINE (933)),  operand_38870->off.substract_operation (inLexique, var_cas_previousOffset COMMA_SOURCE_FILE_AT_LINE (933)) COMMA_SOURCE_FILE_AT_LINE (933)) ;
          var_cas_previousOffset = operand_38870->off ;
          GGS_goilTemplateFieldMapList  var_cas_actionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_action_list::cEnumerator enumerator_39305 (operand_38870->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (938)), true) ;
            const GGS_action_list::cElement * operand_39305 = NULL ;
            while (((operand_39305 = enumerator_39305.nextObject ()))) {
              macroValidPointer (operand_39305) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (939)) ;
              ::routine_setAction (inLexique,  var_cas_fieldMap,  operand_39305->actionobj COMMA_SOURCE_FILE_AT_LINE (940)) ;
              var_cas_actionsList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ACTIONS") COMMA_SOURCE_FILE_AT_LINE (943)),  var_cas_actionsList COMMA_SOURCE_FILE_AT_LINE (943)) ;
          GGS_luint64  var_cas_maxAdvance = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (945)) ;
          GGS_luint64  var_cas_maxRetard = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (946)) ;
          { const GGS_adjustable_obj _var_39934 = operand_38870->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (947)) ; // CAST instruction
            if (_var_39934.getPtr () != NULL) {
              macroValidPointer (_var_39934.getPtr ()) ;
              if (typeid (cPtr_adjustable_true) == typeid (* (_var_39934.getPtr ()))) {
                const GGS_adjustable_true var_cas_adjustableExpiryPoint (_var_39934.getPtr ()) ;
                var_cas_maxAdvance = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (949)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (949)) ;
                var_cas_maxRetard = function_luint64OrError (inLexique, var_cas_adjustableExpiryPoint.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (950)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (950)) ;
              }else{
              }
            }
          }
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXRETARD"),  var_cas_maxRetard COMMA_SOURCE_FILE_AT_LINE (952)) ;
          ::routine_addLUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("MAXADVANCE"),  var_cas_maxAdvance COMMA_SOURCE_FILE_AT_LINE (953)) ;
          var_cas_expiryPointsList.addAssign_operation (var_cas_fieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("EXPIRYPOINTS") COMMA_SOURCE_FILE_AT_LINE (957)),  var_cas_expiryPointsList COMMA_SOURCE_FILE_AT_LINE (957)) ;
      ::routine_setAppRelatedAttributes (inLexique,  var_cas_fieldMap,  var_cas_cpu,  var_cas_appForObj,  operand_35065->mKey COMMA_SOURCE_FILE_AT_LINE (959)) ;
      var_cas_scheduletablesList.addAssign_operation (var_cas_fieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (963)),  var_cas_scheduletablesList COMMA_SOURCE_FILE_AT_LINE (963)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScheduletablesList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "computeBinaryVector"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeBinaryVector (C_Compiler & inLexique,
                                const GGS_string  var_cas_vec,
                                GGS_string & var_cas_res,
                                GGS_uint  & var_cas_byteCount
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeBinaryVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_byteCount = var_cas_vec.reader_length ().divide_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (979)) ;
  const GGS_bool cond_40775 = (var_cas_vec.reader_length ().modulo_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (980))).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_40775.isBuiltAndTrue ()) {
    var_cas_byteCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (980)) ;
  }
  GGS_stringlist  var_cas_data = GGS_stringlist ::constructor_emptyList () ;
  GGS_uint  var_cas_i = GGS_uint (0U) ;
  GGS_uint  var_cas_start = GGS_uint (0U) ;
  GGS_uint _variant_41326 = var_cas_byteCount ;
  GGS_bool _condition_41326 (_variant_41326.isBuilt (), true) ;
  while (_condition_41326.isBuiltAndTrue ()) {
    _condition_41326 = (var_cas_i).operator_strictInf (var_cas_byteCount) ;
    if (_condition_41326.isBuiltAndTrue ()) {
      if (_variant_41326.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1005)) ;
        _condition_41326 = GGS_bool (false) ;
      }else{
        _variant_41326.decrement_operation (inLexique COMMA_HERE) ;
        GGS_string var_cas_byte = var_cas_vec.reader_subString (var_cas_start, GGS_uint (8U)).reader_reversedString () ;
        GGS_uint  var_cas_bitPos = GGS_uint (0U) ;
        GGS_uint  var_cas_val = GGS_uint (0U) ;
        GGS_uint _variant_41250 = GGS_uint (8U) ;
        GGS_bool _condition_41250 (_variant_41250.isBuilt (), true) ;
        while (_condition_41250.isBuiltAndTrue ()) {
          _condition_41250 = (var_cas_bitPos).operator_strictInf (var_cas_byte.reader_length ()) ;
          if (_condition_41250.isBuiltAndTrue ()) {
            if (_variant_41250.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1001)) ;
              _condition_41250 = GGS_bool (false) ;
            }else{
              _variant_41250.decrement_operation (inLexique COMMA_HERE) ;
              GGS_char var_cas_bit = var_cas_byte.reader_characterAtIndex (inLexique, var_cas_bitPos COMMA_SOURCE_FILE_AT_LINE (995)) ;
              var_cas_val = var_cas_val.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (996)) ;
              const GGS_bool cond_41220 = (var_cas_bit).operator_isEqual (GGS_char (TO_UNICODE ('1'))) ;
              if (cond_41220.isBuiltAndTrue ()) {
                var_cas_val.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (998)) ;
              }
              var_cas_bitPos.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1000)) ;
            }
          }
        }
        var_cas_data.addAssign_operation (var_cas_val.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1002))) ;
        var_cas_i.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)) ;
        var_cas_start = var_cas_start.add_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (1004)) ;
      }
    }
  }
  var_cas_res = GGS_string::constructor_componentsJoinedByString (inLexique, var_cas_data, GGS_string (", ") COMMA_SOURCE_FILE_AT_LINE (1006)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeBinaryVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeVector"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeVector (C_Compiler & inLexique,
                                GGS_string & var_cas_vector,
                                const GGS_lstring   var_cas_objectName,
                                const GGS_lstring   var_cas_applicationName,
                                const GGS_lstringlist   var_cas_ownedObjects,
                                const GGS_lstringlist   var_cas_accessingObjects
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeVector at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_41646 = function_isInLstringlist (inLexique, var_cas_ownedObjects, var_cas_objectName COMMA_SOURCE_FILE_AT_LINE (1016)) ;
  if (cond_41646.isBuiltAndTrue ()) {
    var_cas_vector.appendCString ("11") ;
  }else if (cond_41646.isBuiltAndFalse ()) {
    var_cas_vector.appendCString ("0") ;
    const GGS_bool cond_41798 = function_isInLstringlist (inLexique, var_cas_accessingObjects, var_cas_applicationName COMMA_SOURCE_FILE_AT_LINE (1021)) ;
    if (cond_41798.isBuiltAndTrue ()) {
      var_cas_vector.appendCString ("1") ;
    }else if (cond_41798.isBuiltAndFalse ()) {
      var_cas_vector.appendCString ("0") ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeVector\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "setOsapplicationsList"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsapplicationsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_stringMap   /* var_cas_appForObj */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsapplicationsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_osapplicationsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  GGS_stringset  var_cas_trustedFunctionSet = GGS_stringset ::constructor_emptySet () ;
  GGS_tasks_by_type  var_cas_allTaskList = function_orderedTaskList (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1037)) ;
  {
    GGS_app_map::cEnumerator enumerator_42144 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1038)), true) ;
    const GGS_app_map::cElement * operand_42144 = NULL ;
    while (((operand_42144 = enumerator_42144.nextObject ()))) {
      macroValidPointer (operand_42144) ;
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1040)),  operand_42144->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1040)) COMMA_SOURCE_FILE_AT_LINE (1040)) ;
      { const GGS_basic_type _var_42565 = operand_42144->mInfo.app.reader_restart (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)) ; // CAST instruction
        if (_var_42565.getPtr () != NULL) {
          macroValidPointer (_var_42565.getPtr ()) ;
          if (typeid (cPtr_string_class) == typeid (* (_var_42565.getPtr ()))) {
            const GGS_string_class var_cas_restartTask (_var_42565.getPtr ()) ;
            ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESTART"), var_cas_restartTask.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)) COMMA_SOURCE_FILE_AT_LINE (1045)),  var_cas_restartTask.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1045)) COMMA_SOURCE_FILE_AT_LINE (1045)) ;
          }else{
          }
        }
      }
      GGS_bool var_cas_hasStartup ;
      { const GGS_basic_type _var_42773 = operand_42144->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1049)) ; // CAST instruction
        if (_var_42773.getPtr () != NULL) {
          macroValidPointer (_var_42773.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_42773.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_42773.getPtr ()) ;
            var_cas_hasStartup = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) ;
          }else{
            var_cas_hasStartup = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSTARTUPHOOK"), operand_42144->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)) COMMA_SOURCE_FILE_AT_LINE (1055)),  var_cas_hasStartup COMMA_SOURCE_FILE_AT_LINE (1055)) ;
      GGS_bool var_cas_hasShutdown ;
      { const GGS_basic_type _var_43109 = operand_42144->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1058)) ; // CAST instruction
        if (_var_43109.getPtr () != NULL) {
          macroValidPointer (_var_43109.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_43109.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_43109.getPtr ()) ;
            var_cas_hasShutdown = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)) ;
          }else{
            var_cas_hasShutdown = GGS_bool (false) ;
          }
        }
      }
      ::routine_addBoolFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("HASSHUTDOWNHOOK"), operand_42144->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)) COMMA_SOURCE_FILE_AT_LINE (1064)),  var_cas_hasShutdown COMMA_SOURCE_FILE_AT_LINE (1064)) ;
      GGS_string var_cas_vector = GGS_string ("") ;
      GGS_string var_cas_binaryVector ;
      GGS_uint  var_cas_numberOfItems ;
      GGS_task_map  var_cas_allTasks = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1073)) ;
      {
        GGS_tasks_by_type::cEnumerator enumerator_43471 (var_cas_allTaskList, true) ;
        const GGS_tasks_by_type::cElement * operand_43471 = NULL ;
        while (((operand_43471 = enumerator_43471.nextObject ()))) {
          macroValidPointer (operand_43471) ;
          GGS_task_obj  var_cas_taskItem ;
          if (var_cas_allTasks.isBuilt ()) {
            var_cas_allTasks (HERE)->method_get (inLexique, function_lstringWith (inLexique, operand_43471->name COMMA_SOURCE_FILE_AT_LINE (1076)), var_cas_taskItem COMMA_SOURCE_FILE_AT_LINE (1076)) ;
          }
          ::routine_computeVector (inLexique,  var_cas_vector,  function_lstringWith (inLexique, operand_43471->name COMMA_SOURCE_FILE_AT_LINE (1077)),  operand_42144->mKey,  operand_42144->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1077)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1077)),  var_cas_taskItem.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1077)) COMMA_SOURCE_FILE_AT_LINE (1077)) ;
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_43746 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1080)), true) ;
        const GGS_isr_map::cElement * operand_43746 = NULL ;
        while (((operand_43746 = enumerator_43746.nextObject ()))) {
          macroValidPointer (operand_43746) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_43746->mKey,  operand_42144->mKey,  operand_42144->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1081)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1081)),  operand_43746->mInfo.isr.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1081)) COMMA_SOURCE_FILE_AT_LINE (1081)) ;
        }
      }
      var_cas_vector.appendCString ("01") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1085)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1085)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1086)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1087)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1087)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1088)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1088)) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_alarm_map::cEnumerator enumerator_44386 (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)), true) ;
        const GGS_alarm_map::cElement * operand_44386 = NULL ;
        while (((operand_44386 = enumerator_44386.nextObject ()))) {
          macroValidPointer (operand_44386) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_44386->mKey,  operand_42144->mKey,  operand_42144->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1093)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1093)),  operand_44386->mInfo.alarm.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1093)) COMMA_SOURCE_FILE_AT_LINE (1093)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1095)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1095)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1096)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1097)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1098)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1098)) COMMA_SOURCE_FILE_AT_LINE (1098)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_resource_map::cEnumerator enumerator_44921 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1102)), true) ;
        const GGS_resource_map::cElement * operand_44921 = NULL ;
        while (((operand_44921 = enumerator_44921.nextObject ()))) {
          macroValidPointer (operand_44921) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_44921->mKey,  operand_42144->mKey,  operand_42144->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)),  operand_44921->mInfo.resource.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) COMMA_SOURCE_FILE_AT_LINE (1103)) ;
        }
      }
      var_cas_vector.appendCString ("10") ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1108)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1110)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1110)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1111)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)) COMMA_SOURCE_FILE_AT_LINE (1111)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_scheduletable_map::cEnumerator enumerator_45585 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1115)), true) ;
        const GGS_scheduletable_map::cElement * operand_45585 = NULL ;
        while (((operand_45585 = enumerator_45585.nextObject ()))) {
          macroValidPointer (operand_45585) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_45585->mKey,  operand_42144->mKey,  operand_42144->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)),  operand_45585->mInfo.scheduletable.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1116)) COMMA_SOURCE_FILE_AT_LINE (1116)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1118)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1118)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1119)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1120)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1120)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLEACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1121)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1121)) COMMA_SOURCE_FILE_AT_LINE (1121)) ;
      var_cas_vector = GGS_string ("") ;
      {
        GGS_counter_map::cEnumerator enumerator_46171 (var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)), true) ;
        const GGS_counter_map::cElement * operand_46171 = NULL ;
        while (((operand_46171 = enumerator_46171.nextObject ()))) {
          macroValidPointer (operand_46171) ;
          ::routine_computeVector (inLexique,  var_cas_vector,  operand_46171->mKey,  operand_42144->mKey,  operand_42144->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)).reader_allKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)),  operand_46171->mInfo.counter.reader_acc_apps (inLexique COMMA_SOURCE_FILE_AT_LINE (1126)) COMMA_SOURCE_FILE_AT_LINE (1126)) ;
        }
      }
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSVECTOR") COMMA_SOURCE_FILE_AT_LINE (1128)),  var_cas_vector COMMA_SOURCE_FILE_AT_LINE (1128)) ;
      ::routine_computeBinaryVector (inLexique,  var_cas_vector,  var_cas_binaryVector,  var_cas_numberOfItems COMMA_SOURCE_FILE_AT_LINE (1129)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSITEMS") COMMA_SOURCE_FILE_AT_LINE (1130)),  var_cas_binaryVector COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERACCESSNUM") COMMA_SOURCE_FILE_AT_LINE (1131)),  var_cas_numberOfItems.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) COMMA_SOURCE_FILE_AT_LINE (1131)) ;
      GGS_goilTemplateFieldMapList  var_cas_procList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_taskList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_isrList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_46847 (operand_42144->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)), true) ;
        const GGS_ident_map::cElement * operand_46847 = NULL ;
        while (((operand_46847 = enumerator_46847.nextObject ()))) {
          macroValidPointer (operand_46847) ;
          GGS_goilTemplateFieldMap  var_cas_taskFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1138)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_taskFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_46847->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) COMMA_SOURCE_FILE_AT_LINE (1139)),  operand_46847->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)) COMMA_SOURCE_FILE_AT_LINE (1139)) ;
          var_cas_procList.addAssign_operation (var_cas_taskFieldMap) ;
          var_cas_taskList.addAssign_operation (var_cas_taskFieldMap) ;
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_47116 (operand_42144->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1143)), true) ;
        const GGS_ident_map::cElement * operand_47116 = NULL ;
        while (((operand_47116 = enumerator_47116.nextObject ()))) {
          macroValidPointer (operand_47116) ;
          GGS_goilTemplateFieldMap  var_cas_isrFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1144)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_isrFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_47116->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) COMMA_SOURCE_FILE_AT_LINE (1145)),  operand_47116->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1145)) COMMA_SOURCE_FILE_AT_LINE (1145)) ;
          GGS_isr_obj  var_cas_isr ;
          const GGS_isr_map  temp_47327 = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1147)) ;
          if (temp_47327.isBuilt ()) {
            temp_47327 (HERE)->method_get (inLexique, operand_47116->mKey, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (1147)) ;
          }
          { const GGS_basic_type _var_47581 = var_cas_isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1148)) ; // CAST instruction
            if (_var_47581.getPtr () != NULL) {
              macroValidPointer (_var_47581.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_47581.getPtr ()))) {
                const GGS_uint64_class var_cas_cat (_var_47581.getPtr ()) ;
                const GGS_bool cond_47562 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1150))).operator_isEqual (GGS_uint64 (2ULL)) ;
                if (cond_47562.isBuiltAndTrue ()) {
                  var_cas_procList.addAssign_operation (var_cas_isrFieldMap) ;
                }
              }else{
              }
            }
          }
          var_cas_isrList.addAssign_operation (var_cas_isrFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("PROCESSES") COMMA_SOURCE_FILE_AT_LINE (1158)),  var_cas_procList COMMA_SOURCE_FILE_AT_LINE (1158)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("TASKS") COMMA_SOURCE_FILE_AT_LINE (1159)),  var_cas_taskList COMMA_SOURCE_FILE_AT_LINE (1159)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ISRS") COMMA_SOURCE_FILE_AT_LINE (1160)),  var_cas_isrList COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      GGS_goilTemplateFieldMapList  var_cas_alarmList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_47940 (operand_42144->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)), true) ;
        const GGS_ident_map::cElement * operand_47940 = NULL ;
        while (((operand_47940 = enumerator_47940.nextObject ()))) {
          macroValidPointer (operand_47940) ;
          GGS_goilTemplateFieldMap  var_cas_alarmFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_alarmFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_47940->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1166)) COMMA_SOURCE_FILE_AT_LINE (1166)),  operand_47940->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1166)) COMMA_SOURCE_FILE_AT_LINE (1166)) ;
          var_cas_alarmList.addAssign_operation (var_cas_alarmFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("ALARMS") COMMA_SOURCE_FILE_AT_LINE (1169)),  var_cas_alarmList COMMA_SOURCE_FILE_AT_LINE (1169)) ;
      GGS_goilTemplateFieldMapList  var_cas_resourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_regularResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      GGS_goilTemplateFieldMapList  var_cas_internalResourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_48473 (operand_42144->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1175)), true) ;
        const GGS_ident_map::cElement * operand_48473 = NULL ;
        while (((operand_48473 = enumerator_48473.nextObject ()))) {
          macroValidPointer (operand_48473) ;
          GGS_goilTemplateFieldMap  var_cas_resourceFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1176)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_resourceFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_48473->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) COMMA_SOURCE_FILE_AT_LINE (1177)),  operand_48473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)) COMMA_SOURCE_FILE_AT_LINE (1177)) ;
          var_cas_resourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
          GGS_resource_map  var_cas_allResources = var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1179)) ;
          GGS_resource_obj  var_cas_resource ;
          if (var_cas_allResources.isBuilt ()) {
            var_cas_allResources (HERE)->method_get (inLexique, operand_48473->mKey, var_cas_resource COMMA_SOURCE_FILE_AT_LINE (1181)) ;
          }
          { const GGS_resource_property_obj _var_49029 = var_cas_resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1182)) ; // CAST instruction
            if (_var_49029.getPtr () != NULL) {
              macroValidPointer (_var_49029.getPtr ()) ;
              if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_49029.getPtr ()))) {
                var_cas_internalResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }else{
                var_cas_regularResourcesList.addAssign_operation (var_cas_resourceFieldMap) ;
              }
            }
          }
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("RESOURCES") COMMA_SOURCE_FILE_AT_LINE (1189)),  var_cas_resourcesList COMMA_SOURCE_FILE_AT_LINE (1189)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("REGULARRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1190)),  var_cas_regularResourcesList COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("INTERNALRESOURCES") COMMA_SOURCE_FILE_AT_LINE (1191)),  var_cas_internalResourcesList COMMA_SOURCE_FILE_AT_LINE (1191)) ;
      GGS_goilTemplateFieldMapList  var_cas_scheduletableList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_49428 (operand_42144->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)), true) ;
        const GGS_ident_map::cElement * operand_49428 = NULL ;
        while (((operand_49428 = enumerator_49428.nextObject ()))) {
          macroValidPointer (operand_49428) ;
          GGS_goilTemplateFieldMap  var_cas_scheduletableFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_scheduletableFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_49428->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) COMMA_SOURCE_FILE_AT_LINE (1197)),  operand_49428->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) COMMA_SOURCE_FILE_AT_LINE (1197)) ;
          var_cas_scheduletableList.addAssign_operation (var_cas_scheduletableFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("SCHEDULETABLES") COMMA_SOURCE_FILE_AT_LINE (1200)),  var_cas_scheduletableList COMMA_SOURCE_FILE_AT_LINE (1200)) ;
      GGS_goilTemplateFieldMapList  var_cas_counterList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_49885 (operand_42144->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (1204)), true) ;
        const GGS_ident_map::cElement * operand_49885 = NULL ;
        while (((operand_49885 = enumerator_49885.nextObject ()))) {
          macroValidPointer (operand_49885) ;
          GGS_goilTemplateFieldMap  var_cas_counterFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_counterFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_49885->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_SOURCE_FILE_AT_LINE (1206)),  operand_49885->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_SOURCE_FILE_AT_LINE (1206)) ;
          var_cas_counterList.addAssign_operation (var_cas_counterFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("COUNTERS") COMMA_SOURCE_FILE_AT_LINE (1209)),  var_cas_counterList COMMA_SOURCE_FILE_AT_LINE (1209)) ;
      GGS_goilTemplateFieldMapList  var_cas_messageList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
      {
        GGS_ident_map::cEnumerator enumerator_50300 (operand_42144->mInfo.app.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1213)), true) ;
        const GGS_ident_map::cElement * operand_50300 = NULL ;
        while (((operand_50300 = enumerator_50300.nextObject ()))) {
          macroValidPointer (operand_50300) ;
          GGS_goilTemplateFieldMap  var_cas_messageFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)) ;
          ::routine_addStringFieldValue (inLexique,  var_cas_messageFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NAME"), operand_50300->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1215)) COMMA_SOURCE_FILE_AT_LINE (1215)),  operand_50300->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1215)) COMMA_SOURCE_FILE_AT_LINE (1215)) ;
          var_cas_messageList.addAssign_operation (var_cas_messageFieldMap) ;
        }
      }
      ::routine_addListFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("MESSAGES") COMMA_SOURCE_FILE_AT_LINE (1218)),  var_cas_messageList COMMA_SOURCE_FILE_AT_LINE (1218)) ;
      var_cas_osapplicationsList.addAssign_operation (var_cas_fieldMap) ;
      { const GGS_app_trusted_obj _var_50872 = operand_42144->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (1222)) ; // CAST instruction
        if (_var_50872.getPtr () != NULL) {
          macroValidPointer (_var_50872.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_50872.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_50872.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_50740 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)), true) ;
              while (enumerator_50740.hasCurrentObject ()) {
                var_cas_trustedFunctionSet.addAssign_operation (enumerator_50740._key (HERE)) ;
                enumerator_50740.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OSAPPLICATIONS") COMMA_SOURCE_FILE_AT_LINE (1229)),  var_cas_osapplicationsList COMMA_SOURCE_FILE_AT_LINE (1229)) ;
  GGS_goilTemplateFieldMapList  var_cas_trustedfunctionsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_stringset::cEnumerator enumerator_51061 (var_cas_trustedFunctionSet, true) ;
    while (enumerator_51061.hasCurrentObject ()) {
      GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1233)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("NAME") COMMA_SOURCE_FILE_AT_LINE (1234)),  enumerator_51061._key (HERE) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
      var_cas_trustedfunctionsList.addAssign_operation (var_cas_fieldMap) ;
      enumerator_51061.next () ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRUSTEDFUNCTIONS") COMMA_SOURCE_FILE_AT_LINE (1237)),  var_cas_trustedfunctionsList COMMA_SOURCE_FILE_AT_LINE (1237)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsapplicationsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setReadyList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setReadyList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_prio_list   var_cas_readyList,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setReadyList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_prio = GGS_uint (0U) ;
  GGS_bool var_cas_powerof2 = GGS_bool (false) ;
  GGS_ident_map  var_cas_config = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1251)).reader_others (inLexique COMMA_SOURCE_FILE_AT_LINE (1251)) ;
  GGS_goilTemplateFieldMapList  var_cas_fifoList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  const GGS_bool cond_52016 = var_cas_config.reader_hasKey (GGS_string ("POWEROF2QUEUE")) ;
  if (cond_52016.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_pw ;
    if (var_cas_config.isBuilt ()) {
      var_cas_config (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("POWEROF2QUEUE"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1257)), var_cas_pw COMMA_SOURCE_FILE_AT_LINE (1257)) ;
    }
    { const GGS_basic_type _var_52004 = var_cas_pw ; // CAST instruction
      if (_var_52004.getPtr () != NULL) {
        macroValidPointer (_var_52004.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_52004.getPtr ()))) {
          const GGS_bool_class var_cas_b (_var_52004.getPtr ()) ;
          var_cas_powerof2 = var_cas_b.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1260)) ;
        }else{
          var_cas_pw.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1262)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("POWEROF2QUEUE should be a boolean") COMMA_SOURCE_FILE_AT_LINE (1263)) ;
        }
      }
    }
  }
  {
    GGS_prio_list::cEnumerator enumerator_52043 (var_cas_readyList, true) ;
    const GGS_prio_list::cElement * operand_52043 = NULL ;
    while (((operand_52043 = enumerator_52043.nextObject ()))) {
      macroValidPointer (operand_52043) ;
      GGS_goilTemplateFieldMap  var_cas_fifoFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)) ;
      GGS_uint  var_cas_maxSize ;
      const GGS_bool cond_52274 = var_cas_powerof2 ;
      if (cond_52274.isBuiltAndTrue ()) {
        var_cas_maxSize = GGS_uint (1U) ;
        GGS_uint _variant_52259 = GGS_uint (32U) ;
        GGS_bool _condition_52259 (_variant_52259.isBuilt (), true) ;
        while (_condition_52259.isBuiltAndTrue ()) {
          _condition_52259 = (operand_52043->fifosize).operator_strictSup (var_cas_maxSize) ;
          if (_condition_52259.isBuiltAndTrue ()) {
            if (_variant_52259.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1274)) ;
              _condition_52259 = GGS_bool (false) ;
            }else{
              _variant_52259.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_maxSize = var_cas_maxSize.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1273)) ;
            }
          }
        }
      }else if (cond_52274.isBuiltAndFalse ()) {
        var_cas_maxSize = operand_52043->fifosize ;
      }
      ::routine_addUnsignedFieldValue (inLexique,  var_cas_fifoFieldMap,  function_lstringWith (inLexique, GGS_string ("SIZE") COMMA_SOURCE_FILE_AT_LINE (1278)),  var_cas_maxSize.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      var_cas_fifoList.addAssign_operation (var_cas_fifoFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("READYLIST") COMMA_SOURCE_FILE_AT_LINE (1281)),  var_cas_fifoList COMMA_SOURCE_FILE_AT_LINE (1281)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setReadyList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setProcessCount"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setProcessCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setProcessCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_taskCount = var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)) ;
  GGS_uint64  var_cas_isrCount = var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)) ;
  GGS_uint64  var_cas_extendedCount = GGS_uint64 (0ULL) ;
  {
    GGS_task_map::cEnumerator enumerator_52868 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1296)), true) ;
    const GGS_task_map::cElement * operand_52868 = NULL ;
    while (((operand_52868 = enumerator_52868.nextObject ()))) {
      macroValidPointer (operand_52868) ;
      const GGS_bool cond_52951 = (operand_52868->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (1297)).reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_52951.isBuiltAndTrue ()) {
        var_cas_extendedCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1298)) ;
      }
    }
  }
  GGS_uint64  var_cas_isr2Count = GGS_uint64 (0ULL) ;
  {
    GGS_isr_map::cEnumerator enumerator_53009 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1302)), true) ;
    const GGS_isr_map::cElement * operand_53009 = NULL ;
    while (((operand_53009 = enumerator_53009.nextObject ()))) {
      macroValidPointer (operand_53009) ;
      { const GGS_basic_type _var_53211 = operand_53009->mInfo.isr.reader_category (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)) ; // CAST instruction
        if (_var_53211.getPtr () != NULL) {
          macroValidPointer (_var_53211.getPtr ()) ;
          if (typeid (cPtr_uint64_class) == typeid (* (_var_53211.getPtr ()))) {
            const GGS_uint64_class var_cas_cat (_var_53211.getPtr ()) ;
            const GGS_bool cond_53142 = (var_cas_cat.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1305))).operator_isEqual (GGS_uint64 (2ULL)) ;
            if (cond_53142.isBuiltAndTrue ()) {
              var_cas_isr2Count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)) ;
            }
          }else{
            operand_53009->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("missing CATEGORY attribute") COMMA_SOURCE_FILE_AT_LINE (1310)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1312)),  var_cas_taskCount COMMA_SOURCE_FILE_AT_LINE (1312)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDEDTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1313)),  var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1313)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("BASICTASKCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1314)),  var_cas_taskCount.substract_operation (inLexique, var_cas_extendedCount COMMA_SOURCE_FILE_AT_LINE (1314)) COMMA_SOURCE_FILE_AT_LINE (1314)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("PROCESSCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1315)),  var_cas_taskCount.add_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1315)) COMMA_SOURCE_FILE_AT_LINE (1315)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISRCOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1316)),  var_cas_isrCount COMMA_SOURCE_FILE_AT_LINE (1316)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR2COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1317)),  var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1317)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ISR1COUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1318)),  var_cas_isrCount.substract_operation (inLexique, var_cas_isr2Count COMMA_SOURCE_FILE_AT_LINE (1318)) COMMA_SOURCE_FILE_AT_LINE (1318)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setProcessCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setResourceCount"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setResourceCount (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setResourceCount at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("RESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1325)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)) COMMA_SOURCE_FILE_AT_LINE (1325)) ;
  GGS_uint64  var_cas_regularCount = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_internalCount = GGS_uint64 (0ULL) ;
  {
    GGS_resource_map::cEnumerator enumerator_54131 (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1328)), true) ;
    const GGS_resource_map::cElement * operand_54131 = NULL ;
    while (((operand_54131 = enumerator_54131.nextObject ()))) {
      macroValidPointer (operand_54131) ;
      { const GGS_resource_property_obj _var_54500 = operand_54131->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1329)) ; // CAST instruction
        if (_var_54500.getPtr () != NULL) {
          macroValidPointer (_var_54500.getPtr ()) ;
          if (typeid (cPtr_resource_property_standard_obj) == typeid (* (_var_54500.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)) ;
          }else if (typeid (cPtr_resource_property_linked_obj) == typeid (* (_var_54500.getPtr ()))) {
            var_cas_regularCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)) ;
          }else if (typeid (cPtr_resource_property_internal_obj) == typeid (* (_var_54500.getPtr ()))) {
            var_cas_internalCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1335)) ;
          }else{
            operand_54131->mInfo.resource.reader_property (inLexique COMMA_SOURCE_FILE_AT_LINE (1337)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1337)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("internal error, RESOURCEPROPERTY type is undefined") COMMA_SOURCE_FILE_AT_LINE (1338)) ;
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("REGULARRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1340)),  var_cas_regularCount COMMA_SOURCE_FILE_AT_LINE (1340)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("INTERNALRESOURCECOUNT"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1341)),  var_cas_internalCount COMMA_SOURCE_FILE_AT_LINE (1341)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setResourceCount\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setSourceFileList"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSourceFileList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSourceFileList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_sourceFileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_54886 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)).reader_app_src (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)), true) ;
    const GGS_lstringlist::cElement * operand_54886 = NULL ;
    while (((operand_54886 = enumerator_54886.nextObject ()))) {
      macroValidPointer (operand_54886) ;
      GGS_goilTemplateFieldMap  var_cas_sourceFileFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1350)) ;
      ::routine_addStringFieldValue (inLexique,  var_cas_sourceFileFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("FILE"), operand_54886->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) COMMA_SOURCE_FILE_AT_LINE (1351)),  operand_54886->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1351)) COMMA_SOURCE_FILE_AT_LINE (1351)) ;
      var_cas_sourceFileList.addAssign_operation (var_cas_sourceFileFieldMap) ;
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1354)),  var_cas_sourceFileList COMMA_SOURCE_FILE_AT_LINE (1354)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSourceFileList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setCFlagsList"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_55401 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)).reader_cflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1362)), true) ;
    const GGS_lstringlist::cElement * operand_55401 = NULL ;
    while (((operand_55401 = enumerator_55401.nextObject ()))) {
      macroValidPointer (operand_55401) ;
      const GGS_bool cond_55684 = (function_stripString (inLexique, operand_55401->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1363)) COMMA_SOURCE_FILE_AT_LINE (1363))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_55684.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CFLAG"), operand_55401->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)) COMMA_SOURCE_FILE_AT_LINE (1365)),  operand_55401->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1365)) COMMA_SOURCE_FILE_AT_LINE (1365)) ;
        var_cas_cFlagsList.addAssign_operation (var_cas_cFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CFLAGS") COMMA_SOURCE_FILE_AT_LINE (1369)),  var_cas_cFlagsList COMMA_SOURCE_FILE_AT_LINE (1369)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setCPPFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCPPFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCPPFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_cppFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_55944 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)).reader_cppflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)), true) ;
    const GGS_lstringlist::cElement * operand_55944 = NULL ;
    while (((operand_55944 = enumerator_55944.nextObject ()))) {
      macroValidPointer (operand_55944) ;
      const GGS_bool cond_56247 = (function_stripString (inLexique, operand_55944->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)) COMMA_SOURCE_FILE_AT_LINE (1378))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_56247.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_cppFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_cppFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPPFLAG"), operand_55944->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)) COMMA_SOURCE_FILE_AT_LINE (1380)),  operand_55944->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)) COMMA_SOURCE_FILE_AT_LINE (1380)) ;
        var_cas_cppFlagsList.addAssign_operation (var_cas_cppFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CPPFLAGS") COMMA_SOURCE_FILE_AT_LINE (1384)),  var_cas_cppFlagsList COMMA_SOURCE_FILE_AT_LINE (1384)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCPPFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setAsFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAsFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAsFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_asFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_56508 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1392)).reader_asflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1392)), true) ;
    const GGS_lstringlist::cElement * operand_56508 = NULL ;
    while (((operand_56508 = enumerator_56508.nextObject ()))) {
      macroValidPointer (operand_56508) ;
      const GGS_bool cond_56801 = (function_stripString (inLexique, operand_56508->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)) COMMA_SOURCE_FILE_AT_LINE (1393))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_56801.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_asFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1394)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_asFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASFLAG"), operand_56508->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)) COMMA_SOURCE_FILE_AT_LINE (1395)),  operand_56508->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)) COMMA_SOURCE_FILE_AT_LINE (1395)) ;
        var_cas_asFlagsList.addAssign_operation (var_cas_asFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ASFLAGS") COMMA_SOURCE_FILE_AT_LINE (1399)),  var_cas_asFlagsList COMMA_SOURCE_FILE_AT_LINE (1399)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAsFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLdFlagsList"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLdFlagsList (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLdFlagsList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMapList  var_cas_ldFlagsList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  {
    GGS_lstringlist::cEnumerator enumerator_57060 (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)).reader_ldflags (inLexique COMMA_SOURCE_FILE_AT_LINE (1407)), true) ;
    const GGS_lstringlist::cElement * operand_57060 = NULL ;
    while (((operand_57060 = enumerator_57060.nextObject ()))) {
      macroValidPointer (operand_57060) ;
      const GGS_bool cond_57353 = (function_stripString (inLexique, operand_57060->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1408)) COMMA_SOURCE_FILE_AT_LINE (1408))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_57353.isBuiltAndTrue ()) {
        GGS_goilTemplateFieldMap  var_cas_ldFlagFieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)) ;
        ::routine_addStringFieldValue (inLexique,  var_cas_ldFlagFieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LDFLAG"), operand_57060->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1410)) COMMA_SOURCE_FILE_AT_LINE (1410)),  operand_57060->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1410)) COMMA_SOURCE_FILE_AT_LINE (1410)) ;
        var_cas_ldFlagsList.addAssign_operation (var_cas_ldFlagFieldMap) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("LDFLAGS") COMMA_SOURCE_FILE_AT_LINE (1414)),  var_cas_ldFlagsList COMMA_SOURCE_FILE_AT_LINE (1414)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLdFlagsList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setTraceFlag"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTraceFlag (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTraceFlag at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_trace _var_59801 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1421)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1421)) ; // CAST instruction
    if (_var_59801.getPtr () != NULL) {
      macroValidPointer (_var_59801.getPtr ()) ;
      if (typeid (cPtr_trace) == typeid (* (_var_59801.getPtr ()))) {
        const GGS_trace var_cas_noTrace (_var_59801.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_noTrace.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1423)) COMMA_SOURCE_FILE_AT_LINE (1423)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1423)) ;
      }else if (typeid (cPtr_trace_off) == typeid (* (_var_59801.getPtr ()))) {
        const GGS_trace_off var_cas_traceOff (_var_59801.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOff.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1425)) COMMA_SOURCE_FILE_AT_LINE (1425)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1425)) ;
      }else if (typeid (cPtr_trace_on) == typeid (* (_var_59801.getPtr ()))) {
        const GGS_trace_on var_cas_traceOn (_var_59801.getPtr ()) ;
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USETRACE"), var_cas_traceOn.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1427)) COMMA_SOURCE_FILE_AT_LINE (1427)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1427)) ;
        ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFORMAT"), var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)) COMMA_SOURCE_FILE_AT_LINE (1428)),  var_cas_traceOn.reader_form (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)) COMMA_SOURCE_FILE_AT_LINE (1428)) ;
        const GGS_bool cond_58210 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1430)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1430))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_58210.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)) COMMA_SOURCE_FILE_AT_LINE (1431)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1431)) COMMA_SOURCE_FILE_AT_LINE (1431)) ;
        }else if (cond_58210.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACETASK"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)) COMMA_SOURCE_FILE_AT_LINE (1433)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1433)) COMMA_SOURCE_FILE_AT_LINE (1433)) ;
        }
        const GGS_bool cond_58539 = (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1436)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1436))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_58539.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)) COMMA_SOURCE_FILE_AT_LINE (1437)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1437)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1437)) COMMA_SOURCE_FILE_AT_LINE (1437)) ;
        }else if (cond_58539.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEISR"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)) COMMA_SOURCE_FILE_AT_LINE (1439)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_isr (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1439)) COMMA_SOURCE_FILE_AT_LINE (1439)) ;
        }
        const GGS_bool cond_58886 = (var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (1442)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1442))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_58886.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)) COMMA_SOURCE_FILE_AT_LINE (1443)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1443)) COMMA_SOURCE_FILE_AT_LINE (1443)) ;
        }else if (cond_58886.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACERESOURCE"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)) COMMA_SOURCE_FILE_AT_LINE (1445)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_resource (inLexique COMMA_SOURCE_FILE_AT_LINE (1445)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1445)) COMMA_SOURCE_FILE_AT_LINE (1445)) ;
        }
        const GGS_bool cond_59231 = (var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)).reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1448))).operator_strictSup (GGS_uint64 (0ULL)) ;
        if (cond_59231.isBuiltAndTrue ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) COMMA_SOURCE_FILE_AT_LINE (1449)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1449)) COMMA_SOURCE_FILE_AT_LINE (1449)) ;
        }else if (cond_59231.isBuiltAndFalse ()) {
          ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEALARM"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1451)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1451)) COMMA_SOURCE_FILE_AT_LINE (1451)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_alarm (inLexique COMMA_SOURCE_FILE_AT_LINE (1451)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1451)) COMMA_SOURCE_FILE_AT_LINE (1451)) ;
        }
        ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEUSEREVENT"), var_cas_traceOn.reader_trace_task (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)) COMMA_SOURCE_FILE_AT_LINE (1453)),  function_getBool (inLexique, var_cas_traceOn.reader_trace_user_event (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)), GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1453)) COMMA_SOURCE_FILE_AT_LINE (1453)) ;
        { const GGS_trace_method _var_59784 = var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1454)) ; // CAST instruction
          if (_var_59784.getPtr () != NULL) {
            macroValidPointer (_var_59784.getPtr ()) ;
            if (typeid (cPtr_trace_file) == typeid (* (_var_59784.getPtr ()))) {
              const GGS_trace_file var_cas_traceFile (_var_59784.getPtr ()) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEMETHOD"), var_cas_traceOn.reader_meth (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)).reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)) COMMA_SOURCE_FILE_AT_LINE (1456)),  GGS_string ("file") COMMA_SOURCE_FILE_AT_LINE (1456)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRACEFILE"), var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1457)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1457)) COMMA_SOURCE_FILE_AT_LINE (1457)),  var_cas_traceFile.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1457)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1457)) COMMA_SOURCE_FILE_AT_LINE (1457)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTraceFlag\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setLinkScript"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinkScript (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinkScript at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linkScriptName = function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1466)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1466)) COMMA_SOURCE_FILE_AT_LINE (1466)) ;
  GGS_bool var_cas_useLinkScript = (var_cas_linkScriptName).operator_isNotEqual (GGS_string ("")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USELINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)) COMMA_SOURCE_FILE_AT_LINE (1468)),  var_cas_useLinkScript COMMA_SOURCE_FILE_AT_LINE (1468)) ;
  const GGS_bool cond_60274 = var_cas_useLinkScript ;
  if (cond_60274.isBuiltAndTrue ()) {
    ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKSCRIPT"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1470)) COMMA_SOURCE_FILE_AT_LINE (1470)),  var_cas_linkScriptName COMMA_SOURCE_FILE_AT_LINE (1470)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinkScript\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setMemoryMapping"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setMemoryMapping (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setMemoryMapping at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useMemoryMapping = GGS_bool (false) ;
  GGS_bool var_cas_useCompilerSettings = GGS_bool (false) ;
  { const GGS_basic_type _var_61254 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)) ; // CAST instruction
    if (_var_61254.getPtr () != NULL) {
      macroValidPointer (_var_61254.getPtr ()) ;
      if (typeid (cPtr_memmap_false) == typeid (* (_var_61254.getPtr ()))) {
        var_cas_useMemoryMapping = GGS_bool (false) ;
        var_cas_useCompilerSettings = GGS_bool (false) ;
      }else if (typeid (cPtr_memmap_true) == typeid (* (_var_61254.getPtr ()))) {
        const GGS_memmap_true var_cas_trueMemmap (_var_61254.getPtr ()) ;
        var_cas_useMemoryMapping = GGS_bool (true) ;
        GGS_lstring  var_cas_compiler = var_cas_trueMemmap.reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1486)) ;
        const GGS_bool cond_60840 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1487))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_60840.isBuiltAndTrue ()) {
          var_cas_useCompilerSettings = GGS_bool (true) ;
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("COMPILER"),  var_cas_compiler COMMA_SOURCE_FILE_AT_LINE (1489)) ;
        }
        GGS_lstring  var_cas_assembler = var_cas_trueMemmap.reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) ;
        const GGS_bool cond_60992 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1492))).operator_isNotEqual (GGS_string ("")) ;
        if (cond_60992.isBuiltAndTrue ()) {
          ::routine_addLStringValue (inLexique,  var_cas_cfg,  GGS_string ("ASSEMBLER"),  var_cas_assembler COMMA_SOURCE_FILE_AT_LINE (1493)) ;
        }
        { const GGS_basic_type _var_61237 = var_cas_trueMemmap.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)) ; // CAST instruction
          if (_var_61237.getPtr () != NULL) {
            macroValidPointer (_var_61237.getPtr ()) ;
            if (typeid (cPtr_no_linker) == typeid (* (_var_61237.getPtr ()))) {
            }else if (typeid (cPtr_yes_linker) == typeid (* (_var_61237.getPtr ()))) {
              const GGS_yes_linker var_cas_yesLinker (_var_61237.getPtr ()) ;
              GGS_lstring  var_cas_linker = var_cas_yesLinker.reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1498)) ;
              ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKER"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1499)) COMMA_SOURCE_FILE_AT_LINE (1499)),  var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1499)) COMMA_SOURCE_FILE_AT_LINE (1499)) ;
            }else{
            }
          }
        }
      }else{
      }
    }
  }
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEMEMORYMAPPING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1502)) COMMA_SOURCE_FILE_AT_LINE (1502)),  var_cas_useMemoryMapping COMMA_SOURCE_FILE_AT_LINE (1502)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPILERSETTINGS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1503)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (1503)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1503)) COMMA_SOURCE_FILE_AT_LINE (1503)),  var_cas_useCompilerSettings COMMA_SOURCE_FILE_AT_LINE (1503)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setMemoryMapping\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setCompiler"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setCompiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setCompiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_compiler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1510)).reader_compiler (inLexique COMMA_SOURCE_FILE_AT_LINE (1510)) ;
  GGS_string var_cas_actualCompiler = GGS_string ("gcc") ;
  const GGS_bool cond_61747 = (var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1512))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_61747.isBuiltAndTrue ()) {
    var_cas_actualCompiler = var_cas_compiler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1512)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMPILEREXE"), var_cas_compiler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1513)) COMMA_SOURCE_FILE_AT_LINE (1513)),  var_cas_actualCompiler COMMA_SOURCE_FILE_AT_LINE (1513)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setCompiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setAssembler"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setAssembler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setAssembler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_assembler = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)).reader_assembler (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  GGS_string var_cas_actualAssembler = GGS_string ("as") ;
  const GGS_bool cond_62119 = (var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1522))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_62119.isBuiltAndTrue ()) {
    var_cas_actualAssembler = var_cas_assembler.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("ASSEMBLEREXE"), var_cas_assembler.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1523)) COMMA_SOURCE_FILE_AT_LINE (1523)),  var_cas_actualAssembler COMMA_SOURCE_FILE_AT_LINE (1523)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setAssembler\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setLinker"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setLinker (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setLinker at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_linker = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1530)).reader_linker (inLexique COMMA_SOURCE_FILE_AT_LINE (1530)) ;
  GGS_string var_cas_actualLinker = GGS_string ("gcc") ;
  const GGS_bool cond_62471 = (var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1532))).operator_isNotEqual (GGS_string ("")) ;
  if (cond_62471.isBuiltAndTrue ()) {
    var_cas_actualLinker = var_cas_linker.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  }
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("LINKEREXE"), var_cas_linker.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1533)) COMMA_SOURCE_FILE_AT_LINE (1533)),  var_cas_actualLinker COMMA_SOURCE_FILE_AT_LINE (1533)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setLinker\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setTarget"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTarget (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TARGET") COMMA_SOURCE_FILE_AT_LINE (1540)),  gOption_goil_5F_options_target_5F_platform.reader_value () COMMA_SOURCE_FILE_AT_LINE (1540)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("ARCH") COMMA_SOURCE_FILE_AT_LINE (1541)),  function_arch (inLexique COMMA_SOURCE_FILE_AT_LINE (1541)) COMMA_SOURCE_FILE_AT_LINE (1541)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("CHIP") COMMA_SOURCE_FILE_AT_LINE (1542)),  function_chip (inLexique COMMA_SOURCE_FILE_AT_LINE (1542)) COMMA_SOURCE_FILE_AT_LINE (1542)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("BOARD") COMMA_SOURCE_FILE_AT_LINE (1543)),  function_board (inLexique COMMA_SOURCE_FILE_AT_LINE (1543)) COMMA_SOURCE_FILE_AT_LINE (1543)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "setTemplatePath"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTemplatePath (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTemplatePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_templatePath = gOption_goil_5F_options_template_5F_dir.reader_value () ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TEMPLATEPATH") COMMA_SOURCE_FILE_AT_LINE (1551)),  var_cas_templatePath COMMA_SOURCE_FILE_AT_LINE (1551)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTemplatePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "setTrampolinePath"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setTrampolinePath (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setTrampolinePath at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_trampolinePath = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1558)).reader_tpl_base_path (inLexique COMMA_SOURCE_FILE_AT_LINE (1558)) ;
  const GGS_bool cond_63524 = (var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1559))).operator_isEqual (GGS_string ("")) ;
  if (cond_63524.isBuiltAndTrue ()) {
    var_cas_trampolinePath = GGS_lstring ::constructor_new (inLexique, GGS_string (".."), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1560)) COMMA_SOURCE_FILE_AT_LINE (1560)) ;
  }
  ::routine_checkTrampolinePath (inLexique,  var_cas_trampolinePath COMMA_SOURCE_FILE_AT_LINE (1562)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TRAMPOLINEPATH"), var_cas_trampolinePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)) COMMA_SOURCE_FILE_AT_LINE (1563)),  var_cas_trampolinePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1563)) COMMA_SOURCE_FILE_AT_LINE (1563)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setTrampolinePath\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setSystemCall"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setSystemCall (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setSystemCall at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESYSTEMCALL"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1570)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1570)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1570)) COMMA_SOURCE_FILE_AT_LINE (1570)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1570)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1570)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1570)) COMMA_SOURCE_FILE_AT_LINE (1570)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setSystemCall\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "setDebug"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setDebug (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setDebug at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEDEBUG"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)) COMMA_SOURCE_FILE_AT_LINE (1577)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)).reader_debug (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1577)) COMMA_SOURCE_FILE_AT_LINE (1577)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setDebug\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setUseInterruptTable"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseInterruptTable (C_Compiler & inLexique,
                                const GGS_root_obj   /* var_cas_cpu */,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseInterruptTable at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEINTERRUPTTABLE") COMMA_SOURCE_FILE_AT_LINE (1584)),  gOption_goil_5F_options_posix_5F_it.reader_value () COMMA_SOURCE_FILE_AT_LINE (1584)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseInterruptTable\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "setBuildConfig"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setBuildConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setBuildConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setSourceFileList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1591)) ;
  ::routine_setCFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1592)) ;
  ::routine_setCPPFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1593)) ;
  ::routine_setAsFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1594)) ;
  ::routine_setLdFlagsList (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1595)) ;
  ::routine_setTraceFlag (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1596)) ;
  ::routine_setLinkScript (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1597)) ;
  ::routine_setMemoryMapping (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1598)) ;
  ::routine_setCompiler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1599)) ;
  ::routine_setAssembler (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1600)) ;
  ::routine_setLinker (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1601)) ;
  ::routine_setTarget (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1602)) ;
  ::routine_setTemplatePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1603)) ;
  ::routine_setTrampolinePath (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1604)) ;
  ::routine_setSystemCall (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1605)) ;
  ::routine_setDebug (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1606)) ;
  ::routine_setUseInterruptTable (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1607)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setBuildConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of function "useCommunication"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_bool function_useCommunication (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_useCommunication at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom ;
  var_cas_useCom = GGS_bool (false) ;
  GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1612)) ;
  const GGS_bool cond_65166 = var_cas_comObject.reader_usecom (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)) ;
  if (cond_65166.isBuiltAndTrue ()) {
    var_cas_useCom = GGS_bool (true) ;
  }else if (cond_65166.isBuiltAndFalse ()) {
    var_cas_useCom = ((var_cas_cpu.reader_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1616)).reader_count ()).operator_strictSup (GGS_uint (0U))).operator_or ((var_cas_cpu.reader_net_messages (inLexique COMMA_SOURCE_FILE_AT_LINE (1617)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_useCommunication\n") ;
  #endif
  return var_cas_useCom ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_useCommunication (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_root_obj  arg_0 = GGS_root_obj ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_bool result = function_useCommunication (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_useCommunication [1] = {& kTypeDescriptor_GGS_root_obj } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_useCommunication ("useCommunication",
                              functionForGenericCall_useCommunication,
                              & kTypeDescriptor_GGS_bool,
                              1,
                              kArgumentTypeList_useCommunication) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setUseCom"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseCom (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseCom at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_useCom = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1627)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOM"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1628)),  var_cas_useCom COMMA_SOURCE_FILE_AT_LINE (1628)) ;
  const GGS_bool cond_66856 = var_cas_useCom ;
  if (cond_66856.isBuiltAndTrue ()) {
    GGS_uint64  var_cas_timeBaseInNanoseconds = GGS_uint64 (1000000ULL) ;
    GGS_com  var_cas_comObject = var_cas_cpu.reader_com (inLexique COMMA_SOURCE_FILE_AT_LINE (1631)) ;
    { const GGS_basic_type _var_65878 = var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)) ; // CAST instruction
      if (_var_65878.getPtr () != NULL) {
        macroValidPointer (_var_65878.getPtr ()) ;
        if (typeid (cPtr_float_class) == typeid (* (_var_65878.getPtr ()))) {
          const GGS_float_class var_cas_timeBase (_var_65878.getPtr ()) ;
          var_cas_timeBaseInNanoseconds = var_cas_timeBase.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1634)).multiply_operation (inLexique, GGS_double (1.000000e+09) COMMA_SOURCE_FILE_AT_LINE (1634)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1634)) ;
        }else{
        }
      }
    }
    ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMTIMEBASE"), var_cas_comObject.reader_timebase (inLexique COMMA_SOURCE_FILE_AT_LINE (1637)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1637)) COMMA_SOURCE_FILE_AT_LINE (1637)),  var_cas_timeBaseInNanoseconds COMMA_SOURCE_FILE_AT_LINE (1637)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMERRORHOOK"), var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1638)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1638)) COMMA_SOURCE_FILE_AT_LINE (1638)),  function_getBool (inLexique, var_cas_comObject.reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1638)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1638)) COMMA_SOURCE_FILE_AT_LINE (1638)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMGETSERVICEID"), var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)) COMMA_SOURCE_FILE_AT_LINE (1639)),  function_getBool (inLexique, var_cas_comObject.reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1639)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1639)) COMMA_SOURCE_FILE_AT_LINE (1639)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USECOMPARAMETERACCESS"), var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1640)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1640)) COMMA_SOURCE_FILE_AT_LINE (1640)),  function_getBool (inLexique, var_cas_comObject.reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1640)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1640)) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTCOMEXTENSION"), var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1641)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1641)) COMMA_SOURCE_FILE_AT_LINE (1641)),  function_getBool (inLexique, var_cas_comObject.reader_startcomextension (inLexique COMMA_SOURCE_FILE_AT_LINE (1641)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1641)) COMMA_SOURCE_FILE_AT_LINE (1641)) ;
    GGS_lstring  var_cas_comStatus = var_cas_comObject.reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1643)) ;
    GGS_bool var_cas_comExtended = GGS_bool (false) ;
    const GGS_bool cond_66755 = (var_cas_comStatus.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1645))).operator_isEqual (GGS_string ("extended")) ;
    if (cond_66755.isBuiltAndTrue ()) {
      var_cas_comExtended = GGS_bool (true) ;
    }
    ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("COMEXTENDED"), var_cas_comStatus.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1648)) COMMA_SOURCE_FILE_AT_LINE (1648)),  var_cas_comExtended COMMA_SOURCE_FILE_AT_LINE (1648)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseCom\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setExtended"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setExtended (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setExtended at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_bool var_cas_extended = (var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1657)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1657))).operator_isEqual (GGS_string ("extended")) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("EXTENDED"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)).reader_status (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1658)) COMMA_SOURCE_FILE_AT_LINE (1658)),  var_cas_extended COMMA_SOURCE_FILE_AT_LINE (1658)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setExtended\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "scalabilityClass"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_scalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_uint64  & var_cas_sc,
                                GGS_bool & var_cas_useTimingProtection,
                                GGS_bool & var_cas_useProtectionHook
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_scalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_sc = GGS_uint64 (0ULL) ;
  var_cas_useTimingProtection = GGS_bool (false) ;
  var_cas_useProtectionHook = GGS_bool (false) ;
  GGS_bool var_cas_useGlobalTime = GGS_bool (false) ;
  GGS_bool var_cas_useOSApplication = GGS_bool (false) ;
  const GGS_bool cond_70651 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_70651.isBuiltAndTrue ()) {
    {
      GGS_task_map::cEnumerator enumerator_67494 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (1675)), true) ;
      const GGS_task_map::cElement * operand_67494 = NULL ;
      while (((operand_67494 = enumerator_67494.nextObject ()))) {
        macroValidPointer (operand_67494) ;
        { const GGS_timing_prot _var_67617 = operand_67494->mInfo.task.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1676)) ; // CAST instruction
          if (_var_67617.getPtr () != NULL) {
            macroValidPointer (_var_67617.getPtr ()) ;
            if (typeid (cPtr_timing_prot_task) == typeid (* (_var_67617.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_67661 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (1681)), true) ;
      const GGS_isr_map::cElement * operand_67661 = NULL ;
      while (((operand_67661 = enumerator_67661.nextObject ()))) {
        macroValidPointer (operand_67661) ;
        { const GGS_timing_prot _var_67781 = operand_67661->mInfo.isr.reader_timing_prot (inLexique COMMA_SOURCE_FILE_AT_LINE (1682)) ; // CAST instruction
          if (_var_67781.getPtr () != NULL) {
            macroValidPointer (_var_67781.getPtr ()) ;
            if (typeid (cPtr_timing_prot_isr) == typeid (* (_var_67781.getPtr ()))) {
              var_cas_useTimingProtection = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    {
      GGS_scheduletable_map::cEnumerator enumerator_67823 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (1687)), true) ;
      const GGS_scheduletable_map::cElement * operand_67823 = NULL ;
      while (((operand_67823 = enumerator_67823.nextObject ()))) {
        macroValidPointer (operand_67823) ;
        { const GGS_ltgt_sync_obj _var_67954 = operand_67823->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (1688)) ; // CAST instruction
          if (_var_67954.getPtr () != NULL) {
            macroValidPointer (_var_67954.getPtr ()) ;
            if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_67954.getPtr ()))) {
              var_cas_useGlobalTime = GGS_bool (true) ;
            }else{
            }
          }
        }
      }
    }
    var_cas_useOSApplication = (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1693)).reader_count ()).operator_strictSup (GGS_uint (0U)) ;
    { const GGS_basic_type _var_68157 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1695)).reader_protectionhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1695)) ; // CAST instruction
      if (_var_68157.getPtr () != NULL) {
        macroValidPointer (_var_68157.getPtr ()) ;
        if (typeid (cPtr_bool_class) == typeid (* (_var_68157.getPtr ()))) {
          const GGS_bool_class var_cas_ph (_var_68157.getPtr ()) ;
          var_cas_useProtectionHook = var_cas_ph.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1697)) ;
        }else{
        }
      }
    }
    var_cas_sc = GGS_uint64 (1ULL) ;
    GGS_string var_cas_setSC = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1704)) ;
    const GGS_bool cond_68872 = ((var_cas_setSC).operator_isEqual (GGS_string (""))).operator_or ((var_cas_setSC).operator_isEqual (GGS_string ("AUTO"))) ;
    if (cond_68872.isBuiltAndTrue ()) {
      const GGS_bool cond_68582 = ((var_cas_useTimingProtection).operator_or (var_cas_useProtectionHook)).operator_or (var_cas_useGlobalTime) ;
      if (cond_68582.isBuiltAndTrue ()) {
        var_cas_sc = GGS_uint64 (2ULL) ;
      }
      const GGS_bool cond_68852 = (function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1718)) COMMA_SOURCE_FILE_AT_LINE (1718))).operator_or ((var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1718)).reader_count ()).operator_strictSup (GGS_uint (0U))) ;
      if (cond_68852.isBuiltAndTrue ()) {
        var_cas_sc = var_cas_sc.add_operation (inLexique, GGS_uint64 (2ULL) COMMA_SOURCE_FILE_AT_LINE (1719)) ;
      }
    }else if (cond_68872.isBuiltAndFalse ()) {
      const GGS_bool cond_69672 = (var_cas_setSC).operator_isEqual (GGS_string ("sc1")) ;
      if (cond_69672.isBuiltAndTrue ()) {
        const GGS_bool cond_69423 = var_cas_useTimingProtection ;
        if (cond_69423.isBuiltAndTrue ()) {
          const GGS_bool cond_69258 = var_cas_useOSApplication ;
          if (cond_69258.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (4ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1729)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1729)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1729)) ;
          }else if (cond_69258.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (2ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1732)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1732)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 2 because Timing Protection is used") COMMA_SOURCE_FILE_AT_LINE (1732)) ;
          }
        }else if (cond_69423.isBuiltAndFalse ()) {
          const GGS_bool cond_69604 = var_cas_useOSApplication ;
          if (cond_69604.isBuiltAndTrue ()) {
            var_cas_sc = GGS_uint64 (3ULL) ;
            var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1737)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1737)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1737)) ;
          }else if (cond_69604.isBuiltAndFalse ()) {
            var_cas_sc = GGS_uint64 (1ULL) ;
          }
        }
      }else if (cond_69672.isBuiltAndFalse ()) {
        const GGS_bool cond_70234 = (var_cas_setSC).operator_isEqual (GGS_string ("sc2")) ;
        if (cond_70234.isBuiltAndTrue ()) {
          const GGS_bool cond_69985 = var_cas_useTimingProtection ;
          if (cond_69985.isBuiltAndTrue ()) {
            const GGS_bool cond_69932 = var_cas_useOSApplication ;
            if (cond_69932.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1746)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1746)) ;
            }else if (cond_69932.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }else if (cond_69985.isBuiltAndFalse ()) {
            const GGS_bool cond_70166 = var_cas_useOSApplication ;
            if (cond_70166.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
              var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1753)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1753)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 3 because OS Application is used") COMMA_SOURCE_FILE_AT_LINE (1753)) ;
            }else if (cond_70166.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (2ULL) ;
            }
          }
        }else if (cond_70234.isBuiltAndFalse ()) {
          const GGS_bool cond_70595 = (var_cas_setSC).operator_isEqual (GGS_string ("sc3")) ;
          if (cond_70595.isBuiltAndTrue ()) {
            const GGS_bool cond_70547 = var_cas_useTimingProtection ;
            if (cond_70547.isBuiltAndTrue ()) {
              const GGS_bool cond_70494 = var_cas_useOSApplication ;
              if (cond_70494.isBuiltAndTrue ()) {
                var_cas_sc = GGS_uint64 (4ULL) ;
                var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1762)).reader_scalabilityclass (inLexique COMMA_SOURCE_FILE_AT_LINE (1762)).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("SCALABILITYCLASS set to 4 because Timing Protection and OS Application are used") COMMA_SOURCE_FILE_AT_LINE (1762)) ;
              }else if (cond_70494.isBuiltAndFalse ()) {
                var_cas_sc = GGS_uint64 (3ULL) ;
              }
            }else if (cond_70547.isBuiltAndFalse ()) {
              var_cas_sc = GGS_uint64 (3ULL) ;
            }
          }else if (cond_70595.isBuiltAndFalse ()) {
            const GGS_bool cond_70629 = (var_cas_setSC).operator_isEqual (GGS_string ("sc4")) ;
            if (cond_70629.isBuiltAndTrue ()) {
              var_cas_sc = GGS_uint64 (4ULL) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_scalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setScalabilityClass"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setScalabilityClass (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setScalabilityClass at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_sc ;
  GGS_bool var_cas_useTimingProtection ;
  GGS_bool var_cas_useProtectionHook ;
  ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  var_cas_useTimingProtection,  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1782)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("SCALABILITYCLASS") COMMA_SOURCE_FILE_AT_LINE (1783)),  var_cas_sc COMMA_SOURCE_FILE_AT_LINE (1783)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USETIMINGPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1784)),  var_cas_useTimingProtection COMMA_SOURCE_FILE_AT_LINE (1784)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEPROTECTIONHOOK") COMMA_SOURCE_FILE_AT_LINE (1785)),  var_cas_useProtectionHook COMMA_SOURCE_FILE_AT_LINE (1785)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEMEMORYPROTECTION") COMMA_SOURCE_FILE_AT_LINE (1786)),  function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1786)) COMMA_SOURCE_FILE_AT_LINE (1786)) COMMA_SOURCE_FILE_AT_LINE (1786)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEOSAPPLICATION") COMMA_SOURCE_FILE_AT_LINE (1787)),  ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) COMMA_SOURCE_FILE_AT_LINE (1787)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setScalabilityClass\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setUseHooks"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setUseHooks (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setUseHooks at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTARTUPHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)) COMMA_SOURCE_FILE_AT_LINE (1794)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)).reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1794)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1794)) COMMA_SOURCE_FILE_AT_LINE (1794)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESHUTDOWNHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)) COMMA_SOURCE_FILE_AT_LINE (1795)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)).reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1795)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1795)) COMMA_SOURCE_FILE_AT_LINE (1795)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEERRORHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)) COMMA_SOURCE_FILE_AT_LINE (1796)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)).reader_errorhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1796)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1796)) COMMA_SOURCE_FILE_AT_LINE (1796)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPRETASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)) COMMA_SOURCE_FILE_AT_LINE (1797)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)).reader_pretaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1797)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1797)) COMMA_SOURCE_FILE_AT_LINE (1797)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPOSTTASKHOOK"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1798)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1798)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1798)) COMMA_SOURCE_FILE_AT_LINE (1798)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1798)).reader_posttaskhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1798)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1798)) COMMA_SOURCE_FILE_AT_LINE (1798)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEGETSERVICEID"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)) COMMA_SOURCE_FILE_AT_LINE (1799)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)).reader_usegetserviceid (inLexique COMMA_SOURCE_FILE_AT_LINE (1799)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1799)) COMMA_SOURCE_FILE_AT_LINE (1799)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USEPARAMETERACCESS"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)) COMMA_SOURCE_FILE_AT_LINE (1800)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)).reader_useparameteraccess (inLexique COMMA_SOURCE_FILE_AT_LINE (1800)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1800)) COMMA_SOURCE_FILE_AT_LINE (1800)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USERESSCHEDULER"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)) COMMA_SOURCE_FILE_AT_LINE (1801)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1801)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1801)) COMMA_SOURCE_FILE_AT_LINE (1801)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("USESTACKMONITORING"), var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)).reader_useresscheduler (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)) COMMA_SOURCE_FILE_AT_LINE (1802)),  function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)).reader_stackmonitoring (inLexique COMMA_SOURCE_FILE_AT_LINE (1802)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1802)) COMMA_SOURCE_FILE_AT_LINE (1802)) ;
  GGS_uint64  var_cas_osapp_startuphook_count = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_osapp_shutdownhook_count = GGS_uint64 (0ULL) ;
  {
    GGS_app_map::cEnumerator enumerator_72932 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (1807)), true) ;
    const GGS_app_map::cElement * operand_72932 = NULL ;
    while (((operand_72932 = enumerator_72932.nextObject ()))) {
      macroValidPointer (operand_72932) ;
      { const GGS_basic_type _var_73101 = operand_72932->mInfo.app.reader_startuphook (inLexique COMMA_SOURCE_FILE_AT_LINE (1808)) ; // CAST instruction
        if (_var_73101.getPtr () != NULL) {
          macroValidPointer (_var_73101.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_73101.getPtr ()))) {
            const GGS_bool_class var_cas_startup (_var_73101.getPtr ()) ;
            const GGS_bool cond_73084 = var_cas_startup.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1810)) ;
            if (cond_73084.isBuiltAndTrue ()) {
              var_cas_osapp_startuphook_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1811)) ;
            }
          }else{
          }
        }
      }
      { const GGS_basic_type _var_73266 = operand_72932->mInfo.app.reader_shutdownhook (inLexique COMMA_SOURCE_FILE_AT_LINE (1814)) ; // CAST instruction
        if (_var_73266.getPtr () != NULL) {
          macroValidPointer (_var_73266.getPtr ()) ;
          if (typeid (cPtr_bool_class) == typeid (* (_var_73266.getPtr ()))) {
            const GGS_bool_class var_cas_shutdown (_var_73266.getPtr ()) ;
            const GGS_bool cond_73249 = var_cas_shutdown.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (1816)) ;
            if (cond_73249.isBuiltAndTrue ()) {
              var_cas_osapp_shutdownhook_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1817)) ;
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OSAPPLICATIONSTARTUPHOOK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1821)),  var_cas_osapp_startuphook_count COMMA_SOURCE_FILE_AT_LINE (1821)) ;
  ::routine_addUnsignedValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("OSAPPLICATIONSHUTDOWNHOOK"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1822)),  var_cas_osapp_shutdownhook_count COMMA_SOURCE_FILE_AT_LINE (1822)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setUseHooks\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "setOsConfig"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setOsConfig (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setOsConfig at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_setExtended (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1826)) ;
  ::routine_setUseCom (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1827)) ;
  ::routine_setScalabilityClass (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1828)) ;
  ::routine_setUseHooks (inLexique,  var_cas_cpu,  var_cas_cfg COMMA_SOURCE_FILE_AT_LINE (1829)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setOsConfig\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "setInterruptSources"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setInterruptSources (C_Compiler & inLexique,
                                const GGS_config   var_cas_targetConfiguration,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setInterruptSources at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_74661 = var_cas_targetConfiguration.reader_hasKey (GGS_string ("it_sources")) ;
  if (cond_74661.isBuiltAndTrue ()) {
    GGS_basic_type  var_cas_interruptSources ;
    if (var_cas_targetConfiguration.isBuilt ()) {
      var_cas_targetConfiguration (HERE)->method_get (inLexique, function_lstringWith (inLexique, GGS_string ("it_sources") COMMA_SOURCE_FILE_AT_LINE (1838)), var_cas_interruptSources COMMA_SOURCE_FILE_AT_LINE (1838)) ;
    }
    { const GGS_basic_type _var_74649 = var_cas_interruptSources ; // CAST instruction
      if (_var_74649.getPtr () != NULL) {
        macroValidPointer (_var_74649.getPtr ()) ;
        if (typeid (cPtr_interrupts) == typeid (* (_var_74649.getPtr ()))) {
          const GGS_interrupts var_cas_interrupts (_var_74649.getPtr ()) ;
          ::routine_addLUnsignedValue (inLexique,  var_cas_cfg,  GGS_string ("ITSOURCESLENGTH"),  var_cas_interrupts.reader_it_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1841)) COMMA_SOURCE_FILE_AT_LINE (1841)) ;
          GGS_goilTemplateFieldMapList  var_cas_interruptSourcesList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
          {
            GGS_ident_map::cEnumerator enumerator_74225 (var_cas_interrupts.reader_it_sources (inLexique COMMA_SOURCE_FILE_AT_LINE (1843)), true) ;
            const GGS_ident_map::cElement * operand_74225 = NULL ;
            while (((operand_74225 = enumerator_74225.nextObject ()))) {
              macroValidPointer (operand_74225) ;
              GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1844)) ;
              ::routine_addLStringFieldValue (inLexique,  var_cas_fieldMap,  GGS_string ("NAME"),  operand_74225->mKey COMMA_SOURCE_FILE_AT_LINE (1845)) ;
              ::routine_addUnsignedFieldValue (inLexique,  var_cas_fieldMap,  GGS_lstring ::constructor_new (inLexique, GGS_string ("NUMBER"), operand_74225->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1846)) COMMA_SOURCE_FILE_AT_LINE (1846)),  function_uint64OrError (inLexique, operand_74225->mInfo.value, GGS_string ("interrupt source number") COMMA_SOURCE_FILE_AT_LINE (1846)) COMMA_SOURCE_FILE_AT_LINE (1846)) ;
              var_cas_interruptSourcesList.addAssign_operation (var_cas_fieldMap) ;
            }
          }
          ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("INTERRUPTSOURCES") COMMA_SOURCE_FILE_AT_LINE (1849)),  var_cas_interruptSourcesList COMMA_SOURCE_FILE_AT_LINE (1849)) ;
        }else{
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setInterruptSources\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "addDirectoryAndFile"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addDirectoryAndFile (C_Compiler & inLexique,
                                GGS_goilTemplateFieldMapList  & var_cas_fileList,
                                const GGS_string  var_cas_directory,
                                const GGS_string  var_cas_file
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addDirectoryAndFile at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_goilTemplateFieldMap  var_cas_fieldMap = GGS_goilTemplateFieldMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1860)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("DIRECTORY") COMMA_SOURCE_FILE_AT_LINE (1861)),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (1861)) ;
  ::routine_addStringFieldValue (inLexique,  var_cas_fieldMap,  function_lstringWith (inLexique, GGS_string ("FILE") COMMA_SOURCE_FILE_AT_LINE (1862)),  var_cas_file COMMA_SOURCE_FILE_AT_LINE (1862)) ;
  var_cas_fileList.addAssign_operation (var_cas_fieldMap) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addDirectoryAndFile\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "setEnvData"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_setEnvData (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_goilTemplateVariableMap  & var_cas_cfg
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_setEnvData at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("OILFILENAME") COMMA_SOURCE_FILE_AT_LINE (1870)),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (1870)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1870)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("CPUNAME"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1871)),  var_cas_cpu.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (1871)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1871)) COMMA_SOURCE_FILE_AT_LINE (1871)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("TIMESTAMP"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1872)),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_SOURCE_FILE_AT_LINE (1872)) COMMA_SOURCE_FILE_AT_LINE (1872)) ;
  GGS_lstring  var_cas_appName = function_applicationName (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1873)) COMMA_SOURCE_FILE_AT_LINE (1873)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("APPNAME"), var_cas_appName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1874)) COMMA_SOURCE_FILE_AT_LINE (1874)),  var_cas_appName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1874)) COMMA_SOURCE_FILE_AT_LINE (1874)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECT") COMMA_SOURCE_FILE_AT_LINE (1875)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)).reader_lastPathComponent () COMMA_SOURCE_FILE_AT_LINE (1875)) ;
  ::routine_addStringValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("PROJECTPATH") COMMA_SOURCE_FILE_AT_LINE (1876)),  function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (1876)) COMMA_SOURCE_FILE_AT_LINE (1876)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USEBUILDFILE") COMMA_SOURCE_FILE_AT_LINE (1877)),  gOption_goil_5F_options_generate_5F_makefile.reader_value () COMMA_SOURCE_FILE_AT_LINE (1877)) ;
  ::routine_addBoolValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("USELOGFILE") COMMA_SOURCE_FILE_AT_LINE (1878)),  gOption_goil_5F_options_generate_5F_log.reader_value () COMMA_SOURCE_FILE_AT_LINE (1878)) ;
  GGS_goilTemplateFieldMapList  var_cas_fileList = GGS_goilTemplateFieldMapList ::constructor_emptyList () ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1883)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1884)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1885)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1886)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1887)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_timeobj_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1888)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1889)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_action.c") COMMA_SOURCE_FILE_AT_LINE (1890)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_error.c") COMMA_SOURCE_FILE_AT_LINE (1891)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_dispatch_table.c") COMMA_SOURCE_FILE_AT_LINE (1892)) ;
  ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os.c") COMMA_SOURCE_FILE_AT_LINE (1893)) ;
  const GGS_bool cond_77011 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1894))).operator_not () ;
  if (cond_77011.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_alarm.c") COMMA_SOURCE_FILE_AT_LINE (1895)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_event.c") COMMA_SOURCE_FILE_AT_LINE (1896)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_it.c") COMMA_SOURCE_FILE_AT_LINE (1897)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_rez.c") COMMA_SOURCE_FILE_AT_LINE (1898)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_os_task.c") COMMA_SOURCE_FILE_AT_LINE (1899)) ;
  }
  { const GGS_trace _var_77131 = var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1901)).reader_trace (inLexique COMMA_SOURCE_FILE_AT_LINE (1901)) ; // CAST instruction
    if (_var_77131.getPtr () != NULL) {
      macroValidPointer (_var_77131.getPtr ()) ;
      if (typeid (cPtr_trace_on) == typeid (* (_var_77131.getPtr ()))) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("os"),  GGS_string ("tpl_trace.c") COMMA_SOURCE_FILE_AT_LINE (1903)) ;
      }else{
      }
    }
  }
  const GGS_bool cond_77781 = function_useCommunication (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (1905)) ;
  if (cond_77781.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_app_copy.c") COMMA_SOURCE_FILE_AT_LINE (1906)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filtering.c") COMMA_SOURCE_FILE_AT_LINE (1907)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_filters.c") COMMA_SOURCE_FILE_AT_LINE (1908)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_internal_com.c") COMMA_SOURCE_FILE_AT_LINE (1909)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_external_com.c") COMMA_SOURCE_FILE_AT_LINE (1910)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_notification.c") COMMA_SOURCE_FILE_AT_LINE (1911)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_queue.c") COMMA_SOURCE_FILE_AT_LINE (1912)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_message_management.c") COMMA_SOURCE_FILE_AT_LINE (1913)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("com"),  GGS_string ("tpl_com_errorhook.c") COMMA_SOURCE_FILE_AT_LINE (1914)) ;
  }
  const GGS_bool cond_79058 = gOption_goil_5F_options_autosar_5F_on.reader_value () ;
  if (cond_79058.isBuiltAndTrue ()) {
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1917)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_st_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1918)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1919)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_stack_monitor.c") COMMA_SOURCE_FILE_AT_LINE (1920)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_timing_protec.c") COMMA_SOURCE_FILE_AT_LINE (1921)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_action.c") COMMA_SOURCE_FILE_AT_LINE (1922)) ;
    ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_protec_hook.c") COMMA_SOURCE_FILE_AT_LINE (1923)) ;
    GGS_uint64  var_cas_sc ;
    GGS_bool automatic_var_78383_0 ;
    GGS_bool automatic_var_78383_1 ;
    ::routine_scalabilityClass (inLexique,  var_cas_cpu,  var_cas_sc,  automatic_var_78383_0,  automatic_var_78383_1 COMMA_SOURCE_FILE_AT_LINE (1925)) ;
    const GGS_bool cond_78576 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
    if (cond_78576.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_app_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1927)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct_kernel.c") COMMA_SOURCE_FILE_AT_LINE (1928)) ;
    }
    const GGS_bool cond_79048 = (function_getBool (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (1930)).reader_systemcall (inLexique COMMA_SOURCE_FILE_AT_LINE (1930)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1930))).operator_not () ;
    if (cond_79048.isBuiltAndTrue ()) {
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_counter.c") COMMA_SOURCE_FILE_AT_LINE (1931)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_isr.c") COMMA_SOURCE_FILE_AT_LINE (1932)) ;
      ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_schedtable.c") COMMA_SOURCE_FILE_AT_LINE (1933)) ;
      const GGS_bool cond_79036 = ((var_cas_sc).operator_isEqual (GGS_uint64 (3ULL))).operator_or ((var_cas_sc).operator_isEqual (GGS_uint64 (4ULL))) ;
      if (cond_79036.isBuiltAndTrue ()) {
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_trusted_fct.c") COMMA_SOURCE_FILE_AT_LINE (1935)) ;
        ::routine_addDirectoryAndFile (inLexique,  var_cas_fileList,  GGS_string ("autosar"),  GGS_string ("tpl_as_application.c") COMMA_SOURCE_FILE_AT_LINE (1936)) ;
      }
    }
  }
  ::routine_addListValue (inLexique,  var_cas_cfg,  function_lstringWith (inLexique, GGS_string ("TRAMPOLINESOURCEFILES") COMMA_SOURCE_FILE_AT_LINE (1940)),  var_cas_fileList COMMA_SOURCE_FILE_AT_LINE (1940)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_setEnvData\n") ;
  #endif
}

//---------------------------------------------------------------------------*

