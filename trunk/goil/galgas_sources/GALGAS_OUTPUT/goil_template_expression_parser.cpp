//---------------------------------------------------------------------------*
//                                                                           *
//                File 'goil_template_expression_parser.cpp'                 *
//                        Generated by version 1.9.5                         *
//                     november 23th, 2009, at 12h3'43"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 614
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_template_expression_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (98)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (99)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (101)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (121)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (122)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (124)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (144)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (145)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (147)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_6764 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE)) ;
  if (cond_6764.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the 'not' operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (162)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (163)) ;
  }
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkBitComplementOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkBitComplementOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outResultType = var_cas_inOperandType ;
  const GGS_bool cond_7545 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_7545.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (180)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (181)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkBitComplementOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (199)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (200)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (201)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (219)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (220)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (221)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (239)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (240)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (243)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (257)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (258)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (261)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (279)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (280)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (283)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (301)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (302)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (305)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (323)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (324)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (327)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (345)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (346)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (349)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (367)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (368)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (371)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "argumentListSignature"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_argumentListSignature (C_Compiler & inLexique,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_argumentListSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  var_cas_outResult = GGS_string (" this method call has ") ;
  var_cas_outResult.dotAssign_operation (var_cas_inParameterTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (385))) ;
  var_cas_outResult.appendCString (" argument") ;
  var_cas_outResult.dotAssign_operation ((((var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) ;
  {
    GGS_goilTemplateExpressionList::cEnumerator enumerator_16330 (var_cas_inParameterTypeList, true) ;
    const GGS_goilTemplateExpressionList::cElement * operand_16330 = enumerator_16330.nextObject () ;
    if ((operand_16330 != NULL)) {
      var_cas_outResult.appendCString (": ") ;
      bool _foreach_loop_16330 ;
      do{
        macroValidPointer (operand_16330) ;
        var_cas_outResult.dotAssign_operation (operand_16330->mType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (389))) ;
        operand_16330 = enumerator_16330.nextObject () ;
        _foreach_loop_16330 = ((operand_16330 != NULL)) ;
        if (_foreach_loop_16330) {
          var_cas_outResult.appendCString (", ") ;
        }
      }while (_foreach_loop_16330) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_argumentListSignature\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_argumentListSignature (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_goilTemplateExpressionList  arg_0 = GGS_goilTemplateExpressionList ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_argumentListSignature (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor *
kArgumentTypeList_argumentListSignature [1] = {& kTypeDescriptor_GGS_goilTemplateExpressionList } ;

const C_galgas_function_descriptor
kFunction_descriptor_argumentListSignature ("argumentListSignature",
                              functionForGenericCall_argumentListSignature,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_argumentListSignature) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInvocationHasNoArgument"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInvocationHasNoArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_17261 = (var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17261.isBuiltAndTrue ()) {
    var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("calling '")).operator_concat (var_cas_inMethodName)).operator_concat (GGS_string ("' on a "))).operator_concat (var_cas_inType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (407)))).operator_concat (GGS_string (" type requires no argument; "))).operator_concat (function_argumentListSignature (inLexique, var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (408))) COMMA_SOURCE_FILE_AT_LINE (409)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInvocationHasNoArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "templateMethodInvocation"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateMethodInvocation (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_goilTemplateValue  var_cas_inValue,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList,
                                GGS_goilTemplateType & var_cas_outResultType,
                                GGS_goilTemplateValue & var_cas_outResultValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateMethodInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inType.enumValue ()) {
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_18284 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (428))).operator_isEqual (GGS_string ("string")) ;
    if (cond_18284.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (429)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (432))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("true")) : (GGS_string ("false"))) COMMA_SOURCE_FILE_AT_LINE (431)) ;
    }else if (cond_18284.isBuiltAndFalse ()) {
      const GGS_bool cond_18506 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (434))).operator_isEqual (GGS_string ("unsigned")) ;
      if (cond_18506.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (435)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = var_cas_inValue ;
      }else if (cond_18506.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (440)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    const GGS_bool cond_18912 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (442))).operator_isEqual (GGS_string ("string")) ;
    if (cond_18912.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (443)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (445)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (445)) COMMA_SOURCE_FILE_AT_LINE (445)) ;
    }else if (cond_18912.isBuiltAndFalse ()) {
      const GGS_bool cond_19183 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (446))).operator_isEqual (GGS_string ("hexString")) ;
      if (cond_19183.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (447)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (449)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (449)) COMMA_SOURCE_FILE_AT_LINE (449)) ;
      }else if (cond_19183.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (452)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_stringType:
    {
    const GGS_bool cond_19607 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (454))).operator_isEqual (GGS_string ("HTMLRepresentation")) ;
    if (cond_19607.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (455)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (457)).reader_HTMLRepresentation () COMMA_SOURCE_FILE_AT_LINE (457)) ;
    }else if (cond_19607.isBuiltAndFalse ()) {
      const GGS_bool cond_19905 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (458))).operator_isEqual (GGS_string ("identifierRepresentation")) ;
      if (cond_19905.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (459)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (461)).reader_identifierRepresentation () COMMA_SOURCE_FILE_AT_LINE (461)) ;
      }else if (cond_19905.isBuiltAndFalse ()) {
        const GGS_bool cond_20185 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (462))).operator_isEqual (GGS_string ("lowercaseString")) ;
        if (cond_20185.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (463)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
          var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (465)).reader_lowercaseString () COMMA_SOURCE_FILE_AT_LINE (465)) ;
        }else if (cond_20185.isBuiltAndFalse ()) {
          const GGS_bool cond_20460 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (466))).operator_isEqual (GGS_string ("length")) ;
          if (cond_20460.isBuiltAndTrue ()) {
            ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (467)) ;
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (469)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (469)) COMMA_SOURCE_FILE_AT_LINE (469)) ;
          }else if (cond_20460.isBuiltAndFalse ()) {
            const GGS_bool cond_20778 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (470))).operator_isEqual (GGS_string ("stringByCapitalizingFirstCharacter")) ;
            if (cond_20778.isBuiltAndTrue ()) {
              ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (471)) ;
              var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
              var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (473)).reader_stringByCapitalizingFirstCharacter () COMMA_SOURCE_FILE_AT_LINE (473)) ;
            }else if (cond_20778.isBuiltAndFalse ()) {
              const GGS_bool cond_21057 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (474))).operator_isEqual (GGS_string ("uppercaseString")) ;
              if (cond_21057.isBuiltAndTrue ()) {
                ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (475)) ;
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (477)).reader_uppercaseString () COMMA_SOURCE_FILE_AT_LINE (477)) ;
              }else if (cond_21057.isBuiltAndFalse ()) {
                var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (480)) ;
                var_cas_outResultValue.drop () ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    const GGS_bool cond_21468 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (482))).operator_isEqual (GGS_string ("length")) ;
    if (cond_21468.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (483)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (485)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (485)) COMMA_SOURCE_FILE_AT_LINE (485)) ;
    }else if (cond_21468.isBuiltAndFalse ()) {
      var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (488)) ;
      var_cas_outResultValue.drop () ;
      var_cas_outResultType.drop () ;
    }
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateMethodInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_498_17_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (523))).operator_or (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (523))) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (524)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (541))).operator_xor (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (541))) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (542)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_498_17_parse (goil_template_scanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_556_20_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (581))).operator_and (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (581))) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (582)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_556_20_parse (goil_template_scanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_596_22_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (620)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (624))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (624))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (626))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (626))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (628))).operator_isEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (628))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (644)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (648))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (648))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (650))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (650))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (652))).operator_isNotEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (652))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (668)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (672))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (672))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (674))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (674))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (692)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (696))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (696))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (698))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (698))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (716)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (720))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (720))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (722))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (722))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (740)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (744))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (744))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (746))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (746))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_596_22_parse (goil_template_scanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_761_24_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (786)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (787)).left_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (787)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (787)) COMMA_SOURCE_FILE_AT_LINE (787)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (800)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (801)).right_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (801)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (801)) COMMA_SOURCE_FILE_AT_LINE (801)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (814)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (815)).add_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (815)) COMMA_SOURCE_FILE_AT_LINE (815)) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (828)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (829)).substract_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (829)) COMMA_SOURCE_FILE_AT_LINE (829)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_761_24_parse (goil_template_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_839_11_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (864)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (865)).multiply_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (865)) COMMA_SOURCE_FILE_AT_LINE (865)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (878)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (879)).divide_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (879)) COMMA_SOURCE_FILE_AT_LINE (879)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (892)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (893)).modulo_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (893)) COMMA_SOURCE_FILE_AT_LINE (893)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_839_11_parse (goil_template_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_903_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_903_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_925_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expression, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL).substract_operation (inLexique, var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (941)) COMMA_SOURCE_FILE_AT_LINE (941)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (945)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_925_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_954_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_value ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_value, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new ((var_cas_value.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (970))).operator_tilde (), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkBitComplementOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (974)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_954_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_983_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_983_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1004_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1004_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1025_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_literalInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1034)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1025_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1047_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  inLexique.assignFromAttribute_a_string (var_cas_literalString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_string) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1047_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1069_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expressionValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
  GGS_lstring  var_cas_templateMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_expressionList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  switch (select_goil_template_expression_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_expressionList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_goil_template_expression_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
  ::routine_templateMethodInvocation (inLexique,  var_cas_expressionType,  var_cas_expressionValue,  var_cas_templateMethodName,  var_cas_expressionList,  var_cas_outResultType,  var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1109)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1069_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            nt_expression_parse (inLexique) ;
          switch (select_goil_template_expression_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "typeError"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_typeError (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFunctionName,
                                const GGS_type  var_cas_inActualType,
                                const GGS_string  var_cas_inExpectedTypeName,
                                const GGS_uint   var_cas_inParameterIndex COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_typeError at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_m = ((((GGS_string ("the function requires the parameter ")).operator_concat (var_cas_inParameterIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)))).operator_concat (GGS_string (" to be "))).operator_concat (var_cas_inExpectedTypeName)).operator_concat (GGS_string ("; its type is ")) ;
  const GGS_bool cond_42740 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
  if (cond_42740.isBuiltAndTrue ()) {
    var_cas_m.appendCString ("boolean") ;
  }else if (cond_42740.isBuiltAndFalse ()) {
    const GGS_bool cond_42800 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
    if (cond_42800.isBuiltAndTrue ()) {
      var_cas_m.appendCString ("unsigned") ;
    }else if (cond_42800.isBuiltAndFalse ()) {
      const GGS_bool cond_42857 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
      if (cond_42857.isBuiltAndTrue ()) {
        var_cas_m.appendCString ("string") ;
      }else if (cond_42857.isBuiltAndFalse ()) {
        var_cas_m.appendCString ("a not allowed type") ;
      }
    }
  }
  var_cas_inFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1146)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_typeError\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1150_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_functionOrVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionOrVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_7 (inLexique)) {
    case 1 : {
      const GGS_goilTemplateVariableMap  temp_43277 = var_cas_inVariableMap ;
      if (temp_43277.isBuilt ()) {
        temp_43277 (HERE)->method_searchKey (inLexique, var_cas_functionOrVariableName, var_cas_outResultType, var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1159)) ;
      }
      } break ;
    case 2 : {
      GGS_function var_cas_f ;
      const GGS_bool cond_43596 = (GGS_function::constructor_isFunctionDefined (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)))).operator_not () ;
      if (cond_43596.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("there is no '")).operator_concat (var_cas_functionOrVariableName)).operator_concat (GGS_string ("' function defined in GOIL run time")) COMMA_SOURCE_FILE_AT_LINE (1165)) ;
        var_cas_f.drop () ;
      }else if (cond_43596.isBuiltAndFalse ()) {
        var_cas_f = GGS_function::constructor_functionWithName (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1166))) ;
      }
      GGS_goilTemplateExpressionList  var_cas_actualArgumentList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_actualArgumentList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_goil_template_expression_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      GGS_objectlist  var_cas_actualArgumentObjectList = GGS_objectlist ::constructor_emptyList () ;
      const GGS_typelist  var_cas_formalParameterList = var_cas_f.reader_formalParameterTypeList () ;
      const GGS_bool cond_44698 = (var_cas_formalParameterList.reader_length ()).operator_isNotEqual (var_cas_actualArgumentList.reader_length ()) ;
      if (cond_44698.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("this function is invoked with ")).operator_concat (var_cas_actualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1190)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_actualArgumentList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (", but requires "))).operator_concat (var_cas_formalParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1193)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_formalParameterList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) COMMA_SOURCE_FILE_AT_LINE (1196)) ;
        var_cas_outValue.drop () ;
        var_cas_outResultType.drop () ;
      }else if (cond_44698.isBuiltAndFalse ()) {
        GGS_uint  var_cas_idx = GGS_uint (1U) ;
        {
          GGS_typelist::cEnumerator enumerator_44755 (var_cas_formalParameterList, true) ;
          const GGS_typelist::cElement * operand_44755 = NULL ;
          GGS_goilTemplateExpressionList::cEnumerator enumerator_44794 (var_cas_actualArgumentList, true) ;
          const GGS_goilTemplateExpressionList::cElement * operand_44794 = NULL ;
          while (((operand_44755 = enumerator_44755.nextObject ()))
              && ((operand_44794 = enumerator_44794.nextObject ()))) {
            macroValidPointer (operand_44755) ;
            macroValidPointer (operand_44794) ;
            switch (operand_44794->mType.enumValue ()) {
            case GGS_goilTemplateType::enum_boolType:
              {
              const GGS_bool cond_45003 = (operand_44755->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
              if (cond_45003.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_44755->mValue,  GGS_string ("boolean"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1202)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation ((((operand_44794->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1204))).operator_isEqual (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_bool (false)) : (GGS_bool (true))).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_unsignedType:
              {
              const GGS_bool cond_45291 = (operand_44755->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
              if (cond_45291.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_44755->mValue,  GGS_string ("unsigned"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1207)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_44794->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_stringType:
              {
              const GGS_bool cond_45541 = (operand_44755->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_45541.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_44755->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1212)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_44794->mValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_listType:
              {
              ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_44755->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1216)) ;
              }
              break ;
            case GGS_goilTemplateType::kNotBuilt:
              break ;
            }
            var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1218)) ;
          }
        }
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
        var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
        const GGS_bool cond_46892 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
        if (cond_46892.isBuiltAndTrue ()) {
          const GGS_object var_cas_result = var_cas_f.reader_invoke (inLexique, var_cas_actualArgumentObjectList, var_cas_functionOrVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)) COMMA_SOURCE_FILE_AT_LINE (1223)) ;
          const GGS_bool cond_46315 = (var_cas_result.reader_objectStaticType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
          if (cond_46315.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outValue.mUnsigned64Value = GGS_uint64::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1226)) ;
          }else if (cond_46315.isBuiltAndFalse ()) {
            const GGS_bool cond_46538 = (var_cas_result.reader_objectStaticType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
            if (cond_46538.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
              var_cas_outValue.mUnsigned64Value = GGS_bool::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1229)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1229)) ;
            }else if (cond_46538.isBuiltAndFalse ()) {
              const GGS_bool cond_46753 = (var_cas_result.reader_objectStaticType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_46753.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outValue.mStringValue = GGS_string::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1232)) ;
              }else if (cond_46753.isBuiltAndFalse ()) {
                var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this function does not return an unsigned, boolean or string value") COMMA_SOURCE_FILE_AT_LINE (1235)) ;
              }
            }
          }
        }
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1150_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_7 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            nt_expression_parse (inLexique) ;
          switch (select_goil_template_expression_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

