//---------------------------------------------------------------------------*
//                                                                           *
//                File 'goil_template_expression_parser.cpp'                 *
//                        Generated by version 1.9.4                         *
//                    november 14th, 2009, at 15h19'28"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_template_expression_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (105)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (106)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (108)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (128)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (129)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (131)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (151)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (152)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (154)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_6923 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE)) ;
  if (cond_6923.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the 'not' operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (169)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (170)) ;
  }
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkBitComplementOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkBitComplementOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outResultType = var_cas_inOperandType ;
  const GGS_bool cond_7704 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_7704.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (187)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (188)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkBitComplementOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (206)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (207)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (208)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (226)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (227)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (228)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (246)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (250)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (264)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (268)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (286)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (287)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (290)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (308)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (309)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (312)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (330)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (331)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (334)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (352)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (353)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (356)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (374)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (375)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (378)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "argumentListSignature"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_argumentListSignature (C_Compiler & inLexique,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_argumentListSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  var_cas_outResult = GGS_string (" this method call has ") ;
  var_cas_outResult.dotAssign_operation (var_cas_inParameterTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (392)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (392))) ;
  var_cas_outResult.appendCString (" argument") ;
  var_cas_outResult.dotAssign_operation ((((var_cas_inParameterTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (393))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) ;
  {
    GGS_goilTemplateExpressionList::cEnumerator enumerator_16489 (var_cas_inParameterTypeList, true) ;
    const GGS_goilTemplateExpressionList::cElement * operand_16489 = enumerator_16489.nextObject () ;
    if ((operand_16489 != NULL)) {
      var_cas_outResult.appendCString (": ") ;
      bool _foreach_loop_16489 ;
      do{
        macroValidPointer (operand_16489) ;
        var_cas_outResult.dotAssign_operation (operand_16489->mType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (396))) ;
        operand_16489 = enumerator_16489.nextObject () ;
        _foreach_loop_16489 = ((operand_16489 != NULL)) ;
        if (_foreach_loop_16489) {
          var_cas_outResult.appendCString (", ") ;
        }
      }while (_foreach_loop_16489) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_argumentListSignature\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInvocationHasNoArgument"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInvocationHasNoArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_17420 = (var_cas_inParameterTypeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (412))).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17420.isBuiltAndTrue ()) {
    var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("calling '")).operator_concat (var_cas_inMethodName)).operator_concat (GGS_string ("' on a "))).operator_concat (var_cas_inType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (414)))).operator_concat (GGS_string (" type requires no argument; "))).operator_concat (function_argumentListSignature (inLexique, var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (415))) COMMA_SOURCE_FILE_AT_LINE (416)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInvocationHasNoArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "templateMethodInvocation"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateMethodInvocation (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_goilTemplateValue  var_cas_inValue,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList,
                                GGS_goilTemplateType & var_cas_outResultType,
                                GGS_goilTemplateValue & var_cas_outResultValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateMethodInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inType.enumValue ()) {
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_18443 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (435))).operator_isEqual (GGS_string ("string")) ;
    if (cond_18443.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (436)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (439))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("true")) : (GGS_string ("false"))) COMMA_SOURCE_FILE_AT_LINE (438)) ;
    }else if (cond_18443.isBuiltAndFalse ()) {
      const GGS_bool cond_18665 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (441))).operator_isEqual (GGS_string ("unsigned")) ;
      if (cond_18665.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (442)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = var_cas_inValue ;
      }else if (cond_18665.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (447)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    const GGS_bool cond_19071 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (449))).operator_isEqual (GGS_string ("string")) ;
    if (cond_19071.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (450)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (452)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (452)) COMMA_SOURCE_FILE_AT_LINE (452)) ;
    }else if (cond_19071.isBuiltAndFalse ()) {
      const GGS_bool cond_19342 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (453))).operator_isEqual (GGS_string ("hexString")) ;
      if (cond_19342.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (454)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (456)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (456)) COMMA_SOURCE_FILE_AT_LINE (456)) ;
      }else if (cond_19342.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (459)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_stringType:
    {
    const GGS_bool cond_19766 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (461))).operator_isEqual (GGS_string ("HTMLRepresentation")) ;
    if (cond_19766.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (462)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (464)).reader_HTMLRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (464)) COMMA_SOURCE_FILE_AT_LINE (464)) ;
    }else if (cond_19766.isBuiltAndFalse ()) {
      const GGS_bool cond_20064 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (465))).operator_isEqual (GGS_string ("identifierRepresentation")) ;
      if (cond_20064.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (466)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (468)).reader_identifierRepresentation (inLexique COMMA_SOURCE_FILE_AT_LINE (468)) COMMA_SOURCE_FILE_AT_LINE (468)) ;
      }else if (cond_20064.isBuiltAndFalse ()) {
        const GGS_bool cond_20344 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (469))).operator_isEqual (GGS_string ("lowercaseString")) ;
        if (cond_20344.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (470)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
          var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (472)).reader_lowercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (472)) COMMA_SOURCE_FILE_AT_LINE (472)) ;
        }else if (cond_20344.isBuiltAndFalse ()) {
          const GGS_bool cond_20619 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (473))).operator_isEqual (GGS_string ("length")) ;
          if (cond_20619.isBuiltAndTrue ()) {
            ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (474)) ;
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (476)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (476)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (476)) COMMA_SOURCE_FILE_AT_LINE (476)) ;
          }else if (cond_20619.isBuiltAndFalse ()) {
            const GGS_bool cond_20937 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (477))).operator_isEqual (GGS_string ("stringByCapitalizingFirstCharacter")) ;
            if (cond_20937.isBuiltAndTrue ()) {
              ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (478)) ;
              var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
              var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (480)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (480)) COMMA_SOURCE_FILE_AT_LINE (480)) ;
            }else if (cond_20937.isBuiltAndFalse ()) {
              const GGS_bool cond_21216 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (481))).operator_isEqual (GGS_string ("uppercaseString")) ;
              if (cond_21216.isBuiltAndTrue ()) {
                ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (482)) ;
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (484)).reader_uppercaseString (inLexique COMMA_SOURCE_FILE_AT_LINE (484)) COMMA_SOURCE_FILE_AT_LINE (484)) ;
              }else if (cond_21216.isBuiltAndFalse ()) {
                var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (487)) ;
                var_cas_outResultValue.drop () ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    const GGS_bool cond_21627 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (489))).operator_isEqual (GGS_string ("length")) ;
    if (cond_21627.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (490)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (492)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (492)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (492)) COMMA_SOURCE_FILE_AT_LINE (492)) ;
    }else if (cond_21627.isBuiltAndFalse ()) {
      var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (495)) ;
      var_cas_outResultValue.drop () ;
      var_cas_outResultType.drop () ;
    }
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateMethodInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_505_17_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (530))).operator_or (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (530))) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (531)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (548))).operator_xor (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (548))) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (549)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_505_17_parse (goil_template_scanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_563_20_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (588))).operator_and (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (588))) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (589)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_563_20_parse (goil_template_scanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_603_22_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (627)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (631))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (631))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (633))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (633))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (635))).operator_isEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (635))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (651)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (655))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (655))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (657))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (657))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (659))).operator_isNotEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (659))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (675)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (679))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (679))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (681))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (681))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (699)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (703))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (703))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (705))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (705))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (723)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (727))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (727))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (729))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (729))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (747)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (751))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (751))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (753))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (753))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_603_22_parse (goil_template_scanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_768_24_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (793)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (794)).left_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (794)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (794)) COMMA_SOURCE_FILE_AT_LINE (794)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (807)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (808)).right_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (808)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) COMMA_SOURCE_FILE_AT_LINE (808)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (821)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (822)).add_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (822)) COMMA_SOURCE_FILE_AT_LINE (822)) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (835)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (836)).substract_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (836)) COMMA_SOURCE_FILE_AT_LINE (836)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_768_24_parse (goil_template_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_846_11_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (871)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (872)).multiply_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) COMMA_SOURCE_FILE_AT_LINE (872)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (885)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (886)).divide_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (886)) COMMA_SOURCE_FILE_AT_LINE (886)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (899)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (900)).modulo_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (900)) COMMA_SOURCE_FILE_AT_LINE (900)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_846_11_parse (goil_template_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_910_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  const GGS_goilTemplateVariableMap  temp_35655 = var_cas_inVariableMap ;
  if (temp_35655.isBuilt ()) {
    temp_35655 (HERE)->method_searchKey (inLexique, var_cas_variableName, var_cas_outResultType, var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (917)) ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_910_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_926_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_926_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_948_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expression, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL).substract_operation (inLexique, var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (964)) COMMA_SOURCE_FILE_AT_LINE (964)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (968)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_948_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_977_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_value ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_value, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new ((var_cas_value.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (993))).operator_tilde (), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkBitComplementOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (997)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_977_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1006_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1006_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1027_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1027_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1048_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_literalInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1048_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1071_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expressionValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
  GGS_lstring  var_cas_templateMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_expressionList ;
  nt_output_expression_list_ (inLexique, var_cas_inPath, var_cas_expressionList, var_cas_inVariableMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
  ::routine_templateMethodInvocation (inLexique,  var_cas_expressionType,  var_cas_expressionValue,  var_cas_templateMethodName,  var_cas_expressionList,  var_cas_outResultType,  var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1099)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1071_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_output_expression_list_goil_template_expression_parser_1164_29_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPath,
                                GGS_goilTemplateExpressionList  &var_cas_outValueList,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap) {
  var_cas_outValueList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_goil_template_expression_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_expression ;
          GGS_goilTemplateType var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inPath, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
          var_cas_outValueList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_output_expression_list_goil_template_expression_parser_1164_29_parse (goil_template_scanner & inLexique) {
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_goil_template_expression_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

