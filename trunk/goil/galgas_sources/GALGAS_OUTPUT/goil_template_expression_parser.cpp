//---------------------------------------------------------------------------*
//                                                                           *
//                File 'goil_template_expression_parser.cpp'                 *
//                        Generated by version 1.9.6                         *
//                     december 2nd, 2009, at 18h4'51"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 621
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_template_expression_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_template_expression_parser.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (111)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (114)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (134)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (135)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (137)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (157)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (158)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (160)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7090 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE)) ;
  if (cond_7090.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the 'not' operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (175)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (176)) ;
  }
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkBitComplementOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inOperandType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkBitComplementOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outResultType = var_cas_inOperandType ;
  const GGS_bool cond_7871 = (var_cas_inOperandType).operator_isNotEqual (GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE)) ;
  if (cond_7871.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (193)))).operator_concat (GGS_string (" type")) COMMA_SOURCE_FILE_AT_LINE (194)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkBitComplementOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (212)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (213)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (214)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_boolType)) {
    }else{
      if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      }else{
        if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_stringType)) {
        }else{
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (232)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (233)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (234)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (252)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (253)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (256)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (270)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (271)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (274)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (292)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (293)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (296)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (314)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (315)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (318)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (336)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (340)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (358)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (359)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (362)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inLeftExpressionType,
                                const GGS_goilTemplateType  var_cas_inRightExpressionType,
                                GGS_goilTemplateType & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    if ((var_cas_inLeftExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType) && (var_cas_inRightExpressionType.enumValue () == GGS_goilTemplateType::enum_unsignedType)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (380)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (381)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (384)) ;
      var_cas_outResultType.drop () ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of function "argumentListSignature"             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_argumentListSignature (C_Compiler & inLexique,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_argumentListSignature at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  var_cas_outResult = GGS_string (" this method call has ") ;
  var_cas_outResult.dotAssign_operation (var_cas_inParameterTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (398))) ;
  var_cas_outResult.appendCString (" argument") ;
  var_cas_outResult.dotAssign_operation ((((var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) ;
  {
    GGS_goilTemplateExpressionList::cEnumerator enumerator_16656 (var_cas_inParameterTypeList, true) ;
    const GGS_goilTemplateExpressionList::cElement * operand_16656 = enumerator_16656.nextObject () ;
    if ((operand_16656 != NULL)) {
      var_cas_outResult.appendCString (": ") ;
      bool _foreach_loop_16656 ;
      do{
        macroValidPointer (operand_16656) ;
        var_cas_outResult.dotAssign_operation (operand_16656->mType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (402))) ;
        operand_16656 = enumerator_16656.nextObject () ;
        _foreach_loop_16656 = ((operand_16656 != NULL)) ;
        if (_foreach_loop_16656) {
          var_cas_outResult.appendCString (", ") ;
        }
      }while (_foreach_loop_16656) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_argumentListSignature\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_argumentListSignature (C_Compiler & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_goilTemplateExpressionList  arg_0 = GGS_goilTemplateExpressionList ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_argumentListSignature (inLexique,
                            arg_0
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor *
kArgumentTypeList_argumentListSignature [1] = {& kTypeDescriptor_GGS_goilTemplateExpressionList } ;

const C_galgas_function_descriptor
kFunction_descriptor_argumentListSignature ("argumentListSignature",
                              functionForGenericCall_argumentListSignature,
                              & kTypeDescriptor_GGS_string,
                              1,
                              kArgumentTypeList_argumentListSignature) ;

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkInvocationHasNoArgument"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkInvocationHasNoArgument at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_17587 = (var_cas_inParameterTypeList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_17587.isBuiltAndTrue ()) {
    var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("calling '")).operator_concat (var_cas_inMethodName)).operator_concat (GGS_string ("' on a "))).operator_concat (var_cas_inType.reader_messageGoilTemplateType (inLexique COMMA_SOURCE_FILE_AT_LINE (420)))).operator_concat (GGS_string (" type requires no argument; "))).operator_concat (function_argumentListSignature (inLexique, var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (421))) COMMA_SOURCE_FILE_AT_LINE (422)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkInvocationHasNoArgument\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "templateMethodInvocation"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_templateMethodInvocation (C_Compiler & inLexique,
                                const GGS_goilTemplateType  var_cas_inType,
                                const GGS_goilTemplateValue  var_cas_inValue,
                                const GGS_lstring   var_cas_inMethodName,
                                const GGS_goilTemplateExpressionList   var_cas_inParameterTypeList,
                                GGS_goilTemplateType & var_cas_outResultType,
                                GGS_goilTemplateValue & var_cas_outResultValue COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_templateMethodInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  switch (var_cas_inType.enumValue ()) {
  case GGS_goilTemplateType::enum_boolType:
    {
    const GGS_bool cond_18610 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (441))).operator_isEqual (GGS_string ("string")) ;
    if (cond_18610.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (442)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, (((var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (445))).operator_strictSup (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_string ("true")) : (GGS_string ("false"))) COMMA_SOURCE_FILE_AT_LINE (444)) ;
    }else if (cond_18610.isBuiltAndFalse ()) {
      const GGS_bool cond_18832 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (447))).operator_isEqual (GGS_string ("unsigned")) ;
      if (cond_18832.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (448)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = var_cas_inValue ;
      }else if (cond_18832.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (453)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_unsignedType:
    {
    const GGS_bool cond_19238 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (455))).operator_isEqual (GGS_string ("string")) ;
    if (cond_19238.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (456)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (458)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (458)) COMMA_SOURCE_FILE_AT_LINE (458)) ;
    }else if (cond_19238.isBuiltAndFalse ()) {
      const GGS_bool cond_19509 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (459))).operator_isEqual (GGS_string ("hexString")) ;
      if (cond_19509.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (460)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (462)).reader_hexString (inLexique COMMA_SOURCE_FILE_AT_LINE (462)) COMMA_SOURCE_FILE_AT_LINE (462)) ;
      }else if (cond_19509.isBuiltAndFalse ()) {
        var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (465)) ;
        var_cas_outResultValue.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_stringType:
    {
    const GGS_bool cond_19933 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (467))).operator_isEqual (GGS_string ("HTMLRepresentation")) ;
    if (cond_19933.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (468)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (470)).reader_HTMLRepresentation () COMMA_SOURCE_FILE_AT_LINE (470)) ;
    }else if (cond_19933.isBuiltAndFalse ()) {
      const GGS_bool cond_20231 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (471))).operator_isEqual (GGS_string ("identifierRepresentation")) ;
      if (cond_20231.isBuiltAndTrue ()) {
        ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (472)) ;
        var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
        var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (474)).reader_identifierRepresentation () COMMA_SOURCE_FILE_AT_LINE (474)) ;
      }else if (cond_20231.isBuiltAndFalse ()) {
        const GGS_bool cond_20511 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (475))).operator_isEqual (GGS_string ("lowercaseString")) ;
        if (cond_20511.isBuiltAndTrue ()) {
          ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (476)) ;
          var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
          var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (478)).reader_lowercaseString () COMMA_SOURCE_FILE_AT_LINE (478)) ;
        }else if (cond_20511.isBuiltAndFalse ()) {
          const GGS_bool cond_20786 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (479))).operator_isEqual (GGS_string ("length")) ;
          if (cond_20786.isBuiltAndTrue ()) {
            ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (480)) ;
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (482)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (482)) COMMA_SOURCE_FILE_AT_LINE (482)) ;
          }else if (cond_20786.isBuiltAndFalse ()) {
            const GGS_bool cond_21104 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (483))).operator_isEqual (GGS_string ("stringByCapitalizingFirstCharacter")) ;
            if (cond_21104.isBuiltAndTrue ()) {
              ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (484)) ;
              var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
              var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (486)).reader_stringByCapitalizingFirstCharacter () COMMA_SOURCE_FILE_AT_LINE (486)) ;
            }else if (cond_21104.isBuiltAndFalse ()) {
              const GGS_bool cond_21383 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (487))).operator_isEqual (GGS_string ("uppercaseString")) ;
              if (cond_21383.isBuiltAndTrue ()) {
                ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (488)) ;
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outResultValue = function_valueWithString (inLexique, var_cas_inValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (490)).reader_uppercaseString () COMMA_SOURCE_FILE_AT_LINE (490)) ;
              }else if (cond_21383.isBuiltAndFalse ()) {
                var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (493)) ;
                var_cas_outResultValue.drop () ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
    }
    break ;
  case GGS_goilTemplateType::enum_listType:
    {
    const GGS_bool cond_21794 = (var_cas_inMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (495))).operator_isEqual (GGS_string ("length")) ;
    if (cond_21794.isBuiltAndTrue ()) {
      ::routine_checkInvocationHasNoArgument (inLexique,  var_cas_inType,  var_cas_inMethodName,  var_cas_inParameterTypeList COMMA_SOURCE_FILE_AT_LINE (496)) ;
      var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
      var_cas_outResultValue = function_valueWithUnsigned (inLexique, var_cas_inValue.reader_mMapListValue (inLexique COMMA_SOURCE_FILE_AT_LINE (498)).reader_length ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (498)) COMMA_SOURCE_FILE_AT_LINE (498)) ;
    }else if (cond_21794.isBuiltAndFalse ()) {
      var_cas_inMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this template method is not defined") COMMA_SOURCE_FILE_AT_LINE (501)) ;
      var_cas_outResultValue.drop () ;
      var_cas_outResultType.drop () ;
    }
    }
    break ;
  case GGS_goilTemplateType::kNotBuilt:
    break ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_templateMethodInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_511_17_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (542))).operator_or (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (542))) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (543)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (562))).operator_xor (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (562))) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (563)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_expression_goil_template_expression_parser_511_17_parse (goil_template_scanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_goil_template_expression_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_577_20_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftOperand = var_cas_outValue ;
          GGS_goilTemplateValue var_cas_rightOperand ;
          GGS_goilTemplateType var_cas_firstOperandType = var_cas_outResultType ;
          GGS_goilTemplateType var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outValue.mUnsigned64Value = (var_cas_leftOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (608))).operator_and (var_cas_rightOperand.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (608))) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (609)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_term_goil_template_expression_parser_577_20_parse (goil_template_scanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_goil_template_expression_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_623_22_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (653)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (657))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (657))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (659))).operator_isEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (659))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (661))).operator_isEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (661))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (679)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (683))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (683))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (685))).operator_isNotEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (685))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (687))).operator_isNotEqual (var_cas_rightExpression.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (687))) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (705)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (709))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (709))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (711))).operator_infOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (711))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (731)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (735))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (735))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (737))).operator_supOrEqual (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (737))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (757)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (761))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (761))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (763))).operator_strictSup (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (763))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
      GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
      GGS_goilTemplateValue var_cas_rightExpression ;
      GGS_goilTemplateType var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (783)) ;
      GGS_bool var_cas_result ;
      switch (var_cas_leftType.enumValue ()) {
      case GGS_goilTemplateType::enum_boolType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (787))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (787))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_unsignedType:
        {
        var_cas_result = (var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (789))).operator_strictInf (var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (789))) ;
        }
        break ;
      case GGS_goilTemplateType::enum_listType:
      case GGS_goilTemplateType::enum_stringType:
        {
        var_cas_result = GGS_bool (false) ;
        }
        break ;
      case GGS_goilTemplateType::kNotBuilt:
        break ;
      }
      var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
      var_cas_outValue.mUnsigned64Value = ((var_cas_result).isBuiltAndTrue () ? (GGS_uint64 (1ULL)) : (GGS_uint64 (0ULL))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_relation_factor_goil_template_expression_parser_623_22_parse (goil_template_scanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_goil_template_expression_parser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_804_24_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (835)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (836)).left_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (836)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (836)) COMMA_SOURCE_FILE_AT_LINE (836)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (851)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (852)).right_shift_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (852)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (852)) COMMA_SOURCE_FILE_AT_LINE (852)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (867)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (868)).add_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (868)) COMMA_SOURCE_FILE_AT_LINE (868)) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (883)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (884)).substract_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (884)) COMMA_SOURCE_FILE_AT_LINE (884)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_simple_expression_goil_template_expression_parser_804_24_parse (goil_template_scanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_goil_template_expression_parser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_894_11_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (925)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (926)).multiply_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (926)) COMMA_SOURCE_FILE_AT_LINE (926)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (941)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (942)).divide_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (942)) COMMA_SOURCE_FILE_AT_LINE (942)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          GGS_goilTemplateValue var_cas_leftExpression = var_cas_outValue ;
          GGS_goilTemplateType var_cas_leftType = var_cas_outResultType ;
          GGS_goilTemplateValue var_cas_rightExpression ;
          GGS_goilTemplateType var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (957)) ;
          var_cas_outValue.mUnsigned64Value = var_cas_leftExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (958)).modulo_operation (inLexique, var_cas_rightExpression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (958)) COMMA_SOURCE_FILE_AT_LINE (958)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_term_goil_template_expression_parser_894_11_parse (goil_template_scanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_goil_template_expression_parser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_968_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_outValue, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_968_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_994_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expression ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_expression, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL).substract_operation (inLexique, var_cas_expression.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)) COMMA_SOURCE_FILE_AT_LINE (1014)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1018)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_994_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1027_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_value ;
  GGS_goilTemplateType var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_value, var_cas_operandType) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new ((var_cas_value.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1047))).operator_tilde (), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  ::routine_checkBitComplementOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1051)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1027_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1060_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_systemConfig  /* var_cas_inCfg */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (1ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1060_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_yes) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1083_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_systemConfig  /* var_cas_inCfg */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1083_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_no) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1106_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_systemConfig  /* var_cas_inCfg */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (var_cas_literalInt.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1117)), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1106_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1130_13_ (goil_template_scanner & inLexique,
                                const GGS_string /* var_cas_inPrefix */,
                                const GGS_string /* var_cas_inPath */,
                                const GGS_systemConfig  /* var_cas_inCfg */,
                                const GGS_goilTemplateVariableMap  /* var_cas_inVariableMap */,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_literalString ;
  inLexique.assignFromAttribute_a_string (var_cas_literalString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_string) COMMA_HERE) ;
  var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1141)), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
  var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1130_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1154_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  GGS_goilTemplateValue var_cas_expressionValue ;
  GGS_goilTemplateType var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
  GGS_lstring  var_cas_templateMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  GGS_goilTemplateExpressionList  var_cas_expressionList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
  switch (select_goil_template_expression_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_expressionList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_goil_template_expression_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
  ::routine_templateMethodInvocation (inLexique,  var_cas_expressionType,  var_cas_expressionValue,  var_cas_templateMethodName,  var_cas_expressionList,  var_cas_outResultType,  var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1200)) ;
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1154_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5B_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_5 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_6 = true ;
        while (syntaxRepeat_6) {
            nt_expression_parse (inLexique) ;
          switch (select_goil_template_expression_parser_6 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_6 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Implementation of routine "typeError"                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_typeError (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFunctionName,
                                const GGS_type  var_cas_inActualType,
                                const GGS_string  var_cas_inExpectedTypeName,
                                const GGS_uint   var_cas_inParameterIndex COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_typeError at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_m = ((((GGS_string ("the function requires the parameter ")).operator_concat (var_cas_inParameterIndex.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)))).operator_concat (GGS_string (" to be "))).operator_concat (var_cas_inExpectedTypeName)).operator_concat (GGS_string ("; its type is ")) ;
  const GGS_bool cond_44428 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
  if (cond_44428.isBuiltAndTrue ()) {
    var_cas_m.appendCString ("boolean") ;
  }else if (cond_44428.isBuiltAndFalse ()) {
    const GGS_bool cond_44488 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
    if (cond_44488.isBuiltAndTrue ()) {
      var_cas_m.appendCString ("unsigned") ;
    }else if (cond_44488.isBuiltAndFalse ()) {
      const GGS_bool cond_44545 = (var_cas_inActualType).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
      if (cond_44545.isBuiltAndTrue ()) {
        var_cas_m.appendCString ("string") ;
      }else if (cond_44545.isBuiltAndFalse ()) {
        var_cas_m.appendCString ("a not allowed type") ;
      }
    }
  }
  var_cas_inFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_m COMMA_SOURCE_FILE_AT_LINE (1237)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_typeError\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1241_13_ (goil_template_scanner & inLexique,
                                const GGS_string var_cas_inPrefix,
                                const GGS_string var_cas_inPath,
                                const GGS_systemConfig  var_cas_inCfg,
                                const GGS_goilTemplateVariableMap  var_cas_inVariableMap,
                                GGS_goilTemplateValue &var_cas_outValue,
                                GGS_goilTemplateType &var_cas_outResultType) {
  GGS_lstring  var_cas_functionOrVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionOrVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_7 (inLexique)) {
    case 1 : {
      const GGS_goilTemplateVariableMap  temp_45010 = var_cas_inVariableMap ;
      if (temp_45010.isBuilt ()) {
        temp_45010 (HERE)->method_searchKey (inLexique, var_cas_functionOrVariableName, var_cas_outResultType, var_cas_outValue COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      }
      } break ;
    case 2 : {
      GGS_function var_cas_f ;
      const GGS_bool cond_45329 = (GGS_function::constructor_isFunctionDefined (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)))).operator_not () ;
      if (cond_45329.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("there is no '")).operator_concat (var_cas_functionOrVariableName)).operator_concat (GGS_string ("' function defined in GOIL run time")) COMMA_SOURCE_FILE_AT_LINE (1258)) ;
        var_cas_f.drop () ;
      }else if (cond_45329.isBuiltAndFalse ()) {
        var_cas_f = GGS_function::constructor_functionWithName (var_cas_functionOrVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1259))) ;
      }
      GGS_goilTemplateExpressionList  var_cas_actualArgumentList = GGS_goilTemplateExpressionList ::constructor_emptyList () ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            GGS_goilTemplateValue var_cas_expression ;
            GGS_goilTemplateType var_cas_resultType ;
            nt_expression_ (inLexique, var_cas_inPrefix, var_cas_inPath, var_cas_inCfg, var_cas_inVariableMap, var_cas_expression, var_cas_resultType) ;
            var_cas_actualArgumentList.addAssign_operation (var_cas_expression, var_cas_resultType) ;
          switch (select_goil_template_expression_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      GGS_objectlist  var_cas_actualArgumentObjectList = GGS_objectlist ::constructor_emptyList () ;
      GGS_typelist  var_cas_completeFormalParameterList = var_cas_f.reader_formalParameterTypeList () ;
      GGS_type automatic_var_0 ;
      var_cas_completeFormalParameterList.modifier_popFirst (inLexique, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (1287)) ;
      const GGS_typelist  var_cas_formalParameterList = var_cas_completeFormalParameterList ;
      const GGS_bool cond_46924 = (var_cas_formalParameterList.reader_length ().substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1289))).operator_isNotEqual (var_cas_actualArgumentList.reader_length ()) ;
      if (cond_46924.isBuiltAndTrue ()) {
        var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("this function is invoked with ")).operator_concat (var_cas_actualArgumentList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1291)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_actualArgumentList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string (""))))).operator_concat (GGS_string (", but requires "))).operator_concat (var_cas_formalParameterList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)))).operator_concat (GGS_string (" parameter"))).operator_concat ((((var_cas_formalParameterList.reader_length ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("s")) : (GGS_string ("")))) COMMA_SOURCE_FILE_AT_LINE (1297)) ;
        var_cas_outValue.drop () ;
        var_cas_outResultType.drop () ;
      }else if (cond_46924.isBuiltAndFalse ()) {
        GGS_uint  var_cas_idx = GGS_uint (1U) ;
        {
          GGS_typelist::cEnumerator enumerator_46990 (var_cas_formalParameterList, true) ;
          const GGS_typelist::cElement * operand_46990 = NULL ;
          GGS_goilTemplateExpressionList::cEnumerator enumerator_47029 (var_cas_actualArgumentList, true) ;
          const GGS_goilTemplateExpressionList::cElement * operand_47029 = NULL ;
          while (((operand_46990 = enumerator_46990.nextObject ()))
              && ((operand_47029 = enumerator_47029.nextObject ()))) {
            macroValidPointer (operand_46990) ;
            macroValidPointer (operand_47029) ;
            switch (operand_47029->mType.enumValue ()) {
            case GGS_goilTemplateType::enum_boolType:
              {
              const GGS_bool cond_47238 = (operand_46990->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
              if (cond_47238.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_46990->mValue,  GGS_string ("boolean"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1304)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation ((((operand_47029->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1306))).operator_isEqual (GGS_uint64 (0ULL))).isBuiltAndTrue () ? (GGS_bool (false)) : (GGS_bool (true))).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_unsignedType:
              {
              const GGS_bool cond_47526 = (operand_46990->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
              if (cond_47526.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_46990->mValue,  GGS_string ("unsigned"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1309)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_47029->mValue.reader_mUnsigned64Value (inLexique COMMA_SOURCE_FILE_AT_LINE (1311)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_stringType:
              {
              const GGS_bool cond_47776 = (operand_46990->mValue).operator_isNotEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_47776.isBuiltAndTrue ()) {
                ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_46990->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1314)) ;
              }
              var_cas_actualArgumentObjectList.addAssign_operation (operand_47029->mValue.reader_mStringValue (inLexique COMMA_SOURCE_FILE_AT_LINE (1316)).reader_object ()) ;
              }
              break ;
            case GGS_goilTemplateType::enum_listType:
              {
              ::routine_typeError (inLexique,  var_cas_functionOrVariableName,  operand_46990->mValue,  GGS_string ("string"),  var_cas_idx COMMA_SOURCE_FILE_AT_LINE (1318)) ;
              }
              break ;
            case GGS_goilTemplateType::kNotBuilt:
              break ;
            }
            var_cas_idx.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (1320)) ;
          }
        }
        var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
        var_cas_outValue = GGS_goilTemplateValue::constructor_new (GGS_uint64 (0ULL), GGS_string (""), GGS_goilTemplateFieldMapList ::constructor_emptyList ()) ;
        const GGS_bool cond_49127 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
        if (cond_49127.isBuiltAndTrue ()) {
          const GGS_object var_cas_result = var_cas_f.reader_invoke (inLexique, var_cas_actualArgumentObjectList, var_cas_functionOrVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1325)) COMMA_SOURCE_FILE_AT_LINE (1325)) ;
          const GGS_bool cond_48550 = (var_cas_result.reader_objectStaticType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_uint64)) ;
          if (cond_48550.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_goilTemplateType::constructor_unsignedType (inLexique COMMA_HERE) ;
            var_cas_outValue.mUnsigned64Value = GGS_uint64::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1328)) ;
          }else if (cond_48550.isBuiltAndFalse ()) {
            const GGS_bool cond_48773 = (var_cas_result.reader_objectStaticType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_bool)) ;
            if (cond_48773.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_goilTemplateType::constructor_boolType (inLexique COMMA_HERE) ;
              var_cas_outValue.mUnsigned64Value = GGS_bool::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1331)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (1331)) ;
            }else if (cond_48773.isBuiltAndFalse ()) {
              const GGS_bool cond_48988 = (var_cas_result.reader_objectStaticType ()).operator_isEqual (GGS_type  (& kTypeDescriptor_GGS_string)) ;
              if (cond_48988.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_goilTemplateType::constructor_stringType (inLexique COMMA_HERE) ;
                var_cas_outValue.mStringValue = GGS_string::castFromObject (inLexique, var_cas_result, var_cas_functionOrVariableName COMMA_SOURCE_FILE_AT_LINE (1334)) ;
              }else if (cond_48988.isBuiltAndFalse ()) {
                var_cas_functionOrVariableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this function does not return an unsigned, boolean or string value") COMMA_SOURCE_FILE_AT_LINE (1337)) ;
              }
            }
          }
        }
      }
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void goil_template_expression_parser::
pr_factor_goil_template_expression_parser_1241_13_parse (goil_template_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1_identifier) COMMA_HERE) ;
  switch (select_goil_template_expression_parser_7 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__28_) COMMA_HERE) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
            nt_expression_parse (inLexique) ;
          switch (select_goil_template_expression_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_template_scanner::goil_template_scanner_1__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

