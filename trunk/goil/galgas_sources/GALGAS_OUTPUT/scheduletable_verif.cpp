//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'scheduletable_verif.cpp'                       *
//                       Generated by version 1.9.12                         *
//                       may 17th, 2010, at 15h23'54"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != 742
  #error "This file has been compiled with a version of GALGAS that uses libpm version 742, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "scheduletable_verif.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "scheduletable_verif.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "schedule_tables_well_formed"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_schedule_tables_well_formed (C_Compiler & inLexique,
                                const GGS_scheduletable_map   var_cas_sts,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_schedule_tables_well_formed at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_scheduletable_map::cEnumerator enumerator_509 (var_cas_sts, true) ;
    const GGS_scheduletable_map::cElement * operand_509 = NULL ;
    while (((operand_509 = enumerator_509.nextObject ()))) {
      macroValidPointer (operand_509) ;
      GGS_bool var_cas_perio = function_getBool (inLexique, operand_509->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (18)), GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (18)) ;
      GGS_uint64  var_cas_len = function_uint64OrError (inLexique, operand_509->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (20)), GGS_string ("LENGTH") COMMA_SOURCE_FILE_AT_LINE (20)) ;
      { const GGS_ltgt_sync_obj _var_1306 = operand_509->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (23)) ; // CAST instruction
        if (_var_1306.getPtr () != NULL) {
          macroValidPointer (_var_1306.getPtr ()) ;
          if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_1306.getPtr ()))) {
            const GGS_ltgt_sync_true var_cas_sync (_var_1306.getPtr ()) ;
            const GGS_bool cond_1031 = (var_cas_perio).operator_isEqual (GGS_bool (false)) ;
            if (cond_1031.isBuiltAndTrue ()) {
              operand_509->mInfo.scheduletable.reader_periodic (inLexique COMMA_SOURCE_FILE_AT_LINE (26)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (26)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("A synchronized schedule table shall be repeating otherwise, synchronisation can't be done.") COMMA_SOURCE_FILE_AT_LINE (27)) ;
            }
            GGS_uint64  var_cas_prec = function_uint64OrError (inLexique, var_cas_sync.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (28)), GGS_string ("PRECISION") COMMA_SOURCE_FILE_AT_LINE (28)) ;
            const GGS_bool cond_1289 = (var_cas_prec).operator_strictSup (var_cas_len.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (29))) ;
            if (cond_1289.isBuiltAndTrue ()) {
              var_cas_sync.reader_precision (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (30)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS438 - An explicit schedule table shall have a precision in the range 0 to duration.") COMMA_SOURCE_FILE_AT_LINE (31)) ;
            }
          }else{
          }
        }
      }
      const GGS_bool cond_1483 = (var_cas_len).operator_isEqual (GGS_uint64 (0ULL)) ;
      if (cond_1483.isBuiltAndTrue ()) {
        operand_509->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (36)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("The LENGTH attribute should not be 0") COMMA_SOURCE_FILE_AT_LINE (37)) ;
      }
      GGS_expiry_point_list  var_cas_eps = operand_509->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (39)) ;
      GGS_uint  var_cas_exp_pt_number = var_cas_eps.reader_length () ;
      const GGS_bool cond_1780 = (var_cas_exp_pt_number).operator_isEqual (GGS_uint (0U)) ;
      if (cond_1780.isBuiltAndTrue ()) {
        operand_509->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS401 - no EXPIRY_POINT found for SCHEDULETABLE ")).operator_concat (operand_509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (44))) COMMA_SOURCE_FILE_AT_LINE (45)) ;
      }
      {
        GGS_expiry_point_list::cEnumerator enumerator_1857 (var_cas_eps, true) ;
        const GGS_expiry_point_list::cElement * operand_1857 = NULL ;
        while (((operand_1857 = enumerator_1857.nextObject ()))) {
          macroValidPointer (operand_1857) ;
          const GGS_bool cond_2009 = (operand_1857->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (49)).reader_length ()).operator_isEqual (GGS_uint (0U)) ;
          if (cond_2009.isBuiltAndTrue ()) {
            operand_1857->point.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OS407 - no ACTION found for EXPIRY_POINT ")).operator_concat (operand_1857->point.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (50)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (50))) COMMA_SOURCE_FILE_AT_LINE (51)) ;
          }
        }
      }
      GGS_uint64  var_cas_previous_offset = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_first_delay = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_first_maxret = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_first_maxadv = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_last_delay = GGS_uint64 (0ULL) ;
      GGS_bool var_cas_first_time = GGS_bool (true) ;
      GGS_uint64  var_cas_previous_delay = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_maxret = GGS_uint64 (0ULL) ;
      GGS_uint64  var_cas_maxadv = GGS_uint64 (0ULL) ;
      GGS_uint  var_cas_i = GGS_uint (0U) ;
      GGS_counter_map  var_cas_counters = var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
      const GGS_bool cond_10248 = var_cas_counters.reader_hasKey (operand_509->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (72)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (72))) ;
      if (cond_10248.isBuiltAndTrue ()) {
        GGS_counter_obj  var_cas_cnt ;
        const GGS_counter_map  temp_2747 = var_cas_counters ;
        if (temp_2747.isBuilt ()) {
          temp_2747 (HERE)->method_getCounter (inLexique, operand_509->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (74)), var_cas_cnt COMMA_SOURCE_FILE_AT_LINE (74)) ;
        }
        GGS_uint64  var_cas_mav = function_uint32_or_error (inLexique, var_cas_cnt.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), GGS_string ("MAXALLOWEDVALUE") COMMA_SOURCE_FILE_AT_LINE (75)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
        GGS_uint64  var_cas_mc = function_uint32_or_error (inLexique, var_cas_cnt.reader_min_cycle (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), GGS_string ("MINCYCLE") COMMA_SOURCE_FILE_AT_LINE (76)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
        GGS_bool var_cas_first_ep = GGS_bool (true) ;
        GGS_uint64  var_cas_previous_offset = GGS_uint64 (0ULL) ;
        {
          GGS_expiry_point_list::cEnumerator enumerator_3025 (var_cas_eps, true) ;
          const GGS_expiry_point_list::cElement * operand_3025 = NULL ;
          while (((operand_3025 = enumerator_3025.nextObject ()))) {
            macroValidPointer (operand_3025) ;
            var_cas_i = var_cas_i.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (82)) ;
            GGS_uint64  var_cas_offset = function_uint64OrError (inLexique, operand_3025->point.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (86)), GGS_string ("OS442 - OFFSET") COMMA_SOURCE_FILE_AT_LINE (86)) ;
            GGS_location  var_cas_off_loc = operand_3025->point.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (87)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (87)) ;
            const GGS_bool cond_3480 = (var_cas_offset).operator_strictSup (var_cas_len) ;
            if (cond_3480.isBuiltAndTrue ()) {
              var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("OFFSET of expiry point is greater than the LENGTH of the Schedule Table ")).operator_concat (operand_509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))) COMMA_SOURCE_FILE_AT_LINE (90)) ;
            }
            var_cas_previous_delay = var_cas_offset.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (95)) ;
            const GGS_bool cond_3848 = (var_cas_previous_offset).operator_isEqual (GGS_uint64 (0ULL)) ;
            if (cond_3848.isBuiltAndTrue ()) {
              var_cas_first_delay = var_cas_offset ;
            }
            GGS_location  var_cas_adj_loc = operand_3025->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (100)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (100)) ;
            { const GGS_adjustable_obj _var_5094 = operand_3025->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (101)) ; // CAST instruction
              if (_var_5094.getPtr () != NULL) {
                macroValidPointer (_var_5094.getPtr ()) ;
                if (typeid (cPtr_adjustable_true) == typeid (* (_var_5094.getPtr ()))) {
                  const GGS_adjustable_true var_cas_adj (_var_5094.getPtr ()) ;
                  var_cas_maxret = function_uint64OrError (inLexique, var_cas_adj.reader_max_retard (inLexique COMMA_SOURCE_FILE_AT_LINE (103)), GGS_string ("MAX_RETARD") COMMA_SOURCE_FILE_AT_LINE (103)) ;
                  var_cas_maxadv = function_uint64OrError (inLexique, var_cas_adj.reader_max_advance (inLexique COMMA_SOURCE_FILE_AT_LINE (104)), GGS_string ("MAX_ADVANCE") COMMA_SOURCE_FILE_AT_LINE (104)) ;
                  const GGS_bool cond_4404 = (var_cas_previous_offset).operator_isEqual (GGS_uint64 (0ULL)) ;
                  if (cond_4404.isBuiltAndTrue ()) {
                    var_cas_first_maxret = var_cas_maxret ;
                    var_cas_first_maxadv = var_cas_maxadv ;
                  }else if (cond_4404.isBuiltAndFalse ()) {
                    const GGS_bool cond_4725 = (var_cas_maxret).operator_strictSup (var_cas_previous_delay.substract_operation (inLexique, var_cas_mc COMMA_SOURCE_FILE_AT_LINE (111))) ;
                    if (cond_4725.isBuiltAndTrue ()) {
                      var_cas_adj_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("OS436 - In expiry point at offset = ")).operator_concat (var_cas_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (", MaxRetard ("))).operator_concat (var_cas_maxret.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (") should be inferior to the previous delay ("))).operator_concat (var_cas_previous_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (") minus MINCYCLE of the counter ("))).operator_concat (var_cas_mc.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (113)) ;
                    }
                    const GGS_bool cond_5040 = (var_cas_maxadv).operator_strictSup (var_cas_len.substract_operation (inLexique, var_cas_previous_delay COMMA_SOURCE_FILE_AT_LINE (114))) ;
                    if (cond_5040.isBuiltAndTrue ()) {
                      var_cas_adj_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("OS437 - In expiry point at offset = ")).operator_concat (var_cas_offset.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115)))).operator_concat (GGS_string (", MaxAdvance ("))).operator_concat (var_cas_maxadv.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115)))).operator_concat (GGS_string (") should be inferior to duration ("))).operator_concat (var_cas_len.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115)))).operator_concat (GGS_string (") minus the previous delay("))).operator_concat (var_cas_previous_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (116)) ;
                    }
                  }
                }else{
                }
              }
            }
            const GGS_bool cond_5761 = (var_cas_offset.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (123))).operator_strictInf (var_cas_mc) ;
            if (cond_5761.isBuiltAndTrue ()) {
              const GGS_bool cond_5575 = var_cas_first_ep ;
              if (cond_5575.isBuiltAndTrue ()) {
                const GGS_bool cond_5556 = (var_cas_offset).operator_isNotEqual (GGS_uint64 (0ULL)) ;
                if (cond_5556.isBuiltAndTrue ()) {
                  var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS443 - OFFSET of first expiry point is lower than MINCYCLE of the driving counter and not equal to 0.") COMMA_SOURCE_FILE_AT_LINE (127)) ;
                }
              }else if (cond_5575.isBuiltAndFalse ()) {
                var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("OS408 - Delay between expiry point number ")).operator_concat (var_cas_i.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (129)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_i.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129)))).operator_concat (GGS_string (" is lower than MINCYCLE of the driving counter")) COMMA_SOURCE_FILE_AT_LINE (130)) ;
              }
            }
            const GGS_bool cond_6170 = (var_cas_offset.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (132))).operator_strictSup (var_cas_mav) ;
            if (cond_6170.isBuiltAndTrue ()) {
              const GGS_bool cond_5980 = var_cas_first_ep ;
              if (cond_5980.isBuiltAndTrue ()) {
                var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS443 - OFFSET of first expiry point is greater than MAXALLOWEDVALUE of the driving counter") COMMA_SOURCE_FILE_AT_LINE (135)) ;
              }else if (cond_5980.isBuiltAndFalse ()) {
                var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("OS408 - Delay between expiry point number ")).operator_concat (var_cas_i.substract_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (136)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_i.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136)))).operator_concat (GGS_string (" is greater than MAXALLOWEDVALUE of the driving counter")) COMMA_SOURCE_FILE_AT_LINE (137)) ;
              }
            }
            var_cas_first_ep = GGS_bool (false) ;
            var_cas_previous_offset = var_cas_offset ;
            const GGS_bool cond_7990 = (var_cas_i).operator_isEqual (var_cas_exp_pt_number) ;
            if (cond_7990.isBuiltAndTrue ()) {
              { const GGS_adjustable_obj _var_7208 = operand_3025->point.reader_adjust (inLexique COMMA_SOURCE_FILE_AT_LINE (145)) ; // CAST instruction
                if (_var_7208.getPtr () != NULL) {
                  macroValidPointer (_var_7208.getPtr ()) ;
                  if (typeid (cPtr_adjustable_true) == typeid (* (_var_7208.getPtr ()))) {
                    var_cas_last_delay = var_cas_len.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (147)).add_operation (inLexique, var_cas_first_delay COMMA_SOURCE_FILE_AT_LINE (147)) ;
                    const GGS_bool cond_6892 = (var_cas_first_maxret).operator_strictSup (var_cas_last_delay.substract_operation (inLexique, var_cas_mc COMMA_SOURCE_FILE_AT_LINE (148))) ;
                    if (cond_6892.isBuiltAndTrue ()) {
                      operand_509->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("OS436 - In first expiry point, MaxRetard (")).operator_concat (var_cas_first_maxret.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149)))).operator_concat (GGS_string (") should be inferior to the previous delay ("))).operator_concat (var_cas_last_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149)))).operator_concat (GGS_string (") minus MINCYCLE of the counter ("))).operator_concat (var_cas_mc.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (150)) ;
                    }
                    const GGS_bool cond_7182 = (var_cas_first_maxadv).operator_strictSup (var_cas_len.substract_operation (inLexique, var_cas_first_delay COMMA_SOURCE_FILE_AT_LINE (151))) ;
                    if (cond_7182.isBuiltAndTrue ()) {
                      operand_509->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("OS437 - In first expiry point, MaxAdvance (")).operator_concat (var_cas_first_maxadv.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152)))).operator_concat (GGS_string (") should be inferior to duration ("))).operator_concat (var_cas_len.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152)))).operator_concat (GGS_string (") minus the first delay("))).operator_concat (var_cas_first_delay.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152)))).operator_concat (GGS_string (").")) COMMA_SOURCE_FILE_AT_LINE (153)) ;
                    }
                  }else{
                  }
                }
              }
              GGS_uint64  var_cas_final_delay = var_cas_len.substract_operation (inLexique, var_cas_previous_offset COMMA_SOURCE_FILE_AT_LINE (156)) ;
              const GGS_bool cond_7738 = (var_cas_final_delay).operator_isEqual (GGS_uint64 (0ULL)) ;
              if (cond_7738.isBuiltAndTrue ()) {
                const GGS_bool cond_7718 = var_cas_perio ;
                if (cond_7718.isBuiltAndTrue ()) {
                  var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS427 - Final delay can be equal to 0 only for single-shot schedule table and ")).operator_concat (operand_509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (162)))).operator_concat (GGS_string (" is a repeating one")) COMMA_SOURCE_FILE_AT_LINE (163)) ;
                }
              }else if (cond_7738.isBuiltAndFalse ()) {
                const GGS_bool cond_7948 = ((var_cas_final_delay).operator_strictInf (var_cas_mc)).operator_or ((var_cas_final_delay).operator_strictSup (var_cas_mav)) ;
                if (cond_7948.isBuiltAndTrue ()) {
                  var_cas_off_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS444 - Final delay should be within MINCYCLE and MAXALLOWEDVALUE of the driving counter") COMMA_SOURCE_FILE_AT_LINE (167)) ;
                }
              }
            }
          }
        }
        { const GGS_ltgt_sync_obj _var_9285 = operand_509->mInfo.scheduletable.reader_ltgt_sync (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) ; // CAST instruction
          if (_var_9285.getPtr () != NULL) {
            macroValidPointer (_var_9285.getPtr ()) ;
            if (typeid (cPtr_ltgt_sync_true) == typeid (* (_var_9285.getPtr ()))) {
              const GGS_ltgt_sync_true var_cas_sst (_var_9285.getPtr ()) ;
              const GGS_bool cond_8958 = (var_cas_sst.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (177)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177))).operator_isEqual (GGS_string ("IMPLICIT")) ;
              if (cond_8958.isBuiltAndTrue ()) {
                { const GGS_autostart_obj _var_8694 = operand_509->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) ; // CAST instruction
                  if (_var_8694.getPtr () != NULL) {
                    macroValidPointer (_var_8694.getPtr ()) ;
                    if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_8694.getPtr ()))) {
                      operand_509->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS430 - An IMPLICIT schedule table should be started in Absolute mode only") COMMA_SOURCE_FILE_AT_LINE (181)) ;
                    }else if (typeid (cPtr_sd_autostart_synchron) == typeid (* (_var_8694.getPtr ()))) {
                      operand_509->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("OS430 - An IMPLICIT schedule table should be started in Absolute mode only") COMMA_SOURCE_FILE_AT_LINE (183)) ;
                    }else{
                    }
                  }
                }
                const GGS_bool cond_8941 = (var_cas_len).operator_isNotEqual (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (185))) ;
                if (cond_8941.isBuiltAndTrue ()) {
                  operand_509->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (186)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (186)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS429 - An IMPLICIT schedule table should have a duration equal to OSMAXALLOWEDVALUE + 1 (")).operator_concat (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (186)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186)))).operator_concat (GGS_string (") of its counter.")) COMMA_SOURCE_FILE_AT_LINE (187)) ;
                }
              }
              const GGS_bool cond_9266 = (var_cas_sst.reader_strategy (inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))).operator_isEqual (GGS_string ("EXPLICIT")) ;
              if (cond_9266.isBuiltAndTrue ()) {
                const GGS_bool cond_9249 = (var_cas_len).operator_strictSup (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (190))) ;
                if (cond_9249.isBuiltAndTrue ()) {
                  operand_509->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS431 - An EXPLICIT schedule table shouldn't have a duration greater than OSMAXALLOWEVALUE + 1 (")).operator_concat (var_cas_mav.add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (191)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191)))).operator_concat (GGS_string (") of its counter.")) COMMA_SOURCE_FILE_AT_LINE (192)) ;
                }
              }
            }else{
            }
          }
        }
        { const GGS_autostart_obj _var_10234 = operand_509->mInfo.scheduletable.reader_autostart (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ; // CAST instruction
          if (_var_10234.getPtr () != NULL) {
            macroValidPointer (_var_10234.getPtr ()) ;
            if (typeid (cPtr_sd_autostart_relative) == typeid (* (_var_10234.getPtr ()))) {
              const GGS_sd_autostart_relative var_cas_relative_data (_var_10234.getPtr ()) ;
              const GGS_bool cond_9726 = (var_cas_relative_data.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (200)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (200))).operator_isEqual (GGS_uint64 (0ULL)) ;
              if (cond_9726.isBuiltAndTrue ()) {
                operand_509->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS332 - ")).operator_concat (operand_509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (201)))).operator_concat (GGS_string (" autostart's offset is equal to 0.")) COMMA_SOURCE_FILE_AT_LINE (202)) ;
              }else if (cond_9726.isBuiltAndFalse ()) {
                const GGS_bool cond_9957 = (var_cas_relative_data.reader_offset (inLexique COMMA_SOURCE_FILE_AT_LINE (202)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (202))).operator_strictSup (var_cas_mav.substract_operation (inLexique, var_cas_first_delay COMMA_SOURCE_FILE_AT_LINE (202))) ;
                if (cond_9957.isBuiltAndTrue ()) {
                  operand_509->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS276 - ")).operator_concat (operand_509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (203)))).operator_concat (GGS_string (" autostart's offset is greater than MAXALLOWEDVALUE of the driving counter minus the Initial Offset.")) COMMA_SOURCE_FILE_AT_LINE (204)) ;
                }
              }
            }else if (typeid (cPtr_sd_autostart_absolute) == typeid (* (_var_10234.getPtr ()))) {
              const GGS_sd_autostart_absolute var_cas_absolute_data (_var_10234.getPtr ()) ;
              const GGS_bool cond_10215 = (var_cas_absolute_data.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (206)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (206))).operator_strictSup (var_cas_mav) ;
              if (cond_10215.isBuiltAndTrue ()) {
                operand_509->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS349 - ")).operator_concat (operand_509->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (207)))).operator_concat (GGS_string (" autostart's offset is greater than MAXALLOWEDVALUE of the driving counter.")) COMMA_SOURCE_FILE_AT_LINE (208)) ;
              }
            }else{
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_schedule_tables_well_formed\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of routine "schedule_tables_counters_exist_and_compatible"  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_schedule_tables_counters_exist_and_compatible (C_Compiler & inLexique,
                                const GGS_scheduletable_map   var_cas_sts,
                                const GGS_counter_map   var_cas_cnts COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_schedule_tables_counters_exist_and_compatible at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_scheduletable_map::cEnumerator enumerator_10411 (var_cas_sts, true) ;
    const GGS_scheduletable_map::cElement * operand_10411 = NULL ;
    while (((operand_10411 = enumerator_10411.nextObject ()))) {
      macroValidPointer (operand_10411) ;
      GGS_lstring  var_cas_cnt = operand_10411->mInfo.scheduletable.reader_counter (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) ;
      const GGS_bool cond_10655 = ((var_cas_cnts.reader_hasKey (var_cas_cnt.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222)))).operator_not ()).operator_and ((var_cas_cnt.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (222))).operator_isNotEqual (GGS_string ("SystemCounter"))) ;
      if (cond_10655.isBuiltAndTrue ()) {
        var_cas_cnt.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("OS409 - Counter is not defined in ")).operator_concat (operand_10411->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)))).operator_concat (GGS_string (" !")) COMMA_SOURCE_FILE_AT_LINE (224)) ;
      }else if (cond_10655.isBuiltAndFalse ()) {
        GGS_uint64  var_cas_len = GGS_uint64 (0ULL) ;
        GGS_location  var_cas_loc = GGS_location (inLexique) ;
        { const GGS_basic_type _var_10931 = operand_10411->mInfo.scheduletable.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (227)) ; // CAST instruction
          if (_var_10931.getPtr () != NULL) {
            macroValidPointer (_var_10931.getPtr ()) ;
            if (typeid (cPtr_uint64_class) == typeid (* (_var_10931.getPtr ()))) {
              const GGS_uint64_class var_cas_ui (_var_10931.getPtr ()) ;
              var_cas_len = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ;
              var_cas_loc = var_cas_ui.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (228)) ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, incorrect datatype for LENGTH attribute of schedule table ")).operator_concat (operand_10411->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (229))) COMMA_SOURCE_FILE_AT_LINE (230)) ;
            }
          }
        }
        GGS_counter_obj  var_cas_cpt ;
        const GGS_counter_map  temp_11096 = var_cas_cnts ;
        if (temp_11096.isBuilt ()) {
          temp_11096 (HERE)->method_getCounter (inLexique, var_cas_cnt, var_cas_cpt COMMA_SOURCE_FILE_AT_LINE (235)) ;
        }
        GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
        { const GGS_basic_type _var_11380 = var_cas_cpt.reader_max_allowed_value (inLexique COMMA_SOURCE_FILE_AT_LINE (238)) ; // CAST instruction
          if (_var_11380.getPtr () != NULL) {
            macroValidPointer (_var_11380.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_11380.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_11380.getPtr ()) ;
              var_cas_max = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (240)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (240)) ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, incorrect datatype for MAXALLOWEDVALUE attribute of counter ")).operator_concat (var_cas_cnt.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (242))) COMMA_SOURCE_FILE_AT_LINE (243)) ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_schedule_tables_counters_exist_and_compatible\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "schedule_tables_tasks_and_events_exist"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_schedule_tables_tasks_and_events_exist (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_task_map   var_cas_tasks COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_schedule_tables_tasks_and_events_exist at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_scheduletable_map::cEnumerator enumerator_11582 (var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (256)), true) ;
    const GGS_scheduletable_map::cElement * operand_11582 = NULL ;
    while (((operand_11582 = enumerator_11582.nextObject ()))) {
      macroValidPointer (operand_11582) ;
      {
        GGS_expiry_point_list::cEnumerator enumerator_11658 (operand_11582->mInfo.scheduletable.reader_exp_points (inLexique COMMA_SOURCE_FILE_AT_LINE (257)), true) ;
        const GGS_expiry_point_list::cElement * operand_11658 = NULL ;
        while (((operand_11658 = enumerator_11658.nextObject ()))) {
          macroValidPointer (operand_11658) ;
          GGS_lstring  var_cas_ep_name = operand_11658->point.reader_name (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
          {
            GGS_action_list::cEnumerator enumerator_11731 (operand_11658->point.reader_actions (inLexique COMMA_SOURCE_FILE_AT_LINE (259)), true) ;
            const GGS_action_list::cElement * operand_11731 = NULL ;
            while (((operand_11731 = enumerator_11731.nextObject ()))) {
              macroValidPointer (operand_11731) ;
              { const GGS_action_obj _var_12952 = operand_11731->actionobj ; // CAST instruction
                if (_var_12952.getPtr () != NULL) {
                  macroValidPointer (_var_12952.getPtr ()) ;
                  if (typeid (cPtr_activatetask_action) == typeid (* (_var_12952.getPtr ()))) {
                    const GGS_activatetask_action var_cas_ata (_var_12952.getPtr ()) ;
                    const GGS_bool cond_12003 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (262)).reader_hasKey (var_cas_ata.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (262)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (262)))).operator_not () ;
                    if (cond_12003.isBuiltAndTrue ()) {
                      operand_11731->actionobj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (263)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute of action does not reference an existing task") COMMA_SOURCE_FILE_AT_LINE (264)) ;
                    }
                  }else if (typeid (cPtr_setevent_action) == typeid (* (_var_12952.getPtr ()))) {
                    const GGS_setevent_action var_cas_sea (_var_12952.getPtr ()) ;
                    const GGS_bool cond_12234 = (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_hasKey (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (266)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_not () ;
                    if (cond_12234.isBuiltAndTrue ()) {
                      operand_11731->actionobj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK attribute of action does not reference an existing task") COMMA_SOURCE_FILE_AT_LINE (268)) ;
                    }
                    GGS_task_obj  var_cas_task_data ;
                    GGS_lstringlist  var_cas_known_events ;
                    const GGS_task_map  temp_12327 = var_cas_tasks ;
                    if (temp_12327.isBuilt ()) {
                      temp_12327 (HERE)->method_get (inLexique, var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (271)), var_cas_task_data COMMA_SOURCE_FILE_AT_LINE (271)) ;
                    }
                    var_cas_known_events = var_cas_task_data.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (272)) ;
                    const GGS_bool cond_12610 = (var_cas_known_events.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
                    if (cond_12610.isBuiltAndTrue ()) {
                      var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("An action can't set an Event to a basic task (Task ")).operator_concat (var_cas_sea.reader_task_name (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)))).operator_concat (GGS_string (" is a basic task).")) COMMA_SOURCE_FILE_AT_LINE (275)) ;
                    }
                    const GGS_bool cond_12805 = (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_hasKey (var_cas_sea.reader_event_name (inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (276)))).operator_not () ;
                    if (cond_12805.isBuiltAndTrue ()) {
                      operand_11731->actionobj.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (277)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("EVENT attribute of action does not reference an existing event") COMMA_SOURCE_FILE_AT_LINE (278)) ;
                    }
                  }else{
                    var_cas_ep_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (GGS_string ("Internal error, incorrect datatype for ACTION attribute of expiry point ")).operator_concat (var_cas_ep_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280))) COMMA_SOURCE_FILE_AT_LINE (281)) ;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_schedule_tables_tasks_and_events_exist\n") ;
  #endif
}

//---------------------------------------------------------------------------*

