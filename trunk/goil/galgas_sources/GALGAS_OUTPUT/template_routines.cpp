//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'template_routines.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 21th, 2010, at 21h3'56"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "template_routines.h"
#include "galgas-utilities/C_Compiler.h"
#include "galgas/C_galgas_CLI_Options.h"

//---------------------------------------------------------------------------*

#include "goil_options.h"
#include "template_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "template_routines.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                         Function 'goil_template'                          *
//                                                                           *
//---------------------------------------------------------------------------*

GALGASap_string function_goil_5F_template (GALGASap_string & constinArgument_prefix,
                                           GALGASap_goilTemplateVariableMap & constinArgument_cfg,
                                           GALGASap_string & constinArgument_name,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGASap_string result_string ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  //--- @literalStringExpressionForGeneration
  GALGASap_string temp_0 ("" COMMA_SOURCE_FILE_AT_LINE (11)) ;
  result_string = temp_0 ;
  { //-------- @routineCallInstructionForGeneration
  GALGASap_location temp_1 (inCompiler->here (SOURCE_FILE_AT_LINE (13))) ;
  GALGASap_lstring temp_2 (GALGASap_lstring::constructor_new (constinArgument_name, temp_1 COMMA_SOURCE_FILE_AT_LINE (13))) ;
  //--- @literalStringExpressionForGeneration
  GALGASap_string temp_3 ("templates" COMMA_SOURCE_FILE_AT_LINE (16)) ;
  //--- @functionCallExpressionForGeneration
  GALGASap_string temp_4 (function_rootTemplatesDirectory (inCompiler COMMA_SOURCE_FILE_AT_LINE (16))) ;
  //--- @trueExpressionForGeneration
  GALGASap_bool temp_5 (true COMMA_SOURCE_FILE_AT_LINE (18)) ;
  GALGASap_bool joker_428_0 ; // Joker input parameter
  routine_goilTemplateInvocation (temp_2, constinArgument_prefix, temp_3, temp_4, temp_5, constinArgument_cfg, result_string, joker_428_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (12)) ;
  } //-------- @routineCallInstructionForGeneration
//---
  return result_string ;
}


//---------------------------------------------------------------------------*
//  Introspection                                                            *
//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_goil_5F_template [4] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_goilTemplateVariableMap,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------*

static GALGASap_object functionWithGenericHeader_goil_5F_template (C_Compiler * inCompiler,
                                                                   cRootObjectArray & inEffectiveParameterArray,
                                                                   const GALGASap_location & inErrorLocation
                                                                   COMMA_LOCATION_ARGS) {
  const bool ok = inCompiler->checkFunctionCallArguments ("goil_template",
                                                          3,
                                                          functionArgs_goil_5F_template,
                                                          inEffectiveParameterArray,
                                                          inErrorLocation
                                                          COMMA_THERE) ;
  GALGASap_object result ;
  if (ok) {
    GALGASap_string operand0 = inEffectiveParameterArray.objectAtIndex (0 COMMA_THERE) ;
    GALGASap_goilTemplateVariableMap operand1 = inEffectiveParameterArray.objectAtIndex (1 COMMA_THERE) ;
    GALGASap_string operand2 = inEffectiveParameterArray.objectAtIndex (2 COMMA_THERE) ;
    result = function_goil_5F_template (operand0, operand1, operand2, inCompiler COMMA_THERE).embedObject () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_goil_5F_template ("goil_template",
                                                                  functionWithGenericHeader_goil_5F_template,
                                                                  & kTypeDescriptor_GALGAS_string,
                                                                  3,
                                                                  functionArgs_goil_5F_template) ;


//---------------------------------------------------------------------------*
//                                                                           *
//                        Function 'computeTemplate'                         *
//                                                                           *
//---------------------------------------------------------------------------*

GALGASap_string function_computeTemplate (GALGASap_string & constinArgument_prefix,
                                          GALGASap_goilTemplateVariableMap & constinArgument_cfg,
                                          GALGASap_string & constinArgument_name,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGASap_string result_string ; // Returned variable
  //-------- @assignmentInstructionForGeneration
  //--- @literalStringExpressionForGeneration
  GALGASap_string temp_0 ("" COMMA_SOURCE_FILE_AT_LINE (29)) ;
  result_string = temp_0 ;
  { //-------- @routineCallInstructionForGeneration
  GALGASap_location temp_1 (inCompiler->here (SOURCE_FILE_AT_LINE (31))) ;
  GALGASap_lstring temp_2 (GALGASap_lstring::constructor_new (constinArgument_name, temp_1 COMMA_SOURCE_FILE_AT_LINE (31))) ;
  //--- @literalStringExpressionForGeneration
  GALGASap_string temp_3 ("templates" COMMA_SOURCE_FILE_AT_LINE (34)) ;
  //--- @functionCallExpressionForGeneration
  GALGASap_string temp_4 (function_rootTemplatesDirectory (inCompiler COMMA_SOURCE_FILE_AT_LINE (34))) ;
  //--- @trueExpressionForGeneration
  GALGASap_bool temp_5 (true COMMA_SOURCE_FILE_AT_LINE (36)) ;
  GALGASap_bool joker_730_0 ; // Joker input parameter
  routine_goilTemplateInvocation (temp_2, constinArgument_prefix, temp_3, temp_4, temp_5, constinArgument_cfg, result_string, joker_730_0, inCompiler COMMA_SOURCE_FILE_AT_LINE (30)) ;
  } //-------- @routineCallInstructionForGeneration
//---
  return result_string ;
}


//---------------------------------------------------------------------------*
//  Introspection                                                            *
//---------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_computeTemplate [4] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_goilTemplateVariableMap,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------*

static GALGASap_object functionWithGenericHeader_computeTemplate (C_Compiler * inCompiler,
                                                                  cRootObjectArray & inEffectiveParameterArray,
                                                                  const GALGASap_location & inErrorLocation
                                                                  COMMA_LOCATION_ARGS) {
  const bool ok = inCompiler->checkFunctionCallArguments ("computeTemplate",
                                                          3,
                                                          functionArgs_computeTemplate,
                                                          inEffectiveParameterArray,
                                                          inErrorLocation
                                                          COMMA_THERE) ;
  GALGASap_object result ;
  if (ok) {
    GALGASap_string operand0 = inEffectiveParameterArray.objectAtIndex (0 COMMA_THERE) ;
    GALGASap_goilTemplateVariableMap operand1 = inEffectiveParameterArray.objectAtIndex (1 COMMA_THERE) ;
    GALGASap_string operand2 = inEffectiveParameterArray.objectAtIndex (2 COMMA_THERE) ;
    result = function_computeTemplate (operand0, operand1, operand2, inCompiler COMMA_THERE).embedObject () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_computeTemplate ("computeTemplate",
                                                                 functionWithGenericHeader_computeTemplate,
                                                                 & kTypeDescriptor_GALGAS_string,
                                                                 3,
                                                                 functionArgs_computeTemplate) ;


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


