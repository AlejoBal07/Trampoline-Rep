//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_imp_def.cpp'                           *
//                        Generated by version 1.9.3                         *
//                     november 10th, 2009, at 15h2'18"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 598
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_imp_def.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_imp_def.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'implementation_definition'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_implementation_definition_goil_imp_def_87_32_ (goil_lexique & inLexique,
                                GGS_implementation  &var_cas_imp) {
  GGS_lstring  var_cas_imp_name ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_IMPLEMENTATION) COMMA_HERE) ;
  inLexique.assignFromAttribute_att_token (var_cas_imp_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
  nt_implementation_spec_list_ (inLexique, var_cas_imp) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
  GGS_lstring  automatic_var_0 ;
  nt_description_ (inLexique, automatic_var_0) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'implementation_spec_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_implementation_spec_list_goil_imp_def_101_31_ (goil_lexique & inLexique,
                                GGS_implementation  &var_cas_imp) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_imp_def_0 (inLexique)) {
        case 2 : {
          nt_implementation_spec_ (inLexique, var_cas_imp) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'implementation_spec'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_implementation_spec_goil_imp_def_107_26_ (goil_lexique & inLexique,
                                GGS_implementation  &var_cas_imp) {
  switch (select_goil_imp_def_1 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_OS) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("os"), var_cas_imp) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TASK) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("task"), var_cas_imp) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COUNTER) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("counter"), var_cas_imp) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ALARM) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("alarm"), var_cas_imp) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RESOURCE) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("resource"), var_cas_imp) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EVENT) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("event"), var_cas_imp) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ISR) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("isr"), var_cas_imp) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MESSAGE) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("message"), var_cas_imp) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COM) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("com"), var_cas_imp) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NM) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("nm"), var_cas_imp) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_APPMODE) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("appmode"), var_cas_imp) ;
      } break ;
    case 12 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_IPDU) COMMA_HERE) ;
      nt_implementation_list_ (inLexique, GGS_string ("ipdu"), var_cas_imp) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  automatic_var_1 ;
  nt_description_ (inLexique, automatic_var_1) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'implementation_list'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_implementation_list_goil_imp_def_127_26_ (goil_lexique & inLexique,
                                GGS_string var_cas_obj_kind,
                                GGS_implementation  &var_cas_imp) {
  GGS_implementation_spec  var_cas_spec ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, var_cas_obj_kind, GGS_location (inLexique) COMMA_HERE) ;
  const GGS_bool cond_4196 = var_cas_imp.reader_hasKey (inLexique, var_cas_obj_kind COMMA_SOURCE_FILE_AT_LINE (133)) ;
  if (cond_4196.isBuiltAndTrue ()) {
    var_cas_imp.modifier_del (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_obj_kind, GGS_location (inLexique) COMMA_HERE), var_cas_spec COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }else if (cond_4196.isBuiltAndFalse ()) {
    var_cas_spec = GGS_implementation_spec ::constructor_emptyMap (inLexique COMMA_HERE) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_goil_imp_def_2 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attr_name ;
          GGS_imp_type  var_cas_attr ;
          nt_impl_attr_def_ (inLexique, var_cas_attr_name, var_cas_attr) ;
          var_cas_spec.modifier_put (inLexique, var_cas_attr_name, var_cas_attr COMMA_SOURCE_FILE_AT_LINE (145)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
  var_cas_imp.modifier_put (inLexique, var_cas_key, var_cas_spec COMMA_SOURCE_FILE_AT_LINE (150)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_attr_def_goil_imp_def_153_20_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_attr_name,
                                GGS_imp_type  &var_cas_attr) {
  GGS_bool var_cas_with_auto ;
  GGS_uint32_set  var_cas_set ;
  GGS_bool var_cas_multiple ;
  GGS_uint32_class  var_cas_default_number ;
  GGS_lstring  var_cas_desc ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_UINT_33__32_) COMMA_HERE) ;
  nt_auto_specifier_ (inLexique, var_cas_with_auto) ;
  nt_uint32_number_set_ (inLexique, var_cas_set) ;
  nt_uint32_attribute_name_ (inLexique, var_cas_attr_name) ;
  nt_multiple_specifier_ (inLexique, var_cas_multiple) ;
  nt_default_uint32_number_ (inLexique, var_cas_default_number) ;
  nt_description_ (inLexique, var_cas_desc) ;
  { const GGS_uint32_class _var_5180 = var_cas_default_number ; // CAST instruction
    if (_var_5180.getPtr () != NULL) {
      macroValidPointer (_var_5180.getPtr ()) ;
      if (typeid (cPtr_uint32_class) == typeid (* (_var_5180.getPtr ()))) {
        const GGS_uint32_class var_cas_dn (_var_5180.getPtr ()) ;
        ::routine_check_uint32_range (inLexique,  var_cas_set,  var_cas_dn.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (175)),  var_cas_dn.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) COMMA_SOURCE_FILE_AT_LINE (175)) ;
      }else{
      }
    }
  }
  var_cas_attr = GGS_uint32_type ::constructor_new (inLexique, GGS_location (inLexique), var_cas_desc, var_cas_multiple, var_cas_with_auto, var_cas_default_number, var_cas_set COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_attr_def_goil_imp_def_190_20_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_attr_name,
                                GGS_imp_type  &var_cas_attr) {
  GGS_bool var_cas_with_auto ;
  GGS_sint32_set  var_cas_set ;
  GGS_bool var_cas_multiple ;
  GGS_sint32_class  var_cas_default_number ;
  GGS_lstring  var_cas_desc ;
  GGS_lstring  var_cas_type ;
  GGS_bool var_cas_has_range ;
  GGS_number_set  var_cas_range ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_INT_33__32_) COMMA_HERE) ;
  nt_auto_specifier_ (inLexique, var_cas_with_auto) ;
  nt_sint32_number_set_ (inLexique, var_cas_set) ;
  nt_attribute_name_ (inLexique, var_cas_attr_name) ;
  nt_multiple_specifier_ (inLexique, var_cas_multiple) ;
  nt_default_sint32_number_ (inLexique, var_cas_default_number) ;
  nt_description_ (inLexique, var_cas_desc) ;
  var_cas_attr = GGS_sint32_type ::constructor_new (inLexique, GGS_location (inLexique), var_cas_desc, var_cas_multiple, var_cas_with_auto, var_cas_default_number, var_cas_set COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_attr_def_goil_imp_def_220_20_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_attr_name,
                                GGS_imp_type  &var_cas_attr) {
  GGS_bool var_cas_auto ;
  GGS_bool var_cas_multiple ;
  GGS_luint64  var_cas_default_number ;
  GGS_bool var_cas_has_default ;
  GGS_lstring  var_cas_type ;
  inLexique.assignFromAttribute_att_token (var_cas_type) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_UINT_36__34_) COMMA_HERE) ;
  nt_auto_specifier_ (inLexique, var_cas_auto) ;
  nt_attribute_name_ (inLexique, var_cas_attr_name) ;
  nt_multiple_specifier_ (inLexique, var_cas_multiple) ;
  nt_default_number_ (inLexique, var_cas_has_default, var_cas_default_number) ;
  var_cas_attr = GGS_void_type ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_bool (false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_attr_def_goil_imp_def_240_20_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_attr_name,
                                GGS_imp_type  &var_cas_attr) {
  GGS_bool var_cas_auto ;
  GGS_bool var_cas_multiple ;
  GGS_luint64  var_cas_default_number ;
  GGS_bool var_cas_has_default ;
  GGS_lstring  var_cas_type ;
  inLexique.assignFromAttribute_att_token (var_cas_type) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_INT_36__34_) COMMA_HERE) ;
  nt_auto_specifier_ (inLexique, var_cas_auto) ;
  nt_attribute_name_ (inLexique, var_cas_attr_name) ;
  nt_multiple_specifier_ (inLexique, var_cas_multiple) ;
  nt_default_number_ (inLexique, var_cas_has_default, var_cas_default_number) ;
  var_cas_attr = GGS_void_type ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_bool (false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_attr_def_goil_imp_def_259_20_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_attr_name,
                                GGS_imp_type  &var_cas_attr) {
  GGS_lstring  var_cas_type ;
  GGS_bool var_cas_auto ;
  inLexique.assignFromAttribute_att_token (var_cas_type) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FLOAT) COMMA_HERE) ;
  nt_auto_specifier_ (inLexique, var_cas_auto) ;
  var_cas_attr_name = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_attr = GGS_void_type ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_bool (false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'impl_attr_def'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_attr_def_goil_imp_def_273_20_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_attr_name,
                                GGS_imp_type  &var_cas_attr) {
  GGS_lstring  var_cas_type ;
  GGS_bool var_cas_auto ;
  GGS_stringset  var_cas_en ;
  inLexique.assignFromAttribute_att_token (var_cas_type) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ENUM) COMMA_HERE) ;
  nt_auto_specifier_ (inLexique, var_cas_auto) ;
  nt_enumeration_ (inLexique, var_cas_en) ;
  GGS_lstring  automatic_var_2 ;
  nt_attribute_name_ (inLexique, automatic_var_2) ;
  GGS_bool automatic_var_3 ;
  nt_multiple_specifier_ (inLexique, automatic_var_3) ;
  GGS_bool automatic_var_4 ;
  GGS_lstring  automatic_var_5 ;
  nt_default_name_ (inLexique, automatic_var_4, automatic_var_5) ;
  var_cas_attr_name = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_attr = GGS_void_type ::constructor_new (inLexique, GGS_location (inLexique), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE), GGS_bool (false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'auto_specifier'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_auto_specifier_goil_imp_def_289_21_ (goil_lexique & inLexique,
                                GGS_bool &var_cas_auto) {
  switch (select_goil_imp_def_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_WITH_5F_AUTO) COMMA_HERE) ;
      var_cas_auto = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_auto = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'uint32_number_set'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_uint32_number_set_goil_imp_def_300_24_ (goil_lexique & inLexique,
                                GGS_uint32_set  &var_cas_set) {
  switch (select_goil_imp_def_4 (inLexique)) {
    case 1 : {
      GGS_luint64  var_cas_first ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5B_) COMMA_HERE) ;
      switch (select_goil_imp_def_5 (inLexique)) {
        case 1 : {
          GGS_luint64  var_cas_last ;
          inLexique.assignFromAttribute_integerNumber (var_cas_first) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_set_5F_start_5F_uint_5F_number) COMMA_HERE) ;
          inLexique.assignFromAttribute_integerNumber (var_cas_last) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          var_cas_set = GGS_uint32_range ::constructor_new (inLexique, GGS_location (inLexique), var_cas_first.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (312)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (312)), var_cas_last.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (313)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (313)) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.assignFromAttribute_integerNumber (var_cas_first) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          switch (select_goil_imp_def_6 (inLexique)) {
            case 1 : {
              GGS_luint64  var_cas_last ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2E__2E_) COMMA_HERE) ;
              inLexique.assignFromAttribute_integerNumber (var_cas_last) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
              const GGS_bool cond_8852 = (var_cas_first.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (322))).operator_strictSup (var_cas_last.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (322))) ;
              if (cond_8852.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("Empty range") COMMA_SOURCE_FILE_AT_LINE (323)) ;
              }
              var_cas_set = GGS_uint32_range ::constructor_new (inLexique, GGS_location (inLexique), var_cas_first.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (328)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (328)), var_cas_last.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (329)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (329)) COMMA_HERE) ;
              } break ;
            case 2 : {
              GGS_list_uint32  var_cas_numList = GGS_list_uint32 ::constructor_emptyList () ;
              var_cas_numList.addAssign_operation (var_cas_first.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (333)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (333))) ;
              { bool syntaxRepeat_7 = true ;
                while (syntaxRepeat_7) {
                  switch (select_repeat_goil_imp_def_7 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2C_) COMMA_HERE) ;
                      inLexique.assignFromAttribute_integerNumber (var_cas_first) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
                      var_cas_numList.addAssign_operation (var_cas_first.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (338)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
                      } break ;
                    default :
                      syntaxRepeat_7 = false ;
                      break ;
                  }
                }
              }
              var_cas_set = GGS_uint32_list ::constructor_new (inLexique, GGS_location (inLexique), var_cas_numList COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      var_cas_set = GGS_uint32_empty_set ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'sint32_number_set'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_sint32_number_set_goil_imp_def_349_24_ (goil_lexique & inLexique,
                                GGS_sint32_set  &var_cas_set) {
  switch (select_goil_imp_def_8 (inLexique)) {
    case 1 : {
      GGS_luint64  var_cas_ssfirst ;
      GGS_sint64  var_cas_first ;
      GGS_sint64  var_cas_fs ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5B_) COMMA_HERE) ;
      switch (select_goil_imp_def_9 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2D_) COMMA_HERE) ;
          var_cas_fs = GGS_sint64 (1LL).operator_unary_minus (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          var_cas_fs = GGS_sint64 (1LL) ;
          } break ;
        default :
          break ;
      }
      switch (select_goil_imp_def_10 (inLexique)) {
        case 1 : {
          GGS_sint64  var_cas_last ;
          inLexique.assignFromAttribute_integerNumber (var_cas_ssfirst) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_set_5F_start_5F_uint_5F_number) COMMA_HERE) ;
          var_cas_first = var_cas_fs.multiply_operation (inLexique, var_cas_ssfirst.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (359)).reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (359)) COMMA_SOURCE_FILE_AT_LINE (359)) ;
          nt_signed_number_ (inLexique, var_cas_last) ;
          var_cas_set = GGS_sint32_range ::constructor_new (inLexique, GGS_location (inLexique), var_cas_first.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (363)), var_cas_last.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.assignFromAttribute_integerNumber (var_cas_ssfirst) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          var_cas_first = var_cas_fs.multiply_operation (inLexique, var_cas_ssfirst.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (368)).reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (368)) COMMA_SOURCE_FILE_AT_LINE (368)) ;
          switch (select_goil_imp_def_11 (inLexique)) {
            case 1 : {
              GGS_sint64  var_cas_last ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2E__2E_) COMMA_HERE) ;
              nt_signed_number_ (inLexique, var_cas_last) ;
              var_cas_set = GGS_sint32_range ::constructor_new (inLexique, GGS_location (inLexique), var_cas_first.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (375)), var_cas_last.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (376)) COMMA_HERE) ;
              } break ;
            case 2 : {
              GGS_list_sint32  var_cas_numList = GGS_list_sint32 ::constructor_emptyList () ;
              var_cas_numList.addAssign_operation (var_cas_first.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (380))) ;
              { bool syntaxRepeat_12 = true ;
                while (syntaxRepeat_12) {
                  switch (select_repeat_goil_imp_def_12 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2C_) COMMA_HERE) ;
                      nt_signed_number_ (inLexique, var_cas_first) ;
                      var_cas_numList.addAssign_operation (var_cas_first.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (385))) ;
                      } break ;
                    default :
                      syntaxRepeat_12 = false ;
                      break ;
                  }
                }
              }
              var_cas_set = GGS_sint32_list ::constructor_new (inLexique, GGS_location (inLexique), var_cas_numList COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      var_cas_set = GGS_sint32_empty_set ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'uint64_number_set'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_uint64_number_set_goil_imp_def_396_24_ (goil_lexique & inLexique,
                                GGS_uint64_set  &var_cas_set) {
  var_cas_set = GGS_uint64_empty_set ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'sint64_number_set'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_sint64_number_set_goil_imp_def_400_24_ (goil_lexique & inLexique,
                                GGS_sint64_set  &var_cas_set) {
  var_cas_set = GGS_sint64_empty_set ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'float_number_set'            *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_float_number_set_goil_imp_def_404_23_ (goil_lexique & inLexique,
                                GGS_float_set  &var_cas_set) {
  var_cas_set = GGS_float_empty_set ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'default_uint32_number'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_uint32_number_goil_imp_def_409_28_ (goil_lexique & inLexique,
                                GGS_uint32_class  &var_cas_def) {
  switch (select_goil_imp_def_13 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
      switch (select_goil_imp_def_14 (inLexique)) {
        case 1 : {
          GGS_luint64  var_cas_default_number ;
          inLexique.assignFromAttribute_integerNumber (var_cas_default_number) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
          var_cas_def = GGS_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_default_number.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (415)).reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NO_5F_DEFAULT) COMMA_HERE) ;
          var_cas_def = GGS_void_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (0U) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTO) COMMA_HERE) ;
          var_cas_def = GGS_auto_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (0U) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      var_cas_def = GGS_void_uint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint (0U) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'default_sint32_number'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_sint32_number_goil_imp_def_429_28_ (goil_lexique & inLexique,
                                GGS_sint32_class  &var_cas_def) {
  switch (select_goil_imp_def_15 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
      switch (select_goil_imp_def_16 (inLexique)) {
        case 1 : {
          GGS_sint64  var_cas_default_number ;
          nt_signed_number_ (inLexique, var_cas_default_number) ;
          var_cas_def = GGS_sint32_class ::constructor_new (inLexique, GGS_location (inLexique), var_cas_default_number.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (435)) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NO_5F_DEFAULT) COMMA_HERE) ;
          var_cas_def = GGS_void_sint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_sint (0L) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_AUTO) COMMA_HERE) ;
          var_cas_def = GGS_auto_sint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_sint (0L) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      var_cas_def = GGS_void_sint32_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_sint (0L) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'default_uint64_number'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_uint64_number_goil_imp_def_449_28_ (goil_lexique & inLexique,
                                GGS_uint64_class  &var_cas_def) {
  var_cas_def = GGS_void_uint64_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_uint64 (0ULL) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'default_sint64_number'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_sint64_number_goil_imp_def_453_28_ (goil_lexique & inLexique,
                                GGS_sint64_class  &var_cas_def) {
  var_cas_def = GGS_void_sint64_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_sint64 (0LL) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'default_float_number'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_float_number_goil_imp_def_457_27_ (goil_lexique & inLexique,
                                GGS_float_class  &var_cas_def) {
  var_cas_def = GGS_void_float_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_double (0.000000e+00) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'default_string'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_string_goil_imp_def_461_21_ (goil_lexique & inLexique,
                                GGS_string_class  &var_cas_def) {
  var_cas_def = GGS_void_string_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_string ("") COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'default_enum'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_enum_goil_imp_def_465_19_ (goil_lexique & inLexique,
                                GGS_basic_type  &var_cas_def) {
  var_cas_def = GGS_void ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'default_bool'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_bool_goil_imp_def_469_19_ (goil_lexique & inLexique,
                                GGS_bool_class  &var_cas_def) {
  var_cas_def = GGS_void_bool_class ::constructor_new (inLexique, GGS_location (inLexique), GGS_bool (false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'signed_number'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_signed_number_goil_imp_def_473_20_ (goil_lexique & inLexique,
                                GGS_sint64  &var_cas_num) {
  GGS_luint64  var_cas_number ;
  GGS_sint64  var_cas_sign = GGS_sint64 (1LL) ;
  switch (select_goil_imp_def_17 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2D_) COMMA_HERE) ;
      var_cas_sign = GGS_sint64 (1LL).operator_unary_minus (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
  inLexique.assignFromAttribute_integerNumber (var_cas_number) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
  var_cas_num = var_cas_sign.multiply_operation (inLexique, var_cas_number.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (478)).reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (478)) COMMA_SOURCE_FILE_AT_LINE (478)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'uint32_attribute_name'          *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_uint32_attribute_name_goil_imp_def_484_28_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_name) {
  switch (select_goil_imp_def_18 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PRIORITY) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("PRIORITY"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACTIVATION) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("ACTIVATION"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MAXALLOWEDVALUE) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("MAXALLOWEDVALUE"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TICKSPERBASE) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("TICKSPERBASE"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MINCYCLE) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("MINCYCLE"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_CATEGORY) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("CATEGORY"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_QUEUESIZE) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("QUEUESIZE"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 8 : {
      inLexique.assignFromAttribute_att_token (var_cas_name) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'attribute_name'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_attribute_name_goil_imp_def_504_21_ (goil_lexique & inLexique,
                                GGS_lstring  &var_cas_name) {
  switch (select_goil_imp_def_19 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STATUS) COMMA_HERE) ;
      var_cas_name = GGS_lstring ::constructor_new (inLexique, GGS_string ("STATUS"), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.assignFromAttribute_att_token (var_cas_name) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'multiple_specifier'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_multiple_specifier_goil_imp_def_512_25_ (goil_lexique & inLexique,
                                GGS_bool &var_cas_multiple) {
  switch (select_goil_imp_def_20 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5B_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5D_) COMMA_HERE) ;
      var_cas_multiple = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_multiple = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'default_number'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_number_goil_imp_def_521_21_ (goil_lexique & inLexique,
                                GGS_bool &var_cas_has_default,
                                GGS_luint64  &var_cas_default_number) {
  switch (select_goil_imp_def_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
      inLexique.assignFromAttribute_integerNumber (var_cas_default_number) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5F_number) COMMA_HERE) ;
      var_cas_has_default = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_default_number = GGS_luint64 ::constructor_new (inLexique, GGS_uint64 (0ULL), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_has_default = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'default_name'              *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_default_name_goil_imp_def_532_19_ (goil_lexique & inLexique,
                                GGS_bool &var_cas_has_default,
                                GGS_lstring  &var_cas_default_name) {
  switch (select_goil_imp_def_22 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D_) COMMA_HERE) ;
      inLexique.assignFromAttribute_att_token (var_cas_default_name) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
      var_cas_has_default = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_default_name = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      var_cas_has_default = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'enumeration'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_enumeration_goil_imp_def_546_18_ (goil_lexique & inLexique,
                                GGS_stringset  &var_cas_en) {
  var_cas_en = GGS_stringset ::constructor_emptySet () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5B_) COMMA_HERE) ;
  nt_enumerator_ (inLexique, var_cas_en) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
      switch (select_repeat_goil_imp_def_23 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__2C_) COMMA_HERE) ;
          nt_enumerator_ (inLexique, var_cas_en) ;
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'enumerator'               *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_enumerator_goil_imp_def_560_17_ (goil_lexique & inLexique,
                                GGS_stringset  &var_cas_en) {
  switch (select_goil_imp_def_24 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_EXTENDED) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("EXTENDED") COMMA_SOURCE_FILE_AT_LINE (563)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STANDARD) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("STANDARD") COMMA_SOURCE_FILE_AT_LINE (564)) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NON) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NON") COMMA_SOURCE_FILE_AT_LINE (565)) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FULL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("FULL") COMMA_SOURCE_FILE_AT_LINE (566)) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SEND_5F_STATIC_5F_INTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SEND_STATIC_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (567)) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SEND_5F_STATIC_5F_EXTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SEND_STATIC_EXTERNAL") COMMA_SOURCE_FILE_AT_LINE (568)) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SEND_5F_DYNAMIC_5F_EXTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SEND_DYNAMIC_EXTERNAL") COMMA_SOURCE_FILE_AT_LINE (569)) ;
      } break ;
    case 8 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SEND_5F_ZERO_5F_INTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SEND_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (570)) ;
      } break ;
    case 9 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SEND_5F_ZERO_5F_EXTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SEND_ZERO_EXTERNAL") COMMA_SOURCE_FILE_AT_LINE (571)) ;
      } break ;
    case 10 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RECEIVE_5F_ZERO_5F_INTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("RECEIVE_ZERO_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (572)) ;
      } break ;
    case 11 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RECEIVE_5F_ZERO_5F_EXTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("RECEIVE_ZERO_EXTERNAL") COMMA_SOURCE_FILE_AT_LINE (573)) ;
      } break ;
    case 12 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RECEIVE_5F_UNQUEUED_5F_INTERNAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("RECEIVE_UNQUEUED_INTERNAL") COMMA_SOURCE_FILE_AT_LINE (574)) ;
      } break ;
    case 13 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ALWAYS) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("ALWAYS") COMMA_SOURCE_FILE_AT_LINE (575)) ;
      } break ;
    case 14 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEVER) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEVER") COMMA_SOURCE_FILE_AT_LINE (576)) ;
      } break ;
    case 15 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MASKEDNEWEQUALSX) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("MASKEDNEWEQUALSX") COMMA_SOURCE_FILE_AT_LINE (577)) ;
      } break ;
    case 16 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MASKEDNEWDIFFERSX) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("MASKEDNEWDIFFERSX") COMMA_SOURCE_FILE_AT_LINE (578)) ;
      } break ;
    case 17 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISEQUAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISEQUAL") COMMA_SOURCE_FILE_AT_LINE (579)) ;
      } break ;
    case 18 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISDIFFERENT) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISDIFFERENT") COMMA_SOURCE_FILE_AT_LINE (580)) ;
      } break ;
    case 19 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("MASKEDNEWEQUALSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (581)) ;
      } break ;
    case 20 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("MASKEDNEWDIFFERSMASKEDOLD") COMMA_SOURCE_FILE_AT_LINE (582)) ;
      } break ;
    case 21 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISWITHIN) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISWITHIN") COMMA_SOURCE_FILE_AT_LINE (583)) ;
      } break ;
    case 22 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISOUTSIDE) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISOUTSIDE") COMMA_SOURCE_FILE_AT_LINE (584)) ;
      } break ;
    case 23 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISGREATER) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISGREATER") COMMA_SOURCE_FILE_AT_LINE (585)) ;
      } break ;
    case 24 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISLESSOREQUAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISLESSOREQUAL") COMMA_SOURCE_FILE_AT_LINE (586)) ;
      } break ;
    case 25 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISLESS) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISLESS") COMMA_SOURCE_FILE_AT_LINE (587)) ;
      } break ;
    case 26 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NEWISGREATEROREQUAL) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NEWISGREATEROREQUAL") COMMA_SOURCE_FILE_AT_LINE (588)) ;
      } break ;
    case 27 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ONEEVERYN) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("ONEEVERYN") COMMA_SOURCE_FILE_AT_LINE (589)) ;
      } break ;
    case 28 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_NONE) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("NONE") COMMA_SOURCE_FILE_AT_LINE (590)) ;
      } break ;
    case 29 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACTIVATETASK) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("ACTIVATETASK") COMMA_SOURCE_FILE_AT_LINE (591)) ;
      } break ;
    case 30 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SETEVENT) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SETEVENT") COMMA_SOURCE_FILE_AT_LINE (592)) ;
      } break ;
    case 31 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COMCALLBACK) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("COMCALLBACK") COMMA_SOURCE_FILE_AT_LINE (593)) ;
      } break ;
    case 32 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FLAG) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("FLAG") COMMA_SOURCE_FILE_AT_LINE (594)) ;
      } break ;
    case 33 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_INMCALLBACK) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("INMCALLBACK") COMMA_SOURCE_FILE_AT_LINE (595)) ;
      } break ;
    case 34 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_STATIC) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("STATIC") COMMA_SOURCE_FILE_AT_LINE (596)) ;
      } break ;
    case 35 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_DYNAMIC) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("DYNAMIC") COMMA_SOURCE_FILE_AT_LINE (597)) ;
      } break ;
    case 36 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COMSTANDARD) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("COMSTANDARD") COMMA_SOURCE_FILE_AT_LINE (599)) ;
      } break ;
    case 37 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_COMEXTENDED) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("COMEXTENDED") COMMA_SOURCE_FILE_AT_LINE (600)) ;
      } break ;
    case 38 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_SENT) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("SENT") COMMA_SOURCE_FILE_AT_LINE (601)) ;
      } break ;
    case 39 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RECEIVED) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("RECEIVED") COMMA_SOURCE_FILE_AT_LINE (602)) ;
      } break ;
    case 40 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_DIRECT) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("DIRECT") COMMA_SOURCE_FILE_AT_LINE (603)) ;
      } break ;
    case 41 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PERIODIC) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("PERIODIC") COMMA_SOURCE_FILE_AT_LINE (604)) ;
      } break ;
    case 42 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MIXED) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  GGS_string ("MIXED") COMMA_SOURCE_FILE_AT_LINE (605)) ;
      } break ;
    case 43 : {
      GGS_lstring  var_cas_idf ;
      inLexique.assignFromAttribute_att_token (var_cas_idf) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
      ::routine_add_to_stringset (inLexique,  var_cas_en,  var_cas_idf.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606)) COMMA_SOURCE_FILE_AT_LINE (606)) ;
      } break ;
    default :
      break ;
  }
  nt_impl_parameter_list_ (inLexique) ;
  GGS_lstring  automatic_var_6 ;
  nt_description_ (inLexique, automatic_var_6) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'impl_parameter_list'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_impl_parameter_list_goil_imp_def_612_26_ (goil_lexique & inLexique) {
  switch (select_goil_imp_def_25 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_26 = true ;
        while (syntaxRepeat_26) {
          switch (select_repeat_goil_imp_def_26 (inLexique)) {
            case 2 : {
              nt_implementation_def_ (inLexique) ;
              } break ;
            default :
              syntaxRepeat_26 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D_) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'implementation_def'           *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_imp_def::
pr_implementation_def_goil_imp_def_624_25_ (goil_lexique & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

