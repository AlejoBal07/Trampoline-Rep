//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_lexique.cpp'                           *
//                        Generated by version 1.8.2                         *
//                      april 27th, 2009, at 22h44'20"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 463
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "goil_lexique.h"

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_goil_lexique::cTokenFor_goil_lexique (void) :
att_token (),
a_string (),
integerNumber (),
floatNumber (),
number () {
}

//---------------------------------------------------------------------------*

goil_lexique::
goil_lexique (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

goil_lexique::
goil_lexique (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const char * gErrorMessage_0 = "unterminated comment" ;
//--- Message 1
static const char * gErrorMessage_1 = "internal error" ;
//--- Message 2
static const char * gErrorMessage_2 = "decimal number too large" ;
//--- Message 3
static const char * gErrorMessage_3 = "Unterminated literal string" ;
//--- Message 4
static const char * gErrorMessage_4 = "Unable to convert the string to double" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$APP_SRC$' :
static const char * gSyntaxErrorMessage_APP_5FSRC = "Makefile attribute  'APP_SRC'" ;

//--- Syntax error message for terminal '$CFLAGS$' :
static const char * gSyntaxErrorMessage_CFLAGS = "Makefile attribute  'CFLAGS'" ;

//--- Syntax error message for terminal '$ASFLAGS$' :
static const char * gSyntaxErrorMessage_ASFLAGS = "Makefile attribute  'ASFLAGS'" ;

//--- Syntax error message for terminal '$LDFLAGS$' :
static const char * gSyntaxErrorMessage_LDFLAGS = "Makefile attribute  'LDFLAGS'" ;

//--- Syntax error message for terminal '$APP_NAME$' :
static const char * gSyntaxErrorMessage_APP_5FNAME = "Makefile attribute  'APP_NAME'" ;

//--- Syntax error message for terminal '$TRAMPOLINE_BASE_PATH$' :
static const char * gSyntaxErrorMessage_TRAMPOLINE_5FBASE_5FPATH = "Makefile attribute  'TRAMPOLINE_BASE_PATH'" ;

//--- Syntax error message for terminal '$OIL_VERSION$' :
static const char * gSyntaxErrorMessage_OIL_5FVERSION = "OIL version" ;

//--- Syntax error message for terminal '$IMPLEMENTATION$' :
static const char * gSyntaxErrorMessage_IMPLEMENTATION = "OIL implementation definition" ;

//--- Syntax error message for terminal '$OS$' :
static const char * gSyntaxErrorMessage_OS = "Object 'OS'" ;

//--- Syntax error message for terminal '$TASK$' :
static const char * gSyntaxErrorMessage_TASK = "Object 'TASK'" ;

//--- Syntax error message for terminal '$COUNTER$' :
static const char * gSyntaxErrorMessage_COUNTER = "Object 'COUNTER'" ;

//--- Syntax error message for terminal '$ALARM$' :
static const char * gSyntaxErrorMessage_ALARM = "Object 'ALARM'" ;

//--- Syntax error message for terminal '$RESOURCE$' :
static const char * gSyntaxErrorMessage_RESOURCE = "Object 'RESOURCE'" ;

//--- Syntax error message for terminal '$EVENT$' :
static const char * gSyntaxErrorMessage_EVENT = "Object 'EVENT'" ;

//--- Syntax error message for terminal '$ISR$' :
static const char * gSyntaxErrorMessage_ISR = "Object 'ISR'" ;

//--- Syntax error message for terminal '$MESSAGE$' :
static const char * gSyntaxErrorMessage_MESSAGE = "Object 'MESSAGE'" ;

//--- Syntax error message for terminal '$COM$' :
static const char * gSyntaxErrorMessage_COM = "Object 'COM'" ;

//--- Syntax error message for terminal '$NM$' :
static const char * gSyntaxErrorMessage_NM = "Object 'NM'" ;

//--- Syntax error message for terminal '$APPMODE$' :
static const char * gSyntaxErrorMessage_APPMODE = "Object 'APPMODE'" ;

//--- Syntax error message for terminal '$IPDU$' :
static const char * gSyntaxErrorMessage_IPDU = "Object 'IPDU'" ;

//--- Syntax error message for terminal '$CPU$' :
static const char * gSyntaxErrorMessage_CPU = "Object 'CPU'" ;

//--- Syntax error message for terminal '$UINT32$' :
static const char * gSyntaxErrorMessage_UINT32 = "type 'UINT32'" ;

//--- Syntax error message for terminal '$INT32$' :
static const char * gSyntaxErrorMessage_INT32 = "type 'INT32'" ;

//--- Syntax error message for terminal '$UINT64$' :
static const char * gSyntaxErrorMessage_UINT64 = "type 'UINT64'" ;

//--- Syntax error message for terminal '$INT64$' :
static const char * gSyntaxErrorMessage_INT64 = "type 'INT64'" ;

//--- Syntax error message for terminal '$FLOAT$' :
static const char * gSyntaxErrorMessage_FLOAT = "type 'FLOAT'" ;

//--- Syntax error message for terminal '$ENUM$' :
static const char * gSyntaxErrorMessage_ENUM = "type 'ENUM'" ;

//--- Syntax error message for terminal '$STRING$' :
static const char * gSyntaxErrorMessage_STRING = "type 'STRING'" ;

//--- Syntax error message for terminal '$BOOLEAN$' :
static const char * gSyntaxErrorMessage_BOOLEAN = "type 'BOOLEAN'" ;

//--- Syntax error message for terminal '$WITH_AUTO$' :
static const char * gSyntaxErrorMessage_WITH_5FAUTO = "specifier 'WITH_AUTO'" ;

//--- Syntax error message for terminal '$NO_DEFAULT$' :
static const char * gSyntaxErrorMessage_NO_5FDEFAULT = "specifier 'NO_DEFAULT'" ;

//--- Syntax error message for terminal '$AUTO$' :
static const char * gSyntaxErrorMessage_AUTO = "specifier 'AUTO'" ;

//--- Syntax error message for terminal '$MASK$' :
static const char * gSyntaxErrorMessage_MASK = "specifier 'MASK'" ;

//--- Syntax error message for terminal '$CATEGORY$' :
static const char * gSyntaxErrorMessage_CATEGORY = "specifier 'CATEGORY'" ;

//--- Syntax error message for terminal '$OS_TYPE$' :
static const char * gSyntaxErrorMessage_OS_5FTYPE = "object reference type 'OS_TYPE'" ;

//--- Syntax error message for terminal '$TASK_TYPE$' :
static const char * gSyntaxErrorMessage_TASK_5FTYPE = "object reference type 'TASK_TYPE'" ;

//--- Syntax error message for terminal '$COUNTER_TYPE$' :
static const char * gSyntaxErrorMessage_COUNTER_5FTYPE = "object reference type 'COUNTER_TYPE'" ;

//--- Syntax error message for terminal '$ALARM_TYPE$' :
static const char * gSyntaxErrorMessage_ALARM_5FTYPE = "object reference type 'ALARM_TYPE'" ;

//--- Syntax error message for terminal '$RESOURCE_TYPE$' :
static const char * gSyntaxErrorMessage_RESOURCE_5FTYPE = "object reference type 'RESOURCE_TYPE'" ;

//--- Syntax error message for terminal '$EVENT_TYPE$' :
static const char * gSyntaxErrorMessage_EVENT_5FTYPE = "object reference type 'EVENT_TYPE'" ;

//--- Syntax error message for terminal '$ISR_TYPE$' :
static const char * gSyntaxErrorMessage_ISR_5FTYPE = "object reference type 'ISR_TYPE'" ;

//--- Syntax error message for terminal '$MESSAGE_TYPE$' :
static const char * gSyntaxErrorMessage_MESSAGE_5FTYPE = "object reference type 'MESSAGE_TYPE'" ;

//--- Syntax error message for terminal '$COM_TYPE$' :
static const char * gSyntaxErrorMessage_COM_5FTYPE = "object reference type 'COM_TYPE'" ;

//--- Syntax error message for terminal '$NM_TYPE$' :
static const char * gSyntaxErrorMessage_NM_5FTYPE = "object reference type 'NM_TYPE'" ;

//--- Syntax error message for terminal '$APPMODE_TYPE$' :
static const char * gSyntaxErrorMessage_APPMODE_5FTYPE = "object reference type 'APPMODE_TYPE'" ;

//--- Syntax error message for terminal '$IPDU_TYPE$' :
static const char * gSyntaxErrorMessage_IPDU_5FTYPE = "object reference type 'IPDU_TYPE'" ;

//--- Syntax error message for terminal '$STATUS$' :
static const char * gSyntaxErrorMessage_STATUS = "os attribute 'STATUS'" ;

//--- Syntax error message for terminal '$EXTENDED$' :
static const char * gSyntaxErrorMessage_EXTENDED = "os attribute 'EXTENDED'" ;

//--- Syntax error message for terminal '$STARTUPHOOK$' :
static const char * gSyntaxErrorMessage_STARTUPHOOK = "os attribute 'STARTUPHOOK'" ;

//--- Syntax error message for terminal '$ERRORHOOK$' :
static const char * gSyntaxErrorMessage_ERRORHOOK = "os attribute 'ERRORHOOK'" ;

//--- Syntax error message for terminal '$SHUTDOWNHOOK$' :
static const char * gSyntaxErrorMessage_SHUTDOWNHOOK = "os attribute 'SHUTDOWNHOOK'" ;

//--- Syntax error message for terminal '$PRETASKHOOK$' :
static const char * gSyntaxErrorMessage_PRETASKHOOK = "os attribute 'PRETASKHOOK'" ;

//--- Syntax error message for terminal '$POSTTASKHOOK$' :
static const char * gSyntaxErrorMessage_POSTTASKHOOK = "os attribute 'POSTTASKHOOK'" ;

//--- Syntax error message for terminal '$USEGETSERVICEID$' :
static const char * gSyntaxErrorMessage_USEGETSERVICEID = "os attribute 'USEGETSERVICEID'" ;

//--- Syntax error message for terminal '$USEPARAMETERACCESS$' :
static const char * gSyntaxErrorMessage_USEPARAMETERACCESS = "os attribute 'USEPARAMETERACCESS'" ;

//--- Syntax error message for terminal '$USERESSCHEDULER$' :
static const char * gSyntaxErrorMessage_USERESSCHEDULER = "os attribute 'USERESSCHEDULER'" ;

//--- Syntax error message for terminal '$SYSTEM_CALL$' :
static const char * gSyntaxErrorMessage_SYSTEM_5FCALL = "os attribute 'SYSTEM_CALL'" ;

//--- Syntax error message for terminal '$TRACE$' :
static const char * gSyntaxErrorMessage_TRACE = "os attribute 'TRACE'" ;

//--- Syntax error message for terminal '$FILE$' :
static const char * gSyntaxErrorMessage_FILE = "os attribute 'FILE'" ;

//--- Syntax error message for terminal '$PRIORITY$' :
static const char * gSyntaxErrorMessage_PRIORITY = "task attribute 'PRIORITY'" ;

//--- Syntax error message for terminal '$SCHEDULE$' :
static const char * gSyntaxErrorMessage_SCHEDULE = "task attribute 'SCHEDULE'" ;

//--- Syntax error message for terminal '$ACTIVATION$' :
static const char * gSyntaxErrorMessage_ACTIVATION = "task attribute 'ACTIVATION'" ;

//--- Syntax error message for terminal '$AUTOSTART$' :
static const char * gSyntaxErrorMessage_AUTOSTART = "task attribute 'AUTOSTART'" ;

//--- Syntax error message for terminal '$MAXALLOWEDVALUE$' :
static const char * gSyntaxErrorMessage_MAXALLOWEDVALUE = "counter attribute 'MAXALLOWEDVALUE'" ;

//--- Syntax error message for terminal '$TICKSPERBASE$' :
static const char * gSyntaxErrorMessage_TICKSPERBASE = "counter attribute 'TICKSPERBASE'" ;

//--- Syntax error message for terminal '$MINCYCLE$' :
static const char * gSyntaxErrorMessage_MINCYCLE = "counter attribute 'MINCYCLE'" ;

//--- Syntax error message for terminal '$TYPE$' :
static const char * gSyntaxErrorMessage_TYPE = "counter attribute 'TYPE'" ;

//--- Syntax error message for terminal '$UNIT$' :
static const char * gSyntaxErrorMessage_UNIT = "counter attribute 'UNIT'" ;

//--- Syntax error message for terminal '$ACTION$' :
static const char * gSyntaxErrorMessage_ACTION = "alarm attribute 'ACTION'" ;

//--- Syntax error message for terminal '$SETEVENT$' :
static const char * gSyntaxErrorMessage_SETEVENT = "alarm attribute 'SETEVENT'" ;

//--- Syntax error message for terminal '$ACTIVATETASK$' :
static const char * gSyntaxErrorMessage_ACTIVATETASK = "alarm attribute 'ACTIVATETASK'" ;

//--- Syntax error message for terminal '$ALARMCALLBACK$' :
static const char * gSyntaxErrorMessage_ALARMCALLBACK = "alarm attribute 'ALARMCALLBACK'" ;

//--- Syntax error message for terminal '$ALARMCALLBACKNAME$' :
static const char * gSyntaxErrorMessage_ALARMCALLBACKNAME = "alarm attribute 'ALARMCALLBACKNAME'" ;

//--- Syntax error message for terminal '$ALARMTIME$' :
static const char * gSyntaxErrorMessage_ALARMTIME = "alarm attribute 'ALARMTIME'" ;

//--- Syntax error message for terminal '$CYCLETIME$' :
static const char * gSyntaxErrorMessage_CYCLETIME = "alarm attribute 'CYCLETIME'" ;

//--- Syntax error message for terminal '$INCREMENTCOUNTER$' :
static const char * gSyntaxErrorMessage_INCREMENTCOUNTER = "alarm attribute 'INCREMENTCOUNTER'" ;

//--- Syntax error message for terminal '$RESOURCEPROPERTY$' :
static const char * gSyntaxErrorMessage_RESOURCEPROPERTY = "resource attribute 'RESOURCEPROPERTY'" ;

//--- Syntax error message for terminal '$STANDARD$' :
static const char * gSyntaxErrorMessage_STANDARD = "resource attribute 'STANDARD'" ;

//--- Syntax error message for terminal '$LINKED$' :
static const char * gSyntaxErrorMessage_LINKED = "resource attribute 'LINKED'" ;

//--- Syntax error message for terminal '$LINKEDRESOURCE$' :
static const char * gSyntaxErrorMessage_LINKEDRESOURCE = "resource attribute 'LINKEDRESOURCE'" ;

//--- Syntax error message for terminal '$INTERNAL$' :
static const char * gSyntaxErrorMessage_INTERNAL = "resource attribute 'INTERNAL'" ;

//--- Syntax error message for terminal '$MESSAGEPROPERTY$' :
static const char * gSyntaxErrorMessage_MESSAGEPROPERTY = "message attribute 'MESSAGEPROPERTY'" ;

//--- Syntax error message for terminal '$NOTIFICATION$' :
static const char * gSyntaxErrorMessage_NOTIFICATION = "message attribute 'NOTIFICATION'" ;

//--- Syntax error message for terminal '$NOTIFICATIONERROR$' :
static const char * gSyntaxErrorMessage_NOTIFICATIONERROR = "message attribute 'NOTIFICATIONERROR'" ;

//--- Syntax error message for terminal '$SEND_STATIC_INTERNAL$' :
static const char * gSyntaxErrorMessage_SEND_5FSTATIC_5FINTERNAL = "message attribute 'SEND_STATIC_INTERNAL'" ;

//--- Syntax error message for terminal '$SEND_STATIC_EXTERNAL$' :
static const char * gSyntaxErrorMessage_SEND_5FSTATIC_5FEXTERNAL = "message attribute 'SEND_STATIC_EXTERNAL'" ;

//--- Syntax error message for terminal '$SEND_DYNAMIC_EXTERNAL$' :
static const char * gSyntaxErrorMessage_SEND_5FDYNAMIC_5FEXTERNAL = "message attribute 'SEND_DYNAMIC_EXTERNAL'" ;

//--- Syntax error message for terminal '$SEND_ZERO_INTERNAL$' :
static const char * gSyntaxErrorMessage_SEND_5FZERO_5FINTERNAL = "message attribute 'SEND_ZERO_INTERNAL'" ;

//--- Syntax error message for terminal '$SEND_ZERO_EXTERNAL$' :
static const char * gSyntaxErrorMessage_SEND_5FZERO_5FEXTERNAL = "message attribute 'SEND_ZERO_EXTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_INTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FZERO_5FINTERNAL = "message attribute 'RECEIVE_ZERO_INTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_EXTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FZERO_5FEXTERNAL = "message attribute 'RECEIVE_ZERO_EXTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_UNQUEUED_INTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FINTERNAL = "message attribute 'RECEIVE_UNQUEUED_INTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_QUEUED_INTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FINTERNAL = "message attribute 'RECEIVE_QUEUED_INTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_UNQUEUED_EXTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FEXTERNAL = "message attribute 'RECEIVE_UNQUEUED_EXTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_QUEUED_EXTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FEXTERNAL = "message attribute 'RECEIVE_QUEUED_EXTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_DYNAMIC_EXTERNAL$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FDYNAMIC_5FEXTERNAL = "message attribute 'RECEIVE_DYNAMIC_EXTERNAL'" ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_SENDERS$' :
static const char * gSyntaxErrorMessage_RECEIVE_5FZERO_5FSENDERS = "message attribute 'RECEIVE_ZERO_SENDERS'" ;

//--- Syntax error message for terminal '$CDATATYPE$' :
static const char * gSyntaxErrorMessage_CDATATYPE = "message attribute 'CDATATYPE'" ;

//--- Syntax error message for terminal '$SENDINGMESSAGE$' :
static const char * gSyntaxErrorMessage_SENDINGMESSAGE = "message attribute 'SENDINGMESSAGE'" ;

//--- Syntax error message for terminal '$NONE$' :
static const char * gSyntaxErrorMessage_NONE = "message attribute 'NONE'" ;

//--- Syntax error message for terminal '$COMCALLBACK$' :
static const char * gSyntaxErrorMessage_COMCALLBACK = "message attribute 'COMCALLBACK'" ;

//--- Syntax error message for terminal '$COMCALLBACKNAME$' :
static const char * gSyntaxErrorMessage_COMCALLBACKNAME = "message attribute 'COMCALLBACKNAME'" ;

//--- Syntax error message for terminal '$INMCALLBACK$' :
static const char * gSyntaxErrorMessage_INMCALLBACK = "message attribute 'INMCALLBACK'" ;

//--- Syntax error message for terminal '$CALLBACKROUTINENAME$' :
static const char * gSyntaxErrorMessage_CALLBACKROUTINENAME = "message attribute 'CALLBACKROUTINENAME'" ;

//--- Syntax error message for terminal '$MONITOREDIPDU$' :
static const char * gSyntaxErrorMessage_MONITOREDIPDU = "message attribute 'MONITOREDIPDU'" ;

//--- Syntax error message for terminal '$TRANSFERPROPERTY$' :
static const char * gSyntaxErrorMessage_TRANSFERPROPERTY = "message attribute 'TRANSFERPROPERTY'" ;

//--- Syntax error message for terminal '$TRIGGERED$' :
static const char * gSyntaxErrorMessage_TRIGGERED = "message attribute 'TRIGGERED'" ;

//--- Syntax error message for terminal '$PENDING$' :
static const char * gSyntaxErrorMessage_PENDING = "message attribute 'PENDING'" ;

//--- Syntax error message for terminal '$NETWORKMESSAGE$' :
static const char * gSyntaxErrorMessage_NETWORKMESSAGE = "message attribute 'NETWORKMESSAGE'" ;

//--- Syntax error message for terminal '$FILTER$' :
static const char * gSyntaxErrorMessage_FILTER = "message attribute 'FILTER'" ;

//--- Syntax error message for terminal '$ALWAYS$' :
static const char * gSyntaxErrorMessage_ALWAYS = "message attribute 'ALWAYS'" ;

//--- Syntax error message for terminal '$NEVER$' :
static const char * gSyntaxErrorMessage_NEVER = "message attribute 'NEVER'" ;

//--- Syntax error message for terminal '$MASKEDNEWEQUALSX$' :
static const char * gSyntaxErrorMessage_MASKEDNEWEQUALSX = "message attribute 'MASKEDNEWEQUALSX'" ;

//--- Syntax error message for terminal '$MASKEDNEWDIFFERSX$' :
static const char * gSyntaxErrorMessage_MASKEDNEWDIFFERSX = "message attribute 'MASKEDNEWDIFFERSX'" ;

//--- Syntax error message for terminal '$NEWISEQUAL$' :
static const char * gSyntaxErrorMessage_NEWISEQUAL = "message attribute 'NEWISEQUAL'" ;

//--- Syntax error message for terminal '$NEWISDIFFERENT$' :
static const char * gSyntaxErrorMessage_NEWISDIFFERENT = "message attribute 'NEWISDIFFERENT'" ;

//--- Syntax error message for terminal '$MASKEDNEWEQUALSMASKEDOLD$' :
static const char * gSyntaxErrorMessage_MASKEDNEWEQUALSMASKEDOLD = "message attribute 'MASKEDNEWEQUALSMASKEDOLD'" ;

//--- Syntax error message for terminal '$MASKEDNEWDIFFERSMASKEDOLD$' :
static const char * gSyntaxErrorMessage_MASKEDNEWDIFFERSMASKEDOLD = "message attribute 'MASKEDNEWDIFFERSMASKEDOLD'" ;

//--- Syntax error message for terminal '$NEWISWITHIN$' :
static const char * gSyntaxErrorMessage_NEWISWITHIN = "message attribute 'NEWISWITHIN'" ;

//--- Syntax error message for terminal '$NEWISOUTSIDE$' :
static const char * gSyntaxErrorMessage_NEWISOUTSIDE = "message attribute 'NEWISOUTSIDE'" ;

//--- Syntax error message for terminal '$NEWISGREATER$' :
static const char * gSyntaxErrorMessage_NEWISGREATER = "message attribute 'NEWISGREATER'" ;

//--- Syntax error message for terminal '$NEWISLESSOREQUAL$' :
static const char * gSyntaxErrorMessage_NEWISLESSOREQUAL = "message attribute 'NEWISLESSOREQUAL'" ;

//--- Syntax error message for terminal '$NEWISLESS$' :
static const char * gSyntaxErrorMessage_NEWISLESS = "message attribute 'NEWISLESS'" ;

//--- Syntax error message for terminal '$NEWISGREATEROREQUAL$' :
static const char * gSyntaxErrorMessage_NEWISGREATEROREQUAL = "message attribute 'NEWISGREATEROREQUAL'" ;

//--- Syntax error message for terminal '$ONEEVERYN$' :
static const char * gSyntaxErrorMessage_ONEEVERYN = "message attribute 'ONEEVERYN'" ;

//--- Syntax error message for terminal '$MIN$' :
static const char * gSyntaxErrorMessage_MIN = "message attribute 'MIN'" ;

//--- Syntax error message for terminal '$MAX$' :
static const char * gSyntaxErrorMessage_MAX = "message attribute 'MAX'" ;

//--- Syntax error message for terminal '$X$' :
static const char * gSyntaxErrorMessage_X = "message attribute 'X'" ;

//--- Syntax error message for terminal '$PERIOD$' :
static const char * gSyntaxErrorMessage_PERIOD = "message attribute 'PERIOD'" ;

//--- Syntax error message for terminal '$OFFSET$' :
static const char * gSyntaxErrorMessage_OFFSET = "message attribute 'OFFSET'" ;

//--- Syntax error message for terminal '$NETWORKORDERCALLOUT$' :
static const char * gSyntaxErrorMessage_NETWORKORDERCALLOUT = "message attribute 'NETWORKORDERCALLOUT'" ;

//--- Syntax error message for terminal '$CPUORDERCALLOUT$' :
static const char * gSyntaxErrorMessage_CPUORDERCALLOUT = "message attribute 'CPUORDERCALLOUT'" ;

//--- Syntax error message for terminal '$INITIALVALUE$' :
static const char * gSyntaxErrorMessage_INITIALVALUE = "message attribute 'INITIALVALUE'" ;

//--- Syntax error message for terminal '$QUEUESIZE$' :
static const char * gSyntaxErrorMessage_QUEUESIZE = "message attribute 'QUEUESIZE'" ;

//--- Syntax error message for terminal '$LINK$' :
static const char * gSyntaxErrorMessage_LINK = "message attribute 'LINK'" ;

//--- Syntax error message for terminal '$RECEIVEMESSAGE$' :
static const char * gSyntaxErrorMessage_RECEIVEMESSAGE = "message attribute 'RECEIVEMESSAGE'" ;

//--- Syntax error message for terminal '$FLAG$' :
static const char * gSyntaxErrorMessage_FLAG = "message attribute 'FLAG'" ;

//--- Syntax error message for terminal '$FLAGNAME$' :
static const char * gSyntaxErrorMessage_FLAGNAME = "message attribute 'FLAGNAME'" ;

//--- Syntax error message for terminal '$STATIC$' :
static const char * gSyntaxErrorMessage_STATIC = "networkmessage attribute 'STATIC'" ;

//--- Syntax error message for terminal '$DYNAMIC$' :
static const char * gSyntaxErrorMessage_DYNAMIC = "networkmessage attribute 'DYNAMIC'" ;

//--- Syntax error message for terminal '$ZERO$' :
static const char * gSyntaxErrorMessage_ZERO = "networkmessage attribute 'ZERO'" ;

//--- Syntax error message for terminal '$SIZEINBITS$' :
static const char * gSyntaxErrorMessage_SIZEINBITS = "networkmessage attribute 'SIZEINBITS'" ;

//--- Syntax error message for terminal '$MAXSIZEINBITS$' :
static const char * gSyntaxErrorMessage_MAXSIZEINBITS = "networkmessage attribute 'MAXSIZEINBITS'" ;

//--- Syntax error message for terminal '$BITORDERING$' :
static const char * gSyntaxErrorMessage_BITORDERING = "networkmessage attribute 'BITORDERING'" ;

//--- Syntax error message for terminal '$BIGENDIAN$' :
static const char * gSyntaxErrorMessage_BIGENDIAN = "networkmessage attribute 'BIGENDIAN'" ;

//--- Syntax error message for terminal '$LITTLEENDIAN$' :
static const char * gSyntaxErrorMessage_LITTLEENDIAN = "networkmessage attribute 'LITTLEENDIAN'" ;

//--- Syntax error message for terminal '$BITPOSITION$' :
static const char * gSyntaxErrorMessage_BITPOSITION = "networkmessage attribute 'BITPOSITION'" ;

//--- Syntax error message for terminal '$DATAINTERPRETATION$' :
static const char * gSyntaxErrorMessage_DATAINTERPRETATION = "networkmessage attribute 'DATAINTERPRETATION'" ;

//--- Syntax error message for terminal '$UNSIGNEDINTEGER$' :
static const char * gSyntaxErrorMessage_UNSIGNEDINTEGER = "networkmessage attribute 'UNSIGNEDINTEGER'" ;

//--- Syntax error message for terminal '$BYTEARRAY$' :
static const char * gSyntaxErrorMessage_BYTEARRAY = "networkmessage attribute 'BYTEARRAY'" ;

//--- Syntax error message for terminal '$DIRECTION$' :
static const char * gSyntaxErrorMessage_DIRECTION = "networkmessage attribute 'DIRECTION'" ;

//--- Syntax error message for terminal '$SENT$' :
static const char * gSyntaxErrorMessage_SENT = "networkmessage attribute 'SENT'" ;

//--- Syntax error message for terminal '$RECEIVED$' :
static const char * gSyntaxErrorMessage_RECEIVED = "networkmessage attribute 'RECEIVED'" ;

//--- Syntax error message for terminal '$COMTIMEBASE$' :
static const char * gSyntaxErrorMessage_COMTIMEBASE = "com attribute 'COMTIMEBASE'" ;

//--- Syntax error message for terminal '$COMERRORHOOK$' :
static const char * gSyntaxErrorMessage_COMERRORHOOK = "com attribute 'COMERRORHOOK'" ;

//--- Syntax error message for terminal '$COMUSEGETSERVICEID$' :
static const char * gSyntaxErrorMessage_COMUSEGETSERVICEID = "com attribute 'COMUSEGETSERVICEID'" ;

//--- Syntax error message for terminal '$COMUSEPARAMETERACCESS$' :
static const char * gSyntaxErrorMessage_COMUSEPARAMETERACCESS = "com attribute 'COMUSEPARAMETERACCESS'" ;

//--- Syntax error message for terminal '$COMSTARTCOMEXTENSION$' :
static const char * gSyntaxErrorMessage_COMSTARTCOMEXTENSION = "com attribute 'COMSTARTCOMEXTENSION'" ;

//--- Syntax error message for terminal '$COMAPPMODE$' :
static const char * gSyntaxErrorMessage_COMAPPMODE = "com attribute 'COMAPPMODE'" ;

//--- Syntax error message for terminal '$COMSTATUS$' :
static const char * gSyntaxErrorMessage_COMSTATUS = "com attribute 'COMSTATUS'" ;

//--- Syntax error message for terminal '$USE$' :
static const char * gSyntaxErrorMessage_USE = "com attribute 'USE'" ;

//--- Syntax error message for terminal '$COMEXTENDED$' :
static const char * gSyntaxErrorMessage_COMEXTENDED = "com attribute 'COMEXTENDED'" ;

//--- Syntax error message for terminal '$COMSTANDARD$' :
static const char * gSyntaxErrorMessage_COMSTANDARD = "com attribute 'COMSTANDARD'" ;

//--- Syntax error message for terminal '$IPDUPROPERTY$' :
static const char * gSyntaxErrorMessage_IPDUPROPERTY = "ipdu attribute 'IPDUPROPERTY'" ;

//--- Syntax error message for terminal '$IPDUCALLOUT$' :
static const char * gSyntaxErrorMessage_IPDUCALLOUT = "ipdu attribute 'IPDUCALLOUT'" ;

//--- Syntax error message for terminal '$LAYERUSED$' :
static const char * gSyntaxErrorMessage_LAYERUSED = "ipdu attribute 'LAYERUSED'" ;

//--- Syntax error message for terminal '$TRANSMISSIONMODE$' :
static const char * gSyntaxErrorMessage_TRANSMISSIONMODE = "ipdu attribute 'TRANSMISSIONMODE'" ;

//--- Syntax error message for terminal '$DIRECT$' :
static const char * gSyntaxErrorMessage_DIRECT = "ipdu attribute 'DIRECT'" ;

//--- Syntax error message for terminal '$PERIODIC$' :
static const char * gSyntaxErrorMessage_PERIODIC = "ipdu attribute 'PERIODIC'" ;

//--- Syntax error message for terminal '$MIXED$' :
static const char * gSyntaxErrorMessage_MIXED = "ipdu attribute 'MIXED'" ;

//--- Syntax error message for terminal '$TIMEOUT$' :
static const char * gSyntaxErrorMessage_TIMEOUT = "ipdu attribute 'TIMEOUT'" ;

//--- Syntax error message for terminal '$FIRTSTIMEOUT$' :
static const char * gSyntaxErrorMessage_FIRTSTIMEOUT = "ipdu attribute 'FIRTSTIMEOUT'" ;

//--- Syntax error message for terminal '$MINIMUMDELAYTIME$' :
static const char * gSyntaxErrorMessage_MINIMUMDELAYTIME = "ipdu attribute 'MINIMUMDELAYTIME'" ;

//--- Syntax error message for terminal '$TIMEPERIOD$' :
static const char * gSyntaxErrorMessage_TIMEPERIOD = "ipdu attribute 'TIMEPERIOD'" ;

//--- Syntax error message for terminal '$TIMEOFFSET$' :
static const char * gSyntaxErrorMessage_TIMEOFFSET = "ipdu attribute 'TIMEOFFSET'" ;

//--- Syntax error message for terminal '$NON$' :
static const char * gSyntaxErrorMessage_NON = "scheduling value 'NON'" ;

//--- Syntax error message for terminal '$FULL$' :
static const char * gSyntaxErrorMessage_FULL = "scheduling value 'FULL'" ;

//--- Syntax error message for terminal '$FALSE$' :
static const char * gSyntaxErrorMessage_FALSE = "boolean 'FALSE'" ;

//--- Syntax error message for terminal '$TRUE$' :
static const char * gSyntaxErrorMessage_TRUE = "boolean 'TRUE'" ;

//--- Syntax error message for terminal '$PROTECTIONHOOK$' :
static const char * gSyntaxErrorMessage_PROTECTIONHOOK = "AUTOSAR attribute 'PROTECTIONHOOK'" ;

//--- Syntax error message for terminal '$SCALABILITYCLASS$' :
static const char * gSyntaxErrorMessage_SCALABILITYCLASS = "AUTOSAR attribute 'SCALABILITYCLASS'" ;

//--- Syntax error message for terminal '$STACKMONITORING$' :
static const char * gSyntaxErrorMessage_STACKMONITORING = "AUTOSAR attribute 'STACKMONITORING'" ;

//--- Syntax error message for terminal '$TIMING_PROTECTION$' :
static const char * gSyntaxErrorMessage_TIMING_5FPROTECTION = "AUTOSAR attribute 'TIMING_PROTECTION'" ;

//--- Syntax error message for terminal '$ACCESSING_APPLICATION$' :
static const char * gSyntaxErrorMessage_ACCESSING_5FAPPLICATION = "AUTOSAR attribute 'ACCESSING_APPLICATION'" ;

//--- Syntax error message for terminal '$SC1$' :
static const char * gSyntaxErrorMessage_SC1 = "AUTOSAR value 'SC1'" ;

//--- Syntax error message for terminal '$SC2$' :
static const char * gSyntaxErrorMessage_SC2 = "AUTOSAR value 'SC2'" ;

//--- Syntax error message for terminal '$SC3$' :
static const char * gSyntaxErrorMessage_SC3 = "AUTOSAR value 'SC3'" ;

//--- Syntax error message for terminal '$SC4$' :
static const char * gSyntaxErrorMessage_SC4 = "AUTOSAR value 'SC4'" ;

//--- Syntax error message for terminal '$SCHEDULETABLE$' :
static const char * gSyntaxErrorMessage_SCHEDULETABLE = "AUTOSAR object 'SCHEDULETABLE'" ;

//--- Syntax error message for terminal '$APPLICATION$' :
static const char * gSyntaxErrorMessage_APPLICATION = "AUTOSAR object 'APPLICATION'" ;

//--- Syntax error message for terminal '$LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION$' :
static const char * gSyntaxErrorMessage_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION = "SCHEDULETABLE attribute 'LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION'" ;

//--- Syntax error message for terminal '$SYNC_STRATEGY$' :
static const char * gSyntaxErrorMessage_SYNC_5FSTRATEGY = "SCHEDULETABLE attribute 'SYNC_STRATEGY'" ;

//--- Syntax error message for terminal '$MAX_INCREASE$' :
static const char * gSyntaxErrorMessage_MAX_5FINCREASE = "SCHEDULETABLE attribute 'MAX_INCREASE'" ;

//--- Syntax error message for terminal '$MAX_DECREASE$' :
static const char * gSyntaxErrorMessage_MAX_5FDECREASE = "SCHEDULETABLE attribute 'MAX_DECREASE'" ;

//--- Syntax error message for terminal '$MAX_INCREASE_ASYNC$' :
static const char * gSyntaxErrorMessage_MAX_5FINCREASE_5FASYNC = "SCHEDULETABLE attribute 'MAX_INCREASE_ASYNC'" ;

//--- Syntax error message for terminal '$MAX_DECREASE_ASYNC$' :
static const char * gSyntaxErrorMessage_MAX_5FDECREASE_5FASYNC = "SCHEDULETABLE attribute 'MAX_DECREASE_ASYNC'" ;

//--- Syntax error message for terminal '$PRECISION$' :
static const char * gSyntaxErrorMessage_PRECISION = "SCHEDULETABLE attribute 'PRECISION'" ;

//--- Syntax error message for terminal '$LENGTH$' :
static const char * gSyntaxErrorMessage_LENGTH = "SCHEDULETABLE attribute 'LENGTH'" ;

//--- Syntax error message for terminal '$TRUSTED$' :
static const char * gSyntaxErrorMessage_TRUSTED = "APPLICATION attribute 'TRUSTED'" ;

//--- Syntax error message for terminal '$HAS_RESTARTTASK$' :
static const char * gSyntaxErrorMessage_HAS_5FRESTARTTASK = "APPLICATION attribute 'HAS_RESTARTTASK'" ;

//--- Syntax error message for terminal '$RESTARTTASK$' :
static const char * gSyntaxErrorMessage_RESTARTTASK = "APPLICATION attribute 'RESTARTTASK'" ;

//--- Syntax error message for terminal '$TRUSTED_FUNCTION$' :
static const char * gSyntaxErrorMessage_TRUSTED_5FFUNCTION = "APPLICATION attribute 'TRUSTED_FUNCTION'" ;

//--- Syntax error message for terminal '$EXECUTIONBUDGET$' :
static const char * gSyntaxErrorMessage_EXECUTIONBUDGET = "TIMING_PROTECTION attribute 'EXECUTIONBUDGET'" ;

//--- Syntax error message for terminal '$EXECUTIONTIME$' :
static const char * gSyntaxErrorMessage_EXECUTIONTIME = "TIMING_PROTECTION attribute 'EXECUTIONTIME'" ;

//--- Syntax error message for terminal '$COUNTLIMIT$' :
static const char * gSyntaxErrorMessage_COUNTLIMIT = "TIMING_PROTECTION attribute 'COUNTLIMIT'" ;

//--- Syntax error message for terminal '$TIMEFRAME$' :
static const char * gSyntaxErrorMessage_TIMEFRAME = "TIMING_PROTECTION attribute 'TIMEFRAME'" ;

//--- Syntax error message for terminal '$MAXOSINTERRUPTLOCKTIME$' :
static const char * gSyntaxErrorMessage_MAXOSINTERRUPTLOCKTIME = "TIMING_PROTECTION attribute 'MAXOSINTERRUPTLOCKTIME'" ;

//--- Syntax error message for terminal '$MAXALLINTERRUPTLOCKTIME$' :
static const char * gSyntaxErrorMessage_MAXALLINTERRUPTLOCKTIME = "TIMING_PROTECTION attribute 'MAXALLINTERRUPTLOCKTIME'" ;

//--- Syntax error message for terminal '$LOCKINGTIME$' :
static const char * gSyntaxErrorMessage_LOCKINGTIME = "TIMING_PROTECTION attribute 'LOCKINGTIME'" ;

//--- Syntax error message for terminal '$RESOURCELOCK$' :
static const char * gSyntaxErrorMessage_RESOURCELOCK = "TIMING_PROTECTION attribute 'RESOURCELOCK'" ;

//--- Syntax error message for terminal '$MAXRESOURCELOCKTIME$' :
static const char * gSyntaxErrorMessage_MAXRESOURCELOCKTIME = "TIMING_PROTECTION attribute 'MAXRESOURCELOCKTIME'" ;

//--- Syntax error message for terminal '$SMOOTH$' :
static const char * gSyntaxErrorMessage_SMOOTH = "Synchronization strategy 'SMOOTH'" ;

//--- Syntax error message for terminal '$HARD$' :
static const char * gSyntaxErrorMessage_HARD = "Synchronization strategy 'HARD'" ;

//--- Syntax error message for terminal '$TICKS$' :
static const char * gSyntaxErrorMessage_TICKS = "Unit 'TICKS'" ;

//--- Syntax error message for terminal '$NANOSECONDS$' :
static const char * gSyntaxErrorMessage_NANOSECONDS = "Unit 'NANOSECONDS'" ;

//--- Syntax error message for terminal '$SOFTWARE$' :
static const char * gSyntaxErrorMessage_SOFTWARE = "Counter type attribute 'SOFTWARE'" ;

//--- Syntax error message for terminal '$HARDWARE$' :
static const char * gSyntaxErrorMessage_HARDWARE = "Counter type attribute 'HARDWARE'" ;

//--- Syntax error message for terminal '$OSINTERNAL$' :
static const char * gSyntaxErrorMessage_OSINTERNAL = "Counter type attribute 'OSINTERNAL'" ;

//--- Syntax error message for terminal '$GPT$' :
static const char * gSyntaxErrorMessage_GPT = "Counter type attribute 'GPT'" ;

//--- Syntax error message for terminal '$NS_PER_HW_TICK$' :
static const char * gSyntaxErrorMessage_NS_5FPER_5FHW_5FTICK = "Counter type attribute 'NS_PER_HW_TICK'" ;

//--- Syntax error message for terminal '$GPTCHANNELNAME$' :
static const char * gSyntaxErrorMessage_GPTCHANNELNAME = "Counter type attribute 'GPTCHANNELNAME'" ;

//--- Syntax error message for terminal '$DRIVER$' :
static const char * gSyntaxErrorMessage_DRIVER = "Counter type attribute 'DRIVER'" ;

//--- Syntax error message for terminal '$TIMECONSTANTS$' :
static const char * gSyntaxErrorMessage_TIMECONSTANTS = "Counter type attribute 'TIMECONSTANTS'" ;

//--- Syntax error message for terminal '$TIMECONSTANT$' :
static const char * gSyntaxErrorMessage_TIMECONSTANT = "Counter type attribute 'TIMECONSTANT'" ;

//--- Syntax error message for terminal '$NS$' :
static const char * gSyntaxErrorMessage_NS = "Counter type attribute 'NS'" ;

//--- Syntax error message for terminal '$CONSTNAME$' :
static const char * gSyntaxErrorMessage_CONSTNAME = "Counter type attribute 'CONSTNAME'" ;

//--- Syntax error message for terminal '$comment$' :
static const char * gSyntaxErrorMessage_comment = "a comment" ;

//--- Syntax error message for terminal '$idf$' :
static const char * gSyntaxErrorMessage_idf = "identifier" ;

//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "';' delimiter" ;

//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "':' delimiter" ;

//--- Syntax error message for terminal '$=$' :
static const char * gSyntaxErrorMessage__3D = "'=' delimiter" ;

//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "'{' delimiter" ;

//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "'}' delimiter" ;

//--- Syntax error message for terminal '$..$' :
static const char * gSyntaxErrorMessage__2E_2E = "'..' delimiter" ;

//--- Syntax error message for terminal '$[$' :
static const char * gSyntaxErrorMessage__5B = "'[' delimiter" ;

//--- Syntax error message for terminal '$]$' :
static const char * gSyntaxErrorMessage__5D = "']' delimiter" ;

//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "',' delimiter" ;

//--- Syntax error message for terminal '$.$' :
static const char * gSyntaxErrorMessage__2E = "'.' delimiter" ;

//--- Syntax error message for terminal '$-$' :
static const char * gSyntaxErrorMessage__2D = "'-' delimiter" ;

//--- Syntax error message for terminal '$string$' :
static const char * gSyntaxErrorMessage_string = "literal string" ;

//--- Syntax error message for terminal '$g_string$' :
static const char * gSyntaxErrorMessage_g_5Fstring = "in search path" ;

//--- Syntax error message for terminal '$uint_number$' :
static const char * gSyntaxErrorMessage_uint_5Fnumber = "literal unsigned 64 bits integer" ;

//--- Syntax error message for terminal '$float_number$' :
static const char * gSyntaxErrorMessage_float_5Fnumber = "literal float" ;

//--- Syntax error message for terminal '$set_start_uint_number$' :
static const char * gSyntaxErrorMessage_set_5Fstart_5Fuint_5Fnumber = "literal unsigned 64 bits integer" ;

//--- Syntax error message for terminal '$include$' :
static const char * gSyntaxErrorMessage_include = "command 'include'" ;

//--- Syntax error message for terminal '$command$' :
static const char * gSyntaxErrorMessage_command = "command" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_lexique::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [247] = {"end of source",
       gSyntaxErrorMessage_APP_5FSRC,
       gSyntaxErrorMessage_CFLAGS,
       gSyntaxErrorMessage_ASFLAGS,
       gSyntaxErrorMessage_LDFLAGS,
       gSyntaxErrorMessage_APP_5FNAME,
       gSyntaxErrorMessage_TRAMPOLINE_5FBASE_5FPATH,
       gSyntaxErrorMessage_OIL_5FVERSION,
       gSyntaxErrorMessage_IMPLEMENTATION,
       gSyntaxErrorMessage_OS,
       gSyntaxErrorMessage_TASK,
       gSyntaxErrorMessage_COUNTER,
       gSyntaxErrorMessage_ALARM,
       gSyntaxErrorMessage_RESOURCE,
       gSyntaxErrorMessage_EVENT,
       gSyntaxErrorMessage_ISR,
       gSyntaxErrorMessage_MESSAGE,
       gSyntaxErrorMessage_COM,
       gSyntaxErrorMessage_NM,
       gSyntaxErrorMessage_APPMODE,
       gSyntaxErrorMessage_IPDU,
       gSyntaxErrorMessage_CPU,
       gSyntaxErrorMessage_UINT32,
       gSyntaxErrorMessage_INT32,
       gSyntaxErrorMessage_UINT64,
       gSyntaxErrorMessage_INT64,
       gSyntaxErrorMessage_FLOAT,
       gSyntaxErrorMessage_ENUM,
       gSyntaxErrorMessage_STRING,
       gSyntaxErrorMessage_BOOLEAN,
       gSyntaxErrorMessage_WITH_5FAUTO,
       gSyntaxErrorMessage_NO_5FDEFAULT,
       gSyntaxErrorMessage_AUTO,
       gSyntaxErrorMessage_MASK,
       gSyntaxErrorMessage_CATEGORY,
       gSyntaxErrorMessage_OS_5FTYPE,
       gSyntaxErrorMessage_TASK_5FTYPE,
       gSyntaxErrorMessage_COUNTER_5FTYPE,
       gSyntaxErrorMessage_ALARM_5FTYPE,
       gSyntaxErrorMessage_RESOURCE_5FTYPE,
       gSyntaxErrorMessage_EVENT_5FTYPE,
       gSyntaxErrorMessage_ISR_5FTYPE,
       gSyntaxErrorMessage_MESSAGE_5FTYPE,
       gSyntaxErrorMessage_COM_5FTYPE,
       gSyntaxErrorMessage_NM_5FTYPE,
       gSyntaxErrorMessage_APPMODE_5FTYPE,
       gSyntaxErrorMessage_IPDU_5FTYPE,
       gSyntaxErrorMessage_STATUS,
       gSyntaxErrorMessage_EXTENDED,
       gSyntaxErrorMessage_STARTUPHOOK,
       gSyntaxErrorMessage_ERRORHOOK,
       gSyntaxErrorMessage_SHUTDOWNHOOK,
       gSyntaxErrorMessage_PRETASKHOOK,
       gSyntaxErrorMessage_POSTTASKHOOK,
       gSyntaxErrorMessage_USEGETSERVICEID,
       gSyntaxErrorMessage_USEPARAMETERACCESS,
       gSyntaxErrorMessage_USERESSCHEDULER,
       gSyntaxErrorMessage_SYSTEM_5FCALL,
       gSyntaxErrorMessage_TRACE,
       gSyntaxErrorMessage_FILE,
       gSyntaxErrorMessage_PRIORITY,
       gSyntaxErrorMessage_SCHEDULE,
       gSyntaxErrorMessage_ACTIVATION,
       gSyntaxErrorMessage_AUTOSTART,
       gSyntaxErrorMessage_MAXALLOWEDVALUE,
       gSyntaxErrorMessage_TICKSPERBASE,
       gSyntaxErrorMessage_MINCYCLE,
       gSyntaxErrorMessage_TYPE,
       gSyntaxErrorMessage_UNIT,
       gSyntaxErrorMessage_ACTION,
       gSyntaxErrorMessage_SETEVENT,
       gSyntaxErrorMessage_ACTIVATETASK,
       gSyntaxErrorMessage_ALARMCALLBACK,
       gSyntaxErrorMessage_ALARMCALLBACKNAME,
       gSyntaxErrorMessage_ALARMTIME,
       gSyntaxErrorMessage_CYCLETIME,
       gSyntaxErrorMessage_INCREMENTCOUNTER,
       gSyntaxErrorMessage_RESOURCEPROPERTY,
       gSyntaxErrorMessage_STANDARD,
       gSyntaxErrorMessage_LINKED,
       gSyntaxErrorMessage_LINKEDRESOURCE,
       gSyntaxErrorMessage_INTERNAL,
       gSyntaxErrorMessage_MESSAGEPROPERTY,
       gSyntaxErrorMessage_NOTIFICATION,
       gSyntaxErrorMessage_NOTIFICATIONERROR,
       gSyntaxErrorMessage_SEND_5FSTATIC_5FINTERNAL,
       gSyntaxErrorMessage_SEND_5FSTATIC_5FEXTERNAL,
       gSyntaxErrorMessage_SEND_5FDYNAMIC_5FEXTERNAL,
       gSyntaxErrorMessage_SEND_5FZERO_5FINTERNAL,
       gSyntaxErrorMessage_SEND_5FZERO_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FZERO_5FINTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FZERO_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FINTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FINTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FDYNAMIC_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FZERO_5FSENDERS,
       gSyntaxErrorMessage_CDATATYPE,
       gSyntaxErrorMessage_SENDINGMESSAGE,
       gSyntaxErrorMessage_NONE,
       gSyntaxErrorMessage_COMCALLBACK,
       gSyntaxErrorMessage_COMCALLBACKNAME,
       gSyntaxErrorMessage_INMCALLBACK,
       gSyntaxErrorMessage_CALLBACKROUTINENAME,
       gSyntaxErrorMessage_MONITOREDIPDU,
       gSyntaxErrorMessage_TRANSFERPROPERTY,
       gSyntaxErrorMessage_TRIGGERED,
       gSyntaxErrorMessage_PENDING,
       gSyntaxErrorMessage_NETWORKMESSAGE,
       gSyntaxErrorMessage_FILTER,
       gSyntaxErrorMessage_ALWAYS,
       gSyntaxErrorMessage_NEVER,
       gSyntaxErrorMessage_MASKEDNEWEQUALSX,
       gSyntaxErrorMessage_MASKEDNEWDIFFERSX,
       gSyntaxErrorMessage_NEWISEQUAL,
       gSyntaxErrorMessage_NEWISDIFFERENT,
       gSyntaxErrorMessage_MASKEDNEWEQUALSMASKEDOLD,
       gSyntaxErrorMessage_MASKEDNEWDIFFERSMASKEDOLD,
       gSyntaxErrorMessage_NEWISWITHIN,
       gSyntaxErrorMessage_NEWISOUTSIDE,
       gSyntaxErrorMessage_NEWISGREATER,
       gSyntaxErrorMessage_NEWISLESSOREQUAL,
       gSyntaxErrorMessage_NEWISLESS,
       gSyntaxErrorMessage_NEWISGREATEROREQUAL,
       gSyntaxErrorMessage_ONEEVERYN,
       gSyntaxErrorMessage_MIN,
       gSyntaxErrorMessage_MAX,
       gSyntaxErrorMessage_X,
       gSyntaxErrorMessage_PERIOD,
       gSyntaxErrorMessage_OFFSET,
       gSyntaxErrorMessage_NETWORKORDERCALLOUT,
       gSyntaxErrorMessage_CPUORDERCALLOUT,
       gSyntaxErrorMessage_INITIALVALUE,
       gSyntaxErrorMessage_QUEUESIZE,
       gSyntaxErrorMessage_LINK,
       gSyntaxErrorMessage_RECEIVEMESSAGE,
       gSyntaxErrorMessage_FLAG,
       gSyntaxErrorMessage_FLAGNAME,
       gSyntaxErrorMessage_STATIC,
       gSyntaxErrorMessage_DYNAMIC,
       gSyntaxErrorMessage_ZERO,
       gSyntaxErrorMessage_SIZEINBITS,
       gSyntaxErrorMessage_MAXSIZEINBITS,
       gSyntaxErrorMessage_BITORDERING,
       gSyntaxErrorMessage_BIGENDIAN,
       gSyntaxErrorMessage_LITTLEENDIAN,
       gSyntaxErrorMessage_BITPOSITION,
       gSyntaxErrorMessage_DATAINTERPRETATION,
       gSyntaxErrorMessage_UNSIGNEDINTEGER,
       gSyntaxErrorMessage_BYTEARRAY,
       gSyntaxErrorMessage_DIRECTION,
       gSyntaxErrorMessage_SENT,
       gSyntaxErrorMessage_RECEIVED,
       gSyntaxErrorMessage_COMTIMEBASE,
       gSyntaxErrorMessage_COMERRORHOOK,
       gSyntaxErrorMessage_COMUSEGETSERVICEID,
       gSyntaxErrorMessage_COMUSEPARAMETERACCESS,
       gSyntaxErrorMessage_COMSTARTCOMEXTENSION,
       gSyntaxErrorMessage_COMAPPMODE,
       gSyntaxErrorMessage_COMSTATUS,
       gSyntaxErrorMessage_USE,
       gSyntaxErrorMessage_COMEXTENDED,
       gSyntaxErrorMessage_COMSTANDARD,
       gSyntaxErrorMessage_IPDUPROPERTY,
       gSyntaxErrorMessage_IPDUCALLOUT,
       gSyntaxErrorMessage_LAYERUSED,
       gSyntaxErrorMessage_TRANSMISSIONMODE,
       gSyntaxErrorMessage_DIRECT,
       gSyntaxErrorMessage_PERIODIC,
       gSyntaxErrorMessage_MIXED,
       gSyntaxErrorMessage_TIMEOUT,
       gSyntaxErrorMessage_FIRTSTIMEOUT,
       gSyntaxErrorMessage_MINIMUMDELAYTIME,
       gSyntaxErrorMessage_TIMEPERIOD,
       gSyntaxErrorMessage_TIMEOFFSET,
       gSyntaxErrorMessage_NON,
       gSyntaxErrorMessage_FULL,
       gSyntaxErrorMessage_FALSE,
       gSyntaxErrorMessage_TRUE,
       gSyntaxErrorMessage_PROTECTIONHOOK,
       gSyntaxErrorMessage_SCALABILITYCLASS,
       gSyntaxErrorMessage_STACKMONITORING,
       gSyntaxErrorMessage_TIMING_5FPROTECTION,
       gSyntaxErrorMessage_ACCESSING_5FAPPLICATION,
       gSyntaxErrorMessage_SC1,
       gSyntaxErrorMessage_SC2,
       gSyntaxErrorMessage_SC3,
       gSyntaxErrorMessage_SC4,
       gSyntaxErrorMessage_SCHEDULETABLE,
       gSyntaxErrorMessage_APPLICATION,
       gSyntaxErrorMessage_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION,
       gSyntaxErrorMessage_SYNC_5FSTRATEGY,
       gSyntaxErrorMessage_MAX_5FINCREASE,
       gSyntaxErrorMessage_MAX_5FDECREASE,
       gSyntaxErrorMessage_MAX_5FINCREASE_5FASYNC,
       gSyntaxErrorMessage_MAX_5FDECREASE_5FASYNC,
       gSyntaxErrorMessage_PRECISION,
       gSyntaxErrorMessage_LENGTH,
       gSyntaxErrorMessage_TRUSTED,
       gSyntaxErrorMessage_HAS_5FRESTARTTASK,
       gSyntaxErrorMessage_RESTARTTASK,
       gSyntaxErrorMessage_TRUSTED_5FFUNCTION,
       gSyntaxErrorMessage_EXECUTIONBUDGET,
       gSyntaxErrorMessage_EXECUTIONTIME,
       gSyntaxErrorMessage_COUNTLIMIT,
       gSyntaxErrorMessage_TIMEFRAME,
       gSyntaxErrorMessage_MAXOSINTERRUPTLOCKTIME,
       gSyntaxErrorMessage_MAXALLINTERRUPTLOCKTIME,
       gSyntaxErrorMessage_LOCKINGTIME,
       gSyntaxErrorMessage_RESOURCELOCK,
       gSyntaxErrorMessage_MAXRESOURCELOCKTIME,
       gSyntaxErrorMessage_SMOOTH,
       gSyntaxErrorMessage_HARD,
       gSyntaxErrorMessage_TICKS,
       gSyntaxErrorMessage_NANOSECONDS,
       gSyntaxErrorMessage_SOFTWARE,
       gSyntaxErrorMessage_HARDWARE,
       gSyntaxErrorMessage_OSINTERNAL,
       gSyntaxErrorMessage_GPT,
       gSyntaxErrorMessage_NS_5FPER_5FHW_5FTICK,
       gSyntaxErrorMessage_GPTCHANNELNAME,
       gSyntaxErrorMessage_DRIVER,
       gSyntaxErrorMessage_TIMECONSTANTS,
       gSyntaxErrorMessage_TIMECONSTANT,
       gSyntaxErrorMessage_NS,
       gSyntaxErrorMessage_CONSTNAME,
       gSyntaxErrorMessage_comment,
       gSyntaxErrorMessage_idf,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__3D,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2E_2E,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2D,
       gSyntaxErrorMessage_string,
       gSyntaxErrorMessage_g_5Fstring,
       gSyntaxErrorMessage_uint_5Fnumber,
       gSyntaxErrorMessage_float_5Fnumber,
       gSyntaxErrorMessage_set_5Fstart_5Fuint_5Fnumber,
       gSyntaxErrorMessage_include,
       gSyntaxErrorMessage_command} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'makefileKeywords'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_makefileKeywords = 6 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_makefileKeywords [6] = {
  C_lexique_table_entry ("CFLAGS", 6, goil_lexique_1_CFLAGS),
  C_lexique_table_entry ("APP_SRC", 7, goil_lexique_1_APP_5FSRC),
  C_lexique_table_entry ("ASFLAGS", 7, goil_lexique_1_ASFLAGS),
  C_lexique_table_entry ("LDFLAGS", 7, goil_lexique_1_LDFLAGS),
  C_lexique_table_entry ("APP_NAME", 8, goil_lexique_1_APP_5FNAME),
  C_lexique_table_entry ("TRAMPOLINE_BASE_PATH", 20, goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH)
} ;

sint16 goil_lexique::search_into_makefileKeywords (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_makefileKeywords, goil_lexique_table_size_makefileKeywords) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'oilVersion'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_oilVersion = 1 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_oilVersion [1] = {
  C_lexique_table_entry ("OIL_VERSION", 11, goil_lexique_1_OIL_5FVERSION)
} ;

sint16 goil_lexique::search_into_oilVersion (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_oilVersion, goil_lexique_table_size_oilVersion) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'oilDefinitions'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_oilDefinitions = 1 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_oilDefinitions [1] = {
  C_lexique_table_entry ("IMPLEMENTATION", 14, goil_lexique_1_IMPLEMENTATION)
} ;

sint16 goil_lexique::search_into_oilDefinitions (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_oilDefinitions, goil_lexique_table_size_oilDefinitions) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'objList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_objList = 13 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_objList [13] = {
  C_lexique_table_entry ("NM", 2, goil_lexique_1_NM),
  C_lexique_table_entry ("OS", 2, goil_lexique_1_OS),
  C_lexique_table_entry ("COM", 3, goil_lexique_1_COM),
  C_lexique_table_entry ("CPU", 3, goil_lexique_1_CPU),
  C_lexique_table_entry ("ISR", 3, goil_lexique_1_ISR),
  C_lexique_table_entry ("IPDU", 4, goil_lexique_1_IPDU),
  C_lexique_table_entry ("TASK", 4, goil_lexique_1_TASK),
  C_lexique_table_entry ("ALARM", 5, goil_lexique_1_ALARM),
  C_lexique_table_entry ("EVENT", 5, goil_lexique_1_EVENT),
  C_lexique_table_entry ("APPMODE", 7, goil_lexique_1_APPMODE),
  C_lexique_table_entry ("COUNTER", 7, goil_lexique_1_COUNTER),
  C_lexique_table_entry ("MESSAGE", 7, goil_lexique_1_MESSAGE),
  C_lexique_table_entry ("RESOURCE", 8, goil_lexique_1_RESOURCE)
} ;

sint16 goil_lexique::search_into_objList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_objList, goil_lexique_table_size_objList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'dataTypes'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_dataTypes = 8 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_dataTypes [8] = {
  C_lexique_table_entry ("ENUM", 4, goil_lexique_1_ENUM),
  C_lexique_table_entry ("FLOAT", 5, goil_lexique_1_FLOAT),
  C_lexique_table_entry ("INT32", 5, goil_lexique_1_INT32),
  C_lexique_table_entry ("INT64", 5, goil_lexique_1_INT64),
  C_lexique_table_entry ("STRING", 6, goil_lexique_1_STRING),
  C_lexique_table_entry ("UINT32", 6, goil_lexique_1_UINT32),
  C_lexique_table_entry ("UINT64", 6, goil_lexique_1_UINT64),
  C_lexique_table_entry ("BOOLEAN", 7, goil_lexique_1_BOOLEAN)
} ;

sint16 goil_lexique::search_into_dataTypes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_dataTypes, goil_lexique_table_size_dataTypes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'miscSpecifiers'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_miscSpecifiers = 5 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_miscSpecifiers [5] = {
  C_lexique_table_entry ("AUTO", 4, goil_lexique_1_AUTO),
  C_lexique_table_entry ("MASK", 4, goil_lexique_1_MASK),
  C_lexique_table_entry ("CATEGORY", 8, goil_lexique_1_CATEGORY),
  C_lexique_table_entry ("WITH_AUTO", 9, goil_lexique_1_WITH_5FAUTO),
  C_lexique_table_entry ("NO_DEFAULT", 10, goil_lexique_1_NO_5FDEFAULT)
} ;

sint16 goil_lexique::search_into_miscSpecifiers (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_miscSpecifiers, goil_lexique_table_size_miscSpecifiers) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'objectRefType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_objectRefType = 12 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_objectRefType [12] = {
  C_lexique_table_entry ("NM_TYPE", 7, goil_lexique_1_NM_5FTYPE),
  C_lexique_table_entry ("OS_TYPE", 7, goil_lexique_1_OS_5FTYPE),
  C_lexique_table_entry ("COM_TYPE", 8, goil_lexique_1_COM_5FTYPE),
  C_lexique_table_entry ("ISR_TYPE", 8, goil_lexique_1_ISR_5FTYPE),
  C_lexique_table_entry ("IPDU_TYPE", 9, goil_lexique_1_IPDU_5FTYPE),
  C_lexique_table_entry ("TASK_TYPE", 9, goil_lexique_1_TASK_5FTYPE),
  C_lexique_table_entry ("ALARM_TYPE", 10, goil_lexique_1_ALARM_5FTYPE),
  C_lexique_table_entry ("EVENT_TYPE", 10, goil_lexique_1_EVENT_5FTYPE),
  C_lexique_table_entry ("APPMODE_TYPE", 12, goil_lexique_1_APPMODE_5FTYPE),
  C_lexique_table_entry ("COUNTER_TYPE", 12, goil_lexique_1_COUNTER_5FTYPE),
  C_lexique_table_entry ("MESSAGE_TYPE", 12, goil_lexique_1_MESSAGE_5FTYPE),
  C_lexique_table_entry ("RESOURCE_TYPE", 13, goil_lexique_1_RESOURCE_5FTYPE)
} ;

sint16 goil_lexique::search_into_objectRefType (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_objectRefType, goil_lexique_table_size_objectRefType) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'os_attributes'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_os_attributes = 13 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_os_attributes [13] = {
  C_lexique_table_entry ("FILE", 4, goil_lexique_1_FILE),
  C_lexique_table_entry ("TRACE", 5, goil_lexique_1_TRACE),
  C_lexique_table_entry ("STATUS", 6, goil_lexique_1_STATUS),
  C_lexique_table_entry ("EXTENDED", 8, goil_lexique_1_EXTENDED),
  C_lexique_table_entry ("ERRORHOOK", 9, goil_lexique_1_ERRORHOOK),
  C_lexique_table_entry ("PRETASKHOOK", 11, goil_lexique_1_PRETASKHOOK),
  C_lexique_table_entry ("STARTUPHOOK", 11, goil_lexique_1_STARTUPHOOK),
  C_lexique_table_entry ("SYSTEM_CALL", 11, goil_lexique_1_SYSTEM_5FCALL),
  C_lexique_table_entry ("POSTTASKHOOK", 12, goil_lexique_1_POSTTASKHOOK),
  C_lexique_table_entry ("SHUTDOWNHOOK", 12, goil_lexique_1_SHUTDOWNHOOK),
  C_lexique_table_entry ("USEGETSERVICEID", 15, goil_lexique_1_USEGETSERVICEID),
  C_lexique_table_entry ("USERESSCHEDULER", 15, goil_lexique_1_USERESSCHEDULER),
  C_lexique_table_entry ("USEPARAMETERACCESS", 18, goil_lexique_1_USEPARAMETERACCESS)
} ;

sint16 goil_lexique::search_into_os_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_os_attributes, goil_lexique_table_size_os_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'task_attributes'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_task_attributes = 4 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_task_attributes [4] = {
  C_lexique_table_entry ("PRIORITY", 8, goil_lexique_1_PRIORITY),
  C_lexique_table_entry ("SCHEDULE", 8, goil_lexique_1_SCHEDULE),
  C_lexique_table_entry ("AUTOSTART", 9, goil_lexique_1_AUTOSTART),
  C_lexique_table_entry ("ACTIVATION", 10, goil_lexique_1_ACTIVATION)
} ;

sint16 goil_lexique::search_into_task_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_task_attributes, goil_lexique_table_size_task_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'counter_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_counter_attributes = 3 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_counter_attributes [3] = {
  C_lexique_table_entry ("MINCYCLE", 8, goil_lexique_1_MINCYCLE),
  C_lexique_table_entry ("TICKSPERBASE", 12, goil_lexique_1_TICKSPERBASE),
  C_lexique_table_entry ("MAXALLOWEDVALUE", 15, goil_lexique_1_MAXALLOWEDVALUE)
} ;

sint16 goil_lexique::search_into_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_counter_attributes, goil_lexique_table_size_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Key words table 'as_counter_attributes'                   *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_as_counter_attributes = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_as_counter_attributes [2] = {
  C_lexique_table_entry ("TYPE", 4, goil_lexique_1_TYPE),
  C_lexique_table_entry ("UNIT", 4, goil_lexique_1_UNIT)
} ;

sint16 goil_lexique::search_into_as_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_as_counter_attributes, goil_lexique_table_size_as_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'alarm_attributes'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_alarm_attributes = 8 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_alarm_attributes [8] = {
  C_lexique_table_entry ("ACTION", 6, goil_lexique_1_ACTION),
  C_lexique_table_entry ("SETEVENT", 8, goil_lexique_1_SETEVENT),
  C_lexique_table_entry ("ALARMTIME", 9, goil_lexique_1_ALARMTIME),
  C_lexique_table_entry ("CYCLETIME", 9, goil_lexique_1_CYCLETIME),
  C_lexique_table_entry ("ACTIVATETASK", 12, goil_lexique_1_ACTIVATETASK),
  C_lexique_table_entry ("ALARMCALLBACK", 13, goil_lexique_1_ALARMCALLBACK),
  C_lexique_table_entry ("INCREMENTCOUNTER", 16, goil_lexique_1_INCREMENTCOUNTER),
  C_lexique_table_entry ("ALARMCALLBACKNAME", 17, goil_lexique_1_ALARMCALLBACKNAME)
} ;

sint16 goil_lexique::search_into_alarm_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_alarm_attributes, goil_lexique_table_size_alarm_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'resource_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_resource_attributes = 5 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_resource_attributes [5] = {
  C_lexique_table_entry ("LINKED", 6, goil_lexique_1_LINKED),
  C_lexique_table_entry ("INTERNAL", 8, goil_lexique_1_INTERNAL),
  C_lexique_table_entry ("STANDARD", 8, goil_lexique_1_STANDARD),
  C_lexique_table_entry ("LINKEDRESOURCE", 14, goil_lexique_1_LINKEDRESOURCE),
  C_lexique_table_entry ("RESOURCEPROPERTY", 16, goil_lexique_1_RESOURCEPROPERTY)
} ;

sint16 goil_lexique::search_into_resource_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_resource_attributes, goil_lexique_table_size_resource_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'message_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_message_attributes = 57 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_message_attributes [57] = {
  C_lexique_table_entry ("X", 1, goil_lexique_1_X),
  C_lexique_table_entry ("MAX", 3, goil_lexique_1_MAX),
  C_lexique_table_entry ("MIN", 3, goil_lexique_1_MIN),
  C_lexique_table_entry ("FLAG", 4, goil_lexique_1_FLAG),
  C_lexique_table_entry ("LINK", 4, goil_lexique_1_LINK),
  C_lexique_table_entry ("NONE", 4, goil_lexique_1_NONE),
  C_lexique_table_entry ("NEVER", 5, goil_lexique_1_NEVER),
  C_lexique_table_entry ("ALWAYS", 6, goil_lexique_1_ALWAYS),
  C_lexique_table_entry ("FILTER", 6, goil_lexique_1_FILTER),
  C_lexique_table_entry ("OFFSET", 6, goil_lexique_1_OFFSET),
  C_lexique_table_entry ("PERIOD", 6, goil_lexique_1_PERIOD),
  C_lexique_table_entry ("PENDING", 7, goil_lexique_1_PENDING),
  C_lexique_table_entry ("FLAGNAME", 8, goil_lexique_1_FLAGNAME),
  C_lexique_table_entry ("CDATATYPE", 9, goil_lexique_1_CDATATYPE),
  C_lexique_table_entry ("NEWISLESS", 9, goil_lexique_1_NEWISLESS),
  C_lexique_table_entry ("ONEEVERYN", 9, goil_lexique_1_ONEEVERYN),
  C_lexique_table_entry ("QUEUESIZE", 9, goil_lexique_1_QUEUESIZE),
  C_lexique_table_entry ("TRIGGERED", 9, goil_lexique_1_TRIGGERED),
  C_lexique_table_entry ("NEWISEQUAL", 10, goil_lexique_1_NEWISEQUAL),
  C_lexique_table_entry ("COMCALLBACK", 11, goil_lexique_1_COMCALLBACK),
  C_lexique_table_entry ("INMCALLBACK", 11, goil_lexique_1_INMCALLBACK),
  C_lexique_table_entry ("NEWISWITHIN", 11, goil_lexique_1_NEWISWITHIN),
  C_lexique_table_entry ("INITIALVALUE", 12, goil_lexique_1_INITIALVALUE),
  C_lexique_table_entry ("NEWISGREATER", 12, goil_lexique_1_NEWISGREATER),
  C_lexique_table_entry ("NEWISOUTSIDE", 12, goil_lexique_1_NEWISOUTSIDE),
  C_lexique_table_entry ("NOTIFICATION", 12, goil_lexique_1_NOTIFICATION),
  C_lexique_table_entry ("MONITOREDIPDU", 13, goil_lexique_1_MONITOREDIPDU),
  C_lexique_table_entry ("NETWORKMESSAGE", 14, goil_lexique_1_NETWORKMESSAGE),
  C_lexique_table_entry ("NEWISDIFFERENT", 14, goil_lexique_1_NEWISDIFFERENT),
  C_lexique_table_entry ("RECEIVEMESSAGE", 14, goil_lexique_1_RECEIVEMESSAGE),
  C_lexique_table_entry ("SENDINGMESSAGE", 14, goil_lexique_1_SENDINGMESSAGE),
  C_lexique_table_entry ("COMCALLBACKNAME", 15, goil_lexique_1_COMCALLBACKNAME),
  C_lexique_table_entry ("CPUORDERCALLOUT", 15, goil_lexique_1_CPUORDERCALLOUT),
  C_lexique_table_entry ("MESSAGEPROPERTY", 15, goil_lexique_1_MESSAGEPROPERTY),
  C_lexique_table_entry ("MASKEDNEWEQUALSX", 16, goil_lexique_1_MASKEDNEWEQUALSX),
  C_lexique_table_entry ("NEWISLESSOREQUAL", 16, goil_lexique_1_NEWISLESSOREQUAL),
  C_lexique_table_entry ("TRANSFERPROPERTY", 16, goil_lexique_1_TRANSFERPROPERTY),
  C_lexique_table_entry ("MASKEDNEWDIFFERSX", 17, goil_lexique_1_MASKEDNEWDIFFERSX),
  C_lexique_table_entry ("NOTIFICATIONERROR", 17, goil_lexique_1_NOTIFICATIONERROR),
  C_lexique_table_entry ("SEND_ZERO_EXTERNAL", 18, goil_lexique_1_SEND_5FZERO_5FEXTERNAL),
  C_lexique_table_entry ("SEND_ZERO_INTERNAL", 18, goil_lexique_1_SEND_5FZERO_5FINTERNAL),
  C_lexique_table_entry ("CALLBACKROUTINENAME", 19, goil_lexique_1_CALLBACKROUTINENAME),
  C_lexique_table_entry ("NETWORKORDERCALLOUT", 19, goil_lexique_1_NETWORKORDERCALLOUT),
  C_lexique_table_entry ("NEWISGREATEROREQUAL", 19, goil_lexique_1_NEWISGREATEROREQUAL),
  C_lexique_table_entry ("RECEIVE_ZERO_SENDERS", 20, goil_lexique_1_RECEIVE_5FZERO_5FSENDERS),
  C_lexique_table_entry ("SEND_STATIC_EXTERNAL", 20, goil_lexique_1_SEND_5FSTATIC_5FEXTERNAL),
  C_lexique_table_entry ("SEND_STATIC_INTERNAL", 20, goil_lexique_1_SEND_5FSTATIC_5FINTERNAL),
  C_lexique_table_entry ("RECEIVE_ZERO_EXTERNAL", 21, goil_lexique_1_RECEIVE_5FZERO_5FEXTERNAL),
  C_lexique_table_entry ("RECEIVE_ZERO_INTERNAL", 21, goil_lexique_1_RECEIVE_5FZERO_5FINTERNAL),
  C_lexique_table_entry ("SEND_DYNAMIC_EXTERNAL", 21, goil_lexique_1_SEND_5FDYNAMIC_5FEXTERNAL),
  C_lexique_table_entry ("RECEIVE_QUEUED_EXTERNAL", 23, goil_lexique_1_RECEIVE_5FQUEUED_5FEXTERNAL),
  C_lexique_table_entry ("RECEIVE_QUEUED_INTERNAL", 23, goil_lexique_1_RECEIVE_5FQUEUED_5FINTERNAL),
  C_lexique_table_entry ("MASKEDNEWEQUALSMASKEDOLD", 24, goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD),
  C_lexique_table_entry ("RECEIVE_DYNAMIC_EXTERNAL", 24, goil_lexique_1_RECEIVE_5FDYNAMIC_5FEXTERNAL),
  C_lexique_table_entry ("MASKEDNEWDIFFERSMASKEDOLD", 25, goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD),
  C_lexique_table_entry ("RECEIVE_UNQUEUED_EXTERNAL", 25, goil_lexique_1_RECEIVE_5FUNQUEUED_5FEXTERNAL),
  C_lexique_table_entry ("RECEIVE_UNQUEUED_INTERNAL", 25, goil_lexique_1_RECEIVE_5FUNQUEUED_5FINTERNAL)
} ;

sint16 goil_lexique::search_into_message_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_message_attributes, goil_lexique_table_size_message_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Key words table 'networkmessage_attribute'                 *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_networkmessage_attribute = 15 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_networkmessage_attribute [15] = {
  C_lexique_table_entry ("SENT", 4, goil_lexique_1_SENT),
  C_lexique_table_entry ("ZERO", 4, goil_lexique_1_ZERO),
  C_lexique_table_entry ("STATIC", 6, goil_lexique_1_STATIC),
  C_lexique_table_entry ("DYNAMIC", 7, goil_lexique_1_DYNAMIC),
  C_lexique_table_entry ("RECEIVED", 8, goil_lexique_1_RECEIVED),
  C_lexique_table_entry ("BIGENDIAN", 9, goil_lexique_1_BIGENDIAN),
  C_lexique_table_entry ("BYTEARRAY", 9, goil_lexique_1_BYTEARRAY),
  C_lexique_table_entry ("DIRECTION", 9, goil_lexique_1_DIRECTION),
  C_lexique_table_entry ("SIZEINBITS", 10, goil_lexique_1_SIZEINBITS),
  C_lexique_table_entry ("BITORDERING", 11, goil_lexique_1_BITORDERING),
  C_lexique_table_entry ("BITPOSITION", 11, goil_lexique_1_BITPOSITION),
  C_lexique_table_entry ("LITTLEENDIAN", 12, goil_lexique_1_LITTLEENDIAN),
  C_lexique_table_entry ("MAXSIZEINBITS", 13, goil_lexique_1_MAXSIZEINBITS),
  C_lexique_table_entry ("UNSIGNEDINTEGER", 15, goil_lexique_1_UNSIGNEDINTEGER),
  C_lexique_table_entry ("DATAINTERPRETATION", 18, goil_lexique_1_DATAINTERPRETATION)
} ;

sint16 goil_lexique::search_into_networkmessage_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_networkmessage_attribute, goil_lexique_table_size_networkmessage_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'com_attribute'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_com_attribute = 10 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_com_attribute [10] = {
  C_lexique_table_entry ("USE", 3, goil_lexique_1_USE),
  C_lexique_table_entry ("COMSTATUS", 9, goil_lexique_1_COMSTATUS),
  C_lexique_table_entry ("COMAPPMODE", 10, goil_lexique_1_COMAPPMODE),
  C_lexique_table_entry ("COMEXTENDED", 11, goil_lexique_1_COMEXTENDED),
  C_lexique_table_entry ("COMSTANDARD", 11, goil_lexique_1_COMSTANDARD),
  C_lexique_table_entry ("COMTIMEBASE", 11, goil_lexique_1_COMTIMEBASE),
  C_lexique_table_entry ("COMERRORHOOK", 12, goil_lexique_1_COMERRORHOOK),
  C_lexique_table_entry ("COMUSEGETSERVICEID", 18, goil_lexique_1_COMUSEGETSERVICEID),
  C_lexique_table_entry ("COMSTARTCOMEXTENSION", 20, goil_lexique_1_COMSTARTCOMEXTENSION),
  C_lexique_table_entry ("COMUSEPARAMETERACCESS", 21, goil_lexique_1_COMUSEPARAMETERACCESS)
} ;

sint16 goil_lexique::search_into_com_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_com_attribute, goil_lexique_table_size_com_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'ipdu_attribute'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_ipdu_attribute = 12 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_ipdu_attribute [12] = {
  C_lexique_table_entry ("MIXED", 5, goil_lexique_1_MIXED),
  C_lexique_table_entry ("DIRECT", 6, goil_lexique_1_DIRECT),
  C_lexique_table_entry ("TIMEOUT", 7, goil_lexique_1_TIMEOUT),
  C_lexique_table_entry ("PERIODIC", 8, goil_lexique_1_PERIODIC),
  C_lexique_table_entry ("LAYERUSED", 9, goil_lexique_1_LAYERUSED),
  C_lexique_table_entry ("TIMEOFFSET", 10, goil_lexique_1_TIMEOFFSET),
  C_lexique_table_entry ("TIMEPERIOD", 10, goil_lexique_1_TIMEPERIOD),
  C_lexique_table_entry ("IPDUCALLOUT", 11, goil_lexique_1_IPDUCALLOUT),
  C_lexique_table_entry ("FIRTSTIMEOUT", 12, goil_lexique_1_FIRTSTIMEOUT),
  C_lexique_table_entry ("IPDUPROPERTY", 12, goil_lexique_1_IPDUPROPERTY),
  C_lexique_table_entry ("MINIMUMDELAYTIME", 16, goil_lexique_1_MINIMUMDELAYTIME),
  C_lexique_table_entry ("TRANSMISSIONMODE", 16, goil_lexique_1_TRANSMISSIONMODE)
} ;

sint16 goil_lexique::search_into_ipdu_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_ipdu_attribute, goil_lexique_table_size_ipdu_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'scheduling'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_scheduling = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_scheduling [2] = {
  C_lexique_table_entry ("NON", 3, goil_lexique_1_NON),
  C_lexique_table_entry ("FULL", 4, goil_lexique_1_FULL)
} ;

sint16 goil_lexique::search_into_scheduling (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_scheduling, goil_lexique_table_size_scheduling) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'boolean'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_boolean = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_boolean [2] = {
  C_lexique_table_entry ("TRUE", 4, goil_lexique_1_TRUE),
  C_lexique_table_entry ("FALSE", 5, goil_lexique_1_FALSE)
} ;

sint16 goil_lexique::search_into_boolean (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_boolean, goil_lexique_table_size_boolean) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'autosar_attr'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_autosar_attr = 5 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_autosar_attr [5] = {
  C_lexique_table_entry ("PROTECTIONHOOK", 14, goil_lexique_1_PROTECTIONHOOK),
  C_lexique_table_entry ("STACKMONITORING", 15, goil_lexique_1_STACKMONITORING),
  C_lexique_table_entry ("SCALABILITYCLASS", 16, goil_lexique_1_SCALABILITYCLASS),
  C_lexique_table_entry ("TIMING_PROTECTION", 17, goil_lexique_1_TIMING_5FPROTECTION),
  C_lexique_table_entry ("ACCESSING_APPLICATION", 21, goil_lexique_1_ACCESSING_5FAPPLICATION)
} ;

sint16 goil_lexique::search_into_autosar_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_autosar_attr, goil_lexique_table_size_autosar_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'autosar_key'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_autosar_key = 4 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_autosar_key [4] = {
  C_lexique_table_entry ("SC1", 3, goil_lexique_1_SC1),
  C_lexique_table_entry ("SC2", 3, goil_lexique_1_SC2),
  C_lexique_table_entry ("SC3", 3, goil_lexique_1_SC3),
  C_lexique_table_entry ("SC4", 3, goil_lexique_1_SC4)
} ;

sint16 goil_lexique::search_into_autosar_key (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_autosar_key, goil_lexique_table_size_autosar_key) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'autosar_objs'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_autosar_objs = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_autosar_objs [2] = {
  C_lexique_table_entry ("APPLICATION", 11, goil_lexique_1_APPLICATION),
  C_lexique_table_entry ("SCHEDULETABLE", 13, goil_lexique_1_SCHEDULETABLE)
} ;

sint16 goil_lexique::search_into_autosar_objs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_autosar_objs, goil_lexique_table_size_autosar_objs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'schedtable_attrs'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_schedtable_attrs = 8 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_schedtable_attrs [8] = {
  C_lexique_table_entry ("LENGTH", 6, goil_lexique_1_LENGTH),
  C_lexique_table_entry ("PRECISION", 9, goil_lexique_1_PRECISION),
  C_lexique_table_entry ("MAX_DECREASE", 12, goil_lexique_1_MAX_5FDECREASE),
  C_lexique_table_entry ("MAX_INCREASE", 12, goil_lexique_1_MAX_5FINCREASE),
  C_lexique_table_entry ("SYNC_STRATEGY", 13, goil_lexique_1_SYNC_5FSTRATEGY),
  C_lexique_table_entry ("MAX_DECREASE_ASYNC", 18, goil_lexique_1_MAX_5FDECREASE_5FASYNC),
  C_lexique_table_entry ("MAX_INCREASE_ASYNC", 18, goil_lexique_1_MAX_5FINCREASE_5FASYNC),
  C_lexique_table_entry ("LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION", 36, goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION)
} ;

sint16 goil_lexique::search_into_schedtable_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_schedtable_attrs, goil_lexique_table_size_schedtable_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'application_attrs'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_application_attrs = 4 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_application_attrs [4] = {
  C_lexique_table_entry ("TRUSTED", 7, goil_lexique_1_TRUSTED),
  C_lexique_table_entry ("RESTARTTASK", 11, goil_lexique_1_RESTARTTASK),
  C_lexique_table_entry ("HAS_RESTARTTASK", 15, goil_lexique_1_HAS_5FRESTARTTASK),
  C_lexique_table_entry ("TRUSTED_FUNCTION", 16, goil_lexique_1_TRUSTED_5FFUNCTION)
} ;

sint16 goil_lexique::search_into_application_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_application_attrs, goil_lexique_table_size_application_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'timing_prot_attribs'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_timing_prot_attribs = 9 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_timing_prot_attribs [9] = {
  C_lexique_table_entry ("TIMEFRAME", 9, goil_lexique_1_TIMEFRAME),
  C_lexique_table_entry ("COUNTLIMIT", 10, goil_lexique_1_COUNTLIMIT),
  C_lexique_table_entry ("LOCKINGTIME", 11, goil_lexique_1_LOCKINGTIME),
  C_lexique_table_entry ("RESOURCELOCK", 12, goil_lexique_1_RESOURCELOCK),
  C_lexique_table_entry ("EXECUTIONTIME", 13, goil_lexique_1_EXECUTIONTIME),
  C_lexique_table_entry ("EXECUTIONBUDGET", 15, goil_lexique_1_EXECUTIONBUDGET),
  C_lexique_table_entry ("MAXRESOURCELOCKTIME", 19, goil_lexique_1_MAXRESOURCELOCKTIME),
  C_lexique_table_entry ("MAXOSINTERRUPTLOCKTIME", 22, goil_lexique_1_MAXOSINTERRUPTLOCKTIME),
  C_lexique_table_entry ("MAXALLINTERRUPTLOCKTIME", 23, goil_lexique_1_MAXALLINTERRUPTLOCKTIME)
} ;

sint16 goil_lexique::search_into_timing_prot_attribs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_timing_prot_attribs, goil_lexique_table_size_timing_prot_attribs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'sync_strategy'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_sync_strategy = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_sync_strategy [2] = {
  C_lexique_table_entry ("HARD", 4, goil_lexique_1_HARD),
  C_lexique_table_entry ("SMOOTH", 6, goil_lexique_1_SMOOTH)
} ;

sint16 goil_lexique::search_into_sync_strategy (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_sync_strategy, goil_lexique_table_size_sync_strategy) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Key words table 'unit'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_unit = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_unit [2] = {
  C_lexique_table_entry ("TICKS", 5, goil_lexique_1_TICKS),
  C_lexique_table_entry ("NANOSECONDS", 11, goil_lexique_1_NANOSECONDS)
} ;

sint16 goil_lexique::search_into_unit (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_unit, goil_lexique_table_size_unit) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'cpt_type_attr'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_cpt_type_attr = 11 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_cpt_type_attr [11] = {
  C_lexique_table_entry ("NS", 2, goil_lexique_1_NS),
  C_lexique_table_entry ("GPT", 3, goil_lexique_1_GPT),
  C_lexique_table_entry ("DRIVER", 6, goil_lexique_1_DRIVER),
  C_lexique_table_entry ("HARDWARE", 8, goil_lexique_1_HARDWARE),
  C_lexique_table_entry ("SOFTWARE", 8, goil_lexique_1_SOFTWARE),
  C_lexique_table_entry ("CONSTNAME", 9, goil_lexique_1_CONSTNAME),
  C_lexique_table_entry ("OSINTERNAL", 10, goil_lexique_1_OSINTERNAL),
  C_lexique_table_entry ("TIMECONSTANT", 12, goil_lexique_1_TIMECONSTANT),
  C_lexique_table_entry ("TIMECONSTANTS", 13, goil_lexique_1_TIMECONSTANTS),
  C_lexique_table_entry ("GPTCHANNELNAME", 14, goil_lexique_1_GPTCHANNELNAME),
  C_lexique_table_entry ("NS_PER_HW_TICK", 14, goil_lexique_1_NS_5FPER_5FHW_5FTICK)
} ;

sint16 goil_lexique::search_into_cpt_type_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_cpt_type_attr, goil_lexique_table_size_cpt_type_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'OILDelimiters'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_OILDelimiters = 11 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_OILDelimiters [11] = {
  C_lexique_table_entry (",", 1, goil_lexique_1__2C),
  C_lexique_table_entry ("-", 1, goil_lexique_1__2D),
  C_lexique_table_entry (".", 1, goil_lexique_1__2E),
  C_lexique_table_entry (":", 1, goil_lexique_1__3A),
  C_lexique_table_entry (";", 1, goil_lexique_1__3B),
  C_lexique_table_entry ("=", 1, goil_lexique_1__3D),
  C_lexique_table_entry ("[", 1, goil_lexique_1__5B),
  C_lexique_table_entry ("]", 1, goil_lexique_1__5D),
  C_lexique_table_entry ("{", 1, goil_lexique_1__7B),
  C_lexique_table_entry ("}", 1, goil_lexique_1__7D),
  C_lexique_table_entry ("..", 2, goil_lexique_1__2E_2E)
} ;

sint16 goil_lexique::search_into_OILDelimiters (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_OILDelimiters, goil_lexique_table_size_OILDelimiters) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'commands'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_commands = 1 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_commands [1] = {
  C_lexique_table_entry ("include", 7, goil_lexique_1_include)
} ;

sint16 goil_lexique::search_into_commands (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_commands, goil_lexique_table_size_commands) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String goil_lexique::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->_mTokenCode) {
    case  goil_lexique_1_:
      s << "$$" ;
      break ;
    case  goil_lexique_1_APP_5FSRC:
      s << '$'
        << "APP_SRC"
        << '$' ;
      break;
    case  goil_lexique_1_CFLAGS:
      s << '$'
        << "CFLAGS"
        << '$' ;
      break;
    case  goil_lexique_1_ASFLAGS:
      s << '$'
        << "ASFLAGS"
        << '$' ;
      break;
    case  goil_lexique_1_LDFLAGS:
      s << '$'
        << "LDFLAGS"
        << '$' ;
      break;
    case  goil_lexique_1_APP_5FNAME:
      s << '$'
        << "APP_NAME"
        << '$' ;
      break;
    case  goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH:
      s << '$'
        << "TRAMPOLINE_BASE_PATH"
        << '$' ;
      break;
    case  goil_lexique_1_OIL_5FVERSION:
      s << '$'
        << "OIL_VERSION"
        << '$' ;
      break;
    case  goil_lexique_1_IMPLEMENTATION:
      s << '$'
        << "IMPLEMENTATION"
        << '$' ;
      break;
    case  goil_lexique_1_OS:
      s << '$'
        << "OS"
        << '$' ;
      break;
    case  goil_lexique_1_TASK:
      s << '$'
        << "TASK"
        << '$' ;
      break;
    case  goil_lexique_1_COUNTER:
      s << '$'
        << "COUNTER"
        << '$' ;
      break;
    case  goil_lexique_1_ALARM:
      s << '$'
        << "ALARM"
        << '$' ;
      break;
    case  goil_lexique_1_RESOURCE:
      s << '$'
        << "RESOURCE"
        << '$' ;
      break;
    case  goil_lexique_1_EVENT:
      s << '$'
        << "EVENT"
        << '$' ;
      break;
    case  goil_lexique_1_ISR:
      s << '$'
        << "ISR"
        << '$' ;
      break;
    case  goil_lexique_1_MESSAGE:
      s << '$'
        << "MESSAGE"
        << '$' ;
      break;
    case  goil_lexique_1_COM:
      s << '$'
        << "COM"
        << '$' ;
      break;
    case  goil_lexique_1_NM:
      s << '$'
        << "NM"
        << '$' ;
      break;
    case  goil_lexique_1_APPMODE:
      s << '$'
        << "APPMODE"
        << '$' ;
      break;
    case  goil_lexique_1_IPDU:
      s << '$'
        << "IPDU"
        << '$' ;
      break;
    case  goil_lexique_1_CPU:
      s << '$'
        << "CPU"
        << '$' ;
      break;
    case  goil_lexique_1_UINT32:
      s << '$'
        << "UINT32"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_INT32:
      s << '$'
        << "INT32"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_UINT64:
      s << '$'
        << "UINT64"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_INT64:
      s << '$'
        << "INT64"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_FLOAT:
      s << '$'
        << "FLOAT"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_ENUM:
      s << '$'
        << "ENUM"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_STRING:
      s << '$'
        << "STRING"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_BOOLEAN:
      s << '$'
        << "BOOLEAN"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_WITH_5FAUTO:
      s << '$'
        << "WITH_AUTO"
        << '$' ;
      break;
    case  goil_lexique_1_NO_5FDEFAULT:
      s << '$'
        << "NO_DEFAULT"
        << '$' ;
      break;
    case  goil_lexique_1_AUTO:
      s << '$'
        << "AUTO"
        << '$' ;
      break;
    case  goil_lexique_1_MASK:
      s << '$'
        << "MASK"
        << '$' ;
      break;
    case  goil_lexique_1_CATEGORY:
      s << '$'
        << "CATEGORY"
        << '$' ;
      break;
    case  goil_lexique_1_OS_5FTYPE:
      s << '$'
        << "OS_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_TASK_5FTYPE:
      s << '$'
        << "TASK_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_COUNTER_5FTYPE:
      s << '$'
        << "COUNTER_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_ALARM_5FTYPE:
      s << '$'
        << "ALARM_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_RESOURCE_5FTYPE:
      s << '$'
        << "RESOURCE_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_EVENT_5FTYPE:
      s << '$'
        << "EVENT_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_ISR_5FTYPE:
      s << '$'
        << "ISR_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_MESSAGE_5FTYPE:
      s << '$'
        << "MESSAGE_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_COM_5FTYPE:
      s << '$'
        << "COM_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_NM_5FTYPE:
      s << '$'
        << "NM_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_APPMODE_5FTYPE:
      s << '$'
        << "APPMODE_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_IPDU_5FTYPE:
      s << '$'
        << "IPDU_TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_STATUS:
      s << '$'
        << "STATUS"
        << '$' ;
      break;
    case  goil_lexique_1_EXTENDED:
      s << '$'
        << "EXTENDED"
        << '$' ;
      break;
    case  goil_lexique_1_STARTUPHOOK:
      s << '$'
        << "STARTUPHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_ERRORHOOK:
      s << '$'
        << "ERRORHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_SHUTDOWNHOOK:
      s << '$'
        << "SHUTDOWNHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_PRETASKHOOK:
      s << '$'
        << "PRETASKHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_POSTTASKHOOK:
      s << '$'
        << "POSTTASKHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_USEGETSERVICEID:
      s << '$'
        << "USEGETSERVICEID"
        << '$' ;
      break;
    case  goil_lexique_1_USEPARAMETERACCESS:
      s << '$'
        << "USEPARAMETERACCESS"
        << '$' ;
      break;
    case  goil_lexique_1_USERESSCHEDULER:
      s << '$'
        << "USERESSCHEDULER"
        << '$' ;
      break;
    case  goil_lexique_1_SYSTEM_5FCALL:
      s << '$'
        << "SYSTEM_CALL"
        << '$' ;
      break;
    case  goil_lexique_1_TRACE:
      s << '$'
        << "TRACE"
        << '$' ;
      break;
    case  goil_lexique_1_FILE:
      s << '$'
        << "FILE"
        << '$' ;
      break;
    case  goil_lexique_1_PRIORITY:
      s << '$'
        << "PRIORITY"
        << '$' ;
      break;
    case  goil_lexique_1_SCHEDULE:
      s << '$'
        << "SCHEDULE"
        << '$' ;
      break;
    case  goil_lexique_1_ACTIVATION:
      s << '$'
        << "ACTIVATION"
        << '$' ;
      break;
    case  goil_lexique_1_AUTOSTART:
      s << '$'
        << "AUTOSTART"
        << '$' ;
      break;
    case  goil_lexique_1_MAXALLOWEDVALUE:
      s << '$'
        << "MAXALLOWEDVALUE"
        << '$' ;
      break;
    case  goil_lexique_1_TICKSPERBASE:
      s << '$'
        << "TICKSPERBASE"
        << '$' ;
      break;
    case  goil_lexique_1_MINCYCLE:
      s << '$'
        << "MINCYCLE"
        << '$' ;
      break;
    case  goil_lexique_1_TYPE:
      s << '$'
        << "TYPE"
        << '$' ;
      break;
    case  goil_lexique_1_UNIT:
      s << '$'
        << "UNIT"
        << '$' ;
      break;
    case  goil_lexique_1_ACTION:
      s << '$'
        << "ACTION"
        << '$' ;
      break;
    case  goil_lexique_1_SETEVENT:
      s << '$'
        << "SETEVENT"
        << '$' ;
      break;
    case  goil_lexique_1_ACTIVATETASK:
      s << '$'
        << "ACTIVATETASK"
        << '$' ;
      break;
    case  goil_lexique_1_ALARMCALLBACK:
      s << '$'
        << "ALARMCALLBACK"
        << '$' ;
      break;
    case  goil_lexique_1_ALARMCALLBACKNAME:
      s << '$'
        << "ALARMCALLBACKNAME"
        << '$' ;
      break;
    case  goil_lexique_1_ALARMTIME:
      s << '$'
        << "ALARMTIME"
        << '$' ;
      break;
    case  goil_lexique_1_CYCLETIME:
      s << '$'
        << "CYCLETIME"
        << '$' ;
      break;
    case  goil_lexique_1_INCREMENTCOUNTER:
      s << '$'
        << "INCREMENTCOUNTER"
        << '$' ;
      break;
    case  goil_lexique_1_RESOURCEPROPERTY:
      s << '$'
        << "RESOURCEPROPERTY"
        << '$' ;
      break;
    case  goil_lexique_1_STANDARD:
      s << '$'
        << "STANDARD"
        << '$' ;
      break;
    case  goil_lexique_1_LINKED:
      s << '$'
        << "LINKED"
        << '$' ;
      break;
    case  goil_lexique_1_LINKEDRESOURCE:
      s << '$'
        << "LINKEDRESOURCE"
        << '$' ;
      break;
    case  goil_lexique_1_INTERNAL:
      s << '$'
        << "INTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_MESSAGEPROPERTY:
      s << '$'
        << "MESSAGEPROPERTY"
        << '$' ;
      break;
    case  goil_lexique_1_NOTIFICATION:
      s << '$'
        << "NOTIFICATION"
        << '$' ;
      break;
    case  goil_lexique_1_NOTIFICATIONERROR:
      s << '$'
        << "NOTIFICATIONERROR"
        << '$' ;
      break;
    case  goil_lexique_1_SEND_5FSTATIC_5FINTERNAL:
      s << '$'
        << "SEND_STATIC_INTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_SEND_5FSTATIC_5FEXTERNAL:
      s << '$'
        << "SEND_STATIC_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_SEND_5FDYNAMIC_5FEXTERNAL:
      s << '$'
        << "SEND_DYNAMIC_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_SEND_5FZERO_5FINTERNAL:
      s << '$'
        << "SEND_ZERO_INTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_SEND_5FZERO_5FEXTERNAL:
      s << '$'
        << "SEND_ZERO_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FZERO_5FINTERNAL:
      s << '$'
        << "RECEIVE_ZERO_INTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FZERO_5FEXTERNAL:
      s << '$'
        << "RECEIVE_ZERO_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FUNQUEUED_5FINTERNAL:
      s << '$'
        << "RECEIVE_UNQUEUED_INTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FQUEUED_5FINTERNAL:
      s << '$'
        << "RECEIVE_QUEUED_INTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FUNQUEUED_5FEXTERNAL:
      s << '$'
        << "RECEIVE_UNQUEUED_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FQUEUED_5FEXTERNAL:
      s << '$'
        << "RECEIVE_QUEUED_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FDYNAMIC_5FEXTERNAL:
      s << '$'
        << "RECEIVE_DYNAMIC_EXTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVE_5FZERO_5FSENDERS:
      s << '$'
        << "RECEIVE_ZERO_SENDERS"
        << '$' ;
      break;
    case  goil_lexique_1_CDATATYPE:
      s << '$'
        << "CDATATYPE"
        << '$' ;
      break;
    case  goil_lexique_1_SENDINGMESSAGE:
      s << '$'
        << "SENDINGMESSAGE"
        << '$' ;
      break;
    case  goil_lexique_1_NONE:
      s << '$'
        << "NONE"
        << '$' ;
      break;
    case  goil_lexique_1_COMCALLBACK:
      s << '$'
        << "COMCALLBACK"
        << '$' ;
      break;
    case  goil_lexique_1_COMCALLBACKNAME:
      s << '$'
        << "COMCALLBACKNAME"
        << '$' ;
      break;
    case  goil_lexique_1_INMCALLBACK:
      s << '$'
        << "INMCALLBACK"
        << '$' ;
      break;
    case  goil_lexique_1_CALLBACKROUTINENAME:
      s << '$'
        << "CALLBACKROUTINENAME"
        << '$' ;
      break;
    case  goil_lexique_1_MONITOREDIPDU:
      s << '$'
        << "MONITOREDIPDU"
        << '$' ;
      break;
    case  goil_lexique_1_TRANSFERPROPERTY:
      s << '$'
        << "TRANSFERPROPERTY"
        << '$' ;
      break;
    case  goil_lexique_1_TRIGGERED:
      s << '$'
        << "TRIGGERED"
        << '$' ;
      break;
    case  goil_lexique_1_PENDING:
      s << '$'
        << "PENDING"
        << '$' ;
      break;
    case  goil_lexique_1_NETWORKMESSAGE:
      s << '$'
        << "NETWORKMESSAGE"
        << '$' ;
      break;
    case  goil_lexique_1_FILTER:
      s << '$'
        << "FILTER"
        << '$' ;
      break;
    case  goil_lexique_1_ALWAYS:
      s << '$'
        << "ALWAYS"
        << '$' ;
      break;
    case  goil_lexique_1_NEVER:
      s << '$'
        << "NEVER"
        << '$' ;
      break;
    case  goil_lexique_1_MASKEDNEWEQUALSX:
      s << '$'
        << "MASKEDNEWEQUALSX"
        << '$' ;
      break;
    case  goil_lexique_1_MASKEDNEWDIFFERSX:
      s << '$'
        << "MASKEDNEWDIFFERSX"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISEQUAL:
      s << '$'
        << "NEWISEQUAL"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISDIFFERENT:
      s << '$'
        << "NEWISDIFFERENT"
        << '$' ;
      break;
    case  goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD:
      s << '$'
        << "MASKEDNEWEQUALSMASKEDOLD"
        << '$' ;
      break;
    case  goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD:
      s << '$'
        << "MASKEDNEWDIFFERSMASKEDOLD"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISWITHIN:
      s << '$'
        << "NEWISWITHIN"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISOUTSIDE:
      s << '$'
        << "NEWISOUTSIDE"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISGREATER:
      s << '$'
        << "NEWISGREATER"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISLESSOREQUAL:
      s << '$'
        << "NEWISLESSOREQUAL"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISLESS:
      s << '$'
        << "NEWISLESS"
        << '$' ;
      break;
    case  goil_lexique_1_NEWISGREATEROREQUAL:
      s << '$'
        << "NEWISGREATEROREQUAL"
        << '$' ;
      break;
    case  goil_lexique_1_ONEEVERYN:
      s << '$'
        << "ONEEVERYN"
        << '$' ;
      break;
    case  goil_lexique_1_MIN:
      s << '$'
        << "MIN"
        << '$' ;
      break;
    case  goil_lexique_1_MAX:
      s << '$'
        << "MAX"
        << '$' ;
      break;
    case  goil_lexique_1_X:
      s << '$'
        << "X"
        << '$' ;
      break;
    case  goil_lexique_1_PERIOD:
      s << '$'
        << "PERIOD"
        << '$' ;
      break;
    case  goil_lexique_1_OFFSET:
      s << '$'
        << "OFFSET"
        << '$' ;
      break;
    case  goil_lexique_1_NETWORKORDERCALLOUT:
      s << '$'
        << "NETWORKORDERCALLOUT"
        << '$' ;
      break;
    case  goil_lexique_1_CPUORDERCALLOUT:
      s << '$'
        << "CPUORDERCALLOUT"
        << '$' ;
      break;
    case  goil_lexique_1_INITIALVALUE:
      s << '$'
        << "INITIALVALUE"
        << '$' ;
      break;
    case  goil_lexique_1_QUEUESIZE:
      s << '$'
        << "QUEUESIZE"
        << '$' ;
      break;
    case  goil_lexique_1_LINK:
      s << '$'
        << "LINK"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVEMESSAGE:
      s << '$'
        << "RECEIVEMESSAGE"
        << '$' ;
      break;
    case  goil_lexique_1_FLAG:
      s << '$'
        << "FLAG"
        << '$' ;
      break;
    case  goil_lexique_1_FLAGNAME:
      s << '$'
        << "FLAGNAME"
        << '$' ;
      break;
    case  goil_lexique_1_STATIC:
      s << '$'
        << "STATIC"
        << '$' ;
      break;
    case  goil_lexique_1_DYNAMIC:
      s << '$'
        << "DYNAMIC"
        << '$' ;
      break;
    case  goil_lexique_1_ZERO:
      s << '$'
        << "ZERO"
        << '$' ;
      break;
    case  goil_lexique_1_SIZEINBITS:
      s << '$'
        << "SIZEINBITS"
        << '$' ;
      break;
    case  goil_lexique_1_MAXSIZEINBITS:
      s << '$'
        << "MAXSIZEINBITS"
        << '$' ;
      break;
    case  goil_lexique_1_BITORDERING:
      s << '$'
        << "BITORDERING"
        << '$' ;
      break;
    case  goil_lexique_1_BIGENDIAN:
      s << '$'
        << "BIGENDIAN"
        << '$' ;
      break;
    case  goil_lexique_1_LITTLEENDIAN:
      s << '$'
        << "LITTLEENDIAN"
        << '$' ;
      break;
    case  goil_lexique_1_BITPOSITION:
      s << '$'
        << "BITPOSITION"
        << '$' ;
      break;
    case  goil_lexique_1_DATAINTERPRETATION:
      s << '$'
        << "DATAINTERPRETATION"
        << '$' ;
      break;
    case  goil_lexique_1_UNSIGNEDINTEGER:
      s << '$'
        << "UNSIGNEDINTEGER"
        << '$' ;
      break;
    case  goil_lexique_1_BYTEARRAY:
      s << '$'
        << "BYTEARRAY"
        << '$' ;
      break;
    case  goil_lexique_1_DIRECTION:
      s << '$'
        << "DIRECTION"
        << '$' ;
      break;
    case  goil_lexique_1_SENT:
      s << '$'
        << "SENT"
        << '$' ;
      break;
    case  goil_lexique_1_RECEIVED:
      s << '$'
        << "RECEIVED"
        << '$' ;
      break;
    case  goil_lexique_1_COMTIMEBASE:
      s << '$'
        << "COMTIMEBASE"
        << '$' ;
      break;
    case  goil_lexique_1_COMERRORHOOK:
      s << '$'
        << "COMERRORHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_COMUSEGETSERVICEID:
      s << '$'
        << "COMUSEGETSERVICEID"
        << '$' ;
      break;
    case  goil_lexique_1_COMUSEPARAMETERACCESS:
      s << '$'
        << "COMUSEPARAMETERACCESS"
        << '$' ;
      break;
    case  goil_lexique_1_COMSTARTCOMEXTENSION:
      s << '$'
        << "COMSTARTCOMEXTENSION"
        << '$' ;
      break;
    case  goil_lexique_1_COMAPPMODE:
      s << '$'
        << "COMAPPMODE"
        << '$' ;
      break;
    case  goil_lexique_1_COMSTATUS:
      s << '$'
        << "COMSTATUS"
        << '$' ;
      break;
    case  goil_lexique_1_USE:
      s << '$'
        << "USE"
        << '$' ;
      break;
    case  goil_lexique_1_COMEXTENDED:
      s << '$'
        << "COMEXTENDED"
        << '$' ;
      break;
    case  goil_lexique_1_COMSTANDARD:
      s << '$'
        << "COMSTANDARD"
        << '$' ;
      break;
    case  goil_lexique_1_IPDUPROPERTY:
      s << '$'
        << "IPDUPROPERTY"
        << '$' ;
      break;
    case  goil_lexique_1_IPDUCALLOUT:
      s << '$'
        << "IPDUCALLOUT"
        << '$' ;
      break;
    case  goil_lexique_1_LAYERUSED:
      s << '$'
        << "LAYERUSED"
        << '$' ;
      break;
    case  goil_lexique_1_TRANSMISSIONMODE:
      s << '$'
        << "TRANSMISSIONMODE"
        << '$' ;
      break;
    case  goil_lexique_1_DIRECT:
      s << '$'
        << "DIRECT"
        << '$' ;
      break;
    case  goil_lexique_1_PERIODIC:
      s << '$'
        << "PERIODIC"
        << '$' ;
      break;
    case  goil_lexique_1_MIXED:
      s << '$'
        << "MIXED"
        << '$' ;
      break;
    case  goil_lexique_1_TIMEOUT:
      s << '$'
        << "TIMEOUT"
        << '$' ;
      break;
    case  goil_lexique_1_FIRTSTIMEOUT:
      s << '$'
        << "FIRTSTIMEOUT"
        << '$' ;
      break;
    case  goil_lexique_1_MINIMUMDELAYTIME:
      s << '$'
        << "MINIMUMDELAYTIME"
        << '$' ;
      break;
    case  goil_lexique_1_TIMEPERIOD:
      s << '$'
        << "TIMEPERIOD"
        << '$' ;
      break;
    case  goil_lexique_1_TIMEOFFSET:
      s << '$'
        << "TIMEOFFSET"
        << '$' ;
      break;
    case  goil_lexique_1_NON:
      s << '$'
        << "NON"
        << '$' ;
      break;
    case  goil_lexique_1_FULL:
      s << '$'
        << "FULL"
        << '$' ;
      break;
    case  goil_lexique_1_FALSE:
      s << '$'
        << "FALSE"
        << '$' ;
      break;
    case  goil_lexique_1_TRUE:
      s << '$'
        << "TRUE"
        << '$' ;
      break;
    case  goil_lexique_1_PROTECTIONHOOK:
      s << '$'
        << "PROTECTIONHOOK"
        << '$' ;
      break;
    case  goil_lexique_1_SCALABILITYCLASS:
      s << '$'
        << "SCALABILITYCLASS"
        << '$' ;
      break;
    case  goil_lexique_1_STACKMONITORING:
      s << '$'
        << "STACKMONITORING"
        << '$' ;
      break;
    case  goil_lexique_1_TIMING_5FPROTECTION:
      s << '$'
        << "TIMING_PROTECTION"
        << '$' ;
      break;
    case  goil_lexique_1_ACCESSING_5FAPPLICATION:
      s << '$'
        << "ACCESSING_APPLICATION"
        << '$' ;
      break;
    case  goil_lexique_1_SC1:
      s << '$'
        << "SC1"
        << '$' ;
      break;
    case  goil_lexique_1_SC2:
      s << '$'
        << "SC2"
        << '$' ;
      break;
    case  goil_lexique_1_SC3:
      s << '$'
        << "SC3"
        << '$' ;
      break;
    case  goil_lexique_1_SC4:
      s << '$'
        << "SC4"
        << '$' ;
      break;
    case  goil_lexique_1_SCHEDULETABLE:
      s << '$'
        << "SCHEDULETABLE"
        << '$' ;
      break;
    case  goil_lexique_1_APPLICATION:
      s << '$'
        << "APPLICATION"
        << '$' ;
      break;
    case  goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION:
      s << '$'
        << "LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION"
        << '$' ;
      break;
    case  goil_lexique_1_SYNC_5FSTRATEGY:
      s << '$'
        << "SYNC_STRATEGY"
        << '$' ;
      break;
    case  goil_lexique_1_MAX_5FINCREASE:
      s << '$'
        << "MAX_INCREASE"
        << '$' ;
      break;
    case  goil_lexique_1_MAX_5FDECREASE:
      s << '$'
        << "MAX_DECREASE"
        << '$' ;
      break;
    case  goil_lexique_1_MAX_5FINCREASE_5FASYNC:
      s << '$'
        << "MAX_INCREASE_ASYNC"
        << '$' ;
      break;
    case  goil_lexique_1_MAX_5FDECREASE_5FASYNC:
      s << '$'
        << "MAX_DECREASE_ASYNC"
        << '$' ;
      break;
    case  goil_lexique_1_PRECISION:
      s << '$'
        << "PRECISION"
        << '$' ;
      break;
    case  goil_lexique_1_LENGTH:
      s << '$'
        << "LENGTH"
        << '$' ;
      break;
    case  goil_lexique_1_TRUSTED:
      s << '$'
        << "TRUSTED"
        << '$' ;
      break;
    case  goil_lexique_1_HAS_5FRESTARTTASK:
      s << '$'
        << "HAS_RESTARTTASK"
        << '$' ;
      break;
    case  goil_lexique_1_RESTARTTASK:
      s << '$'
        << "RESTARTTASK"
        << '$' ;
      break;
    case  goil_lexique_1_TRUSTED_5FFUNCTION:
      s << '$'
        << "TRUSTED_FUNCTION"
        << '$' ;
      break;
    case  goil_lexique_1_EXECUTIONBUDGET:
      s << '$'
        << "EXECUTIONBUDGET"
        << '$' ;
      break;
    case  goil_lexique_1_EXECUTIONTIME:
      s << '$'
        << "EXECUTIONTIME"
        << '$' ;
      break;
    case  goil_lexique_1_COUNTLIMIT:
      s << '$'
        << "COUNTLIMIT"
        << '$' ;
      break;
    case  goil_lexique_1_TIMEFRAME:
      s << '$'
        << "TIMEFRAME"
        << '$' ;
      break;
    case  goil_lexique_1_MAXOSINTERRUPTLOCKTIME:
      s << '$'
        << "MAXOSINTERRUPTLOCKTIME"
        << '$' ;
      break;
    case  goil_lexique_1_MAXALLINTERRUPTLOCKTIME:
      s << '$'
        << "MAXALLINTERRUPTLOCKTIME"
        << '$' ;
      break;
    case  goil_lexique_1_LOCKINGTIME:
      s << '$'
        << "LOCKINGTIME"
        << '$' ;
      break;
    case  goil_lexique_1_RESOURCELOCK:
      s << '$'
        << "RESOURCELOCK"
        << '$' ;
      break;
    case  goil_lexique_1_MAXRESOURCELOCKTIME:
      s << '$'
        << "MAXRESOURCELOCKTIME"
        << '$' ;
      break;
    case  goil_lexique_1_SMOOTH:
      s << '$'
        << "SMOOTH"
        << '$' ;
      break;
    case  goil_lexique_1_HARD:
      s << '$'
        << "HARD"
        << '$' ;
      break;
    case  goil_lexique_1_TICKS:
      s << '$'
        << "TICKS"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_NANOSECONDS:
      s << '$'
        << "NANOSECONDS"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_SOFTWARE:
      s << '$'
        << "SOFTWARE"
        << '$' ;
      break;
    case  goil_lexique_1_HARDWARE:
      s << '$'
        << "HARDWARE"
        << '$' ;
      break;
    case  goil_lexique_1_OSINTERNAL:
      s << '$'
        << "OSINTERNAL"
        << '$' ;
      break;
    case  goil_lexique_1_GPT:
      s << '$'
        << "GPT"
        << '$' ;
      break;
    case  goil_lexique_1_NS_5FPER_5FHW_5FTICK:
      s << '$'
        << "NS_PER_HW_TICK"
        << '$' ;
      break;
    case  goil_lexique_1_GPTCHANNELNAME:
      s << '$'
        << "GPTCHANNELNAME"
        << '$' ;
      break;
    case  goil_lexique_1_DRIVER:
      s << '$'
        << "DRIVER"
        << '$' ;
      break;
    case  goil_lexique_1_TIMECONSTANTS:
      s << '$'
        << "TIMECONSTANTS"
        << '$' ;
      break;
    case  goil_lexique_1_TIMECONSTANT:
      s << '$'
        << "TIMECONSTANT"
        << '$' ;
      break;
    case  goil_lexique_1_NS:
      s << '$'
        << "NS"
        << '$' ;
      break;
    case  goil_lexique_1_CONSTNAME:
      s << '$'
        << "CONSTNAME"
        << '$' ;
      break;
    case  goil_lexique_1_comment:
      s << '$'
        << "comment"
        << '$' ;
      break;
    case  goil_lexique_1_idf:
      s << '$'
        << "idf"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1__3B:
      s << '$'
        << ";"
        << '$' ;
      break;
    case  goil_lexique_1__3A:
      s << '$'
        << ":"
        << '$' ;
      break;
    case  goil_lexique_1__3D:
      s << '$'
        << "="
        << '$' ;
      break;
    case  goil_lexique_1__7B:
      s << '$'
        << "{"
        << '$' ;
      break;
    case  goil_lexique_1__7D:
      s << '$'
        << "}"
        << '$' ;
      break;
    case  goil_lexique_1__2E_2E:
      s << '$'
        << ".."
        << '$' ;
      break;
    case  goil_lexique_1__5B:
      s << '$'
        << "["
        << '$' ;
      break;
    case  goil_lexique_1__5D:
      s << '$'
        << "]"
        << '$' ;
      break;
    case  goil_lexique_1__2C:
      s << '$'
        << ","
        << '$' ;
      break;
    case  goil_lexique_1__2E:
      s << '$'
        << "."
        << '$' ;
      break;
    case  goil_lexique_1__2D:
      s << '$'
        << "-"
        << '$' ;
      break;
    case  goil_lexique_1_string:
      s << '$'
        << "string"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->a_string) ;
      break;
    case  goil_lexique_1_g_5Fstring:
      s << '$'
        << "g_string"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->a_string) ;
      break;
    case  goil_lexique_1_uint_5Fnumber:
      s << '$'
        << "uint_number"
        << '$' ;
    s << ' ' << _p->integerNumber ;
      break;
    case  goil_lexique_1_float_5Fnumber:
      s << '$'
        << "float_number"
        << '$' ;
    s << ' ' << _p->floatNumber ;
      break;
    case  goil_lexique_1_set_5Fstart_5Fuint_5Fnumber:
      s << '$'
        << "set_start_uint_number"
        << '$' ;
    s << ' ' << _p->integerNumber ;
      break;
    case  goil_lexique_1_include:
      s << '$'
        << "include"
        << '$' ;
      break;
    case  goil_lexique_1_command:
      s << '$'
        << "command"
        << '$' ;
    s << ' ' ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool goil_lexique::
parseLexicalToken (void) {
  cTokenFor_goil_lexique _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while ((_token._mTokenCode < 0) && (mCurrentChar != '\0')) {
    _token.att_token.clear () ;
    _token.a_string.clear () ;
    _token.integerNumber = 0 ;
    _token.floatNumber = 0.0 ;
    _token.number.clear () ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputString ("//", 2)) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
      }else if (testForInputString ("/*", 2)) {
        do {
          if (notTestForInputString ("*/", 2, gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE)) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
      }else if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.att_token, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_oilVersion (_token.att_token) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_makefileKeywords (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_oilDefinitions (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_objList (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_dataTypes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_miscSpecifiers (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_objectRefType (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_os_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_task_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_counter_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_as_counter_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_alarm_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_resource_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_message_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_networkmessage_attribute (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_com_attribute (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_ipdu_attribute (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_scheduling (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_boolean (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_autosar_attr (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_autosar_key (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_autosar_objs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_schedtable_attrs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_application_attrs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_sync_strategy (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_timing_prot_attribs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_unit (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_cpt_type_attr (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = goil_lexique_1_idf ;
        }
        _enterToken (_token) ;
      }else if (testForInputString ("..", 2)) {
        _token._mTokenCode = goil_lexique_1__2E_2E ;
        _enterToken (_token) ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = goil_lexique_1__3B ;
        _enterToken (_token) ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = goil_lexique_1__3A ;
        _enterToken (_token) ;
      }else if (testForInputString ("=", 1)) {
        _token._mTokenCode = goil_lexique_1__3D ;
        _enterToken (_token) ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = goil_lexique_1__7B ;
        _enterToken (_token) ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = goil_lexique_1__7D ;
        _enterToken (_token) ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = goil_lexique_1__5B ;
        _enterToken (_token) ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = goil_lexique_1__5D ;
        _enterToken (_token) ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = goil_lexique_1__2C ;
        _enterToken (_token) ;
      }else if (testForInputString (".", 1)) {
        _token._mTokenCode = goil_lexique_1__2E ;
        _enterToken (_token) ;
      }else if (testForInputString ("-", 1)) {
        _token._mTokenCode = goil_lexique_1__2D ;
        _enterToken (_token) ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar (' ', '!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.a_string, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = goil_lexique_1_string ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('<')) {
        do {
          if (testForInputChar (' ', '=') ||
              testForInputChar ('\?', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.a_string, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('>')) {
          _token._mTokenCode = goil_lexique_1_g_5Fstring ;
          _enterToken (_token) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputString ("0x", 2) ||
          testForInputString ("0X", 2)) {
        do {
          if (testForInputChar ('0', '9') ||
              testForInputChar ('a', 'f') ||
              testForInputChar ('A', 'F')) {
            scanner_action_enterHexDigitIntoUInt64 (previousChar (), _token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = goil_lexique_1_uint_5Fnumber ;
        _enterToken (_token) ;
      }else if (testForInputChar ('0', '9')) {
        do {
          scanner_action_enterCharacterIntoString (_token.number, previousChar ()) ;
          scanner_action_enterDigitIntoUInt64 (previousChar (), _token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          if (testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('.')) {
          if (testForInputChar ('.')) {
            _token._mTokenCode = goil_lexique_1_set_5Fstart_5Fuint_5Fnumber ;
            _enterToken (_token) ;
          }else{
            do {
              scanner_action_enterCharacterIntoString (_token.number, previousChar ()) ;
              if (testForInputChar ('0', '9')) {
              }else{
                loop_ = false ;
              }
            }while (loop_) ;
            loop_ = true ;
            scanner_action_convertStringToDouble (_token.number, _token.floatNumber, gErrorMessage_4) ;
            _token._mTokenCode = goil_lexique_1_float_5Fnumber ;
            _enterToken (_token) ;
          }
        }else{
          _token._mTokenCode = goil_lexique_1_uint_5Fnumber ;
          _enterToken (_token) ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z')) {
            scanner_action_enterCharacterIntoString (_token.att_token, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_commands (_token.att_token) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = goil_lexique_1_command ;
        }
        _enterToken (_token) ;
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = goil_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((mCurrentChar == '\0') && (_token._mTemplateStringBeforeToken.length () > 0)) {
    _token._mTokenCode = 0 ;
    _enterToken (_token) ;
  }
  return _token._mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 goil_lexique::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_goil_lexique _token ;
  bool loop_ = true ;
  _token._mTokenCode = -1 ;
  while (_token._mTokenCode < 0) {
    _token.att_token.clear () ;
    _token.a_string.clear () ;
    _token.integerNumber = 0 ;
    _token.floatNumber = 0.0 ;
    _token.number.clear () ;
    _mTokenFirstLocation = _mCurrentLocation ;
    try{
      if (testForInputString ("//", 2)) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = goil_lexique_1_comment ;
      }else if (testForInputString ("/*", 2)) {
        do {
          if (notTestForInputString ("*/", 2, gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE)) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = goil_lexique_1_comment ;
      }else if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (_token.att_token, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_oilVersion (_token.att_token) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_makefileKeywords (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_oilDefinitions (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_objList (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_dataTypes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_miscSpecifiers (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_objectRefType (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_os_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_task_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_counter_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_as_counter_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_alarm_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_resource_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_message_attributes (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_networkmessage_attribute (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_com_attribute (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_ipdu_attribute (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_scheduling (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_boolean (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_autosar_attr (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_autosar_key (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_autosar_objs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_schedtable_attrs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_application_attrs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_sync_strategy (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_timing_prot_attribs (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_unit (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = search_into_cpt_type_attr (_token.att_token) ;
        }
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = goil_lexique_1_idf ;
        }
      }else if (testForInputString ("..", 2)) {
        _token._mTokenCode = goil_lexique_1__2E_2E ;
      }else if (testForInputString (";", 1)) {
        _token._mTokenCode = goil_lexique_1__3B ;
      }else if (testForInputString (":", 1)) {
        _token._mTokenCode = goil_lexique_1__3A ;
      }else if (testForInputString ("=", 1)) {
        _token._mTokenCode = goil_lexique_1__3D ;
      }else if (testForInputString ("{", 1)) {
        _token._mTokenCode = goil_lexique_1__7B ;
      }else if (testForInputString ("}", 1)) {
        _token._mTokenCode = goil_lexique_1__7D ;
      }else if (testForInputString ("[", 1)) {
        _token._mTokenCode = goil_lexique_1__5B ;
      }else if (testForInputString ("]", 1)) {
        _token._mTokenCode = goil_lexique_1__5D ;
      }else if (testForInputString (",", 1)) {
        _token._mTokenCode = goil_lexique_1__2C ;
      }else if (testForInputString (".", 1)) {
        _token._mTokenCode = goil_lexique_1__2E ;
      }else if (testForInputString ("-", 1)) {
        _token._mTokenCode = goil_lexique_1__2D ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar (' ', '!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.a_string, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          _token._mTokenCode = goil_lexique_1_string ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('<')) {
        do {
          if (testForInputChar (' ', '=') ||
              testForInputChar ('\?', '\xFF')) {
            scanner_action_enterCharacterIntoString (_token.a_string, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('>')) {
          _token._mTokenCode = goil_lexique_1_g_5Fstring ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputString ("0x", 2) ||
          testForInputString ("0X", 2)) {
        do {
          if (testForInputChar ('0', '9') ||
              testForInputChar ('a', 'f') ||
              testForInputChar ('A', 'F')) {
            scanner_action_enterHexDigitIntoUInt64 (previousChar (), _token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = goil_lexique_1_uint_5Fnumber ;
      }else if (testForInputChar ('0', '9')) {
        do {
          scanner_action_enterCharacterIntoString (_token.number, previousChar ()) ;
          scanner_action_enterDigitIntoUInt64 (previousChar (), _token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          if (testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('.')) {
          if (testForInputChar ('.')) {
            _token._mTokenCode = goil_lexique_1_set_5Fstart_5Fuint_5Fnumber ;
          }else{
            do {
              scanner_action_enterCharacterIntoString (_token.number, previousChar ()) ;
              if (testForInputChar ('0', '9')) {
              }else{
                loop_ = false ;
              }
            }while (loop_) ;
            loop_ = true ;
            scanner_action_convertStringToDouble (_token.number, _token.floatNumber, gErrorMessage_4) ;
            _token._mTokenCode = goil_lexique_1_float_5Fnumber ;
          }
        }else{
          _token._mTokenCode = goil_lexique_1_uint_5Fnumber ;
        }
      }else if (testForInputChar ('#')) {
        do {
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z')) {
            scanner_action_enterCharacterIntoString (_token.att_token, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        _token._mTokenCode = search_into_commands (_token.att_token) ;
        if (_token._mTokenCode == -1) {
          _token._mTokenCode = goil_lexique_1_command ;
        }
      }else if (testForInputChar ('\0')) { // End of source text ? 
        _token._mTokenCode = goil_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      _token._mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return _token._mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 goil_lexique::getStylesCount (void) {
  return 10 ;
}

//---------------------------------------------------------------------------*

const char * goil_lexique::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [11] = {"Default style", "Keywords:", "Identifiers:", "Delimiters:", "String literals:", "Path String:", "Integer Literals:", "Floating Point Literals:", "Commands:", "Comments:", NULL} ;
  return (inIndex < 10) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * goil_lexique::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [11] = {"", "keywordsStyle", "identifierStyle", "delimitersStyle", "stringStyle", "pathStyle", "integerStyle", "floatStyle", "commandStyle", "commentStyle", NULL} ;
  return (inIndex < 10) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 goil_lexique::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [247] = {0,
    1 /* goil_lexique_1_APP_5FSRC */,
    1 /* goil_lexique_1_CFLAGS */,
    1 /* goil_lexique_1_ASFLAGS */,
    1 /* goil_lexique_1_LDFLAGS */,
    1 /* goil_lexique_1_APP_5FNAME */,
    1 /* goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH */,
    1 /* goil_lexique_1_OIL_5FVERSION */,
    1 /* goil_lexique_1_IMPLEMENTATION */,
    1 /* goil_lexique_1_OS */,
    1 /* goil_lexique_1_TASK */,
    1 /* goil_lexique_1_COUNTER */,
    1 /* goil_lexique_1_ALARM */,
    1 /* goil_lexique_1_RESOURCE */,
    1 /* goil_lexique_1_EVENT */,
    1 /* goil_lexique_1_ISR */,
    1 /* goil_lexique_1_MESSAGE */,
    1 /* goil_lexique_1_COM */,
    1 /* goil_lexique_1_NM */,
    1 /* goil_lexique_1_APPMODE */,
    1 /* goil_lexique_1_IPDU */,
    1 /* goil_lexique_1_CPU */,
    1 /* goil_lexique_1_UINT32 */,
    1 /* goil_lexique_1_INT32 */,
    1 /* goil_lexique_1_UINT64 */,
    1 /* goil_lexique_1_INT64 */,
    1 /* goil_lexique_1_FLOAT */,
    1 /* goil_lexique_1_ENUM */,
    1 /* goil_lexique_1_STRING */,
    1 /* goil_lexique_1_BOOLEAN */,
    1 /* goil_lexique_1_WITH_5FAUTO */,
    1 /* goil_lexique_1_NO_5FDEFAULT */,
    1 /* goil_lexique_1_AUTO */,
    1 /* goil_lexique_1_MASK */,
    1 /* goil_lexique_1_CATEGORY */,
    1 /* goil_lexique_1_OS_5FTYPE */,
    1 /* goil_lexique_1_TASK_5FTYPE */,
    1 /* goil_lexique_1_COUNTER_5FTYPE */,
    1 /* goil_lexique_1_ALARM_5FTYPE */,
    1 /* goil_lexique_1_RESOURCE_5FTYPE */,
    1 /* goil_lexique_1_EVENT_5FTYPE */,
    1 /* goil_lexique_1_ISR_5FTYPE */,
    1 /* goil_lexique_1_MESSAGE_5FTYPE */,
    1 /* goil_lexique_1_COM_5FTYPE */,
    1 /* goil_lexique_1_NM_5FTYPE */,
    1 /* goil_lexique_1_APPMODE_5FTYPE */,
    1 /* goil_lexique_1_IPDU_5FTYPE */,
    1 /* goil_lexique_1_STATUS */,
    1 /* goil_lexique_1_EXTENDED */,
    1 /* goil_lexique_1_STARTUPHOOK */,
    1 /* goil_lexique_1_ERRORHOOK */,
    1 /* goil_lexique_1_SHUTDOWNHOOK */,
    1 /* goil_lexique_1_PRETASKHOOK */,
    1 /* goil_lexique_1_POSTTASKHOOK */,
    1 /* goil_lexique_1_USEGETSERVICEID */,
    1 /* goil_lexique_1_USEPARAMETERACCESS */,
    1 /* goil_lexique_1_USERESSCHEDULER */,
    1 /* goil_lexique_1_SYSTEM_5FCALL */,
    1 /* goil_lexique_1_TRACE */,
    1 /* goil_lexique_1_FILE */,
    1 /* goil_lexique_1_PRIORITY */,
    1 /* goil_lexique_1_SCHEDULE */,
    1 /* goil_lexique_1_ACTIVATION */,
    1 /* goil_lexique_1_AUTOSTART */,
    1 /* goil_lexique_1_MAXALLOWEDVALUE */,
    1 /* goil_lexique_1_TICKSPERBASE */,
    1 /* goil_lexique_1_MINCYCLE */,
    1 /* goil_lexique_1_TYPE */,
    1 /* goil_lexique_1_UNIT */,
    1 /* goil_lexique_1_ACTION */,
    1 /* goil_lexique_1_SETEVENT */,
    1 /* goil_lexique_1_ACTIVATETASK */,
    1 /* goil_lexique_1_ALARMCALLBACK */,
    1 /* goil_lexique_1_ALARMCALLBACKNAME */,
    1 /* goil_lexique_1_ALARMTIME */,
    1 /* goil_lexique_1_CYCLETIME */,
    1 /* goil_lexique_1_INCREMENTCOUNTER */,
    1 /* goil_lexique_1_RESOURCEPROPERTY */,
    1 /* goil_lexique_1_STANDARD */,
    1 /* goil_lexique_1_LINKED */,
    1 /* goil_lexique_1_LINKEDRESOURCE */,
    1 /* goil_lexique_1_INTERNAL */,
    1 /* goil_lexique_1_MESSAGEPROPERTY */,
    1 /* goil_lexique_1_NOTIFICATION */,
    1 /* goil_lexique_1_NOTIFICATIONERROR */,
    1 /* goil_lexique_1_SEND_5FSTATIC_5FINTERNAL */,
    1 /* goil_lexique_1_SEND_5FSTATIC_5FEXTERNAL */,
    1 /* goil_lexique_1_SEND_5FDYNAMIC_5FEXTERNAL */,
    1 /* goil_lexique_1_SEND_5FZERO_5FINTERNAL */,
    1 /* goil_lexique_1_SEND_5FZERO_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FZERO_5FINTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FZERO_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FUNQUEUED_5FINTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FQUEUED_5FINTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FUNQUEUED_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FQUEUED_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FDYNAMIC_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FZERO_5FSENDERS */,
    1 /* goil_lexique_1_CDATATYPE */,
    1 /* goil_lexique_1_SENDINGMESSAGE */,
    1 /* goil_lexique_1_NONE */,
    1 /* goil_lexique_1_COMCALLBACK */,
    1 /* goil_lexique_1_COMCALLBACKNAME */,
    1 /* goil_lexique_1_INMCALLBACK */,
    1 /* goil_lexique_1_CALLBACKROUTINENAME */,
    1 /* goil_lexique_1_MONITOREDIPDU */,
    1 /* goil_lexique_1_TRANSFERPROPERTY */,
    1 /* goil_lexique_1_TRIGGERED */,
    1 /* goil_lexique_1_PENDING */,
    1 /* goil_lexique_1_NETWORKMESSAGE */,
    1 /* goil_lexique_1_FILTER */,
    1 /* goil_lexique_1_ALWAYS */,
    1 /* goil_lexique_1_NEVER */,
    1 /* goil_lexique_1_MASKEDNEWEQUALSX */,
    1 /* goil_lexique_1_MASKEDNEWDIFFERSX */,
    1 /* goil_lexique_1_NEWISEQUAL */,
    1 /* goil_lexique_1_NEWISDIFFERENT */,
    1 /* goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD */,
    1 /* goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD */,
    1 /* goil_lexique_1_NEWISWITHIN */,
    1 /* goil_lexique_1_NEWISOUTSIDE */,
    1 /* goil_lexique_1_NEWISGREATER */,
    1 /* goil_lexique_1_NEWISLESSOREQUAL */,
    1 /* goil_lexique_1_NEWISLESS */,
    1 /* goil_lexique_1_NEWISGREATEROREQUAL */,
    1 /* goil_lexique_1_ONEEVERYN */,
    1 /* goil_lexique_1_MIN */,
    1 /* goil_lexique_1_MAX */,
    1 /* goil_lexique_1_X */,
    1 /* goil_lexique_1_PERIOD */,
    1 /* goil_lexique_1_OFFSET */,
    1 /* goil_lexique_1_NETWORKORDERCALLOUT */,
    1 /* goil_lexique_1_CPUORDERCALLOUT */,
    1 /* goil_lexique_1_INITIALVALUE */,
    1 /* goil_lexique_1_QUEUESIZE */,
    1 /* goil_lexique_1_LINK */,
    1 /* goil_lexique_1_RECEIVEMESSAGE */,
    1 /* goil_lexique_1_FLAG */,
    1 /* goil_lexique_1_FLAGNAME */,
    1 /* goil_lexique_1_STATIC */,
    1 /* goil_lexique_1_DYNAMIC */,
    1 /* goil_lexique_1_ZERO */,
    1 /* goil_lexique_1_SIZEINBITS */,
    1 /* goil_lexique_1_MAXSIZEINBITS */,
    1 /* goil_lexique_1_BITORDERING */,
    1 /* goil_lexique_1_BIGENDIAN */,
    1 /* goil_lexique_1_LITTLEENDIAN */,
    1 /* goil_lexique_1_BITPOSITION */,
    1 /* goil_lexique_1_DATAINTERPRETATION */,
    1 /* goil_lexique_1_UNSIGNEDINTEGER */,
    1 /* goil_lexique_1_BYTEARRAY */,
    1 /* goil_lexique_1_DIRECTION */,
    1 /* goil_lexique_1_SENT */,
    1 /* goil_lexique_1_RECEIVED */,
    1 /* goil_lexique_1_COMTIMEBASE */,
    1 /* goil_lexique_1_COMERRORHOOK */,
    1 /* goil_lexique_1_COMUSEGETSERVICEID */,
    1 /* goil_lexique_1_COMUSEPARAMETERACCESS */,
    1 /* goil_lexique_1_COMSTARTCOMEXTENSION */,
    1 /* goil_lexique_1_COMAPPMODE */,
    1 /* goil_lexique_1_COMSTATUS */,
    1 /* goil_lexique_1_USE */,
    1 /* goil_lexique_1_COMEXTENDED */,
    1 /* goil_lexique_1_COMSTANDARD */,
    1 /* goil_lexique_1_IPDUPROPERTY */,
    1 /* goil_lexique_1_IPDUCALLOUT */,
    1 /* goil_lexique_1_LAYERUSED */,
    1 /* goil_lexique_1_TRANSMISSIONMODE */,
    1 /* goil_lexique_1_DIRECT */,
    1 /* goil_lexique_1_PERIODIC */,
    1 /* goil_lexique_1_MIXED */,
    1 /* goil_lexique_1_TIMEOUT */,
    1 /* goil_lexique_1_FIRTSTIMEOUT */,
    1 /* goil_lexique_1_MINIMUMDELAYTIME */,
    1 /* goil_lexique_1_TIMEPERIOD */,
    1 /* goil_lexique_1_TIMEOFFSET */,
    1 /* goil_lexique_1_NON */,
    1 /* goil_lexique_1_FULL */,
    1 /* goil_lexique_1_FALSE */,
    1 /* goil_lexique_1_TRUE */,
    1 /* goil_lexique_1_PROTECTIONHOOK */,
    1 /* goil_lexique_1_SCALABILITYCLASS */,
    1 /* goil_lexique_1_STACKMONITORING */,
    1 /* goil_lexique_1_TIMING_5FPROTECTION */,
    1 /* goil_lexique_1_ACCESSING_5FAPPLICATION */,
    1 /* goil_lexique_1_SC1 */,
    1 /* goil_lexique_1_SC2 */,
    1 /* goil_lexique_1_SC3 */,
    1 /* goil_lexique_1_SC4 */,
    1 /* goil_lexique_1_SCHEDULETABLE */,
    1 /* goil_lexique_1_APPLICATION */,
    1 /* goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION */,
    1 /* goil_lexique_1_SYNC_5FSTRATEGY */,
    1 /* goil_lexique_1_MAX_5FINCREASE */,
    1 /* goil_lexique_1_MAX_5FDECREASE */,
    1 /* goil_lexique_1_MAX_5FINCREASE_5FASYNC */,
    1 /* goil_lexique_1_MAX_5FDECREASE_5FASYNC */,
    1 /* goil_lexique_1_PRECISION */,
    1 /* goil_lexique_1_LENGTH */,
    1 /* goil_lexique_1_TRUSTED */,
    1 /* goil_lexique_1_HAS_5FRESTARTTASK */,
    1 /* goil_lexique_1_RESTARTTASK */,
    1 /* goil_lexique_1_TRUSTED_5FFUNCTION */,
    1 /* goil_lexique_1_EXECUTIONBUDGET */,
    1 /* goil_lexique_1_EXECUTIONTIME */,
    1 /* goil_lexique_1_COUNTLIMIT */,
    1 /* goil_lexique_1_TIMEFRAME */,
    1 /* goil_lexique_1_MAXOSINTERRUPTLOCKTIME */,
    1 /* goil_lexique_1_MAXALLINTERRUPTLOCKTIME */,
    1 /* goil_lexique_1_LOCKINGTIME */,
    1 /* goil_lexique_1_RESOURCELOCK */,
    1 /* goil_lexique_1_MAXRESOURCELOCKTIME */,
    1 /* goil_lexique_1_SMOOTH */,
    1 /* goil_lexique_1_HARD */,
    1 /* goil_lexique_1_TICKS */,
    1 /* goil_lexique_1_NANOSECONDS */,
    1 /* goil_lexique_1_SOFTWARE */,
    1 /* goil_lexique_1_HARDWARE */,
    1 /* goil_lexique_1_OSINTERNAL */,
    1 /* goil_lexique_1_GPT */,
    1 /* goil_lexique_1_NS_5FPER_5FHW_5FTICK */,
    1 /* goil_lexique_1_GPTCHANNELNAME */,
    1 /* goil_lexique_1_DRIVER */,
    1 /* goil_lexique_1_TIMECONSTANTS */,
    1 /* goil_lexique_1_TIMECONSTANT */,
    1 /* goil_lexique_1_NS */,
    1 /* goil_lexique_1_CONSTNAME */,
    9 /* goil_lexique_1_comment */,
    2 /* goil_lexique_1_idf */,
    3 /* goil_lexique_1__3B */,
    3 /* goil_lexique_1__3A */,
    3 /* goil_lexique_1__3D */,
    3 /* goil_lexique_1__7B */,
    3 /* goil_lexique_1__7D */,
    3 /* goil_lexique_1__2E_2E */,
    3 /* goil_lexique_1__5B */,
    3 /* goil_lexique_1__5D */,
    3 /* goil_lexique_1__2C */,
    3 /* goil_lexique_1__2E */,
    3 /* goil_lexique_1__2D */,
    4 /* goil_lexique_1_string */,
    5 /* goil_lexique_1_g_5Fstring */,
    6 /* goil_lexique_1_uint_5Fnumber */,
    7 /* goil_lexique_1_float_5Fnumber */,
    6 /* goil_lexique_1_set_5Fstart_5Fuint_5Fnumber */,
    1 /* goil_lexique_1_include */,
    8 /* goil_lexique_1_command */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void goil_lexique::_enterToken (const cTokenFor_goil_lexique & inToken) {
  cTokenFor_goil_lexique * _p = NULL ;
  macroMyNew (_p, cTokenFor_goil_lexique ()) ;
  _p->_mTokenCode = inToken._mTokenCode ;
  _p->_mFirstLocation = _mTokenFirstLocation ;
  _p->_mLastLocation  = _mTokenLastLocation ;
  _p->_mTemplateStringBeforeToken  = inToken._mTemplateStringBeforeToken ;
  _p->att_token = inToken.att_token ;
  _p->a_string = inToken.a_string ;
  _p->integerNumber = inToken.integerNumber ;
  _p->floatNumber = inToken.floatNumber ;
  _p->number = inToken.number ;
  _enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_att_token (GGS_lstring & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->att_token) ;
}

//---------------------------------------------------------------------------*

C_String goil_lexique::
_attributeValue_att_token (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->att_token ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_a_string (GGS_lstring & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->a_string) ;
}

//---------------------------------------------------------------------------*

C_String goil_lexique::
_attributeValue_a_string (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->a_string ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_integerNumber (GGS_luint64 & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, _p->integerNumber) ;
}

//---------------------------------------------------------------------------*

uint64 goil_lexique::
_attributeValue_integerNumber (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->integerNumber ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_floatNumber (GGS_ldouble & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, _p->floatNumber) ;
}

//---------------------------------------------------------------------------*

double goil_lexique::
_attributeValue_floatNumber (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->floatNumber ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_number (GGS_lstring & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->number) ;
}

//---------------------------------------------------------------------------*

C_String goil_lexique::
_attributeValue_number (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->number ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

