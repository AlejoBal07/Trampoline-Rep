//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_lexique.cpp'                           *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      october 17th, 2006, at 21h8'8"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include <ctype.h>
#include <string.h>

#include "goil_lexique.h"

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (), currentLineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructor                                 *
//                                                                           *
//---------------------------------------------------------------------------*

goil_lexique::
goil_lexique (AC_galgas_io * inGalgasInputOutput COMMA_LOCATION_ARGS)
: C_Lexique (inGalgasInputOutput COMMA_THERE) {
  a_string.clear () ;
  att_token.clear () ;
  floatNumber = 0.0 ;
  integerNumber = 0 ;
  number.clear () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const char * gErrorMessage_0 = "internal error" ;
//--- Message 1
static const char * gErrorMessage_1 = "decimal number too large" ;
//--- Message 2
static const char * gErrorMessage_2 = "Unterminated litteral string" ;
//--- Message 3
static const char * gErrorMessage_3 = "Unable to convert the string to double" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$OIL_VERSION$' :
static const char * gSyntaxErrorMessage_OIL_5FVERSION = "OIL version" ;

//--- Syntax error message for terminal '$IMPLEMENTATION$' :
static const char * gSyntaxErrorMessage_IMPLEMENTATION = "OIL implementation definition" ;

//--- Syntax error message for terminal '$OS$' :
static const char * gSyntaxErrorMessage_OS = "Object 'OS'" ;

//--- Syntax error message for terminal '$TASK$' :
static const char * gSyntaxErrorMessage_TASK = "Object 'TASK'" ;

//--- Syntax error message for terminal '$COUNTER$' :
static const char * gSyntaxErrorMessage_COUNTER = "Object 'COUNTER'" ;

//--- Syntax error message for terminal '$ALARM$' :
static const char * gSyntaxErrorMessage_ALARM = "Object 'ALARM'" ;

//--- Syntax error message for terminal '$RESOURCE$' :
static const char * gSyntaxErrorMessage_RESOURCE = "Object 'RESOURCE'" ;

//--- Syntax error message for terminal '$EVENT$' :
static const char * gSyntaxErrorMessage_EVENT = "Object 'EVENT'" ;

//--- Syntax error message for terminal '$ISR$' :
static const char * gSyntaxErrorMessage_ISR = "Object 'ISR'" ;

//--- Syntax error message for terminal '$MESSAGE$' :
static const char * gSyntaxErrorMessage_MESSAGE = "Object 'MESSAGE'" ;

//--- Syntax error message for terminal '$COM$' :
static const char * gSyntaxErrorMessage_COM = "Object 'COM'" ;

//--- Syntax error message for terminal '$NM$' :
static const char * gSyntaxErrorMessage_NM = "Object 'NM'" ;

//--- Syntax error message for terminal '$APPMODE$' :
static const char * gSyntaxErrorMessage_APPMODE = "Object 'APPMODE'" ;

//--- Syntax error message for terminal '$IPDU$' :
static const char * gSyntaxErrorMessage_IPDU = "Object 'IPDU'" ;

//--- Syntax error message for terminal '$CPU$' :
static const char * gSyntaxErrorMessage_CPU = "Object 'CPU'" ;

//--- Syntax error message for terminal '$UINT32$' :
static const char * gSyntaxErrorMessage_UINT32 = "type 'UINT32'" ;

//--- Syntax error message for terminal '$INT32$' :
static const char * gSyntaxErrorMessage_INT32 = "type 'INT32'" ;

//--- Syntax error message for terminal '$UINT64$' :
static const char * gSyntaxErrorMessage_UINT64 = "type 'UINT64'" ;

//--- Syntax error message for terminal '$INT64$' :
static const char * gSyntaxErrorMessage_INT64 = "type 'INT64'" ;

//--- Syntax error message for terminal '$FLOAT$' :
static const char * gSyntaxErrorMessage_FLOAT = "type 'FLOAT'" ;

//--- Syntax error message for terminal '$ENUM$' :
static const char * gSyntaxErrorMessage_ENUM = "type 'ENUM'" ;

//--- Syntax error message for terminal '$STRING$' :
static const char * gSyntaxErrorMessage_STRING = "type 'STRING'" ;

//--- Syntax error message for terminal '$BOOLEAN$' :
static const char * gSyntaxErrorMessage_BOOLEAN = "type 'BOOLEAN'" ;

//--- Syntax error message for terminal '$WITH_AUTO$' :
static const char * gSyntaxErrorMessage_WITH_5FAUTO = "specifier 'WITH_AUTO'" ;

//--- Syntax error message for terminal '$NO_DEFAULT$' :
static const char * gSyntaxErrorMessage_NO_5FDEFAULT = "specifier 'NO_DEFAULT'" ;

//--- Syntax error message for terminal '$AUTO$' :
static const char * gSyntaxErrorMessage_AUTO = "specifier 'AUTO'" ;

//--- Syntax error message for terminal '$MASK$' :
static const char * gSyntaxErrorMessage_MASK = "specifier 'MASK'" ;

//--- Syntax error message for terminal '$CATEGORY$' :
static const char * gSyntaxErrorMessage_CATEGORY = "specifier 'CATEGORY'" ;

//--- Syntax error message for terminal '$OS_TYPE$' :
static const char * gSyntaxErrorMessage_OS_5FTYPE = "object reference type 'OS_TYPE'" ;

//--- Syntax error message for terminal '$TASK_TYPE$' :
static const char * gSyntaxErrorMessage_TASK_5FTYPE = "object reference type 'TASK_TYPE'" ;

//--- Syntax error message for terminal '$COUNTER_TYPE$' :
static const char * gSyntaxErrorMessage_COUNTER_5FTYPE = "object reference type 'COUNTER_TYPE'" ;

//--- Syntax error message for terminal '$ALARM_TYPE$' :
static const char * gSyntaxErrorMessage_ALARM_5FTYPE = "object reference type 'ALARM_TYPE'" ;

//--- Syntax error message for terminal '$RESOURCE_TYPE$' :
static const char * gSyntaxErrorMessage_RESOURCE_5FTYPE = "object reference type 'RESOURCE_TYPE'" ;

//--- Syntax error message for terminal '$EVENT_TYPE$' :
static const char * gSyntaxErrorMessage_EVENT_5FTYPE = "object reference type 'EVENT_TYPE'" ;

//--- Syntax error message for terminal '$ISR_TYPE$' :
static const char * gSyntaxErrorMessage_ISR_5FTYPE = "object reference type 'ISR_TYPE'" ;

//--- Syntax error message for terminal '$MESSAGE_TYPE$' :
static const char * gSyntaxErrorMessage_MESSAGE_5FTYPE = "object reference type 'MESSAGE_TYPE'" ;

//--- Syntax error message for terminal '$COM_TYPE$' :
static const char * gSyntaxErrorMessage_COM_5FTYPE = "object reference type 'COM_TYPE'" ;

//--- Syntax error message for terminal '$NM_TYPE$' :
static const char * gSyntaxErrorMessage_NM_5FTYPE = "object reference type 'NM_TYPE'" ;

//--- Syntax error message for terminal '$APPMODE_TYPE$' :
static const char * gSyntaxErrorMessage_APPMODE_5FTYPE = "object reference type 'APPMODE_TYPE'" ;

//--- Syntax error message for terminal '$IPDU_TYPE$' :
static const char * gSyntaxErrorMessage_IPDU_5FTYPE = "object reference type 'IPDU_TYPE'" ;

//--- Syntax error message for terminal '$PRIORITY$' :
static const char * gSyntaxErrorMessage_PRIORITY = "task attribute 'PRIORITY'" ;

//--- Syntax error message for terminal '$SCHEDULE$' :
static const char * gSyntaxErrorMessage_SCHEDULE = "task attribute 'SCHEDULE'" ;

//--- Syntax error message for terminal '$ACTIVATION$' :
static const char * gSyntaxErrorMessage_ACTIVATION = "task attribute 'ACTIVATION'" ;

//--- Syntax error message for terminal '$AUTOSTART$' :
static const char * gSyntaxErrorMessage_AUTOSTART = "task attribute 'AUTOSTART'" ;

//--- Syntax error message for terminal '$MAXALLOWEDVALUE$' :
static const char * gSyntaxErrorMessage_MAXALLOWEDVALUE = "counter attribute 'MAXALLOWEDVALUE'" ;

//--- Syntax error message for terminal '$TICKSPERBASE$' :
static const char * gSyntaxErrorMessage_TICKSPERBASE = "counter attribute 'TICKSPERBASE'" ;

//--- Syntax error message for terminal '$MINCYCLE$' :
static const char * gSyntaxErrorMessage_MINCYCLE = "counter attribute 'MINCYCLE'" ;

//--- Syntax error message for terminal '$ACTION$' :
static const char * gSyntaxErrorMessage_ACTION = "alarm attribute 'ACTION'" ;

//--- Syntax error message for terminal '$SETEVENT$' :
static const char * gSyntaxErrorMessage_SETEVENT = "alarm attribute 'SETEVENT'" ;

//--- Syntax error message for terminal '$ACTIVATETASK$' :
static const char * gSyntaxErrorMessage_ACTIVATETASK = "alarm attribute 'ACTIVATETASK'" ;

//--- Syntax error message for terminal '$ALARMCALLBACK$' :
static const char * gSyntaxErrorMessage_ALARMCALLBACK = "alarm attribute 'ALARMCALLBACK'" ;

//--- Syntax error message for terminal '$ALARMCALLBACKNAME$' :
static const char * gSyntaxErrorMessage_ALARMCALLBACKNAME = "alarm attribute 'ALARMCALLBACKNAME'" ;

//--- Syntax error message for terminal '$ALARMTIME$' :
static const char * gSyntaxErrorMessage_ALARMTIME = "alarm attribute 'ALARMTIME'" ;

//--- Syntax error message for terminal '$CYCLETIME$' :
static const char * gSyntaxErrorMessage_CYCLETIME = "alarm attribute 'CYCLETIME'" ;

//--- Syntax error message for terminal '$RESOURCEPROPERTY$' :
static const char * gSyntaxErrorMessage_RESOURCEPROPERTY = "resource attribute 'RESOURCEPROPERTY'" ;

//--- Syntax error message for terminal '$STANDARD$' :
static const char * gSyntaxErrorMessage_STANDARD = "resource attribute 'STANDARD'" ;

//--- Syntax error message for terminal '$LINKED$' :
static const char * gSyntaxErrorMessage_LINKED = "resource attribute 'LINKED'" ;

//--- Syntax error message for terminal '$LINKEDRESOURCE$' :
static const char * gSyntaxErrorMessage_LINKEDRESOURCE = "resource attribute 'LINKEDRESOURCE'" ;

//--- Syntax error message for terminal '$INTERNAL$' :
static const char * gSyntaxErrorMessage_INTERNAL = "resource attribute 'INTERNAL'" ;

//--- Syntax error message for terminal '$NON$' :
static const char * gSyntaxErrorMessage_NON = "scheduling value 'NON'" ;

//--- Syntax error message for terminal '$FULL$' :
static const char * gSyntaxErrorMessage_FULL = "scheduling value 'FULL'" ;

//--- Syntax error message for terminal '$FALSE$' :
static const char * gSyntaxErrorMessage_FALSE = "boolean 'FALSE'" ;

//--- Syntax error message for terminal '$TRUE$' :
static const char * gSyntaxErrorMessage_TRUE = "boolean 'TRUE'" ;

//--- Syntax error message for terminal '$idf$' :
static const char * gSyntaxErrorMessage_idf = "identifier" ;

//--- Syntax error message for terminal '$;$' :
static const char * gSyntaxErrorMessage__3B = "';' delimiter" ;

//--- Syntax error message for terminal '$:$' :
static const char * gSyntaxErrorMessage__3A = "':' delimiter" ;

//--- Syntax error message for terminal '$=$' :
static const char * gSyntaxErrorMessage__3D = "'=' delimiter" ;

//--- Syntax error message for terminal '${$' :
static const char * gSyntaxErrorMessage__7B = "'{' delimiter" ;

//--- Syntax error message for terminal '$}$' :
static const char * gSyntaxErrorMessage__7D = "'}' delimiter" ;

//--- Syntax error message for terminal '$..$' :
static const char * gSyntaxErrorMessage__2E_2E = "'..' delimiter" ;

//--- Syntax error message for terminal '$[$' :
static const char * gSyntaxErrorMessage__5B = "'[' delimiter" ;

//--- Syntax error message for terminal '$]$' :
static const char * gSyntaxErrorMessage__5D = "']' delimiter" ;

//--- Syntax error message for terminal '$,$' :
static const char * gSyntaxErrorMessage__2C = "',' delimiter" ;

//--- Syntax error message for terminal '$.$' :
static const char * gSyntaxErrorMessage__2E = "'.' delimiter" ;

//--- Syntax error message for terminal '$string$' :
static const char * gSyntaxErrorMessage_string = "litteral string" ;

//--- Syntax error message for terminal '$uint_number$' :
static const char * gSyntaxErrorMessage_uint_5Fnumber = "litteral unsigned 32 bits integer" ;

//--- Syntax error message for terminal '$float_number$' :
static const char * gSyntaxErrorMessage_float_5Fnumber = "litteral float" ;

//--- Syntax error message for terminal '$set_start_uint_number$' :
static const char * gSyntaxErrorMessage_set_5Fstart_5Fuint_5Fnumber = "litteral unigned 32 bits integer" ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_lexique::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const char * syntaxErrorMessageArray [79] = {"end of source",
       gSyntaxErrorMessage_OIL_5FVERSION,
       gSyntaxErrorMessage_IMPLEMENTATION,
       gSyntaxErrorMessage_OS,
       gSyntaxErrorMessage_TASK,
       gSyntaxErrorMessage_COUNTER,
       gSyntaxErrorMessage_ALARM,
       gSyntaxErrorMessage_RESOURCE,
       gSyntaxErrorMessage_EVENT,
       gSyntaxErrorMessage_ISR,
       gSyntaxErrorMessage_MESSAGE,
       gSyntaxErrorMessage_COM,
       gSyntaxErrorMessage_NM,
       gSyntaxErrorMessage_APPMODE,
       gSyntaxErrorMessage_IPDU,
       gSyntaxErrorMessage_CPU,
       gSyntaxErrorMessage_UINT32,
       gSyntaxErrorMessage_INT32,
       gSyntaxErrorMessage_UINT64,
       gSyntaxErrorMessage_INT64,
       gSyntaxErrorMessage_FLOAT,
       gSyntaxErrorMessage_ENUM,
       gSyntaxErrorMessage_STRING,
       gSyntaxErrorMessage_BOOLEAN,
       gSyntaxErrorMessage_WITH_5FAUTO,
       gSyntaxErrorMessage_NO_5FDEFAULT,
       gSyntaxErrorMessage_AUTO,
       gSyntaxErrorMessage_MASK,
       gSyntaxErrorMessage_CATEGORY,
       gSyntaxErrorMessage_OS_5FTYPE,
       gSyntaxErrorMessage_TASK_5FTYPE,
       gSyntaxErrorMessage_COUNTER_5FTYPE,
       gSyntaxErrorMessage_ALARM_5FTYPE,
       gSyntaxErrorMessage_RESOURCE_5FTYPE,
       gSyntaxErrorMessage_EVENT_5FTYPE,
       gSyntaxErrorMessage_ISR_5FTYPE,
       gSyntaxErrorMessage_MESSAGE_5FTYPE,
       gSyntaxErrorMessage_COM_5FTYPE,
       gSyntaxErrorMessage_NM_5FTYPE,
       gSyntaxErrorMessage_APPMODE_5FTYPE,
       gSyntaxErrorMessage_IPDU_5FTYPE,
       gSyntaxErrorMessage_PRIORITY,
       gSyntaxErrorMessage_SCHEDULE,
       gSyntaxErrorMessage_ACTIVATION,
       gSyntaxErrorMessage_AUTOSTART,
       gSyntaxErrorMessage_MAXALLOWEDVALUE,
       gSyntaxErrorMessage_TICKSPERBASE,
       gSyntaxErrorMessage_MINCYCLE,
       gSyntaxErrorMessage_ACTION,
       gSyntaxErrorMessage_SETEVENT,
       gSyntaxErrorMessage_ACTIVATETASK,
       gSyntaxErrorMessage_ALARMCALLBACK,
       gSyntaxErrorMessage_ALARMCALLBACKNAME,
       gSyntaxErrorMessage_ALARMTIME,
       gSyntaxErrorMessage_CYCLETIME,
       gSyntaxErrorMessage_RESOURCEPROPERTY,
       gSyntaxErrorMessage_STANDARD,
       gSyntaxErrorMessage_LINKED,
       gSyntaxErrorMessage_LINKEDRESOURCE,
       gSyntaxErrorMessage_INTERNAL,
       gSyntaxErrorMessage_NON,
       gSyntaxErrorMessage_FULL,
       gSyntaxErrorMessage_FALSE,
       gSyntaxErrorMessage_TRUE,
       gSyntaxErrorMessage_idf,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__3D,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2E_2E,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage_string,
       gSyntaxErrorMessage_uint_5Fnumber,
       gSyntaxErrorMessage_float_5Fnumber,
       gSyntaxErrorMessage_set_5Fstart_5Fuint_5Fnumber} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'OILDelimiters'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_OILDelimiters = 10 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_OILDelimiters [10] = {
  C_lexique_table_entry (",", 1, goil_lexique_1__2C),
  C_lexique_table_entry (".", 1, goil_lexique_1__2E),
  C_lexique_table_entry (":", 1, goil_lexique_1__3A),
  C_lexique_table_entry (";", 1, goil_lexique_1__3B),
  C_lexique_table_entry ("=", 1, goil_lexique_1__3D),
  C_lexique_table_entry ("[", 1, goil_lexique_1__5B),
  C_lexique_table_entry ("]", 1, goil_lexique_1__5D),
  C_lexique_table_entry ("{", 1, goil_lexique_1__7B),
  C_lexique_table_entry ("}", 1, goil_lexique_1__7D),
  C_lexique_table_entry ("..", 2, goil_lexique_1__2E_2E)
} ;

sint16 goil_lexique::search_into_OILDelimiters (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_OILDelimiters, goil_lexique_table_size_OILDelimiters) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'alarm_attributes'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_alarm_attributes = 7 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_alarm_attributes [7] = {
  C_lexique_table_entry ("ACTION", 6, goil_lexique_1_ACTION),
  C_lexique_table_entry ("SETEVENT", 8, goil_lexique_1_SETEVENT),
  C_lexique_table_entry ("ALARMTIME", 9, goil_lexique_1_ALARMTIME),
  C_lexique_table_entry ("CYCLETIME", 9, goil_lexique_1_CYCLETIME),
  C_lexique_table_entry ("ACTIVATETASK", 12, goil_lexique_1_ACTIVATETASK),
  C_lexique_table_entry ("ALARMCALLBACK", 13, goil_lexique_1_ALARMCALLBACK),
  C_lexique_table_entry ("ALARMCALLBACKNAME", 17, goil_lexique_1_ALARMCALLBACKNAME)
} ;

sint16 goil_lexique::search_into_alarm_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_alarm_attributes, goil_lexique_table_size_alarm_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'boolean'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_boolean = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_boolean [2] = {
  C_lexique_table_entry ("TRUE", 4, goil_lexique_1_TRUE),
  C_lexique_table_entry ("FALSE", 5, goil_lexique_1_FALSE)
} ;

sint16 goil_lexique::search_into_boolean (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_boolean, goil_lexique_table_size_boolean) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'counter_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_counter_attributes = 3 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_counter_attributes [3] = {
  C_lexique_table_entry ("MINCYCLE", 8, goil_lexique_1_MINCYCLE),
  C_lexique_table_entry ("TICKSPERBASE", 12, goil_lexique_1_TICKSPERBASE),
  C_lexique_table_entry ("MAXALLOWEDVALUE", 15, goil_lexique_1_MAXALLOWEDVALUE)
} ;

sint16 goil_lexique::search_into_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_counter_attributes, goil_lexique_table_size_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'dataTypes'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_dataTypes = 8 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_dataTypes [8] = {
  C_lexique_table_entry ("ENUM", 4, goil_lexique_1_ENUM),
  C_lexique_table_entry ("FLOAT", 5, goil_lexique_1_FLOAT),
  C_lexique_table_entry ("INT32", 5, goil_lexique_1_INT32),
  C_lexique_table_entry ("INT64", 5, goil_lexique_1_INT64),
  C_lexique_table_entry ("STRING", 6, goil_lexique_1_STRING),
  C_lexique_table_entry ("UINT32", 6, goil_lexique_1_UINT32),
  C_lexique_table_entry ("UINT64", 6, goil_lexique_1_UINT64),
  C_lexique_table_entry ("BOOLEAN", 7, goil_lexique_1_BOOLEAN)
} ;

sint16 goil_lexique::search_into_dataTypes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_dataTypes, goil_lexique_table_size_dataTypes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'miscSpecifiers'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_miscSpecifiers = 5 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_miscSpecifiers [5] = {
  C_lexique_table_entry ("AUTO", 4, goil_lexique_1_AUTO),
  C_lexique_table_entry ("MASK", 4, goil_lexique_1_MASK),
  C_lexique_table_entry ("CATEGORY", 8, goil_lexique_1_CATEGORY),
  C_lexique_table_entry ("WITH_AUTO", 9, goil_lexique_1_WITH_5FAUTO),
  C_lexique_table_entry ("NO_DEFAULT", 10, goil_lexique_1_NO_5FDEFAULT)
} ;

sint16 goil_lexique::search_into_miscSpecifiers (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_miscSpecifiers, goil_lexique_table_size_miscSpecifiers) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'objList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_objList = 13 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_objList [13] = {
  C_lexique_table_entry ("NM", 2, goil_lexique_1_NM),
  C_lexique_table_entry ("OS", 2, goil_lexique_1_OS),
  C_lexique_table_entry ("COM", 3, goil_lexique_1_COM),
  C_lexique_table_entry ("CPU", 3, goil_lexique_1_CPU),
  C_lexique_table_entry ("ISR", 3, goil_lexique_1_ISR),
  C_lexique_table_entry ("IPDU", 4, goil_lexique_1_IPDU),
  C_lexique_table_entry ("TASK", 4, goil_lexique_1_TASK),
  C_lexique_table_entry ("ALARM", 5, goil_lexique_1_ALARM),
  C_lexique_table_entry ("EVENT", 5, goil_lexique_1_EVENT),
  C_lexique_table_entry ("APPMODE", 7, goil_lexique_1_APPMODE),
  C_lexique_table_entry ("COUNTER", 7, goil_lexique_1_COUNTER),
  C_lexique_table_entry ("MESSAGE", 7, goil_lexique_1_MESSAGE),
  C_lexique_table_entry ("RESOURCE", 8, goil_lexique_1_RESOURCE)
} ;

sint16 goil_lexique::search_into_objList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_objList, goil_lexique_table_size_objList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'objectRefType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_objectRefType = 12 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_objectRefType [12] = {
  C_lexique_table_entry ("NM_TYPE", 7, goil_lexique_1_NM_5FTYPE),
  C_lexique_table_entry ("OS_TYPE", 7, goil_lexique_1_OS_5FTYPE),
  C_lexique_table_entry ("COM_TYPE", 8, goil_lexique_1_COM_5FTYPE),
  C_lexique_table_entry ("ISR_TYPE", 8, goil_lexique_1_ISR_5FTYPE),
  C_lexique_table_entry ("IPDU_TYPE", 9, goil_lexique_1_IPDU_5FTYPE),
  C_lexique_table_entry ("TASK_TYPE", 9, goil_lexique_1_TASK_5FTYPE),
  C_lexique_table_entry ("ALARM_TYPE", 10, goil_lexique_1_ALARM_5FTYPE),
  C_lexique_table_entry ("EVENT_TYPE", 10, goil_lexique_1_EVENT_5FTYPE),
  C_lexique_table_entry ("APPMODE_TYPE", 12, goil_lexique_1_APPMODE_5FTYPE),
  C_lexique_table_entry ("COUNTER_TYPE", 12, goil_lexique_1_COUNTER_5FTYPE),
  C_lexique_table_entry ("MESSAGE_TYPE", 12, goil_lexique_1_MESSAGE_5FTYPE),
  C_lexique_table_entry ("RESOURCE_TYPE", 13, goil_lexique_1_RESOURCE_5FTYPE)
} ;

sint16 goil_lexique::search_into_objectRefType (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_objectRefType, goil_lexique_table_size_objectRefType) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'oilDefinitions'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_oilDefinitions = 1 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_oilDefinitions [1] = {
  C_lexique_table_entry ("IMPLEMENTATION", 14, goil_lexique_1_IMPLEMENTATION)
} ;

sint16 goil_lexique::search_into_oilDefinitions (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_oilDefinitions, goil_lexique_table_size_oilDefinitions) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'oilVersion'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_oilVersion = 1 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_oilVersion [1] = {
  C_lexique_table_entry ("OIL_VERSION", 11, goil_lexique_1_OIL_5FVERSION)
} ;

sint16 goil_lexique::search_into_oilVersion (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_oilVersion, goil_lexique_table_size_oilVersion) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'resource_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_resource_attributes = 5 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_resource_attributes [5] = {
  C_lexique_table_entry ("LINKED", 6, goil_lexique_1_LINKED),
  C_lexique_table_entry ("INTERNAL", 8, goil_lexique_1_INTERNAL),
  C_lexique_table_entry ("STANDARD", 8, goil_lexique_1_STANDARD),
  C_lexique_table_entry ("LINKEDRESOURCE", 14, goil_lexique_1_LINKEDRESOURCE),
  C_lexique_table_entry ("RESOURCEPROPERTY", 16, goil_lexique_1_RESOURCEPROPERTY)
} ;

sint16 goil_lexique::search_into_resource_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_resource_attributes, goil_lexique_table_size_resource_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'scheduling'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_scheduling = 2 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_scheduling [2] = {
  C_lexique_table_entry ("NON", 3, goil_lexique_1_NON),
  C_lexique_table_entry ("FULL", 4, goil_lexique_1_FULL)
} ;

sint16 goil_lexique::search_into_scheduling (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_scheduling, goil_lexique_table_size_scheduling) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'task_attributes'                      *
//                                                                           *
//---------------------------------------------------------------------------*

const sint16 goil_lexique::goil_lexique_table_size_task_attributes = 4 ;

const C_lexique_table_entry goil_lexique::goil_lexique_table_for_task_attributes [4] = {
  C_lexique_table_entry ("PRIORITY", 8, goil_lexique_1_PRIORITY),
  C_lexique_table_entry ("SCHEDULE", 8, goil_lexique_1_SCHEDULE),
  C_lexique_table_entry ("AUTOSTART", 9, goil_lexique_1_AUTOSTART),
  C_lexique_table_entry ("ACTIVATION", 10, goil_lexique_1_ACTIVATION)
} ;

sint16 goil_lexique::search_into_task_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, goil_lexique_table_for_task_attributes, goil_lexique_table_size_task_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Get next token : method 'parseLexicalToken'                 *
//                                                                           *
//---------------------------------------------------------------------------*

C_String goil_lexique::
getCurrentTokenString (void) const {
  C_String s ;
  switch (mCurrentTokenCode) {
  case  goil_lexique_1_:
    s << "$$" ;
    break ;
  case  goil_lexique_1_OIL_5FVERSION:
    s << '$'
      << "OIL_VERSION"
      << '$' ;
    break;
  case  goil_lexique_1_IMPLEMENTATION:
    s << '$'
      << "IMPLEMENTATION"
      << '$' ;
    break;
  case  goil_lexique_1_OS:
    s << '$'
      << "OS"
      << '$' ;
    break;
  case  goil_lexique_1_TASK:
    s << '$'
      << "TASK"
      << '$' ;
    break;
  case  goil_lexique_1_COUNTER:
    s << '$'
      << "COUNTER"
      << '$' ;
    break;
  case  goil_lexique_1_ALARM:
    s << '$'
      << "ALARM"
      << '$' ;
    break;
  case  goil_lexique_1_RESOURCE:
    s << '$'
      << "RESOURCE"
      << '$' ;
    break;
  case  goil_lexique_1_EVENT:
    s << '$'
      << "EVENT"
      << '$' ;
    break;
  case  goil_lexique_1_ISR:
    s << '$'
      << "ISR"
      << '$' ;
    break;
  case  goil_lexique_1_MESSAGE:
    s << '$'
      << "MESSAGE"
      << '$' ;
    break;
  case  goil_lexique_1_COM:
    s << '$'
      << "COM"
      << '$' ;
    break;
  case  goil_lexique_1_NM:
    s << '$'
      << "NM"
      << '$' ;
    break;
  case  goil_lexique_1_APPMODE:
    s << '$'
      << "APPMODE"
      << '$' ;
    break;
  case  goil_lexique_1_IPDU:
    s << '$'
      << "IPDU"
      << '$' ;
    break;
  case  goil_lexique_1_CPU:
    s << '$'
      << "CPU"
      << '$' ;
    break;
  case  goil_lexique_1_UINT32:
    s << '$'
      << "UINT32"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_INT32:
    s << '$'
      << "INT32"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_UINT64:
    s << '$'
      << "UINT64"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_INT64:
    s << '$'
      << "INT64"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_FLOAT:
    s << '$'
      << "FLOAT"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_ENUM:
    s << '$'
      << "ENUM"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_STRING:
    s << '$'
      << "STRING"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_BOOLEAN:
    s << '$'
      << "BOOLEAN"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1_WITH_5FAUTO:
    s << '$'
      << "WITH_AUTO"
      << '$' ;
    break;
  case  goil_lexique_1_NO_5FDEFAULT:
    s << '$'
      << "NO_DEFAULT"
      << '$' ;
    break;
  case  goil_lexique_1_AUTO:
    s << '$'
      << "AUTO"
      << '$' ;
    break;
  case  goil_lexique_1_MASK:
    s << '$'
      << "MASK"
      << '$' ;
    break;
  case  goil_lexique_1_CATEGORY:
    s << '$'
      << "CATEGORY"
      << '$' ;
    break;
  case  goil_lexique_1_OS_5FTYPE:
    s << '$'
      << "OS_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_TASK_5FTYPE:
    s << '$'
      << "TASK_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_COUNTER_5FTYPE:
    s << '$'
      << "COUNTER_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_ALARM_5FTYPE:
    s << '$'
      << "ALARM_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_RESOURCE_5FTYPE:
    s << '$'
      << "RESOURCE_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_EVENT_5FTYPE:
    s << '$'
      << "EVENT_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_ISR_5FTYPE:
    s << '$'
      << "ISR_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_MESSAGE_5FTYPE:
    s << '$'
      << "MESSAGE_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_COM_5FTYPE:
    s << '$'
      << "COM_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_NM_5FTYPE:
    s << '$'
      << "NM_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_APPMODE_5FTYPE:
    s << '$'
      << "APPMODE_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_IPDU_5FTYPE:
    s << '$'
      << "IPDU_TYPE"
      << '$' ;
    break;
  case  goil_lexique_1_PRIORITY:
    s << '$'
      << "PRIORITY"
      << '$' ;
    break;
  case  goil_lexique_1_SCHEDULE:
    s << '$'
      << "SCHEDULE"
      << '$' ;
    break;
  case  goil_lexique_1_ACTIVATION:
    s << '$'
      << "ACTIVATION"
      << '$' ;
    break;
  case  goil_lexique_1_AUTOSTART:
    s << '$'
      << "AUTOSTART"
      << '$' ;
    break;
  case  goil_lexique_1_MAXALLOWEDVALUE:
    s << '$'
      << "MAXALLOWEDVALUE"
      << '$' ;
    break;
  case  goil_lexique_1_TICKSPERBASE:
    s << '$'
      << "TICKSPERBASE"
      << '$' ;
    break;
  case  goil_lexique_1_MINCYCLE:
    s << '$'
      << "MINCYCLE"
      << '$' ;
    break;
  case  goil_lexique_1_ACTION:
    s << '$'
      << "ACTION"
      << '$' ;
    break;
  case  goil_lexique_1_SETEVENT:
    s << '$'
      << "SETEVENT"
      << '$' ;
    break;
  case  goil_lexique_1_ACTIVATETASK:
    s << '$'
      << "ACTIVATETASK"
      << '$' ;
    break;
  case  goil_lexique_1_ALARMCALLBACK:
    s << '$'
      << "ALARMCALLBACK"
      << '$' ;
    break;
  case  goil_lexique_1_ALARMCALLBACKNAME:
    s << '$'
      << "ALARMCALLBACKNAME"
      << '$' ;
    break;
  case  goil_lexique_1_ALARMTIME:
    s << '$'
      << "ALARMTIME"
      << '$' ;
    break;
  case  goil_lexique_1_CYCLETIME:
    s << '$'
      << "CYCLETIME"
      << '$' ;
    break;
  case  goil_lexique_1_RESOURCEPROPERTY:
    s << '$'
      << "RESOURCEPROPERTY"
      << '$' ;
    break;
  case  goil_lexique_1_STANDARD:
    s << '$'
      << "STANDARD"
      << '$' ;
    break;
  case  goil_lexique_1_LINKED:
    s << '$'
      << "LINKED"
      << '$' ;
    break;
  case  goil_lexique_1_LINKEDRESOURCE:
    s << '$'
      << "LINKEDRESOURCE"
      << '$' ;
    break;
  case  goil_lexique_1_INTERNAL:
    s << '$'
      << "INTERNAL"
      << '$' ;
    break;
  case  goil_lexique_1_NON:
    s << '$'
      << "NON"
      << '$' ;
    break;
  case  goil_lexique_1_FULL:
    s << '$'
      << "FULL"
      << '$' ;
    break;
  case  goil_lexique_1_FALSE:
    s << '$'
      << "FALSE"
      << '$' ;
    break;
  case  goil_lexique_1_TRUE:
    s << '$'
      << "TRUE"
      << '$' ;
    break;
  case  goil_lexique_1_idf:
    s << '$'
      << "idf"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (att_token) ;
    break;
  case  goil_lexique_1__3B:
    s << '$'
      << ";"
      << '$' ;
    break;
  case  goil_lexique_1__3A:
    s << '$'
      << ":"
      << '$' ;
    break;
  case  goil_lexique_1__3D:
    s << '$'
      << "="
      << '$' ;
    break;
  case  goil_lexique_1__7B:
    s << '$'
      << "{"
      << '$' ;
    break;
  case  goil_lexique_1__7D:
    s << '$'
      << "}"
      << '$' ;
    break;
  case  goil_lexique_1__2E_2E:
    s << '$'
      << ".."
      << '$' ;
    break;
  case  goil_lexique_1__5B:
    s << '$'
      << "["
      << '$' ;
    break;
  case  goil_lexique_1__5D:
    s << '$'
      << "]"
      << '$' ;
    break;
  case  goil_lexique_1__2C:
    s << '$'
      << ","
      << '$' ;
    break;
  case  goil_lexique_1__2E:
    s << '$'
      << "."
      << '$' ;
    break;
  case  goil_lexique_1_string:
    s << '$'
      << "string"
      << '$' ;
    s << ' ' ;
    s.writeCstringConstant (a_string) ;
    break;
  case  goil_lexique_1_uint_5Fnumber:
    s << '$'
      << "uint_number"
      << '$' ;
    s << ' ' << integerNumber ;
    break;
  case  goil_lexique_1_float_5Fnumber:
    s << '$'
      << "float_number"
      << '$' ;
    s << ' ' << floatNumber ;
    break;
  case  goil_lexique_1_set_5Fstart_5Fuint_5Fnumber:
    s << '$'
      << "set_start_uint_number"
      << '$' ;
    s << ' ' << integerNumber ;
    break;
  default:
    break ;
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Get next token : method 'parseLexicalToken'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_lexique::
parseLexicalToken (const bool inPropagateLexicalErrorException) {
  bool loop_ = true ;
  mCurrentTokenCode = -1 ;
  while (mCurrentTokenCode < 0) {
    a_string.clear () ;
    att_token.clear () ;
    floatNumber = 0.0 ;
    integerNumber = 0 ;
    number.clear () ;
    mCurrentTokenStartLocation = currentLocation () ;
    try{
      if (testForInputString ("//", 2)) {
        do {
          if (testForInputChar ('\x1', '\t') ||
              testForInputChar ('\v') ||
              testForInputChar ('\f') ||
              testForInputChar ('\xE', '\xFF')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
      }else if (testForInputChar ('a', 'z') ||
          testForInputChar ('A', 'Z')) {
        do {
          scanner_action_enterCharacterIntoString (att_token, previousChar ()) ;
          if (testForInputChar ('a', 'z') ||
              testForInputChar ('A', 'Z') ||
              testForInputChar ('_') ||
              testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        mCurrentTokenCode = search_into_oilVersion (att_token) ;
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_oilDefinitions (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_objList (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_dataTypes (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_miscSpecifiers (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_objectRefType (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_task_attributes (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_counter_attributes (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_alarm_attributes (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_resource_attributes (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_scheduling (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = search_into_boolean (att_token) ;
        }
        if (mCurrentTokenCode == -1) {
          mCurrentTokenCode = goil_lexique_1_idf ;
        }
      }else if (testForInputString ("..", 2)) {
        mCurrentTokenCode = goil_lexique_1__2E_2E ;
      }else if (testForInputString (";", 1)) {
        mCurrentTokenCode = goil_lexique_1__3B ;
      }else if (testForInputString (":", 1)) {
        mCurrentTokenCode = goil_lexique_1__3A ;
      }else if (testForInputString ("=", 1)) {
        mCurrentTokenCode = goil_lexique_1__3D ;
      }else if (testForInputString ("{", 1)) {
        mCurrentTokenCode = goil_lexique_1__7B ;
      }else if (testForInputString ("}", 1)) {
        mCurrentTokenCode = goil_lexique_1__7D ;
      }else if (testForInputString ("[", 1)) {
        mCurrentTokenCode = goil_lexique_1__5B ;
      }else if (testForInputString ("]", 1)) {
        mCurrentTokenCode = goil_lexique_1__5D ;
      }else if (testForInputString (",", 1)) {
        mCurrentTokenCode = goil_lexique_1__2C ;
      }else if (testForInputString (".", 1)) {
        mCurrentTokenCode = goil_lexique_1__2E ;
      }else if (testForInputChar ('\x1', ' ')) {
      }else if (testForInputChar ('\"')) {
        do {
          if (testForInputChar (' ', '!') ||
              testForInputChar ('#', '\xFF')) {
            scanner_action_enterCharacterIntoString (a_string, previousChar ()) ;
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('\"')) {
          mCurrentTokenCode = goil_lexique_1_string ;
        }else{
          lexicalError (gErrorMessage_2 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputChar ('0', '9')) {
        do {
          scanner_action_enterCharacterIntoString (number, previousChar ()) ;
          scanner_action_enterDigitIntoUlong (integerNumber, previousChar (), gErrorMessage_1, gErrorMessage_0) ;
          if (testForInputChar ('0', '9')) {
          }else{
            loop_ = false ;
          }
        }while (loop_) ;
        loop_ = true ;
        if (testForInputChar ('.')) {
          if (testForInputChar ('.')) {
            mCurrentTokenCode = goil_lexique_1_set_5Fstart_5Fuint_5Fnumber ;
          }else{
            do {
              scanner_action_enterCharacterIntoString (number, previousChar ()) ;
              if (testForInputChar ('0', '9')) {
              }else{
                loop_ = false ;
              }
            }while (loop_) ;
            loop_ = true ;
            scanner_action_convertStringToDouble (number, floatNumber, gErrorMessage_3) ;
            mCurrentTokenCode = goil_lexique_1_float_5Fnumber ;
          }
        }else{
          mCurrentTokenCode = goil_lexique_1_uint_5Fnumber ;
        }
      }else if (testForInputChar ('\0')) { // End of source text ? 
        mCurrentTokenCode = goil_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      mCurrentTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      if (inPropagateLexicalErrorException) {
        throw ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 goil_lexique::getStylesCount (void) {
  return 1 ;
}

//---------------------------------------------------------------------------*

const char * goil_lexique::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [2] = {"Default style", NULL} ;
  return (inIndex < 1) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * goil_lexique::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [2] = {"", NULL} ;
  return (inIndex < 1) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 goil_lexique::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [79] = {0,
    0 /* goil_lexique_1_OIL_5FVERSION */,
    0 /* goil_lexique_1_IMPLEMENTATION */,
    0 /* goil_lexique_1_OS */,
    0 /* goil_lexique_1_TASK */,
    0 /* goil_lexique_1_COUNTER */,
    0 /* goil_lexique_1_ALARM */,
    0 /* goil_lexique_1_RESOURCE */,
    0 /* goil_lexique_1_EVENT */,
    0 /* goil_lexique_1_ISR */,
    0 /* goil_lexique_1_MESSAGE */,
    0 /* goil_lexique_1_COM */,
    0 /* goil_lexique_1_NM */,
    0 /* goil_lexique_1_APPMODE */,
    0 /* goil_lexique_1_IPDU */,
    0 /* goil_lexique_1_CPU */,
    0 /* goil_lexique_1_UINT32 */,
    0 /* goil_lexique_1_INT32 */,
    0 /* goil_lexique_1_UINT64 */,
    0 /* goil_lexique_1_INT64 */,
    0 /* goil_lexique_1_FLOAT */,
    0 /* goil_lexique_1_ENUM */,
    0 /* goil_lexique_1_STRING */,
    0 /* goil_lexique_1_BOOLEAN */,
    0 /* goil_lexique_1_WITH_5FAUTO */,
    0 /* goil_lexique_1_NO_5FDEFAULT */,
    0 /* goil_lexique_1_AUTO */,
    0 /* goil_lexique_1_MASK */,
    0 /* goil_lexique_1_CATEGORY */,
    0 /* goil_lexique_1_OS_5FTYPE */,
    0 /* goil_lexique_1_TASK_5FTYPE */,
    0 /* goil_lexique_1_COUNTER_5FTYPE */,
    0 /* goil_lexique_1_ALARM_5FTYPE */,
    0 /* goil_lexique_1_RESOURCE_5FTYPE */,
    0 /* goil_lexique_1_EVENT_5FTYPE */,
    0 /* goil_lexique_1_ISR_5FTYPE */,
    0 /* goil_lexique_1_MESSAGE_5FTYPE */,
    0 /* goil_lexique_1_COM_5FTYPE */,
    0 /* goil_lexique_1_NM_5FTYPE */,
    0 /* goil_lexique_1_APPMODE_5FTYPE */,
    0 /* goil_lexique_1_IPDU_5FTYPE */,
    0 /* goil_lexique_1_PRIORITY */,
    0 /* goil_lexique_1_SCHEDULE */,
    0 /* goil_lexique_1_ACTIVATION */,
    0 /* goil_lexique_1_AUTOSTART */,
    0 /* goil_lexique_1_MAXALLOWEDVALUE */,
    0 /* goil_lexique_1_TICKSPERBASE */,
    0 /* goil_lexique_1_MINCYCLE */,
    0 /* goil_lexique_1_ACTION */,
    0 /* goil_lexique_1_SETEVENT */,
    0 /* goil_lexique_1_ACTIVATETASK */,
    0 /* goil_lexique_1_ALARMCALLBACK */,
    0 /* goil_lexique_1_ALARMCALLBACKNAME */,
    0 /* goil_lexique_1_ALARMTIME */,
    0 /* goil_lexique_1_CYCLETIME */,
    0 /* goil_lexique_1_RESOURCEPROPERTY */,
    0 /* goil_lexique_1_STANDARD */,
    0 /* goil_lexique_1_LINKED */,
    0 /* goil_lexique_1_LINKEDRESOURCE */,
    0 /* goil_lexique_1_INTERNAL */,
    0 /* goil_lexique_1_NON */,
    0 /* goil_lexique_1_FULL */,
    0 /* goil_lexique_1_FALSE */,
    0 /* goil_lexique_1_TRUE */,
    0 /* goil_lexique_1_idf */,
    0 /* goil_lexique_1__3B */,
    0 /* goil_lexique_1__3A */,
    0 /* goil_lexique_1__3D */,
    0 /* goil_lexique_1__7B */,
    0 /* goil_lexique_1__7D */,
    0 /* goil_lexique_1__2E_2E */,
    0 /* goil_lexique_1__5B */,
    0 /* goil_lexique_1__5D */,
    0 /* goil_lexique_1__2C */,
    0 /* goil_lexique_1__2E */,
    0 /* goil_lexique_1_string */,
    0 /* goil_lexique_1_uint_5Fnumber */,
    0 /* goil_lexique_1_float_5Fnumber */,
    0 /* goil_lexique_1_set_5Fstart_5Fuint_5Fnumber */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

