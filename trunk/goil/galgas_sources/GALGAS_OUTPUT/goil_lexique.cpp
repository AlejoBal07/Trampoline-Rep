//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_lexique.cpp'                           *
//                    Generated by version 1.8.3 [debug]                     *
//                       june 11th, 2009, at 9h36'22"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 491
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <ctype.h>
#include <string.h>

#include "utilities/MF_MemoryControl.h"
#include "goil_lexique.h"

#include "strings/unicode_character.h"
#include "galgas/scanner_actions.h"
#ifndef DO_NOT_GENERATE_CHECKINGS
  #define LINE_AND_SOURCE_FILE sourceText ()->sourceFileName ().cString (HERE), lineNumber ()
  #define COMMA_LINE_AND_SOURCE_FILE , LINE_AND_SOURCE_FILE
#else
  #define LINE_AND_SOURCE_FILE
  #define COMMA_LINE_AND_SOURCE_FILE
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                               Constructors                                *
//                                                                           *
//---------------------------------------------------------------------------*

cTokenFor_goil_lexique::cTokenFor_goil_lexique (void) :
att_token (),
a_string (),
integerNumber (),
floatNumber (),
number () {
}

//---------------------------------------------------------------------------*

goil_lexique::
goil_lexique (C_Compiler * inCallerCompiler,
                const C_String & inDependencyFileExtension,
                const C_String & inDependencyFilePath,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceFileName
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inDependencyFileExtension, inDependencyFilePath, inParametersPtr, inSourceFileName COMMA_THERE) {
}

//---------------------------------------------------------------------------*

goil_lexique::
goil_lexique (C_Compiler * inCallerCompiler,
                C_galgas_io * inParametersPtr,
                const C_String & inSourceString,
                const C_String & inStringForError
                COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inParametersPtr, inSourceString, inStringForError COMMA_THERE) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Lexical error message list                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Message 0
static const utf32 gErrorMessage_0 [] = {
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;
//--- Message 1
static const utf32 gErrorMessage_1 [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;
//--- Message 2
static const utf32 gErrorMessage_2 [] = {
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;
//--- Message 3
static const utf32 gErrorMessage_3 [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;
//--- Message 4
static const utf32 gErrorMessage_4 [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Syntax error messages                            *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Syntax error message for terminal '$APP_SRC$' :
static const utf32 gSyntaxErrorMessage_APP_5FSRC [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CFLAGS$' :
static const utf32 gSyntaxErrorMessage_CFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ASFLAGS$' :
static const utf32 gSyntaxErrorMessage_ASFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LDFLAGS$' :
static const utf32 gSyntaxErrorMessage_LDFLAGS [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APP_NAME$' :
static const utf32 gSyntaxErrorMessage_APP_5FNAME [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRAMPOLINE_BASE_PATH$' :
static const utf32 gSyntaxErrorMessage_TRAMPOLINE_5FBASE_5FPATH [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('a'),
  TO_UNICODE ('k'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OIL_VERSION$' :
static const utf32 gSyntaxErrorMessage_OIL_5FVERSION [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IMPLEMENTATION$' :
static const utf32 gSyntaxErrorMessage_IMPLEMENTATION [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OS$' :
static const utf32 gSyntaxErrorMessage_OS [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TASK$' :
static const utf32 gSyntaxErrorMessage_TASK [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COUNTER$' :
static const utf32 gSyntaxErrorMessage_COUNTER [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARM$' :
static const utf32 gSyntaxErrorMessage_ALARM [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCE$' :
static const utf32 gSyntaxErrorMessage_RESOURCE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EVENT$' :
static const utf32 gSyntaxErrorMessage_EVENT [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ISR$' :
static const utf32 gSyntaxErrorMessage_ISR [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MESSAGE$' :
static const utf32 gSyntaxErrorMessage_MESSAGE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COM$' :
static const utf32 gSyntaxErrorMessage_COM [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NM$' :
static const utf32 gSyntaxErrorMessage_NM [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APPMODE$' :
static const utf32 gSyntaxErrorMessage_APPMODE [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDU$' :
static const utf32 gSyntaxErrorMessage_IPDU [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CPU$' :
static const utf32 gSyntaxErrorMessage_CPU [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UINT32$' :
static const utf32 gSyntaxErrorMessage_UINT32 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INT32$' :
static const utf32 gSyntaxErrorMessage_INT32 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UINT64$' :
static const utf32 gSyntaxErrorMessage_UINT64 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INT64$' :
static const utf32 gSyntaxErrorMessage_INT64 [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FLOAT$' :
static const utf32 gSyntaxErrorMessage_FLOAT [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ENUM$' :
static const utf32 gSyntaxErrorMessage_ENUM [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STRING$' :
static const utf32 gSyntaxErrorMessage_STRING [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BOOLEAN$' :
static const utf32 gSyntaxErrorMessage_BOOLEAN [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$WITH_AUTO$' :
static const utf32 gSyntaxErrorMessage_WITH_5FAUTO [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NO_DEFAULT$' :
static const utf32 gSyntaxErrorMessage_NO_5FDEFAULT [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$AUTO$' :
static const utf32 gSyntaxErrorMessage_AUTO [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASK$' :
static const utf32 gSyntaxErrorMessage_MASK [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CATEGORY$' :
static const utf32 gSyntaxErrorMessage_CATEGORY [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OS_TYPE$' :
static const utf32 gSyntaxErrorMessage_OS_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TASK_TYPE$' :
static const utf32 gSyntaxErrorMessage_TASK_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COUNTER_TYPE$' :
static const utf32 gSyntaxErrorMessage_COUNTER_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARM_TYPE$' :
static const utf32 gSyntaxErrorMessage_ALARM_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCE_TYPE$' :
static const utf32 gSyntaxErrorMessage_RESOURCE_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EVENT_TYPE$' :
static const utf32 gSyntaxErrorMessage_EVENT_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ISR_TYPE$' :
static const utf32 gSyntaxErrorMessage_ISR_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MESSAGE_TYPE$' :
static const utf32 gSyntaxErrorMessage_MESSAGE_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COM_TYPE$' :
static const utf32 gSyntaxErrorMessage_COM_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NM_TYPE$' :
static const utf32 gSyntaxErrorMessage_NM_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APPMODE_TYPE$' :
static const utf32 gSyntaxErrorMessage_APPMODE_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDU_TYPE$' :
static const utf32 gSyntaxErrorMessage_IPDU_5FTYPE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STATUS$' :
static const utf32 gSyntaxErrorMessage_STATUS [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXTENDED$' :
static const utf32 gSyntaxErrorMessage_EXTENDED [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STARTUPHOOK$' :
static const utf32 gSyntaxErrorMessage_STARTUPHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ERRORHOOK$' :
static const utf32 gSyntaxErrorMessage_ERRORHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SHUTDOWNHOOK$' :
static const utf32 gSyntaxErrorMessage_SHUTDOWNHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('H'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PRETASKHOOK$' :
static const utf32 gSyntaxErrorMessage_PRETASKHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$POSTTASKHOOK$' :
static const utf32 gSyntaxErrorMessage_POSTTASKHOOK [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USEGETSERVICEID$' :
static const utf32 gSyntaxErrorMessage_USEGETSERVICEID [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USEPARAMETERACCESS$' :
static const utf32 gSyntaxErrorMessage_USEPARAMETERACCESS [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USERESSCHEDULER$' :
static const utf32 gSyntaxErrorMessage_USERESSCHEDULER [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SYSTEM_CALL$' :
static const utf32 gSyntaxErrorMessage_SYSTEM_5FCALL [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE$' :
static const utf32 gSyntaxErrorMessage_TRACE [] = {
  TO_UNICODE ('o'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FILE$' :
static const utf32 gSyntaxErrorMessage_FILE [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$METHOD$' :
static const utf32 gSyntaxErrorMessage_METHOD [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FORMAT$' :
static const utf32 gSyntaxErrorMessage_FORMAT [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_TASK$' :
static const utf32 gSyntaxErrorMessage_TRACE_5FTASK [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_ISR$' :
static const utf32 gSyntaxErrorMessage_TRACE_5FISR [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_RESOURCE$' :
static const utf32 gSyntaxErrorMessage_TRACE_5FRESOURCE [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_ALARM$' :
static const utf32 gSyntaxErrorMessage_TRACE_5FALARM [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRACE_USER$' :
static const utf32 gSyntaxErrorMessage_TRACE_5FUSER [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DESCRIPTION$' :
static const utf32 gSyntaxErrorMessage_DESCRIPTION [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PRIORITY$' :
static const utf32 gSyntaxErrorMessage_PRIORITY [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCHEDULE$' :
static const utf32 gSyntaxErrorMessage_SCHEDULE [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACTIVATION$' :
static const utf32 gSyntaxErrorMessage_ACTIVATION [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$AUTOSTART$' :
static const utf32 gSyntaxErrorMessage_AUTOSTART [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE ('k'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXALLOWEDVALUE$' :
static const utf32 gSyntaxErrorMessage_MAXALLOWEDVALUE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TICKSPERBASE$' :
static const utf32 gSyntaxErrorMessage_TICKSPERBASE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MINCYCLE$' :
static const utf32 gSyntaxErrorMessage_MINCYCLE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TYPE$' :
static const utf32 gSyntaxErrorMessage_TYPE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UNIT$' :
static const utf32 gSyntaxErrorMessage_UNIT [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACTION$' :
static const utf32 gSyntaxErrorMessage_ACTION [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SETEVENT$' :
static const utf32 gSyntaxErrorMessage_SETEVENT [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACTIVATETASK$' :
static const utf32 gSyntaxErrorMessage_ACTIVATETASK [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARMCALLBACK$' :
static const utf32 gSyntaxErrorMessage_ALARMCALLBACK [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARMCALLBACKNAME$' :
static const utf32 gSyntaxErrorMessage_ALARMCALLBACKNAME [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALARMTIME$' :
static const utf32 gSyntaxErrorMessage_ALARMTIME [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CYCLETIME$' :
static const utf32 gSyntaxErrorMessage_CYCLETIME [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INCREMENTCOUNTER$' :
static const utf32 gSyntaxErrorMessage_INCREMENTCOUNTER [] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCEPROPERTY$' :
static const utf32 gSyntaxErrorMessage_RESOURCEPROPERTY [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STANDARD$' :
static const utf32 gSyntaxErrorMessage_STANDARD [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINKED$' :
static const utf32 gSyntaxErrorMessage_LINKED [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINKEDRESOURCE$' :
static const utf32 gSyntaxErrorMessage_LINKEDRESOURCE [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INTERNAL$' :
static const utf32 gSyntaxErrorMessage_INTERNAL [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MESSAGEPROPERTY$' :
static const utf32 gSyntaxErrorMessage_MESSAGEPROPERTY [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NOTIFICATION$' :
static const utf32 gSyntaxErrorMessage_NOTIFICATION [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NOTIFICATIONERROR$' :
static const utf32 gSyntaxErrorMessage_NOTIFICATIONERROR [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_STATIC_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5FSTATIC_5FINTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_STATIC_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5FSTATIC_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_DYNAMIC_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5FDYNAMIC_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_ZERO_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5FZERO_5FINTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SEND_ZERO_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_SEND_5FZERO_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FZERO_5FINTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FZERO_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_UNQUEUED_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FINTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_QUEUED_INTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FINTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_UNQUEUED_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_QUEUED_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_DYNAMIC_EXTERNAL$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FDYNAMIC_5FEXTERNAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVE_ZERO_SENDERS$' :
static const utf32 gSyntaxErrorMessage_RECEIVE_5FZERO_5FSENDERS [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CDATATYPE$' :
static const utf32 gSyntaxErrorMessage_CDATATYPE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SENDINGMESSAGE$' :
static const utf32 gSyntaxErrorMessage_SENDINGMESSAGE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NONE$' :
static const utf32 gSyntaxErrorMessage_NONE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMCALLBACK$' :
static const utf32 gSyntaxErrorMessage_COMCALLBACK [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMCALLBACKNAME$' :
static const utf32 gSyntaxErrorMessage_COMCALLBACKNAME [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INMCALLBACK$' :
static const utf32 gSyntaxErrorMessage_INMCALLBACK [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CALLBACKROUTINENAME$' :
static const utf32 gSyntaxErrorMessage_CALLBACKROUTINENAME [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MONITOREDIPDU$' :
static const utf32 gSyntaxErrorMessage_MONITOREDIPDU [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRANSFERPROPERTY$' :
static const utf32 gSyntaxErrorMessage_TRANSFERPROPERTY [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRIGGERED$' :
static const utf32 gSyntaxErrorMessage_TRIGGERED [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PENDING$' :
static const utf32 gSyntaxErrorMessage_PENDING [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NETWORKMESSAGE$' :
static const utf32 gSyntaxErrorMessage_NETWORKMESSAGE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FILTER$' :
static const utf32 gSyntaxErrorMessage_FILTER [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ALWAYS$' :
static const utf32 gSyntaxErrorMessage_ALWAYS [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEVER$' :
static const utf32 gSyntaxErrorMessage_NEVER [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWEQUALSX$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWEQUALSX [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWDIFFERSX$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWDIFFERSX [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISEQUAL$' :
static const utf32 gSyntaxErrorMessage_NEWISEQUAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISDIFFERENT$' :
static const utf32 gSyntaxErrorMessage_NEWISDIFFERENT [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWEQUALSMASKEDOLD$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWEQUALSMASKEDOLD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MASKEDNEWDIFFERSMASKEDOLD$' :
static const utf32 gSyntaxErrorMessage_MASKEDNEWDIFFERSMASKEDOLD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISWITHIN$' :
static const utf32 gSyntaxErrorMessage_NEWISWITHIN [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISOUTSIDE$' :
static const utf32 gSyntaxErrorMessage_NEWISOUTSIDE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISGREATER$' :
static const utf32 gSyntaxErrorMessage_NEWISGREATER [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISLESSOREQUAL$' :
static const utf32 gSyntaxErrorMessage_NEWISLESSOREQUAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISLESS$' :
static const utf32 gSyntaxErrorMessage_NEWISLESS [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NEWISGREATEROREQUAL$' :
static const utf32 gSyntaxErrorMessage_NEWISGREATEROREQUAL [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ONEEVERYN$' :
static const utf32 gSyntaxErrorMessage_ONEEVERYN [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MIN$' :
static const utf32 gSyntaxErrorMessage_MIN [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX$' :
static const utf32 gSyntaxErrorMessage_MAX [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$X$' :
static const utf32 gSyntaxErrorMessage_X [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('X'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PERIOD$' :
static const utf32 gSyntaxErrorMessage_PERIOD [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OFFSET$' :
static const utf32 gSyntaxErrorMessage_OFFSET [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NETWORKORDERCALLOUT$' :
static const utf32 gSyntaxErrorMessage_NETWORKORDERCALLOUT [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CPUORDERCALLOUT$' :
static const utf32 gSyntaxErrorMessage_CPUORDERCALLOUT [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$INITIALVALUE$' :
static const utf32 gSyntaxErrorMessage_INITIALVALUE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$QUEUESIZE$' :
static const utf32 gSyntaxErrorMessage_QUEUESIZE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LINK$' :
static const utf32 gSyntaxErrorMessage_LINK [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVEMESSAGE$' :
static const utf32 gSyntaxErrorMessage_RECEIVEMESSAGE [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FLAG$' :
static const utf32 gSyntaxErrorMessage_FLAG [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FLAGNAME$' :
static const utf32 gSyntaxErrorMessage_FLAGNAME [] = {
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STATIC$' :
static const utf32 gSyntaxErrorMessage_STATIC [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DYNAMIC$' :
static const utf32 gSyntaxErrorMessage_DYNAMIC [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ZERO$' :
static const utf32 gSyntaxErrorMessage_ZERO [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SIZEINBITS$' :
static const utf32 gSyntaxErrorMessage_SIZEINBITS [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXSIZEINBITS$' :
static const utf32 gSyntaxErrorMessage_MAXSIZEINBITS [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BITORDERING$' :
static const utf32 gSyntaxErrorMessage_BITORDERING [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BIGENDIAN$' :
static const utf32 gSyntaxErrorMessage_BIGENDIAN [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LITTLEENDIAN$' :
static const utf32 gSyntaxErrorMessage_LITTLEENDIAN [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BITPOSITION$' :
static const utf32 gSyntaxErrorMessage_BITPOSITION [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DATAINTERPRETATION$' :
static const utf32 gSyntaxErrorMessage_DATAINTERPRETATION [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$UNSIGNEDINTEGER$' :
static const utf32 gSyntaxErrorMessage_UNSIGNEDINTEGER [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$BYTEARRAY$' :
static const utf32 gSyntaxErrorMessage_BYTEARRAY [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('B'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DIRECTION$' :
static const utf32 gSyntaxErrorMessage_DIRECTION [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SENT$' :
static const utf32 gSyntaxErrorMessage_SENT [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RECEIVED$' :
static const utf32 gSyntaxErrorMessage_RECEIVED [] = {
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('w'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('k'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE ('s'),
  TO_UNICODE ('a'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMTIMEBASE$' :
static const utf32 gSyntaxErrorMessage_COMTIMEBASE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMERRORHOOK$' :
static const utf32 gSyntaxErrorMessage_COMERRORHOOK [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMUSEGETSERVICEID$' :
static const utf32 gSyntaxErrorMessage_COMUSEGETSERVICEID [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMUSEPARAMETERACCESS$' :
static const utf32 gSyntaxErrorMessage_COMUSEPARAMETERACCESS [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMSTARTCOMEXTENSION$' :
static const utf32 gSyntaxErrorMessage_COMSTARTCOMEXTENSION [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMAPPMODE$' :
static const utf32 gSyntaxErrorMessage_COMAPPMODE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMSTATUS$' :
static const utf32 gSyntaxErrorMessage_COMSTATUS [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$USE$' :
static const utf32 gSyntaxErrorMessage_USE [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMEXTENDED$' :
static const utf32 gSyntaxErrorMessage_COMEXTENDED [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COMSTANDARD$' :
static const utf32 gSyntaxErrorMessage_COMSTANDARD [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDUPROPERTY$' :
static const utf32 gSyntaxErrorMessage_IPDUPROPERTY [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$IPDUCALLOUT$' :
static const utf32 gSyntaxErrorMessage_IPDUCALLOUT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LAYERUSED$' :
static const utf32 gSyntaxErrorMessage_LAYERUSED [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRANSMISSIONMODE$' :
static const utf32 gSyntaxErrorMessage_TRANSMISSIONMODE [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DIRECT$' :
static const utf32 gSyntaxErrorMessage_DIRECT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PERIODIC$' :
static const utf32 gSyntaxErrorMessage_PERIODIC [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MIXED$' :
static const utf32 gSyntaxErrorMessage_MIXED [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEOUT$' :
static const utf32 gSyntaxErrorMessage_TIMEOUT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FIRTSTIMEOUT$' :
static const utf32 gSyntaxErrorMessage_FIRTSTIMEOUT [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MINIMUMDELAYTIME$' :
static const utf32 gSyntaxErrorMessage_MINIMUMDELAYTIME [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEPERIOD$' :
static const utf32 gSyntaxErrorMessage_TIMEPERIOD [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEOFFSET$' :
static const utf32 gSyntaxErrorMessage_TIMEOFFSET [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('p'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NON$' :
static const utf32 gSyntaxErrorMessage_NON [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FULL$' :
static const utf32 gSyntaxErrorMessage_FULL [] = {
  TO_UNICODE ('s'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$FALSE$' :
static const utf32 gSyntaxErrorMessage_FALSE [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRUE$' :
static const utf32 gSyntaxErrorMessage_TRUE [] = {
  TO_UNICODE ('b'),
  TO_UNICODE ('o'),
  TO_UNICODE ('o'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PROTECTIONHOOK$' :
static const utf32 gSyntaxErrorMessage_PROTECTIONHOOK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCALABILITYCLASS$' :
static const utf32 gSyntaxErrorMessage_SCALABILITYCLASS [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$STACKMONITORING$' :
static const utf32 gSyntaxErrorMessage_STACKMONITORING [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMING_PROTECTION$' :
static const utf32 gSyntaxErrorMessage_TIMING_5FPROTECTION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ACCESSING_APPLICATION$' :
static const utf32 gSyntaxErrorMessage_ACCESSING_5FAPPLICATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC1$' :
static const utf32 gSyntaxErrorMessage_SC1 [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('1'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC2$' :
static const utf32 gSyntaxErrorMessage_SC2 [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('2'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC3$' :
static const utf32 gSyntaxErrorMessage_SC3 [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('3'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SC4$' :
static const utf32 gSyntaxErrorMessage_SC4 [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('4'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SCHEDULETABLE$' :
static const utf32 gSyntaxErrorMessage_SCHEDULETABLE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$APPLICATION$' :
static const utf32 gSyntaxErrorMessage_APPLICATION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('b'),
  TO_UNICODE ('j'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION$' :
static const utf32 gSyntaxErrorMessage_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('G'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SYNC_STRATEGY$' :
static const utf32 gSyntaxErrorMessage_SYNC_5FSTRATEGY [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_INCREASE$' :
static const utf32 gSyntaxErrorMessage_MAX_5FINCREASE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_DECREASE$' :
static const utf32 gSyntaxErrorMessage_MAX_5FDECREASE [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_INCREASE_ASYNC$' :
static const utf32 gSyntaxErrorMessage_MAX_5FINCREASE_5FASYNC [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAX_DECREASE_ASYNC$' :
static const utf32 gSyntaxErrorMessage_MAX_5FDECREASE_5FASYNC [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$PRECISION$' :
static const utf32 gSyntaxErrorMessage_PRECISION [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LENGTH$' :
static const utf32 gSyntaxErrorMessage_LENGTH [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$ABSOLUTE$' :
static const utf32 gSyntaxErrorMessage_ABSOLUTE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RELATIVE$' :
static const utf32 gSyntaxErrorMessage_RELATIVE [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SYNCHRON$' :
static const utf32 gSyntaxErrorMessage_SYNCHRON [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRUSTED$' :
static const utf32 gSyntaxErrorMessage_TRUSTED [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$HAS_RESTARTTASK$' :
static const utf32 gSyntaxErrorMessage_HAS_5FRESTARTTASK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESTARTTASK$' :
static const utf32 gSyntaxErrorMessage_RESTARTTASK [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TRUSTED_FUNCTION$' :
static const utf32 gSyntaxErrorMessage_TRUSTED_5FFUNCTION [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NAME$' :
static const utf32 gSyntaxErrorMessage_NAME [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXECUTIONBUDGET$' :
static const utf32 gSyntaxErrorMessage_EXECUTIONBUDGET [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('U'),
  TO_UNICODE ('D'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$EXECUTIONTIME$' :
static const utf32 gSyntaxErrorMessage_EXECUTIONTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$COUNTLIMIT$' :
static const utf32 gSyntaxErrorMessage_COUNTLIMIT [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMEFRAME$' :
static const utf32 gSyntaxErrorMessage_TIMEFRAME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXOSINTERRUPTLOCKTIME$' :
static const utf32 gSyntaxErrorMessage_MAXOSINTERRUPTLOCKTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXALLINTERRUPTLOCKTIME$' :
static const utf32 gSyntaxErrorMessage_MAXALLINTERRUPTLOCKTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$LOCKINGTIME$' :
static const utf32 gSyntaxErrorMessage_LOCKINGTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$RESOURCELOCK$' :
static const utf32 gSyntaxErrorMessage_RESOURCELOCK [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$MAXRESOURCELOCKTIME$' :
static const utf32 gSyntaxErrorMessage_MAXRESOURCELOCKTIME [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SMOOTH$' :
static const utf32 gSyntaxErrorMessage_SMOOTH [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('y'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$HARD$' :
static const utf32 gSyntaxErrorMessage_HARD [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('y'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('z'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TICKS$' :
static const utf32 gSyntaxErrorMessage_TICKS [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NANOSECONDS$' :
static const utf32 gSyntaxErrorMessage_NANOSECONDS [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SOFTWARE$' :
static const utf32 gSyntaxErrorMessage_SOFTWARE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$HARDWARE$' :
static const utf32 gSyntaxErrorMessage_HARDWARE [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$OSINTERNAL$' :
static const utf32 gSyntaxErrorMessage_OSINTERNAL [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$GPT$' :
static const utf32 gSyntaxErrorMessage_GPT [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NS_PER_HW_TICK$' :
static const utf32 gSyntaxErrorMessage_NS_5FPER_5FHW_5FTICK [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('H'),
  TO_UNICODE ('W'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$GPTCHANNELNAME$' :
static const utf32 gSyntaxErrorMessage_GPTCHANNELNAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$DRIVER$' :
static const utf32 gSyntaxErrorMessage_DRIVER [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMECONSTANTS$' :
static const utf32 gSyntaxErrorMessage_TIMECONSTANTS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$TIMECONSTANT$' :
static const utf32 gSyntaxErrorMessage_TIMECONSTANT [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$NS$' :
static const utf32 gSyntaxErrorMessage_NS [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$CONSTNAME$' :
static const utf32 gSyntaxErrorMessage_CONSTNAME [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$SOURCE$' :
static const utf32 gSyntaxErrorMessage_SOURCE [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('S'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$comment$' :
static const utf32 gSyntaxErrorMessage_comment [] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$idf$' :
static const utf32 gSyntaxErrorMessage_idf [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$;$' :
static const utf32 gSyntaxErrorMessage__3B [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (';'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$:$' :
static const utf32 gSyntaxErrorMessage__3A [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (':'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$=$' :
static const utf32 gSyntaxErrorMessage__3D [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('='),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '${$' :
static const utf32 gSyntaxErrorMessage__7B [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('{'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$}$' :
static const utf32 gSyntaxErrorMessage__7D [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('}'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$..$' :
static const utf32 gSyntaxErrorMessage__2E_2E [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$[$' :
static const utf32 gSyntaxErrorMessage__5B [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('['),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$]$' :
static const utf32 gSyntaxErrorMessage__5D [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (']'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$,$' :
static const utf32 gSyntaxErrorMessage__2C [] = {
  TO_UNICODE ('\''),
  TO_UNICODE (','),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$.$' :
static const utf32 gSyntaxErrorMessage__2E [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('.'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$-$' :
static const utf32 gSyntaxErrorMessage__2D [] = {
  TO_UNICODE ('\''),
  TO_UNICODE ('-'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$string$' :
static const utf32 gSyntaxErrorMessage_string [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$g_string$' :
static const utf32 gSyntaxErrorMessage_g_5Fstring [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$uint_number$' :
static const utf32 gSyntaxErrorMessage_uint_5Fnumber [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$float_number$' :
static const utf32 gSyntaxErrorMessage_float_5Fnumber [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$set_start_uint_number$' :
static const utf32 gSyntaxErrorMessage_set_5Fstart_5Fuint_5Fnumber [] = {
  TO_UNICODE ('l'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('i'),
  TO_UNICODE ('g'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$include$' :
static const utf32 gSyntaxErrorMessage_include [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('\''),
  TO_UNICODE (0)
} ;

//--- Syntax error message for terminal '$command$' :
static const utf32 gSyntaxErrorMessage_command [] = {
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//--- Syntax error message for 'end of source' :
static const utf32 kEndOfSourceLexicalErrorMessage [] = {
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('r'),
  TO_UNICODE ('c'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                appendTerminalMessageToSyntaxErrorMessage                  *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_lexique::
appendTerminalMessageToSyntaxErrorMessage (const sint16 inTerminalIndex,
                                           C_String & outSyntaxErrorMessage) {
  static const utf32 * syntaxErrorMessageArray [260] = {kEndOfSourceLexicalErrorMessage,
       gSyntaxErrorMessage_APP_5FSRC,
       gSyntaxErrorMessage_CFLAGS,
       gSyntaxErrorMessage_ASFLAGS,
       gSyntaxErrorMessage_LDFLAGS,
       gSyntaxErrorMessage_APP_5FNAME,
       gSyntaxErrorMessage_TRAMPOLINE_5FBASE_5FPATH,
       gSyntaxErrorMessage_OIL_5FVERSION,
       gSyntaxErrorMessage_IMPLEMENTATION,
       gSyntaxErrorMessage_OS,
       gSyntaxErrorMessage_TASK,
       gSyntaxErrorMessage_COUNTER,
       gSyntaxErrorMessage_ALARM,
       gSyntaxErrorMessage_RESOURCE,
       gSyntaxErrorMessage_EVENT,
       gSyntaxErrorMessage_ISR,
       gSyntaxErrorMessage_MESSAGE,
       gSyntaxErrorMessage_COM,
       gSyntaxErrorMessage_NM,
       gSyntaxErrorMessage_APPMODE,
       gSyntaxErrorMessage_IPDU,
       gSyntaxErrorMessage_CPU,
       gSyntaxErrorMessage_UINT32,
       gSyntaxErrorMessage_INT32,
       gSyntaxErrorMessage_UINT64,
       gSyntaxErrorMessage_INT64,
       gSyntaxErrorMessage_FLOAT,
       gSyntaxErrorMessage_ENUM,
       gSyntaxErrorMessage_STRING,
       gSyntaxErrorMessage_BOOLEAN,
       gSyntaxErrorMessage_WITH_5FAUTO,
       gSyntaxErrorMessage_NO_5FDEFAULT,
       gSyntaxErrorMessage_AUTO,
       gSyntaxErrorMessage_MASK,
       gSyntaxErrorMessage_CATEGORY,
       gSyntaxErrorMessage_OS_5FTYPE,
       gSyntaxErrorMessage_TASK_5FTYPE,
       gSyntaxErrorMessage_COUNTER_5FTYPE,
       gSyntaxErrorMessage_ALARM_5FTYPE,
       gSyntaxErrorMessage_RESOURCE_5FTYPE,
       gSyntaxErrorMessage_EVENT_5FTYPE,
       gSyntaxErrorMessage_ISR_5FTYPE,
       gSyntaxErrorMessage_MESSAGE_5FTYPE,
       gSyntaxErrorMessage_COM_5FTYPE,
       gSyntaxErrorMessage_NM_5FTYPE,
       gSyntaxErrorMessage_APPMODE_5FTYPE,
       gSyntaxErrorMessage_IPDU_5FTYPE,
       gSyntaxErrorMessage_STATUS,
       gSyntaxErrorMessage_EXTENDED,
       gSyntaxErrorMessage_STARTUPHOOK,
       gSyntaxErrorMessage_ERRORHOOK,
       gSyntaxErrorMessage_SHUTDOWNHOOK,
       gSyntaxErrorMessage_PRETASKHOOK,
       gSyntaxErrorMessage_POSTTASKHOOK,
       gSyntaxErrorMessage_USEGETSERVICEID,
       gSyntaxErrorMessage_USEPARAMETERACCESS,
       gSyntaxErrorMessage_USERESSCHEDULER,
       gSyntaxErrorMessage_SYSTEM_5FCALL,
       gSyntaxErrorMessage_TRACE,
       gSyntaxErrorMessage_FILE,
       gSyntaxErrorMessage_METHOD,
       gSyntaxErrorMessage_FORMAT,
       gSyntaxErrorMessage_TRACE_5FTASK,
       gSyntaxErrorMessage_TRACE_5FISR,
       gSyntaxErrorMessage_TRACE_5FRESOURCE,
       gSyntaxErrorMessage_TRACE_5FALARM,
       gSyntaxErrorMessage_TRACE_5FUSER,
       gSyntaxErrorMessage_DESCRIPTION,
       gSyntaxErrorMessage_PRIORITY,
       gSyntaxErrorMessage_SCHEDULE,
       gSyntaxErrorMessage_ACTIVATION,
       gSyntaxErrorMessage_AUTOSTART,
       gSyntaxErrorMessage_MAXALLOWEDVALUE,
       gSyntaxErrorMessage_TICKSPERBASE,
       gSyntaxErrorMessage_MINCYCLE,
       gSyntaxErrorMessage_TYPE,
       gSyntaxErrorMessage_UNIT,
       gSyntaxErrorMessage_ACTION,
       gSyntaxErrorMessage_SETEVENT,
       gSyntaxErrorMessage_ACTIVATETASK,
       gSyntaxErrorMessage_ALARMCALLBACK,
       gSyntaxErrorMessage_ALARMCALLBACKNAME,
       gSyntaxErrorMessage_ALARMTIME,
       gSyntaxErrorMessage_CYCLETIME,
       gSyntaxErrorMessage_INCREMENTCOUNTER,
       gSyntaxErrorMessage_RESOURCEPROPERTY,
       gSyntaxErrorMessage_STANDARD,
       gSyntaxErrorMessage_LINKED,
       gSyntaxErrorMessage_LINKEDRESOURCE,
       gSyntaxErrorMessage_INTERNAL,
       gSyntaxErrorMessage_MESSAGEPROPERTY,
       gSyntaxErrorMessage_NOTIFICATION,
       gSyntaxErrorMessage_NOTIFICATIONERROR,
       gSyntaxErrorMessage_SEND_5FSTATIC_5FINTERNAL,
       gSyntaxErrorMessage_SEND_5FSTATIC_5FEXTERNAL,
       gSyntaxErrorMessage_SEND_5FDYNAMIC_5FEXTERNAL,
       gSyntaxErrorMessage_SEND_5FZERO_5FINTERNAL,
       gSyntaxErrorMessage_SEND_5FZERO_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FZERO_5FINTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FZERO_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FINTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FINTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FUNQUEUED_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FQUEUED_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FDYNAMIC_5FEXTERNAL,
       gSyntaxErrorMessage_RECEIVE_5FZERO_5FSENDERS,
       gSyntaxErrorMessage_CDATATYPE,
       gSyntaxErrorMessage_SENDINGMESSAGE,
       gSyntaxErrorMessage_NONE,
       gSyntaxErrorMessage_COMCALLBACK,
       gSyntaxErrorMessage_COMCALLBACKNAME,
       gSyntaxErrorMessage_INMCALLBACK,
       gSyntaxErrorMessage_CALLBACKROUTINENAME,
       gSyntaxErrorMessage_MONITOREDIPDU,
       gSyntaxErrorMessage_TRANSFERPROPERTY,
       gSyntaxErrorMessage_TRIGGERED,
       gSyntaxErrorMessage_PENDING,
       gSyntaxErrorMessage_NETWORKMESSAGE,
       gSyntaxErrorMessage_FILTER,
       gSyntaxErrorMessage_ALWAYS,
       gSyntaxErrorMessage_NEVER,
       gSyntaxErrorMessage_MASKEDNEWEQUALSX,
       gSyntaxErrorMessage_MASKEDNEWDIFFERSX,
       gSyntaxErrorMessage_NEWISEQUAL,
       gSyntaxErrorMessage_NEWISDIFFERENT,
       gSyntaxErrorMessage_MASKEDNEWEQUALSMASKEDOLD,
       gSyntaxErrorMessage_MASKEDNEWDIFFERSMASKEDOLD,
       gSyntaxErrorMessage_NEWISWITHIN,
       gSyntaxErrorMessage_NEWISOUTSIDE,
       gSyntaxErrorMessage_NEWISGREATER,
       gSyntaxErrorMessage_NEWISLESSOREQUAL,
       gSyntaxErrorMessage_NEWISLESS,
       gSyntaxErrorMessage_NEWISGREATEROREQUAL,
       gSyntaxErrorMessage_ONEEVERYN,
       gSyntaxErrorMessage_MIN,
       gSyntaxErrorMessage_MAX,
       gSyntaxErrorMessage_X,
       gSyntaxErrorMessage_PERIOD,
       gSyntaxErrorMessage_OFFSET,
       gSyntaxErrorMessage_NETWORKORDERCALLOUT,
       gSyntaxErrorMessage_CPUORDERCALLOUT,
       gSyntaxErrorMessage_INITIALVALUE,
       gSyntaxErrorMessage_QUEUESIZE,
       gSyntaxErrorMessage_LINK,
       gSyntaxErrorMessage_RECEIVEMESSAGE,
       gSyntaxErrorMessage_FLAG,
       gSyntaxErrorMessage_FLAGNAME,
       gSyntaxErrorMessage_STATIC,
       gSyntaxErrorMessage_DYNAMIC,
       gSyntaxErrorMessage_ZERO,
       gSyntaxErrorMessage_SIZEINBITS,
       gSyntaxErrorMessage_MAXSIZEINBITS,
       gSyntaxErrorMessage_BITORDERING,
       gSyntaxErrorMessage_BIGENDIAN,
       gSyntaxErrorMessage_LITTLEENDIAN,
       gSyntaxErrorMessage_BITPOSITION,
       gSyntaxErrorMessage_DATAINTERPRETATION,
       gSyntaxErrorMessage_UNSIGNEDINTEGER,
       gSyntaxErrorMessage_BYTEARRAY,
       gSyntaxErrorMessage_DIRECTION,
       gSyntaxErrorMessage_SENT,
       gSyntaxErrorMessage_RECEIVED,
       gSyntaxErrorMessage_COMTIMEBASE,
       gSyntaxErrorMessage_COMERRORHOOK,
       gSyntaxErrorMessage_COMUSEGETSERVICEID,
       gSyntaxErrorMessage_COMUSEPARAMETERACCESS,
       gSyntaxErrorMessage_COMSTARTCOMEXTENSION,
       gSyntaxErrorMessage_COMAPPMODE,
       gSyntaxErrorMessage_COMSTATUS,
       gSyntaxErrorMessage_USE,
       gSyntaxErrorMessage_COMEXTENDED,
       gSyntaxErrorMessage_COMSTANDARD,
       gSyntaxErrorMessage_IPDUPROPERTY,
       gSyntaxErrorMessage_IPDUCALLOUT,
       gSyntaxErrorMessage_LAYERUSED,
       gSyntaxErrorMessage_TRANSMISSIONMODE,
       gSyntaxErrorMessage_DIRECT,
       gSyntaxErrorMessage_PERIODIC,
       gSyntaxErrorMessage_MIXED,
       gSyntaxErrorMessage_TIMEOUT,
       gSyntaxErrorMessage_FIRTSTIMEOUT,
       gSyntaxErrorMessage_MINIMUMDELAYTIME,
       gSyntaxErrorMessage_TIMEPERIOD,
       gSyntaxErrorMessage_TIMEOFFSET,
       gSyntaxErrorMessage_NON,
       gSyntaxErrorMessage_FULL,
       gSyntaxErrorMessage_FALSE,
       gSyntaxErrorMessage_TRUE,
       gSyntaxErrorMessage_PROTECTIONHOOK,
       gSyntaxErrorMessage_SCALABILITYCLASS,
       gSyntaxErrorMessage_STACKMONITORING,
       gSyntaxErrorMessage_TIMING_5FPROTECTION,
       gSyntaxErrorMessage_ACCESSING_5FAPPLICATION,
       gSyntaxErrorMessage_SC1,
       gSyntaxErrorMessage_SC2,
       gSyntaxErrorMessage_SC3,
       gSyntaxErrorMessage_SC4,
       gSyntaxErrorMessage_SCHEDULETABLE,
       gSyntaxErrorMessage_APPLICATION,
       gSyntaxErrorMessage_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION,
       gSyntaxErrorMessage_SYNC_5FSTRATEGY,
       gSyntaxErrorMessage_MAX_5FINCREASE,
       gSyntaxErrorMessage_MAX_5FDECREASE,
       gSyntaxErrorMessage_MAX_5FINCREASE_5FASYNC,
       gSyntaxErrorMessage_MAX_5FDECREASE_5FASYNC,
       gSyntaxErrorMessage_PRECISION,
       gSyntaxErrorMessage_LENGTH,
       gSyntaxErrorMessage_ABSOLUTE,
       gSyntaxErrorMessage_RELATIVE,
       gSyntaxErrorMessage_SYNCHRON,
       gSyntaxErrorMessage_TRUSTED,
       gSyntaxErrorMessage_HAS_5FRESTARTTASK,
       gSyntaxErrorMessage_RESTARTTASK,
       gSyntaxErrorMessage_TRUSTED_5FFUNCTION,
       gSyntaxErrorMessage_NAME,
       gSyntaxErrorMessage_EXECUTIONBUDGET,
       gSyntaxErrorMessage_EXECUTIONTIME,
       gSyntaxErrorMessage_COUNTLIMIT,
       gSyntaxErrorMessage_TIMEFRAME,
       gSyntaxErrorMessage_MAXOSINTERRUPTLOCKTIME,
       gSyntaxErrorMessage_MAXALLINTERRUPTLOCKTIME,
       gSyntaxErrorMessage_LOCKINGTIME,
       gSyntaxErrorMessage_RESOURCELOCK,
       gSyntaxErrorMessage_MAXRESOURCELOCKTIME,
       gSyntaxErrorMessage_SMOOTH,
       gSyntaxErrorMessage_HARD,
       gSyntaxErrorMessage_TICKS,
       gSyntaxErrorMessage_NANOSECONDS,
       gSyntaxErrorMessage_SOFTWARE,
       gSyntaxErrorMessage_HARDWARE,
       gSyntaxErrorMessage_OSINTERNAL,
       gSyntaxErrorMessage_GPT,
       gSyntaxErrorMessage_NS_5FPER_5FHW_5FTICK,
       gSyntaxErrorMessage_GPTCHANNELNAME,
       gSyntaxErrorMessage_DRIVER,
       gSyntaxErrorMessage_TIMECONSTANTS,
       gSyntaxErrorMessage_TIMECONSTANT,
       gSyntaxErrorMessage_NS,
       gSyntaxErrorMessage_CONSTNAME,
       gSyntaxErrorMessage_SOURCE,
       gSyntaxErrorMessage_comment,
       gSyntaxErrorMessage_idf,
       gSyntaxErrorMessage__3B,
       gSyntaxErrorMessage__3A,
       gSyntaxErrorMessage__3D,
       gSyntaxErrorMessage__7B,
       gSyntaxErrorMessage__7D,
       gSyntaxErrorMessage__2E_2E,
       gSyntaxErrorMessage__5B,
       gSyntaxErrorMessage__5D,
       gSyntaxErrorMessage__2C,
       gSyntaxErrorMessage__2E,
       gSyntaxErrorMessage__2D,
       gSyntaxErrorMessage_string,
       gSyntaxErrorMessage_g_5Fstring,
       gSyntaxErrorMessage_uint_5Fnumber,
       gSyntaxErrorMessage_float_5Fnumber,
       gSyntaxErrorMessage_set_5Fstart_5Fuint_5Fnumber,
       gSyntaxErrorMessage_include,
       gSyntaxErrorMessage_command} ;
  outSyntaxErrorMessage << syntaxErrorMessageArray [inTerminalIndex] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'makefileKeywords'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_makefileKeywords = 6 ;

static const utf32 kEntry_0_forTable_makefileKeywords [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_makefileKeywords [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_makefileKeywords [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_makefileKeywords [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_makefileKeywords [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('_'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_makefileKeywords [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_makefileKeywords [ktable_size_makefileKeywords] = {
  {kEntry_0_forTable_makefileKeywords, 6, goil_lexique::goil_lexique_1_CFLAGS},
  {kEntry_1_forTable_makefileKeywords, 7, goil_lexique::goil_lexique_1_APP_5FSRC},
  {kEntry_2_forTable_makefileKeywords, 7, goil_lexique::goil_lexique_1_ASFLAGS},
  {kEntry_3_forTable_makefileKeywords, 7, goil_lexique::goil_lexique_1_LDFLAGS},
  {kEntry_4_forTable_makefileKeywords, 8, goil_lexique::goil_lexique_1_APP_5FNAME},
  {kEntry_5_forTable_makefileKeywords, 20, goil_lexique::goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH}
} ;

sint16 goil_lexique::search_into_makefileKeywords (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_makefileKeywords, ktable_size_makefileKeywords) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'oilVersion'                        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_oilVersion = 1 ;

static const utf32 kEntry_0_forTable_oilVersion [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_oilVersion [ktable_size_oilVersion] = {
  {kEntry_0_forTable_oilVersion, 11, goil_lexique::goil_lexique_1_OIL_5FVERSION}
} ;

sint16 goil_lexique::search_into_oilVersion (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_oilVersion, ktable_size_oilVersion) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'oilDefinitions'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_oilDefinitions = 1 ;

static const utf32 kEntry_0_forTable_oilDefinitions [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_oilDefinitions [ktable_size_oilDefinitions] = {
  {kEntry_0_forTable_oilDefinitions, 14, goil_lexique::goil_lexique_1_IMPLEMENTATION}
} ;

sint16 goil_lexique::search_into_oilDefinitions (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_oilDefinitions, ktable_size_oilDefinitions) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'objList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_objList = 13 ;

static const utf32 kEntry_0_forTable_objList [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_objList [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_objList [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_objList [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_objList [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_objList [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_objList [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_objList [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_objList [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_objList [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_objList [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_objList [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_objList [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_objList [ktable_size_objList] = {
  {kEntry_0_forTable_objList, 2, goil_lexique::goil_lexique_1_NM},
  {kEntry_1_forTable_objList, 2, goil_lexique::goil_lexique_1_OS},
  {kEntry_2_forTable_objList, 3, goil_lexique::goil_lexique_1_COM},
  {kEntry_3_forTable_objList, 3, goil_lexique::goil_lexique_1_CPU},
  {kEntry_4_forTable_objList, 3, goil_lexique::goil_lexique_1_ISR},
  {kEntry_5_forTable_objList, 4, goil_lexique::goil_lexique_1_IPDU},
  {kEntry_6_forTable_objList, 4, goil_lexique::goil_lexique_1_TASK},
  {kEntry_7_forTable_objList, 5, goil_lexique::goil_lexique_1_ALARM},
  {kEntry_8_forTable_objList, 5, goil_lexique::goil_lexique_1_EVENT},
  {kEntry_9_forTable_objList, 7, goil_lexique::goil_lexique_1_APPMODE},
  {kEntry_10_forTable_objList, 7, goil_lexique::goil_lexique_1_COUNTER},
  {kEntry_11_forTable_objList, 7, goil_lexique::goil_lexique_1_MESSAGE},
  {kEntry_12_forTable_objList, 8, goil_lexique::goil_lexique_1_RESOURCE}
} ;

sint16 goil_lexique::search_into_objList (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_objList, ktable_size_objList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'dataTypes'                         *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_dataTypes = 8 ;

static const utf32 kEntry_0_forTable_dataTypes [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_dataTypes [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_dataTypes [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_dataTypes [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_dataTypes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_dataTypes [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('3'),
  TO_UNICODE ('2'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_dataTypes [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('6'),
  TO_UNICODE ('4'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_dataTypes [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_dataTypes [ktable_size_dataTypes] = {
  {kEntry_0_forTable_dataTypes, 4, goil_lexique::goil_lexique_1_ENUM},
  {kEntry_1_forTable_dataTypes, 5, goil_lexique::goil_lexique_1_FLOAT},
  {kEntry_2_forTable_dataTypes, 5, goil_lexique::goil_lexique_1_INT32},
  {kEntry_3_forTable_dataTypes, 5, goil_lexique::goil_lexique_1_INT64},
  {kEntry_4_forTable_dataTypes, 6, goil_lexique::goil_lexique_1_STRING},
  {kEntry_5_forTable_dataTypes, 6, goil_lexique::goil_lexique_1_UINT32},
  {kEntry_6_forTable_dataTypes, 6, goil_lexique::goil_lexique_1_UINT64},
  {kEntry_7_forTable_dataTypes, 7, goil_lexique::goil_lexique_1_BOOLEAN}
} ;

sint16 goil_lexique::search_into_dataTypes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_dataTypes, ktable_size_dataTypes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'miscSpecifiers'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_miscSpecifiers = 5 ;

static const utf32 kEntry_0_forTable_miscSpecifiers [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_miscSpecifiers [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_miscSpecifiers [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_miscSpecifiers [] = {
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_miscSpecifiers [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_miscSpecifiers [ktable_size_miscSpecifiers] = {
  {kEntry_0_forTable_miscSpecifiers, 4, goil_lexique::goil_lexique_1_AUTO},
  {kEntry_1_forTable_miscSpecifiers, 4, goil_lexique::goil_lexique_1_MASK},
  {kEntry_2_forTable_miscSpecifiers, 8, goil_lexique::goil_lexique_1_CATEGORY},
  {kEntry_3_forTable_miscSpecifiers, 9, goil_lexique::goil_lexique_1_WITH_5FAUTO},
  {kEntry_4_forTable_miscSpecifiers, 10, goil_lexique::goil_lexique_1_NO_5FDEFAULT}
} ;

sint16 goil_lexique::search_into_miscSpecifiers (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_miscSpecifiers, ktable_size_miscSpecifiers) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'objectRefType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_objectRefType = 12 ;

static const utf32 kEntry_0_forTable_objectRefType [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_objectRefType [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_objectRefType [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_objectRefType [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_objectRefType [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_objectRefType [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_objectRefType [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_objectRefType [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_objectRefType [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_objectRefType [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_objectRefType [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_objectRefType [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_objectRefType [ktable_size_objectRefType] = {
  {kEntry_0_forTable_objectRefType, 7, goil_lexique::goil_lexique_1_NM_5FTYPE},
  {kEntry_1_forTable_objectRefType, 7, goil_lexique::goil_lexique_1_OS_5FTYPE},
  {kEntry_2_forTable_objectRefType, 8, goil_lexique::goil_lexique_1_COM_5FTYPE},
  {kEntry_3_forTable_objectRefType, 8, goil_lexique::goil_lexique_1_ISR_5FTYPE},
  {kEntry_4_forTable_objectRefType, 9, goil_lexique::goil_lexique_1_IPDU_5FTYPE},
  {kEntry_5_forTable_objectRefType, 9, goil_lexique::goil_lexique_1_TASK_5FTYPE},
  {kEntry_6_forTable_objectRefType, 10, goil_lexique::goil_lexique_1_ALARM_5FTYPE},
  {kEntry_7_forTable_objectRefType, 10, goil_lexique::goil_lexique_1_EVENT_5FTYPE},
  {kEntry_8_forTable_objectRefType, 12, goil_lexique::goil_lexique_1_APPMODE_5FTYPE},
  {kEntry_9_forTable_objectRefType, 12, goil_lexique::goil_lexique_1_COUNTER_5FTYPE},
  {kEntry_10_forTable_objectRefType, 12, goil_lexique::goil_lexique_1_MESSAGE_5FTYPE},
  {kEntry_11_forTable_objectRefType, 13, goil_lexique::goil_lexique_1_RESOURCE_5FTYPE}
} ;

sint16 goil_lexique::search_into_objectRefType (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_objectRefType, ktable_size_objectRefType) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'os_attributes'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_os_attributes = 12 ;

static const utf32 kEntry_0_forTable_os_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_os_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_os_attributes [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_os_attributes [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_os_attributes [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_os_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_os_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('_'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_os_attributes [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_os_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('H'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_os_attributes [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_os_attributes [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_os_attributes [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_os_attributes [ktable_size_os_attributes] = {
  {kEntry_0_forTable_os_attributes, 5, goil_lexique::goil_lexique_1_TRACE},
  {kEntry_1_forTable_os_attributes, 6, goil_lexique::goil_lexique_1_STATUS},
  {kEntry_2_forTable_os_attributes, 8, goil_lexique::goil_lexique_1_EXTENDED},
  {kEntry_3_forTable_os_attributes, 9, goil_lexique::goil_lexique_1_ERRORHOOK},
  {kEntry_4_forTable_os_attributes, 11, goil_lexique::goil_lexique_1_PRETASKHOOK},
  {kEntry_5_forTable_os_attributes, 11, goil_lexique::goil_lexique_1_STARTUPHOOK},
  {kEntry_6_forTable_os_attributes, 11, goil_lexique::goil_lexique_1_SYSTEM_5FCALL},
  {kEntry_7_forTable_os_attributes, 12, goil_lexique::goil_lexique_1_POSTTASKHOOK},
  {kEntry_8_forTable_os_attributes, 12, goil_lexique::goil_lexique_1_SHUTDOWNHOOK},
  {kEntry_9_forTable_os_attributes, 15, goil_lexique::goil_lexique_1_USEGETSERVICEID},
  {kEntry_10_forTable_os_attributes, 15, goil_lexique::goil_lexique_1_USERESSCHEDULER},
  {kEntry_11_forTable_os_attributes, 18, goil_lexique::goil_lexique_1_USEPARAMETERACCESS}
} ;

sint16 goil_lexique::search_into_os_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_os_attributes, ktable_size_os_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'trace_attributes'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_trace_attributes = 9 ;

static const utf32 kEntry_0_forTable_trace_attributes [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_trace_attributes [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_trace_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_trace_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_trace_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_trace_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_trace_attributes [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_trace_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_trace_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_trace_attributes [ktable_size_trace_attributes] = {
  {kEntry_0_forTable_trace_attributes, 4, goil_lexique::goil_lexique_1_FILE},
  {kEntry_1_forTable_trace_attributes, 6, goil_lexique::goil_lexique_1_FORMAT},
  {kEntry_2_forTable_trace_attributes, 6, goil_lexique::goil_lexique_1_METHOD},
  {kEntry_3_forTable_trace_attributes, 9, goil_lexique::goil_lexique_1_TRACE_5FISR},
  {kEntry_4_forTable_trace_attributes, 10, goil_lexique::goil_lexique_1_TRACE_5FTASK},
  {kEntry_5_forTable_trace_attributes, 10, goil_lexique::goil_lexique_1_TRACE_5FUSER},
  {kEntry_6_forTable_trace_attributes, 11, goil_lexique::goil_lexique_1_DESCRIPTION},
  {kEntry_7_forTable_trace_attributes, 11, goil_lexique::goil_lexique_1_TRACE_5FALARM},
  {kEntry_8_forTable_trace_attributes, 14, goil_lexique::goil_lexique_1_TRACE_5FRESOURCE}
} ;

sint16 goil_lexique::search_into_trace_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_trace_attributes, ktable_size_trace_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'task_attributes'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_task_attributes = 4 ;

static const utf32 kEntry_0_forTable_task_attributes [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_task_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_task_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_task_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_task_attributes [ktable_size_task_attributes] = {
  {kEntry_0_forTable_task_attributes, 8, goil_lexique::goil_lexique_1_PRIORITY},
  {kEntry_1_forTable_task_attributes, 8, goil_lexique::goil_lexique_1_SCHEDULE},
  {kEntry_2_forTable_task_attributes, 9, goil_lexique::goil_lexique_1_AUTOSTART},
  {kEntry_3_forTable_task_attributes, 10, goil_lexique::goil_lexique_1_ACTIVATION}
} ;

sint16 goil_lexique::search_into_task_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_task_attributes, ktable_size_task_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'counter_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_counter_attributes = 3 ;

static const utf32 kEntry_0_forTable_counter_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_counter_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_counter_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_counter_attributes [ktable_size_counter_attributes] = {
  {kEntry_0_forTable_counter_attributes, 8, goil_lexique::goil_lexique_1_MINCYCLE},
  {kEntry_1_forTable_counter_attributes, 12, goil_lexique::goil_lexique_1_TICKSPERBASE},
  {kEntry_2_forTable_counter_attributes, 15, goil_lexique::goil_lexique_1_MAXALLOWEDVALUE}
} ;

sint16 goil_lexique::search_into_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_counter_attributes, ktable_size_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Key words table 'as_counter_attributes'                   *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_as_counter_attributes = 2 ;

static const utf32 kEntry_0_forTable_as_counter_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_as_counter_attributes [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_as_counter_attributes [ktable_size_as_counter_attributes] = {
  {kEntry_0_forTable_as_counter_attributes, 4, goil_lexique::goil_lexique_1_TYPE},
  {kEntry_1_forTable_as_counter_attributes, 4, goil_lexique::goil_lexique_1_UNIT}
} ;

sint16 goil_lexique::search_into_as_counter_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_as_counter_attributes, ktable_size_as_counter_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'alarm_attributes'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_alarm_attributes = 8 ;

static const utf32 kEntry_0_forTable_alarm_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_alarm_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_alarm_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_alarm_attributes [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_alarm_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_alarm_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_alarm_attributes [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_alarm_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_alarm_attributes [ktable_size_alarm_attributes] = {
  {kEntry_0_forTable_alarm_attributes, 6, goil_lexique::goil_lexique_1_ACTION},
  {kEntry_1_forTable_alarm_attributes, 8, goil_lexique::goil_lexique_1_SETEVENT},
  {kEntry_2_forTable_alarm_attributes, 9, goil_lexique::goil_lexique_1_ALARMTIME},
  {kEntry_3_forTable_alarm_attributes, 9, goil_lexique::goil_lexique_1_CYCLETIME},
  {kEntry_4_forTable_alarm_attributes, 12, goil_lexique::goil_lexique_1_ACTIVATETASK},
  {kEntry_5_forTable_alarm_attributes, 13, goil_lexique::goil_lexique_1_ALARMCALLBACK},
  {kEntry_6_forTable_alarm_attributes, 16, goil_lexique::goil_lexique_1_INCREMENTCOUNTER},
  {kEntry_7_forTable_alarm_attributes, 17, goil_lexique::goil_lexique_1_ALARMCALLBACKNAME}
} ;

sint16 goil_lexique::search_into_alarm_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_alarm_attributes, ktable_size_alarm_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'resource_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_resource_attributes = 5 ;

static const utf32 kEntry_0_forTable_resource_attributes [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_resource_attributes [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_resource_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_resource_attributes [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_resource_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_resource_attributes [ktable_size_resource_attributes] = {
  {kEntry_0_forTable_resource_attributes, 6, goil_lexique::goil_lexique_1_LINKED},
  {kEntry_1_forTable_resource_attributes, 8, goil_lexique::goil_lexique_1_INTERNAL},
  {kEntry_2_forTable_resource_attributes, 8, goil_lexique::goil_lexique_1_STANDARD},
  {kEntry_3_forTable_resource_attributes, 14, goil_lexique::goil_lexique_1_LINKEDRESOURCE},
  {kEntry_4_forTable_resource_attributes, 16, goil_lexique::goil_lexique_1_RESOURCEPROPERTY}
} ;

sint16 goil_lexique::search_into_resource_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_resource_attributes, ktable_size_resource_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'message_attributes'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_message_attributes = 57 ;

static const utf32 kEntry_0_forTable_message_attributes [] = {
  TO_UNICODE ('X'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_message_attributes [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_message_attributes [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_message_attributes [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_message_attributes [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_message_attributes [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_message_attributes [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_message_attributes [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_message_attributes [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_message_attributes [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_15_forTable_message_attributes [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_16_forTable_message_attributes [] = {
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_17_forTable_message_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_18_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_19_forTable_message_attributes [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_20_forTable_message_attributes [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_21_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_22_forTable_message_attributes [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('V'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_23_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_24_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_25_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_26_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_27_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_28_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_29_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_30_forTable_message_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_31_forTable_message_attributes [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_32_forTable_message_attributes [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('P'),
  TO_UNICODE ('U'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_33_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('A'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_34_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_35_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_36_forTable_message_attributes [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_37_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_38_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_39_forTable_message_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_40_forTable_message_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_41_forTable_message_attributes [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_42_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('K'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_43_forTable_message_attributes [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('G'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_44_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_45_forTable_message_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_46_forTable_message_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_47_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_48_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_49_forTable_message_attributes [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_50_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_51_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_52_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('E'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_53_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_54_forTable_message_attributes [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('W'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_55_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_56_forTable_message_attributes [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('Q'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_message_attributes [ktable_size_message_attributes] = {
  {kEntry_0_forTable_message_attributes, 1, goil_lexique::goil_lexique_1_X},
  {kEntry_1_forTable_message_attributes, 3, goil_lexique::goil_lexique_1_MAX},
  {kEntry_2_forTable_message_attributes, 3, goil_lexique::goil_lexique_1_MIN},
  {kEntry_3_forTable_message_attributes, 4, goil_lexique::goil_lexique_1_FLAG},
  {kEntry_4_forTable_message_attributes, 4, goil_lexique::goil_lexique_1_LINK},
  {kEntry_5_forTable_message_attributes, 4, goil_lexique::goil_lexique_1_NONE},
  {kEntry_6_forTable_message_attributes, 5, goil_lexique::goil_lexique_1_NEVER},
  {kEntry_7_forTable_message_attributes, 6, goil_lexique::goil_lexique_1_ALWAYS},
  {kEntry_8_forTable_message_attributes, 6, goil_lexique::goil_lexique_1_FILTER},
  {kEntry_9_forTable_message_attributes, 6, goil_lexique::goil_lexique_1_OFFSET},
  {kEntry_10_forTable_message_attributes, 6, goil_lexique::goil_lexique_1_PERIOD},
  {kEntry_11_forTable_message_attributes, 7, goil_lexique::goil_lexique_1_PENDING},
  {kEntry_12_forTable_message_attributes, 8, goil_lexique::goil_lexique_1_FLAGNAME},
  {kEntry_13_forTable_message_attributes, 9, goil_lexique::goil_lexique_1_CDATATYPE},
  {kEntry_14_forTable_message_attributes, 9, goil_lexique::goil_lexique_1_NEWISLESS},
  {kEntry_15_forTable_message_attributes, 9, goil_lexique::goil_lexique_1_ONEEVERYN},
  {kEntry_16_forTable_message_attributes, 9, goil_lexique::goil_lexique_1_QUEUESIZE},
  {kEntry_17_forTable_message_attributes, 9, goil_lexique::goil_lexique_1_TRIGGERED},
  {kEntry_18_forTable_message_attributes, 10, goil_lexique::goil_lexique_1_NEWISEQUAL},
  {kEntry_19_forTable_message_attributes, 11, goil_lexique::goil_lexique_1_COMCALLBACK},
  {kEntry_20_forTable_message_attributes, 11, goil_lexique::goil_lexique_1_INMCALLBACK},
  {kEntry_21_forTable_message_attributes, 11, goil_lexique::goil_lexique_1_NEWISWITHIN},
  {kEntry_22_forTable_message_attributes, 12, goil_lexique::goil_lexique_1_INITIALVALUE},
  {kEntry_23_forTable_message_attributes, 12, goil_lexique::goil_lexique_1_NEWISGREATER},
  {kEntry_24_forTable_message_attributes, 12, goil_lexique::goil_lexique_1_NEWISOUTSIDE},
  {kEntry_25_forTable_message_attributes, 12, goil_lexique::goil_lexique_1_NOTIFICATION},
  {kEntry_26_forTable_message_attributes, 13, goil_lexique::goil_lexique_1_MONITOREDIPDU},
  {kEntry_27_forTable_message_attributes, 14, goil_lexique::goil_lexique_1_NETWORKMESSAGE},
  {kEntry_28_forTable_message_attributes, 14, goil_lexique::goil_lexique_1_NEWISDIFFERENT},
  {kEntry_29_forTable_message_attributes, 14, goil_lexique::goil_lexique_1_RECEIVEMESSAGE},
  {kEntry_30_forTable_message_attributes, 14, goil_lexique::goil_lexique_1_SENDINGMESSAGE},
  {kEntry_31_forTable_message_attributes, 15, goil_lexique::goil_lexique_1_COMCALLBACKNAME},
  {kEntry_32_forTable_message_attributes, 15, goil_lexique::goil_lexique_1_CPUORDERCALLOUT},
  {kEntry_33_forTable_message_attributes, 15, goil_lexique::goil_lexique_1_MESSAGEPROPERTY},
  {kEntry_34_forTable_message_attributes, 16, goil_lexique::goil_lexique_1_MASKEDNEWEQUALSX},
  {kEntry_35_forTable_message_attributes, 16, goil_lexique::goil_lexique_1_NEWISLESSOREQUAL},
  {kEntry_36_forTable_message_attributes, 16, goil_lexique::goil_lexique_1_TRANSFERPROPERTY},
  {kEntry_37_forTable_message_attributes, 17, goil_lexique::goil_lexique_1_MASKEDNEWDIFFERSX},
  {kEntry_38_forTable_message_attributes, 17, goil_lexique::goil_lexique_1_NOTIFICATIONERROR},
  {kEntry_39_forTable_message_attributes, 18, goil_lexique::goil_lexique_1_SEND_5FZERO_5FEXTERNAL},
  {kEntry_40_forTable_message_attributes, 18, goil_lexique::goil_lexique_1_SEND_5FZERO_5FINTERNAL},
  {kEntry_41_forTable_message_attributes, 19, goil_lexique::goil_lexique_1_CALLBACKROUTINENAME},
  {kEntry_42_forTable_message_attributes, 19, goil_lexique::goil_lexique_1_NETWORKORDERCALLOUT},
  {kEntry_43_forTable_message_attributes, 19, goil_lexique::goil_lexique_1_NEWISGREATEROREQUAL},
  {kEntry_44_forTable_message_attributes, 20, goil_lexique::goil_lexique_1_RECEIVE_5FZERO_5FSENDERS},
  {kEntry_45_forTable_message_attributes, 20, goil_lexique::goil_lexique_1_SEND_5FSTATIC_5FEXTERNAL},
  {kEntry_46_forTable_message_attributes, 20, goil_lexique::goil_lexique_1_SEND_5FSTATIC_5FINTERNAL},
  {kEntry_47_forTable_message_attributes, 21, goil_lexique::goil_lexique_1_RECEIVE_5FZERO_5FEXTERNAL},
  {kEntry_48_forTable_message_attributes, 21, goil_lexique::goil_lexique_1_RECEIVE_5FZERO_5FINTERNAL},
  {kEntry_49_forTable_message_attributes, 21, goil_lexique::goil_lexique_1_SEND_5FDYNAMIC_5FEXTERNAL},
  {kEntry_50_forTable_message_attributes, 23, goil_lexique::goil_lexique_1_RECEIVE_5FQUEUED_5FEXTERNAL},
  {kEntry_51_forTable_message_attributes, 23, goil_lexique::goil_lexique_1_RECEIVE_5FQUEUED_5FINTERNAL},
  {kEntry_52_forTable_message_attributes, 24, goil_lexique::goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD},
  {kEntry_53_forTable_message_attributes, 24, goil_lexique::goil_lexique_1_RECEIVE_5FDYNAMIC_5FEXTERNAL},
  {kEntry_54_forTable_message_attributes, 25, goil_lexique::goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD},
  {kEntry_55_forTable_message_attributes, 25, goil_lexique::goil_lexique_1_RECEIVE_5FUNQUEUED_5FEXTERNAL},
  {kEntry_56_forTable_message_attributes, 25, goil_lexique::goil_lexique_1_RECEIVE_5FUNQUEUED_5FINTERNAL}
} ;

sint16 goil_lexique::search_into_message_attributes (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_message_attributes, ktable_size_message_attributes) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Key words table 'networkmessage_attribute'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_networkmessage_attribute = 15 ;

static const utf32 kEntry_0_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('P'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_12_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_13_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('G'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_14_forTable_networkmessage_attribute [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_networkmessage_attribute [ktable_size_networkmessage_attribute] = {
  {kEntry_0_forTable_networkmessage_attribute, 4, goil_lexique::goil_lexique_1_SENT},
  {kEntry_1_forTable_networkmessage_attribute, 4, goil_lexique::goil_lexique_1_ZERO},
  {kEntry_2_forTable_networkmessage_attribute, 6, goil_lexique::goil_lexique_1_STATIC},
  {kEntry_3_forTable_networkmessage_attribute, 7, goil_lexique::goil_lexique_1_DYNAMIC},
  {kEntry_4_forTable_networkmessage_attribute, 8, goil_lexique::goil_lexique_1_RECEIVED},
  {kEntry_5_forTable_networkmessage_attribute, 9, goil_lexique::goil_lexique_1_BIGENDIAN},
  {kEntry_6_forTable_networkmessage_attribute, 9, goil_lexique::goil_lexique_1_BYTEARRAY},
  {kEntry_7_forTable_networkmessage_attribute, 9, goil_lexique::goil_lexique_1_DIRECTION},
  {kEntry_8_forTable_networkmessage_attribute, 10, goil_lexique::goil_lexique_1_SIZEINBITS},
  {kEntry_9_forTable_networkmessage_attribute, 11, goil_lexique::goil_lexique_1_BITORDERING},
  {kEntry_10_forTable_networkmessage_attribute, 11, goil_lexique::goil_lexique_1_BITPOSITION},
  {kEntry_11_forTable_networkmessage_attribute, 12, goil_lexique::goil_lexique_1_LITTLEENDIAN},
  {kEntry_12_forTable_networkmessage_attribute, 13, goil_lexique::goil_lexique_1_MAXSIZEINBITS},
  {kEntry_13_forTable_networkmessage_attribute, 15, goil_lexique::goil_lexique_1_UNSIGNEDINTEGER},
  {kEntry_14_forTable_networkmessage_attribute, 18, goil_lexique::goil_lexique_1_DATAINTERPRETATION}
} ;

sint16 goil_lexique::search_into_networkmessage_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_networkmessage_attribute, ktable_size_networkmessage_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'com_attribute'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_com_attribute = 10 ;

static const utf32 kEntry_0_forTable_com_attribute [] = {
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('V'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('I'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_com_attribute [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_com_attribute [ktable_size_com_attribute] = {
  {kEntry_0_forTable_com_attribute, 3, goil_lexique::goil_lexique_1_USE},
  {kEntry_1_forTable_com_attribute, 9, goil_lexique::goil_lexique_1_COMSTATUS},
  {kEntry_2_forTable_com_attribute, 10, goil_lexique::goil_lexique_1_COMAPPMODE},
  {kEntry_3_forTable_com_attribute, 11, goil_lexique::goil_lexique_1_COMEXTENDED},
  {kEntry_4_forTable_com_attribute, 11, goil_lexique::goil_lexique_1_COMSTANDARD},
  {kEntry_5_forTable_com_attribute, 11, goil_lexique::goil_lexique_1_COMTIMEBASE},
  {kEntry_6_forTable_com_attribute, 12, goil_lexique::goil_lexique_1_COMERRORHOOK},
  {kEntry_7_forTable_com_attribute, 18, goil_lexique::goil_lexique_1_COMUSEGETSERVICEID},
  {kEntry_8_forTable_com_attribute, 20, goil_lexique::goil_lexique_1_COMSTARTCOMEXTENSION},
  {kEntry_9_forTable_com_attribute, 21, goil_lexique::goil_lexique_1_COMUSEPARAMETERACCESS}
} ;

sint16 goil_lexique::search_into_com_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_com_attribute, ktable_size_com_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'ipdu_attribute'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_ipdu_attribute = 12 ;

static const utf32 kEntry_0_forTable_ipdu_attribute [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_ipdu_attribute [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_ipdu_attribute [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_ipdu_attribute [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_ipdu_attribute [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_ipdu_attribute [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('F'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_ipdu_attribute [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_ipdu_attribute [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_ipdu_attribute [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('I'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_ipdu_attribute [] = {
  TO_UNICODE ('I'),
  TO_UNICODE ('P'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_ipdu_attribute [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('U'),
  TO_UNICODE ('M'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_11_forTable_ipdu_attribute [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_ipdu_attribute [ktable_size_ipdu_attribute] = {
  {kEntry_0_forTable_ipdu_attribute, 5, goil_lexique::goil_lexique_1_MIXED},
  {kEntry_1_forTable_ipdu_attribute, 6, goil_lexique::goil_lexique_1_DIRECT},
  {kEntry_2_forTable_ipdu_attribute, 7, goil_lexique::goil_lexique_1_TIMEOUT},
  {kEntry_3_forTable_ipdu_attribute, 8, goil_lexique::goil_lexique_1_PERIODIC},
  {kEntry_4_forTable_ipdu_attribute, 9, goil_lexique::goil_lexique_1_LAYERUSED},
  {kEntry_5_forTable_ipdu_attribute, 10, goil_lexique::goil_lexique_1_TIMEOFFSET},
  {kEntry_6_forTable_ipdu_attribute, 10, goil_lexique::goil_lexique_1_TIMEPERIOD},
  {kEntry_7_forTable_ipdu_attribute, 11, goil_lexique::goil_lexique_1_IPDUCALLOUT},
  {kEntry_8_forTable_ipdu_attribute, 12, goil_lexique::goil_lexique_1_FIRTSTIMEOUT},
  {kEntry_9_forTable_ipdu_attribute, 12, goil_lexique::goil_lexique_1_IPDUPROPERTY},
  {kEntry_10_forTable_ipdu_attribute, 16, goil_lexique::goil_lexique_1_MINIMUMDELAYTIME},
  {kEntry_11_forTable_ipdu_attribute, 16, goil_lexique::goil_lexique_1_TRANSMISSIONMODE}
} ;

sint16 goil_lexique::search_into_ipdu_attribute (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_ipdu_attribute, ktable_size_ipdu_attribute) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       Key words table 'scheduling'                        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_scheduling = 2 ;

static const utf32 kEntry_0_forTable_scheduling [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_scheduling [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_scheduling [ktable_size_scheduling] = {
  {kEntry_0_forTable_scheduling, 3, goil_lexique::goil_lexique_1_NON},
  {kEntry_1_forTable_scheduling, 4, goil_lexique::goil_lexique_1_FULL}
} ;

sint16 goil_lexique::search_into_scheduling (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_scheduling, ktable_size_scheduling) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'boolean'                          *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_boolean = 2 ;

static const utf32 kEntry_0_forTable_boolean [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_boolean [] = {
  TO_UNICODE ('F'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_boolean [ktable_size_boolean] = {
  {kEntry_0_forTable_boolean, 4, goil_lexique::goil_lexique_1_TRUE},
  {kEntry_1_forTable_boolean, 5, goil_lexique::goil_lexique_1_FALSE}
} ;

sint16 goil_lexique::search_into_boolean (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_boolean, ktable_size_boolean) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'autosar_attr'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_autosar_attr = 5 ;

static const utf32 kEntry_0_forTable_autosar_attr [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('H'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_autosar_attr [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_autosar_attr [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('I'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('C'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_autosar_attr [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_autosar_attr [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('C'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_autosar_attr [ktable_size_autosar_attr] = {
  {kEntry_0_forTable_autosar_attr, 14, goil_lexique::goil_lexique_1_PROTECTIONHOOK},
  {kEntry_1_forTable_autosar_attr, 15, goil_lexique::goil_lexique_1_STACKMONITORING},
  {kEntry_2_forTable_autosar_attr, 16, goil_lexique::goil_lexique_1_SCALABILITYCLASS},
  {kEntry_3_forTable_autosar_attr, 17, goil_lexique::goil_lexique_1_TIMING_5FPROTECTION},
  {kEntry_4_forTable_autosar_attr, 21, goil_lexique::goil_lexique_1_ACCESSING_5FAPPLICATION}
} ;

sint16 goil_lexique::search_into_autosar_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autosar_attr, ktable_size_autosar_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'autosar_key'                        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_autosar_key = 4 ;

static const utf32 kEntry_0_forTable_autosar_key [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('1'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_autosar_key [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('2'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_autosar_key [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('3'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_autosar_key [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('4'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_autosar_key [ktable_size_autosar_key] = {
  {kEntry_0_forTable_autosar_key, 3, goil_lexique::goil_lexique_1_SC1},
  {kEntry_1_forTable_autosar_key, 3, goil_lexique::goil_lexique_1_SC2},
  {kEntry_2_forTable_autosar_key, 3, goil_lexique::goil_lexique_1_SC3},
  {kEntry_3_forTable_autosar_key, 3, goil_lexique::goil_lexique_1_SC4}
} ;

sint16 goil_lexique::search_into_autosar_key (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autosar_key, ktable_size_autosar_key) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'autosar_objs'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_autosar_objs = 2 ;

static const utf32 kEntry_0_forTable_autosar_objs [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('P'),
  TO_UNICODE ('P'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_autosar_objs [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('U'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_autosar_objs [ktable_size_autosar_objs] = {
  {kEntry_0_forTable_autosar_objs, 11, goil_lexique::goil_lexique_1_APPLICATION},
  {kEntry_1_forTable_autosar_objs, 13, goil_lexique::goil_lexique_1_SCHEDULETABLE}
} ;

sint16 goil_lexique::search_into_autosar_objs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autosar_objs, ktable_size_autosar_objs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'schedtable_attrs'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_schedtable_attrs = 8 ;

static const utf32 kEntry_0_forTable_schedtable_attrs [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('E'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_schedtable_attrs [] = {
  TO_UNICODE ('P'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('I'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_schedtable_attrs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_schedtable_attrs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_schedtable_attrs [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('G'),
  TO_UNICODE ('Y'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_schedtable_attrs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('D'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_schedtable_attrs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('_'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_schedtable_attrs [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('O'),
  TO_UNICODE ('_'),
  TO_UNICODE ('G'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('B'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('_'),
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('I'),
  TO_UNICODE ('Z'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_schedtable_attrs [ktable_size_schedtable_attrs] = {
  {kEntry_0_forTable_schedtable_attrs, 6, goil_lexique::goil_lexique_1_LENGTH},
  {kEntry_1_forTable_schedtable_attrs, 9, goil_lexique::goil_lexique_1_PRECISION},
  {kEntry_2_forTable_schedtable_attrs, 12, goil_lexique::goil_lexique_1_MAX_5FDECREASE},
  {kEntry_3_forTable_schedtable_attrs, 12, goil_lexique::goil_lexique_1_MAX_5FINCREASE},
  {kEntry_4_forTable_schedtable_attrs, 13, goil_lexique::goil_lexique_1_SYNC_5FSTRATEGY},
  {kEntry_5_forTable_schedtable_attrs, 18, goil_lexique::goil_lexique_1_MAX_5FDECREASE_5FASYNC},
  {kEntry_6_forTable_schedtable_attrs, 18, goil_lexique::goil_lexique_1_MAX_5FINCREASE_5FASYNC},
  {kEntry_7_forTable_schedtable_attrs, 36, goil_lexique::goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION}
} ;

sint16 goil_lexique::search_into_schedtable_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_schedtable_attrs, ktable_size_schedtable_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    Key words table 'autostart_attrs'                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_autostart_attrs = 3 ;

static const utf32 kEntry_0_forTable_autostart_attrs [] = {
  TO_UNICODE ('A'),
  TO_UNICODE ('B'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('L'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_autostart_attrs [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('A'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_autostart_attrs [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('Y'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('R'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_autostart_attrs [ktable_size_autostart_attrs] = {
  {kEntry_0_forTable_autostart_attrs, 8, goil_lexique::goil_lexique_1_ABSOLUTE},
  {kEntry_1_forTable_autostart_attrs, 8, goil_lexique::goil_lexique_1_RELATIVE},
  {kEntry_2_forTable_autostart_attrs, 8, goil_lexique::goil_lexique_1_SYNCHRON}
} ;

sint16 goil_lexique::search_into_autostart_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_autostart_attrs, ktable_size_autostart_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Key words table 'application_attrs'                     *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_application_attrs = 5 ;

static const utf32 kEntry_0_forTable_application_attrs [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_application_attrs [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_application_attrs [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_application_attrs [] = {
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('T'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('S'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_application_attrs [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('D'),
  TO_UNICODE ('_'),
  TO_UNICODE ('F'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('C'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_application_attrs [ktable_size_application_attrs] = {
  {kEntry_0_forTable_application_attrs, 4, goil_lexique::goil_lexique_1_NAME},
  {kEntry_1_forTable_application_attrs, 7, goil_lexique::goil_lexique_1_TRUSTED},
  {kEntry_2_forTable_application_attrs, 11, goil_lexique::goil_lexique_1_RESTARTTASK},
  {kEntry_3_forTable_application_attrs, 15, goil_lexique::goil_lexique_1_HAS_5FRESTARTTASK},
  {kEntry_4_forTable_application_attrs, 16, goil_lexique::goil_lexique_1_TRUSTED_5FFUNCTION}
} ;

sint16 goil_lexique::search_into_application_attrs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_application_attrs, ktable_size_application_attrs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  Key words table 'timing_prot_attribs'                    *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_timing_prot_attribs = 9 ;

static const utf32 kEntry_0_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('F'),
  TO_UNICODE ('R'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('I'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('G'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('E'),
  TO_UNICODE ('X'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('U'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('B'),
  TO_UNICODE ('U'),
  TO_UNICODE ('D'),
  TO_UNICODE ('G'),
  TO_UNICODE ('E'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_timing_prot_attribs [] = {
  TO_UNICODE ('M'),
  TO_UNICODE ('A'),
  TO_UNICODE ('X'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE ('L'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('R'),
  TO_UNICODE ('U'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('L'),
  TO_UNICODE ('O'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_timing_prot_attribs [ktable_size_timing_prot_attribs] = {
  {kEntry_0_forTable_timing_prot_attribs, 9, goil_lexique::goil_lexique_1_TIMEFRAME},
  {kEntry_1_forTable_timing_prot_attribs, 10, goil_lexique::goil_lexique_1_COUNTLIMIT},
  {kEntry_2_forTable_timing_prot_attribs, 11, goil_lexique::goil_lexique_1_LOCKINGTIME},
  {kEntry_3_forTable_timing_prot_attribs, 12, goil_lexique::goil_lexique_1_RESOURCELOCK},
  {kEntry_4_forTable_timing_prot_attribs, 13, goil_lexique::goil_lexique_1_EXECUTIONTIME},
  {kEntry_5_forTable_timing_prot_attribs, 15, goil_lexique::goil_lexique_1_EXECUTIONBUDGET},
  {kEntry_6_forTable_timing_prot_attribs, 19, goil_lexique::goil_lexique_1_MAXRESOURCELOCKTIME},
  {kEntry_7_forTable_timing_prot_attribs, 22, goil_lexique::goil_lexique_1_MAXOSINTERRUPTLOCKTIME},
  {kEntry_8_forTable_timing_prot_attribs, 23, goil_lexique::goil_lexique_1_MAXALLINTERRUPTLOCKTIME}
} ;

sint16 goil_lexique::search_into_timing_prot_attribs (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_timing_prot_attribs, ktable_size_timing_prot_attribs) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'sync_strategy'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_sync_strategy = 2 ;

static const utf32 kEntry_0_forTable_sync_strategy [] = {
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_sync_strategy [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('M'),
  TO_UNICODE ('O'),
  TO_UNICODE ('O'),
  TO_UNICODE ('T'),
  TO_UNICODE ('H'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_sync_strategy [ktable_size_sync_strategy] = {
  {kEntry_0_forTable_sync_strategy, 4, goil_lexique::goil_lexique_1_HARD},
  {kEntry_1_forTable_sync_strategy, 6, goil_lexique::goil_lexique_1_SMOOTH}
} ;

sint16 goil_lexique::search_into_sync_strategy (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_sync_strategy, ktable_size_sync_strategy) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Key words table 'unit'                           *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_unit = 2 ;

static const utf32 kEntry_0_forTable_unit [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_unit [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('D'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_unit [ktable_size_unit] = {
  {kEntry_0_forTable_unit, 5, goil_lexique::goil_lexique_1_TICKS},
  {kEntry_1_forTable_unit, 11, goil_lexique::goil_lexique_1_NANOSECONDS}
} ;

sint16 goil_lexique::search_into_unit (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_unit, ktable_size_unit) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'cpt_type_attr'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_cpt_type_attr = 11 ;

static const utf32 kEntry_0_forTable_cpt_type_attr [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_cpt_type_attr [] = {
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_cpt_type_attr [] = {
  TO_UNICODE ('D'),
  TO_UNICODE ('R'),
  TO_UNICODE ('I'),
  TO_UNICODE ('V'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_cpt_type_attr [] = {
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('D'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_cpt_type_attr [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('F'),
  TO_UNICODE ('T'),
  TO_UNICODE ('W'),
  TO_UNICODE ('A'),
  TO_UNICODE ('R'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_cpt_type_attr [] = {
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_cpt_type_attr [] = {
  TO_UNICODE ('O'),
  TO_UNICODE ('S'),
  TO_UNICODE ('I'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_cpt_type_attr [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_cpt_type_attr [] = {
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE ('C'),
  TO_UNICODE ('O'),
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('T'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('T'),
  TO_UNICODE ('S'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_cpt_type_attr [] = {
  TO_UNICODE ('G'),
  TO_UNICODE ('P'),
  TO_UNICODE ('T'),
  TO_UNICODE ('C'),
  TO_UNICODE ('H'),
  TO_UNICODE ('A'),
  TO_UNICODE ('N'),
  TO_UNICODE ('N'),
  TO_UNICODE ('E'),
  TO_UNICODE ('L'),
  TO_UNICODE ('N'),
  TO_UNICODE ('A'),
  TO_UNICODE ('M'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_cpt_type_attr [] = {
  TO_UNICODE ('N'),
  TO_UNICODE ('S'),
  TO_UNICODE ('_'),
  TO_UNICODE ('P'),
  TO_UNICODE ('E'),
  TO_UNICODE ('R'),
  TO_UNICODE ('_'),
  TO_UNICODE ('H'),
  TO_UNICODE ('W'),
  TO_UNICODE ('_'),
  TO_UNICODE ('T'),
  TO_UNICODE ('I'),
  TO_UNICODE ('C'),
  TO_UNICODE ('K'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_cpt_type_attr [ktable_size_cpt_type_attr] = {
  {kEntry_0_forTable_cpt_type_attr, 2, goil_lexique::goil_lexique_1_NS},
  {kEntry_1_forTable_cpt_type_attr, 3, goil_lexique::goil_lexique_1_GPT},
  {kEntry_2_forTable_cpt_type_attr, 6, goil_lexique::goil_lexique_1_DRIVER},
  {kEntry_3_forTable_cpt_type_attr, 8, goil_lexique::goil_lexique_1_HARDWARE},
  {kEntry_4_forTable_cpt_type_attr, 8, goil_lexique::goil_lexique_1_SOFTWARE},
  {kEntry_5_forTable_cpt_type_attr, 9, goil_lexique::goil_lexique_1_CONSTNAME},
  {kEntry_6_forTable_cpt_type_attr, 10, goil_lexique::goil_lexique_1_OSINTERNAL},
  {kEntry_7_forTable_cpt_type_attr, 12, goil_lexique::goil_lexique_1_TIMECONSTANT},
  {kEntry_8_forTable_cpt_type_attr, 13, goil_lexique::goil_lexique_1_TIMECONSTANTS},
  {kEntry_9_forTable_cpt_type_attr, 14, goil_lexique::goil_lexique_1_GPTCHANNELNAME},
  {kEntry_10_forTable_cpt_type_attr, 14, goil_lexique::goil_lexique_1_NS_5FPER_5FHW_5FTICK}
} ;

sint16 goil_lexique::search_into_cpt_type_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_cpt_type_attr, ktable_size_cpt_type_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Key words table 'it_src_attr'                        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_it_src_attr = 1 ;

static const utf32 kEntry_0_forTable_it_src_attr [] = {
  TO_UNICODE ('S'),
  TO_UNICODE ('O'),
  TO_UNICODE ('U'),
  TO_UNICODE ('R'),
  TO_UNICODE ('C'),
  TO_UNICODE ('E'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_it_src_attr [ktable_size_it_src_attr] = {
  {kEntry_0_forTable_it_src_attr, 6, goil_lexique::goil_lexique_1_SOURCE}
} ;

sint16 goil_lexique::search_into_it_src_attr (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_it_src_attr, ktable_size_it_src_attr) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Key words table 'OILDelimiters'                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_OILDelimiters = 11 ;

static const utf32 kEntry_0_forTable_OILDelimiters [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_1_forTable_OILDelimiters [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_2_forTable_OILDelimiters [] = {
  TO_UNICODE ('.'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_3_forTable_OILDelimiters [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_4_forTable_OILDelimiters [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_5_forTable_OILDelimiters [] = {
  TO_UNICODE ('='),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_6_forTable_OILDelimiters [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_7_forTable_OILDelimiters [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_8_forTable_OILDelimiters [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_9_forTable_OILDelimiters [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
}; 

static const utf32 kEntry_10_forTable_OILDelimiters [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_OILDelimiters [ktable_size_OILDelimiters] = {
  {kEntry_0_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__2C},
  {kEntry_1_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__2D},
  {kEntry_2_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__2E},
  {kEntry_3_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__3A},
  {kEntry_4_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__3B},
  {kEntry_5_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__3D},
  {kEntry_6_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__5B},
  {kEntry_7_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__5D},
  {kEntry_8_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__7B},
  {kEntry_9_forTable_OILDelimiters, 1, goil_lexique::goil_lexique_1__7D},
  {kEntry_10_forTable_OILDelimiters, 2, goil_lexique::goil_lexique_1__2E_2E}
} ;

sint16 goil_lexique::search_into_OILDelimiters (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_OILDelimiters, ktable_size_OILDelimiters) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        Key words table 'commands'                         *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint32 ktable_size_commands = 1 ;

static const utf32 kEntry_0_forTable_commands [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
}; 

static const C_unicode_lexique_table_entry ktable_for_commands [ktable_size_commands] = {
  {kEntry_0_forTable_commands, 7, goil_lexique::goil_lexique_1_include}
} ;

sint16 goil_lexique::search_into_commands (const C_String & inSearchedString) {
  return searchInList (inSearchedString, ktable_for_commands, ktable_size_commands) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          getCurrentTokenString                            *
//                                                                           *
//---------------------------------------------------------------------------*

C_String goil_lexique::
getCurrentTokenString (const cToken * inTokenPtr) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) inTokenPtr ;
  C_String s ;
  if (_p == NULL) {
    s << "$$" ;
  }else{
    switch (_p->mTokenCode) {
    case  goil_lexique_1_:
      s << "$$" ;
      break ;
    case  goil_lexique_1_APP_5FSRC:
      s << "$"
        << "APP_SRC"
        << "$" ;
      break;
    case  goil_lexique_1_CFLAGS:
      s << "$"
        << "CFLAGS"
        << "$" ;
      break;
    case  goil_lexique_1_ASFLAGS:
      s << "$"
        << "ASFLAGS"
        << "$" ;
      break;
    case  goil_lexique_1_LDFLAGS:
      s << "$"
        << "LDFLAGS"
        << "$" ;
      break;
    case  goil_lexique_1_APP_5FNAME:
      s << "$"
        << "APP_NAME"
        << "$" ;
      break;
    case  goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH:
      s << "$"
        << "TRAMPOLINE_BASE_PATH"
        << "$" ;
      break;
    case  goil_lexique_1_OIL_5FVERSION:
      s << "$"
        << "OIL_VERSION"
        << "$" ;
      break;
    case  goil_lexique_1_IMPLEMENTATION:
      s << "$"
        << "IMPLEMENTATION"
        << "$" ;
      break;
    case  goil_lexique_1_OS:
      s << "$"
        << "OS"
        << "$" ;
      break;
    case  goil_lexique_1_TASK:
      s << "$"
        << "TASK"
        << "$" ;
      break;
    case  goil_lexique_1_COUNTER:
      s << "$"
        << "COUNTER"
        << "$" ;
      break;
    case  goil_lexique_1_ALARM:
      s << "$"
        << "ALARM"
        << "$" ;
      break;
    case  goil_lexique_1_RESOURCE:
      s << "$"
        << "RESOURCE"
        << "$" ;
      break;
    case  goil_lexique_1_EVENT:
      s << "$"
        << "EVENT"
        << "$" ;
      break;
    case  goil_lexique_1_ISR:
      s << "$"
        << "ISR"
        << "$" ;
      break;
    case  goil_lexique_1_MESSAGE:
      s << "$"
        << "MESSAGE"
        << "$" ;
      break;
    case  goil_lexique_1_COM:
      s << "$"
        << "COM"
        << "$" ;
      break;
    case  goil_lexique_1_NM:
      s << "$"
        << "NM"
        << "$" ;
      break;
    case  goil_lexique_1_APPMODE:
      s << "$"
        << "APPMODE"
        << "$" ;
      break;
    case  goil_lexique_1_IPDU:
      s << "$"
        << "IPDU"
        << "$" ;
      break;
    case  goil_lexique_1_CPU:
      s << "$"
        << "CPU"
        << "$" ;
      break;
    case  goil_lexique_1_UINT32:
      s << "$"
        << "UINT32"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_INT32:
      s << "$"
        << "INT32"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_UINT64:
      s << "$"
        << "UINT64"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_INT64:
      s << "$"
        << "INT64"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_FLOAT:
      s << "$"
        << "FLOAT"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_ENUM:
      s << "$"
        << "ENUM"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_STRING:
      s << "$"
        << "STRING"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_BOOLEAN:
      s << "$"
        << "BOOLEAN"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_WITH_5FAUTO:
      s << "$"
        << "WITH_AUTO"
        << "$" ;
      break;
    case  goil_lexique_1_NO_5FDEFAULT:
      s << "$"
        << "NO_DEFAULT"
        << "$" ;
      break;
    case  goil_lexique_1_AUTO:
      s << "$"
        << "AUTO"
        << "$" ;
      break;
    case  goil_lexique_1_MASK:
      s << "$"
        << "MASK"
        << "$" ;
      break;
    case  goil_lexique_1_CATEGORY:
      s << "$"
        << "CATEGORY"
        << "$" ;
      break;
    case  goil_lexique_1_OS_5FTYPE:
      s << "$"
        << "OS_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_TASK_5FTYPE:
      s << "$"
        << "TASK_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_COUNTER_5FTYPE:
      s << "$"
        << "COUNTER_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_ALARM_5FTYPE:
      s << "$"
        << "ALARM_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_RESOURCE_5FTYPE:
      s << "$"
        << "RESOURCE_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_EVENT_5FTYPE:
      s << "$"
        << "EVENT_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_ISR_5FTYPE:
      s << "$"
        << "ISR_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_MESSAGE_5FTYPE:
      s << "$"
        << "MESSAGE_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_COM_5FTYPE:
      s << "$"
        << "COM_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_NM_5FTYPE:
      s << "$"
        << "NM_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_APPMODE_5FTYPE:
      s << "$"
        << "APPMODE_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_IPDU_5FTYPE:
      s << "$"
        << "IPDU_TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_STATUS:
      s << "$"
        << "STATUS"
        << "$" ;
      break;
    case  goil_lexique_1_EXTENDED:
      s << "$"
        << "EXTENDED"
        << "$" ;
      break;
    case  goil_lexique_1_STARTUPHOOK:
      s << "$"
        << "STARTUPHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_ERRORHOOK:
      s << "$"
        << "ERRORHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_SHUTDOWNHOOK:
      s << "$"
        << "SHUTDOWNHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_PRETASKHOOK:
      s << "$"
        << "PRETASKHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_POSTTASKHOOK:
      s << "$"
        << "POSTTASKHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_USEGETSERVICEID:
      s << "$"
        << "USEGETSERVICEID"
        << "$" ;
      break;
    case  goil_lexique_1_USEPARAMETERACCESS:
      s << "$"
        << "USEPARAMETERACCESS"
        << "$" ;
      break;
    case  goil_lexique_1_USERESSCHEDULER:
      s << "$"
        << "USERESSCHEDULER"
        << "$" ;
      break;
    case  goil_lexique_1_SYSTEM_5FCALL:
      s << "$"
        << "SYSTEM_CALL"
        << "$" ;
      break;
    case  goil_lexique_1_TRACE:
      s << "$"
        << "TRACE"
        << "$" ;
      break;
    case  goil_lexique_1_FILE:
      s << "$"
        << "FILE"
        << "$" ;
      break;
    case  goil_lexique_1_METHOD:
      s << "$"
        << "METHOD"
        << "$" ;
      break;
    case  goil_lexique_1_FORMAT:
      s << "$"
        << "FORMAT"
        << "$" ;
      break;
    case  goil_lexique_1_TRACE_5FTASK:
      s << "$"
        << "TRACE_TASK"
        << "$" ;
      break;
    case  goil_lexique_1_TRACE_5FISR:
      s << "$"
        << "TRACE_ISR"
        << "$" ;
      break;
    case  goil_lexique_1_TRACE_5FRESOURCE:
      s << "$"
        << "TRACE_RESOURCE"
        << "$" ;
      break;
    case  goil_lexique_1_TRACE_5FALARM:
      s << "$"
        << "TRACE_ALARM"
        << "$" ;
      break;
    case  goil_lexique_1_TRACE_5FUSER:
      s << "$"
        << "TRACE_USER"
        << "$" ;
      break;
    case  goil_lexique_1_DESCRIPTION:
      s << "$"
        << "DESCRIPTION"
        << "$" ;
      break;
    case  goil_lexique_1_PRIORITY:
      s << "$"
        << "PRIORITY"
        << "$" ;
      break;
    case  goil_lexique_1_SCHEDULE:
      s << "$"
        << "SCHEDULE"
        << "$" ;
      break;
    case  goil_lexique_1_ACTIVATION:
      s << "$"
        << "ACTIVATION"
        << "$" ;
      break;
    case  goil_lexique_1_AUTOSTART:
      s << "$"
        << "AUTOSTART"
        << "$" ;
      break;
    case  goil_lexique_1_MAXALLOWEDVALUE:
      s << "$"
        << "MAXALLOWEDVALUE"
        << "$" ;
      break;
    case  goil_lexique_1_TICKSPERBASE:
      s << "$"
        << "TICKSPERBASE"
        << "$" ;
      break;
    case  goil_lexique_1_MINCYCLE:
      s << "$"
        << "MINCYCLE"
        << "$" ;
      break;
    case  goil_lexique_1_TYPE:
      s << "$"
        << "TYPE"
        << "$" ;
      break;
    case  goil_lexique_1_UNIT:
      s << "$"
        << "UNIT"
        << "$" ;
      break;
    case  goil_lexique_1_ACTION:
      s << "$"
        << "ACTION"
        << "$" ;
      break;
    case  goil_lexique_1_SETEVENT:
      s << "$"
        << "SETEVENT"
        << "$" ;
      break;
    case  goil_lexique_1_ACTIVATETASK:
      s << "$"
        << "ACTIVATETASK"
        << "$" ;
      break;
    case  goil_lexique_1_ALARMCALLBACK:
      s << "$"
        << "ALARMCALLBACK"
        << "$" ;
      break;
    case  goil_lexique_1_ALARMCALLBACKNAME:
      s << "$"
        << "ALARMCALLBACKNAME"
        << "$" ;
      break;
    case  goil_lexique_1_ALARMTIME:
      s << "$"
        << "ALARMTIME"
        << "$" ;
      break;
    case  goil_lexique_1_CYCLETIME:
      s << "$"
        << "CYCLETIME"
        << "$" ;
      break;
    case  goil_lexique_1_INCREMENTCOUNTER:
      s << "$"
        << "INCREMENTCOUNTER"
        << "$" ;
      break;
    case  goil_lexique_1_RESOURCEPROPERTY:
      s << "$"
        << "RESOURCEPROPERTY"
        << "$" ;
      break;
    case  goil_lexique_1_STANDARD:
      s << "$"
        << "STANDARD"
        << "$" ;
      break;
    case  goil_lexique_1_LINKED:
      s << "$"
        << "LINKED"
        << "$" ;
      break;
    case  goil_lexique_1_LINKEDRESOURCE:
      s << "$"
        << "LINKEDRESOURCE"
        << "$" ;
      break;
    case  goil_lexique_1_INTERNAL:
      s << "$"
        << "INTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_MESSAGEPROPERTY:
      s << "$"
        << "MESSAGEPROPERTY"
        << "$" ;
      break;
    case  goil_lexique_1_NOTIFICATION:
      s << "$"
        << "NOTIFICATION"
        << "$" ;
      break;
    case  goil_lexique_1_NOTIFICATIONERROR:
      s << "$"
        << "NOTIFICATIONERROR"
        << "$" ;
      break;
    case  goil_lexique_1_SEND_5FSTATIC_5FINTERNAL:
      s << "$"
        << "SEND_STATIC_INTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_SEND_5FSTATIC_5FEXTERNAL:
      s << "$"
        << "SEND_STATIC_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_SEND_5FDYNAMIC_5FEXTERNAL:
      s << "$"
        << "SEND_DYNAMIC_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_SEND_5FZERO_5FINTERNAL:
      s << "$"
        << "SEND_ZERO_INTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_SEND_5FZERO_5FEXTERNAL:
      s << "$"
        << "SEND_ZERO_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FZERO_5FINTERNAL:
      s << "$"
        << "RECEIVE_ZERO_INTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FZERO_5FEXTERNAL:
      s << "$"
        << "RECEIVE_ZERO_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FUNQUEUED_5FINTERNAL:
      s << "$"
        << "RECEIVE_UNQUEUED_INTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FQUEUED_5FINTERNAL:
      s << "$"
        << "RECEIVE_QUEUED_INTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FUNQUEUED_5FEXTERNAL:
      s << "$"
        << "RECEIVE_UNQUEUED_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FQUEUED_5FEXTERNAL:
      s << "$"
        << "RECEIVE_QUEUED_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FDYNAMIC_5FEXTERNAL:
      s << "$"
        << "RECEIVE_DYNAMIC_EXTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVE_5FZERO_5FSENDERS:
      s << "$"
        << "RECEIVE_ZERO_SENDERS"
        << "$" ;
      break;
    case  goil_lexique_1_CDATATYPE:
      s << "$"
        << "CDATATYPE"
        << "$" ;
      break;
    case  goil_lexique_1_SENDINGMESSAGE:
      s << "$"
        << "SENDINGMESSAGE"
        << "$" ;
      break;
    case  goil_lexique_1_NONE:
      s << "$"
        << "NONE"
        << "$" ;
      break;
    case  goil_lexique_1_COMCALLBACK:
      s << "$"
        << "COMCALLBACK"
        << "$" ;
      break;
    case  goil_lexique_1_COMCALLBACKNAME:
      s << "$"
        << "COMCALLBACKNAME"
        << "$" ;
      break;
    case  goil_lexique_1_INMCALLBACK:
      s << "$"
        << "INMCALLBACK"
        << "$" ;
      break;
    case  goil_lexique_1_CALLBACKROUTINENAME:
      s << "$"
        << "CALLBACKROUTINENAME"
        << "$" ;
      break;
    case  goil_lexique_1_MONITOREDIPDU:
      s << "$"
        << "MONITOREDIPDU"
        << "$" ;
      break;
    case  goil_lexique_1_TRANSFERPROPERTY:
      s << "$"
        << "TRANSFERPROPERTY"
        << "$" ;
      break;
    case  goil_lexique_1_TRIGGERED:
      s << "$"
        << "TRIGGERED"
        << "$" ;
      break;
    case  goil_lexique_1_PENDING:
      s << "$"
        << "PENDING"
        << "$" ;
      break;
    case  goil_lexique_1_NETWORKMESSAGE:
      s << "$"
        << "NETWORKMESSAGE"
        << "$" ;
      break;
    case  goil_lexique_1_FILTER:
      s << "$"
        << "FILTER"
        << "$" ;
      break;
    case  goil_lexique_1_ALWAYS:
      s << "$"
        << "ALWAYS"
        << "$" ;
      break;
    case  goil_lexique_1_NEVER:
      s << "$"
        << "NEVER"
        << "$" ;
      break;
    case  goil_lexique_1_MASKEDNEWEQUALSX:
      s << "$"
        << "MASKEDNEWEQUALSX"
        << "$" ;
      break;
    case  goil_lexique_1_MASKEDNEWDIFFERSX:
      s << "$"
        << "MASKEDNEWDIFFERSX"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISEQUAL:
      s << "$"
        << "NEWISEQUAL"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISDIFFERENT:
      s << "$"
        << "NEWISDIFFERENT"
        << "$" ;
      break;
    case  goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD:
      s << "$"
        << "MASKEDNEWEQUALSMASKEDOLD"
        << "$" ;
      break;
    case  goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD:
      s << "$"
        << "MASKEDNEWDIFFERSMASKEDOLD"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISWITHIN:
      s << "$"
        << "NEWISWITHIN"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISOUTSIDE:
      s << "$"
        << "NEWISOUTSIDE"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISGREATER:
      s << "$"
        << "NEWISGREATER"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISLESSOREQUAL:
      s << "$"
        << "NEWISLESSOREQUAL"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISLESS:
      s << "$"
        << "NEWISLESS"
        << "$" ;
      break;
    case  goil_lexique_1_NEWISGREATEROREQUAL:
      s << "$"
        << "NEWISGREATEROREQUAL"
        << "$" ;
      break;
    case  goil_lexique_1_ONEEVERYN:
      s << "$"
        << "ONEEVERYN"
        << "$" ;
      break;
    case  goil_lexique_1_MIN:
      s << "$"
        << "MIN"
        << "$" ;
      break;
    case  goil_lexique_1_MAX:
      s << "$"
        << "MAX"
        << "$" ;
      break;
    case  goil_lexique_1_X:
      s << "$"
        << "X"
        << "$" ;
      break;
    case  goil_lexique_1_PERIOD:
      s << "$"
        << "PERIOD"
        << "$" ;
      break;
    case  goil_lexique_1_OFFSET:
      s << "$"
        << "OFFSET"
        << "$" ;
      break;
    case  goil_lexique_1_NETWORKORDERCALLOUT:
      s << "$"
        << "NETWORKORDERCALLOUT"
        << "$" ;
      break;
    case  goil_lexique_1_CPUORDERCALLOUT:
      s << "$"
        << "CPUORDERCALLOUT"
        << "$" ;
      break;
    case  goil_lexique_1_INITIALVALUE:
      s << "$"
        << "INITIALVALUE"
        << "$" ;
      break;
    case  goil_lexique_1_QUEUESIZE:
      s << "$"
        << "QUEUESIZE"
        << "$" ;
      break;
    case  goil_lexique_1_LINK:
      s << "$"
        << "LINK"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVEMESSAGE:
      s << "$"
        << "RECEIVEMESSAGE"
        << "$" ;
      break;
    case  goil_lexique_1_FLAG:
      s << "$"
        << "FLAG"
        << "$" ;
      break;
    case  goil_lexique_1_FLAGNAME:
      s << "$"
        << "FLAGNAME"
        << "$" ;
      break;
    case  goil_lexique_1_STATIC:
      s << "$"
        << "STATIC"
        << "$" ;
      break;
    case  goil_lexique_1_DYNAMIC:
      s << "$"
        << "DYNAMIC"
        << "$" ;
      break;
    case  goil_lexique_1_ZERO:
      s << "$"
        << "ZERO"
        << "$" ;
      break;
    case  goil_lexique_1_SIZEINBITS:
      s << "$"
        << "SIZEINBITS"
        << "$" ;
      break;
    case  goil_lexique_1_MAXSIZEINBITS:
      s << "$"
        << "MAXSIZEINBITS"
        << "$" ;
      break;
    case  goil_lexique_1_BITORDERING:
      s << "$"
        << "BITORDERING"
        << "$" ;
      break;
    case  goil_lexique_1_BIGENDIAN:
      s << "$"
        << "BIGENDIAN"
        << "$" ;
      break;
    case  goil_lexique_1_LITTLEENDIAN:
      s << "$"
        << "LITTLEENDIAN"
        << "$" ;
      break;
    case  goil_lexique_1_BITPOSITION:
      s << "$"
        << "BITPOSITION"
        << "$" ;
      break;
    case  goil_lexique_1_DATAINTERPRETATION:
      s << "$"
        << "DATAINTERPRETATION"
        << "$" ;
      break;
    case  goil_lexique_1_UNSIGNEDINTEGER:
      s << "$"
        << "UNSIGNEDINTEGER"
        << "$" ;
      break;
    case  goil_lexique_1_BYTEARRAY:
      s << "$"
        << "BYTEARRAY"
        << "$" ;
      break;
    case  goil_lexique_1_DIRECTION:
      s << "$"
        << "DIRECTION"
        << "$" ;
      break;
    case  goil_lexique_1_SENT:
      s << "$"
        << "SENT"
        << "$" ;
      break;
    case  goil_lexique_1_RECEIVED:
      s << "$"
        << "RECEIVED"
        << "$" ;
      break;
    case  goil_lexique_1_COMTIMEBASE:
      s << "$"
        << "COMTIMEBASE"
        << "$" ;
      break;
    case  goil_lexique_1_COMERRORHOOK:
      s << "$"
        << "COMERRORHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_COMUSEGETSERVICEID:
      s << "$"
        << "COMUSEGETSERVICEID"
        << "$" ;
      break;
    case  goil_lexique_1_COMUSEPARAMETERACCESS:
      s << "$"
        << "COMUSEPARAMETERACCESS"
        << "$" ;
      break;
    case  goil_lexique_1_COMSTARTCOMEXTENSION:
      s << "$"
        << "COMSTARTCOMEXTENSION"
        << "$" ;
      break;
    case  goil_lexique_1_COMAPPMODE:
      s << "$"
        << "COMAPPMODE"
        << "$" ;
      break;
    case  goil_lexique_1_COMSTATUS:
      s << "$"
        << "COMSTATUS"
        << "$" ;
      break;
    case  goil_lexique_1_USE:
      s << "$"
        << "USE"
        << "$" ;
      break;
    case  goil_lexique_1_COMEXTENDED:
      s << "$"
        << "COMEXTENDED"
        << "$" ;
      break;
    case  goil_lexique_1_COMSTANDARD:
      s << "$"
        << "COMSTANDARD"
        << "$" ;
      break;
    case  goil_lexique_1_IPDUPROPERTY:
      s << "$"
        << "IPDUPROPERTY"
        << "$" ;
      break;
    case  goil_lexique_1_IPDUCALLOUT:
      s << "$"
        << "IPDUCALLOUT"
        << "$" ;
      break;
    case  goil_lexique_1_LAYERUSED:
      s << "$"
        << "LAYERUSED"
        << "$" ;
      break;
    case  goil_lexique_1_TRANSMISSIONMODE:
      s << "$"
        << "TRANSMISSIONMODE"
        << "$" ;
      break;
    case  goil_lexique_1_DIRECT:
      s << "$"
        << "DIRECT"
        << "$" ;
      break;
    case  goil_lexique_1_PERIODIC:
      s << "$"
        << "PERIODIC"
        << "$" ;
      break;
    case  goil_lexique_1_MIXED:
      s << "$"
        << "MIXED"
        << "$" ;
      break;
    case  goil_lexique_1_TIMEOUT:
      s << "$"
        << "TIMEOUT"
        << "$" ;
      break;
    case  goil_lexique_1_FIRTSTIMEOUT:
      s << "$"
        << "FIRTSTIMEOUT"
        << "$" ;
      break;
    case  goil_lexique_1_MINIMUMDELAYTIME:
      s << "$"
        << "MINIMUMDELAYTIME"
        << "$" ;
      break;
    case  goil_lexique_1_TIMEPERIOD:
      s << "$"
        << "TIMEPERIOD"
        << "$" ;
      break;
    case  goil_lexique_1_TIMEOFFSET:
      s << "$"
        << "TIMEOFFSET"
        << "$" ;
      break;
    case  goil_lexique_1_NON:
      s << "$"
        << "NON"
        << "$" ;
      break;
    case  goil_lexique_1_FULL:
      s << "$"
        << "FULL"
        << "$" ;
      break;
    case  goil_lexique_1_FALSE:
      s << "$"
        << "FALSE"
        << "$" ;
      break;
    case  goil_lexique_1_TRUE:
      s << "$"
        << "TRUE"
        << "$" ;
      break;
    case  goil_lexique_1_PROTECTIONHOOK:
      s << "$"
        << "PROTECTIONHOOK"
        << "$" ;
      break;
    case  goil_lexique_1_SCALABILITYCLASS:
      s << "$"
        << "SCALABILITYCLASS"
        << "$" ;
      break;
    case  goil_lexique_1_STACKMONITORING:
      s << "$"
        << "STACKMONITORING"
        << "$" ;
      break;
    case  goil_lexique_1_TIMING_5FPROTECTION:
      s << "$"
        << "TIMING_PROTECTION"
        << "$" ;
      break;
    case  goil_lexique_1_ACCESSING_5FAPPLICATION:
      s << "$"
        << "ACCESSING_APPLICATION"
        << "$" ;
      break;
    case  goil_lexique_1_SC1:
      s << "$"
        << "SC1"
        << "$" ;
      break;
    case  goil_lexique_1_SC2:
      s << "$"
        << "SC2"
        << "$" ;
      break;
    case  goil_lexique_1_SC3:
      s << "$"
        << "SC3"
        << "$" ;
      break;
    case  goil_lexique_1_SC4:
      s << "$"
        << "SC4"
        << "$" ;
      break;
    case  goil_lexique_1_SCHEDULETABLE:
      s << "$"
        << "SCHEDULETABLE"
        << "$" ;
      break;
    case  goil_lexique_1_APPLICATION:
      s << "$"
        << "APPLICATION"
        << "$" ;
      break;
    case  goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION:
      s << "$"
        << "LOCAL_TO_GLOBAL_TIME_SYNCHRONIZATION"
        << "$" ;
      break;
    case  goil_lexique_1_SYNC_5FSTRATEGY:
      s << "$"
        << "SYNC_STRATEGY"
        << "$" ;
      break;
    case  goil_lexique_1_MAX_5FINCREASE:
      s << "$"
        << "MAX_INCREASE"
        << "$" ;
      break;
    case  goil_lexique_1_MAX_5FDECREASE:
      s << "$"
        << "MAX_DECREASE"
        << "$" ;
      break;
    case  goil_lexique_1_MAX_5FINCREASE_5FASYNC:
      s << "$"
        << "MAX_INCREASE_ASYNC"
        << "$" ;
      break;
    case  goil_lexique_1_MAX_5FDECREASE_5FASYNC:
      s << "$"
        << "MAX_DECREASE_ASYNC"
        << "$" ;
      break;
    case  goil_lexique_1_PRECISION:
      s << "$"
        << "PRECISION"
        << "$" ;
      break;
    case  goil_lexique_1_LENGTH:
      s << "$"
        << "LENGTH"
        << "$" ;
      break;
    case  goil_lexique_1_ABSOLUTE:
      s << "$"
        << "ABSOLUTE"
        << "$" ;
      break;
    case  goil_lexique_1_RELATIVE:
      s << "$"
        << "RELATIVE"
        << "$" ;
      break;
    case  goil_lexique_1_SYNCHRON:
      s << "$"
        << "SYNCHRON"
        << "$" ;
      break;
    case  goil_lexique_1_TRUSTED:
      s << "$"
        << "TRUSTED"
        << "$" ;
      break;
    case  goil_lexique_1_HAS_5FRESTARTTASK:
      s << "$"
        << "HAS_RESTARTTASK"
        << "$" ;
      break;
    case  goil_lexique_1_RESTARTTASK:
      s << "$"
        << "RESTARTTASK"
        << "$" ;
      break;
    case  goil_lexique_1_TRUSTED_5FFUNCTION:
      s << "$"
        << "TRUSTED_FUNCTION"
        << "$" ;
      break;
    case  goil_lexique_1_NAME:
      s << "$"
        << "NAME"
        << "$" ;
      break;
    case  goil_lexique_1_EXECUTIONBUDGET:
      s << "$"
        << "EXECUTIONBUDGET"
        << "$" ;
      break;
    case  goil_lexique_1_EXECUTIONTIME:
      s << "$"
        << "EXECUTIONTIME"
        << "$" ;
      break;
    case  goil_lexique_1_COUNTLIMIT:
      s << "$"
        << "COUNTLIMIT"
        << "$" ;
      break;
    case  goil_lexique_1_TIMEFRAME:
      s << "$"
        << "TIMEFRAME"
        << "$" ;
      break;
    case  goil_lexique_1_MAXOSINTERRUPTLOCKTIME:
      s << "$"
        << "MAXOSINTERRUPTLOCKTIME"
        << "$" ;
      break;
    case  goil_lexique_1_MAXALLINTERRUPTLOCKTIME:
      s << "$"
        << "MAXALLINTERRUPTLOCKTIME"
        << "$" ;
      break;
    case  goil_lexique_1_LOCKINGTIME:
      s << "$"
        << "LOCKINGTIME"
        << "$" ;
      break;
    case  goil_lexique_1_RESOURCELOCK:
      s << "$"
        << "RESOURCELOCK"
        << "$" ;
      break;
    case  goil_lexique_1_MAXRESOURCELOCKTIME:
      s << "$"
        << "MAXRESOURCELOCKTIME"
        << "$" ;
      break;
    case  goil_lexique_1_SMOOTH:
      s << "$"
        << "SMOOTH"
        << "$" ;
      break;
    case  goil_lexique_1_HARD:
      s << "$"
        << "HARD"
        << "$" ;
      break;
    case  goil_lexique_1_TICKS:
      s << "$"
        << "TICKS"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_NANOSECONDS:
      s << "$"
        << "NANOSECONDS"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1_SOFTWARE:
      s << "$"
        << "SOFTWARE"
        << "$" ;
      break;
    case  goil_lexique_1_HARDWARE:
      s << "$"
        << "HARDWARE"
        << "$" ;
      break;
    case  goil_lexique_1_OSINTERNAL:
      s << "$"
        << "OSINTERNAL"
        << "$" ;
      break;
    case  goil_lexique_1_GPT:
      s << "$"
        << "GPT"
        << "$" ;
      break;
    case  goil_lexique_1_NS_5FPER_5FHW_5FTICK:
      s << "$"
        << "NS_PER_HW_TICK"
        << "$" ;
      break;
    case  goil_lexique_1_GPTCHANNELNAME:
      s << "$"
        << "GPTCHANNELNAME"
        << "$" ;
      break;
    case  goil_lexique_1_DRIVER:
      s << "$"
        << "DRIVER"
        << "$" ;
      break;
    case  goil_lexique_1_TIMECONSTANTS:
      s << "$"
        << "TIMECONSTANTS"
        << "$" ;
      break;
    case  goil_lexique_1_TIMECONSTANT:
      s << "$"
        << "TIMECONSTANT"
        << "$" ;
      break;
    case  goil_lexique_1_NS:
      s << "$"
        << "NS"
        << "$" ;
      break;
    case  goil_lexique_1_CONSTNAME:
      s << "$"
        << "CONSTNAME"
        << "$" ;
      break;
    case  goil_lexique_1_SOURCE:
      s << "$"
        << "SOURCE"
        << "$" ;
      break;
    case  goil_lexique_1_comment:
      s << "$"
        << "comment"
        << "$" ;
      break;
    case  goil_lexique_1_idf:
      s << "$"
        << "idf"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    case  goil_lexique_1__3B:
      s << "$"
        << ";"
        << "$" ;
      break;
    case  goil_lexique_1__3A:
      s << "$"
        << ":"
        << "$" ;
      break;
    case  goil_lexique_1__3D:
      s << "$"
        << "="
        << "$" ;
      break;
    case  goil_lexique_1__7B:
      s << "$"
        << "{"
        << "$" ;
      break;
    case  goil_lexique_1__7D:
      s << "$"
        << "}"
        << "$" ;
      break;
    case  goil_lexique_1__2E_2E:
      s << "$"
        << ".."
        << "$" ;
      break;
    case  goil_lexique_1__5B:
      s << "$"
        << "["
        << "$" ;
      break;
    case  goil_lexique_1__5D:
      s << "$"
        << "]"
        << "$" ;
      break;
    case  goil_lexique_1__2C:
      s << "$"
        << ","
        << "$" ;
      break;
    case  goil_lexique_1__2E:
      s << "$"
        << "."
        << "$" ;
      break;
    case  goil_lexique_1__2D:
      s << "$"
        << "-"
        << "$" ;
      break;
    case  goil_lexique_1_string:
      s << "$"
        << "string"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->a_string) ;
      break;
    case  goil_lexique_1_g_5Fstring:
      s << "$"
        << "g_string"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->a_string) ;
      break;
    case  goil_lexique_1_uint_5Fnumber:
      s << "$"
        << "uint_number"
        << "$" ;
      s << " " ;
      s.appendUnsigned64 (_p->integerNumber) ;
      break;
    case  goil_lexique_1_float_5Fnumber:
      s << "$"
        << "float_number"
        << "$" ;
      s << " " ;
      s.appendDouble (_p->floatNumber) ;
      break;
    case  goil_lexique_1_set_5Fstart_5Fuint_5Fnumber:
      s << "$"
        << "set_start_uint_number"
        << "$" ;
      s << " " ;
      s.appendUnsigned64 (_p->integerNumber) ;
      break;
    case  goil_lexique_1_include:
      s << "$"
        << "include"
        << "$" ;
      break;
    case  goil_lexique_1_command:
      s << "$"
        << "command"
        << "$" ;
    s << " " ;
    s.appendCLiteralStringConstant (_p->att_token) ;
      break;
    default:
      break ;
    }
  }
  return s ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      U N I C O D E    S T R I N G S                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- Unicode string for '*/'
static const utf32 kUnicodeString__2F__2A_ [] = {
  TO_UNICODE ('*'),
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ','
static const utf32 kUnicodeString__2C_ [] = {
  TO_UNICODE (','),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '-'
static const utf32 kUnicodeString__2D_ [] = {
  TO_UNICODE ('-'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '.'
static const utf32 kUnicodeString__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '..'
static const utf32 kUnicodeString__2E__2E_ [] = {
  TO_UNICODE ('.'),
  TO_UNICODE ('.'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '/*'
static const utf32 kUnicodeString__2A__2F_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE ('*'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '//'
static const utf32 kUnicodeString__2F__2F_ [] = {
  TO_UNICODE ('/'),
  TO_UNICODE ('/'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '0X'
static const utf32 kUnicodeString_X0 [] = {
  TO_UNICODE ('0'),
  TO_UNICODE ('X'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '0x'
static const utf32 kUnicodeString_x0 [] = {
  TO_UNICODE ('0'),
  TO_UNICODE ('x'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ':'
static const utf32 kUnicodeString__3A_ [] = {
  TO_UNICODE (':'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ';'
static const utf32 kUnicodeString__3B_ [] = {
  TO_UNICODE (';'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '='
static const utf32 kUnicodeString__3D_ [] = {
  TO_UNICODE ('='),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '['
static const utf32 kUnicodeString__5B_ [] = {
  TO_UNICODE ('['),
  TO_UNICODE (0)
} ; 

//--- Unicode string for ']'
static const utf32 kUnicodeString__5D_ [] = {
  TO_UNICODE (']'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '{'
static const utf32 kUnicodeString__7B_ [] = {
  TO_UNICODE ('{'),
  TO_UNICODE (0)
} ; 

//--- Unicode string for '}'
static const utf32 kUnicodeString__7D_ [] = {
  TO_UNICODE ('}'),
  TO_UNICODE (0)
} ; 

//---------------------------------------------------------------------------*
//                                                                           *
//                            parseLexicalToken                              *
//                                                                           *
//---------------------------------------------------------------------------*

bool goil_lexique::
parseLexicalToken (void) {
  cTokenFor_goil_lexique token ;
  bool loop = true ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
    token.att_token.setLengthToZero () ;
    token.a_string.setLengthToZero () ;
    token.integerNumber = 0 ;
    token.floatNumber = 0.0 ;
    token.number.setLengthToZero () ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32String (kUnicodeString__2F__2F_, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
      }else if (testForInputUTF32String (kUnicodeString__2A__2F_, 2, true)) {
        do {
          if (notTestForInputUTF32String (kUnicodeString__2F__2A_, 2, gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE)) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_action_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_oilVersion (token.att_token) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_makefileKeywords (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_oilDefinitions (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_objList (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_dataTypes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_miscSpecifiers (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_objectRefType (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_os_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_trace_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_task_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_counter_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_as_counter_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_alarm_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_resource_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_message_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_networkmessage_attribute (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_com_attribute (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_ipdu_attribute (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_scheduling (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_boolean (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_attr (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_key (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_objs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_schedtable_attrs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autostart_attrs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_application_attrs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_sync_strategy (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_timing_prot_attribs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_unit (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_cpt_type_attr (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_it_src_attr (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = goil_lexique_1_idf ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = goil_lexique_1__2E_2E ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = goil_lexique_1__3B ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = goil_lexique_1__3A ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__3D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = goil_lexique_1__7B ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__7D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = goil_lexique_1__5B ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__5D ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = goil_lexique_1__2C ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2E_, 1, true)) {
        token.mTokenCode = goil_lexique_1__2E ;
        enterToken (token) ;
      }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__2D ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (' '), TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE (65533))) {
            ::scanner_action_enterCharacterIntoString (*this, token.a_string, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = goil_lexique_1_string ;
          enterToken (token) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (' '), TO_UNICODE ('=')) ||
              testForInputUTF32CharRange (TO_UNICODE ('\?'), TO_UNICODE (65533))) {
            ::scanner_action_enterCharacterIntoString (*this, token.a_string, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('>'))) {
          token.mTokenCode = goil_lexique_1_g_5Fstring ;
          enterToken (token) ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32String (kUnicodeString_x0, 2, true) ||
          testForInputUTF32String (kUnicodeString_X0, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9')) ||
              testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('f')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('F'))) {
            ::scanner_action_enterHexDigitIntoUInt64 (*this, previousChar (), token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = goil_lexique_1_uint_5Fnumber ;
        enterToken (token) ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        do {
          ::scanner_action_enterCharacterIntoString (*this, token.number, previousChar ()) ;
          ::scanner_action_enterDigitIntoUInt64 (*this, previousChar (), token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('.'))) {
          if (testForInputUTF32Char (TO_UNICODE ('.'))) {
            token.mTokenCode = goil_lexique_1_set_5Fstart_5Fuint_5Fnumber ;
            enterToken (token) ;
          }else{
            do {
              ::scanner_action_enterCharacterIntoString (*this, token.number, previousChar ()) ;
              if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              }else{
                loop = false ;
              }
            }while (loop) ;
            loop = true ;
            ::scanner_action_convertStringToDouble (*this, token.number, token.floatNumber, gErrorMessage_4) ;
            token.mTokenCode = goil_lexique_1_float_5Fnumber ;
            enterToken (token) ;
          }
        }else{
          token.mTokenCode = goil_lexique_1_uint_5Fnumber ;
          enterToken (token) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
            ::scanner_action_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_commands (token.att_token) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = goil_lexique_1_command ;
        }
        enterToken (token) ;
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = goil_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }
  if ((UNICODE_VALUE (mCurrentChar) == '\0') && (token.mTemplateStringBeforeToken.length () > 0)) {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   parseLexicalTokenForLexicalColoring                     *
//                                                                           *
//---------------------------------------------------------------------------*

sint16 goil_lexique::
parseLexicalTokenForLexicalColoring (void) {
  cTokenFor_goil_lexique token ;
  bool loop = true ;
  token.mTokenCode = -1 ;
  while (token.mTokenCode < 0) {
    token.att_token.setLengthToZero () ;
    token.a_string.setLengthToZero () ;
    token.integerNumber = 0 ;
    token.floatNumber = 0.0 ;
    token.number.setLengthToZero () ;
    mTokenFirstLocation = mCurrentLocation ;
    try{
      if (testForInputUTF32String (kUnicodeString__2F__2F_, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE ('\t')) ||
              testForInputUTF32Char (TO_UNICODE ('\v')) ||
              testForInputUTF32Char (TO_UNICODE ('\f')) ||
              testForInputUTF32CharRange (TO_UNICODE (14), TO_UNICODE (65533))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = goil_lexique_1_comment ;
      }else if (testForInputUTF32String (kUnicodeString__2A__2F_, 2, true)) {
        do {
          if (notTestForInputUTF32String (kUnicodeString__2F__2A_, 2, gErrorMessage_0 COMMA_LINE_AND_SOURCE_FILE)) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = goil_lexique_1_comment ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
          testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
        do {
          ::scanner_action_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z')) ||
              testForInputUTF32Char (TO_UNICODE ('_')) ||
              testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_oilVersion (token.att_token) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_makefileKeywords (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_oilDefinitions (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_objList (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_dataTypes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_miscSpecifiers (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_objectRefType (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_os_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_trace_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_task_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_counter_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_as_counter_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_alarm_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_resource_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_message_attributes (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_networkmessage_attribute (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_com_attribute (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_ipdu_attribute (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_scheduling (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_boolean (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_attr (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_key (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autosar_objs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_schedtable_attrs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_autostart_attrs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_application_attrs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_sync_strategy (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_timing_prot_attribs (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_unit (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_cpt_type_attr (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = search_into_it_src_attr (token.att_token) ;
        }
        if (token.mTokenCode == -1) {
          token.mTokenCode = goil_lexique_1_idf ;
        }
      }else if (testForInputUTF32String (kUnicodeString__2E__2E_, 2, true)) {
        token.mTokenCode = goil_lexique_1__2E_2E ;
      }else if (testForInputUTF32String (kUnicodeString__3B_, 1, true)) {
        token.mTokenCode = goil_lexique_1__3B ;
      }else if (testForInputUTF32String (kUnicodeString__3A_, 1, true)) {
        token.mTokenCode = goil_lexique_1__3A ;
      }else if (testForInputUTF32String (kUnicodeString__3D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__3D ;
      }else if (testForInputUTF32String (kUnicodeString__7B_, 1, true)) {
        token.mTokenCode = goil_lexique_1__7B ;
      }else if (testForInputUTF32String (kUnicodeString__7D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__7D ;
      }else if (testForInputUTF32String (kUnicodeString__5B_, 1, true)) {
        token.mTokenCode = goil_lexique_1__5B ;
      }else if (testForInputUTF32String (kUnicodeString__5D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__5D ;
      }else if (testForInputUTF32String (kUnicodeString__2C_, 1, true)) {
        token.mTokenCode = goil_lexique_1__2C ;
      }else if (testForInputUTF32String (kUnicodeString__2E_, 1, true)) {
        token.mTokenCode = goil_lexique_1__2E ;
      }else if (testForInputUTF32String (kUnicodeString__2D_, 1, true)) {
        token.mTokenCode = goil_lexique_1__2D ;
      }else if (testForInputUTF32CharRange (TO_UNICODE (1), TO_UNICODE (' '))) {
      }else if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (' '), TO_UNICODE ('!')) ||
              testForInputUTF32CharRange (TO_UNICODE ('#'), TO_UNICODE (65533))) {
            ::scanner_action_enterCharacterIntoString (*this, token.a_string, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('\"'))) {
          token.mTokenCode = goil_lexique_1_string ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('<'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE (' '), TO_UNICODE ('=')) ||
              testForInputUTF32CharRange (TO_UNICODE ('\?'), TO_UNICODE (65533))) {
            ::scanner_action_enterCharacterIntoString (*this, token.a_string, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('>'))) {
          token.mTokenCode = goil_lexique_1_g_5Fstring ;
        }else{
          lexicalError (gErrorMessage_3 COMMA_LINE_AND_SOURCE_FILE) ;
        }
      }else if (testForInputUTF32String (kUnicodeString_x0, 2, true) ||
          testForInputUTF32String (kUnicodeString_X0, 2, true)) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9')) ||
              testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('f')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('F'))) {
            ::scanner_action_enterHexDigitIntoUInt64 (*this, previousChar (), token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = goil_lexique_1_uint_5Fnumber ;
      }else if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
        do {
          ::scanner_action_enterCharacterIntoString (*this, token.number, previousChar ()) ;
          ::scanner_action_enterDigitIntoUInt64 (*this, previousChar (), token.integerNumber, gErrorMessage_2, gErrorMessage_1) ;
          if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        if (testForInputUTF32Char (TO_UNICODE ('.'))) {
          if (testForInputUTF32Char (TO_UNICODE ('.'))) {
            token.mTokenCode = goil_lexique_1_set_5Fstart_5Fuint_5Fnumber ;
          }else{
            do {
              ::scanner_action_enterCharacterIntoString (*this, token.number, previousChar ()) ;
              if (testForInputUTF32CharRange (TO_UNICODE ('0'), TO_UNICODE ('9'))) {
              }else{
                loop = false ;
              }
            }while (loop) ;
            loop = true ;
            ::scanner_action_convertStringToDouble (*this, token.number, token.floatNumber, gErrorMessage_4) ;
            token.mTokenCode = goil_lexique_1_float_5Fnumber ;
          }
        }else{
          token.mTokenCode = goil_lexique_1_uint_5Fnumber ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('#'))) {
        do {
          if (testForInputUTF32CharRange (TO_UNICODE ('a'), TO_UNICODE ('z')) ||
              testForInputUTF32CharRange (TO_UNICODE ('A'), TO_UNICODE ('Z'))) {
            ::scanner_action_enterCharacterIntoString (*this, token.att_token, previousChar ()) ;
          }else{
            loop = false ;
          }
        }while (loop) ;
        loop = true ;
        token.mTokenCode = search_into_commands (token.att_token) ;
        if (token.mTokenCode == -1) {
          token.mTokenCode = goil_lexique_1_command ;
        }
      }else if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
        token.mTokenCode = goil_lexique_1_ ; // Empty string code
      }else{ // Unknown input character
        unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      }
    }catch (const C_lexicalErrorException &) {
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
      throw ;
    }
  }
  return token.mTokenCode ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Styles definition                              *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 goil_lexique::getStylesCount (void) {
  return 10 ;
}

//---------------------------------------------------------------------------*

const char * goil_lexique::getStyleName (const sint32 inIndex) {
  const char * kStylesArray [11] = {"Default style", "Keywords:", "Identifiers:", "Delimiters:", "String literals:", "Path String:", "Integer Literals:", "Floating Point Literals:", "Commands:", "Comments:", NULL} ;
  return (inIndex < 10) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

const char * goil_lexique::getStyleIdentifier (const sint32 inIndex) {
  const char * kStylesArray [11] = {"", "keywordsStyle", "identifierStyle", "delimitersStyle", "stringStyle", "pathStyle", "integerStyle", "floatStyle", "commandStyle", "commentStyle", NULL} ;
  return (inIndex < 10) ? kStylesArray [inIndex] : NULL ;
} ;

//---------------------------------------------------------------------------*

uint8 goil_lexique::
terminalStyleIndex (const sint32 inTerminal) {
  static const uint8 kTerminalSymbolStyles [260] = {0,
    1 /* goil_lexique_1_APP_5FSRC */,
    1 /* goil_lexique_1_CFLAGS */,
    1 /* goil_lexique_1_ASFLAGS */,
    1 /* goil_lexique_1_LDFLAGS */,
    1 /* goil_lexique_1_APP_5FNAME */,
    1 /* goil_lexique_1_TRAMPOLINE_5FBASE_5FPATH */,
    1 /* goil_lexique_1_OIL_5FVERSION */,
    1 /* goil_lexique_1_IMPLEMENTATION */,
    1 /* goil_lexique_1_OS */,
    1 /* goil_lexique_1_TASK */,
    1 /* goil_lexique_1_COUNTER */,
    1 /* goil_lexique_1_ALARM */,
    1 /* goil_lexique_1_RESOURCE */,
    1 /* goil_lexique_1_EVENT */,
    1 /* goil_lexique_1_ISR */,
    1 /* goil_lexique_1_MESSAGE */,
    1 /* goil_lexique_1_COM */,
    1 /* goil_lexique_1_NM */,
    1 /* goil_lexique_1_APPMODE */,
    1 /* goil_lexique_1_IPDU */,
    1 /* goil_lexique_1_CPU */,
    1 /* goil_lexique_1_UINT32 */,
    1 /* goil_lexique_1_INT32 */,
    1 /* goil_lexique_1_UINT64 */,
    1 /* goil_lexique_1_INT64 */,
    1 /* goil_lexique_1_FLOAT */,
    1 /* goil_lexique_1_ENUM */,
    1 /* goil_lexique_1_STRING */,
    1 /* goil_lexique_1_BOOLEAN */,
    1 /* goil_lexique_1_WITH_5FAUTO */,
    1 /* goil_lexique_1_NO_5FDEFAULT */,
    1 /* goil_lexique_1_AUTO */,
    1 /* goil_lexique_1_MASK */,
    1 /* goil_lexique_1_CATEGORY */,
    1 /* goil_lexique_1_OS_5FTYPE */,
    1 /* goil_lexique_1_TASK_5FTYPE */,
    1 /* goil_lexique_1_COUNTER_5FTYPE */,
    1 /* goil_lexique_1_ALARM_5FTYPE */,
    1 /* goil_lexique_1_RESOURCE_5FTYPE */,
    1 /* goil_lexique_1_EVENT_5FTYPE */,
    1 /* goil_lexique_1_ISR_5FTYPE */,
    1 /* goil_lexique_1_MESSAGE_5FTYPE */,
    1 /* goil_lexique_1_COM_5FTYPE */,
    1 /* goil_lexique_1_NM_5FTYPE */,
    1 /* goil_lexique_1_APPMODE_5FTYPE */,
    1 /* goil_lexique_1_IPDU_5FTYPE */,
    1 /* goil_lexique_1_STATUS */,
    1 /* goil_lexique_1_EXTENDED */,
    1 /* goil_lexique_1_STARTUPHOOK */,
    1 /* goil_lexique_1_ERRORHOOK */,
    1 /* goil_lexique_1_SHUTDOWNHOOK */,
    1 /* goil_lexique_1_PRETASKHOOK */,
    1 /* goil_lexique_1_POSTTASKHOOK */,
    1 /* goil_lexique_1_USEGETSERVICEID */,
    1 /* goil_lexique_1_USEPARAMETERACCESS */,
    1 /* goil_lexique_1_USERESSCHEDULER */,
    1 /* goil_lexique_1_SYSTEM_5FCALL */,
    1 /* goil_lexique_1_TRACE */,
    1 /* goil_lexique_1_FILE */,
    1 /* goil_lexique_1_METHOD */,
    1 /* goil_lexique_1_FORMAT */,
    1 /* goil_lexique_1_TRACE_5FTASK */,
    1 /* goil_lexique_1_TRACE_5FISR */,
    1 /* goil_lexique_1_TRACE_5FRESOURCE */,
    1 /* goil_lexique_1_TRACE_5FALARM */,
    1 /* goil_lexique_1_TRACE_5FUSER */,
    1 /* goil_lexique_1_DESCRIPTION */,
    1 /* goil_lexique_1_PRIORITY */,
    1 /* goil_lexique_1_SCHEDULE */,
    1 /* goil_lexique_1_ACTIVATION */,
    1 /* goil_lexique_1_AUTOSTART */,
    1 /* goil_lexique_1_MAXALLOWEDVALUE */,
    1 /* goil_lexique_1_TICKSPERBASE */,
    1 /* goil_lexique_1_MINCYCLE */,
    1 /* goil_lexique_1_TYPE */,
    1 /* goil_lexique_1_UNIT */,
    1 /* goil_lexique_1_ACTION */,
    1 /* goil_lexique_1_SETEVENT */,
    1 /* goil_lexique_1_ACTIVATETASK */,
    1 /* goil_lexique_1_ALARMCALLBACK */,
    1 /* goil_lexique_1_ALARMCALLBACKNAME */,
    1 /* goil_lexique_1_ALARMTIME */,
    1 /* goil_lexique_1_CYCLETIME */,
    1 /* goil_lexique_1_INCREMENTCOUNTER */,
    1 /* goil_lexique_1_RESOURCEPROPERTY */,
    1 /* goil_lexique_1_STANDARD */,
    1 /* goil_lexique_1_LINKED */,
    1 /* goil_lexique_1_LINKEDRESOURCE */,
    1 /* goil_lexique_1_INTERNAL */,
    1 /* goil_lexique_1_MESSAGEPROPERTY */,
    1 /* goil_lexique_1_NOTIFICATION */,
    1 /* goil_lexique_1_NOTIFICATIONERROR */,
    1 /* goil_lexique_1_SEND_5FSTATIC_5FINTERNAL */,
    1 /* goil_lexique_1_SEND_5FSTATIC_5FEXTERNAL */,
    1 /* goil_lexique_1_SEND_5FDYNAMIC_5FEXTERNAL */,
    1 /* goil_lexique_1_SEND_5FZERO_5FINTERNAL */,
    1 /* goil_lexique_1_SEND_5FZERO_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FZERO_5FINTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FZERO_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FUNQUEUED_5FINTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FQUEUED_5FINTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FUNQUEUED_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FQUEUED_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FDYNAMIC_5FEXTERNAL */,
    1 /* goil_lexique_1_RECEIVE_5FZERO_5FSENDERS */,
    1 /* goil_lexique_1_CDATATYPE */,
    1 /* goil_lexique_1_SENDINGMESSAGE */,
    1 /* goil_lexique_1_NONE */,
    1 /* goil_lexique_1_COMCALLBACK */,
    1 /* goil_lexique_1_COMCALLBACKNAME */,
    1 /* goil_lexique_1_INMCALLBACK */,
    1 /* goil_lexique_1_CALLBACKROUTINENAME */,
    1 /* goil_lexique_1_MONITOREDIPDU */,
    1 /* goil_lexique_1_TRANSFERPROPERTY */,
    1 /* goil_lexique_1_TRIGGERED */,
    1 /* goil_lexique_1_PENDING */,
    1 /* goil_lexique_1_NETWORKMESSAGE */,
    1 /* goil_lexique_1_FILTER */,
    1 /* goil_lexique_1_ALWAYS */,
    1 /* goil_lexique_1_NEVER */,
    1 /* goil_lexique_1_MASKEDNEWEQUALSX */,
    1 /* goil_lexique_1_MASKEDNEWDIFFERSX */,
    1 /* goil_lexique_1_NEWISEQUAL */,
    1 /* goil_lexique_1_NEWISDIFFERENT */,
    1 /* goil_lexique_1_MASKEDNEWEQUALSMASKEDOLD */,
    1 /* goil_lexique_1_MASKEDNEWDIFFERSMASKEDOLD */,
    1 /* goil_lexique_1_NEWISWITHIN */,
    1 /* goil_lexique_1_NEWISOUTSIDE */,
    1 /* goil_lexique_1_NEWISGREATER */,
    1 /* goil_lexique_1_NEWISLESSOREQUAL */,
    1 /* goil_lexique_1_NEWISLESS */,
    1 /* goil_lexique_1_NEWISGREATEROREQUAL */,
    1 /* goil_lexique_1_ONEEVERYN */,
    1 /* goil_lexique_1_MIN */,
    1 /* goil_lexique_1_MAX */,
    1 /* goil_lexique_1_X */,
    1 /* goil_lexique_1_PERIOD */,
    1 /* goil_lexique_1_OFFSET */,
    1 /* goil_lexique_1_NETWORKORDERCALLOUT */,
    1 /* goil_lexique_1_CPUORDERCALLOUT */,
    1 /* goil_lexique_1_INITIALVALUE */,
    1 /* goil_lexique_1_QUEUESIZE */,
    1 /* goil_lexique_1_LINK */,
    1 /* goil_lexique_1_RECEIVEMESSAGE */,
    1 /* goil_lexique_1_FLAG */,
    1 /* goil_lexique_1_FLAGNAME */,
    1 /* goil_lexique_1_STATIC */,
    1 /* goil_lexique_1_DYNAMIC */,
    1 /* goil_lexique_1_ZERO */,
    1 /* goil_lexique_1_SIZEINBITS */,
    1 /* goil_lexique_1_MAXSIZEINBITS */,
    1 /* goil_lexique_1_BITORDERING */,
    1 /* goil_lexique_1_BIGENDIAN */,
    1 /* goil_lexique_1_LITTLEENDIAN */,
    1 /* goil_lexique_1_BITPOSITION */,
    1 /* goil_lexique_1_DATAINTERPRETATION */,
    1 /* goil_lexique_1_UNSIGNEDINTEGER */,
    1 /* goil_lexique_1_BYTEARRAY */,
    1 /* goil_lexique_1_DIRECTION */,
    1 /* goil_lexique_1_SENT */,
    1 /* goil_lexique_1_RECEIVED */,
    1 /* goil_lexique_1_COMTIMEBASE */,
    1 /* goil_lexique_1_COMERRORHOOK */,
    1 /* goil_lexique_1_COMUSEGETSERVICEID */,
    1 /* goil_lexique_1_COMUSEPARAMETERACCESS */,
    1 /* goil_lexique_1_COMSTARTCOMEXTENSION */,
    1 /* goil_lexique_1_COMAPPMODE */,
    1 /* goil_lexique_1_COMSTATUS */,
    1 /* goil_lexique_1_USE */,
    1 /* goil_lexique_1_COMEXTENDED */,
    1 /* goil_lexique_1_COMSTANDARD */,
    1 /* goil_lexique_1_IPDUPROPERTY */,
    1 /* goil_lexique_1_IPDUCALLOUT */,
    1 /* goil_lexique_1_LAYERUSED */,
    1 /* goil_lexique_1_TRANSMISSIONMODE */,
    1 /* goil_lexique_1_DIRECT */,
    1 /* goil_lexique_1_PERIODIC */,
    1 /* goil_lexique_1_MIXED */,
    1 /* goil_lexique_1_TIMEOUT */,
    1 /* goil_lexique_1_FIRTSTIMEOUT */,
    1 /* goil_lexique_1_MINIMUMDELAYTIME */,
    1 /* goil_lexique_1_TIMEPERIOD */,
    1 /* goil_lexique_1_TIMEOFFSET */,
    1 /* goil_lexique_1_NON */,
    1 /* goil_lexique_1_FULL */,
    1 /* goil_lexique_1_FALSE */,
    1 /* goil_lexique_1_TRUE */,
    1 /* goil_lexique_1_PROTECTIONHOOK */,
    1 /* goil_lexique_1_SCALABILITYCLASS */,
    1 /* goil_lexique_1_STACKMONITORING */,
    1 /* goil_lexique_1_TIMING_5FPROTECTION */,
    1 /* goil_lexique_1_ACCESSING_5FAPPLICATION */,
    1 /* goil_lexique_1_SC1 */,
    1 /* goil_lexique_1_SC2 */,
    1 /* goil_lexique_1_SC3 */,
    1 /* goil_lexique_1_SC4 */,
    1 /* goil_lexique_1_SCHEDULETABLE */,
    1 /* goil_lexique_1_APPLICATION */,
    1 /* goil_lexique_1_LOCAL_5FTO_5FGLOBAL_5FTIME_5FSYNCHRONIZATION */,
    1 /* goil_lexique_1_SYNC_5FSTRATEGY */,
    1 /* goil_lexique_1_MAX_5FINCREASE */,
    1 /* goil_lexique_1_MAX_5FDECREASE */,
    1 /* goil_lexique_1_MAX_5FINCREASE_5FASYNC */,
    1 /* goil_lexique_1_MAX_5FDECREASE_5FASYNC */,
    1 /* goil_lexique_1_PRECISION */,
    1 /* goil_lexique_1_LENGTH */,
    1 /* goil_lexique_1_ABSOLUTE */,
    1 /* goil_lexique_1_RELATIVE */,
    1 /* goil_lexique_1_SYNCHRON */,
    1 /* goil_lexique_1_TRUSTED */,
    1 /* goil_lexique_1_HAS_5FRESTARTTASK */,
    1 /* goil_lexique_1_RESTARTTASK */,
    1 /* goil_lexique_1_TRUSTED_5FFUNCTION */,
    1 /* goil_lexique_1_NAME */,
    1 /* goil_lexique_1_EXECUTIONBUDGET */,
    1 /* goil_lexique_1_EXECUTIONTIME */,
    1 /* goil_lexique_1_COUNTLIMIT */,
    1 /* goil_lexique_1_TIMEFRAME */,
    1 /* goil_lexique_1_MAXOSINTERRUPTLOCKTIME */,
    1 /* goil_lexique_1_MAXALLINTERRUPTLOCKTIME */,
    1 /* goil_lexique_1_LOCKINGTIME */,
    1 /* goil_lexique_1_RESOURCELOCK */,
    1 /* goil_lexique_1_MAXRESOURCELOCKTIME */,
    1 /* goil_lexique_1_SMOOTH */,
    1 /* goil_lexique_1_HARD */,
    1 /* goil_lexique_1_TICKS */,
    1 /* goil_lexique_1_NANOSECONDS */,
    1 /* goil_lexique_1_SOFTWARE */,
    1 /* goil_lexique_1_HARDWARE */,
    1 /* goil_lexique_1_OSINTERNAL */,
    1 /* goil_lexique_1_GPT */,
    1 /* goil_lexique_1_NS_5FPER_5FHW_5FTICK */,
    1 /* goil_lexique_1_GPTCHANNELNAME */,
    1 /* goil_lexique_1_DRIVER */,
    1 /* goil_lexique_1_TIMECONSTANTS */,
    1 /* goil_lexique_1_TIMECONSTANT */,
    1 /* goil_lexique_1_NS */,
    1 /* goil_lexique_1_CONSTNAME */,
    1 /* goil_lexique_1_SOURCE */,
    9 /* goil_lexique_1_comment */,
    2 /* goil_lexique_1_idf */,
    3 /* goil_lexique_1__3B */,
    3 /* goil_lexique_1__3A */,
    3 /* goil_lexique_1__3D */,
    3 /* goil_lexique_1__7B */,
    3 /* goil_lexique_1__7D */,
    3 /* goil_lexique_1__2E_2E */,
    3 /* goil_lexique_1__5B */,
    3 /* goil_lexique_1__5D */,
    3 /* goil_lexique_1__2C */,
    3 /* goil_lexique_1__2E */,
    3 /* goil_lexique_1__2D */,
    4 /* goil_lexique_1_string */,
    5 /* goil_lexique_1_g_5Fstring */,
    6 /* goil_lexique_1_uint_5Fnumber */,
    7 /* goil_lexique_1_float_5Fnumber */,
    6 /* goil_lexique_1_set_5Fstart_5Fuint_5Fnumber */,
    1 /* goil_lexique_1_include */,
    8 /* goil_lexique_1_command */
  } ;
  return kTerminalSymbolStyles [inTerminal] ;
}

//---------------------------------------------------------------------------*

void goil_lexique::enterToken (const cTokenFor_goil_lexique & inToken) {
  cTokenFor_goil_lexique * _p = NULL ;
  macroMyNew (_p, cTokenFor_goil_lexique ()) ;
  _p->mTokenCode = inToken.mTokenCode ;
  _p->mFirstLocation = mTokenFirstLocation ;
  _p->mLastLocation  = mTokenLastLocation ;
  _p->mTemplateStringBeforeToken  = inToken.mTemplateStringBeforeToken ;
  _p->att_token = inToken.att_token ;
  _p->a_string = inToken.a_string ;
  _p->integerNumber = inToken.integerNumber ;
  _p->floatNumber = inToken.floatNumber ;
  _p->number = inToken.number ;
  enterTokenFromPointer (_p) ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_att_token (GGS_lstring & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->att_token) ;
}

//---------------------------------------------------------------------------*

C_String goil_lexique::
_attributeValue_att_token (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->att_token ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_a_string (GGS_lstring & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->a_string) ;
}

//---------------------------------------------------------------------------*

C_String goil_lexique::
_attributeValue_a_string (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->a_string ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_integerNumber (GGS_luint64 & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_luint64 (* this, _p->integerNumber) ;
}

//---------------------------------------------------------------------------*

uint64 goil_lexique::
_attributeValue_integerNumber (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->integerNumber ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_floatNumber (GGS_ldouble & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_ldouble (* this, _p->floatNumber) ;
}

//---------------------------------------------------------------------------*

double goil_lexique::
_attributeValue_floatNumber (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->floatNumber ;
}

//---------------------------------------------------------------------------*

void goil_lexique::
_assignFromAttribute_number (GGS_lstring & outValue) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  outValue = GGS_lstring (* this, _p->number) ;
}

//---------------------------------------------------------------------------*

C_String goil_lexique::
_attributeValue_number (void) const {
  cTokenFor_goil_lexique * _p = (cTokenFor_goil_lexique *) mCurrentTokenPtr ;
  return _p->number ;
}

//---------------------------------------------------------------------------*

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*

