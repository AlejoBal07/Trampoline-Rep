//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'goil_obj_isr.cpp'                           *
//                        Generated by version 1.8.1                         *
//                       april 17th, 2009, at 9h44'5"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 456
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "goil_obj_isr.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_obj_isr.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'isr'                   *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_isr::
pr_isr_goil_obj_isr_57_10_ (goil_lexique & _inLexique,
                                GGS_isr_map  &var_cas_isrs) {
  GGS_lstring  var_cas_isr_name ;
  GGS_isr_obj  var_cas_isr ;
  GGS_basic_type  var_cas_category ;
  GGS_basic_type  var_cas_priority ;
  GGS_lstring  var_cas_desc ;
  GGS_lstringlist  var_cas_resources ;
  GGS_lstringlist  var_cas_messages ;
  GGS_lstringlist  var_cas_acc_apps ;
  GGS_timing_prot  var_cas_timing_prot ;
  GGS_ident_map  var_cas_other_fields ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ISR) COMMA_HERE) ;
  _inLexique._assignFromAttribute_att_token (var_cas_isr_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
  if ((var_cas_isrs.reader_hasKey (_inLexique, var_cas_isr_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (72)) COMMA_SOURCE_FILE_AT_LINE (72))).isBuiltAndTrue ()) {
    var_cas_isrs.modifier_del (_inLexique, var_cas_isr_name, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (73)) ;
    var_cas_category = var_cas_isr.reader_category (_inLexique COMMA_SOURCE_FILE_AT_LINE (74)) ;
    var_cas_priority = var_cas_isr.reader_priority (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
    var_cas_desc = var_cas_isr.reader_desc (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)) ;
    var_cas_resources = var_cas_isr.reader_resources (_inLexique COMMA_SOURCE_FILE_AT_LINE (77)) ;
    var_cas_messages = var_cas_isr.reader_messages (_inLexique COMMA_SOURCE_FILE_AT_LINE (78)) ;
    var_cas_acc_apps = var_cas_isr.reader_acc_apps (_inLexique COMMA_SOURCE_FILE_AT_LINE (79)) ;
    var_cas_timing_prot = var_cas_isr.reader_timing_prot (_inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
    var_cas_other_fields = var_cas_isr.reader_other_fields (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
  }else{
    var_cas_category = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_priority = GGS_void ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_desc = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_resources = GGS_lstringlist ::constructor_emptyList () ;
    var_cas_messages = GGS_lstringlist ::constructor_emptyList () ;
    var_cas_acc_apps = GGS_lstringlist ::constructor_emptyList () ;
    var_cas_timing_prot = GGS_void_timing_prot ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
    var_cas_other_fields = GGS_ident_map ::constructor_emptyMap (_inLexique COMMA_HERE) ;
    var_cas_isr = GGS_isr_obj ::constructor_new (_inLexique, var_cas_desc, var_cas_category, var_cas_priority, var_cas_resources, var_cas_messages, var_cas_acc_apps, var_cas_timing_prot, var_cas_other_fields COMMA_HERE) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
  nt_isr_attributes_ (_inLexique, var_cas_category, var_cas_priority, var_cas_resources, var_cas_messages, var_cas_acc_apps, var_cas_timing_prot, var_cas_other_fields) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
  nt_description_ (_inLexique, var_cas_desc) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
  var_cas_isr = GGS_isr_obj ::constructor_new (_inLexique, var_cas_desc, var_cas_category, var_cas_priority, var_cas_resources, var_cas_messages, var_cas_acc_apps, var_cas_timing_prot, var_cas_other_fields COMMA_HERE) ;
  var_cas_isrs.modifier_put (_inLexique, var_cas_isr_name, var_cas_isr COMMA_SOURCE_FILE_AT_LINE (100)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'isr_attributes'             *
//                                                                           *
//---------------------------------------------------------------------------*

void goil_obj_isr::
pr_isr_attributes_goil_obj_isr_103_21_ (goil_lexique & _inLexique,
                                GGS_basic_type  &var_cas_category,
                                GGS_basic_type  &var_cas_priority,
                                GGS_lstringlist  &var_cas_resources,
                                GGS_lstringlist  &var_cas_messages,
                                GGS_lstringlist  &var_cas_acc_apps,
                                GGS_timing_prot  &var_cas_timing_prot,
                                GGS_ident_map  &var_cas_other_fields) {
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_goil_obj_isr_0 (_inLexique)) {
        case 2 : {
          GGS_luint64  var_cas_cat ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_CATEGORY) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_integerNumber (var_cas_cat) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
          GGS_lstring  automatic_var_0 ;
          nt_description_ (_inLexique, automatic_var_0) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_basic_type _var_3503 = var_cas_category ; // CAST instruction
            if (_var_3503.getPtr () != NULL) {
              macroValidPointer (_var_3503.getPtr ()) ;
              if (typeid (cPtr_uint64_class) == typeid (* (_var_3503.getPtr ()))) {
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR category attribute already defined for this ISR") COMMA_SOURCE_FILE_AT_LINE (119)) ;
                var_cas_category.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (119)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was previously defined here") COMMA_SOURCE_FILE_AT_LINE (120)) ;
              }else{
                if ((((var_cas_cat.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (121)))._operator_isNotEqual (GGS_uint64 (true, 1LLU)))._operator_and ((var_cas_cat.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (121)))._operator_isNotEqual (GGS_uint64 (true, 2LLU)))).isBuiltAndTrue ()) {
                  GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "ISR category should be 1 ou 2") COMMA_SOURCE_FILE_AT_LINE (123)) ;
                }
                var_cas_category = GGS_uint64_class ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_cat.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (124)) COMMA_HERE) ;
              }
            }
          }
          } break ;
        case 3 : {
          GGS_luint64  var_cas_prio ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_PRIORITY) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_integerNumber (var_cas_prio) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_uint_5Fnumber) COMMA_HERE) ;
          GGS_lstring  automatic_var_1 ;
          nt_description_ (_inLexique, automatic_var_1) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          { const GGS_basic_type _var_3860 = var_cas_priority ; // CAST instruction
            if (_var_3860.getPtr () != NULL) {
              macroValidPointer (_var_3860.getPtr ()) ;
              if (typeid (cPtr_void) == typeid (* (_var_3860.getPtr ()))) {
                var_cas_priority = GGS_uint32_class ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_prio.reader_uint64 (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)).reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (131)) COMMA_HERE) ;
              }else{
                GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "PRIORITY already defined for this ISR") COMMA_SOURCE_FILE_AT_LINE (134)) ;
                var_cas_priority.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (134)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "was previouly defined here") COMMA_SOURCE_FILE_AT_LINE (135)) ;
              }
            }
          }
          } break ;
        case 4 : {
          GGS_lstring  var_cas_rez ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_RESOURCE) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_rez) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_2 ;
          nt_description_ (_inLexique, automatic_var_2) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_add_lstring_unique (_inLexique,  var_cas_resources,  var_cas_rez,  GGS_string (true, "RESOURCE") COMMA_SOURCE_FILE_AT_LINE (139)) ;
          } break ;
        case 5 : {
          GGS_lstring  var_cas_mess ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_MESSAGE) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_mess) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_3 ;
          nt_description_ (_inLexique, automatic_var_3) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_add_lstring_unique (_inLexique,  var_cas_messages,  var_cas_mess,  GGS_string (true, "MESSAGE") COMMA_SOURCE_FILE_AT_LINE (143)) ;
          } break ;
        case 6 : {
          if (((GGS_bool (true, _inLexique.boolOptionValueFromKeys ("goil_options", "autosar_on" COMMA_SOURCE_FILE_AT_LINE (145))))._operator_isEqual (GGS_bool (true, false))).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "AUTOSAR flag is off, turn it on to use TIMINGPROTECTION attribute in ISR object") COMMA_SOURCE_FILE_AT_LINE (147)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TIMING_5FPROTECTION) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          switch (select_goil_obj_isr_1 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_FALSE) COMMA_HERE) ;
              var_cas_timing_prot = GGS_false_timing_prot ::constructor_new (_inLexique, GGS_location (_inLexique) COMMA_HERE) ;
              } break ;
            case 2 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_TRUE) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7B) COMMA_HERE) ;
              GGS_basic_type  var_cas_exe_budget ;
              GGS_basic_type  var_cas_exe_time ;
              GGS_basic_type  var_cas_count_limit ;
              GGS_basic_type  var_cas_time_frame ;
              GGS_basic_type  var_cas_os_it_lock ;
              GGS_basic_type  var_cas_all_it_lock ;
              GGS_rezlock_map  var_cas_rezlocks ;
              nt_timing_prot_attrs_ (_inLexique, var_cas_exe_budget, var_cas_exe_time, var_cas_count_limit, var_cas_time_frame, var_cas_os_it_lock, var_cas_all_it_lock, var_cas_rezlocks) ;
              { const GGS_basic_type _var_4906 = var_cas_count_limit ; // CAST instruction
                if (_var_4906.getPtr () != NULL) {
                  macroValidPointer (_var_4906.getPtr ()) ;
                  if (typeid (cPtr_void) == typeid (* (_var_4906.getPtr ()))) {
                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "COUNTLIMIT not declared") COMMA_SOURCE_FILE_AT_LINE (164)) ;
                  }else{
                  }
                }
              }
              { const GGS_basic_type _var_5017 = var_cas_exe_time ; // CAST instruction
                if (_var_5017.getPtr () != NULL) {
                  macroValidPointer (_var_5017.getPtr ()) ;
                  if (typeid (cPtr_void) == typeid (* (_var_5017.getPtr ()))) {
                    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "EXECUTIONTIME not declared") COMMA_SOURCE_FILE_AT_LINE (167)) ;
                  }else{
                  }
                }
              }
              { const GGS_basic_type _var_5191 = var_cas_exe_budget ; // CAST instruction
                if (_var_5191.getPtr () != NULL) {
                  macroValidPointer (_var_5191.getPtr ()) ;
                  if (typeid (cPtr_uint64_class) == typeid (* (_var_5191.getPtr ()))) {
                    const GGS_uint64_class var_cas_eb (_var_5191.getPtr ()) ;
                    var_cas_eb.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "EXECUTIONBUDGET is not an attribute of isr timing protection") COMMA_SOURCE_FILE_AT_LINE (171)) ;
                  }else{
                  }
                }
              }
              var_cas_timing_prot = GGS_timing_prot_isr ::constructor_new (_inLexique, GGS_location (_inLexique), var_cas_exe_time, var_cas_count_limit, var_cas_time_frame, var_cas_os_it_lock, var_cas_all_it_lock, var_cas_rezlocks COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__7D) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        case 7 : {
          GGS_lstring  var_cas_app ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_ACCESSING_5FAPPLICATION) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3D) COMMA_HERE) ;
          _inLexique._assignFromAttribute_att_token (var_cas_app) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1_idf) COMMA_HERE) ;
          GGS_lstring  automatic_var_4 ;
          nt_description_ (_inLexique, automatic_var_4) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          ::routine_add_lstring_unique (_inLexique,  var_cas_acc_apps,  var_cas_app,  GGS_string (true, "ACCESSING_APPLICATION") COMMA_SOURCE_FILE_AT_LINE (187)) ;
          } break ;
        case 8 : {
          nt_free_field_ (_inLexique, var_cas_other_fields) ;
          GGS_lstring  automatic_var_5 ;
          nt_description_ (_inLexique, automatic_var_5) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (goil_lexique::goil_lexique_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

