//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'goil_check.cpp'                            *
//                        Generated by version 1.9.4                         *
//                    november 12th, 2009, at 11h41'26"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_check.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_check.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "check_uint32_range"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_uint32_range (C_Compiler & inLexique,
                                GGS_uint32_set   var_cas_set,
                                GGS_location   var_cas_loc,
                                GGS_uint   var_cas_val COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_check_uint32_range at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_uint32_set _var_1236 = var_cas_set ; // CAST instruction
    if (_var_1236.getPtr () != NULL) {
      macroValidPointer (_var_1236.getPtr ()) ;
      if (typeid (cPtr_uint32_range) == typeid (* (_var_1236.getPtr ()))) {
        const GGS_uint32_range var_cas_r (_var_1236.getPtr ()) ;
        const GGS_bool cond_824 = ((var_cas_val).operator_strictInf (var_cas_r.reader_min (inLexique COMMA_SOURCE_FILE_AT_LINE (38)))).operator_or ((var_cas_val).operator_strictSup (var_cas_r.reader_max (inLexique COMMA_SOURCE_FILE_AT_LINE (38)))) ;
        if (cond_824.isBuiltAndTrue ()) {
          var_cas_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("UINT32 not within specified range.") COMMA_SOURCE_FILE_AT_LINE (40)) ;
          var_cas_r.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (40)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Range was defined here") COMMA_SOURCE_FILE_AT_LINE (41)) ;
        }
      }else if (typeid (cPtr_uint32_list) == typeid (* (_var_1236.getPtr ()))) {
        const GGS_uint32_list var_cas_l (_var_1236.getPtr ()) ;
        GGS_bool var_cas_not_matched = GGS_bool (true) ;
        {
          GGS_list_uint32::cEnumerator enumerator_913 (var_cas_l.reader_li (inLexique COMMA_SOURCE_FILE_AT_LINE (44)), true) ;
          const GGS_list_uint32::cElement * operand_913 = NULL ;
          while (((operand_913 = enumerator_913.nextObject ()))) {
            macroValidPointer (operand_913) ;
            const GGS_bool cond_1029 = (var_cas_val).operator_isEqual (operand_913->val) ;
            if (cond_1029.isBuiltAndTrue ()) {
              var_cas_not_matched = GGS_bool (false) ;
            }
          }
        }
        const GGS_bool cond_1218 = var_cas_not_matched ;
        if (cond_1218.isBuiltAndTrue ()) {
          var_cas_loc.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("UINT32 is not included in specified set.") COMMA_SOURCE_FILE_AT_LINE (51)) ;
          var_cas_l.reader_loc (inLexique COMMA_SOURCE_FILE_AT_LINE (51)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("Set was defined here") COMMA_SOURCE_FILE_AT_LINE (52)) ;
        }
      }else{
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_check_uint32_range\n") ;
  #endif
}

//---------------------------------------------------------------------------*

