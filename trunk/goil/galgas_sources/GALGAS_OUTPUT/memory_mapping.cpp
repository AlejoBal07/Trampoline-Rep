//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'memory_mapping.cpp'                          *
//                        Generated by version 1.9.4                         *
//                     november 16th, 2009, at 17h38'0"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "memory_mapping.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "memory_mapping.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "memmap_template"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_memmap_template (C_Compiler & inLexique,
                                const GGS_string  var_cas_compiler,
                                const GGS_string  var_cas_tpl_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_memmap_template at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  GGS_string var_cas_rtd = function_root_templates_directory (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
  GGS_string var_cas_path = (((((var_cas_rtd).operator_concat (GGS_string ("/"))).operator_concat (var_cas_compiler)).operator_concat (GGS_string ("/"))).operator_concat (var_cas_tpl_name)).operator_concat (GGS_string (".tpl")) ;
  const GGS_bool cond_1158 = var_cas_path.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (45)) ;
  if (cond_1158.isBuiltAndTrue ()) {
    var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_path COMMA_HERE) ;
  }else if (cond_1158.isBuiltAndFalse ()) {
    var_cas_tpl = GGS_string ("") ;
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, (GGS_string ("No template for ")).operator_concat (var_cas_tpl_name) COMMA_SOURCE_FILE_AT_LINE (49)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_memmap_template\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_mp"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mp (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation,
                                GGS_string & /* var_cas_obj_header */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mp at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4650 = function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (64)) COMMA_SOURCE_FILE_AT_LINE (64)) ;
  if (cond_4650.isBuiltAndTrue ()) {
    GGS_string var_cas_tpl_mp = function_template_string (inLexique, GGS_string ("code"), GGS_string ("mp") COMMA_SOURCE_FILE_AT_LINE (65)) ;
    GGS_string var_cas_tpl_mp_desc = function_template_string (inLexique, GGS_string ("code"), GGS_string ("mp_desc") COMMA_SOURCE_FILE_AT_LINE (66)) ;
    GGS_string var_cas_dec = GGS_string ("") ;
    GGS_string var_cas_ext = GGS_string ("") ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$TIMESTAMP$"),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (70)) ;
    GGS_stringset  var_cas_known_osapp = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_task_map::cEnumerator enumerator_1826 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (74)), true) ;
      const GGS_task_map::cElement * operand_1826 = NULL ;
      while (((operand_1826 = enumerator_1826.nextObject ()))) {
        macroValidPointer (operand_1826) ;
        GGS_string var_cas_desc = var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_1826->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (75)) COMMA_SOURCE_FILE_AT_LINE (75)) ;
        const GGS_bool cond_2433 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_2433.isBuiltAndTrue ()) {
          const GGS_bool cond_2418 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (77))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_2418.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_2075 = var_cas_app_for_obj ;
            if (temp_2075.isBuilt ()) {
              temp_2075 (HERE)->method_get (inLexique, operand_1826->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (79)) ;
            }
            const GGS_bool cond_2401 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (80))).operator_not () ;
            if (cond_2401.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              ::routine_doReplace (inLexique,  var_cas_desc,  GGS_string ("$APP_NAME$"),  var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (83)) ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_dec.dotAssign_operation (var_cas_desc) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_2490 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (91)), true) ;
      const GGS_isr_map::cElement * operand_2490 = NULL ;
      while (((operand_2490 = enumerator_2490.nextObject ()))) {
        macroValidPointer (operand_2490) ;
        GGS_string var_cas_desc = var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_2490->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (92)) COMMA_SOURCE_FILE_AT_LINE (92)) ;
        const GGS_bool cond_3042 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_3042.isBuiltAndTrue ()) {
          const GGS_bool cond_3027 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (94))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_3027.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_2738 = var_cas_app_for_obj ;
            if (temp_2738.isBuilt ()) {
              temp_2738 (HERE)->method_get (inLexique, operand_2490->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (96)) ;
            }
            const GGS_bool cond_3010 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (97))).operator_not () ;
            if (cond_3010.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_dec.dotAssign_operation (var_cas_desc) ;
      }
    }
    GGS_tasks_by_type  var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
    {
      GGS_task_map::cEnumerator enumerator_3199 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), true) ;
      const GGS_task_map::cElement * operand_3199 = NULL ;
      while (((operand_3199 = enumerator_3199.nextObject ()))) {
        macroValidPointer (operand_3199) ;
        const GGS_bool cond_3301 = (operand_3199->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (110))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_3301.isBuiltAndTrue ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (0U), operand_3199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
        }else if (cond_3301.isBuiltAndFalse ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (1U), operand_3199->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
        }
      }
    }
    GGS_string var_cas_mp_table = GGS_string ("CONSTP2CONST(tpl_mem_prot_desc, AUTOMATIC, OS_VAR) tpl_mp_table[TASK_COUNT + ISR_COUNT + 1] = {\n") ;
    {
      GGS_tasks_by_type::cEnumerator enumerator_3517 (var_cas_stasks, true) ;
      const GGS_tasks_by_type::cElement * operand_3517 = NULL ;
      while (((operand_3517 = enumerator_3517.nextObject ()))) {
        macroValidPointer (operand_3517) ;
        const GGS_bool cond_4131 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_4131.isBuiltAndTrue ()) {
          const GGS_bool cond_4115 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (122))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_4115.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_3773 = var_cas_app_for_obj ;
            if (temp_3773.isBuilt ()) {
              temp_3773 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_3517->name, GGS_location (inLexique) COMMA_HERE), var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (124)) ;
            }
            GGS_app_obj  var_cas_app ;
            const GGS_app_map  temp_3867 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
            if (temp_3867.isBuilt ()) {
              temp_3867 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (126)) ;
            }
            { const GGS_app_trusted_obj _var_4095 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (127)) ; // CAST instruction
              if (_var_4095.getPtr () != NULL) {
                macroValidPointer (_var_4095.getPtr ()) ;
                if (typeid (cPtr_app_trusted_true) == typeid (* (_var_4095.getPtr ()))) {
                  var_cas_mp_table.appendCString ("  NULL,\n") ;
                }else{
                  var_cas_mp_table.appendCString ("  &") ;
                  var_cas_mp_table.dotAssign_operation (operand_3517->name) ;
                  var_cas_mp_table.appendCString ("_mp_desc,\n") ;
                }
              }
            }
          }
        }else if (cond_4131.isBuiltAndFalse ()) {
          var_cas_mp_table.appendCString ("  &") ;
          var_cas_mp_table.dotAssign_operation (operand_3517->name) ;
          var_cas_mp_table.appendCString ("_mp_desc,\n") ;
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_4225 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (139)), true) ;
      const GGS_isr_map::cElement * operand_4225 = NULL ;
      while (((operand_4225 = enumerator_4225.nextObject ()))) {
        macroValidPointer (operand_4225) ;
        var_cas_mp_table.appendCString ("  &") ;
        var_cas_mp_table.dotAssign_operation (operand_4225->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140))) ;
        var_cas_mp_table.appendCString ("_mp_desc,\n") ;
      }
    }
    var_cas_mp_table.appendCString ("  NULL\n"
      "};") ;
    GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (144)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$APPLICATION$"),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (146)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$LINKER_SYM$"),  var_cas_ext COMMA_SOURCE_FILE_AT_LINE (147)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$REGION_DESC$"),  var_cas_dec COMMA_SOURCE_FILE_AT_LINE (148)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$DESC_TABLE$"),  var_cas_mp_table COMMA_SOURCE_FILE_AT_LINE (149)) ;
    ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$MEMORY_PROTECTION$"),  var_cas_tpl_mp COMMA_SOURCE_FILE_AT_LINE (151)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mp\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_link_script"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_link_script (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_link_script at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linker = function_linker (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (158)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) COMMA_SOURCE_FILE_AT_LINE (158)) ;
  const GGS_bool cond_7454 = (var_cas_linker).operator_isNotEqual (GGS_string ("")) ;
  if (cond_7454.isBuiltAndTrue ()) {
    GGS_string var_cas_task_vars = GGS_string ("") ;
    GGS_string var_cas_isr_vars = GGS_string ("") ;
    GGS_string var_cas_task_stack = GGS_string ("") ;
    GGS_string var_cas_isr_stack = GGS_string ("") ;
    GGS_string var_cas_app_vars = GGS_string ("") ;
    GGS_string var_cas_user_consts = GGS_string ("") ;
    GGS_string var_cas_user_code = GGS_string ("") ;
    GGS_string var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_var") COMMA_SOURCE_FILE_AT_LINE (169)) ;
    GGS_string var_cas_stack_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_stack") COMMA_SOURCE_FILE_AT_LINE (170)) ;
    GGS_string var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_const") COMMA_SOURCE_FILE_AT_LINE (171)) ;
    GGS_string var_cas_code_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_code") COMMA_SOURCE_FILE_AT_LINE (172)) ;
    {
      GGS_task_map::cEnumerator enumerator_5301 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (173)), true) ;
      const GGS_task_map::cElement * operand_5301 = NULL ;
      while (((operand_5301 = enumerator_5301.nextObject ()))) {
        macroValidPointer (operand_5301) ;
        var_cas_task_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5301->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (174))) ;
        var_cas_task_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5301->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (175)) COMMA_SOURCE_FILE_AT_LINE (175))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5301->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) COMMA_SOURCE_FILE_AT_LINE (176))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5301->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) COMMA_SOURCE_FILE_AT_LINE (177))) ;
      }
    }
    var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_var") COMMA_SOURCE_FILE_AT_LINE (181)) ;
    var_cas_stack_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_stack") COMMA_SOURCE_FILE_AT_LINE (182)) ;
    var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_const") COMMA_SOURCE_FILE_AT_LINE (183)) ;
    var_cas_code_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_code") COMMA_SOURCE_FILE_AT_LINE (184)) ;
    {
      GGS_isr_map::cEnumerator enumerator_5978 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (185)), true) ;
      const GGS_isr_map::cElement * operand_5978 = NULL ;
      while (((operand_5978 = enumerator_5978.nextObject ()))) {
        macroValidPointer (operand_5978) ;
        var_cas_isr_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_5978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186))) ;
        var_cas_isr_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187)) COMMA_SOURCE_FILE_AT_LINE (187))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_5978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (188)) COMMA_SOURCE_FILE_AT_LINE (188))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_5978->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) COMMA_SOURCE_FILE_AT_LINE (189))) ;
      }
    }
    var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("app_var") COMMA_SOURCE_FILE_AT_LINE (193)) ;
    var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("app_const") COMMA_SOURCE_FILE_AT_LINE (194)) ;
    {
      GGS_app_map::cEnumerator enumerator_6553 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (195)), true) ;
      const GGS_app_map::cElement * operand_6553 = NULL ;
      while (((operand_6553 = enumerator_6553.nextObject ()))) {
        macroValidPointer (operand_6553) ;
        var_cas_app_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_6553->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (196)) COMMA_SOURCE_FILE_AT_LINE (196))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_6553->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) COMMA_SOURCE_FILE_AT_LINE (197))) ;
      }
    }
    GGS_string var_cas_script = function_template_string (inLexique, var_cas_linker, GGS_string ("script") COMMA_SOURCE_FILE_AT_LINE (201)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CODE$"),  var_cas_user_code COMMA_SOURCE_FILE_AT_LINE (202)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CONST$"),  var_cas_user_consts COMMA_SOURCE_FILE_AT_LINE (203)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_VAR$"),  (var_cas_task_vars).operator_concat (var_cas_isr_vars) COMMA_SOURCE_FILE_AT_LINE (204)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_STACK$"),  (var_cas_task_stack).operator_concat (var_cas_isr_stack) COMMA_SOURCE_FILE_AT_LINE (205)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$APP_VAR$"),  var_cas_app_vars COMMA_SOURCE_FILE_AT_LINE (206)) ;
    GGS_string var_cas_script_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (208))).operator_concat (GGS_string ("/script.ld")) ;
    GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
    const GGS_bool cond_7444 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
    if (cond_7444.isBuiltAndTrue ()) {
      const GGS_bool cond_7375 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_7375.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_script_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (212)) ;
      }
      const GGS_string temp_7421 = var_cas_script ;
      if (temp_7421.isBuilt ()) {
        temp_7421 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_script_file COMMA_SOURCE_FILE_AT_LINE (214)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_link_script\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_memmap"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_memmap (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_memmap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (222)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (222)) COMMA_SOURCE_FILE_AT_LINE (222)) ;
  const GGS_bool cond_17045 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17045.isBuiltAndTrue ()) {
    GGS_string var_cas_mm = function_memmap_template (inLexique, var_cas_cc, GGS_string ("MemMap.h") COMMA_SOURCE_FILE_AT_LINE (224)) ;
    GGS_string var_cas_result = GGS_string ("") ;
    GGS_string var_cas_gen_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("generic_section") COMMA_SOURCE_FILE_AT_LINE (226)) ;
    GGS_string var_cas_section_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (227)) ;
    GGS_string var_cas_config_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("CONFIG") COMMA_SOURCE_FILE_AT_LINE (228)) ;
    GGS_stringlist  var_cas_data_size = GGS_stringlist ::constructor_emptyList () ;
    var_cas_data_size.addAssign_operation (GGS_string ("_32BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_16BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_8BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_BOOLEAN")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_UNSPECIFIED")) ;
    GGS_stringlist  var_cas_sub_kind = GGS_stringlist ::constructor_emptyList () ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_NOINIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_POWER_ON_INIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_FAST")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("")) ;
    GGS_string var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (241)) ;
    {
      GGS_task_map::cEnumerator enumerator_8337 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (242)), true) ;
      const GGS_task_map::cElement * operand_8337 = NULL ;
      while (((operand_8337 = enumerator_8337.nextObject ()))) {
        macroValidPointer (operand_8337) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_8337->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (243)) COMMA_SOURCE_FILE_AT_LINE (243)) ;
        GGS_string var_cas_code_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (245)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (246)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (247)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (248)) ;
        var_cas_result.dotAssign_operation (var_cas_code_sec_tpl) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (251)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (252)) ;
        {
          GGS_stringlist::cEnumerator enumerator_8949 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_8949 = NULL ;
          while (((operand_8949 = enumerator_8949.nextObject ()))) {
            macroValidPointer (operand_8949) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_8949->mValue COMMA_SOURCE_FILE_AT_LINE (254)) ;
            {
              GGS_stringlist::cEnumerator enumerator_9089 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_9089 = NULL ;
              while (((operand_9089 = enumerator_9089.nextObject ()))) {
                macroValidPointer (operand_9089) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_9089->mValue COMMA_SOURCE_FILE_AT_LINE (256)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (261)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (262)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (263)) ;
        {
          GGS_stringlist::cEnumerator enumerator_9584 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_9584 = NULL ;
          while (((operand_9584 = enumerator_9584.nextObject ()))) {
            macroValidPointer (operand_9584) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_9584->mValue COMMA_SOURCE_FILE_AT_LINE (265)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (268)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (269)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (270)) ;
        {
          GGS_stringlist::cEnumerator enumerator_10005 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_10005 = NULL ;
          while (((operand_10005 = enumerator_10005.nextObject ()))) {
            macroValidPointer (operand_10005) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_10005->mValue COMMA_SOURCE_FILE_AT_LINE (272)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (275)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (276)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (277)) ;
        {
          GGS_stringlist::cEnumerator enumerator_10426 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_10426 = NULL ;
          while (((operand_10426 = enumerator_10426.nextObject ()))) {
            macroValidPointer (operand_10426) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_10426->mValue COMMA_SOURCE_FILE_AT_LINE (279)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (283)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (284)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (285)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (286)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_8337->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287)) COMMA_SOURCE_FILE_AT_LINE (287)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11044 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_11044 = NULL ;
          while (((operand_11044 = enumerator_11044.nextObject ()))) {
            macroValidPointer (operand_11044) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_11044->mValue COMMA_SOURCE_FILE_AT_LINE (289)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_stack_data = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("STACK") COMMA_SOURCE_FILE_AT_LINE (293)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (294)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (295)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (296)) ;
        var_cas_result.dotAssign_operation (var_cas_stack_data) ;
      }
    }
    var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (300)) ;
    {
      GGS_isr_map::cEnumerator enumerator_11617 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (301)), true) ;
      const GGS_isr_map::cElement * operand_11617 = NULL ;
      while (((operand_11617 = enumerator_11617.nextObject ()))) {
        macroValidPointer (operand_11617) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_11617->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (302)) COMMA_SOURCE_FILE_AT_LINE (302)) ;
        GGS_string var_cas_code_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (304)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (305)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (306)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (307)) ;
        var_cas_result.dotAssign_operation (var_cas_code_sec_tpl) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (310)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (311)) ;
        {
          GGS_stringlist::cEnumerator enumerator_12228 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_12228 = NULL ;
          while (((operand_12228 = enumerator_12228.nextObject ()))) {
            macroValidPointer (operand_12228) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_12228->mValue COMMA_SOURCE_FILE_AT_LINE (313)) ;
            {
              GGS_stringlist::cEnumerator enumerator_12368 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_12368 = NULL ;
              while (((operand_12368 = enumerator_12368.nextObject ()))) {
                macroValidPointer (operand_12368) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12368->mValue COMMA_SOURCE_FILE_AT_LINE (315)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (320)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (321)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (322)) ;
        {
          GGS_stringlist::cEnumerator enumerator_12863 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_12863 = NULL ;
          while (((operand_12863 = enumerator_12863.nextObject ()))) {
            macroValidPointer (operand_12863) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12863->mValue COMMA_SOURCE_FILE_AT_LINE (324)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (327)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (328)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (329)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13284 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13284 = NULL ;
          while (((operand_13284 = enumerator_13284.nextObject ()))) {
            macroValidPointer (operand_13284) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13284->mValue COMMA_SOURCE_FILE_AT_LINE (331)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (334)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (335)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (336)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13705 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13705 = NULL ;
          while (((operand_13705 = enumerator_13705.nextObject ()))) {
            macroValidPointer (operand_13705) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13705->mValue COMMA_SOURCE_FILE_AT_LINE (338)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (342)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (343)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (344)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (345)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_11617->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (346)) COMMA_SOURCE_FILE_AT_LINE (346)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14322 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_14322 = NULL ;
          while (((operand_14322 = enumerator_14322.nextObject ()))) {
            macroValidPointer (operand_14322) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_14322->mValue COMMA_SOURCE_FILE_AT_LINE (348)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$APP_MEMMAP$"),  var_cas_result COMMA_SOURCE_FILE_AT_LINE (353)) ;
    GGS_string var_cas_os_secs = GGS_string ("") ;
    GGS_string var_cas_os_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("os_section") COMMA_SOURCE_FILE_AT_LINE (357)) ;
    GGS_string var_cas_code_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (358)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (359)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (360)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (361)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (362)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SECTION$"),  GGS_string (".osCode") COMMA_SOURCE_FILE_AT_LINE (363)) ;
    var_cas_os_secs.dotAssign_operation (var_cas_code_section) ;
    GGS_string var_cas_var_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (366)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (367)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (368)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$SECTION$"),  GGS_string (".osVar") COMMA_SOURCE_FILE_AT_LINE (369)) ;
    GGS_string var_cas_no_init = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_NOINIT") COMMA_SOURCE_FILE_AT_LINE (370)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15360 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15360 = NULL ;
      while (((operand_15360 = enumerator_15360.nextObject ()))) {
        macroValidPointer (operand_15360) ;
        var_cas_os_secs.dotAssign_operation (var_cas_no_init.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15360->mValue COMMA_SOURCE_FILE_AT_LINE (372))) ;
      }
    }
    GGS_string var_cas_power_on = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_POWER_ON_INIT") COMMA_SOURCE_FILE_AT_LINE (374)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15595 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15595 = NULL ;
      while (((operand_15595 = enumerator_15595.nextObject ()))) {
        macroValidPointer (operand_15595) ;
        var_cas_os_secs.dotAssign_operation (var_cas_power_on.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15595->mValue COMMA_SOURCE_FILE_AT_LINE (376))) ;
      }
    }
    GGS_string var_cas_fast = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_POWER_ON_INIT") COMMA_SOURCE_FILE_AT_LINE (378)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15827 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15827 = NULL ;
      while (((operand_15827 = enumerator_15827.nextObject ()))) {
        macroValidPointer (operand_15827) ;
        var_cas_os_secs.dotAssign_operation (var_cas_fast.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15827->mValue COMMA_SOURCE_FILE_AT_LINE (380))) ;
      }
    }
    GGS_string var_cas_var = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (382)) ;
    {
      GGS_stringlist::cEnumerator enumerator_16040 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_16040 = NULL ;
      while (((operand_16040 = enumerator_16040.nextObject ()))) {
        macroValidPointer (operand_16040) ;
        var_cas_os_secs.dotAssign_operation (var_cas_var.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_16040->mValue COMMA_SOURCE_FILE_AT_LINE (384))) ;
      }
    }
    GGS_string var_cas_const_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (387)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (388)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (389)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$SECTION$"),  GGS_string (".osConst") COMMA_SOURCE_FILE_AT_LINE (390)) ;
    GGS_string var_cas_os_const = var_cas_const_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (391)) ;
    {
      GGS_stringlist::cEnumerator enumerator_16503 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_16503 = NULL ;
      while (((operand_16503 = enumerator_16503.nextObject ()))) {
        macroValidPointer (operand_16503) ;
        var_cas_os_secs.dotAssign_operation (var_cas_os_const.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_16503->mValue COMMA_SOURCE_FILE_AT_LINE (393))) ;
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$OS_MEMMAP$"),  var_cas_os_secs COMMA_SOURCE_FILE_AT_LINE (396)) ;
    GGS_string var_cas_api_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("api_section") COMMA_SOURCE_FILE_AT_LINE (399)) ;
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$API_MEMMAP$"),  var_cas_api_tpl COMMA_SOURCE_FILE_AT_LINE (400)) ;
    GGS_string var_cas_mm_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (402))).operator_concat (GGS_string ("/MemMap.h")) ;
    const GGS_bool cond_17033 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_17033.isBuiltAndTrue ()) {
      const GGS_bool cond_16972 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_16972.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_mm_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (405)) ;
      }
      const GGS_string temp_17014 = var_cas_mm ;
      if (temp_17014.isBuilt ()) {
        temp_17014 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_mm_file COMMA_SOURCE_FILE_AT_LINE (407)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_memmap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_compiler"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_compiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_compiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (417)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) COMMA_SOURCE_FILE_AT_LINE (417)) ;
  const GGS_bool cond_17800 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17800.isBuiltAndTrue ()) {
    GGS_string var_cas_comp = function_memmap_template (inLexique, var_cas_cc, GGS_string ("Compiler.h") COMMA_SOURCE_FILE_AT_LINE (419)) ;
    GGS_string var_cas_comp_cfg = function_memmap_template (inLexique, var_cas_cc, GGS_string ("Compiler_Cfg.h") COMMA_SOURCE_FILE_AT_LINE (420)) ;
    GGS_string var_cas_comp_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (421))).operator_concat (GGS_string ("/Compiler.h")) ;
    GGS_string var_cas_comp_cfg_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (422))).operator_concat (GGS_string ("/Compiler_Cfg.h")) ;
    const GGS_bool cond_17790 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_17790.isBuiltAndTrue ()) {
      const GGS_bool cond_17557 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_17557.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_comp_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (426)) ;
      }
      const GGS_string temp_17601 = var_cas_comp ;
      if (temp_17601.isBuilt ()) {
        temp_17601 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_comp_file COMMA_SOURCE_FILE_AT_LINE (428)) ;
      }
      const GGS_bool cond_17717 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_17717.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_comp_cfg_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (430)) ;
      }
      const GGS_string temp_17765 = var_cas_comp_cfg ;
      if (temp_17765.isBuilt ()) {
        temp_17765 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_comp_cfg_file COMMA_SOURCE_FILE_AT_LINE (432)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_compiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*

