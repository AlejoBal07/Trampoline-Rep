//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'memory_mapping.cpp'                          *
//                        Generated by version 1.9.3                         *
//                     november 10th, 2009, at 15h0'45"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 598
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "memory_mapping.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "memory_mapping.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "memmap_template"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_memmap_template (C_Compiler & inLexique,
                                const GGS_string  var_cas_compiler,
                                const GGS_string  var_cas_tpl_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_memmap_template at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  GGS_string var_cas_rtd = function_root_templates_directory (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
  GGS_string var_cas_path = (((((var_cas_rtd).operator_concat (GGS_string ("/"))).operator_concat (var_cas_compiler)).operator_concat (GGS_string ("/"))).operator_concat (var_cas_tpl_name)).operator_concat (GGS_string (".tpl")) ;
  inLexique.printMessage ((var_cas_rtd).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
  inLexique.printMessage ((var_cas_path).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  const GGS_bool cond_1199 = var_cas_path.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
  if (cond_1199.isBuiltAndTrue ()) {
    var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_path COMMA_HERE) ;
  }else if (cond_1199.isBuiltAndFalse ()) {
    var_cas_tpl = GGS_string ("") ;
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, (GGS_string ("No template for ")).operator_concat (var_cas_tpl_name) COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_memmap_template\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_mp"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mp (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation,
                                GGS_string & /* var_cas_obj_header */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mp at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_7062 = function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (66)) ;
  if (cond_7062.isBuiltAndTrue ()) {
    GGS_string var_cas_tpl_mp = function_template_string (inLexique, GGS_string ("code"), GGS_string ("mp") COMMA_SOURCE_FILE_AT_LINE (67)) ;
    GGS_string var_cas_tpl_mp_desc = function_template_string (inLexique, GGS_string ("code"), GGS_string ("mp_desc") COMMA_SOURCE_FILE_AT_LINE (68)) ;
    GGS_string var_cas_dec = GGS_string ("") ;
    GGS_string var_cas_init = GGS_string ("") ;
    GGS_string var_cas_ext = GGS_string ("") ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$TIMESTAMP$"),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (73)) ;
    GGS_stringset  var_cas_known_osapp = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_task_map::cEnumerator enumerator_1892 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (77)), true) ;
      const GGS_task_map::cElement * operand_1892 = NULL ;
      while (((operand_1892 = enumerator_1892.nextObject ()))) {
        macroValidPointer (operand_1892) ;
        var_cas_dec.dotAssign_operation (var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78))) ;
        var_cas_ext.appendCString ("extern void __SEG_START_TASK_") ;
        var_cas_ext.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) ;
        var_cas_ext.appendCString ("_VAR_RGN;\n") ;
        var_cas_ext.appendCString ("extern void __SEG_END_TASK_") ;
        var_cas_ext.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
        var_cas_ext.appendCString ("_VAR_RGN;\n") ;
        var_cas_ext.appendCString ("extern void __SEG_START_TASK_") ;
        var_cas_ext.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (81))) ;
        var_cas_ext.appendCString ("_STACK_RGN;\n") ;
        var_cas_ext.appendCString ("extern void __SEG_END_TASK_") ;
        var_cas_ext.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (82))) ;
        var_cas_ext.appendCString ("_STACK_RGN;\n") ;
        const GGS_bool cond_2732 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_2732.isBuiltAndTrue ()) {
          const GGS_bool cond_2717 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (84))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_2717.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_2428 = var_cas_app_for_obj ;
            if (temp_2428.isBuilt ()) {
              temp_2428 (HERE)->method_get (inLexique, operand_1892->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (86)) ;
            }
            const GGS_bool cond_2700 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (87))).operator_not () ;
            if (cond_2700.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
        var_cas_init.appendCString ("_mp_desc.proc_var.start = __SEG_START_TASK_") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
        var_cas_init.appendCString ("_VAR_RGN;\n") ;
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
        var_cas_init.appendCString ("_mp_desc.proc_var.end = __SEG_END_TASK_") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
        var_cas_init.appendCString ("_VAR_RGN;\n") ;
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
        var_cas_init.appendCString ("_mp_desc.proc_stack.start = __SEG_START_TASK_") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
        var_cas_init.appendCString ("_STACK_RGN;\n") ;
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97))) ;
        var_cas_init.appendCString ("_mp_desc.proc_stack.end = __SEG_END_TASK_") ;
        var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (97))) ;
        var_cas_init.appendCString ("_STACK_RGN;\n") ;
        const GGS_bool cond_3642 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_3642.isBuiltAndTrue ()) {
          const GGS_bool cond_3627 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (99))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_3627.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_3308 = var_cas_app_for_obj ;
            if (temp_3308.isBuilt ()) {
              temp_3308 (HERE)->method_get (inLexique, operand_1892->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (101)) ;
            }
            var_cas_init.appendCString ("#ifdef WITH_OSAPPLICATION\n") ;
            var_cas_init.appendCString ("  ") ;
            var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103))) ;
            var_cas_init.appendCString ("_mp_desc.osap_var.start = __SEG_START_APP_") ;
            var_cas_init.dotAssign_operation (var_cas_app_name) ;
            var_cas_init.appendCString ("_VAR_RGN;\n") ;
            var_cas_init.appendCString ("  ") ;
            var_cas_init.dotAssign_operation (operand_1892->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
            var_cas_init.appendCString ("_mp_desc.osap_var.end = __SEG_END_APP_") ;
            var_cas_init.dotAssign_operation (var_cas_app_name) ;
            var_cas_init.appendCString ("_VAR_RGN;\n") ;
            var_cas_init.appendCString ("#endif\n") ;
          }
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3680 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (110)), true) ;
      const GGS_isr_map::cElement * operand_3680 = NULL ;
      while (((operand_3680 = enumerator_3680.nextObject ()))) {
        macroValidPointer (operand_3680) ;
        var_cas_dec.dotAssign_operation (var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) COMMA_SOURCE_FILE_AT_LINE (111))) ;
        var_cas_ext.appendCString ("extern void *__SEG_START_ISR_") ;
        var_cas_ext.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (112))) ;
        var_cas_ext.appendCString ("_VAR_RGN;\n") ;
        var_cas_ext.appendCString ("extern void *__SEG_END_ISR_") ;
        var_cas_ext.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
        var_cas_ext.appendCString ("_VAR_RGN;\n") ;
        var_cas_ext.appendCString ("extern void *__SEG_START_ISR_") ;
        var_cas_ext.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (114))) ;
        var_cas_ext.appendCString ("_STACK_RGN;\n") ;
        var_cas_ext.appendCString ("extern void *__SEG_END_ISR_") ;
        var_cas_ext.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
        var_cas_ext.appendCString ("_STACK_RGN;\n") ;
        const GGS_bool cond_4521 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_4521.isBuiltAndTrue ()) {
          const GGS_bool cond_4506 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (117))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_4506.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_4215 = var_cas_app_for_obj ;
            if (temp_4215.isBuilt ()) {
              temp_4215 (HERE)->method_get (inLexique, operand_3680->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (119)) ;
            }
            const GGS_bool cond_4489 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (120))).operator_not () ;
            if (cond_4489.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void *__SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void *__SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
        var_cas_init.appendCString ("_mp_desc.proc_var.start = __SEG_START_ISR_") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
        var_cas_init.appendCString ("_VAR_RGN;\n") ;
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
        var_cas_init.appendCString ("_mp_desc.proc_var.end = __SEG_END_ISR_") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
        var_cas_init.appendCString ("_VAR_RGN;\n") ;
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129))) ;
        var_cas_init.appendCString ("_mp_desc.proc_stack.start = __SEG_START_ISR_") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129))) ;
        var_cas_init.appendCString ("_STACK_RGN;\n") ;
        var_cas_init.appendCString ("  ") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130))) ;
        var_cas_init.appendCString ("_mp_desc.proc_stack.end = __SEG_END_ISR_") ;
        var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (130))) ;
        var_cas_init.appendCString ("_STACK_RGN;\n") ;
        const GGS_bool cond_5427 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_5427.isBuiltAndTrue ()) {
          const GGS_bool cond_5412 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (132))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_5412.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_5093 = var_cas_app_for_obj ;
            if (temp_5093.isBuilt ()) {
              temp_5093 (HERE)->method_get (inLexique, operand_3680->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (134)) ;
            }
            var_cas_init.appendCString ("#ifdef WITH_OSAPPLICATION\n") ;
            var_cas_init.appendCString ("  ") ;
            var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
            var_cas_init.appendCString ("_mp_desc.osap_var.start = __SEG_START_APP_") ;
            var_cas_init.dotAssign_operation (var_cas_app_name) ;
            var_cas_init.appendCString ("_VAR_RGN;\n") ;
            var_cas_init.appendCString ("  ") ;
            var_cas_init.dotAssign_operation (operand_3680->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
            var_cas_init.appendCString ("_mp_desc.osap_var.end = __SEG_END_APP_") ;
            var_cas_init.dotAssign_operation (var_cas_app_name) ;
            var_cas_init.appendCString ("_VAR_RGN;\n") ;
            var_cas_init.appendCString ("#endif\n") ;
          }
        }
      }
    }
    GGS_tasks_by_type  var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
    {
      GGS_task_map::cEnumerator enumerator_5565 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (145)), true) ;
      const GGS_task_map::cElement * operand_5565 = NULL ;
      while (((operand_5565 = enumerator_5565.nextObject ()))) {
        macroValidPointer (operand_5565) ;
        const GGS_bool cond_5667 = (operand_5565->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (146)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (146))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_5667.isBuiltAndTrue ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (0U), operand_5565->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (147))) ;
        }else if (cond_5667.isBuiltAndFalse ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (1U), operand_5565->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (149))) ;
        }
      }
    }
    GGS_string var_cas_mp_table = GGS_string ("CONSTP2VAR(tpl_mem_prot_desc, AUTOMATIC, OS_VAR) tpl_mp_table[TASK_COUNT + ISR_COUNT + 1] = {\n") ;
    {
      GGS_tasks_by_type::cEnumerator enumerator_5881 (var_cas_stasks, true) ;
      const GGS_tasks_by_type::cElement * operand_5881 = NULL ;
      while (((operand_5881 = enumerator_5881.nextObject ()))) {
        macroValidPointer (operand_5881) ;
        const GGS_bool cond_6495 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_6495.isBuiltAndTrue ()) {
          const GGS_bool cond_6479 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (158))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_6479.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_6137 = var_cas_app_for_obj ;
            if (temp_6137.isBuilt ()) {
              temp_6137 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_5881->name, GGS_location (inLexique) COMMA_HERE), var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (160)) ;
            }
            GGS_app_obj  var_cas_app ;
            const GGS_app_map  temp_6231 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (162)) ;
            if (temp_6231.isBuilt ()) {
              temp_6231 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (162)) ;
            }
            { const GGS_app_trusted_obj _var_6459 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (163)) ; // CAST instruction
              if (_var_6459.getPtr () != NULL) {
                macroValidPointer (_var_6459.getPtr ()) ;
                if (typeid (cPtr_app_trusted_true) == typeid (* (_var_6459.getPtr ()))) {
                  var_cas_mp_table.appendCString ("  NULL,\n") ;
                }else{
                  var_cas_mp_table.appendCString ("  &") ;
                  var_cas_mp_table.dotAssign_operation (operand_5881->name) ;
                  var_cas_mp_table.appendCString ("_mp_desc,\n") ;
                }
              }
            }
          }
        }else if (cond_6495.isBuiltAndFalse ()) {
          var_cas_mp_table.appendCString ("  &") ;
          var_cas_mp_table.dotAssign_operation (operand_5881->name) ;
          var_cas_mp_table.appendCString ("_mp_desc,\n") ;
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_6589 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (175)), true) ;
      const GGS_isr_map::cElement * operand_6589 = NULL ;
      while (((operand_6589 = enumerator_6589.nextObject ()))) {
        macroValidPointer (operand_6589) ;
        var_cas_mp_table.appendCString ("  &") ;
        var_cas_mp_table.dotAssign_operation (operand_6589->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176))) ;
        var_cas_mp_table.appendCString ("_mp_desc,\n") ;
      }
    }
    var_cas_mp_table.appendCString ("  NULL\n"
      "};") ;
    GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (180)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$APPLICATION$"),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (182)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$LINKER_SYM$"),  var_cas_ext COMMA_SOURCE_FILE_AT_LINE (183)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$REGION_DESC$"),  var_cas_dec COMMA_SOURCE_FILE_AT_LINE (184)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$INIT_CODE$"),  var_cas_init COMMA_SOURCE_FILE_AT_LINE (185)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$DESC_TABLE$"),  var_cas_mp_table COMMA_SOURCE_FILE_AT_LINE (186)) ;
    ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$MEMORY_PROTECTION$"),  var_cas_tpl_mp COMMA_SOURCE_FILE_AT_LINE (188)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mp\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_link_script"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_link_script (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_link_script at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linker = function_linker (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (195)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) COMMA_SOURCE_FILE_AT_LINE (195)) ;
  const GGS_bool cond_9866 = (var_cas_linker).operator_isNotEqual (GGS_string ("")) ;
  if (cond_9866.isBuiltAndTrue ()) {
    GGS_string var_cas_task_vars = GGS_string ("") ;
    GGS_string var_cas_isr_vars = GGS_string ("") ;
    GGS_string var_cas_task_stack = GGS_string ("") ;
    GGS_string var_cas_isr_stack = GGS_string ("") ;
    GGS_string var_cas_app_vars = GGS_string ("") ;
    GGS_string var_cas_user_consts = GGS_string ("") ;
    GGS_string var_cas_user_code = GGS_string ("") ;
    GGS_string var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_var") COMMA_SOURCE_FILE_AT_LINE (206)) ;
    GGS_string var_cas_stack_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_stack") COMMA_SOURCE_FILE_AT_LINE (207)) ;
    GGS_string var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_const") COMMA_SOURCE_FILE_AT_LINE (208)) ;
    GGS_string var_cas_code_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_code") COMMA_SOURCE_FILE_AT_LINE (209)) ;
    {
      GGS_task_map::cEnumerator enumerator_7713 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (210)), true) ;
      const GGS_task_map::cElement * operand_7713 = NULL ;
      while (((operand_7713 = enumerator_7713.nextObject ()))) {
        macroValidPointer (operand_7713) ;
        var_cas_task_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_7713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (211)) COMMA_SOURCE_FILE_AT_LINE (211))) ;
        var_cas_task_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_7713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (212)) COMMA_SOURCE_FILE_AT_LINE (212))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_7713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (213)) COMMA_SOURCE_FILE_AT_LINE (213))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_7713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214)) COMMA_SOURCE_FILE_AT_LINE (214))) ;
      }
    }
    var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_var") COMMA_SOURCE_FILE_AT_LINE (218)) ;
    var_cas_stack_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_stack") COMMA_SOURCE_FILE_AT_LINE (219)) ;
    var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_const") COMMA_SOURCE_FILE_AT_LINE (220)) ;
    var_cas_code_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_code") COMMA_SOURCE_FILE_AT_LINE (221)) ;
    {
      GGS_isr_map::cEnumerator enumerator_8390 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (222)), true) ;
      const GGS_isr_map::cElement * operand_8390 = NULL ;
      while (((operand_8390 = enumerator_8390.nextObject ()))) {
        macroValidPointer (operand_8390) ;
        var_cas_isr_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_8390->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223)) COMMA_SOURCE_FILE_AT_LINE (223))) ;
        var_cas_isr_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_8390->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) COMMA_SOURCE_FILE_AT_LINE (224))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_8390->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (225)) COMMA_SOURCE_FILE_AT_LINE (225))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_8390->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) COMMA_SOURCE_FILE_AT_LINE (226))) ;
      }
    }
    var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("app_var") COMMA_SOURCE_FILE_AT_LINE (230)) ;
    var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("app_const") COMMA_SOURCE_FILE_AT_LINE (231)) ;
    {
      GGS_app_map::cEnumerator enumerator_8965 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (232)), true) ;
      const GGS_app_map::cElement * operand_8965 = NULL ;
      while (((operand_8965 = enumerator_8965.nextObject ()))) {
        macroValidPointer (operand_8965) ;
        var_cas_app_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_8965->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) COMMA_SOURCE_FILE_AT_LINE (233))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_8965->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) COMMA_SOURCE_FILE_AT_LINE (234))) ;
      }
    }
    GGS_string var_cas_script = function_template_string (inLexique, var_cas_linker, GGS_string ("script") COMMA_SOURCE_FILE_AT_LINE (238)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CODE$"),  var_cas_user_code COMMA_SOURCE_FILE_AT_LINE (239)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CONST$"),  var_cas_user_consts COMMA_SOURCE_FILE_AT_LINE (240)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_VAR$"),  (var_cas_task_vars).operator_concat (var_cas_isr_vars) COMMA_SOURCE_FILE_AT_LINE (241)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_STACK$"),  (var_cas_task_stack).operator_concat (var_cas_isr_stack) COMMA_SOURCE_FILE_AT_LINE (242)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$APP_VAR$"),  var_cas_app_vars COMMA_SOURCE_FILE_AT_LINE (243)) ;
    GGS_string var_cas_script_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (245))).operator_concat (GGS_string ("/script.ld")) ;
    GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
    const GGS_bool cond_9856 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
    if (cond_9856.isBuiltAndTrue ()) {
      const GGS_bool cond_9787 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_9787.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_script_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (249)) ;
      }
      const GGS_string temp_9833 = var_cas_script ;
      if (temp_9833.isBuilt ()) {
        temp_9833 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_script_file COMMA_SOURCE_FILE_AT_LINE (251)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_link_script\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_memmap"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_memmap (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_memmap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (259)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (259)) COMMA_SOURCE_FILE_AT_LINE (259)) ;
  const GGS_bool cond_15820 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_15820.isBuiltAndTrue ()) {
    GGS_string var_cas_mm = function_memmap_template (inLexique, var_cas_cc, GGS_string ("MemMap.h") COMMA_SOURCE_FILE_AT_LINE (261)) ;
    GGS_string var_cas_result = GGS_string ("") ;
    GGS_string var_cas_gen_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("generic_section") COMMA_SOURCE_FILE_AT_LINE (263)) ;
    GGS_string var_cas_section_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (264)) ;
    GGS_string var_cas_config_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("CONFIG") COMMA_SOURCE_FILE_AT_LINE (265)) ;
    GGS_stringlist  var_cas_data_size = GGS_stringlist ::constructor_emptyList () ;
    var_cas_data_size.addAssign_operation (GGS_string ("BOOLEAN")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("8BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("16BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("32BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("UNSPECIFIED")) ;
    GGS_stringlist  var_cas_sub_kind = GGS_stringlist ::constructor_emptyList () ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_NOINIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_POWER_ON_INIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_FAST")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("")) ;
    GGS_string var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (278)) ;
    {
      GGS_task_map::cEnumerator enumerator_10744 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (279)), true) ;
      const GGS_task_map::cElement * operand_10744 = NULL ;
      while (((operand_10744 = enumerator_10744.nextObject ()))) {
        macroValidPointer (operand_10744) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_10744->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280)) COMMA_SOURCE_FILE_AT_LINE (280)) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (282)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11005 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_11005 = NULL ;
          while (((operand_11005 = enumerator_11005.nextObject ()))) {
            macroValidPointer (operand_11005) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_11005->mValue COMMA_SOURCE_FILE_AT_LINE (284)) ;
            {
              GGS_stringlist::cEnumerator enumerator_11145 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_11145 = NULL ;
              while (((operand_11145 = enumerator_11145.nextObject ()))) {
                macroValidPointer (operand_11145) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_11145->mValue COMMA_SOURCE_FILE_AT_LINE (286)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (291)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (292)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11589 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_11589 = NULL ;
          while (((operand_11589 = enumerator_11589.nextObject ()))) {
            macroValidPointer (operand_11589) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_11589->mValue COMMA_SOURCE_FILE_AT_LINE (294)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (297)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (298)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11959 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_11959 = NULL ;
          while (((operand_11959 = enumerator_11959.nextObject ()))) {
            macroValidPointer (operand_11959) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_11959->mValue COMMA_SOURCE_FILE_AT_LINE (300)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (303)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (304)) ;
        {
          GGS_stringlist::cEnumerator enumerator_12329 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_12329 = NULL ;
          while (((operand_12329 = enumerator_12329.nextObject ()))) {
            macroValidPointer (operand_12329) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12329->mValue COMMA_SOURCE_FILE_AT_LINE (306)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (310)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (311)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (312)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_10744->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (313)) COMMA_SOURCE_FILE_AT_LINE (313)) ;
        {
          GGS_stringlist::cEnumerator enumerator_12901 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_12901 = NULL ;
          while (((operand_12901 = enumerator_12901.nextObject ()))) {
            macroValidPointer (operand_12901) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12901->mValue COMMA_SOURCE_FILE_AT_LINE (315)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
      }
    }
    var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (320)) ;
    {
      GGS_isr_map::cEnumerator enumerator_13180 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (321)), true) ;
      const GGS_isr_map::cElement * operand_13180 = NULL ;
      while (((operand_13180 = enumerator_13180.nextObject ()))) {
        macroValidPointer (operand_13180) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_13180->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (322)) COMMA_SOURCE_FILE_AT_LINE (322)) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (324)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13440 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_13440 = NULL ;
          while (((operand_13440 = enumerator_13440.nextObject ()))) {
            macroValidPointer (operand_13440) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_13440->mValue COMMA_SOURCE_FILE_AT_LINE (326)) ;
            {
              GGS_stringlist::cEnumerator enumerator_13580 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_13580 = NULL ;
              while (((operand_13580 = enumerator_13580.nextObject ()))) {
                macroValidPointer (operand_13580) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13580->mValue COMMA_SOURCE_FILE_AT_LINE (328)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (333)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (334)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14024 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_14024 = NULL ;
          while (((operand_14024 = enumerator_14024.nextObject ()))) {
            macroValidPointer (operand_14024) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_14024->mValue COMMA_SOURCE_FILE_AT_LINE (336)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (339)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (340)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14394 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_14394 = NULL ;
          while (((operand_14394 = enumerator_14394.nextObject ()))) {
            macroValidPointer (operand_14394) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_14394->mValue COMMA_SOURCE_FILE_AT_LINE (342)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (345)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (346)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14764 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_14764 = NULL ;
          while (((operand_14764 = enumerator_14764.nextObject ()))) {
            macroValidPointer (operand_14764) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_14764->mValue COMMA_SOURCE_FILE_AT_LINE (348)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (352)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (353)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (354)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_13180->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (355)) COMMA_SOURCE_FILE_AT_LINE (355)) ;
        {
          GGS_stringlist::cEnumerator enumerator_15335 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_15335 = NULL ;
          while (((operand_15335 = enumerator_15335.nextObject ()))) {
            macroValidPointer (operand_15335) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15335->mValue COMMA_SOURCE_FILE_AT_LINE (357)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$APP_MEMMAP$"),  var_cas_result COMMA_SOURCE_FILE_AT_LINE (362)) ;
    GGS_string var_cas_mm_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (364))).operator_concat (GGS_string ("/MemMap.h")) ;
    const GGS_bool cond_15808 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_15808.isBuiltAndTrue ()) {
      const GGS_bool cond_15747 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_15747.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_mm_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (367)) ;
      }
      const GGS_string temp_15789 = var_cas_mm ;
      if (temp_15789.isBuilt ()) {
        temp_15789 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_mm_file COMMA_SOURCE_FILE_AT_LINE (369)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_memmap\n") ;
  #endif
}

//---------------------------------------------------------------------------*

