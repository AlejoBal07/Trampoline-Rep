//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'memory_mapping.cpp'                          *
//                        Generated by version 1.9.4                         *
//                    november 13th, 2009, at 16h30'59"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "memory_mapping.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "memory_mapping.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of function "memmap_template"                *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_memmap_template (C_Compiler & inLexique,
                                const GGS_string  var_cas_compiler,
                                const GGS_string  var_cas_tpl_name COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_memmap_template at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_tpl ;
  GGS_string var_cas_rtd = function_root_templates_directory (inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
  GGS_string var_cas_path = (((((var_cas_rtd).operator_concat (GGS_string ("/"))).operator_concat (var_cas_compiler)).operator_concat (GGS_string ("/"))).operator_concat (var_cas_tpl_name)).operator_concat (GGS_string (".tpl")) ;
  inLexique.printMessage ((var_cas_rtd).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (45)) ;
  inLexique.printMessage ((var_cas_path).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  const GGS_bool cond_1199 = var_cas_path.reader_fileExists (inLexique COMMA_SOURCE_FILE_AT_LINE (47)) ;
  if (cond_1199.isBuiltAndTrue ()) {
    var_cas_tpl = GGS_string::constructor_stringWithContentsOfFile (inLexique, var_cas_path COMMA_HERE) ;
  }else if (cond_1199.isBuiltAndFalse ()) {
    var_cas_tpl = GGS_string ("") ;
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, (GGS_string ("No template for ")).operator_concat (var_cas_tpl_name) COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_memmap_template\n") ;
  #endif
  return var_cas_tpl ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_mp"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mp (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation,
                                GGS_string & /* var_cas_obj_header */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mp at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4689 = function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (66)) ;
  if (cond_4689.isBuiltAndTrue ()) {
    GGS_string var_cas_tpl_mp = function_template_string (inLexique, GGS_string ("code"), GGS_string ("mp") COMMA_SOURCE_FILE_AT_LINE (67)) ;
    GGS_string var_cas_tpl_mp_desc = function_template_string (inLexique, GGS_string ("code"), GGS_string ("mp_desc") COMMA_SOURCE_FILE_AT_LINE (68)) ;
    GGS_string var_cas_dec = GGS_string ("") ;
    GGS_string var_cas_ext = GGS_string ("") ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$TIMESTAMP$"),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (72)) ;
    GGS_stringset  var_cas_known_osapp = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_task_map::cEnumerator enumerator_1867 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), true) ;
      const GGS_task_map::cElement * operand_1867 = NULL ;
      while (((operand_1867 = enumerator_1867.nextObject ()))) {
        macroValidPointer (operand_1867) ;
        GGS_string var_cas_desc = var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_1867->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (77)) COMMA_SOURCE_FILE_AT_LINE (77)) ;
        const GGS_bool cond_2474 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_2474.isBuiltAndTrue ()) {
          const GGS_bool cond_2459 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (79))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_2459.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_2116 = var_cas_app_for_obj ;
            if (temp_2116.isBuilt ()) {
              temp_2116 (HERE)->method_get (inLexique, operand_1867->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (81)) ;
            }
            const GGS_bool cond_2442 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (82))).operator_not () ;
            if (cond_2442.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              ::routine_doReplace (inLexique,  var_cas_desc,  GGS_string ("$APP_NAME$"),  var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (85)) ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_dec.dotAssign_operation (var_cas_desc) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_2531 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), true) ;
      const GGS_isr_map::cElement * operand_2531 = NULL ;
      while (((operand_2531 = enumerator_2531.nextObject ()))) {
        macroValidPointer (operand_2531) ;
        GGS_string var_cas_desc = var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_2531->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (94)) COMMA_SOURCE_FILE_AT_LINE (94)) ;
        const GGS_bool cond_3083 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_3083.isBuiltAndTrue ()) {
          const GGS_bool cond_3068 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (96))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_3068.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_2779 = var_cas_app_for_obj ;
            if (temp_2779.isBuilt ()) {
              temp_2779 (HERE)->method_get (inLexique, operand_2531->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (98)) ;
            }
            const GGS_bool cond_3051 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (99))).operator_not () ;
            if (cond_3051.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_dec.dotAssign_operation (var_cas_desc) ;
      }
    }
    GGS_tasks_by_type  var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
    {
      GGS_task_map::cEnumerator enumerator_3240 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), true) ;
      const GGS_task_map::cElement * operand_3240 = NULL ;
      while (((operand_3240 = enumerator_3240.nextObject ()))) {
        macroValidPointer (operand_3240) ;
        const GGS_bool cond_3342 = (operand_3240->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (112)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (112))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_3342.isBuiltAndTrue ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (0U), operand_3240->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
        }else if (cond_3342.isBuiltAndFalse ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (1U), operand_3240->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (115))) ;
        }
      }
    }
    GGS_string var_cas_mp_table = GGS_string ("CONSTP2VAR(tpl_mem_prot_desc, AUTOMATIC, OS_VAR) tpl_mp_table[TASK_COUNT + ISR_COUNT + 1] = {\n") ;
    {
      GGS_tasks_by_type::cEnumerator enumerator_3556 (var_cas_stasks, true) ;
      const GGS_tasks_by_type::cElement * operand_3556 = NULL ;
      while (((operand_3556 = enumerator_3556.nextObject ()))) {
        macroValidPointer (operand_3556) ;
        const GGS_bool cond_4170 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_4170.isBuiltAndTrue ()) {
          const GGS_bool cond_4154 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (124))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_4154.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_3812 = var_cas_app_for_obj ;
            if (temp_3812.isBuilt ()) {
              temp_3812 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_3556->name, GGS_location (inLexique) COMMA_HERE), var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (126)) ;
            }
            GGS_app_obj  var_cas_app ;
            const GGS_app_map  temp_3906 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (128)) ;
            if (temp_3906.isBuilt ()) {
              temp_3906 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (128)) ;
            }
            { const GGS_app_trusted_obj _var_4134 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ; // CAST instruction
              if (_var_4134.getPtr () != NULL) {
                macroValidPointer (_var_4134.getPtr ()) ;
                if (typeid (cPtr_app_trusted_true) == typeid (* (_var_4134.getPtr ()))) {
                  var_cas_mp_table.appendCString ("  NULL,\n") ;
                }else{
                  var_cas_mp_table.appendCString ("  &") ;
                  var_cas_mp_table.dotAssign_operation (operand_3556->name) ;
                  var_cas_mp_table.appendCString ("_mp_desc,\n") ;
                }
              }
            }
          }
        }else if (cond_4170.isBuiltAndFalse ()) {
          var_cas_mp_table.appendCString ("  &") ;
          var_cas_mp_table.dotAssign_operation (operand_3556->name) ;
          var_cas_mp_table.appendCString ("_mp_desc,\n") ;
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_4264 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (141)), true) ;
      const GGS_isr_map::cElement * operand_4264 = NULL ;
      while (((operand_4264 = enumerator_4264.nextObject ()))) {
        macroValidPointer (operand_4264) ;
        var_cas_mp_table.appendCString ("  &") ;
        var_cas_mp_table.dotAssign_operation (operand_4264->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142))) ;
        var_cas_mp_table.appendCString ("_mp_desc,\n") ;
      }
    }
    var_cas_mp_table.appendCString ("  NULL\n"
      "};") ;
    GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (146)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$APPLICATION$"),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (148)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$LINKER_SYM$"),  var_cas_ext COMMA_SOURCE_FILE_AT_LINE (149)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$REGION_DESC$"),  var_cas_dec COMMA_SOURCE_FILE_AT_LINE (150)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$DESC_TABLE$"),  var_cas_mp_table COMMA_SOURCE_FILE_AT_LINE (151)) ;
    ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$MEMORY_PROTECTION$"),  var_cas_tpl_mp COMMA_SOURCE_FILE_AT_LINE (153)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mp\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_link_script"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_link_script (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_link_script at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linker = function_linker (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (160)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) COMMA_SOURCE_FILE_AT_LINE (160)) ;
  const GGS_bool cond_7493 = (var_cas_linker).operator_isNotEqual (GGS_string ("")) ;
  if (cond_7493.isBuiltAndTrue ()) {
    GGS_string var_cas_task_vars = GGS_string ("") ;
    GGS_string var_cas_isr_vars = GGS_string ("") ;
    GGS_string var_cas_task_stack = GGS_string ("") ;
    GGS_string var_cas_isr_stack = GGS_string ("") ;
    GGS_string var_cas_app_vars = GGS_string ("") ;
    GGS_string var_cas_user_consts = GGS_string ("") ;
    GGS_string var_cas_user_code = GGS_string ("") ;
    GGS_string var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_var") COMMA_SOURCE_FILE_AT_LINE (171)) ;
    GGS_string var_cas_stack_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_stack") COMMA_SOURCE_FILE_AT_LINE (172)) ;
    GGS_string var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_const") COMMA_SOURCE_FILE_AT_LINE (173)) ;
    GGS_string var_cas_code_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("task_code") COMMA_SOURCE_FILE_AT_LINE (174)) ;
    {
      GGS_task_map::cEnumerator enumerator_5340 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (175)), true) ;
      const GGS_task_map::cElement * operand_5340 = NULL ;
      while (((operand_5340 = enumerator_5340.nextObject ()))) {
        macroValidPointer (operand_5340) ;
        var_cas_task_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5340->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (176)) COMMA_SOURCE_FILE_AT_LINE (176))) ;
        var_cas_task_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5340->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) COMMA_SOURCE_FILE_AT_LINE (177))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5340->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) COMMA_SOURCE_FILE_AT_LINE (178))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5340->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) COMMA_SOURCE_FILE_AT_LINE (179))) ;
      }
    }
    var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_var") COMMA_SOURCE_FILE_AT_LINE (183)) ;
    var_cas_stack_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_stack") COMMA_SOURCE_FILE_AT_LINE (184)) ;
    var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_const") COMMA_SOURCE_FILE_AT_LINE (185)) ;
    var_cas_code_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("isr_code") COMMA_SOURCE_FILE_AT_LINE (186)) ;
    {
      GGS_isr_map::cEnumerator enumerator_6017 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (187)), true) ;
      const GGS_isr_map::cElement * operand_6017 = NULL ;
      while (((operand_6017 = enumerator_6017.nextObject ()))) {
        macroValidPointer (operand_6017) ;
        var_cas_isr_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_6017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (188)) COMMA_SOURCE_FILE_AT_LINE (188))) ;
        var_cas_isr_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_6017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189)) COMMA_SOURCE_FILE_AT_LINE (189))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_6017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190)) COMMA_SOURCE_FILE_AT_LINE (190))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_6017->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) COMMA_SOURCE_FILE_AT_LINE (191))) ;
      }
    }
    var_cas_var_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("app_var") COMMA_SOURCE_FILE_AT_LINE (195)) ;
    var_cas_const_tpl = function_template_string (inLexique, var_cas_linker, GGS_string ("app_const") COMMA_SOURCE_FILE_AT_LINE (196)) ;
    {
      GGS_app_map::cEnumerator enumerator_6592 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (197)), true) ;
      const GGS_app_map::cElement * operand_6592 = NULL ;
      while (((operand_6592 = enumerator_6592.nextObject ()))) {
        macroValidPointer (operand_6592) ;
        var_cas_app_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_6592->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_6592->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (199)) COMMA_SOURCE_FILE_AT_LINE (199))) ;
      }
    }
    GGS_string var_cas_script = function_template_string (inLexique, var_cas_linker, GGS_string ("script") COMMA_SOURCE_FILE_AT_LINE (203)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CODE$"),  var_cas_user_code COMMA_SOURCE_FILE_AT_LINE (204)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CONST$"),  var_cas_user_consts COMMA_SOURCE_FILE_AT_LINE (205)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_VAR$"),  (var_cas_task_vars).operator_concat (var_cas_isr_vars) COMMA_SOURCE_FILE_AT_LINE (206)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_STACK$"),  (var_cas_task_stack).operator_concat (var_cas_isr_stack) COMMA_SOURCE_FILE_AT_LINE (207)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$APP_VAR$"),  var_cas_app_vars COMMA_SOURCE_FILE_AT_LINE (208)) ;
    GGS_string var_cas_script_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (210))).operator_concat (GGS_string ("/script.ld")) ;
    GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
    const GGS_bool cond_7483 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
    if (cond_7483.isBuiltAndTrue ()) {
      const GGS_bool cond_7414 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_7414.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_script_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (214)) ;
      }
      const GGS_string temp_7460 = var_cas_script ;
      if (temp_7460.isBuilt ()) {
        temp_7460 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_script_file COMMA_SOURCE_FILE_AT_LINE (216)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_link_script\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_memmap"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_memmap (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_memmap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (224)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) COMMA_SOURCE_FILE_AT_LINE (224)) ;
  const GGS_bool cond_16790 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_16790.isBuiltAndTrue ()) {
    GGS_string var_cas_mm = function_memmap_template (inLexique, var_cas_cc, GGS_string ("MemMap.h") COMMA_SOURCE_FILE_AT_LINE (226)) ;
    GGS_string var_cas_result = GGS_string ("") ;
    GGS_string var_cas_gen_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("generic_section") COMMA_SOURCE_FILE_AT_LINE (228)) ;
    GGS_string var_cas_section_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (229)) ;
    GGS_string var_cas_config_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("CONFIG") COMMA_SOURCE_FILE_AT_LINE (230)) ;
    GGS_stringlist  var_cas_data_size = GGS_stringlist ::constructor_emptyList () ;
    var_cas_data_size.addAssign_operation (GGS_string ("_32BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_16BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_8BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_BOOLEAN")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_UNSPECIFIED")) ;
    GGS_stringlist  var_cas_sub_kind = GGS_stringlist ::constructor_emptyList () ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_NOINIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_POWER_ON_INIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_FAST")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("")) ;
    GGS_string var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (243)) ;
    {
      GGS_task_map::cEnumerator enumerator_8376 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (244)), true) ;
      const GGS_task_map::cElement * operand_8376 = NULL ;
      while (((operand_8376 = enumerator_8376.nextObject ()))) {
        macroValidPointer (operand_8376) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_8376->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245)) COMMA_SOURCE_FILE_AT_LINE (245)) ;
        GGS_string var_cas_code_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (247)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (248)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (249)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (250)) ;
        var_cas_result.dotAssign_operation (var_cas_code_sec_tpl) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (253)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (254)) ;
        {
          GGS_stringlist::cEnumerator enumerator_8988 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_8988 = NULL ;
          while (((operand_8988 = enumerator_8988.nextObject ()))) {
            macroValidPointer (operand_8988) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_8988->mValue COMMA_SOURCE_FILE_AT_LINE (256)) ;
            {
              GGS_stringlist::cEnumerator enumerator_9128 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_9128 = NULL ;
              while (((operand_9128 = enumerator_9128.nextObject ()))) {
                macroValidPointer (operand_9128) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_9128->mValue COMMA_SOURCE_FILE_AT_LINE (258)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (263)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (264)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (265)) ;
        {
          GGS_stringlist::cEnumerator enumerator_9623 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_9623 = NULL ;
          while (((operand_9623 = enumerator_9623.nextObject ()))) {
            macroValidPointer (operand_9623) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_9623->mValue COMMA_SOURCE_FILE_AT_LINE (267)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (270)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (271)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (272)) ;
        {
          GGS_stringlist::cEnumerator enumerator_10044 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_10044 = NULL ;
          while (((operand_10044 = enumerator_10044.nextObject ()))) {
            macroValidPointer (operand_10044) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_10044->mValue COMMA_SOURCE_FILE_AT_LINE (274)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (277)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (278)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (279)) ;
        {
          GGS_stringlist::cEnumerator enumerator_10465 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_10465 = NULL ;
          while (((operand_10465 = enumerator_10465.nextObject ()))) {
            macroValidPointer (operand_10465) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_10465->mValue COMMA_SOURCE_FILE_AT_LINE (281)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (285)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (286)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (287)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (288)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_8376->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (289)) COMMA_SOURCE_FILE_AT_LINE (289)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11083 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_11083 = NULL ;
          while (((operand_11083 = enumerator_11083.nextObject ()))) {
            macroValidPointer (operand_11083) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_11083->mValue COMMA_SOURCE_FILE_AT_LINE (291)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
      }
    }
    var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (296)) ;
    {
      GGS_isr_map::cEnumerator enumerator_11362 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (297)), true) ;
      const GGS_isr_map::cElement * operand_11362 = NULL ;
      while (((operand_11362 = enumerator_11362.nextObject ()))) {
        macroValidPointer (operand_11362) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_11362->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298)) COMMA_SOURCE_FILE_AT_LINE (298)) ;
        GGS_string var_cas_code_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (300)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (301)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (302)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (303)) ;
        var_cas_result.dotAssign_operation (var_cas_code_sec_tpl) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (306)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (307)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11973 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_11973 = NULL ;
          while (((operand_11973 = enumerator_11973.nextObject ()))) {
            macroValidPointer (operand_11973) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_11973->mValue COMMA_SOURCE_FILE_AT_LINE (309)) ;
            {
              GGS_stringlist::cEnumerator enumerator_12113 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_12113 = NULL ;
              while (((operand_12113 = enumerator_12113.nextObject ()))) {
                macroValidPointer (operand_12113) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12113->mValue COMMA_SOURCE_FILE_AT_LINE (311)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (316)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (317)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (318)) ;
        {
          GGS_stringlist::cEnumerator enumerator_12608 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_12608 = NULL ;
          while (((operand_12608 = enumerator_12608.nextObject ()))) {
            macroValidPointer (operand_12608) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12608->mValue COMMA_SOURCE_FILE_AT_LINE (320)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (323)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (324)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (325)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13029 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13029 = NULL ;
          while (((operand_13029 = enumerator_13029.nextObject ()))) {
            macroValidPointer (operand_13029) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13029->mValue COMMA_SOURCE_FILE_AT_LINE (327)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (330)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (331)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (332)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13450 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13450 = NULL ;
          while (((operand_13450 = enumerator_13450.nextObject ()))) {
            macroValidPointer (operand_13450) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13450->mValue COMMA_SOURCE_FILE_AT_LINE (334)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (338)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (339)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (340)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (341)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_11362->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (342)) COMMA_SOURCE_FILE_AT_LINE (342)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14067 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_14067 = NULL ;
          while (((operand_14067 = enumerator_14067.nextObject ()))) {
            macroValidPointer (operand_14067) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_14067->mValue COMMA_SOURCE_FILE_AT_LINE (344)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$APP_MEMMAP$"),  var_cas_result COMMA_SOURCE_FILE_AT_LINE (349)) ;
    GGS_string var_cas_os_secs = GGS_string ("") ;
    GGS_string var_cas_os_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("os_section") COMMA_SOURCE_FILE_AT_LINE (353)) ;
    GGS_string var_cas_code_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (354)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (355)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (356)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (357)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (358)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SECTION$"),  GGS_string (".osCode") COMMA_SOURCE_FILE_AT_LINE (359)) ;
    var_cas_os_secs.dotAssign_operation (var_cas_code_section) ;
    GGS_string var_cas_var_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (362)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (363)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (364)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$SECTION$"),  GGS_string (".osVar") COMMA_SOURCE_FILE_AT_LINE (365)) ;
    GGS_string var_cas_no_init = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_NOINIT") COMMA_SOURCE_FILE_AT_LINE (366)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15105 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15105 = NULL ;
      while (((operand_15105 = enumerator_15105.nextObject ()))) {
        macroValidPointer (operand_15105) ;
        var_cas_os_secs.dotAssign_operation (var_cas_no_init.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15105->mValue COMMA_SOURCE_FILE_AT_LINE (368))) ;
      }
    }
    GGS_string var_cas_power_on = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_POWER_ON_INIT") COMMA_SOURCE_FILE_AT_LINE (370)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15340 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15340 = NULL ;
      while (((operand_15340 = enumerator_15340.nextObject ()))) {
        macroValidPointer (operand_15340) ;
        var_cas_os_secs.dotAssign_operation (var_cas_power_on.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15340->mValue COMMA_SOURCE_FILE_AT_LINE (372))) ;
      }
    }
    GGS_string var_cas_fast = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_POWER_ON_INIT") COMMA_SOURCE_FILE_AT_LINE (374)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15572 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15572 = NULL ;
      while (((operand_15572 = enumerator_15572.nextObject ()))) {
        macroValidPointer (operand_15572) ;
        var_cas_os_secs.dotAssign_operation (var_cas_fast.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15572->mValue COMMA_SOURCE_FILE_AT_LINE (376))) ;
      }
    }
    GGS_string var_cas_var = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (378)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15785 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15785 = NULL ;
      while (((operand_15785 = enumerator_15785.nextObject ()))) {
        macroValidPointer (operand_15785) ;
        var_cas_os_secs.dotAssign_operation (var_cas_var.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15785->mValue COMMA_SOURCE_FILE_AT_LINE (380))) ;
      }
    }
    GGS_string var_cas_const_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (383)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (384)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (385)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$SECTION$"),  GGS_string (".osConst") COMMA_SOURCE_FILE_AT_LINE (386)) ;
    GGS_string var_cas_os_const = var_cas_const_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (387)) ;
    {
      GGS_stringlist::cEnumerator enumerator_16248 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_16248 = NULL ;
      while (((operand_16248 = enumerator_16248.nextObject ()))) {
        macroValidPointer (operand_16248) ;
        var_cas_os_secs.dotAssign_operation (var_cas_os_const.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_16248->mValue COMMA_SOURCE_FILE_AT_LINE (389))) ;
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$OS_MEMMAP$"),  var_cas_os_secs COMMA_SOURCE_FILE_AT_LINE (392)) ;
    GGS_string var_cas_api_tpl = function_memmap_template (inLexique, var_cas_cc, GGS_string ("api_section") COMMA_SOURCE_FILE_AT_LINE (395)) ;
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$API_MEMMAP$"),  var_cas_api_tpl COMMA_SOURCE_FILE_AT_LINE (396)) ;
    GGS_string var_cas_mm_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (398))).operator_concat (GGS_string ("/MemMap.h")) ;
    const GGS_bool cond_16778 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_16778.isBuiltAndTrue ()) {
      const GGS_bool cond_16717 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_16717.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_mm_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (401)) ;
      }
      const GGS_string temp_16759 = var_cas_mm ;
      if (temp_16759.isBuilt ()) {
        temp_16759 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_mm_file COMMA_SOURCE_FILE_AT_LINE (403)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_memmap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_compiler"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_compiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_compiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (413)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (413)) COMMA_SOURCE_FILE_AT_LINE (413)) ;
  const GGS_bool cond_17545 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17545.isBuiltAndTrue ()) {
    GGS_string var_cas_comp = function_memmap_template (inLexique, var_cas_cc, GGS_string ("Compiler.h") COMMA_SOURCE_FILE_AT_LINE (415)) ;
    GGS_string var_cas_comp_cfg = function_memmap_template (inLexique, var_cas_cc, GGS_string ("Compiler_Cfg.h") COMMA_SOURCE_FILE_AT_LINE (416)) ;
    GGS_string var_cas_comp_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (417))).operator_concat (GGS_string ("/Compiler.h")) ;
    GGS_string var_cas_comp_cfg_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (418))).operator_concat (GGS_string ("/Compiler_Cfg.h")) ;
    const GGS_bool cond_17535 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_17535.isBuiltAndTrue ()) {
      const GGS_bool cond_17302 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_17302.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_comp_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (422)) ;
      }
      const GGS_string temp_17346 = var_cas_comp ;
      if (temp_17346.isBuilt ()) {
        temp_17346 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_comp_file COMMA_SOURCE_FILE_AT_LINE (424)) ;
      }
      const GGS_bool cond_17462 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_17462.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_comp_cfg_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (426)) ;
      }
      const GGS_string temp_17510 = var_cas_comp_cfg ;
      if (temp_17510.isBuilt ()) {
        temp_17510 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_comp_cfg_file COMMA_SOURCE_FILE_AT_LINE (428)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_compiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*

