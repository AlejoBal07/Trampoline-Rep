//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'memory_mapping.cpp'                          *
//                        Generated by version 1.9.4                         *
//                    november 20th, 2009, at 14h25'56"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 599
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "memory_mapping.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "memory_mapping.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_mp"                   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mp (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                const GGS_string_map   var_cas_app_for_obj,
                                GGS_string & /* var_cas_header */,
                                GGS_string & var_cas_implementation,
                                GGS_string & /* var_cas_obj_header */ COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mp at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_4226 = function_memory_protection_on (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (46)) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  if (cond_4226.isBuiltAndTrue ()) {
    GGS_string var_cas_tpl_mp = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("mp") COMMA_SOURCE_FILE_AT_LINE (47)) ;
    GGS_string var_cas_tpl_mp_desc = function_template_string_if_exist (inLexique, GGS_string ("code"), GGS_string ("mp_desc") COMMA_SOURCE_FILE_AT_LINE (48)) ;
    GGS_string var_cas_dec = GGS_string ("") ;
    GGS_string var_cas_ext = GGS_string ("") ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$TIMESTAMP$"),  GGS_string::constructor_stringWithCurrentDateTime (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (52)) ;
    GGS_stringset  var_cas_known_osapp = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_task_map::cEnumerator enumerator_1402 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (56)), true) ;
      const GGS_task_map::cElement * operand_1402 = NULL ;
      while (((operand_1402 = enumerator_1402.nextObject ()))) {
        macroValidPointer (operand_1402) ;
        GGS_string var_cas_desc = var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_1402->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (57)) COMMA_SOURCE_FILE_AT_LINE (57)) ;
        const GGS_bool cond_2009 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_2009.isBuiltAndTrue ()) {
          const GGS_bool cond_1994 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (59))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_1994.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_1651 = var_cas_app_for_obj ;
            if (temp_1651.isBuilt ()) {
              temp_1651 (HERE)->method_get (inLexique, operand_1402->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (61)) ;
            }
            const GGS_bool cond_1977 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (62))).operator_not () ;
            if (cond_1977.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              ::routine_doReplace (inLexique,  var_cas_desc,  GGS_string ("$APP_NAME$"),  var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (65)) ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_dec.dotAssign_operation (var_cas_desc) ;
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_2066 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (73)), true) ;
      const GGS_isr_map::cElement * operand_2066 = NULL ;
      while (((operand_2066 = enumerator_2066.nextObject ()))) {
        macroValidPointer (operand_2066) ;
        GGS_string var_cas_desc = var_cas_tpl_mp_desc.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_2066->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (74)) COMMA_SOURCE_FILE_AT_LINE (74)) ;
        const GGS_bool cond_2618 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_2618.isBuiltAndTrue ()) {
          const GGS_bool cond_2603 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (76))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_2603.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_2314 = var_cas_app_for_obj ;
            if (temp_2314.isBuilt ()) {
              temp_2314 (HERE)->method_get (inLexique, operand_2066->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (78)) ;
            }
            const GGS_bool cond_2586 = (var_cas_known_osapp.reader_hasKey (inLexique, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (79))).operator_not () ;
            if (cond_2586.isBuiltAndTrue ()) {
              var_cas_ext.appendCString ("extern void __SEG_START_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_ext.appendCString ("extern void __SEG_END_APP_") ;
              var_cas_ext.dotAssign_operation (var_cas_app_name) ;
              var_cas_ext.appendCString ("_VAR_RGN;\n") ;
              var_cas_known_osapp.addAssign_operation (var_cas_app_name) ;
            }
          }
        }
        var_cas_dec.dotAssign_operation (var_cas_desc) ;
      }
    }
    GGS_tasks_by_type  var_cas_stasks = GGS_tasks_by_type ::constructor_emptySortedList () ;
    {
      GGS_task_map::cEnumerator enumerator_2775 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (91)), true) ;
      const GGS_task_map::cElement * operand_2775 = NULL ;
      while (((operand_2775 = enumerator_2775.nextObject ()))) {
        macroValidPointer (operand_2775) ;
        const GGS_bool cond_2877 = (operand_2775->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (92))).operator_strictSup (GGS_uint (0U)) ;
        if (cond_2877.isBuiltAndTrue ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (0U), operand_2775->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (93))) ;
        }else if (cond_2877.isBuiltAndFalse ()) {
          var_cas_stasks.addAssign_operation (GGS_uint (1U), operand_2775->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
        }
      }
    }
    GGS_string var_cas_mp_table = GGS_string ("CONSTP2CONST(tpl_mem_prot_desc, AUTOMATIC, OS_VAR) tpl_mp_table[TASK_COUNT + ISR_COUNT + 1] = {\n") ;
    {
      GGS_tasks_by_type::cEnumerator enumerator_3093 (var_cas_stasks, true) ;
      const GGS_tasks_by_type::cElement * operand_3093 = NULL ;
      while (((operand_3093 = enumerator_3093.nextObject ()))) {
        macroValidPointer (operand_3093) ;
        const GGS_bool cond_3707 = gOption_goil_5F_options_autosar_5F_on.value () ;
        if (cond_3707.isBuiltAndTrue ()) {
          const GGS_bool cond_3691 = (var_cas_app_for_obj.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (104))).operator_strictSup (GGS_uint (0U)) ;
          if (cond_3691.isBuiltAndTrue ()) {
            GGS_string var_cas_app_name ;
            const GGS_string_map  temp_3349 = var_cas_app_for_obj ;
            if (temp_3349.isBuilt ()) {
              temp_3349 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, operand_3093->name, GGS_location (inLexique) COMMA_HERE), var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (106)) ;
            }
            GGS_app_obj  var_cas_app ;
            const GGS_app_map  temp_3443 = var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
            if (temp_3443.isBuilt ()) {
              temp_3443 (HERE)->method_get (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_app_name, GGS_location (inLexique) COMMA_HERE), var_cas_app COMMA_SOURCE_FILE_AT_LINE (108)) ;
            }
            { const GGS_app_trusted_obj _var_3671 = var_cas_app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (109)) ; // CAST instruction
              if (_var_3671.getPtr () != NULL) {
                macroValidPointer (_var_3671.getPtr ()) ;
                if (typeid (cPtr_app_trusted_true) == typeid (* (_var_3671.getPtr ()))) {
                  var_cas_mp_table.appendCString ("  NULL,\n") ;
                }else{
                  var_cas_mp_table.appendCString ("  &") ;
                  var_cas_mp_table.dotAssign_operation (operand_3093->name) ;
                  var_cas_mp_table.appendCString ("_mp_desc,\n") ;
                }
              }
            }
          }
        }else if (cond_3707.isBuiltAndFalse ()) {
          var_cas_mp_table.appendCString ("  &") ;
          var_cas_mp_table.dotAssign_operation (operand_3093->name) ;
          var_cas_mp_table.appendCString ("_mp_desc,\n") ;
        }
      }
    }
    {
      GGS_isr_map::cEnumerator enumerator_3801 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (121)), true) ;
      const GGS_isr_map::cElement * operand_3801 = NULL ;
      while (((operand_3801 = enumerator_3801.nextObject ()))) {
        macroValidPointer (operand_3801) ;
        var_cas_mp_table.appendCString ("  &") ;
        var_cas_mp_table.dotAssign_operation (operand_3801->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (122))) ;
        var_cas_mp_table.appendCString ("_mp_desc,\n") ;
      }
    }
    var_cas_mp_table.appendCString ("  NULL\n"
      "};") ;
    GGS_string var_cas_directory = function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (126)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$APPLICATION$"),  var_cas_directory COMMA_SOURCE_FILE_AT_LINE (128)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$LINKER_SYM$"),  var_cas_ext COMMA_SOURCE_FILE_AT_LINE (129)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$REGION_DESC$"),  var_cas_dec COMMA_SOURCE_FILE_AT_LINE (130)) ;
    ::routine_doReplace (inLexique,  var_cas_tpl_mp,  GGS_string ("$DESC_TABLE$"),  var_cas_mp_table COMMA_SOURCE_FILE_AT_LINE (131)) ;
    ::routine_doReplace (inLexique,  var_cas_implementation,  GGS_string ("$MEMORY_PROTECTION$"),  var_cas_tpl_mp COMMA_SOURCE_FILE_AT_LINE (133)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mp\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_link_script"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_link_script (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_link_script at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_linker = function_linker (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (140)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)) ;
  const GGS_bool cond_7162 = (var_cas_linker).operator_isNotEqual (GGS_string ("")) ;
  if (cond_7162.isBuiltAndTrue ()) {
    GGS_string var_cas_task_vars = GGS_string ("") ;
    GGS_string var_cas_isr_vars = GGS_string ("") ;
    GGS_string var_cas_task_stack = GGS_string ("") ;
    GGS_string var_cas_isr_stack = GGS_string ("") ;
    GGS_string var_cas_app_vars = GGS_string ("") ;
    GGS_string var_cas_user_consts = GGS_string ("") ;
    GGS_string var_cas_user_code = GGS_string ("") ;
    GGS_string var_cas_var_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("task_var") COMMA_SOURCE_FILE_AT_LINE (151)) ;
    GGS_string var_cas_stack_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("task_stack") COMMA_SOURCE_FILE_AT_LINE (152)) ;
    GGS_string var_cas_const_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("task_const") COMMA_SOURCE_FILE_AT_LINE (153)) ;
    GGS_string var_cas_code_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("task_code") COMMA_SOURCE_FILE_AT_LINE (154)) ;
    {
      GGS_task_map::cEnumerator enumerator_4913 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (155)), true) ;
      const GGS_task_map::cElement * operand_4913 = NULL ;
      while (((operand_4913 = enumerator_4913.nextObject ()))) {
        macroValidPointer (operand_4913) ;
        var_cas_task_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_4913->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) COMMA_SOURCE_FILE_AT_LINE (156))) ;
        var_cas_task_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_4913->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) COMMA_SOURCE_FILE_AT_LINE (157))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_4913->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) COMMA_SOURCE_FILE_AT_LINE (158))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_4913->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) COMMA_SOURCE_FILE_AT_LINE (159))) ;
      }
    }
    var_cas_var_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("isr_var") COMMA_SOURCE_FILE_AT_LINE (163)) ;
    var_cas_stack_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("isr_stack") COMMA_SOURCE_FILE_AT_LINE (164)) ;
    var_cas_const_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("isr_const") COMMA_SOURCE_FILE_AT_LINE (165)) ;
    var_cas_code_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("isr_code") COMMA_SOURCE_FILE_AT_LINE (166)) ;
    {
      GGS_isr_map::cEnumerator enumerator_5626 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (167)), true) ;
      const GGS_isr_map::cElement * operand_5626 = NULL ;
      while (((operand_5626 = enumerator_5626.nextObject ()))) {
        macroValidPointer (operand_5626) ;
        var_cas_isr_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_5626->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (168)) COMMA_SOURCE_FILE_AT_LINE (168))) ;
        var_cas_isr_stack.dotAssign_operation (var_cas_stack_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TASK_NAME$"), operand_5626->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (169)) COMMA_SOURCE_FILE_AT_LINE (169))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_5626->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (170)) COMMA_SOURCE_FILE_AT_LINE (170))) ;
        var_cas_user_code.dotAssign_operation (var_cas_code_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ISR_NAME$"), operand_5626->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (171)) COMMA_SOURCE_FILE_AT_LINE (171))) ;
      }
    }
    var_cas_var_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("app_var") COMMA_SOURCE_FILE_AT_LINE (175)) ;
    var_cas_const_tpl = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("app_const") COMMA_SOURCE_FILE_AT_LINE (176)) ;
    {
      GGS_app_map::cEnumerator enumerator_6219 (var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (177)), true) ;
      const GGS_app_map::cElement * operand_6219 = NULL ;
      while (((operand_6219 = enumerator_6219.nextObject ()))) {
        macroValidPointer (operand_6219) ;
        var_cas_app_vars.dotAssign_operation (var_cas_var_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_6219->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (178)) COMMA_SOURCE_FILE_AT_LINE (178))) ;
        var_cas_user_consts.dotAssign_operation (var_cas_const_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$APP_NAME$"), operand_6219->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (179)) COMMA_SOURCE_FILE_AT_LINE (179))) ;
      }
    }
    GGS_string var_cas_script = function_template_string_if_exist (inLexique, var_cas_linker, GGS_string ("script") COMMA_SOURCE_FILE_AT_LINE (183)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CODE$"),  var_cas_user_code COMMA_SOURCE_FILE_AT_LINE (184)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$USER_CONST$"),  var_cas_user_consts COMMA_SOURCE_FILE_AT_LINE (185)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_VAR$"),  (var_cas_task_vars).operator_concat (var_cas_isr_vars) COMMA_SOURCE_FILE_AT_LINE (186)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$PROC_STACK$"),  (var_cas_task_stack).operator_concat (var_cas_isr_stack) COMMA_SOURCE_FILE_AT_LINE (187)) ;
    ::routine_doReplace (inLexique,  var_cas_script,  GGS_string ("$APP_VAR$"),  var_cas_app_vars COMMA_SOURCE_FILE_AT_LINE (188)) ;
    GGS_string var_cas_script_file = ((function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (191))).operator_concat (GGS_string ("/"))).operator_concat (function_link_script_name (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) COMMA_SOURCE_FILE_AT_LINE (191))) ;
    GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
    const GGS_bool cond_7152 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
    if (cond_7152.isBuiltAndTrue ()) {
      const GGS_bool cond_7083 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_7083.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_script_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (195)) ;
      }
      const GGS_string temp_7129 = var_cas_script ;
      if (temp_7129.isBuilt ()) {
        temp_7129 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_script_file COMMA_SOURCE_FILE_AT_LINE (197)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_link_script\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of routine "generate_memmap"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_memmap (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_memmap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (205)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205)) ;
  const GGS_bool cond_17475 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_17475.isBuiltAndTrue ()) {
    GGS_string var_cas_mm = function_template_string_if_exist (inLexique, var_cas_cc, GGS_string ("MemMap.h") COMMA_SOURCE_FILE_AT_LINE (207)) ;
    GGS_string var_cas_result = GGS_string ("") ;
    GGS_string var_cas_gen_tpl = function_template_string_if_exist (inLexique, var_cas_cc, GGS_string ("generic_section") COMMA_SOURCE_FILE_AT_LINE (209)) ;
    GGS_string var_cas_section_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (210)) ;
    GGS_string var_cas_config_tpl = var_cas_gen_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$CONT$"), GGS_string ("CONFIG") COMMA_SOURCE_FILE_AT_LINE (211)) ;
    GGS_stringlist  var_cas_data_size = GGS_stringlist ::constructor_emptyList () ;
    var_cas_data_size.addAssign_operation (GGS_string ("_32BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_16BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_8BIT")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_BOOLEAN")) ;
    var_cas_data_size.addAssign_operation (GGS_string ("_UNSPECIFIED")) ;
    GGS_stringlist  var_cas_sub_kind = GGS_stringlist ::constructor_emptyList () ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_NOINIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_POWER_ON_INIT")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("_FAST")) ;
    var_cas_sub_kind.addAssign_operation (GGS_string ("")) ;
    GGS_string var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (224)) ;
    {
      GGS_task_map::cEnumerator enumerator_8063 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (225)), true) ;
      const GGS_task_map::cElement * operand_8063 = NULL ;
      while (((operand_8063 = enumerator_8063.nextObject ()))) {
        macroValidPointer (operand_8063) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_8063->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (226)) COMMA_SOURCE_FILE_AT_LINE (226)) ;
        GGS_string var_cas_code_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (228)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (229)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (230)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (231)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SECTION_KIND$"),  GGS_string ("text") COMMA_SOURCE_FILE_AT_LINE (232)) ;
        var_cas_result.dotAssign_operation (var_cas_code_sec_tpl) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (235)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (236)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$SECTION_KIND$"),  GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (237)) ;
        {
          GGS_stringlist::cEnumerator enumerator_8790 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_8790 = NULL ;
          while (((operand_8790 = enumerator_8790.nextObject ()))) {
            macroValidPointer (operand_8790) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_8790->mValue COMMA_SOURCE_FILE_AT_LINE (239)) ;
            {
              GGS_stringlist::cEnumerator enumerator_8930 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_8930 = NULL ;
              while (((operand_8930 = enumerator_8930.nextObject ()))) {
                macroValidPointer (operand_8930) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_8930->mValue COMMA_SOURCE_FILE_AT_LINE (241)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (246)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (247)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$SECTION_KIND$"),  GGS_string ("rodata") COMMA_SOURCE_FILE_AT_LINE (248)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (249)) ;
        {
          GGS_stringlist::cEnumerator enumerator_9486 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_9486 = NULL ;
          while (((operand_9486 = enumerator_9486.nextObject ()))) {
            macroValidPointer (operand_9486) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_9486->mValue COMMA_SOURCE_FILE_AT_LINE (251)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (254)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (255)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (256)) ;
        {
          GGS_stringlist::cEnumerator enumerator_9907 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_9907 = NULL ;
          while (((operand_9907 = enumerator_9907.nextObject ()))) {
            macroValidPointer (operand_9907) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_9907->mValue COMMA_SOURCE_FILE_AT_LINE (258)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (261)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (262)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (263)) ;
        {
          GGS_stringlist::cEnumerator enumerator_10328 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_10328 = NULL ;
          while (((operand_10328 = enumerator_10328.nextObject ()))) {
            macroValidPointer (operand_10328) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_10328->mValue COMMA_SOURCE_FILE_AT_LINE (265)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (269)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (270)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$SECTION_KIND$"),  GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (271)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (272)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("Task") COMMA_SOURCE_FILE_AT_LINE (273)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_8063->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) COMMA_SOURCE_FILE_AT_LINE (274)) ;
        {
          GGS_stringlist::cEnumerator enumerator_11000 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_11000 = NULL ;
          while (((operand_11000 = enumerator_11000.nextObject ()))) {
            macroValidPointer (operand_11000) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_11000->mValue COMMA_SOURCE_FILE_AT_LINE (276)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_stack_data = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("STACK") COMMA_SOURCE_FILE_AT_LINE (280)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (281)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$SECTION_KIND$"),  GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (282)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (283)) ;
        ::routine_doReplace (inLexique,  var_cas_stack_data,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (284)) ;
        var_cas_result.dotAssign_operation (var_cas_stack_data) ;
      }
    }
    var_cas_obj_tpl = var_cas_section_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (288)) ;
    {
      GGS_isr_map::cEnumerator enumerator_11629 (var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (289)), true) ;
      const GGS_isr_map::cElement * operand_11629 = NULL ;
      while (((operand_11629 = enumerator_11629.nextObject ()))) {
        macroValidPointer (operand_11629) ;
        GGS_string var_cas_named_sec = var_cas_obj_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_11629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290)) COMMA_SOURCE_FILE_AT_LINE (290)) ;
        GGS_string var_cas_code_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (292)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (293)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (294)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (295)) ;
        ::routine_doReplace (inLexique,  var_cas_code_sec_tpl,  GGS_string ("$SECTION_KIND$"),  GGS_string ("text") COMMA_SOURCE_FILE_AT_LINE (296)) ;
        var_cas_result.dotAssign_operation (var_cas_code_sec_tpl) ;
        GGS_string var_cas_var_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (299)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (300)) ;
        ::routine_doReplace (inLexique,  var_cas_var_sec_tpl,  GGS_string ("$SECTION_KIND$"),  GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (301)) ;
        {
          GGS_stringlist::cEnumerator enumerator_12355 (var_cas_sub_kind, true) ;
          const GGS_stringlist::cElement * operand_12355 = NULL ;
          while (((operand_12355 = enumerator_12355.nextObject ()))) {
            macroValidPointer (operand_12355) ;
            GGS_string var_cas_var_sec_sk_tpl = var_cas_var_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), operand_12355->mValue COMMA_SOURCE_FILE_AT_LINE (303)) ;
            {
              GGS_stringlist::cEnumerator enumerator_12495 (var_cas_data_size, true) ;
              const GGS_stringlist::cElement * operand_12495 = NULL ;
              while (((operand_12495 = enumerator_12495.nextObject ()))) {
                macroValidPointer (operand_12495) ;
                GGS_string var_cas_partial_result = var_cas_var_sec_sk_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_12495->mValue COMMA_SOURCE_FILE_AT_LINE (305)) ;
                var_cas_result.dotAssign_operation (var_cas_partial_result) ;
              }
            }
          }
        }
        GGS_string var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (310)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (311)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$SECTION_KIND$"),  GGS_string ("rodata") COMMA_SOURCE_FILE_AT_LINE (312)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (313)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13051 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13051 = NULL ;
          while (((operand_13051 = enumerator_13051.nextObject ()))) {
            macroValidPointer (operand_13051) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13051->mValue COMMA_SOURCE_FILE_AT_LINE (315)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CALIB") COMMA_SOURCE_FILE_AT_LINE (318)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (319)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (320)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13472 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13472 = NULL ;
          while (((operand_13472 = enumerator_13472.nextObject ()))) {
            macroValidPointer (operand_13472) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13472->mValue COMMA_SOURCE_FILE_AT_LINE (322)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        var_cas_const_sec_tpl = var_cas_named_sec.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CARTO") COMMA_SOURCE_FILE_AT_LINE (325)) ;
        ::routine_doReplace (inLexique,  var_cas_const_sec_tpl,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (326)) ;
        var_cas_const_sec_tpl = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (327)) ;
        {
          GGS_stringlist::cEnumerator enumerator_13893 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_13893 = NULL ;
          while (((operand_13893 = enumerator_13893.nextObject ()))) {
            macroValidPointer (operand_13893) ;
            GGS_string var_cas_partial_result = var_cas_const_sec_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_13893->mValue COMMA_SOURCE_FILE_AT_LINE (329)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
        GGS_string var_cas_cfg_data = var_cas_config_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (333)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (334)) ;
        ::routine_doReplace (inLexique,  var_cas_cfg_data,  GGS_string ("$SECTION_KIND$"),  GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (335)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (336)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$OBJ$"), GGS_string ("ISR") COMMA_SOURCE_FILE_AT_LINE (337)) ;
        var_cas_cfg_data = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$NAME$"), operand_11629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338)) COMMA_SOURCE_FILE_AT_LINE (338)) ;
        {
          GGS_stringlist::cEnumerator enumerator_14564 (var_cas_data_size, true) ;
          const GGS_stringlist::cElement * operand_14564 = NULL ;
          while (((operand_14564 = enumerator_14564.nextObject ()))) {
            macroValidPointer (operand_14564) ;
            GGS_string var_cas_partial_result = var_cas_cfg_data.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_14564->mValue COMMA_SOURCE_FILE_AT_LINE (340)) ;
            var_cas_result.dotAssign_operation (var_cas_partial_result) ;
          }
        }
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$APP_MEMMAP$"),  var_cas_result COMMA_SOURCE_FILE_AT_LINE (345)) ;
    GGS_string var_cas_os_secs = GGS_string ("") ;
    GGS_string var_cas_os_tpl = function_template_string_if_exist (inLexique, var_cas_cc, GGS_string ("os_section") COMMA_SOURCE_FILE_AT_LINE (349)) ;
    GGS_string var_cas_code_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (350)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$TYPE$"),  GGS_string ("CODE") COMMA_SOURCE_FILE_AT_LINE (351)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SECTION_KIND$"),  GGS_string ("text") COMMA_SOURCE_FILE_AT_LINE (352)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (353)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SUBKIND$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (354)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SIZE$"),  GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (355)) ;
    ::routine_doReplace (inLexique,  var_cas_code_section,  GGS_string ("$SECTION$"),  GGS_string (".osCode") COMMA_SOURCE_FILE_AT_LINE (356)) ;
    var_cas_os_secs.dotAssign_operation (var_cas_code_section) ;
    GGS_string var_cas_var_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("VAR") COMMA_SOURCE_FILE_AT_LINE (359)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (360)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$SECTION_KIND$"),  GGS_string ("data") COMMA_SOURCE_FILE_AT_LINE (361)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (362)) ;
    ::routine_doReplace (inLexique,  var_cas_var_section,  GGS_string ("$SECTION$"),  GGS_string (".osVar") COMMA_SOURCE_FILE_AT_LINE (363)) ;
    GGS_string var_cas_no_init = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_NOINIT") COMMA_SOURCE_FILE_AT_LINE (364)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15722 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15722 = NULL ;
      while (((operand_15722 = enumerator_15722.nextObject ()))) {
        macroValidPointer (operand_15722) ;
        var_cas_os_secs.dotAssign_operation (var_cas_no_init.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15722->mValue COMMA_SOURCE_FILE_AT_LINE (366))) ;
      }
    }
    GGS_string var_cas_power_on = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_POWER_ON_INIT") COMMA_SOURCE_FILE_AT_LINE (368)) ;
    {
      GGS_stringlist::cEnumerator enumerator_15957 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_15957 = NULL ;
      while (((operand_15957 = enumerator_15957.nextObject ()))) {
        macroValidPointer (operand_15957) ;
        var_cas_os_secs.dotAssign_operation (var_cas_power_on.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_15957->mValue COMMA_SOURCE_FILE_AT_LINE (370))) ;
      }
    }
    GGS_string var_cas_fast = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("_POWER_ON_INIT") COMMA_SOURCE_FILE_AT_LINE (372)) ;
    {
      GGS_stringlist::cEnumerator enumerator_16189 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_16189 = NULL ;
      while (((operand_16189 = enumerator_16189.nextObject ()))) {
        macroValidPointer (operand_16189) ;
        var_cas_os_secs.dotAssign_operation (var_cas_fast.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_16189->mValue COMMA_SOURCE_FILE_AT_LINE (374))) ;
      }
    }
    GGS_string var_cas_var = var_cas_var_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (376)) ;
    {
      GGS_stringlist::cEnumerator enumerator_16402 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_16402 = NULL ;
      while (((operand_16402 = enumerator_16402.nextObject ()))) {
        macroValidPointer (operand_16402) ;
        var_cas_os_secs.dotAssign_operation (var_cas_var.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_16402->mValue COMMA_SOURCE_FILE_AT_LINE (378))) ;
      }
    }
    GGS_string var_cas_const_section = var_cas_os_tpl.reader_stringByReplacingStringByString (inLexique, GGS_string ("$KIND$"), GGS_string ("CONST") COMMA_SOURCE_FILE_AT_LINE (381)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$TYPE$"),  GGS_string ("DATA") COMMA_SOURCE_FILE_AT_LINE (382)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$SECTION_KIND$"),  GGS_string ("rodata") COMMA_SOURCE_FILE_AT_LINE (383)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$CONT$"),  GGS_string ("SEC") COMMA_SOURCE_FILE_AT_LINE (384)) ;
    ::routine_doReplace (inLexique,  var_cas_const_section,  GGS_string ("$SECTION$"),  GGS_string (".osConst") COMMA_SOURCE_FILE_AT_LINE (385)) ;
    GGS_string var_cas_os_const = var_cas_const_section.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SUBKIND$"), GGS_string ("") COMMA_SOURCE_FILE_AT_LINE (386)) ;
    {
      GGS_stringlist::cEnumerator enumerator_16924 (var_cas_data_size, true) ;
      const GGS_stringlist::cElement * operand_16924 = NULL ;
      while (((operand_16924 = enumerator_16924.nextObject ()))) {
        macroValidPointer (operand_16924) ;
        var_cas_os_secs.dotAssign_operation (var_cas_os_const.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SIZE$"), operand_16924->mValue COMMA_SOURCE_FILE_AT_LINE (388))) ;
      }
    }
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$OS_MEMMAP$"),  var_cas_os_secs COMMA_SOURCE_FILE_AT_LINE (391)) ;
    GGS_string var_cas_api_tpl = function_template_string_if_exist (inLexique, var_cas_cc, GGS_string ("api_section") COMMA_SOURCE_FILE_AT_LINE (394)) ;
    ::routine_doReplace (inLexique,  var_cas_mm,  GGS_string ("$API_MEMMAP$"),  var_cas_api_tpl COMMA_SOURCE_FILE_AT_LINE (395)) ;
    GGS_string var_cas_mm_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (397))).operator_concat (GGS_string ("/MemMap.h")) ;
    const GGS_bool cond_17463 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_17463.isBuiltAndTrue ()) {
      const GGS_bool cond_17402 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_17402.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_mm_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (400)) ;
      }
      const GGS_string temp_17444 = var_cas_mm ;
      if (temp_17444.isBuilt ()) {
        temp_17444 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_mm_file COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_memmap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_compiler"                *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_compiler (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_compiler at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_cc = function_compiler (inLexique, var_cas_cpu.reader_os (inLexique COMMA_SOURCE_FILE_AT_LINE (412)).reader_memmap (inLexique COMMA_SOURCE_FILE_AT_LINE (412)) COMMA_SOURCE_FILE_AT_LINE (412)) ;
  const GGS_bool cond_18248 = (var_cas_cc).operator_isNotEqual (GGS_string ("")) ;
  if (cond_18248.isBuiltAndTrue ()) {
    GGS_string var_cas_comp = function_template_string_if_exist (inLexique, var_cas_cc, GGS_string ("Compiler.h") COMMA_SOURCE_FILE_AT_LINE (414)) ;
    GGS_string var_cas_comp_cfg = function_template_string_if_exist (inLexique, var_cas_cc, GGS_string ("Compiler_Cfg.h") COMMA_SOURCE_FILE_AT_LINE (415)) ;
    GGS_string var_cas_comp_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (416))).operator_concat (GGS_string ("/Compiler.h")) ;
    GGS_string var_cas_comp_cfg_file = (function_project_name (inLexique COMMA_SOURCE_FILE_AT_LINE (417))).operator_concat (GGS_string ("/Compiler_Cfg.h")) ;
    const GGS_bool cond_18238 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
    if (cond_18238.isBuiltAndTrue ()) {
      const GGS_bool cond_18005 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_18005.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_comp_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (421)) ;
      }
      const GGS_string temp_18049 = var_cas_comp ;
      if (temp_18049.isBuilt ()) {
        temp_18049 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_comp_file COMMA_SOURCE_FILE_AT_LINE (423)) ;
      }
      const GGS_bool cond_18165 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.value () ;
      if (cond_18165.isBuiltAndTrue ()) {
        inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_comp_cfg_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
      const GGS_string temp_18213 = var_cas_comp_cfg ;
      if (temp_18213.isBuilt ()) {
        temp_18213 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_comp_cfg_file COMMA_SOURCE_FILE_AT_LINE (427)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_compiler\n") ;
  #endif
}

//---------------------------------------------------------------------------*

