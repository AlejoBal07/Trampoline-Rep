//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_env_verification.cpp'                      *
//                    Generated by version version 2.2.7                     *
//                     december 2nd, 2011, at 14h25'17"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "goil_env_verification.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*

#include "goil_options.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_env_verification.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                    Routine 'getAbsoluteSourceFilePath'                    *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_getAbsoluteSourceFilePath (const GALGAS_string constinArgument_fileName,
                                        GALGAS_string & outArgument_absoluteFilePath,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_absoluteFilePath.drop () ; // Release 'out' argument
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_sourceFilePath = GALGAS_string::constructor_stringWithSourceFilePath (inCompiler COMMA_SOURCE_FILE_AT_LINE (36)).reader_stringByDeletingLastPathComponent (SOURCE_FILE_AT_LINE (36)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_sourceFilePath.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, GALGAS_string::constructor_stringWithSourceFilePath (inCompiler COMMA_SOURCE_FILE_AT_LINE (38)).reader_firstCharacterOrNul (SOURCE_FILE_AT_LINE (38)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      //-------- @assignmentInstructionForGeneration
      var_sourceFilePath = GALGAS_string (".") ;
    }
  }
  //-------- @assignmentInstructionForGeneration
  outArgument_absoluteFilePath = constinArgument_fileName.reader_absolutePathFromPath (var_sourceFilePath COMMA_SOURCE_FILE_AT_LINE (44)) ;
}


//---------------------------------------------------------------------------*
//                                                                           *
//                         Routine 'checkFileExists'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkFileExists (const GALGAS_lstring constinArgument_fileName,
                              C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_string var_absoluteFilePath ;
  { //-------- @routineCallInstructionForGeneration
  routine_getAbsoluteSourceFilePath (constinArgument_fileName.reader_string (SOURCE_FILE_AT_LINE (53)), var_absoluteFilePath, inCompiler COMMA_SOURCE_FILE_AT_LINE (53)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = var_absoluteFilePath.reader_fileExists (SOURCE_FILE_AT_LINE (54)).operator_not (SOURCE_FILE_AT_LINE (54)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @warningInstructionForGeneration
    inCompiler->emitSemanticWarning (constinArgument_fileName.reader_location (SOURCE_FILE_AT_LINE (55)), GALGAS_string ("The file '").operator_concat (var_absoluteFilePath COMMA_SOURCE_FILE_AT_LINE (55)).operator_concat (GALGAS_string ("' does not exists!") COMMA_SOURCE_FILE_AT_LINE (55)) COMMA_SOURCE_FILE_AT_LINE (55)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                     Routine 'checkFileDoesNotExists'                      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkFileDoesNotExists (const GALGAS_lstring constinArgument_fileName,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_string var_absoluteFilePath ;
  { //-------- @routineCallInstructionForGeneration
  routine_getAbsoluteSourceFilePath (constinArgument_fileName.reader_string (SOURCE_FILE_AT_LINE (68)), var_absoluteFilePath, inCompiler COMMA_SOURCE_FILE_AT_LINE (68)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = constinArgument_fileName.reader_string (SOURCE_FILE_AT_LINE (69)).reader_directoryExists (SOURCE_FILE_AT_LINE (69)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (constinArgument_fileName.reader_location (SOURCE_FILE_AT_LINE (70)), GALGAS_string ("The file '").operator_concat (var_absoluteFilePath COMMA_SOURCE_FILE_AT_LINE (70)).operator_concat (GALGAS_string ("' already exists and is a directory. It will not be overwritten.") COMMA_SOURCE_FILE_AT_LINE (70)) COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }else if (kBoolFalse == test_0) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_projectDir = function_projectName (inCompiler COMMA_SOURCE_FILE_AT_LINE (75)) ;
    //-------- @assignmentInstructionForGeneration
    var_projectDir = var_projectDir.reader_absolutePathFromPath (GALGAS_string::constructor_stringWithCurrentDirectory (SOURCE_FILE_AT_LINE (76)) COMMA_SOURCE_FILE_AT_LINE (76)) ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_projectDir.objectCompare (var_absoluteFilePath)).boolEnum () ;
    if (kBoolTrue == test_1) {
      //-------- @errorInstructionForGeneration
      inCompiler->emitSemanticError (constinArgument_fileName.reader_location (SOURCE_FILE_AT_LINE (78)), GALGAS_string ("The file '").operator_concat (var_absoluteFilePath COMMA_SOURCE_FILE_AT_LINE (78)).operator_concat (GALGAS_string ("' is already the project directory. It will not be overwritten.") COMMA_SOURCE_FILE_AT_LINE (78)) COMMA_SOURCE_FILE_AT_LINE (78)) ;
    }
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                       Routine 'checkTrampolinePath'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkTrampolinePath (const GALGAS_lstring constinArgument_path,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_string var_absolutePath ;
  { //-------- @routineCallInstructionForGeneration
  routine_getAbsoluteSourceFilePath (constinArgument_path.reader_string (SOURCE_FILE_AT_LINE (92)), var_absolutePath, inCompiler COMMA_SOURCE_FILE_AT_LINE (92)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_osPath = var_absolutePath.operator_concat (GALGAS_string ("/os") COMMA_SOURCE_FILE_AT_LINE (94)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = var_osPath.reader_directoryExists (SOURCE_FILE_AT_LINE (95)).operator_not (SOURCE_FILE_AT_LINE (95)).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (constinArgument_path.reader_location (SOURCE_FILE_AT_LINE (96)), GALGAS_string ("The directory '").operator_concat (var_absolutePath COMMA_SOURCE_FILE_AT_LINE (96)).operator_concat (GALGAS_string ("' does not seem to be the Trampoline base path.") COMMA_SOURCE_FILE_AT_LINE (96)).operator_concat (GALGAS_string (" I can't find the os/ subfolder.") COMMA_SOURCE_FILE_AT_LINE (96)) COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_machinesPath = var_absolutePath.operator_concat (GALGAS_string ("/machines") COMMA_SOURCE_FILE_AT_LINE (100)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_1 = var_machinesPath.reader_directoryExists (SOURCE_FILE_AT_LINE (101)).operator_not (SOURCE_FILE_AT_LINE (101)).boolEnum () ;
  if (kBoolTrue == test_1) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (constinArgument_path.reader_location (SOURCE_FILE_AT_LINE (102)), GALGAS_string ("The directory '").operator_concat (var_absolutePath COMMA_SOURCE_FILE_AT_LINE (102)).operator_concat (GALGAS_string ("' does not seem to be the Trampoline base path.") COMMA_SOURCE_FILE_AT_LINE (102)).operator_concat (GALGAS_string ("I can't find the machines/ subfolder.") COMMA_SOURCE_FILE_AT_LINE (102)) COMMA_SOURCE_FILE_AT_LINE (102)) ;
  }
}


//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'check_target'                           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_check_5F_target (const GALGAS_string constinArgument_trampoline_5F_path,
                              C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  //-------- @localVariableDeclarationForGeneration
  GALGAS_string var_machines_5F_path ;
  { //-------- @routineCallInstructionForGeneration
  routine_getAbsoluteSourceFilePath (constinArgument_trampoline_5F_path, var_machines_5F_path, inCompiler COMMA_SOURCE_FILE_AT_LINE (113)) ;
  } //-------- @routineCallInstructionForGeneration
  //-------- @concatInstructionForGeneration
  var_machines_5F_path.dotAssign_operation (GALGAS_string ("/machines") COMMA_SOURCE_FILE_AT_LINE (114)) ;
  //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
  GALGAS_string var_arch = function_arch (inCompiler COMMA_SOURCE_FILE_AT_LINE (116)) ;
  //-------- @ifInstructionForGeneration
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_arch.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
    GALGAS_string var_arch_5F_path = var_machines_5F_path.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (118)).operator_concat (function_arch (inCompiler COMMA_SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)) ;
    //-------- @ifInstructionForGeneration
    const enumGalgasBool test_1 = var_arch_5F_path.reader_directoryExists (SOURCE_FILE_AT_LINE (120)).operator_not (SOURCE_FILE_AT_LINE (120)).boolEnum () ;
    if (kBoolTrue == test_1) {
      //-------- @errorInstructionForGeneration
      inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("Architecture '").operator_concat (var_arch_5F_path COMMA_SOURCE_FILE_AT_LINE (121)).operator_concat (GALGAS_string ("' does not exist") COMMA_SOURCE_FILE_AT_LINE (121)) COMMA_SOURCE_FILE_AT_LINE (121)) ;
    }else if (kBoolFalse == test_1) {
      //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
      GALGAS_string var_chip = function_chip (inCompiler COMMA_SOURCE_FILE_AT_LINE (123)) ;
      //-------- @ifInstructionForGeneration
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_chip.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_2) {
        //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
        GALGAS_string var_chip_5F_path = var_arch_5F_path.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (125)).operator_concat (function_chip (inCompiler COMMA_SOURCE_FILE_AT_LINE (125)) COMMA_SOURCE_FILE_AT_LINE (125)) ;
        //-------- @ifInstructionForGeneration
        const enumGalgasBool test_3 = var_chip_5F_path.reader_directoryExists (SOURCE_FILE_AT_LINE (127)).operator_not (SOURCE_FILE_AT_LINE (127)).boolEnum () ;
        if (kBoolTrue == test_3) {
          //-------- @errorInstructionForGeneration
          inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("Chip '").operator_concat (var_chip_5F_path COMMA_SOURCE_FILE_AT_LINE (128)).operator_concat (GALGAS_string ("' does not exist") COMMA_SOURCE_FILE_AT_LINE (128)) COMMA_SOURCE_FILE_AT_LINE (128)) ;
        }else if (kBoolFalse == test_3) {
          //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
          GALGAS_string var_board = function_board (inCompiler COMMA_SOURCE_FILE_AT_LINE (130)) ;
          //-------- @ifInstructionForGeneration
          const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, var_board.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_4) {
            //-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration
            GALGAS_string var_board_5F_path = var_chip_5F_path.operator_concat (GALGAS_string ("/") COMMA_SOURCE_FILE_AT_LINE (132)).operator_concat (function_board (inCompiler COMMA_SOURCE_FILE_AT_LINE (132)) COMMA_SOURCE_FILE_AT_LINE (132)) ;
            //-------- @ifInstructionForGeneration
            const enumGalgasBool test_5 = var_board_5F_path.reader_directoryExists (SOURCE_FILE_AT_LINE (134)).operator_not (SOURCE_FILE_AT_LINE (134)).boolEnum () ;
            if (kBoolTrue == test_5) {
              //-------- @errorInstructionForGeneration
              inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("Board '").operator_concat (var_board_5F_path COMMA_SOURCE_FILE_AT_LINE (135)).operator_concat (GALGAS_string ("' does not exist") COMMA_SOURCE_FILE_AT_LINE (135)) COMMA_SOURCE_FILE_AT_LINE (135)) ;
            }
          }
        }
      }
    }
  }else if (kBoolFalse == test_0) {
    //-------- @errorInstructionForGeneration
    inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("A target should be defined") COMMA_SOURCE_FILE_AT_LINE (142)) ;
  }
}


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


