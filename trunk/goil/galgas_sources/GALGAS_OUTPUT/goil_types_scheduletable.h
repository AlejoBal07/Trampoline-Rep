//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'goil_types_scheduletable.h'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 14h44'55"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef goil_types_scheduletable_DEFINED
#define goil_types_scheduletable_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

// Include imported semantics
#include "goil_basic_types.h"
#include "goil_types_action.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sd_autostart_false ;
class cPtr_sd_autostart_false ;
class GGS_sd_autostart_true ;
class cPtr_sd_autostart_true ;
class GGS_sd_autostart_synchron ;
class cPtr_sd_autostart_synchron ;
class GGS_sd_autostart_relative ;
class cPtr_sd_autostart_relative ;
class GGS_sd_autostart_absolute ;
class cPtr_sd_autostart_absolute ;
class GGS_ltgt_sync_obj ;
class cPtr_ltgt_sync_obj ;
class GGS_ltgt_sync_void ;
class cPtr_ltgt_sync_void ;
class GGS_ltgt_sync_false ;
class cPtr_ltgt_sync_false ;
class GGS_ltgt_sync_true ;
class cPtr_ltgt_sync_true ;
class GGS_action_list ;
class GGS_scheduletable_obj ;
class cPtr_scheduletable_obj ;
class GGS_scheduletable_map ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_sd_autostart_false'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sd_autostart_false : public GGS_autostart_obj {
//--- Default constructor
  public : inline GGS_sd_autostart_false (void) :
  GGS_autostart_obj () {}

//--- Pointer assignment constructor
  public : GGS_sd_autostart_false (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sd_autostart_false (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sd_autostart_false
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sd_autostart_false constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sd_autostart_false * getPtr (void) const {
    return (cPtr_sd_autostart_false *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sd_autostart_false * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sd_autostart_false * operator () (LOCATION_ARGS) const {
      return (cPtr_sd_autostart_false *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_false ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_sd_autostart_true'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sd_autostart_true : public GGS_autostart_obj {
//--- Default constructor
  public : inline GGS_sd_autostart_true (void) :
  GGS_autostart_obj () {}

//--- Pointer assignment constructor
  public : GGS_sd_autostart_true (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sd_autostart_true (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sd_autostart_true
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sd_autostart_true constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sd_autostart_true * getPtr (void) const {
    return (cPtr_sd_autostart_true *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_stringset  reader_app_modes (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sd_autostart_true * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sd_autostart_true * operator () (LOCATION_ARGS) const {
      return (cPtr_sd_autostart_true *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_true ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_synchron'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sd_autostart_synchron : public GGS_sd_autostart_true {
//--- Default constructor
  public : inline GGS_sd_autostart_synchron (void) :
  GGS_sd_autostart_true () {}

//--- Pointer assignment constructor
  public : GGS_sd_autostart_synchron (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sd_autostart_synchron (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sd_autostart_synchron
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sd_autostart_synchron constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_stringset & argument_1
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sd_autostart_synchron * getPtr (void) const {
    return (cPtr_sd_autostart_synchron *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sd_autostart_synchron * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sd_autostart_synchron * operator () (LOCATION_ARGS) const {
      return (cPtr_sd_autostart_synchron *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_synchron ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_relative'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sd_autostart_relative : public GGS_sd_autostart_true {
//--- Default constructor
  public : inline GGS_sd_autostart_relative (void) :
  GGS_sd_autostart_true () {}

//--- Pointer assignment constructor
  public : GGS_sd_autostart_relative (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sd_autostart_relative (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sd_autostart_relative
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sd_autostart_relative constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_stringset & argument_1,
                                const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sd_autostart_relative * getPtr (void) const {
    return (cPtr_sd_autostart_relative *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint64  reader_offset (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sd_autostart_relative * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sd_autostart_relative * operator () (LOCATION_ARGS) const {
      return (cPtr_sd_autostart_relative *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_relative ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_sd_autostart_absolute'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_sd_autostart_absolute : public GGS_sd_autostart_true {
//--- Default constructor
  public : inline GGS_sd_autostart_absolute (void) :
  GGS_sd_autostart_true () {}

//--- Pointer assignment constructor
  public : GGS_sd_autostart_absolute (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_sd_autostart_absolute (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_sd_autostart_absolute
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_sd_autostart_absolute constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_stringset & argument_1,
                                const GGS_luint64 & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_sd_autostart_absolute * getPtr (void) const {
    return (cPtr_sd_autostart_absolute *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_luint64  reader_value (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_sd_autostart_absolute * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_sd_autostart_absolute * operator () (LOCATION_ARGS) const {
      return (cPtr_sd_autostart_absolute *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__sd_autostart_absolute ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_ltgt_sync_obj'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ltgt_sync_obj : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_ltgt_sync_obj (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_ltgt_sync_obj (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ltgt_sync_obj (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ltgt_sync_obj
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ltgt_sync_obj * getPtr (void) const {
    return (cPtr_ltgt_sync_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_location  reader_loc (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ltgt_sync_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ltgt_sync_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_ltgt_sync_obj *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__ltgt_sync_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_void'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ltgt_sync_void : public GGS_ltgt_sync_obj {
//--- Default constructor
  public : inline GGS_ltgt_sync_void (void) :
  GGS_ltgt_sync_obj () {}

//--- Pointer assignment constructor
  public : GGS_ltgt_sync_void (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ltgt_sync_void (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ltgt_sync_void
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ltgt_sync_void constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ltgt_sync_void * getPtr (void) const {
    return (cPtr_ltgt_sync_void *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ltgt_sync_void * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ltgt_sync_void * operator () (LOCATION_ARGS) const {
      return (cPtr_ltgt_sync_void *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_void ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_false'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ltgt_sync_false : public GGS_ltgt_sync_obj {
//--- Default constructor
  public : inline GGS_ltgt_sync_false (void) :
  GGS_ltgt_sync_obj () {}

//--- Pointer assignment constructor
  public : GGS_ltgt_sync_false (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ltgt_sync_false (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ltgt_sync_false
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ltgt_sync_false constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ltgt_sync_false * getPtr (void) const {
    return (cPtr_ltgt_sync_false *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ltgt_sync_false * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ltgt_sync_false * operator () (LOCATION_ARGS) const {
      return (cPtr_ltgt_sync_false *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_false ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_ltgt_sync_true'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_ltgt_sync_true : public GGS_ltgt_sync_obj {
//--- Default constructor
  public : inline GGS_ltgt_sync_true (void) :
  GGS_ltgt_sync_obj () {}

//--- Pointer assignment constructor
  public : GGS_ltgt_sync_true (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_ltgt_sync_true (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_ltgt_sync_true
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_ltgt_sync_true constructor_new (C_Compiler & inLexique,
                                const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_basic_type & argument_2
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_ltgt_sync_true * getPtr (void) const {
    return (cPtr_ltgt_sync_true *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_strategy (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_precision (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_ltgt_sync_true * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_ltgt_sync_true * operator () (LOCATION_ARGS) const {
      return (cPtr_ltgt_sync_true *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__ltgt_sync_true ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        sorted list '@action_list'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_action_list ;

class GGS_action_list : public AC_galgas_sortedlist {
  public : typedef elementOf_GGS_action_list cElement ;
//--- Default Constructor
  public : GGS_action_list (void) ;
//--- Copy Constructor
  public : GGS_action_list (const GGS_action_list & inSource) ;
//--- Comparison Operators
  public : GGS_bool operator_isEqual (const GGS_action_list & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_action_list & inOperand) const ;
//--- Constructor 'emptySortedList'
  public : static GGS_action_list constructor_emptySortedList (void) ;
  public : static GGS_action_list constructor_sortedListWithValue (const GGS_uint64 & argument_0,
                           const GGS_uint & argument_1,
                           const GGS_action_obj & argument_2) ;
//--- Get smallest object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalSmallestObject () ;
  }
//--- Get greatest object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalGreatestObject () ;
  }
//--- Operators () used for method call
  public : const GGS_action_list * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'smallest'
  public : void method_smallest (C_Compiler & inLexique,
                              GGS_uint64 & _out_0,
                              GGS_uint & _out_1,
                              GGS_action_obj & _out_2
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'greatest'
  public : void method_greatest (C_Compiler & inLexique,
                             GGS_uint64 & _out_0,
                             GGS_uint & _out_1,
                             GGS_action_obj & _out_2
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popGreatest'
  public : void modifier_popGreatest (C_Compiler & inLexique,
                                GGS_uint64 & _out_0,
                                GGS_uint & _out_1,
                                GGS_action_obj & _out_2
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popSmallest'
  public : void modifier_popSmallest (C_Compiler & inLexique,
                                 GGS_uint64 & _out_0,
                                 GGS_uint & _out_1,
                                 GGS_action_obj & _out_2
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void dotAssign_operation (const GGS_action_list inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_action_obj & argument_2) ;
//--- Handling '.' GALGAS operator
  public : GGS_action_list operator_concat (const GGS_action_list & inOperand) const ;

//--- Internal Methods
  protected : void _internalAppendValues (const GGS_uint64 & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_action_obj & argument_2) ;
//--- List Insulation
  protected : void _insulateList (void) ;
//--- Reader 'description
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--------------------------------- Sorted List Enumerator
  public : class cEnumerator : public cAbstractSortedListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_action_list & inList,
                                 const bool inAscending) :
    cAbstractSortedListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_uint64   & _offset (LOCATION_ARGS) const ;
    public : /* const */ GGS_uint   & _order (LOCATION_ARGS) const ;
    public : /* const */ GGS_action_obj   & _act (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'expiry_point'                           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_expiry_point (C_Compiler &,
                                GGS_lstring  ,
                                GGS_uint64  ,
                                GGS_uint64  ,
                                GGS_uint  ,
                                GGS_string & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_scheduletable_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_scheduletable_obj : public GGS_oil_obj {
//--- Default constructor
  public : inline GGS_scheduletable_obj (void) :
  GGS_oil_obj () {}

//--- Pointer assignment constructor
  public : GGS_scheduletable_obj (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_scheduletable_obj (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_scheduletable_obj
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_scheduletable_obj constructor_new (C_Compiler & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_autostart_obj & argument_2,
                                const GGS_ltgt_sync_obj & argument_3,
                                const GGS_basic_type & argument_4,
                                const GGS_basic_type & argument_5,
                                const GGS_action_list & argument_6,
                                const GGS_lstringlist & argument_7
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_scheduletable_obj * getPtr (void) const {
    return (cPtr_scheduletable_obj *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_lstring  reader_counter (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_autostart_obj  reader_autostart (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_ltgt_sync_obj  reader_ltgt_sync (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_periodic (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_basic_type  reader_length (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_action_list  reader_actions (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstringlist  reader_acc_apps (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- Modifiers
  public : void modifier_setCounter (C_Compiler & inLexique, const GGS_lstring  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setAutostart (C_Compiler & inLexique, const GGS_autostart_obj  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setLtgt_sync (C_Compiler & inLexique, const GGS_ltgt_sync_obj  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setPeriodic (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setLength (C_Compiler & inLexique, const GGS_basic_type  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setActions (C_Compiler & inLexique, const GGS_action_list  & inValue COMMA_LOCATION_ARGS) ;
  public : void modifier_setAcc_apps (C_Compiler & inLexique, const GGS_lstringlist  & inValue COMMA_LOCATION_ARGS) ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_scheduletable_obj * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_scheduletable_obj * operator () (LOCATION_ARGS) const {
      return (cPtr_scheduletable_obj *) mPointer ;
    }
  #endif

} ;

//---------------------------------------------------------------------------*

extern C_galgasClassRunTimeInformation gClassInfoFor__scheduletable_obj ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         Map '@scheduletable_map'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_scheduletable_map ;

class GGS_scheduletable_map : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_scheduletable_map cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool operator_isEqual (const GGS_scheduletable_map & inOperand) const ;
  public : GGS_bool operator_isNotEqual (const GGS_scheduletable_map & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_scheduletable_map * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_scheduletable_map * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_scheduletable_map constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"

  public : static const utf32 kRemoveMessage_del [] ;

//--- 'del' Remove Modifier
  public : void modifier_del (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj & outParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kInsertMessage_put [] ;

//--- 'put' Insert Modifier
  public : void modifier_put (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_scheduletable_obj &  inParameter0 COMMA_LOCATION_ARGS) ;

  public : static const utf32 kSearchMessage_get [] ;

//--- 'get' Search Method
  public : void method_get (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_scheduletable_obj   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for removing an element
  protected : void removeElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_scheduletable_obj & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_scheduletable_obj & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Compiler & inLexique,
                                   const utf32 * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_scheduletable_obj & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_scheduletable_map constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_scheduletable_map & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_scheduletable_map reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_scheduletable_map & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_scheduletable_map & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_scheduletable_obj   & _st (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Function 'default_scheduletable_obj'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_scheduletable_obj  function_default_scheduletable_obj (C_Compiler & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_sd_autostart_false'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sd_autostart_false : public cPtr_autostart_obj {
  private : typedef cPtr_autostart_obj inherited ;
//--- Constructor
  public : cPtr_sd_autostart_false (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sd_autostart_false (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_sd_autostart_true'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sd_autostart_true : public cPtr_autostart_obj {
  private : typedef cPtr_autostart_obj inherited ;
//--- Constructor
  public : cPtr_sd_autostart_true (const GGS_location & ,
                                const GGS_stringset & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sd_autostart_true (void) {}
  #endif

//--- Attributes
  public : GGS_stringset  app_modes ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_sd_autostart_synchron'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sd_autostart_synchron : public cPtr_sd_autostart_true {
  private : typedef cPtr_sd_autostart_true inherited ;
//--- Constructor
  public : cPtr_sd_autostart_synchron (const GGS_location & ,
                                const GGS_stringset & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sd_autostart_synchron (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_sd_autostart_relative'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sd_autostart_relative : public cPtr_sd_autostart_true {
  private : typedef cPtr_sd_autostart_true inherited ;
//--- Constructor
  public : cPtr_sd_autostart_relative (const GGS_location & ,
                                const GGS_stringset & ,
                                const GGS_luint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sd_autostart_relative (void) {}
  #endif

//--- Attributes
  public : GGS_luint64  offset ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_sd_autostart_absolute'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_sd_autostart_absolute : public cPtr_sd_autostart_true {
  private : typedef cPtr_sd_autostart_true inherited ;
//--- Constructor
  public : cPtr_sd_autostart_absolute (const GGS_location & ,
                                const GGS_stringset & ,
                                const GGS_luint64 & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_sd_autostart_absolute (void) {}
  #endif

//--- Attributes
  public : GGS_luint64  value ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_ltgt_sync_obj'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ltgt_sync_obj : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_ltgt_sync_obj (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ltgt_sync_obj (void) {}
  #endif

//--- Attributes
  public : GGS_location  loc ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_ltgt_sync_void'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ltgt_sync_void : public cPtr_ltgt_sync_obj {
  private : typedef cPtr_ltgt_sync_obj inherited ;
//--- Constructor
  public : cPtr_ltgt_sync_void (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ltgt_sync_void (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  abstract class 'cPtr_ltgt_sync_false'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ltgt_sync_false : public cPtr_ltgt_sync_obj {
  private : typedef cPtr_ltgt_sync_obj inherited ;
//--- Constructor
  public : cPtr_ltgt_sync_false (const GGS_location & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ltgt_sync_false (void) {}
  #endif

//--- Attributes
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   abstract class 'cPtr_ltgt_sync_true'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_ltgt_sync_true : public cPtr_ltgt_sync_obj {
  private : typedef cPtr_ltgt_sync_obj inherited ;
//--- Constructor
  public : cPtr_ltgt_sync_true (const GGS_location & ,
                                const GGS_lstring & ,
                                const GGS_basic_type & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_ltgt_sync_true (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  strategy ;
  public : GGS_basic_type  precision ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  Element of sorted list '@action_list'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_action_list : public AC_galgas_sortedlist::cSortedListElement {
//--- Attributes
  public : GGS_uint64  offset ;
  public : GGS_uint  order ;
  public : GGS_action_obj  act ;
//--- Constructor
  public : elementOf_GGS_action_list (const GGS_uint64 & ,
                                const GGS_uint & ,
                                const GGS_action_obj & ) ;

//--- Access to next
  public : inline elementOf_GGS_action_list * nextObject (void) const { return (elementOf_GGS_action_list *) internalNextItem () ; }
//--- Access to previous
  public : inline elementOf_GGS_action_list * previousObject (void) const { return (elementOf_GGS_action_list *) internalPreviousItem () ; }
//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cSortedListElement * inOperand) const ;
//--- Method used for sorting elements
  protected : virtual sint32 compareForSorting (const cSortedListElement * inOperand) const ;
//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;
  friend class GGS_action_list ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 abstract class 'cPtr_scheduletable_obj'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_scheduletable_obj : public cPtr_oil_obj {
  private : typedef cPtr_oil_obj inherited ;
//--- Constructor
  public : cPtr_scheduletable_obj (const GGS_lstring & ,
                                const GGS_lstring & ,
                                const GGS_autostart_obj & ,
                                const GGS_ltgt_sync_obj & ,
                                const GGS_basic_type & ,
                                const GGS_basic_type & ,
                                const GGS_action_list & ,
                                const GGS_lstringlist & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_scheduletable_obj (void) {}
  #endif

//--- Attributes
  public : GGS_lstring  counter ;
  public : GGS_autostart_obj  autostart ;
  public : GGS_ltgt_sync_obj  ltgt_sync ;
  public : GGS_basic_type  periodic ;
  public : GGS_basic_type  length ;
  public : GGS_action_list  actions ;
  public : GGS_lstringlist  acc_apps ;
//--- Method 'generate'
  public : virtual void method_generate (C_Compiler &,
                                GGS_lstring  ,
                                GGS_string ,
                                GGS_string& 
                                COMMA_LOCATION_ARGS) const ;

//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;

//--- Make clone
  public : virtual cPtr__AC_galgas_class * makeClone (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of map '@scheduletable_map'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_scheduletable_map {
  public : GGS_scheduletable_obj  st ;

  public : e_scheduletable_map (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_scheduletable_map : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_scheduletable_map (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_scheduletable_map & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_scheduletable_map * nextObject (void) const { return (elementOf_GGS_scheduletable_map *) mNextItem ; }
  public : inline elementOf_GGS_scheduletable_map * infObject (void) const { return (elementOf_GGS_scheduletable_map *) mInfPtr ; }
  public : inline elementOf_GGS_scheduletable_map * supObject (void) const { return (elementOf_GGS_scheduletable_map *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_scheduletable_map mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*

#endif
