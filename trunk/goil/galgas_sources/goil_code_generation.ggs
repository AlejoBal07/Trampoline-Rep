#
# @file goil_code_generation.ggs
#
# @section File description
#
# This file wraps user application configuration header. This wrapped file is typically
# generated from an OIL source.
#
# @section Copyright
#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protŽgŽ par la loi sur la propriŽtŽ intellectuelle
#
# This software is distributed under the Lesser GNU Public Licence
#
# @section File informations
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

semantics goil_code_generation :

import semantics goil_routines in "goil_routines.ggs" ;
import semantics goil_semantic_types in "goil_semantic_types.ggs" ;
import semantics goil_targets in "goil_targets.ggs" ;

import semantics goil_code_msg_gen in "goil_code_msg_gen.ggs" ;

#--------------------------------------------------------------------
# Initialisation of token found in templates
#--------------------------------------------------------------------
routine init_prefixes ?!@prefix_map prefix :
    [!?prefix add ![@lstring new !"task" !here]
              !"descriptor_of_task_" !"$TASK$"] ;
    [!?prefix add ![@lstring new !"task_name" !here]
              !"" !"$EXEC_NAME$"] ;
    [!?prefix add ![@lstring new !"task_static" !here]
              !"static_descriptor_of_task_" !"$EXEC_STATIC$"] ;

    [!?prefix add ![@lstring new !"isr" !here]
              !"descriptor_of_isr_" !"$ISR$"] ;
    [!?prefix add ![@lstring new !"isr_name" !here]
              !"" !"$EXEC_NAME$"] ;
    [!?prefix add ![@lstring new !"isr_static" !here]
              !"static_descriptor_of_isr_" !"$EXEC_STATIC$"] ;
    [!?prefix add ![@lstring new !"isr_helper" !here]
              !"static_helper_of_isr_" !"$ISR_HELPER$"] ;

    [!?prefix add ![@lstring new !"alarm" !here]
              !"descriptor_of_alarm_" !"$ALARM$"] ;
    [!?prefix add ![@lstring new !"alarm_name" !here]
              !"" !"$ALARM_NAME$"] ;

    [!?prefix add ![@lstring new !"counter" !here]
              !"descriptor_of_counter_" !"$COUNTER$"] ;
    [!?prefix add ![@lstring new !"counter_name" !here]
              !"" !"$COUNTER_NAME$"] ;

    [!?prefix add ![@lstring new !"event" !here]
              !"mask_of_" !"$EVENT$"] ;
    [!?prefix add ![@lstring new !"event_name" !here]
              !"" !"$EVENT_NAME$"] ;
    [!?prefix add ![@lstring new !"event_mask" !here]
              !"" !"$EVENT_MASK$"] ;

    [!?prefix add ![@lstring new !"resource" !here]
              !"descriptor_of_resource_" !"$RESOURCE$"] ;
    [!?prefix add ![@lstring new !"resource_ptr" !here]
              !"&descriptor_of_resource_" !"$RESOURCE_PTR$"] ;
    [!?prefix add ![@lstring new !"resource_name" !here]
              !"" !"$RESOURCE_NAME$"] ;

    [!?prefix add ![@lstring new !"callback" !here]
              !"alarm_callback_" !"$ALARM_CALLBACK$"] ;
    [!?prefix add ![@lstring new !"task_function" !here]
              !"function_of_task_" !"$EXEC_FUNCTION$"] ;
    [!?prefix add ![@lstring new !"task_context" !here]
              !"CONTEXT_OF_TASK_" !"$EXEC_CONTEXT$"] ;
    [!?prefix add ![@lstring new !"task_stack" !here]
              !"STACK_OF_TASK_" !"$EXEC_STACK$"] ;
    [!?prefix add ![@lstring new !"task_id" !here]
              !"task_id_of_" !"$TASK_ID$"] ;
    [!?prefix add ![@lstring new !"isr_function" !here]
              !"function_of_isr_" !"$EXEC_FUNCTION$"] ;
    [!?prefix add ![@lstring new !"isr_context" !here]
              !"CONTEXT_OF_ISR_" !"$EXEC_CONTEXT$"] ;
    [!?prefix add ![@lstring new !"isr_stack" !here]
              !"STACK_OF_ISR_" !"$EXEC_STACK$"] ;
    
    [!?prefix add ![@lstring new !"msg_name" !here] !"" !"$MESSAGE_NAME$"] ;
    [!?prefix add ![@lstring new !"msg" !here] !"message_object_of_" !"$MESSAGE$"] ;
    [!?prefix add ![@lstring new !"target" !here] !"message_object_of_" !"$TARGET$"] ;
    [!?prefix add ![@lstring new !"target_ptr" !here] !"&message_object_of_" !"$TARGET_PTR$"] ;
    [!?prefix add ![@lstring new !"size" !here] !"" !"$SIZE$"] ;
    [!?prefix add ![@lstring new !"element_size" !here] !"" !"$ELEMENT_SIZE$"] ;
    [!?prefix add ![@lstring new !"queue_size" !here] !"" !"$QUEUE_SIZE$"] ;
    [!?prefix add ![@lstring new !"dyn_queue" !here] !"dynamic_queue_of_message_" !"$DYN_QUEUE$"] ;

    [!?prefix add ![@lstring new !"notif_name" !here]
              !"of message " !"$NOTIFICATION_NAME$"] ;
    [!?prefix add ![@lstring new !"error_notif_name" !here]
              !"error of message " !"$NOTIFICATION_NAME$"] ;
    [!?prefix add ![@lstring new !"notification" !here]
              !"notification_of_message_" !"$NOTIFICATION$"] ;
    [!?prefix add ![@lstring new !"notif_ptr" !here]
              !"&notification_of_message_" !"$NOTIFICATION_PTR$"] ;
    [!?prefix add ![@lstring new !"error_notification" !here]
              !"error_notification_of_message_" !"$NOTIFICATION$"] ;
    [!?prefix add ![@lstring new !"error_notif_ptr" !here]
              !"&error_notification_of_message_" !"$NOTIFICATION_PTR$"] ;
    [!?prefix add ![@lstring new !"msg_buf" !here]
              !"buffer_of_message_" !"$BUFFER$"] ;
    [!?prefix add ![@lstring new !"filter" !here]
              !"filter_of_message_" !"$FILTER$"] ;
    [!?prefix add ![@lstring new !"filter_ptr" !here]
              !"&filter_of_message_" !"$FILTER_PTR$"] ;
    [!?prefix add ![@lstring new !"filter_func" !here]
              !"" !"$FILTERING_FUNC$"] ;
    [!?prefix add ![@lstring new !"filter_kind" !here]
              !"" !"$FILTER_KIND$"] ;

    init_targets_prefixes !?prefix ;

end routine ;

#--------------------------------------------------------------------
# Code generation routines
#--------------------------------------------------------------------
# Alarms generation
#--------------------------------------------------------------------
routine generate_alarms
    ?@alarm_map  alarms
    ?@prefix_map p
    ?!@string    header
    ?!@string    obj_header
    ?!@string    implementation :

    @string tpl_alarm_setevent ;
    @string tpl_alarm_activatetask ;
    @string tpl_alarm_callback ;

    @string alarms_result := "" ;

    template ?tpl_alarm_setevent     !"alarm_event_set" ;
    template ?tpl_alarm_activatetask !"alarm_task_act" ;
    template ?tpl_alarm_callback     !"alarm_callback" ;

    foreach alarms (@lstring alarm_name @alarm_obj alarm) :
        @string result := "" ;

# sets up the kind of alarm and its action
        @action_obj alarm_action ;
        [alarm get_action ?alarm_action] ;
        extract alarm_action :
        when @setevent_action (@lstring task_name @lstring event_name) ->
            result := tpl_alarm_setevent ;
            replace !p !"task"  ![task_name string] !?result ;
            replace !p !"event" ![event_name string] !?result ;
        when @activatetask_action (@lstring task_name) ->
            result := tpl_alarm_activatetask ;
            replace !p !"task" ![task_name string] !?result ;
        when @callback_action (@lstring function_name) ->
            result := tpl_alarm_callback ;
            replace !p !"callback" ![function_name string] !?result ;
        else error alarm_name : "Unknown action found" ;
        end extract ;

# sets up the autostart params
        @autostart_obj autostart ;
        [alarm get_autostart ?autostart] ;
        extract autostart :
        when @autostart_void () ->
            result := [result stringByReplacingStringByString !"$ALARM_STATE$" !"ALARM_SLEEP"] ;
            result := [result stringByReplacingStringByString !"$ALARM_CYCLE$" !"0"] ;
            result := [result stringByReplacingStringByString !"$ALARM_DATE$" !"0"] ;
        when @autostart_true_params (@luint64 alarm_time @luint64 cycle_time *) ->
            result := [result stringByReplacingStringByString !"$ALARM_STATE$" !"ALARM_AUTOSTART"] ;
            result := [result stringByReplacingStringByString !"$ALARM_CYCLE$" ![[cycle_time uint64] string]] ;
            result := [result stringByReplacingStringByString !"$ALARM_DATE$" ![[alarm_time uint64] string]] ;
        else error alarm_name : "Unknown autostart found" ;
        end extract ;

# sets up the remaining params
        @lstring counter_name ;
        [alarm get_counter ?counter_name] ;
        replace !p !"alarm_name"   ![alarm_name string]  !?result ;
        replace !p !"alarm"   ![alarm_name string]  !?result ;
        replace !p !"counter" ![counter_name string] !?result ;
        alarms_result := alarms_result . "\n" . result ;
    end foreach ;

# build the alarm table
    @string alarm_head ;
    @string alarm_imp ;
    obj_table !"alarm" !"alarm" !"alarm" !p ![alarms allKeys] ?alarm_head ?alarm_imp ;
    alarms_result := alarms_result."\n".alarm_imp ;

    header := [header stringByReplacingStringByString !"$ALARMS$" !alarm_head] ;
    implementation := [implementation stringByReplacingStringByString !"$ALARMS$" !alarms_result] ;
    obj_header := [obj_header stringByReplacingStringByString !"$ALARM_COUNT$" ![[alarms count] string]] ;
end routine ;

#--------------------------------------------------------------------
# Tasks generation
#--------------------------------------------------------------------
routine generate_tasks
    ?@task_map     tasks
    ?@resource_map resources
    ?@prefix_map   p
    ?!@string      header
    ?!@string      obj_header
    ?!@string      implementation :

    @string tpl_task ;
    @string tasks_result := "" ;

    template ?tpl_task !"task" ;

    @uint64 max_prio := 0L ;
    @bool non_preemptable_exists := false ;

    foreach tasks (@lstring task_name @task_obj task) :
        @string tmp ;
        @string result := "" ;

        generate_context_and_stack !task_name !task !p !?result ;

        result := result . tpl_task ;

        replace !p !"task_name"     ![task_name string] !?result ;
        replace !p !"task_function" ![task_name string] !?result ;
        replace !p !"task"          ![task_name string] !?result ;
        replace !p !"task_static"   ![task_name string] !?result ;
        replace !p !"task_context"  ![task_name string] !?result ;
        replace !p !"task_stack"    ![task_name string] !?result ;
        replace !p !"task_id"       ![task_name string] !?result ;
        
        @uint64 prio ;
        [task get_priority ?prio] ;

        # Compute the maximum priority of tasks. This maximum priority
        # is used as priority of RES_SCHEDULER and INTERNAL_RES_SCHEDULER
        if prio > max_prio then
            max_prio := prio ;
        end if ;

        if [[task schedule] string] == "NON" then
            non_preemptable_exists := true ;
            replace_no_prefix !p !"resource_ptr" !"&INTERNAL_RES_SCHEDULER" !?result ;
        else
            # Schedule is FULL. Look for the usage of an internal resource
            @stringset used_rez := [task resources] ;
            @bool no_internal_rez_found := true ;
            foreach used_rez (@string rez_name) :
                if no_internal_rez_found then
                    @resource_obj rez ;
                    [resources getResource ![@lstring new !rez_name !here] ?rez] ;
                    @resource_property_obj rez_prop := [rez resource_property] ;
                    extract rez_prop :
                    when @resource_property_internal_obj () ->
                         replace !p !"resource_ptr" !rez_name !?result ;
                         no_internal_rez_found := false ;
                    else
                    end extract ;
               end if ;
            end foreach ;
            if no_internal_rez_found then
                replace_no_prefix !p !"resource_ptr" !"NULL" !?result ;
            end if ;
        end if ;

        tmp := [prio string] ;
        result := [result stringByReplacingStringByString !"$TASK_PRIORITY$" !tmp] ;
        [task get_activation ?tmp] ;
        result := [result stringByReplacingStringByString !"$TASK_MAX_ACT_COUNT$" !tmp] ;

        @task_autostart_obj autostart;
        [task get_autostart ?autostart];
        extract autostart :
        when @task_autostart_true (*) ->
            result := [result stringByReplacingStringByString !"$TASK_STATE$" !"AUTOSTART"] ;
        when @task_autostart_false () ->
            result := [result stringByReplacingStringByString !"$TASK_STATE$" !"SUSPENDED"] ;
        else error task_name : "Unknown autostart found" ;
        end extract ;

        tasks_result := tasks_result . "\n" . result ;
    end foreach ;

# build the task table
    @string task_head ;
    @string task_imp ;
    obj_table !"task" !"task" !"task" !p ![tasks allKeys] ?task_head ?task_imp ;
    tasks_result := tasks_result."\n".task_imp ;

    if non_preemptable_exists then
        tasks_result := "extern tpl_internal_resource INTERNAL_RES_SCHEDULER;\n\n".tasks_result ;
    end if ;

    header := [header stringByReplacingStringByString !"$TASKS$" !task_head] ; 
    implementation := [implementation stringByReplacingStringByString !"$TASKS$" !tasks_result] ; 
    obj_header := [obj_header stringByReplacingStringByString !"$TASK_COUNT$" ![[tasks count] string]] ;
    obj_header := [obj_header stringByReplacingStringByString !"$RES_SCHEDULER_PRIORITY$" ![max_prio string]] ;
end routine ;

#--------------------------------------------------------------------
# ISRs generation
#--------------------------------------------------------------------
routine generate_isrs
    ?@isr_map    isrs
    ?@prefix_map p
    ?!@string    header
    ?!@string    obj_header
    ?!@string    implementation :

    @string tpl_isr ;
    @string tpl_isr_spec ;

    @string isrs_result := "" ;

    template ?tpl_isr !"isr" ;

    foreach isrs (@lstring isr_name @isr_obj isr) :
        @string tmp ;
        @string result := "" ;

        generate_context_and_stack !isr_name !isr !p !?result ;

        result := result . tpl_isr ;

        replace !p !"isr_name"     ![isr_name string] !?result ;
        replace !p !"isr_function" ![isr_name string] !?result ;
        replace !p !"isr"          ![isr_name string] !?result ;
        replace !p !"isr_static"   ![isr_name string] !?result ;
        replace !p !"isr_context"  ![isr_name string] !?result ;
        replace !p !"isr_stack"    ![isr_name string] !?result ;
        replace !p !"isr_helper"   ![isr_name string] !?result ;
        
        @uint64 prio ;
        [isr get_priority ?prio] ;
        tmp := [prio string] ;
        result := [result stringByReplacingStringByString !"$ISR_PRIORITY$" !tmp] ;
        [isr get_activation ?tmp] ;
        result := [result stringByReplacingStringByString !"$ISR_MAX_ACT_COUNT$" !tmp] ;



        isrs_result := isrs_result . "\n" . result ;
    end foreach ;

# build the isr table
    @string isr_head ;
    @string isr_imp ;
    obj_table !"isr" !"isr" !"isr" !p ![isrs allKeys] ?isr_head ?isr_imp ;
    isrs_result := isrs_result."\n".isr_imp ;

    @string specific_code;
    generate_isr_specific !isrs !p ?specific_code;
    isrs_result .=  specific_code;

    header := [header stringByReplacingStringByString !"$ISRS$" !isr_head] ; 
    obj_header := [obj_header stringByReplacingStringByString !"$ISR_COUNT$" ![[isrs count] string]] ;
    implementation := [implementation stringByReplacingStringByString !"$ISRS$" !isrs_result] ; 
end routine ;

#--------------------------------------------------------------------
# Counters generation
#--------------------------------------------------------------------
routine generate_counters
    ?@counter_map counters
    ?@prefix_map p
    ?!@string header
    ?!@string implementation :

    @string tpl_counter ;
    @string counters_result := "" ;

    template ?tpl_counter !"counter" ;

    foreach counters (@lstring counter_name @counter_obj counter) :
        @string tmp ;
        @string result := tpl_counter ;

        replace !p !"counter_name" ![counter_name string] !?result ;
        replace !p !"counter" ![counter_name string] !?result ;
        [counter get_ticks_per_base ?tmp] ;
        result := [result stringByReplacingStringByString !"$TICKS_PER_BASE$" !tmp] ;

        counters_result := counters_result . "\n" . result ;
    end foreach ;
 
    @string specific_code;
    generate_counter_specific !counters !p ?specific_code;
    counters_result .=  specific_code;

    header := [header stringByReplacingStringByString !"$COUNTERS$" !""] ; 
    implementation := [implementation stringByReplacingStringByString !"$COUNTERS$" !counters_result] ; 
end routine ;

#--------------------------------------------------------------------
# Resources generation
#--------------------------------------------------------------------
routine max_task_prio_for_rez
    ?@task_map tasks
    ?@string rez_name
    !@string task_use
    ?!@uint64 rez_prio
:
    task_use := "" ;
    foreach tasks (@lstring task_name @task_obj task) :
        @stringset rez ;
        [task get_resources ?rez] ;
        if [rez hasKey !rez_name]
        then 
            @uint64 prio ;
            [task get_priority ?prio] ;
            if prio > rez_prio
            then rez_prio := prio ;
            end if ;
            task_use := task_use.task_name."(".[prio string].") " ;
        end if ;
    end foreach ;
    if task_use == ""
    then task_use := "none" ;
    end if ;
end routine ;

routine max_isr_prio_for_rez
    ?@isr_map isrs
    ?@string rez_name
    !@string isr_use
    ?!@uint64 rez_prio
:
    isr_use := "" ;
    foreach isrs (@lstring isr_name @isr_obj isr) :
        @stringset rez ;
        [isr get_resources ?rez] ;
        if [rez hasKey !rez_name]
        then
            @uint64 prio ;
            [isr get_priority ?prio] ;
            if prio > rez_prio
            then rez_prio := prio ;
            end if ;
            isr_use := isr_use.isr_name."(".[prio string].") " ;
        end if ;
    end foreach ;
    if isr_use == ""
    then isr_use := "none" ;
    end if ;
end routine ;

routine generate_resources
    ?@resource_map resources
    ?@task_map tasks
    ?@isr_map isrs
    ?@prefix_map p
    ?!@string header
    ?!@string obj_header
    ?!@string implementation :

    @string tpl_resource ;
    @string tpl_internal_resource ;
    @string resources_result := "" ;
    @stringset regular_rez [emptySet] ;

    template ?tpl_resource !"resource" ;
    template ?tpl_internal_resource !"internal_resource" ;

    foreach resources (@lstring resource_name @resource_obj resource) :
        
        @string result ;
        @string name := [resource_name string] ;
        @uint64 rez_prio := 0L ;
        @string task_use := "none" ;
        @string isr_use := "none" ;

        @resource_property_obj rez_prop ;
        [resource get_property ?rez_prop] ;

        extract rez_prop :
        when @resource_property_standard_obj () ->
            result := tpl_resource ;
            max_task_prio_for_rez !tasks !name ?task_use !?rez_prio ;
            max_isr_prio_for_rez !isrs !name ?isr_use !?rez_prio ;
            regular_rez += !name ;
        when @resource_property_linked_obj (*) ->
            result := tpl_resource ;
            max_task_prio_for_rez !tasks !name ?task_use !?rez_prio ;
            max_isr_prio_for_rez !isrs !name ?isr_use !?rez_prio ;
            regular_rez += !name ;
        when @resource_property_internal_obj () ->
            result := tpl_internal_resource ;
            max_task_prio_for_rez !tasks !name ?task_use !?rez_prio ;
        else
            result := "" ;
            error resource_name : "Unknown property found" ;
        end extract ;

        replace !p !"resource_name" ![resource_name string] !?result ;
        replace !p !"resource"      ![resource_name string] !?result ;

        
        result := [result stringByReplacingStringByString !"$PRIORITY$" ![rez_prio string]] ;
        result := [result stringByReplacingStringByString !"$TASKS$" !task_use] ;
        result := [result stringByReplacingStringByString !"$ISRS$" !isr_use] ;

        resources_result := resources_result . "\n" . result ;
    end foreach ;

# build the resource table
    @string rez_head ;
    @string rez_imp ;
    obj_table !"resource" !"resource" !"resource" !p !regular_rez ?rez_head ?rez_imp ;
    resources_result := resources_result."\n".rez_imp ;
 
    header := [header stringByReplacingStringByString !"$RESOURCES$" !rez_head] ;
    obj_header := [obj_header stringByReplacingStringByString !"$RESOURCE_COUNT$" ![[regular_rez count] string]] ;
    implementation := [implementation stringByReplacingStringByString !"$RESOURCES$" !resources_result] ; 
end routine ;

#--------------------------------------------------------------------
# Events generation
#--------------------------------------------------------------------
routine generate_events
    ?@event_map events
    ?@task_map tasks
    ?@prefix_map p
    ?!@string header
    ?!@string implementation
:
    @string tpl_event ;
    @string header_result := "" ;
    @string implementation_result := "" ;

    template ?tpl_event !"event" ;

    #
    # Iterate through the tasks to get the events used
    # a Or is done with the user masks of user events
    # and the result is stored in the task_mask map.
    # event conflicts are detected when building this Or
    # Auto events are looked up and for each auto event
    # the number of referencing tasks is computed and
    # stored in the evt_usage map.
    # In addition, a reverse mapping allowing to get all
    # the task referencing an event is built and stored
    # in the tasks_for_event map.
    #
    @event_usage_map evt_usage [emptyMap] ;
    @task_mask task_mask [emptyMap] ;
    @stringset_map tasks_for_event [emptyMap] ; 

    foreach tasks (@lstring task_name @task_obj task) :
        @stringset events_used ;
        [task get_events ?events_used] ;
        @uint64 event_mask := 0L ;
        foreach events_used (@string evt_name) :
            @event_obj event ;
            [events get_event ![@lstring new !evt_name !here] ?event] ;
            @event_mask_obj mask_obj ;
            [event get_mask ?mask_obj] ;
            extract mask_obj :
            when @event_mask_user_obj (@luint64 mask) ->
                if (event_mask & [mask uint64]) == 0L
                then
                    event_mask := event_mask | [mask uint64] ;
                else
                    error mask : "Mask %K conflicts with previous declarations" ;
                end if ;
            when @event_mask_auto_obj () ->
                @uint count ;
                if [evt_usage hasKey !evt_name]
                then
                    [!?evt_usage delete ![@lstring new !evt_name !here] ?count] ;
                    count++ ;
                else
                    count := 1 ;
                end if ;
                [!?evt_usage insert_count ![@lstring new !evt_name !here] !count] ;
            else
            end extract ;

            @stringset ref_tasks [emptySet] ;
            if [tasks_for_event hasKey !evt_name] 
            then
                [!?tasks_for_event delete ![@lstring new !evt_name !here] ?ref_tasks] ;
            end if ;
            ref_tasks += ![task_name string] ;
            [!?tasks_for_event add ![@lstring new !evt_name !here] !ref_tasks] ;

        end foreach ;
        [!?task_mask insert_mask !task_name !event_mask] ;
    end foreach ;

    #
    # Output the user events
    #
    foreach events (@lstring evt_name @event_obj evt) :
        @event_mask_obj evt_mask ;
        [evt get_mask ?evt_mask] ;
        extract evt_mask :
        when @event_mask_user_obj (@luint64 mask) ->
            @string result := tpl_event ;
            replace !p !"event" ![evt_name string] !?result ;
            replace !p !"event_name" ![evt_name string] !?result ;
            replace !p !"event_mask" ![[mask uint64] string] !?result ;
            header_result .= result."\n" ;
        else
        end extract ;
    end foreach ;

    #
    # Sort the auto events by reference count
    # and build a list by ref count
    #
    @events ordered_evt [emptyList] ;
    @uint max := 0 ;
    @events to_delete [emptyList];
    @uint evt_count := [evt_usage count] ;

    loop evt_count + 1 :
    while [evt_usage count] > 0 do
        max := 0 ;
        foreach evt_usage (@lstring key @uint count) :
#            message [key string]." : ".[count string]."\n" ;
            if count > max
            then
                max := count ;
            end if ;
        end foreach ;

#        message "max = ".[max string]."\n" ;

        to_delete := [@events emptyList] ;
        foreach evt_usage (@lstring key @uint count) :
            if count == max
            then
                ordered_evt += !key ;
                to_delete += !key ;
#                message "A detruire : ".[key string]."\n" ;
            end if ;
        end foreach ;

        foreach to_delete (@lstring key) :
#            message "destruction de : ".[key string]."\n" ;
            [!?evt_usage delete !key ?*] ;
        end foreach ;

#        message "taille de la map = ".[[evt_usage count] string]."\n" ;
#        foreach evt_usage (@lstring key @uint count) :
#            message "Il reste : ".[key string].", ".[count string]."\n" ;
#        end foreach ;
    end loop ;

#    message "FIN\n" ; 
    #
    # Compute the mask for auto events
    #
    foreach ordered_evt (@lstring evt) :
#        message [evt string]."\n" ;
        # build the user mask
        @stringset ref_tasks ;
        [tasks_for_event get !evt ?ref_tasks] ;
        @uint64 common_mask := 0L ;
        foreach ref_tasks (@string task_name) :
            @uint64 mask ;
            [task_mask get_mask ![@lstring new !task_name !here] ?mask] ;
            common_mask := common_mask | mask ;
        end foreach ;
#        message "mask = ".[common_mask string]."\n" ;
        # find the first unused bit in the mask
        @uint64 needle := 1L ;
        loop 64:
        while (needle & common_mask) != 0L do
            needle := needle << 1 ;
        end loop ;
#        message "found ".[needle string]."\n" ;
        
        @string result := tpl_event ;
        replace !p !"event" ![evt string] !?result ;
        replace !p !"event_name" ![evt string] !?result ;
        replace !p !"event_mask" ![needle string] !?result ;
        header_result .= result."\n" ;
    end foreach ;

    header := [header stringByReplacingStringByString !"$EVENTS$" !header_result] ; 
    implementation := [implementation stringByReplacingStringByString !"$EVENTS$" !implementation_result] ; 

end routine ;


end semantics ;
# vim:ft=ggs:ts=4:sw=4
