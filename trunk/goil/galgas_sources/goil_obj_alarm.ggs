#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protégé par la loi sur la propriété intellectuelle
#
# This software is distributed under the Lesser GNU Public Licence
#
# GOIL alarm object parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_alarm :

import lexique goil_lexique in "goil_lexique.ggs" ;
import option goil_options in "goil_options.ggs" ;
import semantics goil_semantics in "goil_semantics.ggs" ;

nonterminal <alarm>
    ?!@alarm_map alarms ;

nonterminal <alarm_parameters>
    ?!@lstring       counter_name
    ?!@action_obj    alarm_action
    ?!@autostart_obj alarm_autostart ;

nonterminal <alarm_action_params>
    ?!@action_obj alarm_action ;

nonterminal <alarm_autostart_params>
    ?!@autostart_obj alarm_autostart ;

#
# external rules
#
nonterminal <description>
    !@lstring description ;

#
# alarm rules implementation
#
rule <alarm>
    ?!@alarm_map alarms :

    @lstring alarm_name ;
    @alarm_obj alarm ;
    @action_obj alarm_action := [@void_action new] ;
    @autostart_obj alarm_autostart := [@alarm_autostart_void new] ;
    @lstring counter_name := [@lstring new !"" !here] ;
    @lstring description := [@lstring new !"" !here] ;

    $ALARM$ ;
    $idf$ ?alarm_name ;
    ${$ ;
    <alarm_parameters> !?counter_name !?alarm_action !?alarm_autostart;
    $}$ ;
    <description> ?description ;
    $;$ ;

    alarm := [@alarm_obj new !description !counter_name !alarm_action !alarm_autostart] ;
    [!?alarms insertAlarm !alarm_name !alarm] ;
end rule ;

rule <alarm_parameters>
    ?!@lstring       counter_name
    ?!@action_obj    alarm_action
    ?!@autostart_obj alarm_autostart :

    repeat
    while
        if [counter_name string] != "" then
            error here : "Counter already defined for this alarm" ;
        end if ;
        $COUNTER$ ;   $=$ ; $idf$ ?counter_name ; $;$;
    while
        extract alarm_action :
        when @void_action () ->
        else error here : "Action attribute already defined for this alarm" ;
        end extract ;
        $ACTION$ ;    $=$ ; <alarm_action_params> !?alarm_action ; $;$;
    while
        extract alarm_autostart :
        when @alarm_autostart_void () ->
        else error here : "Autostart attribute already defined for this alarm" ;
        end extract ;
        $AUTOSTART$ ;  $=$ ;
        select
            $TRUE$ ;
            ${$ ;
            <alarm_autostart_params> !?alarm_autostart ;
            $}$ ;
        or
            $FALSE$ ; alarm_autostart := [@alarm_autostart_false new] ;
        end select ;
        $;$;
    while
        $idf$ ?* ;     $=$ ; select $idf$ ?* ; or $uint_number$ ?* ; end select ;
    end repeat ;
    #check constraints (only first level).
    if [counter_name string] == "" then
      error here : "no counter defined for this alarm.";
    end if;
    extract alarm_action :
    when @void_action () ->
        error here : "Action attribute not defined for this alarm." ;
        else
    end extract ;
    extract alarm_autostart :
    when @alarm_autostart_void () ->
        error here : "Autostart attribute not defined for this alarm." ;
        else
    end extract ;
end rule ;

rule <alarm_action_params>
    ?!@action_obj alarm_action :

    select
        @lstring task_name := [@lstring new !"" !here] ;
        @lstring event_name := [@lstring new !"" !here] ;
		 $SETEVENT$ ; ${$ ;
		 repeat
        while
            if [task_name string] != "" then
                error here : "Task name attribute already defined for this alarm action" ;
            end if ;
            $TASK$ ;
            $=$ ;
            $idf$ ?task_name ;
            $;$ ;
        while
            if [event_name string] != "" then
                error here : "Event name attribute already defined for this alarm action" ;
            end if ;
            $EVENT$ ;
            $=$ ;
            $idf$ ?event_name ;
            $;$ ;
        end repeat ;
        alarm_action := [@setevent_action new !task_name !event_name] ;
    or
        @lstring task_name ;
        $ACTIVATETASK$ ; ${$ ;
        $TASK$ ; $=$ ; $idf$ ?task_name ;
        $;$ ;
        alarm_action := [@activatetask_action new !task_name] ;
    or
        @lstring function_name ;
        $ALARMCALLBACK$ ; ${$ ;
        $ALARMCALLBACKNAME$ ; $=$ ; $string$ ?function_name ;
        $;$ ;
        alarm_action := [@callback_action new !function_name] ;
    end select ;
    $}$ ;        
end rule;

rule <alarm_autostart_params>
    ?!@autostart_obj alarm_autostart :

    @bool alarm_time_known := false ;
    @bool cycle_time_known := false ;
    
    @luint64 alarm_time := [@luint64 new !0L !here] ;
    @luint64 cycle_time := [@luint64 new !0L !here] ;
    @lstring app_mode := [@lstring new !"" !here];
    @stringset app_modes := [@stringset emptySet];

    repeat
    while
        if alarm_time_known == true then
            error here : "Alarmtime attribute already defined for this alarm autostart" ;
        end if ;
        $ALARMTIME$ ; $=$ ; $uint_number$ ?alarm_time ; $;$ ;
        alarm_time_known := true ;
    while
        if cycle_time_known == true then
            error here : "Cycletime attribute already defined for this alarm autostart" ;
        end if ;
        $CYCLETIME$ ; $=$ ; $uint_number$ ?cycle_time ; $;$ ;
        cycle_time_known := true ;
    while
        $APPMODE$ ; $=$ ; $idf$ ?app_mode ; $;$ ;
        app_modes += ![app_mode string];
    end repeat ;

    # signal an error when the ALARMTIME parameter is missing
    if not alarm_time_known then
        error here : "ALARMTIME subattribute is missing" ;
    end if ;
    alarm_autostart := [@alarm_autostart_true new !alarm_time !cycle_time !app_modes] ;
end rule;

end syntax ;
# vim:ft=ggs:ts=4:sw=4
