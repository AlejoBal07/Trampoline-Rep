#
# Trampoline OS
#
# Trampoline is copyright (c) IRCCyN 2005+
# Trampoline est protªgª par la loi sur la propriªtª intellectuelle
#
# This software is distributed under the Lesser GNU Public Licence
#
# GOIL task object parser
#
# $Date$
# $Rev$
# $Author$
# $URL$
#

syntax goil_obj_task :

import lexique goil_lexique in "goil_lexique.ggs" ;
import option goil_options in "goil_options.ggs" ;
import semantics goil_semantics in "goil_semantics.ggs" ;


#
# local rules declaration
#
rule <task>
	?!@task_map tasks ;

rule <task_parameters>
	?@lstring task_name
	?!@luint64 priority
	?!@lstring schedule
	?!@luint64 activation
	?!@task_autostart_obj autostart
	?!@stringset resources
	?!@stringset events ;

rule <task_autostart_params>
	?!@task_autostart_obj task_autostart ;

rule <check_task_constraints>
	?@lstring task_name
	?@luint64 priority
	?@lstring schedule
	?@luint64 activation
	?@task_autostart_obj autostart ;

#
# external rules
#
rule <description>
    !@lstring description ;
rule <boolean>
    !@bool val ;
rule <free_field>
    ?!@ident_map ids ;

#
# local rules implementation
#
rule <task>
	?!@task_map tasks 
:
    @lstring task_name ;
    @task_obj task ;
    @luint64 priority := [@luint64 new !4294967296L !here] ;
    @lstring schedule := [@lstring new !"" !here] ;
    @luint64 activation := [@luint64 new !4294967296L !here] ;
    @task_autostart_obj autostart := [@task_autostart_void new] ;
    @stringset resources [emptySet] ;
    @stringset events [emptySet] ;
    @lstring description ;
    @ident_map others := [@ident_map emptyMap];

    $TASK$ ;
    $idf$ ?task_name ; 
    ${$ ;
    repeat
    while
        <task_parameters> !task_name !?priority !?schedule !?activation !?autostart !?resources !?events ; 
        $;$ ;
    while
        <free_field> !?others ;
        $;$ ;
    end repeat ;
    $}$ ;
    <description> ?description ;
    $;$ ;

    <check_task_constraints> !task_name !priority !schedule !activation !autostart ;
    task := [@task_obj new !description !priority !schedule !activation !autostart !resources !events !others] ;
    [!?tasks insertTask !task_name !task] ;
end rule ;	

rule <task_parameters>
    ?@lstring task_name
    ?!@luint64 priority
    ?!@lstring schedule
    ?!@luint64 activation
    ?!@task_autostart_obj autostart
    ?!@stringset resources
    ?!@stringset events
:
	select
		#PRIORITY attribute
		if [priority uint64] != 4294967296L then
			error here : "PRIORITY attribute already defined for TASK " . [task_name string] ;
		end if ;
		$PRIORITY$ ; $=$ ; $uint_number$ ?priority ;
		if [priority uint64] > 4294967295L then
			error here : "PRIORITY attribute value out-of-range" ;
		end if ;
	or
		#SCHEDULE attribute
		if [schedule string] != "" then
			error here : "SCHEDULE attribute already defined for TASK " . [task_name string] ;
		end if ;
		$SCHEDULE$ ; $=$ ; 
		select
			$FULL$ ;
			schedule := [@lstring new !"FULL" !here] ;
		or
			$NON$ ;
			schedule := [@lstring new !"NON" !here] ;
		end select ;
	or
		#ACTIVATION attribute
		if [activation uint64] != 4294967296L then
			error here : "ACTIVATION attribute already defined for TASK " . [task_name string] ;
		end if ;
		$ACTIVATION$ ; $=$ ; $uint_number$ ?activation ;
		if [activation uint64] > 4294967295L then
			error here : "ACTIVATION attribute value out of range" ;
		end if ;
	or
		#AUTOSTART attribute
		extract autostart :
			when @task_autostart_void () ->
			else error here : "AUTOSTART attribute already defined for TASK " . [task_name string] ;
		end extract ;
		$AUTOSTART$ ; $=$ ;
		select
			$TRUE$ ; ${$ ;
			<task_autostart_params> !?autostart ;
			$}$ ;
		or
			$FALSE$ ; 
			autostart := [@task_autostart_false new] ;
		end select ;
	or
		#RESOURCE attribute
		@lstring  resource ;
		$RESOURCE$ ; $=$ ; $idf$ ?resource ;
		if ([resources hasKey ![resource string]]) then
			warning here : "RESOURCE " . [resource string] . " already defined for TASK " . [task_name string] ;
		end if ;
		resources += ![resource string] ;
	or
		#EVENT attribute
		@lstring event ;
		$EVENT$ ; $=$ ; $idf$ ?event ;
		if ([events hasKey ![event string]]) then
			warning here : "EVENT " . [event string] . " already defined for TASK " . [task_name string] ;
		end if ;
		events += ![event string] ;
	end select ;
end rule;

rule <task_autostart_params>
	?!@task_autostart_obj autostart
:
	@lstring appmode := [@lstring new !"" !here];
	@stringset appmodes [emptySet] ;
	repeat
	while
		$APPMODE$ ; $=$ ; $idf$ ?appmode ; $;$ ;
		if ([appmodes hasKey ![appmode string]]) then
			warning here : "APPMODE " . [appmode string] . " already defined for this task AUTOSTART attribute" ;
		end if ; 
		appmodes += ![appmode string] ;
	end repeat;
	autostart := [@task_autostart_true new !appmodes] ;
end rule ;

rule <check_task_constraints>
	?@lstring task_name
	?@luint64 priority
	?@lstring schedule
	?@luint64 activation
	?@task_autostart_obj autostart
:
	#PRIORITY is defined
	if [priority uint64] == 4294967296L then
		error here : "The PRIORITY attribute must be defined for TASK " . [task_name string] ;
	end if ;
	#SCHEDULE is defined
	if [schedule string] == "" then
		error here : "The SCHEDULE attribute must be defined for TASK " . [task_name string];
	end if ;
	#ACTIVATION is defined
	if[activation uint64] == 4294967296L then
		error here : "The ACTIVATION attribute must be defined for TASK " . [task_name string] ;
	end if ;
	#AUTOSTART is defined
	extract autostart :
		when @task_autostart_void () -> error here : "The AUTOSTART attribute must be defined for TASK " . [task_name string] ;
		else
	end extract ; 
end rule ;

end syntax ;