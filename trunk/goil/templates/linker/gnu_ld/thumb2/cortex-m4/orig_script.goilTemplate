/* Entry Point */
ENTRY(Reset_Handler)

/* Highest address of the user mode stack */
_estack = 0x20020000;    /* end of 128K RAM on AHB bus*/

/* Generate a link error if heap and stack don't fit into RAM */
_Min_Heap_Size = 0;      /* required amount of heap  */
_Min_Stack_Size = 0x400; /* required amount of stack */

/* Specify the memory areas */
MEMORY
{
  VECTOR_TABLE (arx)  : ORIGIN = 0x08000000, LENGTH = 0x188
  FLASH         (rx)  : ORIGIN = 0x08000188, LENGTH = 0xFFE78
  RAM          (xrw)  : ORIGIN = 0x20000000, LENGTH = 192K
  MEMORY_B1     (rx)  : ORIGIN = 0x60000000, LENGTH = 0K
}

/* Define output sections */
SECTIONS
{
  /* The startup code goes first into FLASH */
  .isr_vector :
  {
    . = ALIGN(4);
    KEEP(*(.isr_vector)) /* Startup code */
    . = ALIGN(4);
  } >VECTOR_TABLE

  /*
   * code and consts of the operating system (Trampoline).
   * this section is not accessible from an untrusted process
   */
  . = ALIGN(4);
  ostext : {
/*    *(.SC_handler)*/
/*    *(.EI_handler)*/
    *(.osCode)
    *(.appCommonCode) 
  } > FLASH

  . = ALIGN(4);
  osconst : {
    *(.osConst)
  } > FLASH
  
  /*
   * remaining .text (ie no section given)
   */
  . = ALIGN(4);
  text_garbage : {
    *(.text)
    *(.ctors)
    *(.dtors)

  } > FLASH

  . = ALIGN(4);
  other_garbage : {
    *(.init)
    *(.fini)
  } > FLASH

  /* names a section that contains exception unwinding information. See EHABI for details. */
   .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
    .ARM : {
    __exidx_start = .;
      *(.ARM.exidx*) /* names a section that contains index entries for section unwinding. See EHABI for details. */
      __exidx_end = .;
    } >FLASH

  . = ALIGN(4);
  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } >FLASH
  . = ALIGN(4);
  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } >FLASH
  . = ALIGN(4);
  .fini_array :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(.fini_array*))
    KEEP (*(SORT(.fini_array.*)))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } >FLASH
  
  /* used by the startup to initialize data */
  _sidata = .;

  /* Initialized data sections goes into RAM, load LMA copy after code */
  .data : AT ( _sidata )
  {
    . = ALIGN(4);
    _sdata = .;        /* create a global symbol at data start */
    *(.data)           /* .data sections */
    *(.data*)          /* .data* sections */

    . = ALIGN(4);
    _edata = .;        /* define a global symbol at data end */
  } >RAM

  /*
   * vars of the operating system (Trampoline)
   */
  . = ALIGN(4);
  osvars : {
    *(.osVar)
  } > RAM

  /*
   * code and consts of the processes of the applications
   */
  . = ALIGN(4);
  apptext : {
    __PROGCONST_SECTION_START = .;
    __SEG_START_APP_CODE_CONST_RGN = .;
    *(.osApiConst)  /* API constants    */
    *(.rodata)      /* litteral strings */
    . = ALIGN(4);
    *(.osApiCode)   /* API functions    */
    /* Sections for code of tasks and ISR */%
foreach proc in PROCESSES do
%
    *(.% !proc::KIND %_% !proc::NAME %Code)
%
end foreach
%
  } > RAM
  
  appconst : {
     /* Sections for application const */  
%
foreach app in APPLICATIONS do
 for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
  for SECTION_KIND in "_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_" do
%      *(.OS_APP_% !app::NAME %_SEC% !SECTION_KIND !DATA_SIZE %)
%
  end for
 end for
end foreach
%
    . = ALIGN(4);
  } > RAM

  procconst : {
    /* Sections for const of tasks and ISR */
%
foreach proc in PROCESSES do
 for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
  for SECTION_KIND in "_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_" do
%      *(.% !proc::KIND %_% !proc::NAME %_SEC% !SECTION_KIND !DATA_SIZE %)
%
  end for
 end for
end foreach
%    
    . = ALIGN(4);
    __SEG_STOP_APP_CODE_CONST_RGN = . - 1;
    __PROGCONST_SECTION_STOP = . - 1;
  } > RAM
  
  /*
   * bss data
   */
  . = ALIGN(4);
  bss_data : {
    /* This is used by the startup in order to initialize the .bss secion */
    _sbss = .;         /* define a global symbol at bss start */
    __bss_start__ = _sbss;
    *(.bss)
    *(.sbss)
    /* *(.sbss2) */

    . = ALIGN(4);
    _ebss = .;         /* define a global symbol at bss end */
    __bss_end__ = _ebss;    
  } > RAM
  . = ALIGN(4);

  /*
   * private data of processes
   */
%
foreach proc in PROCESSES do
%  .% !proc::KIND %_% !proc::NAME %_SEC_VAR : {
    . = ALIGN(4);
    __SEG_START_% !proc::KIND %_% !proc::NAME %_VAR_RGN = .;
/* Initialized variables section of % !proc::KIND % % !proc::NAME % */
%
  for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
    for SECTION_KIND in "_NOINIT_","_POWER_ON_INIT_","_FAST_","_" do
%    *(.% !proc::KIND %_% !proc::NAME %_SEC_VAR% !SECTION_KIND !DATA_SIZE %)
%
    end for
  end for
%    __SEG_END_% !proc::KIND %_% !proc::NAME %_VAR_RGN = ALIGN(32) - 1;
  } > RAM
%
end foreach
%

  /*
   * stack of processes
   */
%
foreach proc in PROCESSES do %
  /* Section of stack of % !proc::KIND % % !proc::NAME %  */
  .% !proc::KIND %_% !proc::NAME %_SEC_STACK ALIGN(32) : {
    __SEG_START_% !proc::KIND %_% !proc::NAME %_STACK_RGN = .;
    *(.% !proc::KIND %_% !proc::NAME %Stack)
    __SEG_END_% !proc::KIND %_% !proc::NAME %_STACK_RGN = ALIGN(32) - 1;
  } > RAM
%
end foreach
%
  /*
   * os application data
   */
   appvars : {
%
foreach app in APPLICATIONS do
%    __SEG_START_OS_APP_% !app::NAME %_VAR_RGN = .;
/* Initialized variables section of OS_APP % !app::NAME % */
%
  for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
    for SECTION_KIND in "_NOINIT_","_POWER_ON_INIT_","_FAST_","_" do
%    *(.OS_APP_% !app::NAME %_SEC_VAR% !SECTION_KIND !DATA_SIZE %)
%
    end for
  end for
%    __SEG_END_OS_APP_% !app::NAME %_VAR_RGN = ALIGN(16) - 1;
%
end foreach
% 
  } > RAM

  /*
   * garbage
   */
  data_garbage : {
    *(.data)
    *(.sdata)
    *(.sdata2)
    *(.got)
    *(.got1)
    *(.got2)
    *(.fixup)
    *(.gcc_except_table)
    *(.eh_frame)
    *(.jcr)
  } > RAM
  .comment :        { *(.comment)        } > RAM
  relocatable : {
    *(.rela.*)
  } > RAM

}

