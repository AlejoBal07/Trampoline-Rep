# memory map file
LDFLAGS += -Map % !APPNAME %.map

bin: % !APPNAME %
	arm-none-eabi-objcopy --strip-all --remove-section=.vectors --output-target=binary  % !APPNAME % % !APPNAME %.bin
	arm-none-eabi-objcopy --only-section=.vectors --output-target=binary % !APPNAME % % !APPNAME %_vectors.bin
	echo "****>> Information : you should use u-boot like this :"
	echo "****>> tftpboot 0xA0000000 192.168.5.20:% !APPNAME %.bin"
	echo "****>> tftpboot 0xFFFF4C00 192.168.5.20:% !APPNAME %_vectors.bin"
	echo "****>> go 0xA0000000"

EXTRA_FILES_CLEAN += % !APPNAME %.bin % !APPNAME %.map

%
if not USEMEMORYMAPPING then
%# using default linker script (no memory mapping)
LDFLAGS += --script=$(MACHINE_PATH)/$(TARGET)/ldscript_nomm_nomp
%
end if
%

# choose the right instruction set
ASFLAGS += -mcpu=arm926ej-s
CFLAGS += -mcpu=arm926ej-s

%
if COMPILEREXE == "gcc" then
%# changes default compiler
CC = arm-none-eabi-gcc
%
end if

if LINKEREXE == "gcc" then
%# changes default linker
LD = arm-none-eabi-ld
%
end if

if ASSEMBLEREXE == "as" then
%# changes default assembler
AS = arm-none-eabi-as
%
end if
