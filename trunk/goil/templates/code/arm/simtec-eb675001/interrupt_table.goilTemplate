#include "tpl_machine.h"

%
if USEINTERRUPTTABLE then
%
/* Interrupt functions */
%
  loop ENTRY from 0 to ITSOURCESLENGTH - 1
    before 
%
#define OS_START_SEC_CODE
#include "tpl_memmap.h"
%
    do
      let interrupt_exists_NUMBER := false  # Jonathan ILIAS-PILLET : does NUMBER means the same thing here than inside the next foreach ?
      foreach INTERRUPTSOURCES prefixedby interrupt_ do
        if ENTRY == interrupt_NUMBER then
          if not interrupt_exists_NUMBER then
            let sourceFound := false
            foreach HARDWARECOUNTERS prefixedby counter_ do
              if counter_SOURCE == interrupt_NAME then
                let sourceFound := true
              end if
            end foreach
            foreach ISRS1 prefixedby isr1_ do
              if isr1_SOURCE == interrupt_NAME then
                let sourceFound := true
              end if
            end foreach
            foreach ISRS2 prefixedby isr2_ do
              if isr2_SOURCE == interrupt_NAME then
                let sourceFound := true
              end if
            end foreach
            if sourceFound then
              let interrupt_exists_NUMBER := true
            end if
          end if
          if interrupt_exists_NUMBER then
%
FUNC(void, OS_CODE) tpl_interrupt_source_% !interrupt_NUMBER %()
{
%
          end if              
          # check first for hardware counters (software counters call directly tpl_counter_tick function)
          foreach HARDWARECOUNTERS prefixedby counter_ do
            if counter_SOURCE == interrupt_NAME then
%
  tpl_tick_% !interrupt_NAME %();
%  
            end if
          end foreach
          foreach ISRS2 prefixedby isr2_ do
            if isr2_SOURCE == interrupt_NAME then
%
  tpl_central_interrupt_handler(% !([TASKS length] + INDEX) %); 
%    
            end if
          end foreach
          foreach ISRS1 prefixedby isr1_ do
            if isr1_SOURCE == interrupt_NAME then
%
  % !isr1_NAME %_function (); 
%
            end if
          end foreach
        end if
      after
        if interrupt_exists_NUMBER then     
%
}
%     
        end if
      end foreach
    after
%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"
%
  end loop
%

/* Interrupt table vector */
%
  loop ENTRY from 0 to ITSOURCESLENGTH - 1
    before
%
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
CONST(tpl_it_vector_entry, OS_CONST) tpl_it_vector[% !ITSOURCESLENGTH %] = {
%
    do
      let entryFound := false
      let interrupt_exist_ENTRY := false
      foreach INTERRUPTSOURCES prefixedby interrupt_ do
        if ENTRY == interrupt_NUMBER & not interrupt_exist_ENTRY then
          let interrupt_exist_ENTRY := true
          foreach HARDWARECOUNTERS prefixedby counter_ do
            if counter_SOURCE == interrupt_NAME then
              let entryFound := true
            end if
          end foreach
          foreach ISRS1 prefixedby isr1_ do
            if isr1_SOURCE == interrupt_NAME then
              let entryFound := true
            end if
          end foreach
          foreach ISRS2 prefixedby isr2_ do
            if isr2_SOURCE == interrupt_NAME then
              let entryFound := true
            end if
          end foreach
          if entryFound then
            %  { tpl_interrupt_source_% !interrupt_NUMBER %, (void *)NULL }%
          end if
        end if
      end foreach
      if not entryFound then
        %  { tpl_null_it, (void *)NULL }%
      end if
   between %,
%
    after
%
};
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
  end loop
%
%
end if
