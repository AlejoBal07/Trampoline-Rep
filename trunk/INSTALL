How to run Trampoline on Unix
=============================

Compile goil
============

Trampoline includes the source code of Goil.
Go in goilv2/<makefile_yourplatform> directory.
For instance if you use Mac OS X, go in goilv2/makefile_macosx,
if you use Linux, go in goilv2/makefile_unix.

build goil :

make goil
 
Put goil somewhere and add its path to the PATH environment variable.

How to compile Viper
====================

When run on Unix, Trampoline forks and execve Viper (that can be found in
the directory viper). Viper stands for VIrtual ProcEssor Emulator. Viper
is a multithreaded tiny application that implements timers and send signals
to Trampoline. Commands are sent to Viper by using shared memory segments
to initialize and start timers. When a timer expires, a signal is sent to
Trampoline and act as an interrupt.

Go to the viper subdirectory, then build Viper:
make

How to compile the sample application
======================================

A sample application is located in the examples/posix/periodic directory of Trampoline.
This default application uses an alarm and a task. The former activates the later
every second. To build this application, you have to call goil a first time:

goil --target=posix --templates=path/to/templates periodic.oil
 
path/to/templates should be the actual path. Use goilv2/templates

goil will generate a Makefile (and obviously application
related structures). The Makefile should not be modified directly because it
will be overwritten each time the goil compiler is used.

In the OIL file, some compilation information can be given in the OS section. 
Use BUILD = TRUE attribute with APP_SRC, CFLAGS, ASFLAGS and LDFLAGS
subattributes. An example is given in examples/posix/periodic/periodic.oil.

Then simply type make. A trampoline executable file is generated.

How to compile an application
=============================

The best way is to duplicate the example/posix/periodic directory (creating,
for instance, a MyApp directory). In this directory, the periodic.c
file contains the C functions of the application, the periodic.oil
file contains the OIL description.
Then update the oil file and give source files in the OS/BUILD section.
Then call goil explicitely the first time:

goil --target=posix --templates=path/to/templates peirodic.oil

It generate the Makefile. Now, only the 'make' command is necessary when 
updating the application.

That's all.
