OIL_VERSION = "3.0" : "example" ;

IMPLEMENTATION trampoline {
    OS { 
        ENUM [EXTENDED] STATUS;
    } ;
    TASK {
        UINT32 STACKSIZE = 32768 ;
        UINT32 [1..10] PRIORITY = 1 ;
    } ;
    ISR {
        UINT32 STACKSIZE = 1000 ;
    } ;
};

CPU test {

    OS config {
        STATUS = STANDARD;
        ERRORHOOK = TRUE;
        PRETASKHOOK = TRUE;
        POSTTASKHOOK = TRUE;
        PROTECTIONHOOK = TRUE;
        CFLAGS = "-Wall -pedantic --std=c99 -Wmissing-field-initializers";
        APP_SRC = "tpl_default_tasks_workstation.c";
    } ;

    APPMODE std {
    };

    TASK periodicTask {
        PRIORITY = 5;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
        EVENT = evt1 ;
        RESOURCE  = r1;
        TIMING_PROTECTION = TRUE {
          EXECUTIONBUDGET = 100000;
          TIMEFRAME = 1000000;
          MAXOSINTERRUPTLOCKTIME = 1000000;
          MAXALLINTERRUPTLOCKTIME = 1000000;
          LOCKINGTIME = RESOURCELOCK {
            
              RESOURCE = r1;
              MAXRESOURCELOCKTIME = 1000000;
            
          };
        };
    };
    
    TASK r1_squatter {
        PRIORITY = 6;
        AUTOSTART = FALSE;
        ACTIVATION = 1;
        SCHEDULE = FULL;
        RESOURCE  = r1;
        TIMING_PROTECTION = TRUE {
          EXECUTIONBUDGET = 1000000;
          TIMEFRAME = 10000000;
          MAXOSINTERRUPTLOCKTIME = 1000000;
          MAXALLINTERRUPTLOCKTIME = 1000000;
          LOCKINGTIME = RESOURCELOCK {
            
              RESOURCE = r1;
              MAXRESOURCELOCKTIME = 100000;
            
          };
        };
    };
    
    //default tick is 50 ms
    COUNTER counter100ms {
        TICKSPERBASE = 2; 
        MAXALLOWEDVALUE = 255;
        MINCYCLE = 1;
        TYPE = HARDWARE { DRIVER = OSINTERNAL; };
    };
    
    ALARM alarm1s {
        COUNTER = counter100ms;
        ACTION = ACTIVATETASK {
            TASK = periodicTask;
        };
        AUTOSTART = TRUE {
            ALARMTIME = 1;
            CYCLETIME = 20; //each 1000 ms.
            APPMODE = std;
    		};
    };

    ALARM alarm200ms {
        COUNTER = counter100ms;
        ACTION = ACTIVATETASK {
            TASK = r1_squatter;
        };
        AUTOSTART = TRUE {
            ALARMTIME = 1;
            CYCLETIME = 4; //each 200 ms.
            APPMODE = std;
    		};
    };

    ALARM alarmevent {
        COUNTER = counter100ms;
        ACTION = SETEVENT {
            TASK = periodicTask;
            EVENT = evt1;
        };
        AUTOSTART = TRUE {
            ALARMTIME = 1;
            CYCLETIME = 10; //each 1000 ms.
            APPMODE = std;
    };
    };
    
    EVENT evt1 { MASK=AUTO; };
    
    RESOURCE r1 { RESOURCEPROPERTY = STANDARD; };
};

