/* tableau pour terminate et préemption avec calcul de moyenne */




#include "../os/tpl_os.h"
#include "tpl_os_generated_configuration.h"
#include <stdio.h>


#include <C167CS.H>

sbit LED=P8^0;
sbit LED1=P8^1;
sbit LED2=P8^2;
//sbit BP=P2^8;

 /* tableau donné    */
/* tableau pour le temps d'executions des tâches */
/* tab_time[i][j] => i= nbre de tache à mesurer*/
TimeType tab_time[3][6]={	{0,0,0,0,0,0},
							{0,0,0,0,0,0},
							{0,0,0,0,0,0} };

/* tableau pour le temps partiel d'executions des tâches */
/* tab_time[i][j] => i= nbre de tache à mesurer*/
TimeType tab_partialTime[3][5]={	{0,0,0,0,0},
									{0,0,0,0,0},
									{0,0,0,0,0} };


ISR2(it_trap32)
{
	LED1=!LED1;
	ActivateTask(tock);
	printf("trap32\n");
	TerminateISR2();
}


TASK(tock)
{
 	unsigned long int i;
	int a;
	LED2 = !LED2;
	ActivateTask(tick);
	printf("tock\n");
	for(i=0;i<800000;i++){
	a = a;
	}
    TerminateTask();
}

TASK(tick)
{	
	unsigned long int i;
	int a;
	LED = !LED;
	//ActivateTask(tock);
	printf("tick\n");
	for(i=0;i<600000;i++){
	a = a;
	}
	TerminateTask();
}

TASK(init)
{
	//T01CON = 0x0045; /* period 840 ms. Timer 0*/ 
	T01CON = 0x0047;
	//T01CON = 0x0000;
	T0IC = 0x0050;   /* IE=1, ILVL 4, GLVL 0  */
    printf("init timer 0\n");
	//ActivateTask(tick);
    TerminateTask();
}

void InitApp()
{
}

void damned()
{
}

void tpl_task_terminated()
{	
	/* Déclarations */
 	int i=0;     /* indice courant   */
	int n=0;	

	TaskType id;
	TimeType timeTask;
	GetTaskID(&id);
	for (i=0;i<5;i++){
		tab_partialTime[id][i]=0;
	}
	
	GetTimeTask(id,&timeTask);
	
	printf("la tâche %d à mis %lu unité de temps à s'exécuter \n",id,timeTask);
	
	/* traitement du tableau de temps d'execution */
	/* tab_time[i][j] => i correspond a l'identifiant et j   */
	/* c'est la moyenne géométrique(si j=0) ou le temps d'exécution(si 1<=j<=5)                  */
	/* on décale le tableau pour inserer la nouvelle valeur (la plus ancienne est jetée) */
	for (i=1;i<5;i++){
		tab_time[id][i]=tab_time[id][i+1];
	}
	/* insertion de la nouvelle mesure */
	tab_time[id][5]=timeTask;
	/* raz de la moyenne pour un nouveau calcul */
	tab_time[id][0]=0;
	/* calcul de la moyenne */
	for (i=1;i<6;i++){
		/* au début du traitement il n'y a moins de 5 tâches il faut donc en tenir compte */
		if (tab_time[id][i] != 0){
			tab_time[id][0]+=tab_time[id][i];
			n++;
		}
	}
	tab_time[id][0]=tab_time[id][0]/n;
	/* affichage des différentes valeurs */
	for(i=1; i<6;i++){
 		printf("la %dème mesure la plus vieille sur la tache %d a durée %lu \n",i,id,tab_time[id][i]);
 	}
	printf("la moyenne de cette tache %d sur les %d dernière(s) mesure(s) est de %lu \n",id,n,tab_time[id][0]);
 		
}


void tpl_task_preempted()
{
	int i=0;
	TaskType id;
	TimeType partialTimeTask;
	GetTaskID(&id);
	/* on ne mesure pas la tache idle */
	if (id != -1){	
		GetPartialTimeTask(id,&partialTimeTask);
		printf("la tâche %d à c'est préemptée au bout de %lu unité de temps \n",id,partialTimeTask);
	
		for (i=0;i<4;i++){
			tab_partialTime[id][i]=tab_partialTime[id][i+1];
		}
		/* insertion de la nouvelle mesure */
		tab_partialTime[id][4]=partialTimeTask;	
		for(i=0; i<5;i++){
 			printf("la %dème mesure du temps partiel le plus vieux sur la tache %d a durée %lu \n",i+1,id,tab_partialTime[id][i]);
 		}
		//printf("la moyenne de cette tache %d sur les %d dernière(s) mesure(s) est de %lu \n",id,n,tab_time[id][0]);
 	}
}




