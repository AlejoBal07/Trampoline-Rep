//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semantic_verification.cpp'                      *
//                        Generated by version 2.5.6                         *
//                      march 17th, 2014, at 14h24'24"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "semantic_verification.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "goil_options.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semantic_verification.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//-----------------------------------------------------------------------------*
//                                                                             *
//                      Function 'attributeAllowsAuto'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_bool function_attributeAllowsAuto (const GALGAS_impType & constinArgument_type,
                                          C_Compiler * /* inCompiler */
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool result_allowsAuto ; // Returned variable
  result_allowsAuto = GALGAS_bool (true) ;
  if (constinArgument_type.isValid ()) {
    if (NULL != dynamic_cast <const cPtr_impAutoDefaultType *> (constinArgument_type.ptr ())) {
      GALGAS_impAutoDefaultType cast_6855_autoType ((cPtr_impAutoDefaultType *) constinArgument_type.ptr ()) ;
      const enumGalgasBool test_0 = cast_6855_autoType.reader_withAuto (SOURCE_FILE_AT_LINE (223)).operator_not (SOURCE_FILE_AT_LINE (223)).boolEnum () ;
      if (kBoolTrue == test_0) {
        result_allowsAuto = GALGAS_bool (false) ;
      }
    }else{
      result_allowsAuto = GALGAS_bool (false) ;
    }
  }
//---
  return result_allowsAuto ;
}


//-----------------------------------------------------------------------------*
//  Function introspection                                                   *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_attributeAllowsAuto [2] = {
  & kTypeDescriptor_GALGAS_impType,
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_attributeAllowsAuto (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_impType operand0 = GALGAS_impType::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_attributeAllowsAuto (operand0,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_attributeAllowsAuto ("attributeAllowsAuto",
                                                                     functionWithGenericHeader_attributeAllowsAuto,
                                                                     & kTypeDescriptor_GALGAS_bool,
                                                                     1,
                                                                     functionArgs_attributeAllowsAuto) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'verifyAllAttributes'                       *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_verifyAllAttributes (const GALGAS_implementation constinArgument_imp,
                                  const GALGAS_objectsMap constinArgument_objects,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_objectsMap enumerator_7187 (constinArgument_objects, kEnumeration_up) ;
  while (enumerator_7187.hasCurrentObject ()) {
    GALGAS_implementationObject var_impObj = callCategoryReader_impObject ((const cPtr_implementation *) constinArgument_imp.ptr (), enumerator_7187.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (241)), inCompiler COMMA_SOURCE_FILE_AT_LINE (241)) ;
    cEnumerator_objectKindMap enumerator_7349 (enumerator_7187.current_objectsOfKind (HERE).reader_objects (SOURCE_FILE_AT_LINE (243)), kEnumeration_up) ;
    while (enumerator_7349.hasCurrentObject ()) {
      cEnumerator_implementationObjectMap enumerator_7393 (var_impObj.reader_attributes (SOURCE_FILE_AT_LINE (244)), kEnumeration_up) ;
      while (enumerator_7393.hasCurrentObject ()) {
        const enumGalgasBool test_0 = enumerator_7349.current_attributes (HERE).reader_objectParams (SOURCE_FILE_AT_LINE (245)).reader_hasKey (enumerator_7393.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (245)) COMMA_SOURCE_FILE_AT_LINE (245)).boolEnum () ;
        if (kBoolTrue == test_0) {
          GALGAS_object_5F_t var_value ;
          enumerator_7349.current_attributes (HERE).reader_objectParams (SOURCE_FILE_AT_LINE (249)).method_get (enumerator_7393.current_lkey (HERE), var_value, inCompiler COMMA_SOURCE_FILE_AT_LINE (249)) ;
          if (var_value.isValid ()) {
            if (var_value.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_auto) {
              const enumGalgasBool test_1 = function_attributeAllowsAuto (enumerator_7393.current_type (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (253)).operator_not (SOURCE_FILE_AT_LINE (253)).boolEnum () ;
              if (kBoolTrue == test_1) {
                inCompiler->emitSemanticError (var_value.reader_location (SOURCE_FILE_AT_LINE (254)), GALGAS_string ("AUTO value is not allowed for the ").operator_concat (enumerator_7187.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (254)) COMMA_SOURCE_FILE_AT_LINE (254)).operator_concat (GALGAS_string (" attribute") COMMA_SOURCE_FILE_AT_LINE (254)) COMMA_SOURCE_FILE_AT_LINE (254)) ;
              }
            }
          }
        }else if (kBoolFalse == test_0) {
          const enumGalgasBool test_2 = function_attributeAllowsAuto (enumerator_7393.current_type (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (259)).operator_not (SOURCE_FILE_AT_LINE (259)).operator_and (enumerator_7393.current_type (HERE).reader_multiple (SOURCE_FILE_AT_LINE (259)).operator_not (SOURCE_FILE_AT_LINE (259)) COMMA_SOURCE_FILE_AT_LINE (259)).boolEnum () ;
          if (kBoolTrue == test_2) {
            GALGAS_location location_3 (enumerator_7349.current_lkey (HERE).reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_3, GALGAS_string ("In ").operator_concat (enumerator_7187.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)).operator_concat (GALGAS_string (" ") COMMA_SOURCE_FILE_AT_LINE (260)).operator_concat (enumerator_7349.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)).operator_concat (GALGAS_string (", attribute ") COMMA_SOURCE_FILE_AT_LINE (260)).operator_concat (enumerator_7393.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)).operator_concat (GALGAS_string (" is not defined and is not AUTO") COMMA_SOURCE_FILE_AT_LINE (260)) COMMA_SOURCE_FILE_AT_LINE (260)) ;
          }
        }
        if (enumerator_7393.current_type (HERE).isValid ()) {
          if (enumerator_7393.current_type (HERE).dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impAutoDefaultType) {
          }
        }
        enumerator_7393.gotoNextObject () ;
      }
      enumerator_7349.gotoNextObject () ;
    }
    enumerator_7187.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                            Routine 'verifyAll'                            *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_verifyAll (const GALGAS_implementation constinArgument_imp,
                        const GALGAS_applicationDefinition constinArgument_application,
                        C_Compiler * inCompiler
                        COMMA_UNUSED_LOCATION_ARGS) {
  {
  routine_verifyAllAttributes (constinArgument_imp, constinArgument_application.reader_objects (SOURCE_FILE_AT_LINE (583)), inCompiler COMMA_SOURCE_FILE_AT_LINE (583)) ;
  }
  callCategoryMethod_verifyApplication ((const cPtr_implementation *) constinArgument_imp.ptr (), constinArgument_application, inCompiler COMMA_SOURCE_FILE_AT_LINE (584)) ;
}


//-----------------------------------------------------------------------------*
//                                                                             *
//            Category method '@implementation verifyApplication'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_implementation_verifyApplication> gCategoryMethodTable_implementation_verifyApplication ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_verifyApplication (const PMSInt32 inClassIndex,
                                            categoryMethodSignature_implementation_verifyApplication inMethod) {
  gCategoryMethodTable_implementation_verifyApplication.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

void callCategoryMethod_verifyApplication (const cPtr_implementation * inObject,
                                           const GALGAS_applicationDefinition constin_appDef,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_implementation) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_implementation_verifyApplication f = NULL ;
    if (classIndex < gCategoryMethodTable_implementation_verifyApplication.count ()) {
      f = gCategoryMethodTable_implementation_verifyApplication (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_implementation_verifyApplication.count ()) {
           f = gCategoryMethodTable_implementation_verifyApplication (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_implementation_verifyApplication.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_appDef, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*

static void categoryMethod_implementation_verifyApplication (const cPtr_implementation * inObject,
                                                             const GALGAS_applicationDefinition constinArgument_appDef,
                                                             C_Compiler * inCompiler
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_implementation * object = inObject ;
  macroValidSharedObject (object, const cPtr_implementation) ;
  cEnumerator_implementationMap enumerator_905 (object->mAttribute_imp, kEnumeration_up) ;
  while (enumerator_905.hasCurrentObject ()) {
    const enumGalgasBool test_0 = constinArgument_appDef.reader_objects (SOURCE_FILE_AT_LINE (22)).reader_hasKey (enumerator_905.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (22)) COMMA_SOURCE_FILE_AT_LINE (22)).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_objectKind var_obj ;
      constinArgument_appDef.reader_objects (SOURCE_FILE_AT_LINE (24)).method_get (enumerator_905.current_lkey (HERE), var_obj, inCompiler COMMA_SOURCE_FILE_AT_LINE (24)) ;
      callCategoryMethod_verifyApplication ((const cPtr_implementationObject *) enumerator_905.current_obj (HERE).ptr (), var_obj, inCompiler COMMA_SOURCE_FILE_AT_LINE (25)) ;
    }
    enumerator_905.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_implementation_verifyApplication (void) {
  enterCategoryMethod_verifyApplication (kTypeDescriptor_GALGAS_implementation.mSlotID,
                                         categoryMethod_implementation_verifyApplication) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_implementation_verifyApplication (void) {
  gCategoryMethodTable_implementation_verifyApplication.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_implementation_verifyApplication (defineCategoryMethod_implementation_verifyApplication,
                                                             freeCategoryMethod_implementation_verifyApplication) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//         Category method '@implementationObject verifyApplication'         *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_implementationObject_verifyApplication> gCategoryMethodTable_implementationObject_verifyApplication ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_verifyApplication (const PMSInt32 inClassIndex,
                                            categoryMethodSignature_implementationObject_verifyApplication inMethod) {
  gCategoryMethodTable_implementationObject_verifyApplication.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

void callCategoryMethod_verifyApplication (const cPtr_implementationObject * inObject,
                                           const GALGAS_objectKind constin_objectsOfKind,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_implementationObject) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_implementationObject_verifyApplication f = NULL ;
    if (classIndex < gCategoryMethodTable_implementationObject_verifyApplication.count ()) {
      f = gCategoryMethodTable_implementationObject_verifyApplication (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_implementationObject_verifyApplication.count ()) {
           f = gCategoryMethodTable_implementationObject_verifyApplication (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_implementationObject_verifyApplication.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_objectsOfKind, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*

static void categoryMethod_implementationObject_verifyApplication (const cPtr_implementationObject * inObject,
                                                                   const GALGAS_objectKind constinArgument_objectsOfKind,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_implementationObject * object = inObject ;
  macroValidSharedObject (object, const cPtr_implementationObject) ;
  cEnumerator_objectKindMap enumerator_1311 (constinArgument_objectsOfKind.reader_objects (SOURCE_FILE_AT_LINE (34)), kEnumeration_up) ;
  while (enumerator_1311.hasCurrentObject ()) {
    cEnumerator_implementationObjectMap enumerator_1344 (object->mAttribute_attributes, kEnumeration_up) ;
    while (enumerator_1344.hasCurrentObject ()) {
      callCategoryMethod_verifyApplication ((const cPtr_impType *) enumerator_1344.current_type (HERE).ptr (), enumerator_1311.current_attributes (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (36)) ;
      enumerator_1344.gotoNextObject () ;
    }
    enumerator_1311.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_implementationObject_verifyApplication (void) {
  enterCategoryMethod_verifyApplication (kTypeDescriptor_GALGAS_implementationObject.mSlotID,
                                         categoryMethod_implementationObject_verifyApplication) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_implementationObject_verifyApplication (void) {
  gCategoryMethodTable_implementationObject_verifyApplication.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_implementationObject_verifyApplication (defineCategoryMethod_implementationObject_verifyApplication,
                                                                   freeCategoryMethod_implementationObject_verifyApplication) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//               Category method '@impType verifyApplication'                *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_impType_verifyApplication> gCategoryMethodTable_impType_verifyApplication ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_verifyApplication (const PMSInt32 inClassIndex,
                                            categoryMethodSignature_impType_verifyApplication inMethod) {
  gCategoryMethodTable_impType_verifyApplication.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

void callCategoryMethod_verifyApplication (const cPtr_impType * inObject,
                                           const GALGAS_objectAttributes constin_attrs,
                                           C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) {
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_impType) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_impType_verifyApplication f = NULL ;
    if (classIndex < gCategoryMethodTable_impType_verifyApplication.count ()) {
      f = gCategoryMethodTable_impType_verifyApplication (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_impType_verifyApplication.count ()) {
           f = gCategoryMethodTable_impType_verifyApplication (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_impType_verifyApplication.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_attrs, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*

static void categoryMethod_impType_verifyApplication (const cPtr_impType * inObject,
                                                      const GALGAS_objectAttributes constinArgument_attrs,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impType * object = inObject ;
  macroValidSharedObject (object, const cPtr_impType) ;
  cEnumerator_identifierMap enumerator_1613 (constinArgument_attrs.reader_objectParams (SOURCE_FILE_AT_LINE (45)), kEnumeration_up) ;
  while (enumerator_1613.hasCurrentObject ()) {
    const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, enumerator_1613.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (46)).objectCompare (object->mAttribute_name.reader_string (SOURCE_FILE_AT_LINE (46)))).boolEnum () ;
    if (kBoolTrue == test_0) {
      //--- @selfCopyInExpressionForGeneration
      const GALGAS_impType temp_1 = object ;
      callCategoryMethod_verifyMultipleType ((const cPtr_impType *) temp_1.ptr (), enumerator_1613.current_value (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (47)) ;
    }
    enumerator_1613.gotoNextObject () ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impType_verifyApplication (void) {
  enterCategoryMethod_verifyApplication (kTypeDescriptor_GALGAS_impType.mSlotID,
                                         categoryMethod_impType_verifyApplication) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_impType_verifyApplication (void) {
  gCategoryMethodTable_impType_verifyApplication.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impType_verifyApplication (defineCategoryMethod_impType_verifyApplication,
                                                      freeCategoryMethod_impType_verifyApplication) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                   Category method '@impType verifyType'                   *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_impType_verifyType> gCategoryMethodTable_impType_verifyType ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_verifyType (const PMSInt32 inClassIndex,
                                     categoryMethodSignature_impType_verifyType inMethod) {
  gCategoryMethodTable_impType_verifyType.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

void callCategoryMethod_verifyType (const cPtr_impType * inObject,
                                    const GALGAS_object_5F_t constin_attr,
                                    C_Compiler * inCompiler
                                    COMMA_LOCATION_ARGS) {
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_impType) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_impType_verifyType f = NULL ;
    if (classIndex < gCategoryMethodTable_impType_verifyType.count ()) {
      f = gCategoryMethodTable_impType_verifyType (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_impType_verifyType.count ()) {
           f = gCategoryMethodTable_impType_verifyType (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_impType_verifyType.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_attr, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*

static void categoryMethod_impType_verifyType (const cPtr_impType * /* inObject */,
                                               const GALGAS_object_5F_t constinArgument_attr,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (56)), GALGAS_string ("Internal error, a generic type should not be instantiated") COMMA_SOURCE_FILE_AT_LINE (56)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_impType.mSlotID,
                                  categoryMethod_impType_verifyType) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_impType_verifyType (void) {
  gCategoryMethodTable_impType_verifyType.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impType_verifyType (defineCategoryMethod_impType_verifyType,
                                               freeCategoryMethod_impType_verifyType) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//               Category method '@impType verifyMultipleType'               *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_impType_verifyMultipleType> gCategoryMethodTable_impType_verifyMultipleType ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_verifyMultipleType (const PMSInt32 inClassIndex,
                                             categoryMethodSignature_impType_verifyMultipleType inMethod) {
  gCategoryMethodTable_impType_verifyMultipleType.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

void callCategoryMethod_verifyMultipleType (const cPtr_impType * inObject,
                                            const GALGAS_object_5F_t constin_attr,
                                            C_Compiler * inCompiler
                                            COMMA_LOCATION_ARGS) {
  if (NULL != inObject) {
    macroValidSharedObject (inObject, const cPtr_impType) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const PMSInt32 classIndex = info->mSlotID ;
    categoryMethodSignature_impType_verifyMultipleType f = NULL ;
    if (classIndex < gCategoryMethodTable_impType_verifyMultipleType.count ()) {
      f = gCategoryMethodTable_impType_verifyMultipleType (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_impType_verifyMultipleType.count ()) {
           f = gCategoryMethodTable_impType_verifyMultipleType (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_impType_verifyMultipleType.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_attr, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*

static void categoryMethod_impType_verifyMultipleType (const cPtr_impType * inObject,
                                                       const GALGAS_object_5F_t constinArgument_attr,
                                                       C_Compiler * inCompiler
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impType * object = inObject ;
  macroValidSharedObject (object, const cPtr_impType) ;
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_multipleAttribute) {
      GALGAS_multipleAttribute cast_2146_ma ((cPtr_multipleAttribute *) constinArgument_attr.ptr ()) ;
      cEnumerator_identifierList enumerator_2171 (cast_2146_ma.reader_items (SOURCE_FILE_AT_LINE (65)), kEnumeration_up) ;
      while (enumerator_2171.hasCurrentObject ()) {
        //--- @selfCopyInExpressionForGeneration
        const GALGAS_impType temp_0 = object ;
        callCategoryMethod_verifyType ((const cPtr_impType *) temp_0.ptr (), enumerator_2171.current_item (HERE), inCompiler COMMA_SOURCE_FILE_AT_LINE (66)) ;
        enumerator_2171.gotoNextObject () ;
      }
    }else{
      //--- @selfCopyInExpressionForGeneration
      const GALGAS_impType temp_1 = object ;
      callCategoryMethod_verifyType ((const cPtr_impType *) temp_1.ptr (), constinArgument_attr, inCompiler COMMA_SOURCE_FILE_AT_LINE (69)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impType_verifyMultipleType (void) {
  enterCategoryMethod_verifyMultipleType (kTypeDescriptor_GALGAS_impType.mSlotID,
                                          categoryMethod_impType_verifyMultipleType) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_impType_verifyMultipleType (void) {
  gCategoryMethodTable_impType_verifyMultipleType.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impType_verifyMultipleType (defineCategoryMethod_impType_verifyMultipleType,
                                                       freeCategoryMethod_impType_verifyMultipleType) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//          Overriding category method '@impStructType verifyType'           *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_impStructType_verifyType (const cPtr_impType * inObject,
                                                     const GALGAS_object_5F_t constinArgument_attr,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impStructType * object = (const cPtr_impStructType *) inObject ;
  macroValidSharedObject (object, const cPtr_impStructType) ;
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_structAttribute) {
      GALGAS_structAttribute cast_2474_sa ((cPtr_structAttribute *) constinArgument_attr.ptr ()) ;
      cEnumerator_implementationObjectMap enumerator_2505 (object->mAttribute_structAttributes, kEnumeration_up) ;
      while (enumerator_2505.hasCurrentObject ()) {
        const enumGalgasBool test_0 = cast_2474_sa.reader_subAttributes (SOURCE_FILE_AT_LINE (80)).reader_objectParams (SOURCE_FILE_AT_LINE (80)).reader_hasKey (enumerator_2505.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (80)) COMMA_SOURCE_FILE_AT_LINE (80)).boolEnum () ;
        if (kBoolTrue == test_0) {
          GALGAS_object_5F_t var_subAttr ;
          cast_2474_sa.reader_subAttributes (SOURCE_FILE_AT_LINE (82)).reader_objectParams (SOURCE_FILE_AT_LINE (82)).method_get (enumerator_2505.current_lkey (HERE), var_subAttr, inCompiler COMMA_SOURCE_FILE_AT_LINE (82)) ;
          callCategoryMethod_verifyMultipleType ((const cPtr_impType *) enumerator_2505.current_type (HERE).ptr (), var_subAttr, inCompiler COMMA_SOURCE_FILE_AT_LINE (83)) ;
        }
        enumerator_2505.gotoNextObject () ;
      }
    }else{
      inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (87)), GALGAS_string ("STRUCT expected") COMMA_SOURCE_FILE_AT_LINE (87)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impStructType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_impStructType.mSlotID,
                                  categoryMethod_impStructType_verifyType) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impStructType_verifyType (defineCategoryMethod_impStructType_verifyType, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//             Overriding category method '@refType verifyType'              *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_refType_verifyType (const cPtr_impType * /* inObject */,
                                               const GALGAS_object_5F_t constinArgument_attr,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_string_5F_class) {
    }else{
      inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (98)), GALGAS_string ("object reference expected") COMMA_SOURCE_FILE_AT_LINE (98)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_refType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_refType.mSlotID,
                                  categoryMethod_refType_verifyType) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_refType_verifyType (defineCategoryMethod_refType_verifyType, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@impBoolType verifyType'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_impBoolType_verifyType (const cPtr_impType * inObject,
                                                   const GALGAS_object_5F_t constinArgument_attr,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impBoolType * object = (const cPtr_impBoolType *) inObject ;
  macroValidSharedObject (object, const cPtr_impBoolType) ;
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_boolAttribute) {
      GALGAS_boolAttribute cast_3266_b ((cPtr_boolAttribute *) constinArgument_attr.ptr ()) ;
      const enumGalgasBool test_0 = cast_3266_b.reader_value (SOURCE_FILE_AT_LINE (108)).boolEnum () ;
      if (kBoolTrue == test_0) {
        cEnumerator_implementationObjectMap enumerator_3322 (object->mAttribute_trueSubAttributes, kEnumeration_up) ;
        while (enumerator_3322.hasCurrentObject ()) {
          const enumGalgasBool test_1 = cast_3266_b.reader_subAttributes (SOURCE_FILE_AT_LINE (110)).reader_objectParams (SOURCE_FILE_AT_LINE (110)).reader_hasKey (enumerator_3322.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (110)) COMMA_SOURCE_FILE_AT_LINE (110)).boolEnum () ;
          if (kBoolTrue == test_1) {
            GALGAS_object_5F_t var_subAttrs ;
            cast_3266_b.reader_subAttributes (SOURCE_FILE_AT_LINE (112)).reader_objectParams (SOURCE_FILE_AT_LINE (112)).method_get (enumerator_3322.current_lkey (HERE), var_subAttrs, inCompiler COMMA_SOURCE_FILE_AT_LINE (112)) ;
            callCategoryMethod_verifyMultipleType ((const cPtr_impType *) enumerator_3322.current_type (HERE).ptr (), var_subAttrs, inCompiler COMMA_SOURCE_FILE_AT_LINE (113)) ;
          }
          enumerator_3322.gotoNextObject () ;
        }
      }else if (kBoolFalse == test_0) {
        cEnumerator_implementationObjectMap enumerator_3618 (object->mAttribute_falseSubAttributes, kEnumeration_up) ;
        while (enumerator_3618.hasCurrentObject ()) {
          const enumGalgasBool test_2 = cast_3266_b.reader_subAttributes (SOURCE_FILE_AT_LINE (118)).reader_objectParams (SOURCE_FILE_AT_LINE (118)).reader_hasKey (enumerator_3618.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (118)) COMMA_SOURCE_FILE_AT_LINE (118)).boolEnum () ;
          if (kBoolTrue == test_2) {
            GALGAS_object_5F_t var_subAttrs ;
            cast_3266_b.reader_subAttributes (SOURCE_FILE_AT_LINE (120)).reader_objectParams (SOURCE_FILE_AT_LINE (120)).method_get (enumerator_3618.current_lkey (HERE), var_subAttrs, inCompiler COMMA_SOURCE_FILE_AT_LINE (120)) ;
            callCategoryMethod_verifyMultipleType ((const cPtr_impType *) enumerator_3618.current_type (HERE).ptr (), var_subAttrs, inCompiler COMMA_SOURCE_FILE_AT_LINE (121)) ;
          }
          enumerator_3618.gotoNextObject () ;
        }
      }
    }else{
      inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (126)), GALGAS_string ("BOOLEAN expected") COMMA_SOURCE_FILE_AT_LINE (126)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impBoolType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_impBoolType.mSlotID,
                                  categoryMethod_impBoolType_verifyType) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impBoolType_verifyType (defineCategoryMethod_impBoolType_verifyType, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//           Overriding category method '@impEnumType verifyType'            *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_impEnumType_verifyType (const cPtr_impType * inObject,
                                                   const GALGAS_object_5F_t constinArgument_attr,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impEnumType * object = (const cPtr_impEnumType *) inObject ;
  macroValidSharedObject (object, const cPtr_impEnumType) ;
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_enumAttribute) {
      GALGAS_enumAttribute cast_4143_e ((cPtr_enumAttribute *) constinArgument_attr.ptr ()) ;
      const enumGalgasBool test_0 = object->mAttribute_valuesMap.reader_hasKey (cast_4143_e.reader_value (SOURCE_FILE_AT_LINE (136)) COMMA_SOURCE_FILE_AT_LINE (136)).boolEnum () ;
      if (kBoolTrue == test_0) {
        GALGAS_implementationObjectMap var_validVal ;
        object->mAttribute_valuesMap.method_get (function_lstringWith (cast_4143_e.reader_value (SOURCE_FILE_AT_LINE (138)), inCompiler COMMA_SOURCE_FILE_AT_LINE (138)), var_validVal, inCompiler COMMA_SOURCE_FILE_AT_LINE (138)) ;
        cEnumerator_implementationObjectMap enumerator_4309 (var_validVal, kEnumeration_up) ;
        while (enumerator_4309.hasCurrentObject ()) {
          const enumGalgasBool test_1 = cast_4143_e.reader_subAttributes (SOURCE_FILE_AT_LINE (140)).reader_objectParams (SOURCE_FILE_AT_LINE (140)).reader_hasKey (enumerator_4309.current_lkey (HERE).reader_string (SOURCE_FILE_AT_LINE (140)) COMMA_SOURCE_FILE_AT_LINE (140)).boolEnum () ;
          if (kBoolTrue == test_1) {
            GALGAS_object_5F_t var_subAttrs ;
            cast_4143_e.reader_subAttributes (SOURCE_FILE_AT_LINE (142)).reader_objectParams (SOURCE_FILE_AT_LINE (142)).method_get (enumerator_4309.current_lkey (HERE), var_subAttrs, inCompiler COMMA_SOURCE_FILE_AT_LINE (142)) ;
            callCategoryMethod_verifyMultipleType ((const cPtr_impType *) enumerator_4309.current_type (HERE).ptr (), var_subAttrs, inCompiler COMMA_SOURCE_FILE_AT_LINE (143)) ;
          }
          enumerator_4309.gotoNextObject () ;
        }
      }else if (kBoolFalse == test_0) {
        inCompiler->emitSemanticError (cast_4143_e.reader_location (SOURCE_FILE_AT_LINE (147)), cast_4143_e.reader_value (SOURCE_FILE_AT_LINE (147)).operator_concat (GALGAS_string (" is not a valid enum value") COMMA_SOURCE_FILE_AT_LINE (147)) COMMA_SOURCE_FILE_AT_LINE (147)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_auto) {
    }else{
      inCompiler->printMessage (GALGAS_string ("**** @impEnumType ****\n") COMMA_SOURCE_FILE_AT_LINE (151)) ;
      inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (152)), GALGAS_string ("ENUM expected") COMMA_SOURCE_FILE_AT_LINE (152)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impEnumType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_impEnumType.mSlotID,
                                  categoryMethod_impEnumType_verifyType) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impEnumType_verifyType (defineCategoryMethod_impEnumType_verifyType, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//        Overriding category method '@impAutoDefaultType verifyType'        *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_impAutoDefaultType_verifyType (const cPtr_impType * inObject,
                                                          const GALGAS_object_5F_t constinArgument_attr,
                                                          C_Compiler * inCompiler
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impAutoDefaultType * object = (const cPtr_impAutoDefaultType *) inObject ;
  macroValidSharedObject (object, const cPtr_impAutoDefaultType) ;
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_stringAttribute) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_string (SOURCE_FILE_AT_LINE (163)))).operator_and (GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_identifier (SOURCE_FILE_AT_LINE (163)))) COMMA_SOURCE_FILE_AT_LINE (163)).boolEnum () ;
      if (kBoolTrue == test_0) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (164)), GALGAS_string ("string of identifier expected") COMMA_SOURCE_FILE_AT_LINE (164)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_string_5F_class) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_identifier (SOURCE_FILE_AT_LINE (167)))).boolEnum () ;
      if (kBoolTrue == test_1) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (168)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (168)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (168)) COMMA_SOURCE_FILE_AT_LINE (168)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_auto) {
    }else{
      inCompiler->printMessage (GALGAS_string ("*** @impAutoDefaultType ***\n") COMMA_SOURCE_FILE_AT_LINE (172)) ;
      constinArgument_attr.log ("attr" COMMA_SOURCE_FILE_AT_LINE (173)) ;
      inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (174)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (174)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (174)) COMMA_SOURCE_FILE_AT_LINE (174)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impAutoDefaultType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_impAutoDefaultType.mSlotID,
                                  categoryMethod_impAutoDefaultType_verifyType) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impAutoDefaultType_verifyType (defineCategoryMethod_impAutoDefaultType_verifyType, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//          Overriding category method '@impRangedType verifyType'           *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_impRangedType_verifyType (const cPtr_impType * inObject,
                                                     const GALGAS_object_5F_t constinArgument_attr,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_impRangedType * object = (const cPtr_impRangedType *) inObject ;
  macroValidSharedObject (object, const cPtr_impRangedType) ;
  if (constinArgument_attr.isValid ()) {
    if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_uint_33__32__5F_class) {
      const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE_AT_LINE (185)))).boolEnum () ;
      if (kBoolTrue == test_0) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (186)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (186)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (186)) COMMA_SOURCE_FILE_AT_LINE (186)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_sint_33__32__5F_class) {
      const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_sint_33__32_Number (SOURCE_FILE_AT_LINE (189)))).boolEnum () ;
      if (kBoolTrue == test_1) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (190)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (190)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (190)) COMMA_SOURCE_FILE_AT_LINE (190)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_uint_36__34__5F_class) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE_AT_LINE (193)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (194)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (194)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (194)) COMMA_SOURCE_FILE_AT_LINE (194)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_sint_36__34__5F_class) {
      const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_sint_36__34_Number (SOURCE_FILE_AT_LINE (197)))).boolEnum () ;
      if (kBoolTrue == test_3) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (198)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (198)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (198)) COMMA_SOURCE_FILE_AT_LINE (198)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_float_5F_class) {
      const enumGalgasBool test_4 = GALGAS_bool (kIsNotEqual, object->mAttribute_type.objectCompare (GALGAS_dataType::constructor_floatNumber (SOURCE_FILE_AT_LINE (201)))).boolEnum () ;
      if (kBoolTrue == test_4) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (202)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (202)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (202)) COMMA_SOURCE_FILE_AT_LINE (202)) ;
      }
    }else if (constinArgument_attr.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_auto) {
      const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, object->mAttribute_withAuto.objectCompare (GALGAS_bool (false))).boolEnum () ;
      if (kBoolTrue == test_5) {
        inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (206)), GALGAS_string ("AUTO is not allowed for ").operator_concat (object->mAttribute_name.reader_string (SOURCE_FILE_AT_LINE (206)) COMMA_SOURCE_FILE_AT_LINE (206)).operator_concat (GALGAS_string (" attribute") COMMA_SOURCE_FILE_AT_LINE (206)) COMMA_SOURCE_FILE_AT_LINE (206)) ;
      }
    }else{
      inCompiler->emitSemanticError (constinArgument_attr.reader_location (SOURCE_FILE_AT_LINE (210)), categoryReader_oilType (object->mAttribute_type, inCompiler COMMA_SOURCE_FILE_AT_LINE (210)).operator_concat (GALGAS_string (" expected") COMMA_SOURCE_FILE_AT_LINE (210)) COMMA_SOURCE_FILE_AT_LINE (210)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_impRangedType_verifyType (void) {
  enterCategoryMethod_verifyType (kTypeDescriptor_GALGAS_impRangedType.mSlotID,
                                  categoryMethod_impRangedType_verifyType) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_impRangedType_verifyType (defineCategoryMethod_impRangedType_verifyType, NULL) ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


