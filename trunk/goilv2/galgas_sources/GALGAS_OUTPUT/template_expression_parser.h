//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        File 'template_expression_parser.h'                                          *
//                                             Generated by version 3.0.0                                              *
//                                          october 8th, 2014, at 15h59'46"                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef template_expression_parser_ENTITIES_DEFINED
#define template_expression_parser_ENTITIES_DEFINED

//---------------------------------------------------------------------------------------------------------------------*

#include "galgas2/predefined-types.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "template_scanner.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "template_invocation.h"
#include "goil_routines.h"
#include "goil_basic_types.h"
#include "template_semantics.h"
#include "systemConfig.h"
#include "implementation_types.h"
#include "goil_types_root.h"

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'matchAndOperatorForTemplate'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (const class GALGAS_Ttype constinArgument0,
                                          const class GALGAS_Ttype constinArgument1,
                                          class GALGAS_Ttype & outArgument2,
                                          class C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'matchOrOperatorForTemplate'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (const class GALGAS_Ttype constinArgument0,
                                         const class GALGAS_Ttype constinArgument1,
                                         class GALGAS_Ttype & outArgument2,
                                         class C_Compiler * inCompiler
                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'matchXorOperatorForTemplate'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (const class GALGAS_Ttype constinArgument0,
                                          const class GALGAS_Ttype constinArgument1,
                                          class GALGAS_Ttype & outArgument2,
                                          class C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'checkNotOperatorForTemplate'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (const class GALGAS_Ttype constinArgument0,
                                          class GALGAS_Ttype & outArgument1,
                                          class C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Routine 'checkBitComplementOperatorForTemplate'                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (const class GALGAS_Ttype constinArgument0,
                                                    class GALGAS_Ttype & outArgument1,
                                                    class C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Routine 'comparison_types_checkForTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_comparison_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                      const class GALGAS_Ttype constinArgument1,
                                                      class C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                Routine 'magnitude_comparison_types_checkForTemplate'                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_magnitude_5F_comparison_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                                   const class GALGAS_Ttype constinArgument1,
                                                                   class C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Routine 'left_shift_types_checkForTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_left_5F_shift_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                         const class GALGAS_Ttype constinArgument1,
                                                         class GALGAS_Ttype & outArgument2,
                                                         class C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Routine 'right_shift_types_checkForTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_right_5F_shift_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                          const class GALGAS_Ttype constinArgument1,
                                                          class GALGAS_Ttype & outArgument2,
                                                          class C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'addition_types_checkForTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addition_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                    const class GALGAS_Ttype constinArgument1,
                                                    class GALGAS_Ttype & outArgument2,
                                                    class C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Routine 'concatenation_types_checkForTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_concatenation_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                         const class GALGAS_Ttype constinArgument1,
                                                         class GALGAS_Ttype & outArgument2,
                                                         class C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Routine 'substraction_types_checkForTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_substraction_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                        const class GALGAS_Ttype constinArgument1,
                                                        class GALGAS_Ttype & outArgument2,
                                                        class C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'multiply_types_checkForTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_multiply_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                    const class GALGAS_Ttype constinArgument1,
                                                    class GALGAS_Ttype & outArgument2,
                                                    class C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'divide_types_checkForTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_divide_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                  const class GALGAS_Ttype constinArgument1,
                                                  class GALGAS_Ttype & outArgument2,
                                                  class C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'modulo_types_checkForTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_modulo_5F_types_5F_checkForTemplate (const class GALGAS_Ttype constinArgument0,
                                                  const class GALGAS_Ttype constinArgument1,
                                                  class GALGAS_Ttype & outArgument2,
                                                  class C_Compiler * inCompiler
                                                  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'argumentListSignature'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class GALGAS_string function_argumentListSignature (const class GALGAS_TexpressionList & constinArgument0,
                                                    class C_Compiler * inCompiler
                                                    COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'checkInvocationHasNoArgument'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (const class GALGAS_Ttype constinArgument0,
                                           const class GALGAS_lstring constinArgument1,
                                           const class GALGAS_TexpressionList constinArgument2,
                                           class C_Compiler * inCompiler
                                           COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'checkInvocationHasArguments'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkInvocationHasArguments (const class GALGAS_Ttype constinArgument0,
                                          const class GALGAS_lstring constinArgument1,
                                          const class GALGAS_TexpressionList constinArgument2,
                                          const class GALGAS_Ttype constinArgument3,
                                          const class GALGAS_uint constinArgument4,
                                          class C_Compiler * inCompiler
                                          COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Routine 'templateMethodInvocation'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_templateMethodInvocation (const class GALGAS_Ttype constinArgument0,
                                       const class GALGAS_Tvalue constinArgument1,
                                       const class GALGAS_lstring constinArgument2,
                                       class GALGAS_TexpressionList inArgument3,
                                       class GALGAS_Ttype & outArgument4,
                                       class GALGAS_Tvalue & outArgument5,
                                       class C_Compiler * inCompiler
                                       COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Routine 'typeError'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_typeError (const class GALGAS_lstring constinArgument0,
                        const class GALGAS_type constinArgument1,
                        const class GALGAS_string constinArgument2,
                        const class GALGAS_uint constinArgument3,
                        class C_Compiler * inCompiler
                        COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                Parser class 'template_expression_parser' declaration                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

class cParser_template_5F_expression_5F_parser {
//--- Virtual destructor
  public : virtual ~ cParser_template_5F_expression_5F_parser (void) {}

//--- Non terminal declarations
  protected : virtual void nt_expression_ (const class GALGAS_string constinArgument0,
                                           const class GALGAS_string constinArgument1,
                                           const class GALGAS_string constinArgument2,
                                           const class GALGAS_TfieldMap constinArgument3,
                                           class GALGAS_Tvalue & outArgument4,
                                           class GALGAS_Ttype & outArgument5,
                                           class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_expression_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_factor_ (const class GALGAS_string constinArgument0,
                                       const class GALGAS_string constinArgument1,
                                       const class GALGAS_string constinArgument2,
                                       const class GALGAS_TfieldMap constinArgument3,
                                       class GALGAS_Tvalue & outArgument4,
                                       class GALGAS_Ttype & outArgument5,
                                       class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_factor_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_relation_5F_factor_ (const class GALGAS_string constinArgument0,
                                                   const class GALGAS_string constinArgument1,
                                                   const class GALGAS_string constinArgument2,
                                                   const class GALGAS_TfieldMap constinArgument3,
                                                   class GALGAS_Tvalue & outArgument4,
                                                   class GALGAS_Ttype & outArgument5,
                                                   class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_relation_5F_factor_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_relation_5F_term_ (const class GALGAS_string constinArgument0,
                                                 const class GALGAS_string constinArgument1,
                                                 const class GALGAS_string constinArgument2,
                                                 const class GALGAS_TfieldMap constinArgument3,
                                                 class GALGAS_Tvalue & outArgument4,
                                                 class GALGAS_Ttype & outArgument5,
                                                 class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_relation_5F_term_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_simple_5F_expression_ (const class GALGAS_string constinArgument0,
                                                     const class GALGAS_string constinArgument1,
                                                     const class GALGAS_string constinArgument2,
                                                     const class GALGAS_TfieldMap constinArgument3,
                                                     class GALGAS_Tvalue & outArgument4,
                                                     class GALGAS_Ttype & outArgument5,
                                                     class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_simple_5F_expression_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_term_ (const class GALGAS_string constinArgument0,
                                     const class GALGAS_string constinArgument1,
                                     const class GALGAS_string constinArgument2,
                                     const class GALGAS_TfieldMap constinArgument3,
                                     class GALGAS_Tvalue & outArgument4,
                                     class GALGAS_Ttype & outArgument5,
                                     class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_term_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_variable_ (const class GALGAS_string constinArgument0,
                                         const class GALGAS_string constinArgument1,
                                         const class GALGAS_string constinArgument2,
                                         const class GALGAS_TfieldMap constinArgument3,
                                         class GALGAS_TvarPath & outArgument4,
                                         class C_Lexique_template_5F_scanner * inLexique) = 0 ;

  protected : virtual void nt_variable_parse (class C_Lexique_template_5F_scanner * inLexique) = 0 ;


//--- Rule declarations
  protected : void rule_template_5F_expression_5F_parser_expression_i0_ (const GALGAS_string constinArgument0,
                                                                         const GALGAS_string constinArgument1,
                                                                         const GALGAS_string constinArgument2,
                                                                         const GALGAS_TfieldMap constinArgument3,
                                                                         GALGAS_Tvalue & outArgument4,
                                                                         GALGAS_Ttype & outArgument5,
                                                                         C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_expression_i0_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_relation_5F_term_i1_ (const GALGAS_string constinArgument0,
                                                                               const GALGAS_string constinArgument1,
                                                                               const GALGAS_string constinArgument2,
                                                                               const GALGAS_TfieldMap constinArgument3,
                                                                               GALGAS_Tvalue & outArgument4,
                                                                               GALGAS_Ttype & outArgument5,
                                                                               C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_relation_5F_term_i1_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_relation_5F_factor_i2_ (const GALGAS_string constinArgument0,
                                                                                 const GALGAS_string constinArgument1,
                                                                                 const GALGAS_string constinArgument2,
                                                                                 const GALGAS_TfieldMap constinArgument3,
                                                                                 GALGAS_Tvalue & outArgument4,
                                                                                 GALGAS_Ttype & outArgument5,
                                                                                 C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_relation_5F_factor_i2_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_simple_5F_expression_i3_ (const GALGAS_string constinArgument0,
                                                                                   const GALGAS_string constinArgument1,
                                                                                   const GALGAS_string constinArgument2,
                                                                                   const GALGAS_TfieldMap constinArgument3,
                                                                                   GALGAS_Tvalue & outArgument4,
                                                                                   GALGAS_Ttype & outArgument5,
                                                                                   C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_simple_5F_expression_i3_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_term_i4_ (const GALGAS_string constinArgument0,
                                                                   const GALGAS_string constinArgument1,
                                                                   const GALGAS_string constinArgument2,
                                                                   const GALGAS_TfieldMap constinArgument3,
                                                                   GALGAS_Tvalue & outArgument4,
                                                                   GALGAS_Ttype & outArgument5,
                                                                   C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_term_i4_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i5_ (const GALGAS_string constinArgument0,
                                                                     const GALGAS_string constinArgument1,
                                                                     const GALGAS_string constinArgument2,
                                                                     const GALGAS_TfieldMap constinArgument3,
                                                                     GALGAS_Tvalue & outArgument4,
                                                                     GALGAS_Ttype & outArgument5,
                                                                     C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i5_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i6_ (const GALGAS_string constinArgument0,
                                                                     const GALGAS_string constinArgument1,
                                                                     const GALGAS_string constinArgument2,
                                                                     const GALGAS_TfieldMap constinArgument3,
                                                                     GALGAS_Tvalue & outArgument4,
                                                                     GALGAS_Ttype & outArgument5,
                                                                     C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i6_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i7_ (const GALGAS_string constinArgument0,
                                                                     const GALGAS_string constinArgument1,
                                                                     const GALGAS_string constinArgument2,
                                                                     const GALGAS_TfieldMap constinArgument3,
                                                                     GALGAS_Tvalue & outArgument4,
                                                                     GALGAS_Ttype & outArgument5,
                                                                     C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i7_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i8_ (const GALGAS_string constinArgument0,
                                                                     const GALGAS_string constinArgument1,
                                                                     const GALGAS_string constinArgument2,
                                                                     const GALGAS_TfieldMap constinArgument3,
                                                                     GALGAS_Tvalue & outArgument4,
                                                                     GALGAS_Ttype & outArgument5,
                                                                     C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i8_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i9_ (const GALGAS_string constinArgument0,
                                                                     const GALGAS_string constinArgument1,
                                                                     const GALGAS_string constinArgument2,
                                                                     const GALGAS_TfieldMap constinArgument3,
                                                                     GALGAS_Tvalue & outArgument4,
                                                                     GALGAS_Ttype & outArgument5,
                                                                     C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i9_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i10_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i10_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i11_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i11_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i12_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i12_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i13_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i13_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i14_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i14_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i15_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i15_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i16_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i16_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i17_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i17_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i18_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i18_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i19_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i19_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i20_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i20_parse (C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i21_ (const GALGAS_string constinArgument0,
                                                                      const GALGAS_string constinArgument1,
                                                                      const GALGAS_string constinArgument2,
                                                                      const GALGAS_TfieldMap constinArgument3,
                                                                      GALGAS_Tvalue & outArgument4,
                                                                      GALGAS_Ttype & outArgument5,
                                                                      C_Lexique_template_5F_scanner * inLexique) ;

  protected : void rule_template_5F_expression_5F_parser_factor_i21_parse (C_Lexique_template_5F_scanner * inLexique) ;



//--- Select methods
  protected : virtual int32_t select_template_5F_expression_5F_parser_0 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_1 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_2 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_3 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_4 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_5 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_6 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_7 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_8 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_9 (C_Lexique_template_5F_scanner *) = 0 ;

  protected : virtual int32_t select_template_5F_expression_5F_parser_10 (C_Lexique_template_5F_scanner *) = 0 ;


} ;

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

#endif
