//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               File 'goil_syntax.cpp'                                                *
//                                             Generated by version 3.0.0                                              *
//                                          october 8th, 2014, at 15h59'46"                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "goil_syntax.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "goil_options.h"
#include "template_grammar.h"
#include "goil_cpu_level_include.h"
#include "goil_file_level_include.h"

//---------------------------------------------------------------------------------------------------------------------*



//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_start_i0_ (C_Lexique_goil_5F_lexique * inCompiler) {
  GALGAS_implementation var_imp = GALGAS_implementation::constructor_new (GALGAS_implementationMap::constructor_emptyMap (SOURCE_FILE ("goil_syntax.gSyntax", 42))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 42)) ;
  GALGAS_applicationDefinition var_application = function_emptyApplicationDefinition (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 43)) ;
  GALGAS_lstring var_version ;
  GALGAS_lstring var_desc = function_lstringWith (GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 47)) ;
  nt_OIL_5F_version_ (var_version, var_desc, inCompiler) ;
  {
  var_application.modifier_setVersion (var_version COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 49)) ;
  }
  {
  var_application.modifier_setVersionDescription (var_desc COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 50)) ;
  }
  GALGAS_string var_config_5F_file_5F_name = GALGAS_string (gOption_goil_5F_options_config.reader_value ()) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_config_5F_file_5F_name.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_config_5F_file_5F_name = GALGAS_string ("config") ;
  }
  GALGAS_stringlist var_configFiles = function_allTemplateFilePaths (GALGAS_string ("config"), var_config_5F_file_5F_name.operator_concat (GALGAS_string (".oil")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 57)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 57)) ;
  cEnumerator_stringlist enumerator_1827 (var_configFiles, kEnumeration_down) ;
  while (enumerator_1827.hasCurrentObject ()) {
    cGrammar_goil_5F_file_5F_level_5F_include::_performSourceFileParsing_ (inCompiler, function_lstringWith (enumerator_1827.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 63)), var_imp, var_application  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 63)) ;
    enumerator_1827.gotoNextObject () ;
  }
  GALGAS_stringlist var_configVersionFiles = function_allTemplateFilePaths (GALGAS_string ("config"), var_config_5F_file_5F_name.operator_concat (var_version.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 67))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 67)).operator_concat (GALGAS_string (".oil")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 67)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 67)) ;
  cEnumerator_stringlist enumerator_2158 (var_configVersionFiles, kEnumeration_down) ;
  while (enumerator_2158.hasCurrentObject ()) {
    cGrammar_goil_5F_file_5F_level_5F_include::_performSourceFileParsing_ (inCompiler, function_lstringWith (enumerator_2158.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 70)), var_imp, var_application  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 70)) ;
    enumerator_2158.gotoNextObject () ;
  }
  nt_file_ (var_imp, var_application, inCompiler) ;
  callCategoryMethod_checkObjectReferences ((const cPtr_implementation *) var_imp.ptr (), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 88)) ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("goil_syntax.gSyntax", 90)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    {
    routine_setDefaults (var_imp, var_application, inCompiler  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 91)) ;
    }
  }
  const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("goil_syntax.gSyntax", 96)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_2) {
    {
    routine_verifyAll (var_imp, var_application, inCompiler  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 97)) ;
    }
  }
  const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("goil_syntax.gSyntax", 99)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_3) {
    GALGAS_TfieldMap var_templateData = callCategoryReader_templateData ((const cPtr_applicationDefinition *) var_application.ptr (), var_imp, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 100)) ;
    {
    routine_generate_5F_all (var_templateData, inCompiler  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 103)) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_start_i0_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_OIL_5F_version_parse (inCompiler) ;
  nt_file_parse (inCompiler) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_file_i1_ (GALGAS_implementation & ioArgument_imp,
                                                           GALGAS_applicationDefinition & ioArgument_application,
                                                           C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_goil_5F_syntax_0 (inCompiler)) {
    case 2: {
      nt_include_5F_file_5F_level_ (ioArgument_imp, ioArgument_application, inCompiler) ;
    } break ;
    case 3: {
      nt_implementation_5F_definition_ (ioArgument_imp, inCompiler) ;
    } break ;
    case 4: {
      nt_application_5F_definition_ (ioArgument_imp, ioArgument_application, inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_file_i1_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_goil_5F_syntax_0 (inCompiler)) {
    case 2: {
      nt_include_5F_file_5F_level_parse (inCompiler) ;
    } break ;
    case 3: {
      nt_implementation_5F_definition_parse (inCompiler) ;
    } break ;
    case 4: {
      nt_application_5F_definition_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_sign_i2_ (GALGAS_bool & outArgument_signed,
                                                           C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_signed.drop () ; // Release 'out' argument
  switch (select_goil_5F_syntax_1 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 118)) ;
    outArgument_signed = GALGAS_bool (true) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 120)) ;
    outArgument_signed = GALGAS_bool (false) ;
  } break ;
  case 3: {
    outArgument_signed = GALGAS_bool (false) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_sign_i2_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_goil_5F_syntax_1 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 118)) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 120)) ;
  } break ;
  case 3: {
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_description_i3_ (GALGAS_lstring & outArgument_desc,
                                                                  C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_desc.drop () ; // Release 'out' argument
  switch (select_goil_5F_syntax_2 (inCompiler)) {
  case 1: {
    outArgument_desc = function_lstringWith (GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 131)) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 133)) ;
    GALGAS_lstring var_partialString ;
    var_partialString = inCompiler->synthetizedAttribute_a_5F_string () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 135)) ;
    GALGAS_string var_result = var_partialString.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 136)) ;
    bool repeatFlag_0 = true ;
    while (repeatFlag_0) {
      switch (select_goil_5F_syntax_3 (inCompiler)) {
      case 2: {
        var_partialString = inCompiler->synthetizedAttribute_a_5F_string () ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 139)) ;
        GALGAS_string var_toappend = var_partialString.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 140)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_result.reader_rightSubString (GALGAS_uint ((uint32_t) 2U) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 141)).objectCompare (GALGAS_string ("\\n"))).boolEnum () ;
        if (kBoolTrue == test_1) {
          var_toappend = GALGAS_string (" ").operator_concat (var_toappend  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 142)) ;
        }
        var_result.dotAssign_operation (var_toappend  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 144)) ;
      } break ;
      default:
        repeatFlag_0 = false ;
        break ;
      }
    }
    outArgument_desc = GALGAS_lstring::constructor_new (var_result.reader_stringByReplacingStringByString (GALGAS_string ("\\n"), GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 146)), var_partialString.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 146))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 146)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_description_i3_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_goil_5F_syntax_2 (inCompiler)) {
  case 1: {
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3A_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 133)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 135)) ;
    bool repeatFlag_0 = true ;
    while (repeatFlag_0) {
      switch (select_goil_5F_syntax_3 (inCompiler)) {
      case 2: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 139)) ;
      } break ;
      default:
        repeatFlag_0 = false ;
        break ;
      }
    }
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_OIL_5F_version_i4_ (GALGAS_lstring & outArgument_version,
                                                                     GALGAS_lstring & outArgument_desc,
                                                                     C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_version.drop () ; // Release 'out' argument
  outArgument_desc.drop () ; // Release 'out' argument
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_OIL_5F_VERSION) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  outArgument_version = inCompiler->synthetizedAttribute_a_5F_string () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  nt_description_ (outArgument_desc, inCompiler) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_OIL_5F_version_i4_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_OIL_5F_VERSION) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  nt_description_parse (inCompiler) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 154)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_application_5F_definition_i5_ (const GALGAS_implementation constinArgument_imp,
                                                                                GALGAS_applicationDefinition & ioArgument_application,
                                                                                C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_CPU) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 161)) ;
  GALGAS_lstring var_cpuName = inCompiler->synthetizedAttribute_att_5F_token () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 161)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 161)) ;
  GALGAS_objectsMap var_objects = ioArgument_application.reader_objects (SOURCE_FILE ("goil_syntax.gSyntax", 162)) ;
  nt_object_5F_definition_5F_list_ (constinArgument_imp, var_objects, inCompiler) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 164)) ;
  GALGAS_lstring joker_4781_0 ; // Joker input parameter
  nt_description_ (joker_4781_0, inCompiler) ;
  joker_4781_0.drop () ; // Release temporary input variables (joker in source)
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 164)) ;
  {
  ioArgument_application.modifier_setName (var_cpuName COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 165)) ;
  }
  {
  ioArgument_application.modifier_setObjects (var_objects COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 166)) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_application_5F_definition_i5_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_CPU) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 161)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 161)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 161)) ;
  nt_object_5F_definition_5F_list_parse (inCompiler) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 164)) ;
  nt_description_parse (inCompiler) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 164)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_object_5F_definition_5F_list_i6_ (const GALGAS_implementation constinArgument_imp,
                                                                                   GALGAS_objectsMap & ioArgument_objects,
                                                                                   C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_goil_5F_syntax_4 (inCompiler)) {
    case 2: {
      GALGAS_lstring var_objectKind ;
      var_objectKind = inCompiler->synthetizedAttribute_att_5F_token () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 173)) ;
      GALGAS_implementationObject var_impObjOfKind = callCategoryReader_impObject ((const cPtr_implementation *) constinArgument_imp.ptr (), var_objectKind.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 174)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 174)) ;
      GALGAS_objectKind var_objectsForKind = GALGAS_objectKind::constructor_new (GALGAS_objectKindMap::constructor_emptyMap (SOURCE_FILE ("goil_syntax.gSyntax", 175))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 175)) ;
      const enumGalgasBool test_1 = ioArgument_objects.reader_hasKey (var_objectKind.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 176)) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 176)).boolEnum () ;
      if (kBoolTrue == test_1) {
        const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_impObjOfKind.reader_multiple (SOURCE_FILE ("goil_syntax.gSyntax", 180)).reader_bool (SOURCE_FILE ("goil_syntax.gSyntax", 180)).objectCompare (GALGAS_bool (false))).boolEnum () ;
        if (kBoolTrue == test_2) {
          inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("object ").operator_concat (var_objectKind.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 181))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 181)).operator_concat (GALGAS_string (" may not have multiple instance")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 181))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 181)) ;
        }
        {
        ioArgument_objects.modifier_del (var_objectKind, var_objectsForKind, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 183)) ;
        }
      }
      GALGAS_lstring var_objectName ;
      var_objectName = inCompiler->synthetizedAttribute_att_5F_token () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 186)) ;
      GALGAS_objectAttributes var_object = function_emptyObject (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 187)) ;
      GALGAS_objectKindMap var_objectsKind = var_objectsForKind.reader_objects (SOURCE_FILE ("goil_syntax.gSyntax", 188)) ;
      const enumGalgasBool test_3 = var_objectsKind.reader_hasKey (var_objectName.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 189)) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 189)).boolEnum () ;
      if (kBoolTrue == test_3) {
        {
        var_objectsKind.modifier_del (var_objectName, var_object, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 190)) ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 192)) ;
      nt_oil_5F_declaration_5F_list_ (var_impObjOfKind.reader_attributes (SOURCE_FILE ("goil_syntax.gSyntax", 193)), var_object, inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 194)) ;
      GALGAS_lstring var_oil_5F_desc ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 196)) ;
      GALGAS_identifierMap var_attributes = var_object.reader_objectParams (SOURCE_FILE ("goil_syntax.gSyntax", 197)) ;
      const enumGalgasBool test_4 = var_attributes.reader_hasKey (GALGAS_string ("NAME") COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 198)).operator_not (SOURCE_FILE ("goil_syntax.gSyntax", 198)).boolEnum () ;
      if (kBoolTrue == test_4) {
        {
        var_attributes.modifier_put (GALGAS_lstring::constructor_new (GALGAS_string ("NAME"), var_objectName.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 199))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 199)), GALGAS_stringAttribute::constructor_new (var_oil_5F_desc, var_objectName.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 199)), var_objectName.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 199))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 199)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 199)) ;
        }
        {
        var_object.modifier_setObjectParams (var_attributes COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 200)) ;
        }
      }
      {
      var_objectsKind.modifier_put (var_objectName, var_object, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 202)) ;
      }
      {
      var_objectsForKind.modifier_setObjects (var_objectsKind COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 203)) ;
      }
      {
      ioArgument_objects.modifier_put (var_objectKind, var_objectsForKind, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 204)) ;
      }
    } break ;
    case 3: {
      nt_include_5F_cpu_5F_level_ (constinArgument_imp, ioArgument_objects, inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_object_5F_definition_5F_list_i6_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_goil_5F_syntax_4 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 173)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 186)) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 192)) ;
      nt_oil_5F_declaration_5F_list_parse (inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 194)) ;
      nt_description_parse (inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 196)) ;
    } break ;
    case 3: {
      nt_include_5F_cpu_5F_level_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_boolean_i7_ (GALGAS_lbool & outArgument_val,
                                                              C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_val.drop () ; // Release 'out' argument
  switch (select_goil_5F_syntax_5 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 214)) ;
    outArgument_val = GALGAS_lbool::constructor_new (GALGAS_bool (true), inCompiler->here ()  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 215)) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 217)) ;
    outArgument_val = GALGAS_lbool::constructor_new (GALGAS_bool (false), inCompiler->here ()  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 218)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_boolean_i7_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_goil_5F_syntax_5 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 214)) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 217)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_oil_5F_declaration_5F_list_i8_ (const GALGAS_implementationObjectMap constinArgument_types,
                                                                                 GALGAS_objectAttributes & ioArgument_identifiers,
                                                                                 C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_goil_5F_syntax_6 (inCompiler)) {
    case 2: {
      nt_oil_5F_declaration_ (constinArgument_types, ioArgument_identifiers, inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_oil_5F_declaration_5F_list_i8_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_goil_5F_syntax_6 (inCompiler)) {
    case 2: {
      nt_oil_5F_declaration_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_oil_5F_declaration_i9_ (const GALGAS_implementationObjectMap constinArgument_types,
                                                                         GALGAS_objectAttributes & ioArgument_identifiers,
                                                                         C_Lexique_goil_5F_lexique * inCompiler) {
  GALGAS_lstring var_idf ;
  GALGAS_object_5F_t var_val ;
  var_idf = inCompiler->synthetizedAttribute_att_5F_token () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 238)) ;
  GALGAS_impType var_type = GALGAS_impVoid::constructor_new (inCompiler->here (), GALGAS_dataType::constructor_void (SOURCE_FILE ("goil_syntax.gSyntax", 242)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 242)), GALGAS_bool (false), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 242))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 242)) ;
  GALGAS_bool var_typeOk = GALGAS_bool (false) ;
  const enumGalgasBool test_0 = constinArgument_types.reader_hasKey (var_idf.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 244)) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 244)).boolEnum () ;
  if (kBoolTrue == test_0) {
    constinArgument_types.method_get (var_idf, var_type, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 245)) ;
    var_typeOk = GALGAS_bool (true) ;
  }else if (kBoolFalse == test_0) {
    GALGAS_location location_1 (var_idf.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, var_idf.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 248)).operator_concat (GALGAS_string (" is not declared in the IMPLEMENTATION")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 248))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 248)) ;
  }
  switch (select_goil_5F_syntax_7 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 251)) ;
    switch (select_goil_5F_syntax_8 (inCompiler)) {
    case 1: {
      GALGAS_lstring var_value ;
      var_value = inCompiler->synthetizedAttribute_att_5F_token () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 255)) ;
      GALGAS_implementationObjectMap var_subTypes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("goil_syntax.gSyntax", 256)) ;
      GALGAS_objectAttributes var_subAttributes = function_emptyObject (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 257)) ;
      if (var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 258)).isValid ()) {
        switch (var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 258)).enumValue ()) {
        case GALGAS_dataType::kNotBuilt:
          break ;
        case GALGAS_dataType::kEnum_enumeration: {
          if (var_type.isValid ()) {
            if (var_type.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impEnumType) {
              GALGAS_impEnumType cast_7868_enumType ((cPtr_impEnumType *) var_type.ptr ()) ;
              const enumGalgasBool test_2 = cast_7868_enumType.reader_valuesMap (SOURCE_FILE ("goil_syntax.gSyntax", 262)).reader_hasKey (var_value.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 262)) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 262)).boolEnum () ;
              if (kBoolTrue == test_2) {
                cast_7868_enumType.reader_valuesMap (SOURCE_FILE ("goil_syntax.gSyntax", 263)).method_get (var_value, var_subTypes, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 263)) ;
              }else if (kBoolFalse == test_2) {
                GALGAS_location location_3 (var_value.reader_location (HERE)) ; // Implicit use of 'location' reader
                inCompiler->emitSemanticError (location_3, var_value.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 265)).operator_concat (GALGAS_string (" ENUM value undeclared. One of the following values are expected: ")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 265)).operator_concat (function_valueList (cast_7868_enumType.reader_valuesMap (SOURCE_FILE ("goil_syntax.gSyntax", 265)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 265))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 265))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 265)) ;
              }
            }
          }
          } break ;
        case GALGAS_dataType::kEnum_identifier: {
          } break ;
        case GALGAS_dataType::kEnum_objectType: {
          } break ;
        case GALGAS_dataType::kEnum_void: case GALGAS_dataType::kEnum_uint_33__32_Number: case GALGAS_dataType::kEnum_sint_33__32_Number: case GALGAS_dataType::kEnum_uint_36__34_Number: case GALGAS_dataType::kEnum_sint_36__34_Number: case GALGAS_dataType::kEnum_floatNumber: case GALGAS_dataType::kEnum_string: case GALGAS_dataType::kEnum_structType: case GALGAS_dataType::kEnum_boolean: {
          GALGAS_location location_4 (var_idf.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_4, var_idf.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 271)).operator_concat (GALGAS_string (" is not an ENUM nor and IDENTIFIER nor an object reference")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 271))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 271)) ;
          } break ;
        }
      }
      switch (select_goil_5F_syntax_9 (inCompiler)) {
      case 1: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 274)) ;
        nt_oil_5F_declaration_5F_list_ (var_subTypes, var_subAttributes, inCompiler) ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 276)) ;
      } break ;
      case 2: {
      } break ;
      default:
        break ;
      }
      GALGAS_lstring var_oil_5F_desc ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 279)).objectCompare (GALGAS_dataType::constructor_enumeration (SOURCE_FILE ("goil_syntax.gSyntax", 279)))).boolEnum () ;
      if (kBoolTrue == test_5) {
        var_val = GALGAS_enumAttribute::constructor_new (var_oil_5F_desc, var_value.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 280)), var_value.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 280)), var_subAttributes  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 280)) ;
      }else if (kBoolFalse == test_5) {
        var_val = GALGAS_string_5F_class::constructor_new (var_oil_5F_desc, var_value.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 282)), var_value.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 282))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 282)) ;
      }
    } break ;
    case 2: {
      GALGAS_bool var_sign ;
      nt_sign_ (var_sign, inCompiler) ;
      switch (select_goil_5F_syntax_10 (inCompiler)) {
      case 1: {
        GALGAS_luint_36__34_ var_value ;
        var_value = inCompiler->synthetizedAttribute_integerNumber () ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 291)) ;
        GALGAS_lstring var_oil_5F_desc ;
        nt_description_ (var_oil_5F_desc, inCompiler) ;
        var_val = function_checkAndGetIntegerNumber (var_oil_5F_desc, var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 293)), var_value, var_sign, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 293)) ;
      } break ;
      case 2: {
        GALGAS_ldouble var_value ;
        var_value = inCompiler->synthetizedAttribute_floatNumber () ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 297)) ;
        GALGAS_lstring var_oil_5F_desc ;
        nt_description_ (var_oil_5F_desc, inCompiler) ;
        var_val = function_checkAndGetFloatNumber (var_oil_5F_desc, var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 299)), var_value, var_sign, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 299)) ;
      } break ;
      default:
        break ;
      }
    } break ;
    case 3: {
      GALGAS_lbool var_value ;
      nt_boolean_ (var_value, inCompiler) ;
      GALGAS_implementationObjectMap var_subTypes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("goil_syntax.gSyntax", 305)) ;
      GALGAS_objectAttributes var_subAttributes = function_emptyObject (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 306)) ;
      const enumGalgasBool test_6 = GALGAS_bool (kIsNotEqual, var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 307)).objectCompare (GALGAS_dataType::constructor_boolean (SOURCE_FILE ("goil_syntax.gSyntax", 307)))).boolEnum () ;
      if (kBoolTrue == test_6) {
        GALGAS_location location_7 (var_idf.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_7, categoryReader_oilType (var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 308)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 308)).operator_concat (GALGAS_string (" expected, got a BOOLEAN")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 308))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 308)) ;
      }else if (kBoolFalse == test_6) {
        if (var_type.isValid ()) {
          if (var_type.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impBoolType) {
            GALGAS_impBoolType cast_9753_boolType ((cPtr_impBoolType *) var_type.ptr ()) ;
            const enumGalgasBool test_8 = var_value.reader_bool (SOURCE_FILE ("goil_syntax.gSyntax", 312)).boolEnum () ;
            if (kBoolTrue == test_8) {
              var_subTypes = cast_9753_boolType.reader_trueSubAttributes (SOURCE_FILE ("goil_syntax.gSyntax", 313)) ;
            }else if (kBoolFalse == test_8) {
              var_subTypes = cast_9753_boolType.reader_falseSubAttributes (SOURCE_FILE ("goil_syntax.gSyntax", 315)) ;
            }
          }
        }
      }
      switch (select_goil_5F_syntax_11 (inCompiler)) {
      case 1: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 320)) ;
        const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, var_subTypes.reader_count (SOURCE_FILE ("goil_syntax.gSyntax", 321)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_9) {
          GALGAS_location location_10 (var_value.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_10, function_stringLBool (var_value, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 322)).operator_concat (GALGAS_string (" value of ")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 322)).operator_concat (var_idf.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 322))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 322)).operator_concat (GALGAS_string (" has no sub-attribute")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 322))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 322)) ;
        }
        nt_oil_5F_declaration_5F_list_ (var_subTypes, var_subAttributes, inCompiler) ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 325)) ;
      } break ;
      case 2: {
      } break ;
      default:
        break ;
      }
      GALGAS_lstring var_oil_5F_desc ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_val = GALGAS_boolAttribute::constructor_new (var_oil_5F_desc, var_idf.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 328)), var_value.reader_bool (SOURCE_FILE ("goil_syntax.gSyntax", 328)), var_subAttributes  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 328)) ;
    } break ;
    case 4: {
      GALGAS_lstring var_literalString ;
      var_literalString = inCompiler->synthetizedAttribute_a_5F_string () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 332)) ;
      GALGAS_lstring var_oil_5F_desc ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_val = GALGAS_stringAttribute::constructor_new (var_oil_5F_desc, var_literalString.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 334)), var_literalString.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 334))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 334)) ;
    } break ;
    case 5: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 337)) ;
      GALGAS_lstring var_oil_5F_desc ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      const enumGalgasBool test_11 = callCategoryReader_autoAllowed ((const cPtr_impType *) var_type.ptr (), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 340)).boolEnum () ;
      if (kBoolTrue == test_11) {
        var_val = GALGAS_auto::constructor_new (var_oil_5F_desc, inCompiler->here ()  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 341)) ;
      }else if (kBoolFalse == test_11) {
        inCompiler->emitSemanticError (inCompiler->here (), GALGAS_string ("AUTO is not allowed")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 356)) ;
        var_val.drop () ; // Release error dropped variable
      }
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    GALGAS_lstring var_name = inCompiler->synthetizedAttribute_att_5F_token () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 360)) ;
    GALGAS_implementationObjectMap var_subTypes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("goil_syntax.gSyntax", 361)) ;
    GALGAS_objectAttributes var_subAttributes = function_emptyObject (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 362)) ;
    const enumGalgasBool test_12 = GALGAS_bool (kIsNotEqual, var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 364)).objectCompare (GALGAS_dataType::constructor_structType (SOURCE_FILE ("goil_syntax.gSyntax", 364)))).boolEnum () ;
    if (kBoolTrue == test_12) {
      GALGAS_location location_13 (var_idf.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_13, categoryReader_oilType (var_type.reader_type (SOURCE_FILE ("goil_syntax.gSyntax", 365)), inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 365)).operator_concat (GALGAS_string (" expected, got a STRUCT")  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 365))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 365)) ;
    }else if (kBoolFalse == test_12) {
      if (var_type.isValid ()) {
        if (var_type.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impStructType) {
          GALGAS_impStructType cast_11797_structType ((cPtr_impStructType *) var_type.ptr ()) ;
          var_subTypes = cast_11797_structType.reader_structAttributes (SOURCE_FILE ("goil_syntax.gSyntax", 369)) ;
        }
      }
    }
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 372)) ;
    nt_oil_5F_declaration_5F_list_ (var_subTypes, var_subAttributes, inCompiler) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 374)) ;
    GALGAS_lstring var_oil_5F_desc ;
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_val = GALGAS_structAttribute::constructor_new (var_oil_5F_desc, inCompiler->here (), var_name, var_subAttributes  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 376)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 378)) ;
  GALGAS_identifierMap var_idfs = ioArgument_identifiers.reader_objectParams (SOURCE_FILE ("goil_syntax.gSyntax", 381)) ;
  const enumGalgasBool test_14 = var_type.reader_multiple (SOURCE_FILE ("goil_syntax.gSyntax", 382)).boolEnum () ;
  if (kBoolTrue == test_14) {
    const enumGalgasBool test_15 = var_idfs.reader_hasKey (var_idf.reader_string (SOURCE_FILE ("goil_syntax.gSyntax", 383)) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 383)).boolEnum () ;
    if (kBoolTrue == test_15) {
      GALGAS_object_5F_t var_attributeList ;
      {
      var_idfs.modifier_del (var_idf, var_attributeList, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 387)) ;
      }
      if (var_attributeList.isValid ()) {
        if (var_attributeList.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_multipleAttribute) {
          GALGAS_multipleAttribute cast_12466_multiAttribute ((cPtr_multipleAttribute *) var_attributeList.ptr ()) ;
          GALGAS_identifierList var_aList = cast_12466_multiAttribute.reader_items (SOURCE_FILE ("goil_syntax.gSyntax", 390)) ;
          var_aList.addAssign_operation (var_val  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 391)) ;
          var_val = GALGAS_multipleAttribute::constructor_new (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 392)), cast_12466_multiAttribute.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 392)), var_aList  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 392)) ;
        }
      }
    }else if (kBoolFalse == test_15) {
      var_val = GALGAS_multipleAttribute::constructor_new (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 395)), var_val.reader_location (SOURCE_FILE ("goil_syntax.gSyntax", 395)), GALGAS_identifierList::constructor_listWithValue (var_val  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 395))  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 395)) ;
    }
  }
  const enumGalgasBool test_16 = var_typeOk.boolEnum () ;
  if (kBoolTrue == test_16) {
    {
    var_idfs.modifier_put (var_idf, var_val, inCompiler COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 399)) ;
    }
  }
  {
  ioArgument_identifiers.modifier_setObjectParams (var_idfs COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 401)) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_oil_5F_declaration_i9_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 238)) ;
  switch (select_goil_5F_syntax_7 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 251)) ;
    switch (select_goil_5F_syntax_8 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 255)) ;
      switch (select_goil_5F_syntax_9 (inCompiler)) {
      case 1: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 274)) ;
        nt_oil_5F_declaration_5F_list_parse (inCompiler) ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 276)) ;
      } break ;
      case 2: {
      } break ;
      default:
        break ;
      }
      nt_description_parse (inCompiler) ;
    } break ;
    case 2: {
      nt_sign_parse (inCompiler) ;
      switch (select_goil_5F_syntax_10 (inCompiler)) {
      case 1: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 291)) ;
        nt_description_parse (inCompiler) ;
      } break ;
      case 2: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 297)) ;
        nt_description_parse (inCompiler) ;
      } break ;
      default:
        break ;
      }
    } break ;
    case 3: {
      nt_boolean_parse (inCompiler) ;
      switch (select_goil_5F_syntax_11 (inCompiler)) {
      case 1: {
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 320)) ;
        nt_oil_5F_declaration_5F_list_parse (inCompiler) ;
        inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 325)) ;
      } break ;
      case 2: {
      } break ;
      default:
        break ;
      }
      nt_description_parse (inCompiler) ;
    } break ;
    case 4: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 332)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 5: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 337)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 360)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 372)) ;
    nt_oil_5F_declaration_5F_list_parse (inCompiler) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 374)) ;
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 378)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_include_5F_file_5F_level_i10_ (GALGAS_implementation & ioArgument_imp,
                                                                                GALGAS_applicationDefinition & ioArgument_application,
                                                                                C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 405)) ;
  GALGAS_lstring var_file_5F_name ;
  switch (select_goil_5F_syntax_12 (inCompiler)) {
  case 1: {
    var_file_5F_name = inCompiler->synthetizedAttribute_a_5F_string () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 408)) ;
    {
    routine_file_5F_in_5F_path (var_file_5F_name, inCompiler  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 409)) ;
    }
  } break ;
  case 2: {
    var_file_5F_name = inCompiler->synthetizedAttribute_a_5F_string () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 411)) ;
  } break ;
  default:
    break ;
  }
  cGrammar_goil_5F_file_5F_level_5F_include::_performSourceFileParsing_ (inCompiler, var_file_5F_name, ioArgument_imp, ioArgument_application  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 413)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_include_5F_file_5F_level_i10_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 405)) ;
  switch (select_goil_5F_syntax_12 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 408)) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 411)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_include_5F_cpu_5F_level_i11_ (const GALGAS_implementation constinArgument_imp,
                                                                               GALGAS_objectsMap & ioArgument_objects,
                                                                               C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 417)) ;
  GALGAS_lstring var_file_5F_name ;
  switch (select_goil_5F_syntax_13 (inCompiler)) {
  case 1: {
    var_file_5F_name = inCompiler->synthetizedAttribute_a_5F_string () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 420)) ;
    {
    routine_file_5F_in_5F_path (var_file_5F_name, inCompiler  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 421)) ;
    }
  } break ;
  case 2: {
    var_file_5F_name = inCompiler->synthetizedAttribute_a_5F_string () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 423)) ;
  } break ;
  default:
    break ;
  }
  cGrammar_goil_5F_cpu_5F_level_5F_include::_performSourceFileParsing_ (inCompiler, var_file_5F_name, constinArgument_imp, ioArgument_objects  COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 425)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_goil_5F_syntax::rule_goil_5F_syntax_include_5F_cpu_5F_level_i11_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 417)) ;
  switch (select_goil_5F_syntax_13 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 420)) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("goil_syntax.gSyntax", 423)) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


