#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------------------------------------------------*

#include "all-declarations-1.h"


//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   L L ( 1 )    P R O D U C T I O N    R U L E S                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const int16_t gProductions_template_grammar [] = {
// At index 0 : <goil_template_start_symbol>, in file 'template_parser.ggs', line 584
  NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 2 : <template_instruction>, in file 'template_parser.ggs', line 80
, TERMINAL (C_Lexique_template_5F_scanner::kToken__21_) // $!$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 5 : <template_instruction>, in file 'template_parser.ggs', line 127
, TERMINAL (C_Lexique_template_5F_scanner::kToken_write) // $write$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_to) // $to$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) // $:$
, NONTERMINAL (6) // <template_instruction_list>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_write) // $write$
, END_PRODUCTION
// At index 13 : <template_instruction>, in file 'template_parser.ggs', line 203
, TERMINAL (C_Lexique_template_5F_scanner::kToken_template) // $template$
, NONTERMINAL (14) // <select_template_5F_parser_1>
, END_PRODUCTION
// At index 16 : <template_instruction>, in file 'template_parser.ggs', line 278
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3F_) // $?$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 19 : <template_instruction>, in file 'template_parser.ggs', line 311
, TERMINAL (C_Lexique_template_5F_scanner::kToken_function) // $function$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) // $($
, NONTERMINAL (18) // <select_template_5F_parser_5>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) // $)$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_functionContent) // $functionContent$
, END_PRODUCTION
// At index 26 : <template_instruction>, in file 'template_parser.ggs', line 344
, TERMINAL (C_Lexique_template_5F_scanner::kToken_call) // $call$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) // $($
, NONTERMINAL (20) // <select_template_5F_parser_7>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) // $)$
, END_PRODUCTION
// At index 32 : <template_instruction>, in file 'template_parser.ggs', line 411
, TERMINAL (C_Lexique_template_5F_scanner::kToken_return) // $return$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 35 : <template_instruction>, in file 'template_parser.ggs', line 476
, TERMINAL (C_Lexique_template_5F_scanner::kToken_if) // $if$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_then) // $then$
, NONTERMINAL (6) // <template_instruction_list>
, NONTERMINAL (22) // <select_template_5F_parser_9>
, NONTERMINAL (23) // <select_template_5F_parser_10>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_if) // $if$
, END_PRODUCTION
// At index 44 : <template_instruction>, in file 'template_parser.ggs', line 604
, TERMINAL (C_Lexique_template_5F_scanner::kToken_foreach) // $foreach$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_in) // $in$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (25) // <select_template_5F_parser_12>
, NONTERMINAL (26) // <select_template_5F_parser_13>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_do) // $do$
, NONTERMINAL (6) // <template_instruction_list>
, NONTERMINAL (27) // <select_template_5F_parser_14>
, NONTERMINAL (28) // <select_template_5F_parser_15>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_foreach) // $foreach$
, END_PRODUCTION
// At index 57 : <template_instruction>, in file 'template_parser.ggs', line 741
, TERMINAL (C_Lexique_template_5F_scanner::kToken_for) // $for$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_in) // $in$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (29) // <select_template_5F_parser_16>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_do) // $do$
, NONTERMINAL (6) // <template_instruction_list>
, NONTERMINAL (30) // <select_template_5F_parser_17>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_for) // $for$
, END_PRODUCTION
// At index 68 : <template_instruction>, in file 'template_parser.ggs', line 831
, TERMINAL (C_Lexique_template_5F_scanner::kToken_loop) // $loop$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_from) // $from$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_to) // $to$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (31) // <select_template_5F_parser_18>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_do) // $do$
, NONTERMINAL (6) // <template_instruction_list>
, NONTERMINAL (32) // <select_template_5F_parser_19>
, NONTERMINAL (33) // <select_template_5F_parser_20>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_loop) // $loop$
, END_PRODUCTION
// At index 82 : <template_instruction>, in file 'template_parser.ggs', line 970
, TERMINAL (C_Lexique_template_5F_scanner::kToken_let) // $let$
, NONTERMINAL (3) // <variable>
, NONTERMINAL (34) // <select_template_5F_parser_21>
, END_PRODUCTION
// At index 86 : <template_instruction>, in file 'template_parser.ggs', line 1068
, TERMINAL (C_Lexique_template_5F_scanner::kToken_error) // $error$
, NONTERMINAL (4) // <variable_or_here>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) // $:$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 91 : <template_instruction>, in file 'template_parser.ggs', line 1100
, TERMINAL (C_Lexique_template_5F_scanner::kToken_warning) // $warning$
, NONTERMINAL (4) // <variable_or_here>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) // $:$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 96 : <template_instruction>, in file 'template_parser.ggs', line 1130
, TERMINAL (C_Lexique_template_5F_scanner::kToken_display) // $display$
, NONTERMINAL (3) // <variable>
, END_PRODUCTION
// At index 99 : <template_instruction>, in file 'template_parser.ggs', line 1162
, TERMINAL (C_Lexique_template_5F_scanner::kToken_sort) // $sort$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_by) // $by$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (2) // <sorting_order>
, NONTERMINAL (37) // <select_template_5F_parser_24>
, END_PRODUCTION
// At index 106 : <sorting_order>, in file 'template_parser.ggs', line 1151
, NONTERMINAL (36) // <select_template_5F_parser_23>
, END_PRODUCTION
// At index 108 : <variable>, in file 'template_parser.ggs', line 1204
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (38) // <select_template_5F_parser_25>
, NONTERMINAL (39) // <select_template_5F_parser_26>
, END_PRODUCTION
// At index 112 : <variable_or_here>, in file 'template_parser.ggs', line 1048
, NONTERMINAL (35) // <select_template_5F_parser_22>
, END_PRODUCTION
// At index 114 : <expression>, in file 'template_expression_parser.ggs', line 89
, NONTERMINAL (8) // <relation_term>
, NONTERMINAL (41) // <select_template_5F_expression_5F_parser_0>
, END_PRODUCTION
// At index 117 : <template_instruction_list>, in file 'template_parser.ggs', line 555
, NONTERMINAL (24) // <select_template_5F_parser_11>
, END_PRODUCTION
// At index 119 : <template_file_name>, in file 'template_parser.ggs', line 181
, NONTERMINAL (13) // <select_template_5F_parser_0>
, END_PRODUCTION
// At index 121 : <relation_term>, in file 'template_expression_parser.ggs', line 151
, NONTERMINAL (9) // <relation_factor>
, NONTERMINAL (42) // <select_template_5F_expression_5F_parser_1>
, END_PRODUCTION
// At index 124 : <relation_factor>, in file 'template_expression_parser.ggs', line 194
, NONTERMINAL (10) // <simple_expression>
, NONTERMINAL (43) // <select_template_5F_expression_5F_parser_2>
, END_PRODUCTION
// At index 127 : <simple_expression>, in file 'template_expression_parser.ggs', line 400
, NONTERMINAL (11) // <term>
, NONTERMINAL (44) // <select_template_5F_expression_5F_parser_3>
, END_PRODUCTION
// At index 130 : <term>, in file 'template_expression_parser.ggs', line 503
, NONTERMINAL (12) // <factor>
, NONTERMINAL (45) // <select_template_5F_expression_5F_parser_4>
, END_PRODUCTION
// At index 133 : <factor>, in file 'template_expression_parser.ggs', line 575
, TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) // $($
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) // $)$
, END_PRODUCTION
// At index 137 : <factor>, in file 'template_expression_parser.ggs', line 599
, TERMINAL (C_Lexique_template_5F_scanner::kToken_not) // $not$
, NONTERMINAL (12) // <factor>
, END_PRODUCTION
// At index 140 : <factor>, in file 'template_expression_parser.ggs', line 626
, TERMINAL (C_Lexique_template_5F_scanner::kToken__7E_) // $~$
, NONTERMINAL (12) // <factor>
, END_PRODUCTION
// At index 143 : <factor>, in file 'template_expression_parser.ggs', line 653
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2D_) // $-$
, NONTERMINAL (12) // <factor>
, END_PRODUCTION
// At index 146 : <factor>, in file 'template_expression_parser.ggs', line 680
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2B_) // $+$
, NONTERMINAL (12) // <factor>
, END_PRODUCTION
// At index 149 : <factor>, in file 'template_expression_parser.ggs', line 707
, TERMINAL (C_Lexique_template_5F_scanner::kToken_yes) // $yes$
, END_PRODUCTION
// At index 151 : <factor>, in file 'template_expression_parser.ggs', line 725
, TERMINAL (C_Lexique_template_5F_scanner::kToken_no) // $no$
, END_PRODUCTION
// At index 153 : <factor>, in file 'template_expression_parser.ggs', line 743
, TERMINAL (C_Lexique_template_5F_scanner::kToken_signed_5F_literal_5F_integer_36__34_) // $signed_literal_integer64$
, END_PRODUCTION
// At index 155 : <factor>, in file 'template_expression_parser.ggs', line 762
, TERMINAL (C_Lexique_template_5F_scanner::kToken_string) // $string$
, END_PRODUCTION
// At index 157 : <factor>, in file 'template_expression_parser.ggs', line 781
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5B_) // $[$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (46) // <select_template_5F_expression_5F_parser_5>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5D_) // $]$
, END_PRODUCTION
// At index 163 : <factor>, in file 'template_expression_parser.ggs', line 836
, NONTERMINAL (3) // <variable>
, NONTERMINAL (48) // <select_template_5F_expression_5F_parser_7>
, END_PRODUCTION
// At index 166 : <factor>, in file 'template_expression_parser.ggs', line 969
, TERMINAL (C_Lexique_template_5F_scanner::kToken_exists) // $exists$
, NONTERMINAL (3) // <variable>
, NONTERMINAL (50) // <select_template_5F_expression_5F_parser_9>
, END_PRODUCTION
// At index 170 : <factor>, in file 'template_expression_parser.ggs', line 1017
, TERMINAL (C_Lexique_template_5F_scanner::kToken_typeof) // $typeof$
, NONTERMINAL (3) // <variable>
, END_PRODUCTION
// At index 173 : <factor>, in file 'template_expression_parser.ggs', line 1035
, NONTERMINAL (51) // <select_template_5F_expression_5F_parser_10>
, END_PRODUCTION
// At index 175 : <factor>, in file 'template_expression_parser.ggs', line 1054
, TERMINAL (C_Lexique_template_5F_scanner::kToken__40_) // $@$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 178 : <factor>, in file 'template_expression_parser.ggs', line 1068
, TERMINAL (C_Lexique_template_5F_scanner::kToken_emptylist) // $emptylist$
, END_PRODUCTION
// At index 180 : <factor>, in file 'template_expression_parser.ggs', line 1082
, TERMINAL (C_Lexique_template_5F_scanner::kToken_emptymap) // $emptymap$
, END_PRODUCTION
// At index 182 : <factor>, in file 'template_expression_parser.ggs', line 1096
, TERMINAL (C_Lexique_template_5F_scanner::kToken_mapof) // $mapof$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_by) // $by$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 187 : <factor>, in file 'template_expression_parser.ggs', line 1140
, TERMINAL (C_Lexique_template_5F_scanner::kToken_listof) // $listof$
, NONTERMINAL (3) // <variable>
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 190 : <select_template_5F_parser_0>, in file 'template_parser.ggs', line 187
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 192 : <select_template_5F_parser_0>, in file 'template_parser.ggs', line 187
, TERMINAL (C_Lexique_template_5F_scanner::kToken_from) // $from$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 195 : <select_template_5F_parser_1>, in file 'template_parser.ggs', line 213
, TERMINAL (C_Lexique_template_5F_scanner::kToken_if) // $if$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_exists) // $exists$
, NONTERMINAL (7) // <template_file_name>
, NONTERMINAL (15) // <select_template_5F_parser_2>
, NONTERMINAL (16) // <select_template_5F_parser_3>
, END_PRODUCTION
// At index 201 : <select_template_5F_parser_1>, in file 'template_parser.ggs', line 213
, NONTERMINAL (7) // <template_file_name>
, NONTERMINAL (17) // <select_template_5F_parser_4>
, END_PRODUCTION
// At index 204 : <select_template_5F_parser_2>, in file 'template_parser.ggs', line 218
, TERMINAL (C_Lexique_template_5F_scanner::kToken_in) // $in$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 207 : <select_template_5F_parser_2>, in file 'template_parser.ggs', line 218
, END_PRODUCTION
// At index 208 : <select_template_5F_parser_3>, in file 'template_parser.ggs', line 233
, TERMINAL (C_Lexique_template_5F_scanner::kToken_or) // $or$
, NONTERMINAL (6) // <template_instruction_list>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_end) // $end$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_template) // $template$
, END_PRODUCTION
// At index 213 : <select_template_5F_parser_3>, in file 'template_parser.ggs', line 233
, END_PRODUCTION
// At index 214 : <select_template_5F_parser_4>, in file 'template_parser.ggs', line 256
, TERMINAL (C_Lexique_template_5F_scanner::kToken_in) // $in$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 217 : <select_template_5F_parser_4>, in file 'template_parser.ggs', line 256
, END_PRODUCTION
// At index 218 : <select_template_5F_parser_5>, in file 'template_parser.ggs', line 323
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (19) // <select_template_5F_parser_6>
, END_PRODUCTION
// At index 221 : <select_template_5F_parser_5>, in file 'template_parser.ggs', line 323
, END_PRODUCTION
// At index 222 : <select_template_5F_parser_6>, in file 'template_parser.ggs', line 327
, END_PRODUCTION
// At index 223 : <select_template_5F_parser_6>, in file 'template_parser.ggs', line 327
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) // $,$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (19) // <select_template_5F_parser_6>
, END_PRODUCTION
// At index 227 : <select_template_5F_parser_7>, in file 'template_parser.ggs', line 356
, NONTERMINAL (5) // <expression>
, NONTERMINAL (21) // <select_template_5F_parser_8>
, END_PRODUCTION
// At index 230 : <select_template_5F_parser_7>, in file 'template_parser.ggs', line 356
, END_PRODUCTION
// At index 231 : <select_template_5F_parser_8>, in file 'template_parser.ggs', line 367
, END_PRODUCTION
// At index 232 : <select_template_5F_parser_8>, in file 'template_parser.ggs', line 367
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) // $,$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (21) // <select_template_5F_parser_8>
, END_PRODUCTION
// At index 236 : <select_template_5F_parser_9>, in file 'template_parser.ggs', line 486
, END_PRODUCTION
// At index 237 : <select_template_5F_parser_9>, in file 'template_parser.ggs', line 486
, TERMINAL (C_Lexique_template_5F_scanner::kToken_elsif) // $elsif$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken_then) // $then$
, NONTERMINAL (6) // <template_instruction_list>
, NONTERMINAL (22) // <select_template_5F_parser_9>
, END_PRODUCTION
// At index 243 : <select_template_5F_parser_10>, in file 'template_parser.ggs', line 527
, END_PRODUCTION
// At index 244 : <select_template_5F_parser_10>, in file 'template_parser.ggs', line 527
, TERMINAL (C_Lexique_template_5F_scanner::kToken_else) // $else$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 247 : <select_template_5F_parser_11>, in file 'template_parser.ggs', line 566
, END_PRODUCTION
// At index 248 : <select_template_5F_parser_11>, in file 'template_parser.ggs', line 566
, NONTERMINAL (1) // <template_instruction>
, NONTERMINAL (24) // <select_template_5F_parser_11>
, END_PRODUCTION
// At index 251 : <select_template_5F_parser_12>, in file 'template_parser.ggs', line 637
, END_PRODUCTION
// At index 252 : <select_template_5F_parser_12>, in file 'template_parser.ggs', line 637
, TERMINAL (C_Lexique_template_5F_scanner::kToken_prefixedby) // $prefixedby$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, END_PRODUCTION
// At index 255 : <select_template_5F_parser_13>, in file 'template_parser.ggs', line 646
, END_PRODUCTION
// At index 256 : <select_template_5F_parser_13>, in file 'template_parser.ggs', line 646
, TERMINAL (C_Lexique_template_5F_scanner::kToken_before) // $before$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 259 : <select_template_5F_parser_14>, in file 'template_parser.ggs', line 694
, END_PRODUCTION
// At index 260 : <select_template_5F_parser_14>, in file 'template_parser.ggs', line 694
, TERMINAL (C_Lexique_template_5F_scanner::kToken_between) // $between$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 263 : <select_template_5F_parser_15>, in file 'template_parser.ggs', line 715
, END_PRODUCTION
// At index 264 : <select_template_5F_parser_15>, in file 'template_parser.ggs', line 715
, TERMINAL (C_Lexique_template_5F_scanner::kToken_after) // $after$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 267 : <select_template_5F_parser_16>, in file 'template_parser.ggs', line 755
, END_PRODUCTION
// At index 268 : <select_template_5F_parser_16>, in file 'template_parser.ggs', line 755
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) // $,$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (29) // <select_template_5F_parser_16>
, END_PRODUCTION
// At index 272 : <select_template_5F_parser_17>, in file 'template_parser.ggs', line 802
, END_PRODUCTION
// At index 273 : <select_template_5F_parser_17>, in file 'template_parser.ggs', line 802
, TERMINAL (C_Lexique_template_5F_scanner::kToken_between) // $between$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 276 : <select_template_5F_parser_18>, in file 'template_parser.ggs', line 867
, END_PRODUCTION
// At index 277 : <select_template_5F_parser_18>, in file 'template_parser.ggs', line 867
, TERMINAL (C_Lexique_template_5F_scanner::kToken_before) // $before$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 280 : <select_template_5F_parser_19>, in file 'template_parser.ggs', line 915
, END_PRODUCTION
// At index 281 : <select_template_5F_parser_19>, in file 'template_parser.ggs', line 915
, TERMINAL (C_Lexique_template_5F_scanner::kToken_between) // $between$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 284 : <select_template_5F_parser_20>, in file 'template_parser.ggs', line 936
, END_PRODUCTION
// At index 285 : <select_template_5F_parser_20>, in file 'template_parser.ggs', line 936
, TERMINAL (C_Lexique_template_5F_scanner::kToken_after) // $after$
, NONTERMINAL (6) // <template_instruction_list>
, END_PRODUCTION
// At index 288 : <select_template_5F_parser_21>, in file 'template_parser.ggs', line 983
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3D_) // $:=$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 291 : <select_template_5F_parser_21>, in file 'template_parser.ggs', line 983
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2B__3D_) // $+=$
, NONTERMINAL (5) // <expression>
, END_PRODUCTION
// At index 294 : <select_template_5F_parser_21>, in file 'template_parser.ggs', line 983
, END_PRODUCTION
// At index 295 : <select_template_5F_parser_22>, in file 'template_parser.ggs', line 1054
, TERMINAL (C_Lexique_template_5F_scanner::kToken_here) // $here$
, END_PRODUCTION
// At index 297 : <select_template_5F_parser_22>, in file 'template_parser.ggs', line 1054
, NONTERMINAL (3) // <variable>
, END_PRODUCTION
// At index 299 : <select_template_5F_parser_23>, in file 'template_parser.ggs', line 1153
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3E_) // $>$
, END_PRODUCTION
// At index 301 : <select_template_5F_parser_23>, in file 'template_parser.ggs', line 1153
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3C_) // $<$
, END_PRODUCTION
// At index 303 : <select_template_5F_parser_24>, in file 'template_parser.ggs', line 1179
, END_PRODUCTION
// At index 304 : <select_template_5F_parser_24>, in file 'template_parser.ggs', line 1179
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) // $,$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (2) // <sorting_order>
, NONTERMINAL (37) // <select_template_5F_parser_24>
, END_PRODUCTION
// At index 309 : <select_template_5F_parser_25>, in file 'template_parser.ggs', line 1214
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5B_) // $[$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5D_) // $]$
, END_PRODUCTION
// At index 313 : <select_template_5F_parser_25>, in file 'template_parser.ggs', line 1214
, END_PRODUCTION
// At index 314 : <select_template_5F_parser_26>, in file 'template_parser.ggs', line 1230
, END_PRODUCTION
// At index 315 : <select_template_5F_parser_26>, in file 'template_parser.ggs', line 1230
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3A__3A_) // $::$
, TERMINAL (C_Lexique_template_5F_scanner::kToken_identifier) // $identifier$
, NONTERMINAL (40) // <select_template_5F_parser_27>
, NONTERMINAL (39) // <select_template_5F_parser_26>
, END_PRODUCTION
// At index 320 : <select_template_5F_parser_27>, in file 'template_parser.ggs', line 1235
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5B_) // $[$
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5D_) // $]$
, END_PRODUCTION
// At index 324 : <select_template_5F_parser_27>, in file 'template_parser.ggs', line 1235
, END_PRODUCTION
// At index 325 : <select_template_5F_expression_5F_parser_0>, in file 'template_expression_parser.ggs', line 103
, END_PRODUCTION
// At index 326 : <select_template_5F_expression_5F_parser_0>, in file 'template_expression_parser.ggs', line 103
, TERMINAL (C_Lexique_template_5F_scanner::kToken__7C_) // $|$
, NONTERMINAL (8) // <relation_term>
, NONTERMINAL (41) // <select_template_5F_expression_5F_parser_0>
, END_PRODUCTION
// At index 330 : <select_template_5F_expression_5F_parser_0>, in file 'template_expression_parser.ggs', line 103
, TERMINAL (C_Lexique_template_5F_scanner::kToken__5E_) // $^$
, NONTERMINAL (8) // <relation_term>
, NONTERMINAL (41) // <select_template_5F_expression_5F_parser_0>
, END_PRODUCTION
// At index 334 : <select_template_5F_expression_5F_parser_1>, in file 'template_expression_parser.ggs', line 165
, END_PRODUCTION
// At index 335 : <select_template_5F_expression_5F_parser_1>, in file 'template_expression_parser.ggs', line 165
, TERMINAL (C_Lexique_template_5F_scanner::kToken__26_) // $&$
, NONTERMINAL (9) // <relation_factor>
, NONTERMINAL (42) // <select_template_5F_expression_5F_parser_1>
, END_PRODUCTION
// At index 339 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, END_PRODUCTION
// At index 340 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3D__3D_) // $==$
, NONTERMINAL (10) // <simple_expression>
, END_PRODUCTION
// At index 343 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, TERMINAL (C_Lexique_template_5F_scanner::kToken__21__3D_) // $!=$
, NONTERMINAL (10) // <simple_expression>
, END_PRODUCTION
// At index 346 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3C__3D_) // $<=$
, NONTERMINAL (10) // <simple_expression>
, END_PRODUCTION
// At index 349 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3E__3D_) // $>=$
, NONTERMINAL (10) // <simple_expression>
, END_PRODUCTION
// At index 352 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3E_) // $>$
, NONTERMINAL (10) // <simple_expression>
, END_PRODUCTION
// At index 355 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3C_) // $<$
, NONTERMINAL (10) // <simple_expression>
, END_PRODUCTION
// At index 358 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
, END_PRODUCTION
// At index 359 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3C__3C_) // $<<$
, NONTERMINAL (11) // <term>
, NONTERMINAL (44) // <select_template_5F_expression_5F_parser_3>
, END_PRODUCTION
// At index 363 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3E__3E_) // $>>$
, NONTERMINAL (11) // <term>
, NONTERMINAL (44) // <select_template_5F_expression_5F_parser_3>
, END_PRODUCTION
// At index 367 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2B_) // $+$
, NONTERMINAL (11) // <term>
, NONTERMINAL (44) // <select_template_5F_expression_5F_parser_3>
, END_PRODUCTION
// At index 371 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2E_) // $.$
, NONTERMINAL (11) // <term>
, NONTERMINAL (44) // <select_template_5F_expression_5F_parser_3>
, END_PRODUCTION
// At index 375 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2D_) // $-$
, NONTERMINAL (11) // <term>
, NONTERMINAL (44) // <select_template_5F_expression_5F_parser_3>
, END_PRODUCTION
// At index 379 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
, END_PRODUCTION
// At index 380 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2A_) // $*$
, NONTERMINAL (12) // <factor>
, NONTERMINAL (45) // <select_template_5F_expression_5F_parser_4>
, END_PRODUCTION
// At index 384 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2F_) // $/$
, NONTERMINAL (12) // <factor>
, NONTERMINAL (45) // <select_template_5F_expression_5F_parser_4>
, END_PRODUCTION
// At index 388 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
, TERMINAL (C_Lexique_template_5F_scanner::kToken_mod) // $mod$
, NONTERMINAL (12) // <factor>
, NONTERMINAL (45) // <select_template_5F_expression_5F_parser_4>
, END_PRODUCTION
// At index 392 : <select_template_5F_expression_5F_parser_5>, in file 'template_expression_parser.ggs', line 803
, END_PRODUCTION
// At index 393 : <select_template_5F_expression_5F_parser_5>, in file 'template_expression_parser.ggs', line 803
, TERMINAL (C_Lexique_template_5F_scanner::kToken__3A_) // $:$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (47) // <select_template_5F_expression_5F_parser_6>
, END_PRODUCTION
// At index 397 : <select_template_5F_expression_5F_parser_6>, in file 'template_expression_parser.ggs', line 806
, END_PRODUCTION
// At index 398 : <select_template_5F_expression_5F_parser_6>, in file 'template_expression_parser.ggs', line 806
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) // $,$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (47) // <select_template_5F_expression_5F_parser_6>
, END_PRODUCTION
// At index 402 : <select_template_5F_expression_5F_parser_7>, in file 'template_expression_parser.ggs', line 845
, END_PRODUCTION
// At index 403 : <select_template_5F_expression_5F_parser_7>, in file 'template_expression_parser.ggs', line 845
, TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) // $($
, NONTERMINAL (5) // <expression>
, NONTERMINAL (49) // <select_template_5F_expression_5F_parser_8>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) // $)$
, END_PRODUCTION
// At index 408 : <select_template_5F_expression_5F_parser_8>, in file 'template_expression_parser.ggs', line 854
, END_PRODUCTION
// At index 409 : <select_template_5F_expression_5F_parser_8>, in file 'template_expression_parser.ggs', line 854
, TERMINAL (C_Lexique_template_5F_scanner::kToken__2C_) // $,$
, NONTERMINAL (5) // <expression>
, NONTERMINAL (49) // <select_template_5F_expression_5F_parser_8>
, END_PRODUCTION
// At index 413 : <select_template_5F_expression_5F_parser_9>, in file 'template_expression_parser.ggs', line 985
, TERMINAL (C_Lexique_template_5F_scanner::kToken_default) // $default$
, TERMINAL (C_Lexique_template_5F_scanner::kToken__28_) // $($
, NONTERMINAL (5) // <expression>
, TERMINAL (C_Lexique_template_5F_scanner::kToken__29_) // $)$
, END_PRODUCTION
// At index 418 : <select_template_5F_expression_5F_parser_9>, in file 'template_expression_parser.ggs', line 985
, END_PRODUCTION
// At index 419 : <select_template_5F_expression_5F_parser_10>, in file 'template_expression_parser.ggs', line 1042
, TERMINAL (C_Lexique_template_5F_scanner::kToken_true) // $true$
, END_PRODUCTION
// At index 421 : <select_template_5F_expression_5F_parser_10>, in file 'template_expression_parser.ggs', line 1042
, TERMINAL (C_Lexique_template_5F_scanner::kToken_false) // $false$
, END_PRODUCTION
// At index 423 : <>, in file '.ggs', line 0
, NONTERMINAL (0) // <goil_template_start_symbol>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          P R O D U C T I O N    N A M E S                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames_template_grammar [138] = {
 {"<goil_template_start_symbol>", "template_parser", 0}, // at index 0
 {"<template_instruction>", "template_parser", 2}, // at index 1
 {"<template_instruction>", "template_parser", 5}, // at index 2
 {"<template_instruction>", "template_parser", 13}, // at index 3
 {"<template_instruction>", "template_parser", 16}, // at index 4
 {"<template_instruction>", "template_parser", 19}, // at index 5
 {"<template_instruction>", "template_parser", 26}, // at index 6
 {"<template_instruction>", "template_parser", 32}, // at index 7
 {"<template_instruction>", "template_parser", 35}, // at index 8
 {"<template_instruction>", "template_parser", 44}, // at index 9
 {"<template_instruction>", "template_parser", 57}, // at index 10
 {"<template_instruction>", "template_parser", 68}, // at index 11
 {"<template_instruction>", "template_parser", 82}, // at index 12
 {"<template_instruction>", "template_parser", 86}, // at index 13
 {"<template_instruction>", "template_parser", 91}, // at index 14
 {"<template_instruction>", "template_parser", 96}, // at index 15
 {"<template_instruction>", "template_parser", 99}, // at index 16
 {"<sorting_order>", "template_parser", 106}, // at index 17
 {"<variable>", "template_parser", 108}, // at index 18
 {"<variable_or_here>", "template_parser", 112}, // at index 19
 {"<expression>", "template_expression_parser", 114}, // at index 20
 {"<template_instruction_list>", "template_parser", 117}, // at index 21
 {"<template_file_name>", "template_parser", 119}, // at index 22
 {"<relation_term>", "template_expression_parser", 121}, // at index 23
 {"<relation_factor>", "template_expression_parser", 124}, // at index 24
 {"<simple_expression>", "template_expression_parser", 127}, // at index 25
 {"<term>", "template_expression_parser", 130}, // at index 26
 {"<factor>", "template_expression_parser", 133}, // at index 27
 {"<factor>", "template_expression_parser", 137}, // at index 28
 {"<factor>", "template_expression_parser", 140}, // at index 29
 {"<factor>", "template_expression_parser", 143}, // at index 30
 {"<factor>", "template_expression_parser", 146}, // at index 31
 {"<factor>", "template_expression_parser", 149}, // at index 32
 {"<factor>", "template_expression_parser", 151}, // at index 33
 {"<factor>", "template_expression_parser", 153}, // at index 34
 {"<factor>", "template_expression_parser", 155}, // at index 35
 {"<factor>", "template_expression_parser", 157}, // at index 36
 {"<factor>", "template_expression_parser", 163}, // at index 37
 {"<factor>", "template_expression_parser", 166}, // at index 38
 {"<factor>", "template_expression_parser", 170}, // at index 39
 {"<factor>", "template_expression_parser", 173}, // at index 40
 {"<factor>", "template_expression_parser", 175}, // at index 41
 {"<factor>", "template_expression_parser", 178}, // at index 42
 {"<factor>", "template_expression_parser", 180}, // at index 43
 {"<factor>", "template_expression_parser", 182}, // at index 44
 {"<factor>", "template_expression_parser", 187}, // at index 45
 {"<select_template_5F_parser_0>", "template_parser", 190}, // at index 46
 {"<select_template_5F_parser_0>", "template_parser", 192}, // at index 47
 {"<select_template_5F_parser_1>", "template_parser", 195}, // at index 48
 {"<select_template_5F_parser_1>", "template_parser", 201}, // at index 49
 {"<select_template_5F_parser_2>", "template_parser", 204}, // at index 50
 {"<select_template_5F_parser_2>", "template_parser", 207}, // at index 51
 {"<select_template_5F_parser_3>", "template_parser", 208}, // at index 52
 {"<select_template_5F_parser_3>", "template_parser", 213}, // at index 53
 {"<select_template_5F_parser_4>", "template_parser", 214}, // at index 54
 {"<select_template_5F_parser_4>", "template_parser", 217}, // at index 55
 {"<select_template_5F_parser_5>", "template_parser", 218}, // at index 56
 {"<select_template_5F_parser_5>", "template_parser", 221}, // at index 57
 {"<select_template_5F_parser_6>", "template_parser", 222}, // at index 58
 {"<select_template_5F_parser_6>", "template_parser", 223}, // at index 59
 {"<select_template_5F_parser_7>", "template_parser", 227}, // at index 60
 {"<select_template_5F_parser_7>", "template_parser", 230}, // at index 61
 {"<select_template_5F_parser_8>", "template_parser", 231}, // at index 62
 {"<select_template_5F_parser_8>", "template_parser", 232}, // at index 63
 {"<select_template_5F_parser_9>", "template_parser", 236}, // at index 64
 {"<select_template_5F_parser_9>", "template_parser", 237}, // at index 65
 {"<select_template_5F_parser_10>", "template_parser", 243}, // at index 66
 {"<select_template_5F_parser_10>", "template_parser", 244}, // at index 67
 {"<select_template_5F_parser_11>", "template_parser", 247}, // at index 68
 {"<select_template_5F_parser_11>", "template_parser", 248}, // at index 69
 {"<select_template_5F_parser_12>", "template_parser", 251}, // at index 70
 {"<select_template_5F_parser_12>", "template_parser", 252}, // at index 71
 {"<select_template_5F_parser_13>", "template_parser", 255}, // at index 72
 {"<select_template_5F_parser_13>", "template_parser", 256}, // at index 73
 {"<select_template_5F_parser_14>", "template_parser", 259}, // at index 74
 {"<select_template_5F_parser_14>", "template_parser", 260}, // at index 75
 {"<select_template_5F_parser_15>", "template_parser", 263}, // at index 76
 {"<select_template_5F_parser_15>", "template_parser", 264}, // at index 77
 {"<select_template_5F_parser_16>", "template_parser", 267}, // at index 78
 {"<select_template_5F_parser_16>", "template_parser", 268}, // at index 79
 {"<select_template_5F_parser_17>", "template_parser", 272}, // at index 80
 {"<select_template_5F_parser_17>", "template_parser", 273}, // at index 81
 {"<select_template_5F_parser_18>", "template_parser", 276}, // at index 82
 {"<select_template_5F_parser_18>", "template_parser", 277}, // at index 83
 {"<select_template_5F_parser_19>", "template_parser", 280}, // at index 84
 {"<select_template_5F_parser_19>", "template_parser", 281}, // at index 85
 {"<select_template_5F_parser_20>", "template_parser", 284}, // at index 86
 {"<select_template_5F_parser_20>", "template_parser", 285}, // at index 87
 {"<select_template_5F_parser_21>", "template_parser", 288}, // at index 88
 {"<select_template_5F_parser_21>", "template_parser", 291}, // at index 89
 {"<select_template_5F_parser_21>", "template_parser", 294}, // at index 90
 {"<select_template_5F_parser_22>", "template_parser", 295}, // at index 91
 {"<select_template_5F_parser_22>", "template_parser", 297}, // at index 92
 {"<select_template_5F_parser_23>", "template_parser", 299}, // at index 93
 {"<select_template_5F_parser_23>", "template_parser", 301}, // at index 94
 {"<select_template_5F_parser_24>", "template_parser", 303}, // at index 95
 {"<select_template_5F_parser_24>", "template_parser", 304}, // at index 96
 {"<select_template_5F_parser_25>", "template_parser", 309}, // at index 97
 {"<select_template_5F_parser_25>", "template_parser", 313}, // at index 98
 {"<select_template_5F_parser_26>", "template_parser", 314}, // at index 99
 {"<select_template_5F_parser_26>", "template_parser", 315}, // at index 100
 {"<select_template_5F_parser_27>", "template_parser", 320}, // at index 101
 {"<select_template_5F_parser_27>", "template_parser", 324}, // at index 102
 {"<select_template_5F_expression_5F_parser_0>", "template_expression_parser", 325}, // at index 103
 {"<select_template_5F_expression_5F_parser_0>", "template_expression_parser", 326}, // at index 104
 {"<select_template_5F_expression_5F_parser_0>", "template_expression_parser", 330}, // at index 105
 {"<select_template_5F_expression_5F_parser_1>", "template_expression_parser", 334}, // at index 106
 {"<select_template_5F_expression_5F_parser_1>", "template_expression_parser", 335}, // at index 107
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 339}, // at index 108
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 340}, // at index 109
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 343}, // at index 110
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 346}, // at index 111
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 349}, // at index 112
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 352}, // at index 113
 {"<select_template_5F_expression_5F_parser_2>", "template_expression_parser", 355}, // at index 114
 {"<select_template_5F_expression_5F_parser_3>", "template_expression_parser", 358}, // at index 115
 {"<select_template_5F_expression_5F_parser_3>", "template_expression_parser", 359}, // at index 116
 {"<select_template_5F_expression_5F_parser_3>", "template_expression_parser", 363}, // at index 117
 {"<select_template_5F_expression_5F_parser_3>", "template_expression_parser", 367}, // at index 118
 {"<select_template_5F_expression_5F_parser_3>", "template_expression_parser", 371}, // at index 119
 {"<select_template_5F_expression_5F_parser_3>", "template_expression_parser", 375}, // at index 120
 {"<select_template_5F_expression_5F_parser_4>", "template_expression_parser", 379}, // at index 121
 {"<select_template_5F_expression_5F_parser_4>", "template_expression_parser", 380}, // at index 122
 {"<select_template_5F_expression_5F_parser_4>", "template_expression_parser", 384}, // at index 123
 {"<select_template_5F_expression_5F_parser_4>", "template_expression_parser", 388}, // at index 124
 {"<select_template_5F_expression_5F_parser_5>", "template_expression_parser", 392}, // at index 125
 {"<select_template_5F_expression_5F_parser_5>", "template_expression_parser", 393}, // at index 126
 {"<select_template_5F_expression_5F_parser_6>", "template_expression_parser", 397}, // at index 127
 {"<select_template_5F_expression_5F_parser_6>", "template_expression_parser", 398}, // at index 128
 {"<select_template_5F_expression_5F_parser_7>", "template_expression_parser", 402}, // at index 129
 {"<select_template_5F_expression_5F_parser_7>", "template_expression_parser", 403}, // at index 130
 {"<select_template_5F_expression_5F_parser_8>", "template_expression_parser", 408}, // at index 131
 {"<select_template_5F_expression_5F_parser_8>", "template_expression_parser", 409}, // at index 132
 {"<select_template_5F_expression_5F_parser_9>", "template_expression_parser", 413}, // at index 133
 {"<select_template_5F_expression_5F_parser_9>", "template_expression_parser", 418}, // at index 134
 {"<select_template_5F_expression_5F_parser_10>", "template_expression_parser", 419}, // at index 135
 {"<select_template_5F_expression_5F_parser_10>", "template_expression_parser", 421}, // at index 136
 {"<>", "", 423} // at index 137
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 L L ( 1 )    P R O D U C T I O N    I N D E X E S                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionIndexes_template_grammar [138] = {
0, // index 0 : <goil_template_start_symbol>, in file 'template_parser.ggs', line 584
2, // index 1 : <template_instruction>, in file 'template_parser.ggs', line 80
5, // index 2 : <template_instruction>, in file 'template_parser.ggs', line 127
13, // index 3 : <template_instruction>, in file 'template_parser.ggs', line 203
16, // index 4 : <template_instruction>, in file 'template_parser.ggs', line 278
19, // index 5 : <template_instruction>, in file 'template_parser.ggs', line 311
26, // index 6 : <template_instruction>, in file 'template_parser.ggs', line 344
32, // index 7 : <template_instruction>, in file 'template_parser.ggs', line 411
35, // index 8 : <template_instruction>, in file 'template_parser.ggs', line 476
44, // index 9 : <template_instruction>, in file 'template_parser.ggs', line 604
57, // index 10 : <template_instruction>, in file 'template_parser.ggs', line 741
68, // index 11 : <template_instruction>, in file 'template_parser.ggs', line 831
82, // index 12 : <template_instruction>, in file 'template_parser.ggs', line 970
86, // index 13 : <template_instruction>, in file 'template_parser.ggs', line 1068
91, // index 14 : <template_instruction>, in file 'template_parser.ggs', line 1100
96, // index 15 : <template_instruction>, in file 'template_parser.ggs', line 1130
99, // index 16 : <template_instruction>, in file 'template_parser.ggs', line 1162
106, // index 17 : <sorting_order>, in file 'template_parser.ggs', line 1151
108, // index 18 : <variable>, in file 'template_parser.ggs', line 1204
112, // index 19 : <variable_or_here>, in file 'template_parser.ggs', line 1048
114, // index 20 : <expression>, in file 'template_expression_parser.ggs', line 89
117, // index 21 : <template_instruction_list>, in file 'template_parser.ggs', line 555
119, // index 22 : <template_file_name>, in file 'template_parser.ggs', line 181
121, // index 23 : <relation_term>, in file 'template_expression_parser.ggs', line 151
124, // index 24 : <relation_factor>, in file 'template_expression_parser.ggs', line 194
127, // index 25 : <simple_expression>, in file 'template_expression_parser.ggs', line 400
130, // index 26 : <term>, in file 'template_expression_parser.ggs', line 503
133, // index 27 : <factor>, in file 'template_expression_parser.ggs', line 575
137, // index 28 : <factor>, in file 'template_expression_parser.ggs', line 599
140, // index 29 : <factor>, in file 'template_expression_parser.ggs', line 626
143, // index 30 : <factor>, in file 'template_expression_parser.ggs', line 653
146, // index 31 : <factor>, in file 'template_expression_parser.ggs', line 680
149, // index 32 : <factor>, in file 'template_expression_parser.ggs', line 707
151, // index 33 : <factor>, in file 'template_expression_parser.ggs', line 725
153, // index 34 : <factor>, in file 'template_expression_parser.ggs', line 743
155, // index 35 : <factor>, in file 'template_expression_parser.ggs', line 762
157, // index 36 : <factor>, in file 'template_expression_parser.ggs', line 781
163, // index 37 : <factor>, in file 'template_expression_parser.ggs', line 836
166, // index 38 : <factor>, in file 'template_expression_parser.ggs', line 969
170, // index 39 : <factor>, in file 'template_expression_parser.ggs', line 1017
173, // index 40 : <factor>, in file 'template_expression_parser.ggs', line 1035
175, // index 41 : <factor>, in file 'template_expression_parser.ggs', line 1054
178, // index 42 : <factor>, in file 'template_expression_parser.ggs', line 1068
180, // index 43 : <factor>, in file 'template_expression_parser.ggs', line 1082
182, // index 44 : <factor>, in file 'template_expression_parser.ggs', line 1096
187, // index 45 : <factor>, in file 'template_expression_parser.ggs', line 1140
190, // index 46 : <select_template_5F_parser_0>, in file 'template_parser.ggs', line 187
192, // index 47 : <select_template_5F_parser_0>, in file 'template_parser.ggs', line 187
195, // index 48 : <select_template_5F_parser_1>, in file 'template_parser.ggs', line 213
201, // index 49 : <select_template_5F_parser_1>, in file 'template_parser.ggs', line 213
204, // index 50 : <select_template_5F_parser_2>, in file 'template_parser.ggs', line 218
207, // index 51 : <select_template_5F_parser_2>, in file 'template_parser.ggs', line 218
208, // index 52 : <select_template_5F_parser_3>, in file 'template_parser.ggs', line 233
213, // index 53 : <select_template_5F_parser_3>, in file 'template_parser.ggs', line 233
214, // index 54 : <select_template_5F_parser_4>, in file 'template_parser.ggs', line 256
217, // index 55 : <select_template_5F_parser_4>, in file 'template_parser.ggs', line 256
218, // index 56 : <select_template_5F_parser_5>, in file 'template_parser.ggs', line 323
221, // index 57 : <select_template_5F_parser_5>, in file 'template_parser.ggs', line 323
222, // index 58 : <select_template_5F_parser_6>, in file 'template_parser.ggs', line 327
223, // index 59 : <select_template_5F_parser_6>, in file 'template_parser.ggs', line 327
227, // index 60 : <select_template_5F_parser_7>, in file 'template_parser.ggs', line 356
230, // index 61 : <select_template_5F_parser_7>, in file 'template_parser.ggs', line 356
231, // index 62 : <select_template_5F_parser_8>, in file 'template_parser.ggs', line 367
232, // index 63 : <select_template_5F_parser_8>, in file 'template_parser.ggs', line 367
236, // index 64 : <select_template_5F_parser_9>, in file 'template_parser.ggs', line 486
237, // index 65 : <select_template_5F_parser_9>, in file 'template_parser.ggs', line 486
243, // index 66 : <select_template_5F_parser_10>, in file 'template_parser.ggs', line 527
244, // index 67 : <select_template_5F_parser_10>, in file 'template_parser.ggs', line 527
247, // index 68 : <select_template_5F_parser_11>, in file 'template_parser.ggs', line 566
248, // index 69 : <select_template_5F_parser_11>, in file 'template_parser.ggs', line 566
251, // index 70 : <select_template_5F_parser_12>, in file 'template_parser.ggs', line 637
252, // index 71 : <select_template_5F_parser_12>, in file 'template_parser.ggs', line 637
255, // index 72 : <select_template_5F_parser_13>, in file 'template_parser.ggs', line 646
256, // index 73 : <select_template_5F_parser_13>, in file 'template_parser.ggs', line 646
259, // index 74 : <select_template_5F_parser_14>, in file 'template_parser.ggs', line 694
260, // index 75 : <select_template_5F_parser_14>, in file 'template_parser.ggs', line 694
263, // index 76 : <select_template_5F_parser_15>, in file 'template_parser.ggs', line 715
264, // index 77 : <select_template_5F_parser_15>, in file 'template_parser.ggs', line 715
267, // index 78 : <select_template_5F_parser_16>, in file 'template_parser.ggs', line 755
268, // index 79 : <select_template_5F_parser_16>, in file 'template_parser.ggs', line 755
272, // index 80 : <select_template_5F_parser_17>, in file 'template_parser.ggs', line 802
273, // index 81 : <select_template_5F_parser_17>, in file 'template_parser.ggs', line 802
276, // index 82 : <select_template_5F_parser_18>, in file 'template_parser.ggs', line 867
277, // index 83 : <select_template_5F_parser_18>, in file 'template_parser.ggs', line 867
280, // index 84 : <select_template_5F_parser_19>, in file 'template_parser.ggs', line 915
281, // index 85 : <select_template_5F_parser_19>, in file 'template_parser.ggs', line 915
284, // index 86 : <select_template_5F_parser_20>, in file 'template_parser.ggs', line 936
285, // index 87 : <select_template_5F_parser_20>, in file 'template_parser.ggs', line 936
288, // index 88 : <select_template_5F_parser_21>, in file 'template_parser.ggs', line 983
291, // index 89 : <select_template_5F_parser_21>, in file 'template_parser.ggs', line 983
294, // index 90 : <select_template_5F_parser_21>, in file 'template_parser.ggs', line 983
295, // index 91 : <select_template_5F_parser_22>, in file 'template_parser.ggs', line 1054
297, // index 92 : <select_template_5F_parser_22>, in file 'template_parser.ggs', line 1054
299, // index 93 : <select_template_5F_parser_23>, in file 'template_parser.ggs', line 1153
301, // index 94 : <select_template_5F_parser_23>, in file 'template_parser.ggs', line 1153
303, // index 95 : <select_template_5F_parser_24>, in file 'template_parser.ggs', line 1179
304, // index 96 : <select_template_5F_parser_24>, in file 'template_parser.ggs', line 1179
309, // index 97 : <select_template_5F_parser_25>, in file 'template_parser.ggs', line 1214
313, // index 98 : <select_template_5F_parser_25>, in file 'template_parser.ggs', line 1214
314, // index 99 : <select_template_5F_parser_26>, in file 'template_parser.ggs', line 1230
315, // index 100 : <select_template_5F_parser_26>, in file 'template_parser.ggs', line 1230
320, // index 101 : <select_template_5F_parser_27>, in file 'template_parser.ggs', line 1235
324, // index 102 : <select_template_5F_parser_27>, in file 'template_parser.ggs', line 1235
325, // index 103 : <select_template_5F_expression_5F_parser_0>, in file 'template_expression_parser.ggs', line 103
326, // index 104 : <select_template_5F_expression_5F_parser_0>, in file 'template_expression_parser.ggs', line 103
330, // index 105 : <select_template_5F_expression_5F_parser_0>, in file 'template_expression_parser.ggs', line 103
334, // index 106 : <select_template_5F_expression_5F_parser_1>, in file 'template_expression_parser.ggs', line 165
335, // index 107 : <select_template_5F_expression_5F_parser_1>, in file 'template_expression_parser.ggs', line 165
339, // index 108 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
340, // index 109 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
343, // index 110 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
346, // index 111 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
349, // index 112 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
352, // index 113 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
355, // index 114 : <select_template_5F_expression_5F_parser_2>, in file 'template_expression_parser.ggs', line 208
358, // index 115 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
359, // index 116 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
363, // index 117 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
367, // index 118 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
371, // index 119 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
375, // index 120 : <select_template_5F_expression_5F_parser_3>, in file 'template_expression_parser.ggs', line 414
379, // index 121 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
380, // index 122 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
384, // index 123 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
388, // index 124 : <select_template_5F_expression_5F_parser_4>, in file 'template_expression_parser.ggs', line 517
392, // index 125 : <select_template_5F_expression_5F_parser_5>, in file 'template_expression_parser.ggs', line 803
393, // index 126 : <select_template_5F_expression_5F_parser_5>, in file 'template_expression_parser.ggs', line 803
397, // index 127 : <select_template_5F_expression_5F_parser_6>, in file 'template_expression_parser.ggs', line 806
398, // index 128 : <select_template_5F_expression_5F_parser_6>, in file 'template_expression_parser.ggs', line 806
402, // index 129 : <select_template_5F_expression_5F_parser_7>, in file 'template_expression_parser.ggs', line 845
403, // index 130 : <select_template_5F_expression_5F_parser_7>, in file 'template_expression_parser.ggs', line 845
408, // index 131 : <select_template_5F_expression_5F_parser_8>, in file 'template_expression_parser.ggs', line 854
409, // index 132 : <select_template_5F_expression_5F_parser_8>, in file 'template_expression_parser.ggs', line 854
413, // index 133 : <select_template_5F_expression_5F_parser_9>, in file 'template_expression_parser.ggs', line 985
418, // index 134 : <select_template_5F_expression_5F_parser_9>, in file 'template_expression_parser.ggs', line 985
419, // index 135 : <select_template_5F_expression_5F_parser_10>, in file 'template_expression_parser.ggs', line 1042
421, // index 136 : <select_template_5F_expression_5F_parser_10>, in file 'template_expression_parser.ggs', line 1042
423 // index 137 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gFirstProductionIndexes_template_grammar [54] = {
0, // at 0 : <goil_template_start_symbol>
1, // at 1 : <template_instruction>
17, // at 2 : <sorting_order>
18, // at 3 : <variable>
19, // at 4 : <variable_or_here>
20, // at 5 : <expression>
21, // at 6 : <template_instruction_list>
22, // at 7 : <template_file_name>
23, // at 8 : <relation_term>
24, // at 9 : <relation_factor>
25, // at 10 : <simple_expression>
26, // at 11 : <term>
27, // at 12 : <factor>
46, // at 13 : <select_template_5F_parser_0>
48, // at 14 : <select_template_5F_parser_1>
50, // at 15 : <select_template_5F_parser_2>
52, // at 16 : <select_template_5F_parser_3>
54, // at 17 : <select_template_5F_parser_4>
56, // at 18 : <select_template_5F_parser_5>
58, // at 19 : <select_template_5F_parser_6>
60, // at 20 : <select_template_5F_parser_7>
62, // at 21 : <select_template_5F_parser_8>
64, // at 22 : <select_template_5F_parser_9>
66, // at 23 : <select_template_5F_parser_10>
68, // at 24 : <select_template_5F_parser_11>
70, // at 25 : <select_template_5F_parser_12>
72, // at 26 : <select_template_5F_parser_13>
74, // at 27 : <select_template_5F_parser_14>
76, // at 28 : <select_template_5F_parser_15>
78, // at 29 : <select_template_5F_parser_16>
80, // at 30 : <select_template_5F_parser_17>
82, // at 31 : <select_template_5F_parser_18>
84, // at 32 : <select_template_5F_parser_19>
86, // at 33 : <select_template_5F_parser_20>
88, // at 34 : <select_template_5F_parser_21>
91, // at 35 : <select_template_5F_parser_22>
93, // at 36 : <select_template_5F_parser_23>
95, // at 37 : <select_template_5F_parser_24>
97, // at 38 : <select_template_5F_parser_25>
99, // at 39 : <select_template_5F_parser_26>
101, // at 40 : <select_template_5F_parser_27>
103, // at 41 : <select_template_5F_expression_5F_parser_0>
106, // at 42 : <select_template_5F_expression_5F_parser_1>
108, // at 43 : <select_template_5F_expression_5F_parser_2>
115, // at 44 : <select_template_5F_expression_5F_parser_3>
121, // at 45 : <select_template_5F_expression_5F_parser_4>
125, // at 46 : <select_template_5F_expression_5F_parser_5>
127, // at 47 : <select_template_5F_expression_5F_parser_6>
129, // at 48 : <select_template_5F_expression_5F_parser_7>
131, // at 49 : <select_template_5F_expression_5F_parser_8>
133, // at 50 : <select_template_5F_expression_5F_parser_9>
135, // at 51 : <select_template_5F_expression_5F_parser_10>
137, // at 52 : <>
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    L L ( 1 )    D E C I S I O N    T A B L E S                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gDecision_template_grammar [] = {
// At index 0 : <goil_template_start_symbol> only one production, no choice
  -1,
// At index 1 : <template_instruction>
C_Lexique_template_5F_scanner::kToken__21_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_write, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken_template, -1, // Choice 3
C_Lexique_template_5F_scanner::kToken__3F_, -1, // Choice 4
C_Lexique_template_5F_scanner::kToken_function, -1, // Choice 5
C_Lexique_template_5F_scanner::kToken_call, -1, // Choice 6
C_Lexique_template_5F_scanner::kToken_return, -1, // Choice 7
C_Lexique_template_5F_scanner::kToken_if, -1, // Choice 8
C_Lexique_template_5F_scanner::kToken_foreach, -1, // Choice 9
C_Lexique_template_5F_scanner::kToken_for, -1, // Choice 10
C_Lexique_template_5F_scanner::kToken_loop, -1, // Choice 11
C_Lexique_template_5F_scanner::kToken_let, -1, // Choice 12
C_Lexique_template_5F_scanner::kToken_error, -1, // Choice 13
C_Lexique_template_5F_scanner::kToken_warning, -1, // Choice 14
C_Lexique_template_5F_scanner::kToken_display, -1, // Choice 15
C_Lexique_template_5F_scanner::kToken_sort, -1, // Choice 16
  -1,
// At index 34 : <sorting_order> only one production, no choice
  -1,
// At index 35 : <variable> only one production, no choice
  -1,
// At index 36 : <variable_or_here> only one production, no choice
  -1,
// At index 37 : <expression> only one production, no choice
  -1,
// At index 38 : <template_instruction_list> only one production, no choice
  -1,
// At index 39 : <template_file_name> only one production, no choice
  -1,
// At index 40 : <relation_term> only one production, no choice
  -1,
// At index 41 : <relation_factor> only one production, no choice
  -1,
// At index 42 : <simple_expression> only one production, no choice
  -1,
// At index 43 : <term> only one production, no choice
  -1,
// At index 44 : <factor>
C_Lexique_template_5F_scanner::kToken__28_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_not, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken__7E_, -1, // Choice 3
C_Lexique_template_5F_scanner::kToken__2D_, -1, // Choice 4
C_Lexique_template_5F_scanner::kToken__2B_, -1, // Choice 5
C_Lexique_template_5F_scanner::kToken_yes, -1, // Choice 6
C_Lexique_template_5F_scanner::kToken_no, -1, // Choice 7
C_Lexique_template_5F_scanner::kToken_signed_5F_literal_5F_integer_36__34_, -1, // Choice 8
C_Lexique_template_5F_scanner::kToken_string, -1, // Choice 9
C_Lexique_template_5F_scanner::kToken__5B_, -1, // Choice 10
C_Lexique_template_5F_scanner::kToken_identifier, -1, // Choice 11
C_Lexique_template_5F_scanner::kToken_exists, -1, // Choice 12
C_Lexique_template_5F_scanner::kToken_typeof, -1, // Choice 13
C_Lexique_template_5F_scanner::kToken_true, C_Lexique_template_5F_scanner::kToken_false, -1, // Choice 14
C_Lexique_template_5F_scanner::kToken__40_, -1, // Choice 15
C_Lexique_template_5F_scanner::kToken_emptylist, -1, // Choice 16
C_Lexique_template_5F_scanner::kToken_emptymap, -1, // Choice 17
C_Lexique_template_5F_scanner::kToken_mapof, -1, // Choice 18
C_Lexique_template_5F_scanner::kToken_listof, -1, // Choice 19
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 84 : <select_template_5F_parser_0>
C_Lexique_template_5F_scanner::kToken_identifier, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_from, -1, // Choice 2
  -1,
// At index 89 : <select_template_5F_parser_1>
C_Lexique_template_5F_scanner::kToken_if, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_from, -1, // Choice 2
  -1,
// At index 95 : <select_template_5F_parser_2>
C_Lexique_template_5F_scanner::kToken_in, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 2
  -1,
// At index 123 : <select_template_5F_parser_3>
C_Lexique_template_5F_scanner::kToken_or, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 2
  -1,
// At index 150 : <select_template_5F_parser_4>
C_Lexique_template_5F_scanner::kToken_in, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 2
  -1,
// At index 177 : <select_template_5F_parser_5>
C_Lexique_template_5F_scanner::kToken_identifier, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__29_, -1, // Choice 2
  -1,
// At index 182 : <select_template_5F_parser_6>
C_Lexique_template_5F_scanner::kToken__29_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2C_, -1, // Choice 2
  -1,
// At index 187 : <select_template_5F_parser_7>
C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_exists, C_Lexique_template_5F_scanner::kToken__28_, C_Lexique_template_5F_scanner::kToken__5B_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken_not, C_Lexique_template_5F_scanner::kToken__7E_, C_Lexique_template_5F_scanner::kToken_yes, C_Lexique_template_5F_scanner::kToken_no, C_Lexique_template_5F_scanner::kToken_signed_5F_literal_5F_integer_36__34_, C_Lexique_template_5F_scanner::kToken_string, C_Lexique_template_5F_scanner::kToken_typeof, C_Lexique_template_5F_scanner::kToken_true, C_Lexique_template_5F_scanner::kToken_false, C_Lexique_template_5F_scanner::kToken__40_, C_Lexique_template_5F_scanner::kToken_emptylist, C_Lexique_template_5F_scanner::kToken_emptymap, C_Lexique_template_5F_scanner::kToken_mapof, C_Lexique_template_5F_scanner::kToken_listof, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__29_, -1, // Choice 2
  -1,
// At index 211 : <select_template_5F_parser_8>
C_Lexique_template_5F_scanner::kToken__29_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2C_, -1, // Choice 2
  -1,
// At index 216 : <select_template_5F_parser_9>
C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_else, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_elsif, -1, // Choice 2
  -1,
// At index 222 : <select_template_5F_parser_10>
C_Lexique_template_5F_scanner::kToken_end, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_else, -1, // Choice 2
  -1,
// At index 227 : <select_template_5F_parser_11>
C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, -1, // Choice 2
  -1,
// At index 253 : <select_template_5F_parser_12>
C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_prefixedby, -1, // Choice 2
  -1,
// At index 259 : <select_template_5F_parser_13>
C_Lexique_template_5F_scanner::kToken_do, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_before, -1, // Choice 2
  -1,
// At index 264 : <select_template_5F_parser_14>
C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_after, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_between, -1, // Choice 2
  -1,
// At index 270 : <select_template_5F_parser_15>
C_Lexique_template_5F_scanner::kToken_end, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_after, -1, // Choice 2
  -1,
// At index 275 : <select_template_5F_parser_16>
C_Lexique_template_5F_scanner::kToken_do, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2C_, -1, // Choice 2
  -1,
// At index 280 : <select_template_5F_parser_17>
C_Lexique_template_5F_scanner::kToken_end, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_between, -1, // Choice 2
  -1,
// At index 285 : <select_template_5F_parser_18>
C_Lexique_template_5F_scanner::kToken_do, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_before, -1, // Choice 2
  -1,
// At index 290 : <select_template_5F_parser_19>
C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_after, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_between, -1, // Choice 2
  -1,
// At index 296 : <select_template_5F_parser_20>
C_Lexique_template_5F_scanner::kToken_end, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_after, -1, // Choice 2
  -1,
// At index 301 : <select_template_5F_parser_21>
C_Lexique_template_5F_scanner::kToken__3A__3D_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2B__3D_, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 3
  -1,
// At index 330 : <select_template_5F_parser_22>
C_Lexique_template_5F_scanner::kToken_here, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_identifier, -1, // Choice 2
  -1,
// At index 335 : <select_template_5F_parser_23>
C_Lexique_template_5F_scanner::kToken__3E_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__3C_, -1, // Choice 2
  -1,
// At index 340 : <select_template_5F_parser_24>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2C_, -1, // Choice 2
  -1,
// At index 367 : <select_template_5F_parser_25>
C_Lexique_template_5F_scanner::kToken__5B_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__28_, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken__3A__3D_, C_Lexique_template_5F_scanner::kToken__2B__3D_, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__3A__3A_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken__3C__3C_, C_Lexique_template_5F_scanner::kToken__3E__3E_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2E_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken__2A_, C_Lexique_template_5F_scanner::kToken__2F_, C_Lexique_template_5F_scanner::kToken_mod, C_Lexique_template_5F_scanner::kToken_default, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 2
  -1,
// At index 428 : <select_template_5F_parser_26>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__28_, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken__3A__3D_, C_Lexique_template_5F_scanner::kToken__2B__3D_, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken__3C__3C_, C_Lexique_template_5F_scanner::kToken__3E__3E_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2E_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken__2A_, C_Lexique_template_5F_scanner::kToken__2F_, C_Lexique_template_5F_scanner::kToken_mod, C_Lexique_template_5F_scanner::kToken_default, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__3A__3A_, -1, // Choice 2
  -1,
// At index 488 : <select_template_5F_parser_27>
C_Lexique_template_5F_scanner::kToken__5B_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__28_, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken__3A__3D_, C_Lexique_template_5F_scanner::kToken__2B__3D_, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__3A__3A_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken__3C__3C_, C_Lexique_template_5F_scanner::kToken__3E__3E_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2E_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken__2A_, C_Lexique_template_5F_scanner::kToken__2F_, C_Lexique_template_5F_scanner::kToken_mod, C_Lexique_template_5F_scanner::kToken_default, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 2
  -1,
// At index 549 : <select_template_5F_expression_5F_parser_0>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__7C_, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken__5E_, -1, // Choice 3
  -1,
// At index 590 : <select_template_5F_expression_5F_parser_1>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__26_, -1, // Choice 2
  -1,
// At index 631 : <select_template_5F_expression_5F_parser_2>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__3D__3D_, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken__21__3D_, -1, // Choice 3
C_Lexique_template_5F_scanner::kToken__3C__3D_, -1, // Choice 4
C_Lexique_template_5F_scanner::kToken__3E__3D_, -1, // Choice 5
C_Lexique_template_5F_scanner::kToken__3E_, -1, // Choice 6
C_Lexique_template_5F_scanner::kToken__3C_, -1, // Choice 7
  -1,
// At index 683 : <select_template_5F_expression_5F_parser_3>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__3C__3C_, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken__3E__3E_, -1, // Choice 3
C_Lexique_template_5F_scanner::kToken__2B_, -1, // Choice 4
C_Lexique_template_5F_scanner::kToken__2E_, -1, // Choice 5
C_Lexique_template_5F_scanner::kToken__2D_, -1, // Choice 6
  -1,
// At index 739 : <select_template_5F_expression_5F_parser_4>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken__3C__3C_, C_Lexique_template_5F_scanner::kToken__3E__3E_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2E_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2A_, -1, // Choice 2
C_Lexique_template_5F_scanner::kToken__2F_, -1, // Choice 3
C_Lexique_template_5F_scanner::kToken_mod, -1, // Choice 4
  -1,
// At index 796 : <select_template_5F_expression_5F_parser_5>
C_Lexique_template_5F_scanner::kToken__5D_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__3A_, -1, // Choice 2
  -1,
// At index 801 : <select_template_5F_expression_5F_parser_6>
C_Lexique_template_5F_scanner::kToken__5D_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2C_, -1, // Choice 2
  -1,
// At index 806 : <select_template_5F_expression_5F_parser_7>
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken__3C__3C_, C_Lexique_template_5F_scanner::kToken__3E__3E_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2E_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken__2A_, C_Lexique_template_5F_scanner::kToken__2F_, C_Lexique_template_5F_scanner::kToken_mod, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__28_, -1, // Choice 2
  -1,
// At index 862 : <select_template_5F_expression_5F_parser_8>
C_Lexique_template_5F_scanner::kToken__29_, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__2C_, -1, // Choice 2
  -1,
// At index 867 : <select_template_5F_expression_5F_parser_9>
C_Lexique_template_5F_scanner::kToken_default, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken__21_, C_Lexique_template_5F_scanner::kToken_write, C_Lexique_template_5F_scanner::kToken_to, C_Lexique_template_5F_scanner::kToken__3A_, C_Lexique_template_5F_scanner::kToken_end, C_Lexique_template_5F_scanner::kToken_identifier, C_Lexique_template_5F_scanner::kToken_template, C_Lexique_template_5F_scanner::kToken_if, C_Lexique_template_5F_scanner::kToken_in, C_Lexique_template_5F_scanner::kToken_or, C_Lexique_template_5F_scanner::kToken__3F_, C_Lexique_template_5F_scanner::kToken_function, C_Lexique_template_5F_scanner::kToken__2C_, C_Lexique_template_5F_scanner::kToken__29_, C_Lexique_template_5F_scanner::kToken_call, C_Lexique_template_5F_scanner::kToken_return, C_Lexique_template_5F_scanner::kToken_then, C_Lexique_template_5F_scanner::kToken_elsif, C_Lexique_template_5F_scanner::kToken_else, C_Lexique_template_5F_scanner::kToken_foreach, C_Lexique_template_5F_scanner::kToken_prefixedby, C_Lexique_template_5F_scanner::kToken_before, C_Lexique_template_5F_scanner::kToken_do, C_Lexique_template_5F_scanner::kToken_between, C_Lexique_template_5F_scanner::kToken_after, C_Lexique_template_5F_scanner::kToken_for, C_Lexique_template_5F_scanner::kToken_loop, C_Lexique_template_5F_scanner::kToken_let, C_Lexique_template_5F_scanner::kToken_error, C_Lexique_template_5F_scanner::kToken_warning, C_Lexique_template_5F_scanner::kToken_display, C_Lexique_template_5F_scanner::kToken__3E_, C_Lexique_template_5F_scanner::kToken__3C_, C_Lexique_template_5F_scanner::kToken_sort, C_Lexique_template_5F_scanner::kToken_by, C_Lexique_template_5F_scanner::kToken__5D_, C_Lexique_template_5F_scanner::kToken__7C_, C_Lexique_template_5F_scanner::kToken__5E_, C_Lexique_template_5F_scanner::kToken__26_, C_Lexique_template_5F_scanner::kToken__3D__3D_, C_Lexique_template_5F_scanner::kToken__21__3D_, C_Lexique_template_5F_scanner::kToken__3C__3D_, C_Lexique_template_5F_scanner::kToken__3E__3D_, C_Lexique_template_5F_scanner::kToken__3C__3C_, C_Lexique_template_5F_scanner::kToken__3E__3E_, C_Lexique_template_5F_scanner::kToken__2B_, C_Lexique_template_5F_scanner::kToken__2E_, C_Lexique_template_5F_scanner::kToken__2D_, C_Lexique_template_5F_scanner::kToken__2A_, C_Lexique_template_5F_scanner::kToken__2F_, C_Lexique_template_5F_scanner::kToken_mod, C_Lexique_template_5F_scanner::kToken_, -1, // Choice 2
  -1,
// At index 923 : <select_template_5F_expression_5F_parser_10>
C_Lexique_template_5F_scanner::kToken_true, -1, // Choice 1
C_Lexique_template_5F_scanner::kToken_false, -1, // Choice 2
  -1,
// At index 928 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gDecisionIndexes_template_grammar [54] = {
0, // at 0 : <goil_template_start_symbol>
1, // at 1 : <template_instruction>
34, // at 2 : <sorting_order>
35, // at 3 : <variable>
36, // at 4 : <variable_or_here>
37, // at 5 : <expression>
38, // at 6 : <template_instruction_list>
39, // at 7 : <template_file_name>
40, // at 8 : <relation_term>
41, // at 9 : <relation_factor>
42, // at 10 : <simple_expression>
43, // at 11 : <term>
44, // at 12 : <factor>
84, // at 13 : <select_template_5F_parser_0>
89, // at 14 : <select_template_5F_parser_1>
95, // at 15 : <select_template_5F_parser_2>
123, // at 16 : <select_template_5F_parser_3>
150, // at 17 : <select_template_5F_parser_4>
177, // at 18 : <select_template_5F_parser_5>
182, // at 19 : <select_template_5F_parser_6>
187, // at 20 : <select_template_5F_parser_7>
211, // at 21 : <select_template_5F_parser_8>
216, // at 22 : <select_template_5F_parser_9>
222, // at 23 : <select_template_5F_parser_10>
227, // at 24 : <select_template_5F_parser_11>
253, // at 25 : <select_template_5F_parser_12>
259, // at 26 : <select_template_5F_parser_13>
264, // at 27 : <select_template_5F_parser_14>
270, // at 28 : <select_template_5F_parser_15>
275, // at 29 : <select_template_5F_parser_16>
280, // at 30 : <select_template_5F_parser_17>
285, // at 31 : <select_template_5F_parser_18>
290, // at 32 : <select_template_5F_parser_19>
296, // at 33 : <select_template_5F_parser_20>
301, // at 34 : <select_template_5F_parser_21>
330, // at 35 : <select_template_5F_parser_22>
335, // at 36 : <select_template_5F_parser_23>
340, // at 37 : <select_template_5F_parser_24>
367, // at 38 : <select_template_5F_parser_25>
428, // at 39 : <select_template_5F_parser_26>
488, // at 40 : <select_template_5F_parser_27>
549, // at 41 : <select_template_5F_expression_5F_parser_0>
590, // at 42 : <select_template_5F_expression_5F_parser_1>
631, // at 43 : <select_template_5F_expression_5F_parser_2>
683, // at 44 : <select_template_5F_expression_5F_parser_3>
739, // at 45 : <select_template_5F_expression_5F_parser_4>
796, // at 46 : <select_template_5F_expression_5F_parser_5>
801, // at 47 : <select_template_5F_expression_5F_parser_6>
806, // at 48 : <select_template_5F_expression_5F_parser_7>
862, // at 49 : <select_template_5F_expression_5F_parser_8>
867, // at 50 : <select_template_5F_expression_5F_parser_9>
923, // at 51 : <select_template_5F_expression_5F_parser_10>
928, // at 52 : <>
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'goil_template_start_symbol' non terminal implementation                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_goil_5F_template_5F_start_5F_symbol_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_goil_5F_template_5F_start_5F_symbol_i10_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_goil_5F_template_5F_start_5F_symbol_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                GALGAS_TfieldMap parameter_4,
                                GALGAS_string & parameter_5,
                                GALGAS_Tvalue & parameter_6,
                                GALGAS_Ttype & parameter_7,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_goil_5F_template_5F_start_5F_symbol_i10_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
}

void cGrammar_template_5F_grammar::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_template_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_template_5F_scanner * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_template_5F_scanner (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_template_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_template_5F_scanner * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_template_5F_scanner (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performTopDownParsing (gProductions_template_grammar, gProductionNames_template_grammar, gProductionIndexes_template_grammar,
                                    gFirstProductionIndexes_template_grammar, gDecision_template_grammar, gDecisionIndexes_template_grammar, 423) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                const GALGAS_string  parameter_1,
                                const GALGAS_string  parameter_2,
                                const GALGAS_string  parameter_3,
                                GALGAS_TfieldMap  parameter_4,
                                GALGAS_string &  parameter_5,
                                GALGAS_Tvalue &  parameter_6,
                                GALGAS_Ttype &  parameter_7
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
    C_Lexique_template_5F_scanner * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_template_5F_scanner (inCompiler, "", "", filePath COMMA_HERE)) ;
    if (scanner->sourceText () != NULL) {
      const bool ok = scanner->performTopDownParsing (gProductions_template_grammar, gProductionNames_template_grammar, gProductionIndexes_template_grammar,
                                                      gFirstProductionIndexes_template_grammar, gDecision_template_grammar, gDecisionIndexes_template_grammar, 423) ;
      if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
        cGrammar_template_5F_grammar grammar ;
        grammar.nt_goil_5F_template_5F_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                const GALGAS_string  parameter_1,
                                const GALGAS_string  parameter_2,
                                const GALGAS_string  parameter_3,
                                GALGAS_TfieldMap  parameter_4,
                                GALGAS_string &  parameter_5,
                                GALGAS_Tvalue &  parameter_6,
                                GALGAS_Ttype &  parameter_7
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (inSourceString.isValid ()) {
    const C_String sourceString = inSourceString.stringValue () ;
    C_Lexique_template_5F_scanner * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_template_5F_scanner (inCompiler, sourceString, "" COMMA_HERE)) ;
    const bool ok = scanner->performTopDownParsing (gProductions_template_grammar, gProductionNames_template_grammar, gProductionIndexes_template_grammar,
                                                    gFirstProductionIndexes_template_grammar, gDecision_template_grammar, gDecisionIndexes_template_grammar, 423) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_template_5F_grammar grammar ;
      grammar.nt_goil_5F_template_5F_start_5F_symbol_ (parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, scanner) ;
    }
    macroDetachSharedObject (scanner) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'template_instruction' non terminal implementation                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_template_5F_instruction_parse (C_Lexique_template_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
    rule_template_5F_parser_template_5F_instruction_i0_parse(inLexique) ;
    break ;
  case 2 :
    rule_template_5F_parser_template_5F_instruction_i1_parse(inLexique) ;
    break ;
  case 3 :
    rule_template_5F_parser_template_5F_instruction_i3_parse(inLexique) ;
    break ;
  case 4 :
    rule_template_5F_parser_template_5F_instruction_i4_parse(inLexique) ;
    break ;
  case 5 :
    rule_template_5F_parser_template_5F_instruction_i5_parse(inLexique) ;
    break ;
  case 6 :
    rule_template_5F_parser_template_5F_instruction_i6_parse(inLexique) ;
    break ;
  case 7 :
    rule_template_5F_parser_template_5F_instruction_i7_parse(inLexique) ;
    break ;
  case 8 :
    rule_template_5F_parser_template_5F_instruction_i8_parse(inLexique) ;
    break ;
  case 9 :
    rule_template_5F_parser_template_5F_instruction_i11_parse(inLexique) ;
    break ;
  case 10 :
    rule_template_5F_parser_template_5F_instruction_i12_parse(inLexique) ;
    break ;
  case 11 :
    rule_template_5F_parser_template_5F_instruction_i13_parse(inLexique) ;
    break ;
  case 12 :
    rule_template_5F_parser_template_5F_instruction_i14_parse(inLexique) ;
    break ;
  case 13 :
    rule_template_5F_parser_template_5F_instruction_i16_parse(inLexique) ;
    break ;
  case 14 :
    rule_template_5F_parser_template_5F_instruction_i17_parse(inLexique) ;
    break ;
  case 15 :
    rule_template_5F_parser_template_5F_instruction_i18_parse(inLexique) ;
    break ;
  case 16 :
    rule_template_5F_parser_template_5F_instruction_i20_parse(inLexique) ;
    break ;
  default :
    break ;
  }
}

void cGrammar_template_5F_grammar::nt_template_5F_instruction_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                GALGAS_TfieldMap & parameter_4,
                                GALGAS_string & parameter_5,
                                GALGAS_Tvalue & parameter_6,
                                GALGAS_Ttype & parameter_7,
                                C_Lexique_template_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
    rule_template_5F_parser_template_5F_instruction_i0_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 2 :
    rule_template_5F_parser_template_5F_instruction_i1_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 3 :
    rule_template_5F_parser_template_5F_instruction_i3_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 4 :
    rule_template_5F_parser_template_5F_instruction_i4_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 5 :
    rule_template_5F_parser_template_5F_instruction_i5_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 6 :
    rule_template_5F_parser_template_5F_instruction_i6_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 7 :
    rule_template_5F_parser_template_5F_instruction_i7_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 8 :
    rule_template_5F_parser_template_5F_instruction_i8_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 9 :
    rule_template_5F_parser_template_5F_instruction_i11_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 10 :
    rule_template_5F_parser_template_5F_instruction_i12_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 11 :
    rule_template_5F_parser_template_5F_instruction_i13_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 12 :
    rule_template_5F_parser_template_5F_instruction_i14_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 13 :
    rule_template_5F_parser_template_5F_instruction_i16_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 14 :
    rule_template_5F_parser_template_5F_instruction_i17_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 15 :
    rule_template_5F_parser_template_5F_instruction_i18_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  case 16 :
    rule_template_5F_parser_template_5F_instruction_i20_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
    break ;
  default :
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'sorting_order' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_sorting_5F_order_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_sorting_5F_order_i19_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_sorting_5F_order_ (GALGAS_lsint & parameter_1,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_sorting_5F_order_i19_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'variable' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_variable_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_variable_i21_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_variable_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_TvarPath & parameter_5,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_variable_i21_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'variable_or_here' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_variable_5F_or_5F_here_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_variable_5F_or_5F_here_i15_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_variable_5F_or_5F_here_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_location & parameter_5,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_variable_5F_or_5F_here_i15_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'expression' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_expression_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_expression_i0_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_expression_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_Tvalue & parameter_5,
                                GALGAS_Ttype & parameter_6,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_expression_i0_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'template_instruction_list' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_template_5F_instruction_5F_list_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_template_5F_instruction_5F_list_i9_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_template_5F_instruction_5F_list_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                GALGAS_TfieldMap & parameter_4,
                                GALGAS_string & parameter_5,
                                GALGAS_Tvalue & parameter_6,
                                GALGAS_Ttype & parameter_7,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_template_5F_instruction_5F_list_i9_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, parameter_7, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'template_file_name' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_template_5F_file_5F_name_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_template_5F_file_5F_name_i2_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_template_5F_file_5F_name_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_lstring & parameter_5,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_parser_template_5F_file_5F_name_i2_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'relation_term' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_relation_5F_term_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_relation_5F_term_i1_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_relation_5F_term_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_Tvalue & parameter_5,
                                GALGAS_Ttype & parameter_6,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_relation_5F_term_i1_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'relation_factor' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_relation_5F_factor_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_relation_5F_factor_i2_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_relation_5F_factor_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_Tvalue & parameter_5,
                                GALGAS_Ttype & parameter_6,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_relation_5F_factor_i2_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'simple_expression' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_simple_5F_expression_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_simple_5F_expression_i3_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_simple_5F_expression_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_Tvalue & parameter_5,
                                GALGAS_Ttype & parameter_6,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_simple_5F_expression_i3_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         'term' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_term_parse (C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_term_i4_parse(inLexique) ;
}

void cGrammar_template_5F_grammar::nt_term_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_Tvalue & parameter_5,
                                GALGAS_Ttype & parameter_6,
                                C_Lexique_template_5F_scanner * inLexique) {
  rule_template_5F_expression_5F_parser_term_i4_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        'factor' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_template_5F_grammar::nt_factor_parse (C_Lexique_template_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
    rule_template_5F_expression_5F_parser_factor_i5_parse(inLexique) ;
    break ;
  case 2 :
    rule_template_5F_expression_5F_parser_factor_i6_parse(inLexique) ;
    break ;
  case 3 :
    rule_template_5F_expression_5F_parser_factor_i7_parse(inLexique) ;
    break ;
  case 4 :
    rule_template_5F_expression_5F_parser_factor_i8_parse(inLexique) ;
    break ;
  case 5 :
    rule_template_5F_expression_5F_parser_factor_i9_parse(inLexique) ;
    break ;
  case 6 :
    rule_template_5F_expression_5F_parser_factor_i10_parse(inLexique) ;
    break ;
  case 7 :
    rule_template_5F_expression_5F_parser_factor_i11_parse(inLexique) ;
    break ;
  case 8 :
    rule_template_5F_expression_5F_parser_factor_i12_parse(inLexique) ;
    break ;
  case 9 :
    rule_template_5F_expression_5F_parser_factor_i13_parse(inLexique) ;
    break ;
  case 10 :
    rule_template_5F_expression_5F_parser_factor_i14_parse(inLexique) ;
    break ;
  case 11 :
    rule_template_5F_expression_5F_parser_factor_i15_parse(inLexique) ;
    break ;
  case 12 :
    rule_template_5F_expression_5F_parser_factor_i16_parse(inLexique) ;
    break ;
  case 13 :
    rule_template_5F_expression_5F_parser_factor_i17_parse(inLexique) ;
    break ;
  case 14 :
    rule_template_5F_expression_5F_parser_factor_i18_parse(inLexique) ;
    break ;
  case 15 :
    rule_template_5F_expression_5F_parser_factor_i19_parse(inLexique) ;
    break ;
  case 16 :
    rule_template_5F_expression_5F_parser_factor_i20_parse(inLexique) ;
    break ;
  case 17 :
    rule_template_5F_expression_5F_parser_factor_i21_parse(inLexique) ;
    break ;
  case 18 :
    rule_template_5F_expression_5F_parser_factor_i22_parse(inLexique) ;
    break ;
  case 19 :
    rule_template_5F_expression_5F_parser_factor_i23_parse(inLexique) ;
    break ;
  default :
    break ;
  }
}

void cGrammar_template_5F_grammar::nt_factor_ (const GALGAS_string parameter_1,
                                const GALGAS_string parameter_2,
                                const GALGAS_string parameter_3,
                                const GALGAS_TfieldMap parameter_4,
                                GALGAS_Tvalue & parameter_5,
                                GALGAS_Ttype & parameter_6,
                                C_Lexique_template_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 1 :
    rule_template_5F_expression_5F_parser_factor_i5_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 2 :
    rule_template_5F_expression_5F_parser_factor_i6_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 3 :
    rule_template_5F_expression_5F_parser_factor_i7_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 4 :
    rule_template_5F_expression_5F_parser_factor_i8_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 5 :
    rule_template_5F_expression_5F_parser_factor_i9_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 6 :
    rule_template_5F_expression_5F_parser_factor_i10_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 7 :
    rule_template_5F_expression_5F_parser_factor_i11_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 8 :
    rule_template_5F_expression_5F_parser_factor_i12_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 9 :
    rule_template_5F_expression_5F_parser_factor_i13_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 10 :
    rule_template_5F_expression_5F_parser_factor_i14_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 11 :
    rule_template_5F_expression_5F_parser_factor_i15_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 12 :
    rule_template_5F_expression_5F_parser_factor_i16_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 13 :
    rule_template_5F_expression_5F_parser_factor_i17_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 14 :
    rule_template_5F_expression_5F_parser_factor_i18_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 15 :
    rule_template_5F_expression_5F_parser_factor_i19_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 16 :
    rule_template_5F_expression_5F_parser_factor_i20_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 17 :
    rule_template_5F_expression_5F_parser_factor_i21_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 18 :
    rule_template_5F_expression_5F_parser_factor_i22_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  case 19 :
    rule_template_5F_expression_5F_parser_factor_i23_(parameter_1, parameter_2, parameter_3, parameter_4, parameter_5, parameter_6, inLexique) ;
    break ;
  default :
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_0' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_0 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_1' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_1 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_2' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_2 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_3' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_3 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_4' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_4 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_5' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_5 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_6' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_6 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_7' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_7 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_8' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_8 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_9' added non terminal implementation                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_9 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_10' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_10 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_11' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_11 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_12' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_12 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_13' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_13 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_14' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_14 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_15' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_15 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_16' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_16 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_17' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_17 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_18' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_18 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_19' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_19 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_20' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_20 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_21' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_21 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_22' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_22 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_23' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_23 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_24' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_24 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_25' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_25 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_26' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_26 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                          'select_template_5F_parser_27' added non terminal implementation                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_parser_27 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_0' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_0 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_1' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_1 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_2' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_2 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_3' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_3 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_4' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_4 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_5' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_5 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_6' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_6 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_7' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_7 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_8' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_8 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_9' added non terminal implementation                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_9 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                   'select_template_5F_expression_5F_parser_10' added non terminal implementation                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_template_5F_grammar::select_template_5F_expression_5F_parser_10 (C_Lexique_template_5F_scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*



//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_definition_i0_ (GALGAS_implementation & ioArgument_implementation,
                                                                                                       C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION) COMMA_SOURCE_FILE ("implementation_parser.galgas", 56)) ;
  GALGAS_lstring var_implementationName = inCompiler->synthetizedAttribute_att_5F_token () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 56)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 56)) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_0 (inCompiler)) {
    case 2: {
      nt_implementation_5F_objects_ (ioArgument_implementation, inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 58)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 60)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 60)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_definition_i0_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION) COMMA_SOURCE_FILE ("implementation_parser.galgas", 56)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 56)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 56)) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_0 (inCompiler)) {
    case 2: {
      nt_implementation_5F_objects_parse (inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 58)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 60)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 60)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_objects_i1_ (GALGAS_implementation & ioArgument_implementation,
                                                                                                    C_Lexique_goil_5F_lexique * inCompiler) {
  GALGAS_implementationMap var_imp = ioArgument_implementation.reader_imp (SOURCE_FILE ("implementation_parser.galgas", 88)) ;
  GALGAS_lstring var_objectName = inCompiler->synthetizedAttribute_att_5F_token () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 90)) ;
  GALGAS_lbool var_multiple ;
  switch (select_implementation_5F_parser_1 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 94)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 94)) ;
    var_multiple = GALGAS_lbool::constructor_new (GALGAS_bool (true), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 94))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 94)) ;
  } break ;
  case 2: {
    var_multiple = GALGAS_lbool::constructor_new (GALGAS_bool (false), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 96))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 96)) ;
  } break ;
  default:
    break ;
  }
  GALGAS_implementationObjectMap var_objectAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 99)) ;
  nt_implementation_5F_list_ (var_objectAttributes, inCompiler) ;
  GALGAS_implementationObject var_newObject = GALGAS_implementationObject::constructor_new (var_multiple, var_objectAttributes  COMMA_SOURCE_FILE ("implementation_parser.galgas", 102)) ;
  GALGAS_implementationObject var_object ;
  const enumGalgasBool test_0 = callCategoryReader_hasKey ((const cPtr_implementation *) ioArgument_implementation.ptr (), var_objectName.reader_string (SOURCE_FILE ("implementation_parser.galgas", 107)), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 107)).boolEnum () ;
  if (kBoolTrue == test_0) {
    {
    var_imp.modifier_del (var_objectName, var_object, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 108)) ;
    }
    var_object = callCategoryReader_mergeImplementationObjectWith ((const cPtr_implementationObject *) var_object.ptr (), var_newObject, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 109)) ;
  }else if (kBoolFalse == test_0) {
    var_object = var_newObject ;
  }
  {
  var_imp.modifier_put (var_objectName, var_object, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 126)) ;
  }
  {
  ioArgument_implementation.modifier_setImp (var_imp COMMA_SOURCE_FILE ("implementation_parser.galgas", 127)) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_objects_i1_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 90)) ;
  switch (select_implementation_5F_parser_1 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 94)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 94)) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  nt_implementation_5F_list_parse (inCompiler) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_list_i2_ (GALGAS_implementationObjectMap & ioArgument_objectAttributes,
                                                                                                 C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 132)) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_2 (inCompiler)) {
    case 2: {
      GALGAS_lstring var_attributeName ;
      GALGAS_impType var_type ;
      nt_implementation_5F_type_ (var_attributeName, var_type, inCompiler) ;
      const enumGalgasBool test_1 = ioArgument_objectAttributes.reader_hasKey (var_attributeName.reader_string (SOURCE_FILE ("implementation_parser.galgas", 138)) COMMA_SOURCE_FILE ("implementation_parser.galgas", 138)).boolEnum () ;
      if (kBoolTrue == test_1) {
        GALGAS_impType var_previousType ;
        ioArgument_objectAttributes.method_get (var_attributeName, var_previousType, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 140)) ;
        const enumGalgasBool test_2 = function_checkNewTypeWithinPreviousType (var_attributeName, var_previousType, var_type, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 144)).boolEnum () ;
        if (kBoolTrue == test_2) {
          {
          GALGAS_impType joker_4424 ; // Joker input parameter
          ioArgument_objectAttributes.modifier_del (var_attributeName, joker_4424, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 147)) ;
          }
          {
          ioArgument_objectAttributes.modifier_put (var_attributeName, var_type, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 148)) ;
          }
        }
      }else if (kBoolFalse == test_1) {
        {
        ioArgument_objectAttributes.modifier_put (var_attributeName, var_type, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 151)) ;
        }
      }
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 153)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 155)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_list_i2_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 132)) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_2 (inCompiler)) {
    case 2: {
      nt_implementation_5F_type_parse (inCompiler) ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 153)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 155)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_type_i3_ (GALGAS_lstring & outArgument_attributeName,
                                                                                                 GALGAS_impType & outArgument_type,
                                                                                                 C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_attributeName.drop () ; // Release 'out' argument
  outArgument_type.drop () ; // Release 'out' argument
  switch (select_implementation_5F_parser_3 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_33__32_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 162)) ;
    nt_number_5F_options_ (outArgument_attributeName, outArgument_type, GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE ("implementation_parser.galgas", 162)), inCompiler) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_33__32_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 164)) ;
    nt_number_5F_options_ (outArgument_attributeName, outArgument_type, GALGAS_dataType::constructor_sint_33__32_Number (SOURCE_FILE ("implementation_parser.galgas", 164)), inCompiler) ;
  } break ;
  case 3: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_36__34_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 166)) ;
    nt_number_5F_options_ (outArgument_attributeName, outArgument_type, GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_parser.galgas", 166)), inCompiler) ;
  } break ;
  case 4: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_36__34_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 168)) ;
    nt_number_5F_options_ (outArgument_attributeName, outArgument_type, GALGAS_dataType::constructor_sint_36__34_Number (SOURCE_FILE ("implementation_parser.galgas", 168)), inCompiler) ;
  } break ;
  case 5: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FLOAT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 170)) ;
    nt_number_5F_options_ (outArgument_attributeName, outArgument_type, GALGAS_dataType::constructor_floatNumber (SOURCE_FILE ("implementation_parser.galgas", 170)), inCompiler) ;
  } break ;
  case 6: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ENUM) COMMA_SOURCE_FILE ("implementation_parser.galgas", 172)) ;
    nt_enum_5F_options_ (outArgument_attributeName, outArgument_type, inCompiler) ;
  } break ;
  case 7: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_BOOLEAN) COMMA_SOURCE_FILE ("implementation_parser.galgas", 174)) ;
    nt_boolean_5F_options_ (outArgument_attributeName, outArgument_type, inCompiler) ;
  } break ;
  case 8: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRING) COMMA_SOURCE_FILE ("implementation_parser.galgas", 176)) ;
    nt_string_5F_options_ (outArgument_attributeName, outArgument_type, inCompiler) ;
  } break ;
  case 9: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_IDENTIFIER) COMMA_SOURCE_FILE ("implementation_parser.galgas", 178)) ;
    nt_type_5F_options_ (outArgument_attributeName, outArgument_type, GALGAS_dataType::constructor_identifier (SOURCE_FILE ("implementation_parser.galgas", 178)), inCompiler) ;
  } break ;
  case 10: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRUCT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 180)) ;
    nt_struct_5F_options_ (outArgument_attributeName, outArgument_type, inCompiler) ;
  } break ;
  case 11: {
    GALGAS_lstring var_typeName ;
    var_typeName = inCompiler->synthetizedAttribute_att_5F_token () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 182)) ;
    nt_objref_5F_option_ (outArgument_attributeName, outArgument_type, var_typeName, inCompiler) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_implementation_5F_type_i3_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_implementation_5F_parser_3 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_33__32_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 162)) ;
    nt_number_5F_options_parse (inCompiler) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_33__32_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 164)) ;
    nt_number_5F_options_parse (inCompiler) ;
  } break ;
  case 3: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_36__34_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 166)) ;
    nt_number_5F_options_parse (inCompiler) ;
  } break ;
  case 4: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_36__34_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 168)) ;
    nt_number_5F_options_parse (inCompiler) ;
  } break ;
  case 5: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FLOAT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 170)) ;
    nt_number_5F_options_parse (inCompiler) ;
  } break ;
  case 6: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_ENUM) COMMA_SOURCE_FILE ("implementation_parser.galgas", 172)) ;
    nt_enum_5F_options_parse (inCompiler) ;
  } break ;
  case 7: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_BOOLEAN) COMMA_SOURCE_FILE ("implementation_parser.galgas", 174)) ;
    nt_boolean_5F_options_parse (inCompiler) ;
  } break ;
  case 8: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRING) COMMA_SOURCE_FILE ("implementation_parser.galgas", 176)) ;
    nt_string_5F_options_parse (inCompiler) ;
  } break ;
  case 9: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_IDENTIFIER) COMMA_SOURCE_FILE ("implementation_parser.galgas", 178)) ;
    nt_type_5F_options_parse (inCompiler) ;
  } break ;
  case 10: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRUCT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 180)) ;
    nt_struct_5F_options_parse (inCompiler) ;
  } break ;
  case 11: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 182)) ;
    nt_objref_5F_option_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_struct_5F_options_i4_ (GALGAS_lstring & outArgument_name,
                                                                                            GALGAS_impType & outArgument_options,
                                                                                            C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  GALGAS_implementationObjectMap var_structAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 189)) ;
  switch (select_implementation_5F_parser_4 (inCompiler)) {
  case 1: {
    nt_implementation_5F_list_ (var_structAttributes, inCompiler) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_lstring var_description ;
  nt_description_ (var_description, inCompiler) ;
  GALGAS_locationList temp_0 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 198)) ;
  temp_0.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 198))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 198)) ;
  GALGAS_lstringlist temp_1 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 198)) ;
  temp_1.addAssign_operation (var_description  COMMA_SOURCE_FILE ("implementation_parser.galgas", 198)) ;
  outArgument_options = GALGAS_impStructType::constructor_new (temp_0, GALGAS_dataType::constructor_structType (SOURCE_FILE ("implementation_parser.galgas", 198)), outArgument_name, var_multiple, temp_1, var_structAttributes  COMMA_SOURCE_FILE ("implementation_parser.galgas", 198)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_struct_5F_options_i4_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_implementation_5F_parser_4 (inCompiler)) {
  case 1: {
    nt_implementation_5F_list_parse (inCompiler) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  nt_description_parse (inCompiler) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_objref_5F_option_i5_ (GALGAS_lstring & outArgument_name,
                                                                                           GALGAS_impType & outArgument_options,
                                                                                           GALGAS_lstring inArgument_ref,
                                                                                           C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, inArgument_ref.reader_string (SOURCE_FILE ("implementation_parser.galgas", 205)).reader_rightSubString (GALGAS_uint ((uint32_t) 5U) COMMA_SOURCE_FILE ("implementation_parser.galgas", 205)).objectCompare (GALGAS_string ("_TYPE"))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 206)), GALGAS_string ("an object reference must end with _TYPE")  COMMA_SOURCE_FILE ("implementation_parser.galgas", 206)) ;
  }else if (kBoolFalse == test_0) {
    inArgument_ref = GALGAS_lstring::constructor_new (inArgument_ref.mAttribute_string.reader_leftSubString (inArgument_ref.mAttribute_string.reader_length (SOURCE_FILE ("implementation_parser.galgas", 208)).substract_operation (GALGAS_uint ((uint32_t) 5U), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 208)) COMMA_SOURCE_FILE ("implementation_parser.galgas", 208)), inArgument_ref.reader_location (SOURCE_FILE ("implementation_parser.galgas", 208))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 208)) ;
  }
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_lstring var_description ;
  nt_description_ (var_description, inCompiler) ;
  GALGAS_locationList temp_1 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 215)) ;
  temp_1.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 215))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 215)) ;
  GALGAS_lstringlist temp_2 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 215)) ;
  temp_2.addAssign_operation (var_description  COMMA_SOURCE_FILE ("implementation_parser.galgas", 215)) ;
  outArgument_options = GALGAS_refType::constructor_new (temp_1, GALGAS_dataType::constructor_objectType (SOURCE_FILE ("implementation_parser.galgas", 215)), outArgument_name, var_multiple, temp_2, inArgument_ref  COMMA_SOURCE_FILE ("implementation_parser.galgas", 215)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_objref_5F_option_i5_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  nt_description_parse (inCompiler) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_string_5F_options_i6_ (GALGAS_lstring & outArgument_name,
                                                                                            GALGAS_impType & outArgument_options,
                                                                                            C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  GALGAS_bool var_withAuto ;
  nt_with_5F_auto_ (var_withAuto, inCompiler) ;
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_object_5F_t var_defaultValue ;
  GALGAS_lstring var_oil_5F_desc ;
  switch (select_implementation_5F_parser_5 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 230)) ;
    switch (select_implementation_5F_parser_6 (inCompiler)) {
    case 1: {
      GALGAS_lstring var_stringValue = inCompiler->synthetizedAttribute_a_5F_string () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("implementation_parser.galgas", 232)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_stringAttribute::constructor_new (var_oil_5F_desc, var_stringValue.reader_location (SOURCE_FILE ("implementation_parser.galgas", 234)), var_stringValue.reader_string (SOURCE_FILE ("implementation_parser.galgas", 234))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 234)) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 236)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_auto::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 238))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 238)) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 240)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 242))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 242)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 246))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 246)) ;
  } break ;
  default:
    break ;
  }
  GALGAS_locationList temp_0 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 248)) ;
  temp_0.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 248))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 248)) ;
  GALGAS_lstringlist temp_1 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 248)) ;
  temp_1.addAssign_operation (var_oil_5F_desc  COMMA_SOURCE_FILE ("implementation_parser.galgas", 248)) ;
  outArgument_options = GALGAS_impAutoDefaultType::constructor_new (temp_0, GALGAS_dataType::constructor_string (SOURCE_FILE ("implementation_parser.galgas", 248)), outArgument_name, var_multiple, temp_1, var_withAuto, var_defaultValue  COMMA_SOURCE_FILE ("implementation_parser.galgas", 248)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_string_5F_options_i6_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_with_5F_auto_parse (inCompiler) ;
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  switch (select_implementation_5F_parser_5 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 230)) ;
    switch (select_implementation_5F_parser_6 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) COMMA_SOURCE_FILE ("implementation_parser.galgas", 232)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 236)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 240)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_boolean_5F_options_i7_ (GALGAS_lstring & outArgument_name,
                                                                                             GALGAS_impType & outArgument_options,
                                                                                             C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  GALGAS_bool var_withAuto ;
  nt_with_5F_auto_ (var_withAuto, inCompiler) ;
  GALGAS_implementationObjectMap var_trueSubAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 256)) ;
  GALGAS_implementationObjectMap var_falseSubAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 257)) ;
  switch (select_implementation_5F_parser_7 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 259)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_SOURCE_FILE ("implementation_parser.galgas", 260)) ;
    switch (select_implementation_5F_parser_8 (inCompiler)) {
    case 1: {
      nt_implementation_5F_list_ (var_trueSubAttributes, inCompiler) ;
    } break ;
    case 2: {
      var_trueSubAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 264)) ;
    } break ;
    default:
      break ;
    }
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 266)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_SOURCE_FILE ("implementation_parser.galgas", 267)) ;
    switch (select_implementation_5F_parser_9 (inCompiler)) {
    case 1: {
      nt_implementation_5F_list_ (var_falseSubAttributes, inCompiler) ;
    } break ;
    case 2: {
      var_falseSubAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 271)) ;
    } break ;
    default:
      break ;
    }
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 273)) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_object_5F_t var_defaultValue ;
  GALGAS_lstring var_oil_5F_desc ;
  switch (select_implementation_5F_parser_10 (inCompiler)) {
  case 1: {
    GALGAS_lbool var_boolValue ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 282)) ;
    nt_boolean_ (var_boolValue, inCompiler) ;
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_defaultValue = GALGAS_boolAttribute::constructor_new (var_oil_5F_desc, var_boolValue.reader_location (SOURCE_FILE ("implementation_parser.galgas", 284)), var_boolValue.reader_bool (SOURCE_FILE ("implementation_parser.galgas", 284)), GALGAS_objectAttributes::constructor_new (GALGAS_identifierMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 284))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 284))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 284)) ;
  } break ;
  case 2: {
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 287))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 287)) ;
  } break ;
  default:
    break ;
  }
  GALGAS_locationList temp_0 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 289)) ;
  temp_0.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 289))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 289)) ;
  GALGAS_lstringlist temp_1 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 289)) ;
  temp_1.addAssign_operation (var_oil_5F_desc  COMMA_SOURCE_FILE ("implementation_parser.galgas", 289)) ;
  outArgument_options = GALGAS_impBoolType::constructor_new (temp_0, GALGAS_dataType::constructor_boolean (SOURCE_FILE ("implementation_parser.galgas", 289)), outArgument_name, var_multiple, temp_1, var_withAuto, var_defaultValue, var_trueSubAttributes, var_falseSubAttributes  COMMA_SOURCE_FILE ("implementation_parser.galgas", 289)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_boolean_5F_options_i7_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_with_5F_auto_parse (inCompiler) ;
  switch (select_implementation_5F_parser_7 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 259)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) COMMA_SOURCE_FILE ("implementation_parser.galgas", 260)) ;
    switch (select_implementation_5F_parser_8 (inCompiler)) {
    case 1: {
      nt_implementation_5F_list_parse (inCompiler) ;
    } break ;
    case 2: {
    } break ;
    default:
      break ;
    }
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 266)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) COMMA_SOURCE_FILE ("implementation_parser.galgas", 267)) ;
    switch (select_implementation_5F_parser_9 (inCompiler)) {
    case 1: {
      nt_implementation_5F_list_parse (inCompiler) ;
    } break ;
    case 2: {
    } break ;
    default:
      break ;
    }
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 273)) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  switch (select_implementation_5F_parser_10 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 282)) ;
    nt_boolean_parse (inCompiler) ;
    nt_description_parse (inCompiler) ;
  } break ;
  case 2: {
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_enum_5F_item_i8_ (GALGAS_enumValues & ioArgument_items,
                                                                                       C_Lexique_goil_5F_lexique * inCompiler) {
  GALGAS_lstring var_enumItem ;
  GALGAS_implementationObjectMap var_subAttributes = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 295)) ;
  nt_identifier_5F_or_5F_enum_5F_value_ (var_enumItem, inCompiler) ;
  switch (select_implementation_5F_parser_11 (inCompiler)) {
  case 1: {
    nt_implementation_5F_list_ (var_subAttributes, inCompiler) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  {
  ioArgument_items.modifier_put (var_enumItem, var_subAttributes, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 300)) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_enum_5F_item_i8_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_identifier_5F_or_5F_enum_5F_value_parse (inCompiler) ;
  switch (select_implementation_5F_parser_11 (inCompiler)) {
  case 1: {
    nt_implementation_5F_list_parse (inCompiler) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_enum_5F_options_i9_ (GALGAS_lstring & outArgument_name,
                                                                                          GALGAS_impType & outArgument_options,
                                                                                          C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  GALGAS_bool var_withAuto ;
  nt_with_5F_auto_ (var_withAuto, inCompiler) ;
  GALGAS_enumValues var_items = GALGAS_enumValues::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 308)) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 309)) ;
  nt_enum_5F_item_ (var_items, inCompiler) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_12 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 313)) ;
      nt_enum_5F_item_ (var_items, inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 315)) ;
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_lstring var_oil_5F_desc ;
  GALGAS_object_5F_t var_defaultValue ;
  switch (select_implementation_5F_parser_13 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 322)) ;
    switch (select_implementation_5F_parser_14 (inCompiler)) {
    case 1: {
      GALGAS_lstring var_stringValue ;
      var_stringValue = inCompiler->synthetizedAttribute_att_5F_token () ;
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 325)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_enumAttribute::constructor_new (var_oil_5F_desc, var_stringValue.reader_location (SOURCE_FILE ("implementation_parser.galgas", 327)), var_stringValue.reader_string (SOURCE_FILE ("implementation_parser.galgas", 327)), GALGAS_objectAttributes::constructor_new (GALGAS_identifierMap::constructor_emptyMap (SOURCE_FILE ("implementation_parser.galgas", 327))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 327))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 327)) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 329)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_auto::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 331))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 331)) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 333)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 335))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 335)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 339))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 339)) ;
  } break ;
  default:
    break ;
  }
  GALGAS_locationList temp_1 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 341)) ;
  temp_1.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 341))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 341)) ;
  GALGAS_lstringlist temp_2 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 341)) ;
  temp_2.addAssign_operation (var_oil_5F_desc  COMMA_SOURCE_FILE ("implementation_parser.galgas", 341)) ;
  outArgument_options = GALGAS_impEnumType::constructor_new (temp_1, GALGAS_dataType::constructor_enumeration (SOURCE_FILE ("implementation_parser.galgas", 341)), outArgument_name, var_multiple, temp_2, var_withAuto, var_defaultValue, var_items  COMMA_SOURCE_FILE ("implementation_parser.galgas", 341)) ;
  {
  routine_verifyEnum (outArgument_options, inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 342)) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_enum_5F_options_i9_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_with_5F_auto_parse (inCompiler) ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 309)) ;
  nt_enum_5F_item_parse (inCompiler) ;
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_12 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 313)) ;
      nt_enum_5F_item_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 315)) ;
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  switch (select_implementation_5F_parser_13 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 322)) ;
    switch (select_implementation_5F_parser_14 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 325)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 329)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 333)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_number_5F_options_i10_ (GALGAS_lstring & outArgument_name,
                                                                                             GALGAS_impType & outArgument_options,
                                                                                             const GALGAS_dataType constinArgument_type,
                                                                                             C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  GALGAS_bool var_withAuto ;
  nt_with_5F_auto_ (var_withAuto, inCompiler) ;
  GALGAS_attributeRange var_range ;
  nt_range_ (var_range, constinArgument_type, inCompiler) ;
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_lstring var_oil_5F_desc ;
  GALGAS_object_5F_t var_defaultValue ;
  switch (select_implementation_5F_parser_15 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 359)) ;
    switch (select_implementation_5F_parser_16 (inCompiler)) {
    case 1: {
      nt_int_5F_or_5F_float_ (var_defaultValue, constinArgument_type, inCompiler) ;
      var_oil_5F_desc = var_defaultValue.reader_oil_5F_desc (SOURCE_FILE ("implementation_parser.galgas", 362)) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 364)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 366))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 366)) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 368)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_auto::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 370))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 370)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 374))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 374)) ;
  } break ;
  default:
    break ;
  }
  GALGAS_locationList temp_0 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 376)) ;
  temp_0.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 376))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 376)) ;
  GALGAS_lstringlist temp_1 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 376)) ;
  temp_1.addAssign_operation (var_oil_5F_desc  COMMA_SOURCE_FILE ("implementation_parser.galgas", 376)) ;
  outArgument_options = GALGAS_impRangedType::constructor_new (temp_0, constinArgument_type, outArgument_name, var_multiple, temp_1, var_withAuto, var_defaultValue, var_range  COMMA_SOURCE_FILE ("implementation_parser.galgas", 376)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_number_5F_options_i10_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_with_5F_auto_parse (inCompiler) ;
  nt_range_parse (inCompiler) ;
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  switch (select_implementation_5F_parser_15 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 359)) ;
    switch (select_implementation_5F_parser_16 (inCompiler)) {
    case 1: {
      nt_int_5F_or_5F_float_parse (inCompiler) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 364)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 368)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_type_5F_options_i11_ (GALGAS_lstring & outArgument_name,
                                                                                           GALGAS_impType & outArgument_options,
                                                                                           const GALGAS_dataType constinArgument_type,
                                                                                           C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_options.drop () ; // Release 'out' argument
  GALGAS_bool var_withAuto ;
  nt_with_5F_auto_ (var_withAuto, inCompiler) ;
  nt_identifier_5F_or_5F_attribute_ (outArgument_name, inCompiler) ;
  GALGAS_bool var_multiple ;
  nt_multiple_ (var_multiple, inCompiler) ;
  GALGAS_object_5F_t var_defaultValue ;
  GALGAS_lstring var_oil_5F_desc ;
  switch (select_implementation_5F_parser_17 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 391)) ;
    switch (select_implementation_5F_parser_18 (inCompiler)) {
    case 1: {
      GALGAS_lstring var_ident ;
      nt_identifier_5F_or_5F_attribute_ (var_ident, inCompiler) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_stringAttribute::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 396)), var_ident.reader_string (SOURCE_FILE ("implementation_parser.galgas", 396))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 396)) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 398)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 400))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 400)) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 402)) ;
      nt_description_ (var_oil_5F_desc, inCompiler) ;
      var_defaultValue = GALGAS_auto::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 404))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 404)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    var_defaultValue = GALGAS_void::constructor_new (var_oil_5F_desc, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 408))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 408)) ;
  } break ;
  default:
    break ;
  }
  GALGAS_locationList temp_0 = GALGAS_locationList::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 410)) ;
  temp_0.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 410))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 410)) ;
  GALGAS_lstringlist temp_1 = GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("implementation_parser.galgas", 410)) ;
  temp_1.addAssign_operation (var_oil_5F_desc  COMMA_SOURCE_FILE ("implementation_parser.galgas", 410)) ;
  outArgument_options = GALGAS_impAutoDefaultType::constructor_new (temp_0, constinArgument_type, outArgument_name, var_multiple, temp_1, var_withAuto, var_defaultValue  COMMA_SOURCE_FILE ("implementation_parser.galgas", 410)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_type_5F_options_i11_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_with_5F_auto_parse (inCompiler) ;
  nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
  nt_multiple_parse (inCompiler) ;
  switch (select_implementation_5F_parser_17 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 391)) ;
    switch (select_implementation_5F_parser_18 (inCompiler)) {
    case 1: {
      nt_identifier_5F_or_5F_attribute_parse (inCompiler) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) COMMA_SOURCE_FILE ("implementation_parser.galgas", 398)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    case 3: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 402)) ;
      nt_description_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 2: {
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_with_5F_auto_i12_ (GALGAS_bool & outArgument_withAuto,
                                                                                        C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_withAuto.drop () ; // Release 'out' argument
  switch (select_implementation_5F_parser_19 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 416)) ;
    outArgument_withAuto = GALGAS_bool (true) ;
  } break ;
  case 2: {
    outArgument_withAuto = GALGAS_bool (false) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_with_5F_auto_i12_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_implementation_5F_parser_19 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO) COMMA_SOURCE_FILE ("implementation_parser.galgas", 416)) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_int_5F_or_5F_float_i13_ (GALGAS_object_5F_t & outArgument_num,
                                                                                              const GALGAS_dataType constinArgument_type,
                                                                                              C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_num.drop () ; // Release 'out' argument
  GALGAS_bool var_signed ;
  nt_sign_ (var_signed, inCompiler) ;
  switch (select_implementation_5F_parser_20 (inCompiler)) {
  case 1: {
    GALGAS_luint_36__34_ var_number ;
    var_number = inCompiler->synthetizedAttribute_integerNumber () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 429)) ;
    GALGAS_lstring var_oil_5F_desc ;
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    outArgument_num = function_checkAndGetIntegerNumber (var_oil_5F_desc, constinArgument_type, var_number, var_signed, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 431)) ;
  } break ;
  case 2: {
    GALGAS_ldouble var_number ;
    var_number = inCompiler->synthetizedAttribute_floatNumber () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 434)) ;
    GALGAS_lstring var_oil_5F_desc ;
    nt_description_ (var_oil_5F_desc, inCompiler) ;
    outArgument_num = function_checkAndGetFloatNumber (var_oil_5F_desc, constinArgument_type, var_number, var_signed, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 436)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_int_5F_or_5F_float_i13_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_sign_parse (inCompiler) ;
  switch (select_implementation_5F_parser_20 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 429)) ;
    nt_description_parse (inCompiler) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 434)) ;
    nt_description_parse (inCompiler) ;
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_set_5F_followup_i14_ (GALGAS_numberList & ioArgument_numbers,
                                                                                           const GALGAS_dataType constinArgument_type,
                                                                                           C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_21 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 445)) ;
      GALGAS_object_5F_t var_num ;
      nt_int_5F_or_5F_float_ (var_num, constinArgument_type, inCompiler) ;
      ioArgument_numbers.addAssign_operation (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 448)), var_num  COMMA_SOURCE_FILE ("implementation_parser.galgas", 448)) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_set_5F_followup_i14_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  bool repeatFlag_0 = true ;
  while (repeatFlag_0) {
    switch (select_implementation_5F_parser_21 (inCompiler)) {
    case 2: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 445)) ;
      nt_int_5F_or_5F_float_parse (inCompiler) ;
    } break ;
    default:
      repeatFlag_0 = false ;
      break ;
    }
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_range_5F_content_i15_ (GALGAS_attributeRange & outArgument_range,
                                                                                            const GALGAS_dataType constinArgument_type,
                                                                                            C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_range.drop () ; // Release 'out' argument
  GALGAS_object_5F_t var_start = GALGAS_void::constructor_new (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 455)), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 455))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 455)) ;
  GALGAS_object_5F_t var_stop = GALGAS_void::constructor_new (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 456)), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 456))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 456)) ;
  GALGAS_bool var_signed ;
  nt_sign_ (var_signed, inCompiler) ;
  switch (select_implementation_5F_parser_22 (inCompiler)) {
  case 1: {
    GALGAS_luint_36__34_ var_number ;
    var_number = inCompiler->synthetizedAttribute_integerNumber () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 461)) ;
    var_start = function_checkAndGetIntegerNumber (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 462)), constinArgument_type, var_number, var_signed, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 462)) ;
    nt_int_5F_or_5F_float_ (var_stop, constinArgument_type, inCompiler) ;
    outArgument_range = function_buildRange (constinArgument_type, var_start, var_stop, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 464)) ;
  } break ;
  case 2: {
    GALGAS_luint_36__34_ var_number ;
    var_number = inCompiler->synthetizedAttribute_integerNumber () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 467)) ;
    var_start = function_checkAndGetIntegerNumber (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 468)), constinArgument_type, var_number, var_signed, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 468)) ;
    switch (select_implementation_5F_parser_23 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 470)) ;
      nt_int_5F_or_5F_float_ (var_stop, constinArgument_type, inCompiler) ;
      outArgument_range = function_buildRange (constinArgument_type, var_start, var_stop, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 471)) ;
    } break ;
    case 2: {
      GALGAS_numberList var_numbers = GALGAS_numberList::constructor_listWithValue (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 473)), var_start  COMMA_SOURCE_FILE ("implementation_parser.galgas", 473)) ;
      nt_set_5F_followup_ (var_numbers, constinArgument_type, inCompiler) ;
      outArgument_range = function_attributeRangeWithNumberList (var_numbers, constinArgument_type, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 475)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 3: {
    GALGAS_ldouble var_number ;
    var_number = inCompiler->synthetizedAttribute_floatNumber () ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 479)) ;
    var_start = function_checkAndGetFloatNumber (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 480)), constinArgument_type, var_number, var_signed, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 480)) ;
    switch (select_implementation_5F_parser_24 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 482)) ;
      nt_int_5F_or_5F_float_ (var_stop, constinArgument_type, inCompiler) ;
      outArgument_range = function_buildRange (constinArgument_type, var_start, var_stop, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 483)) ;
    } break ;
    case 2: {
      GALGAS_numberList var_numbers = GALGAS_numberList::constructor_listWithValue (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 485)), var_start  COMMA_SOURCE_FILE ("implementation_parser.galgas", 485)) ;
      nt_set_5F_followup_ (var_numbers, constinArgument_type, inCompiler) ;
      outArgument_range = function_attributeRangeWithNumberList (var_numbers, constinArgument_type, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 487)) ;
    } break ;
    default:
      break ;
    }
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_range_5F_content_i15_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  nt_sign_parse (inCompiler) ;
  switch (select_implementation_5F_parser_22 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 461)) ;
    nt_int_5F_or_5F_float_parse (inCompiler) ;
  } break ;
  case 2: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 467)) ;
    switch (select_implementation_5F_parser_23 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 470)) ;
      nt_int_5F_or_5F_float_parse (inCompiler) ;
    } break ;
    case 2: {
      nt_set_5F_followup_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  case 3: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) COMMA_SOURCE_FILE ("implementation_parser.galgas", 479)) ;
    switch (select_implementation_5F_parser_24 (inCompiler)) {
    case 1: {
      inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 482)) ;
      nt_int_5F_or_5F_float_parse (inCompiler) ;
    } break ;
    case 2: {
      nt_set_5F_followup_parse (inCompiler) ;
    } break ;
    default:
      break ;
    }
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_range_i16_ (GALGAS_attributeRange & outArgument_range,
                                                                                 const GALGAS_dataType constinArgument_rangeType,
                                                                                 C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_range.drop () ; // Release 'out' argument
  switch (select_implementation_5F_parser_25 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 496)) ;
    nt_range_5F_content_ (outArgument_range, constinArgument_rangeType, inCompiler) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 496)) ;
  } break ;
  case 2: {
    outArgument_range = GALGAS_noRange::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 498))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 498)) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_range_i16_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_implementation_5F_parser_25 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 496)) ;
    nt_range_5F_content_parse (inCompiler) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 496)) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_multiple_i17_ (GALGAS_bool & outArgument_multi,
                                                                                    C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_multi.drop () ; // Release 'out' argument
  switch (select_implementation_5F_parser_26 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 505)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 505)) ;
    outArgument_multi = GALGAS_bool (true) ;
  } break ;
  case 2: {
    outArgument_multi = GALGAS_bool (false) ;
  } break ;
  default:
    break ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_multiple_i17_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  switch (select_implementation_5F_parser_26 (inCompiler)) {
  case 1: {
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 505)) ;
    inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) COMMA_SOURCE_FILE ("implementation_parser.galgas", 505)) ;
  } break ;
  case 2: {
  } break ;
  default:
    break ;
  }
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_identifier_5F_or_5F_attribute_i18_ (GALGAS_lstring & outArgument_name,
                                                                                                         C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_name = inCompiler->synthetizedAttribute_att_5F_token () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 514)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_identifier_5F_or_5F_attribute_i18_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 514)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_identifier_5F_or_5F_enum_5F_value_i19_ (GALGAS_lstring & outArgument_name,
                                                                                                             C_Lexique_goil_5F_lexique * inCompiler) {
  outArgument_name.drop () ; // Release 'out' argument
  outArgument_name = inCompiler->synthetizedAttribute_att_5F_token () ;
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 522)) ;
}

//---------------------------------------------------------------------------------------------------------------------*

void cParser_implementation_5F_parser::rule_implementation_5F_parser_identifier_5F_or_5F_enum_5F_value_i19_parse (C_Lexique_goil_5F_lexique * inCompiler) {
  inCompiler->acceptTerminal (ACCEPT_TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) COMMA_SOURCE_FILE ("implementation_parser.galgas", 522)) ;
  inCompiler->resetTemplateString () ;
}

//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   L L ( 1 )    P R O D U C T I O N    R U L E S                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const int16_t gProductions_goil_file_level_include [] = {
// At index 0 : <implementation_definition>, in file 'implementation_parser.ggs', line 54
  TERMINAL (C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION) // $IMPLEMENTATION$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (46) // <select_implementation_5F_parser_0>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 7 : <start>, in file 'goil_syntax.ggs', line 28
, NONTERMINAL (5) // <OIL_version>
, NONTERMINAL (2) // <file>
, END_PRODUCTION
// At index 10 : <file>, in file 'goil_syntax.ggs', line 94
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 12 : <sign>, in file 'goil_syntax.ggs', line 102
, NONTERMINAL (33) // <select_goil_5F_syntax_1>
, END_PRODUCTION
// At index 14 : <description>, in file 'goil_syntax.ggs', line 115
, NONTERMINAL (34) // <select_goil_5F_syntax_2>
, END_PRODUCTION
// At index 16 : <OIL_version>, in file 'goil_syntax.ggs', line 139
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_OIL_5F_VERSION) // $OIL_VERSION$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (4) // <description>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 22 : <application_definition>, in file 'goil_syntax.ggs', line 146
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_CPU) // $CPU$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (7) // <object_definition_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, NONTERMINAL (4) // <description>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 30 : <object_definition_list>, in file 'goil_syntax.ggs', line 155
, NONTERMINAL (36) // <select_goil_5F_syntax_4>
, END_PRODUCTION
// At index 32 : <boolean>, in file 'goil_syntax.ggs', line 198
, NONTERMINAL (37) // <select_goil_5F_syntax_5>
, END_PRODUCTION
// At index 34 : <oil_declaration_list>, in file 'goil_syntax.ggs', line 208
, NONTERMINAL (38) // <select_goil_5F_syntax_6>
, END_PRODUCTION
// At index 36 : <oil_declaration>, in file 'goil_syntax.ggs', line 217
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (39) // <select_goil_5F_syntax_7>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 40 : <include_file_level>, in file 'goil_syntax.ggs', line 390
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) // $include$
, NONTERMINAL (44) // <select_goil_5F_syntax_12>
, END_PRODUCTION
// At index 43 : <include_cpu_level>, in file 'goil_syntax.ggs', line 402
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) // $include$
, NONTERMINAL (45) // <select_goil_5F_syntax_13>
, END_PRODUCTION
// At index 46 : <implementation_objects>, in file 'implementation_parser.ggs', line 85
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (47) // <select_implementation_5F_parser_1>
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 50 : <implementation_list>, in file 'implementation_parser.ggs', line 130
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (48) // <select_implementation_5F_parser_2>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, END_PRODUCTION
// At index 54 : <implementation_type>, in file 'implementation_parser.ggs', line 158
, NONTERMINAL (49) // <select_implementation_5F_parser_3>
, END_PRODUCTION
// At index 56 : <struct_options>, in file 'implementation_parser.ggs', line 186
, NONTERMINAL (50) // <select_implementation_5F_parser_4>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 61 : <objref_option>, in file 'implementation_parser.ggs', line 201
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 65 : <string_options>, in file 'implementation_parser.ggs', line 219
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (51) // <select_implementation_5F_parser_5>
, END_PRODUCTION
// At index 70 : <boolean_options>, in file 'implementation_parser.ggs', line 251
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (53) // <select_implementation_5F_parser_7>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (56) // <select_implementation_5F_parser_10>
, END_PRODUCTION
// At index 76 : <enum_item>, in file 'implementation_parser.ggs', line 292
, NONTERMINAL (31) // <identifier_or_enum_value>
, NONTERMINAL (57) // <select_implementation_5F_parser_11>
, END_PRODUCTION
// At index 79 : <enum_options>, in file 'implementation_parser.ggs', line 303
, NONTERMINAL (24) // <with_auto>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, NONTERMINAL (20) // <enum_item>
, NONTERMINAL (58) // <select_implementation_5F_parser_12>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (59) // <select_implementation_5F_parser_13>
, END_PRODUCTION
// At index 88 : <number_options>, in file 'implementation_parser.ggs', line 345
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (28) // <range>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (61) // <select_implementation_5F_parser_15>
, END_PRODUCTION
// At index 94 : <type_options>, in file 'implementation_parser.ggs', line 379
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (63) // <select_implementation_5F_parser_17>
, END_PRODUCTION
// At index 99 : <with_auto>, in file 'implementation_parser.ggs', line 413
, NONTERMINAL (65) // <select_implementation_5F_parser_19>
, END_PRODUCTION
// At index 101 : <int_or_float>, in file 'implementation_parser.ggs', line 422
, NONTERMINAL (3) // <sign>
, NONTERMINAL (66) // <select_implementation_5F_parser_20>
, END_PRODUCTION
// At index 104 : <set_followup>, in file 'implementation_parser.ggs', line 440
, NONTERMINAL (67) // <select_implementation_5F_parser_21>
, END_PRODUCTION
// At index 106 : <range_content>, in file 'implementation_parser.ggs', line 452
, NONTERMINAL (3) // <sign>
, NONTERMINAL (68) // <select_implementation_5F_parser_22>
, END_PRODUCTION
// At index 109 : <range>, in file 'implementation_parser.ggs', line 492
, NONTERMINAL (71) // <select_implementation_5F_parser_25>
, END_PRODUCTION
// At index 111 : <multiple>, in file 'implementation_parser.ggs', line 502
, NONTERMINAL (72) // <select_implementation_5F_parser_26>
, END_PRODUCTION
// At index 113 : <identifier_or_attribute>, in file 'implementation_parser.ggs', line 512
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, END_PRODUCTION
// At index 115 : <identifier_or_enum_value>, in file 'implementation_parser.ggs', line 517
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 117 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, END_PRODUCTION
// At index 118 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, NONTERMINAL (11) // <include_file_level>
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 121 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, NONTERMINAL (0) // <implementation_definition>
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 124 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, NONTERMINAL (6) // <application_definition>
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 127 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2D_) // $-$
, END_PRODUCTION
// At index 129 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2B_) // $+$
, END_PRODUCTION
// At index 131 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
, END_PRODUCTION
// At index 132 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
, END_PRODUCTION
// At index 133 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3A_) // $:$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (35) // <select_goil_5F_syntax_3>
, END_PRODUCTION
// At index 137 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
, END_PRODUCTION
// At index 138 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (35) // <select_goil_5F_syntax_3>
, END_PRODUCTION
// At index 141 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
, END_PRODUCTION
// At index 142 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, NONTERMINAL (4) // <description>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (36) // <select_goil_5F_syntax_4>
, END_PRODUCTION
// At index 151 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
, NONTERMINAL (12) // <include_cpu_level>
, NONTERMINAL (36) // <select_goil_5F_syntax_4>
, END_PRODUCTION
// At index 154 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) // $TRUE$
, END_PRODUCTION
// At index 156 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) // $FALSE$
, END_PRODUCTION
// At index 158 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
, END_PRODUCTION
// At index 159 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
, NONTERMINAL (10) // <oil_declaration>
, NONTERMINAL (38) // <select_goil_5F_syntax_6>
, END_PRODUCTION
// At index 162 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (40) // <select_goil_5F_syntax_8>
, END_PRODUCTION
// At index 165 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 171 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (41) // <select_goil_5F_syntax_9>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 175 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, NONTERMINAL (3) // <sign>
, NONTERMINAL (42) // <select_goil_5F_syntax_10>
, END_PRODUCTION
// At index 178 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, NONTERMINAL (8) // <boolean>
, NONTERMINAL (43) // <select_goil_5F_syntax_11>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 182 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 185 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 188 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, END_PRODUCTION
// At index 192 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
, END_PRODUCTION
// At index 193 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) // $uint_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 196 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) // $float_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 199 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, END_PRODUCTION
// At index 203 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
, END_PRODUCTION
// At index 204 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) // $g_string$
, END_PRODUCTION
// At index 206 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, END_PRODUCTION
// At index 208 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) // $g_string$
, END_PRODUCTION
// At index 210 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, END_PRODUCTION
// At index 212 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
, END_PRODUCTION
// At index 213 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
, NONTERMINAL (13) // <implementation_objects>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (46) // <select_implementation_5F_parser_0>
, END_PRODUCTION
// At index 217 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 220 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
, END_PRODUCTION
// At index 221 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
, END_PRODUCTION
// At index 222 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
, NONTERMINAL (15) // <implementation_type>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (48) // <select_implementation_5F_parser_2>
, END_PRODUCTION
// At index 226 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_33__32_) // $UINT32$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 229 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_33__32_) // $INT32$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 232 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_36__34_) // $UINT64$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 235 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_36__34_) // $INT64$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 238 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_FLOAT) // $FLOAT$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 241 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_ENUM) // $ENUM$
, NONTERMINAL (21) // <enum_options>
, END_PRODUCTION
// At index 244 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_BOOLEAN) // $BOOLEAN$
, NONTERMINAL (19) // <boolean_options>
, END_PRODUCTION
// At index 247 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRING) // $STRING$
, NONTERMINAL (18) // <string_options>
, END_PRODUCTION
// At index 250 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_IDENTIFIER) // $IDENTIFIER$
, NONTERMINAL (23) // <type_options>
, END_PRODUCTION
// At index 253 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRUCT) // $STRUCT$
, NONTERMINAL (16) // <struct_options>
, END_PRODUCTION
// At index 256 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (17) // <objref_option>
, END_PRODUCTION
// At index 259 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 261 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
, END_PRODUCTION
// At index 262 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (52) // <select_implementation_5F_parser_6>
, END_PRODUCTION
// At index 265 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 267 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 270 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 273 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 276 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) // $TRUE$
, NONTERMINAL (54) // <select_implementation_5F_parser_8>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) // $,$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) // $FALSE$
, NONTERMINAL (55) // <select_implementation_5F_parser_9>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 284 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
, END_PRODUCTION
// At index 285 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 287 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
, END_PRODUCTION
// At index 288 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 290 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
, END_PRODUCTION
// At index 291 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (8) // <boolean>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 295 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 297 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 299 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
, END_PRODUCTION
// At index 300 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
, END_PRODUCTION
// At index 301 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) // $,$
, NONTERMINAL (20) // <enum_item>
, NONTERMINAL (58) // <select_implementation_5F_parser_12>
, END_PRODUCTION
// At index 305 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (60) // <select_implementation_5F_parser_14>
, END_PRODUCTION
// At index 308 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 310 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 313 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 316 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 319 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (62) // <select_implementation_5F_parser_16>
, END_PRODUCTION
// At index 322 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 324 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 326 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 329 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 332 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (64) // <select_implementation_5F_parser_18>
, END_PRODUCTION
// At index 335 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 337 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 340 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 343 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 346 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO) // $WITH_AUTO$
, END_PRODUCTION
// At index 348 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
, END_PRODUCTION
// At index 349 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) // $uint_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 352 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) // $float_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 355 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
, END_PRODUCTION
// At index 356 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) // $,$
, NONTERMINAL (25) // <int_or_float>
, NONTERMINAL (67) // <select_implementation_5F_parser_21>
, END_PRODUCTION
// At index 360 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number) // $set_start_uint_number$
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 363 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) // $uint_number$
, NONTERMINAL (69) // <select_implementation_5F_parser_23>
, END_PRODUCTION
// At index 366 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) // $float_number$
, NONTERMINAL (70) // <select_implementation_5F_parser_24>
, END_PRODUCTION
// At index 369 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) // $..$
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 372 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
, NONTERMINAL (26) // <set_followup>
, END_PRODUCTION
// At index 374 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) // $..$
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 377 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
, NONTERMINAL (26) // <set_followup>
, END_PRODUCTION
// At index 379 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, NONTERMINAL (27) // <range_content>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 383 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
, END_PRODUCTION
// At index 384 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 387 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
, END_PRODUCTION
// At index 388 : <>, in file '.ggs', line 0
, NONTERMINAL (2) // <file>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          P R O D U C T I O N    N A M E S                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames_goil_file_level_include [136] = {
 {"<implementation_definition>", "implementation_parser", 0}, // at index 0
 {"<start>", "goil_syntax", 7}, // at index 1
 {"<file>", "goil_syntax", 10}, // at index 2
 {"<sign>", "goil_syntax", 12}, // at index 3
 {"<description>", "goil_syntax", 14}, // at index 4
 {"<OIL_version>", "goil_syntax", 16}, // at index 5
 {"<application_definition>", "goil_syntax", 22}, // at index 6
 {"<object_definition_list>", "goil_syntax", 30}, // at index 7
 {"<boolean>", "goil_syntax", 32}, // at index 8
 {"<oil_declaration_list>", "goil_syntax", 34}, // at index 9
 {"<oil_declaration>", "goil_syntax", 36}, // at index 10
 {"<include_file_level>", "goil_syntax", 40}, // at index 11
 {"<include_cpu_level>", "goil_syntax", 43}, // at index 12
 {"<implementation_objects>", "implementation_parser", 46}, // at index 13
 {"<implementation_list>", "implementation_parser", 50}, // at index 14
 {"<implementation_type>", "implementation_parser", 54}, // at index 15
 {"<struct_options>", "implementation_parser", 56}, // at index 16
 {"<objref_option>", "implementation_parser", 61}, // at index 17
 {"<string_options>", "implementation_parser", 65}, // at index 18
 {"<boolean_options>", "implementation_parser", 70}, // at index 19
 {"<enum_item>", "implementation_parser", 76}, // at index 20
 {"<enum_options>", "implementation_parser", 79}, // at index 21
 {"<number_options>", "implementation_parser", 88}, // at index 22
 {"<type_options>", "implementation_parser", 94}, // at index 23
 {"<with_auto>", "implementation_parser", 99}, // at index 24
 {"<int_or_float>", "implementation_parser", 101}, // at index 25
 {"<set_followup>", "implementation_parser", 104}, // at index 26
 {"<range_content>", "implementation_parser", 106}, // at index 27
 {"<range>", "implementation_parser", 109}, // at index 28
 {"<multiple>", "implementation_parser", 111}, // at index 29
 {"<identifier_or_attribute>", "implementation_parser", 113}, // at index 30
 {"<identifier_or_enum_value>", "implementation_parser", 115}, // at index 31
 {"<select_goil_5F_syntax_0>", "goil_syntax", 117}, // at index 32
 {"<select_goil_5F_syntax_0>", "goil_syntax", 118}, // at index 33
 {"<select_goil_5F_syntax_0>", "goil_syntax", 121}, // at index 34
 {"<select_goil_5F_syntax_0>", "goil_syntax", 124}, // at index 35
 {"<select_goil_5F_syntax_1>", "goil_syntax", 127}, // at index 36
 {"<select_goil_5F_syntax_1>", "goil_syntax", 129}, // at index 37
 {"<select_goil_5F_syntax_1>", "goil_syntax", 131}, // at index 38
 {"<select_goil_5F_syntax_2>", "goil_syntax", 132}, // at index 39
 {"<select_goil_5F_syntax_2>", "goil_syntax", 133}, // at index 40
 {"<select_goil_5F_syntax_3>", "goil_syntax", 137}, // at index 41
 {"<select_goil_5F_syntax_3>", "goil_syntax", 138}, // at index 42
 {"<select_goil_5F_syntax_4>", "goil_syntax", 141}, // at index 43
 {"<select_goil_5F_syntax_4>", "goil_syntax", 142}, // at index 44
 {"<select_goil_5F_syntax_4>", "goil_syntax", 151}, // at index 45
 {"<select_goil_5F_syntax_5>", "goil_syntax", 154}, // at index 46
 {"<select_goil_5F_syntax_5>", "goil_syntax", 156}, // at index 47
 {"<select_goil_5F_syntax_6>", "goil_syntax", 158}, // at index 48
 {"<select_goil_5F_syntax_6>", "goil_syntax", 159}, // at index 49
 {"<select_goil_5F_syntax_7>", "goil_syntax", 162}, // at index 50
 {"<select_goil_5F_syntax_7>", "goil_syntax", 165}, // at index 51
 {"<select_goil_5F_syntax_8>", "goil_syntax", 171}, // at index 52
 {"<select_goil_5F_syntax_8>", "goil_syntax", 175}, // at index 53
 {"<select_goil_5F_syntax_8>", "goil_syntax", 178}, // at index 54
 {"<select_goil_5F_syntax_8>", "goil_syntax", 182}, // at index 55
 {"<select_goil_5F_syntax_8>", "goil_syntax", 185}, // at index 56
 {"<select_goil_5F_syntax_9>", "goil_syntax", 188}, // at index 57
 {"<select_goil_5F_syntax_9>", "goil_syntax", 192}, // at index 58
 {"<select_goil_5F_syntax_10>", "goil_syntax", 193}, // at index 59
 {"<select_goil_5F_syntax_10>", "goil_syntax", 196}, // at index 60
 {"<select_goil_5F_syntax_11>", "goil_syntax", 199}, // at index 61
 {"<select_goil_5F_syntax_11>", "goil_syntax", 203}, // at index 62
 {"<select_goil_5F_syntax_12>", "goil_syntax", 204}, // at index 63
 {"<select_goil_5F_syntax_12>", "goil_syntax", 206}, // at index 64
 {"<select_goil_5F_syntax_13>", "goil_syntax", 208}, // at index 65
 {"<select_goil_5F_syntax_13>", "goil_syntax", 210}, // at index 66
 {"<select_implementation_5F_parser_0>", "implementation_parser", 212}, // at index 67
 {"<select_implementation_5F_parser_0>", "implementation_parser", 213}, // at index 68
 {"<select_implementation_5F_parser_1>", "implementation_parser", 217}, // at index 69
 {"<select_implementation_5F_parser_1>", "implementation_parser", 220}, // at index 70
 {"<select_implementation_5F_parser_2>", "implementation_parser", 221}, // at index 71
 {"<select_implementation_5F_parser_2>", "implementation_parser", 222}, // at index 72
 {"<select_implementation_5F_parser_3>", "implementation_parser", 226}, // at index 73
 {"<select_implementation_5F_parser_3>", "implementation_parser", 229}, // at index 74
 {"<select_implementation_5F_parser_3>", "implementation_parser", 232}, // at index 75
 {"<select_implementation_5F_parser_3>", "implementation_parser", 235}, // at index 76
 {"<select_implementation_5F_parser_3>", "implementation_parser", 238}, // at index 77
 {"<select_implementation_5F_parser_3>", "implementation_parser", 241}, // at index 78
 {"<select_implementation_5F_parser_3>", "implementation_parser", 244}, // at index 79
 {"<select_implementation_5F_parser_3>", "implementation_parser", 247}, // at index 80
 {"<select_implementation_5F_parser_3>", "implementation_parser", 250}, // at index 81
 {"<select_implementation_5F_parser_3>", "implementation_parser", 253}, // at index 82
 {"<select_implementation_5F_parser_3>", "implementation_parser", 256}, // at index 83
 {"<select_implementation_5F_parser_4>", "implementation_parser", 259}, // at index 84
 {"<select_implementation_5F_parser_4>", "implementation_parser", 261}, // at index 85
 {"<select_implementation_5F_parser_5>", "implementation_parser", 262}, // at index 86
 {"<select_implementation_5F_parser_5>", "implementation_parser", 265}, // at index 87
 {"<select_implementation_5F_parser_6>", "implementation_parser", 267}, // at index 88
 {"<select_implementation_5F_parser_6>", "implementation_parser", 270}, // at index 89
 {"<select_implementation_5F_parser_6>", "implementation_parser", 273}, // at index 90
 {"<select_implementation_5F_parser_7>", "implementation_parser", 276}, // at index 91
 {"<select_implementation_5F_parser_7>", "implementation_parser", 284}, // at index 92
 {"<select_implementation_5F_parser_8>", "implementation_parser", 285}, // at index 93
 {"<select_implementation_5F_parser_8>", "implementation_parser", 287}, // at index 94
 {"<select_implementation_5F_parser_9>", "implementation_parser", 288}, // at index 95
 {"<select_implementation_5F_parser_9>", "implementation_parser", 290}, // at index 96
 {"<select_implementation_5F_parser_10>", "implementation_parser", 291}, // at index 97
 {"<select_implementation_5F_parser_10>", "implementation_parser", 295}, // at index 98
 {"<select_implementation_5F_parser_11>", "implementation_parser", 297}, // at index 99
 {"<select_implementation_5F_parser_11>", "implementation_parser", 299}, // at index 100
 {"<select_implementation_5F_parser_12>", "implementation_parser", 300}, // at index 101
 {"<select_implementation_5F_parser_12>", "implementation_parser", 301}, // at index 102
 {"<select_implementation_5F_parser_13>", "implementation_parser", 305}, // at index 103
 {"<select_implementation_5F_parser_13>", "implementation_parser", 308}, // at index 104
 {"<select_implementation_5F_parser_14>", "implementation_parser", 310}, // at index 105
 {"<select_implementation_5F_parser_14>", "implementation_parser", 313}, // at index 106
 {"<select_implementation_5F_parser_14>", "implementation_parser", 316}, // at index 107
 {"<select_implementation_5F_parser_15>", "implementation_parser", 319}, // at index 108
 {"<select_implementation_5F_parser_15>", "implementation_parser", 322}, // at index 109
 {"<select_implementation_5F_parser_16>", "implementation_parser", 324}, // at index 110
 {"<select_implementation_5F_parser_16>", "implementation_parser", 326}, // at index 111
 {"<select_implementation_5F_parser_16>", "implementation_parser", 329}, // at index 112
 {"<select_implementation_5F_parser_17>", "implementation_parser", 332}, // at index 113
 {"<select_implementation_5F_parser_17>", "implementation_parser", 335}, // at index 114
 {"<select_implementation_5F_parser_18>", "implementation_parser", 337}, // at index 115
 {"<select_implementation_5F_parser_18>", "implementation_parser", 340}, // at index 116
 {"<select_implementation_5F_parser_18>", "implementation_parser", 343}, // at index 117
 {"<select_implementation_5F_parser_19>", "implementation_parser", 346}, // at index 118
 {"<select_implementation_5F_parser_19>", "implementation_parser", 348}, // at index 119
 {"<select_implementation_5F_parser_20>", "implementation_parser", 349}, // at index 120
 {"<select_implementation_5F_parser_20>", "implementation_parser", 352}, // at index 121
 {"<select_implementation_5F_parser_21>", "implementation_parser", 355}, // at index 122
 {"<select_implementation_5F_parser_21>", "implementation_parser", 356}, // at index 123
 {"<select_implementation_5F_parser_22>", "implementation_parser", 360}, // at index 124
 {"<select_implementation_5F_parser_22>", "implementation_parser", 363}, // at index 125
 {"<select_implementation_5F_parser_22>", "implementation_parser", 366}, // at index 126
 {"<select_implementation_5F_parser_23>", "implementation_parser", 369}, // at index 127
 {"<select_implementation_5F_parser_23>", "implementation_parser", 372}, // at index 128
 {"<select_implementation_5F_parser_24>", "implementation_parser", 374}, // at index 129
 {"<select_implementation_5F_parser_24>", "implementation_parser", 377}, // at index 130
 {"<select_implementation_5F_parser_25>", "implementation_parser", 379}, // at index 131
 {"<select_implementation_5F_parser_25>", "implementation_parser", 383}, // at index 132
 {"<select_implementation_5F_parser_26>", "implementation_parser", 384}, // at index 133
 {"<select_implementation_5F_parser_26>", "implementation_parser", 387}, // at index 134
 {"<>", "", 388} // at index 135
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 L L ( 1 )    P R O D U C T I O N    I N D E X E S                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionIndexes_goil_file_level_include [136] = {
0, // index 0 : <implementation_definition>, in file 'implementation_parser.ggs', line 54
7, // index 1 : <start>, in file 'goil_syntax.ggs', line 28
10, // index 2 : <file>, in file 'goil_syntax.ggs', line 94
12, // index 3 : <sign>, in file 'goil_syntax.ggs', line 102
14, // index 4 : <description>, in file 'goil_syntax.ggs', line 115
16, // index 5 : <OIL_version>, in file 'goil_syntax.ggs', line 139
22, // index 6 : <application_definition>, in file 'goil_syntax.ggs', line 146
30, // index 7 : <object_definition_list>, in file 'goil_syntax.ggs', line 155
32, // index 8 : <boolean>, in file 'goil_syntax.ggs', line 198
34, // index 9 : <oil_declaration_list>, in file 'goil_syntax.ggs', line 208
36, // index 10 : <oil_declaration>, in file 'goil_syntax.ggs', line 217
40, // index 11 : <include_file_level>, in file 'goil_syntax.ggs', line 390
43, // index 12 : <include_cpu_level>, in file 'goil_syntax.ggs', line 402
46, // index 13 : <implementation_objects>, in file 'implementation_parser.ggs', line 85
50, // index 14 : <implementation_list>, in file 'implementation_parser.ggs', line 130
54, // index 15 : <implementation_type>, in file 'implementation_parser.ggs', line 158
56, // index 16 : <struct_options>, in file 'implementation_parser.ggs', line 186
61, // index 17 : <objref_option>, in file 'implementation_parser.ggs', line 201
65, // index 18 : <string_options>, in file 'implementation_parser.ggs', line 219
70, // index 19 : <boolean_options>, in file 'implementation_parser.ggs', line 251
76, // index 20 : <enum_item>, in file 'implementation_parser.ggs', line 292
79, // index 21 : <enum_options>, in file 'implementation_parser.ggs', line 303
88, // index 22 : <number_options>, in file 'implementation_parser.ggs', line 345
94, // index 23 : <type_options>, in file 'implementation_parser.ggs', line 379
99, // index 24 : <with_auto>, in file 'implementation_parser.ggs', line 413
101, // index 25 : <int_or_float>, in file 'implementation_parser.ggs', line 422
104, // index 26 : <set_followup>, in file 'implementation_parser.ggs', line 440
106, // index 27 : <range_content>, in file 'implementation_parser.ggs', line 452
109, // index 28 : <range>, in file 'implementation_parser.ggs', line 492
111, // index 29 : <multiple>, in file 'implementation_parser.ggs', line 502
113, // index 30 : <identifier_or_attribute>, in file 'implementation_parser.ggs', line 512
115, // index 31 : <identifier_or_enum_value>, in file 'implementation_parser.ggs', line 517
117, // index 32 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
118, // index 33 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
121, // index 34 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
124, // index 35 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
127, // index 36 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
129, // index 37 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
131, // index 38 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
132, // index 39 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
133, // index 40 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
137, // index 41 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
138, // index 42 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
141, // index 43 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
142, // index 44 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
151, // index 45 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
154, // index 46 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
156, // index 47 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
158, // index 48 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
159, // index 49 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
162, // index 50 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
165, // index 51 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
171, // index 52 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
175, // index 53 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
178, // index 54 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
182, // index 55 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
185, // index 56 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
188, // index 57 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
192, // index 58 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
193, // index 59 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
196, // index 60 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
199, // index 61 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
203, // index 62 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
204, // index 63 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
206, // index 64 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
208, // index 65 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
210, // index 66 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
212, // index 67 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
213, // index 68 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
217, // index 69 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
220, // index 70 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
221, // index 71 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
222, // index 72 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
226, // index 73 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
229, // index 74 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
232, // index 75 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
235, // index 76 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
238, // index 77 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
241, // index 78 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
244, // index 79 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
247, // index 80 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
250, // index 81 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
253, // index 82 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
256, // index 83 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
259, // index 84 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
261, // index 85 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
262, // index 86 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
265, // index 87 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
267, // index 88 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
270, // index 89 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
273, // index 90 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
276, // index 91 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
284, // index 92 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
285, // index 93 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
287, // index 94 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
288, // index 95 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
290, // index 96 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
291, // index 97 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
295, // index 98 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
297, // index 99 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
299, // index 100 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
300, // index 101 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
301, // index 102 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
305, // index 103 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
308, // index 104 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
310, // index 105 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
313, // index 106 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
316, // index 107 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
319, // index 108 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
322, // index 109 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
324, // index 110 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
326, // index 111 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
329, // index 112 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
332, // index 113 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
335, // index 114 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
337, // index 115 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
340, // index 116 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
343, // index 117 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
346, // index 118 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
348, // index 119 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
349, // index 120 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
352, // index 121 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
355, // index 122 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
356, // index 123 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
360, // index 124 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
363, // index 125 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
366, // index 126 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
369, // index 127 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
372, // index 128 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
374, // index 129 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
377, // index 130 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
379, // index 131 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
383, // index 132 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
384, // index 133 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
387, // index 134 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
388 // index 135 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gFirstProductionIndexes_goil_file_level_include [75] = {
0, // at 0 : <implementation_definition>
1, // at 1 : <start>
2, // at 2 : <file>
3, // at 3 : <sign>
4, // at 4 : <description>
5, // at 5 : <OIL_version>
6, // at 6 : <application_definition>
7, // at 7 : <object_definition_list>
8, // at 8 : <boolean>
9, // at 9 : <oil_declaration_list>
10, // at 10 : <oil_declaration>
11, // at 11 : <include_file_level>
12, // at 12 : <include_cpu_level>
13, // at 13 : <implementation_objects>
14, // at 14 : <implementation_list>
15, // at 15 : <implementation_type>
16, // at 16 : <struct_options>
17, // at 17 : <objref_option>
18, // at 18 : <string_options>
19, // at 19 : <boolean_options>
20, // at 20 : <enum_item>
21, // at 21 : <enum_options>
22, // at 22 : <number_options>
23, // at 23 : <type_options>
24, // at 24 : <with_auto>
25, // at 25 : <int_or_float>
26, // at 26 : <set_followup>
27, // at 27 : <range_content>
28, // at 28 : <range>
29, // at 29 : <multiple>
30, // at 30 : <identifier_or_attribute>
31, // at 31 : <identifier_or_enum_value>
32, // at 32 : <select_goil_5F_syntax_0>
36, // at 33 : <select_goil_5F_syntax_1>
39, // at 34 : <select_goil_5F_syntax_2>
41, // at 35 : <select_goil_5F_syntax_3>
43, // at 36 : <select_goil_5F_syntax_4>
46, // at 37 : <select_goil_5F_syntax_5>
48, // at 38 : <select_goil_5F_syntax_6>
50, // at 39 : <select_goil_5F_syntax_7>
52, // at 40 : <select_goil_5F_syntax_8>
57, // at 41 : <select_goil_5F_syntax_9>
59, // at 42 : <select_goil_5F_syntax_10>
61, // at 43 : <select_goil_5F_syntax_11>
63, // at 44 : <select_goil_5F_syntax_12>
65, // at 45 : <select_goil_5F_syntax_13>
67, // at 46 : <select_implementation_5F_parser_0>
69, // at 47 : <select_implementation_5F_parser_1>
71, // at 48 : <select_implementation_5F_parser_2>
73, // at 49 : <select_implementation_5F_parser_3>
84, // at 50 : <select_implementation_5F_parser_4>
86, // at 51 : <select_implementation_5F_parser_5>
88, // at 52 : <select_implementation_5F_parser_6>
91, // at 53 : <select_implementation_5F_parser_7>
93, // at 54 : <select_implementation_5F_parser_8>
95, // at 55 : <select_implementation_5F_parser_9>
97, // at 56 : <select_implementation_5F_parser_10>
99, // at 57 : <select_implementation_5F_parser_11>
101, // at 58 : <select_implementation_5F_parser_12>
103, // at 59 : <select_implementation_5F_parser_13>
105, // at 60 : <select_implementation_5F_parser_14>
108, // at 61 : <select_implementation_5F_parser_15>
110, // at 62 : <select_implementation_5F_parser_16>
113, // at 63 : <select_implementation_5F_parser_17>
115, // at 64 : <select_implementation_5F_parser_18>
118, // at 65 : <select_implementation_5F_parser_19>
120, // at 66 : <select_implementation_5F_parser_20>
122, // at 67 : <select_implementation_5F_parser_21>
124, // at 68 : <select_implementation_5F_parser_22>
127, // at 69 : <select_implementation_5F_parser_23>
129, // at 70 : <select_implementation_5F_parser_24>
131, // at 71 : <select_implementation_5F_parser_25>
133, // at 72 : <select_implementation_5F_parser_26>
135, // at 73 : <>
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    L L ( 1 )    D E C I S I O N    T A B L E S                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gDecision_goil_file_level_include [] = {
// At index 0 : <implementation_definition> only one production, no choice
  -1,
// At index 1 : <start> only one production, no choice
  -1,
// At index 2 : <file> only one production, no choice
  -1,
// At index 3 : <sign> only one production, no choice
  -1,
// At index 4 : <description> only one production, no choice
  -1,
// At index 5 : <OIL_version> only one production, no choice
  -1,
// At index 6 : <application_definition> only one production, no choice
  -1,
// At index 7 : <object_definition_list> only one production, no choice
  -1,
// At index 8 : <boolean> only one production, no choice
  -1,
// At index 9 : <oil_declaration_list> only one production, no choice
  -1,
// At index 10 : <oil_declaration> only one production, no choice
  -1,
// At index 11 : <include_file_level> only one production, no choice
  -1,
// At index 12 : <include_cpu_level> only one production, no choice
  -1,
// At index 13 : <implementation_objects> only one production, no choice
  -1,
// At index 14 : <implementation_list> only one production, no choice
  -1,
// At index 15 : <implementation_type> only one production, no choice
  -1,
// At index 16 : <struct_options> only one production, no choice
  -1,
// At index 17 : <objref_option> only one production, no choice
  -1,
// At index 18 : <string_options> only one production, no choice
  -1,
// At index 19 : <boolean_options> only one production, no choice
  -1,
// At index 20 : <enum_item> only one production, no choice
  -1,
// At index 21 : <enum_options> only one production, no choice
  -1,
// At index 22 : <number_options> only one production, no choice
  -1,
// At index 23 : <type_options> only one production, no choice
  -1,
// At index 24 : <with_auto> only one production, no choice
  -1,
// At index 25 : <int_or_float> only one production, no choice
  -1,
// At index 26 : <set_followup> only one production, no choice
  -1,
// At index 27 : <range_content> only one production, no choice
  -1,
// At index 28 : <range> only one production, no choice
  -1,
// At index 29 : <multiple> only one production, no choice
  -1,
// At index 30 : <identifier_or_attribute> only one production, no choice
  -1,
// At index 31 : <identifier_or_enum_value> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 32 : <select_goil_5F_syntax_0>
C_Lexique_goil_5F_lexique::kToken_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_include, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION, -1, // Choice 3
C_Lexique_goil_5F_lexique::kToken_CPU, -1, // Choice 4
  -1,
// At index 41 : <select_goil_5F_syntax_1>
C_Lexique_goil_5F_lexique::kToken__2D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2B_, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, C_Lexique_goil_5F_lexique::kToken_float_5F_number, C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number, -1, // Choice 3
  -1,
// At index 50 : <select_goil_5F_syntax_2>
C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, -1, // Choice 2
  -1,
// At index 57 : <select_goil_5F_syntax_3>
C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 2
  -1,
// At index 64 : <select_goil_5F_syntax_4>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_include, -1, // Choice 3
  -1,
// At index 71 : <select_goil_5F_syntax_5>
C_Lexique_goil_5F_lexique::kToken_TRUE, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_FALSE, -1, // Choice 2
  -1,
// At index 76 : <select_goil_5F_syntax_6>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 81 : <select_goil_5F_syntax_7>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 86 : <select_goil_5F_syntax_8>
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2D_, C_Lexique_goil_5F_lexique::kToken__2B_, C_Lexique_goil_5F_lexique::kToken_uint_5F_number, C_Lexique_goil_5F_lexique::kToken_float_5F_number, C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_TRUE, C_Lexique_goil_5F_lexique::kToken_FALSE, -1, // Choice 3
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 4
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 5
  -1,
// At index 102 : <select_goil_5F_syntax_9>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, -1, // Choice 2
  -1,
// At index 108 : <select_goil_5F_syntax_10>
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 2
  -1,
// At index 113 : <select_goil_5F_syntax_11>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, -1, // Choice 2
  -1,
// At index 119 : <select_goil_5F_syntax_12>
C_Lexique_goil_5F_lexique::kToken_g_5F_string, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 2
  -1,
// At index 124 : <select_goil_5F_syntax_13>
C_Lexique_goil_5F_lexique::kToken_g_5F_string, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 2
  -1,
// At index 129 : <select_implementation_5F_parser_0>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 134 : <select_implementation_5F_parser_1>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 2
  -1,
// At index 139 : <select_implementation_5F_parser_2>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, C_Lexique_goil_5F_lexique::kToken_UINT_33__32_, C_Lexique_goil_5F_lexique::kToken_INT_33__32_, C_Lexique_goil_5F_lexique::kToken_UINT_36__34_, C_Lexique_goil_5F_lexique::kToken_INT_36__34_, C_Lexique_goil_5F_lexique::kToken_FLOAT, C_Lexique_goil_5F_lexique::kToken_ENUM, C_Lexique_goil_5F_lexique::kToken_BOOLEAN, C_Lexique_goil_5F_lexique::kToken_STRING, C_Lexique_goil_5F_lexique::kToken_IDENTIFIER, C_Lexique_goil_5F_lexique::kToken_STRUCT, -1, // Choice 2
  -1,
// At index 154 : <select_implementation_5F_parser_3>
C_Lexique_goil_5F_lexique::kToken_UINT_33__32_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_INT_33__32_, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_UINT_36__34_, -1, // Choice 3
C_Lexique_goil_5F_lexique::kToken_INT_36__34_, -1, // Choice 4
C_Lexique_goil_5F_lexique::kToken_FLOAT, -1, // Choice 5
C_Lexique_goil_5F_lexique::kToken_ENUM, -1, // Choice 6
C_Lexique_goil_5F_lexique::kToken_BOOLEAN, -1, // Choice 7
C_Lexique_goil_5F_lexique::kToken_STRING, -1, // Choice 8
C_Lexique_goil_5F_lexique::kToken_IDENTIFIER, -1, // Choice 9
C_Lexique_goil_5F_lexique::kToken_STRUCT, -1, // Choice 10
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 11
  -1,
// At index 177 : <select_implementation_5F_parser_4>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 182 : <select_implementation_5F_parser_5>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 190 : <select_implementation_5F_parser_6>
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 3
  -1,
// At index 197 : <select_implementation_5F_parser_7>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 202 : <select_implementation_5F_parser_8>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 207 : <select_implementation_5F_parser_9>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, -1, // Choice 2
  -1,
// At index 212 : <select_implementation_5F_parser_10>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 220 : <select_implementation_5F_parser_11>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 226 : <select_implementation_5F_parser_12>
C_Lexique_goil_5F_lexique::kToken__5D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 231 : <select_implementation_5F_parser_13>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 239 : <select_implementation_5F_parser_14>
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 3
  -1,
// At index 246 : <select_implementation_5F_parser_15>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 254 : <select_implementation_5F_parser_16>
C_Lexique_goil_5F_lexique::kToken__2D_, C_Lexique_goil_5F_lexique::kToken__2B_, C_Lexique_goil_5F_lexique::kToken_uint_5F_number, C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 3
  -1,
// At index 264 : <select_implementation_5F_parser_17>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 272 : <select_implementation_5F_parser_18>
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 3
  -1,
// At index 279 : <select_implementation_5F_parser_19>
C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 2
  -1,
// At index 285 : <select_implementation_5F_parser_20>
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 2
  -1,
// At index 290 : <select_implementation_5F_parser_21>
C_Lexique_goil_5F_lexique::kToken__5D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 295 : <select_implementation_5F_parser_22>
C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 3
  -1,
// At index 302 : <select_implementation_5F_parser_23>
C_Lexique_goil_5F_lexique::kToken__2E__2E_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 308 : <select_implementation_5F_parser_24>
C_Lexique_goil_5F_lexique::kToken__2E__2E_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 314 : <select_implementation_5F_parser_25>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 319 : <select_implementation_5F_parser_26>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3D_, C_Lexique_goil_5F_lexique::kToken__3B_, -1, // Choice 2
  -1,
// At index 326 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gDecisionIndexes_goil_file_level_include [75] = {
0, // at 0 : <implementation_definition>
1, // at 1 : <start>
2, // at 2 : <file>
3, // at 3 : <sign>
4, // at 4 : <description>
5, // at 5 : <OIL_version>
6, // at 6 : <application_definition>
7, // at 7 : <object_definition_list>
8, // at 8 : <boolean>
9, // at 9 : <oil_declaration_list>
10, // at 10 : <oil_declaration>
11, // at 11 : <include_file_level>
12, // at 12 : <include_cpu_level>
13, // at 13 : <implementation_objects>
14, // at 14 : <implementation_list>
15, // at 15 : <implementation_type>
16, // at 16 : <struct_options>
17, // at 17 : <objref_option>
18, // at 18 : <string_options>
19, // at 19 : <boolean_options>
20, // at 20 : <enum_item>
21, // at 21 : <enum_options>
22, // at 22 : <number_options>
23, // at 23 : <type_options>
24, // at 24 : <with_auto>
25, // at 25 : <int_or_float>
26, // at 26 : <set_followup>
27, // at 27 : <range_content>
28, // at 28 : <range>
29, // at 29 : <multiple>
30, // at 30 : <identifier_or_attribute>
31, // at 31 : <identifier_or_enum_value>
32, // at 32 : <select_goil_5F_syntax_0>
41, // at 33 : <select_goil_5F_syntax_1>
50, // at 34 : <select_goil_5F_syntax_2>
57, // at 35 : <select_goil_5F_syntax_3>
64, // at 36 : <select_goil_5F_syntax_4>
71, // at 37 : <select_goil_5F_syntax_5>
76, // at 38 : <select_goil_5F_syntax_6>
81, // at 39 : <select_goil_5F_syntax_7>
86, // at 40 : <select_goil_5F_syntax_8>
102, // at 41 : <select_goil_5F_syntax_9>
108, // at 42 : <select_goil_5F_syntax_10>
113, // at 43 : <select_goil_5F_syntax_11>
119, // at 44 : <select_goil_5F_syntax_12>
124, // at 45 : <select_goil_5F_syntax_13>
129, // at 46 : <select_implementation_5F_parser_0>
134, // at 47 : <select_implementation_5F_parser_1>
139, // at 48 : <select_implementation_5F_parser_2>
154, // at 49 : <select_implementation_5F_parser_3>
177, // at 50 : <select_implementation_5F_parser_4>
182, // at 51 : <select_implementation_5F_parser_5>
190, // at 52 : <select_implementation_5F_parser_6>
197, // at 53 : <select_implementation_5F_parser_7>
202, // at 54 : <select_implementation_5F_parser_8>
207, // at 55 : <select_implementation_5F_parser_9>
212, // at 56 : <select_implementation_5F_parser_10>
220, // at 57 : <select_implementation_5F_parser_11>
226, // at 58 : <select_implementation_5F_parser_12>
231, // at 59 : <select_implementation_5F_parser_13>
239, // at 60 : <select_implementation_5F_parser_14>
246, // at 61 : <select_implementation_5F_parser_15>
254, // at 62 : <select_implementation_5F_parser_16>
264, // at 63 : <select_implementation_5F_parser_17>
272, // at 64 : <select_implementation_5F_parser_18>
279, // at 65 : <select_implementation_5F_parser_19>
285, // at 66 : <select_implementation_5F_parser_20>
290, // at 67 : <select_implementation_5F_parser_21>
295, // at 68 : <select_implementation_5F_parser_22>
302, // at 69 : <select_implementation_5F_parser_23>
308, // at 70 : <select_implementation_5F_parser_24>
314, // at 71 : <select_implementation_5F_parser_25>
319, // at 72 : <select_implementation_5F_parser_26>
326, // at 73 : <>
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'implementation_definition' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_definition_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_definition_i0_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_definition_ (GALGAS_implementation & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_definition_i0_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        'start' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_start_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_start_i0_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_start_ (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_start_i0_(inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         'file' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_file_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_file_i1_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_file_ (GALGAS_implementation & parameter_1,
                                GALGAS_applicationDefinition & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_file_i1_(parameter_1, parameter_2, inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_goil_5F_file_5F_level_5F_include::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_goil_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_goil_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performTopDownParsing (gProductions_goil_file_level_include, gProductionNames_goil_file_level_include, gProductionIndexes_goil_file_level_include,
                                    gFirstProductionIndexes_goil_file_level_include, gDecision_goil_file_level_include, gDecisionIndexes_goil_file_level_include, 388) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_implementation &  parameter_1,
                                GALGAS_applicationDefinition &  parameter_2
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
    C_Lexique_goil_5F_lexique * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
    if (scanner->sourceText () != NULL) {
      const bool ok = scanner->performTopDownParsing (gProductions_goil_file_level_include, gProductionNames_goil_file_level_include, gProductionIndexes_goil_file_level_include,
                                                      gFirstProductionIndexes_goil_file_level_include, gDecision_goil_file_level_include, gDecisionIndexes_goil_file_level_include, 388) ;
      if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
        cGrammar_goil_5F_file_5F_level_5F_include grammar ;
        grammar.nt_file_ (parameter_1, parameter_2, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_implementation &  parameter_1,
                                GALGAS_applicationDefinition &  parameter_2
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (inSourceString.isValid ()) {
    const C_String sourceString = inSourceString.stringValue () ;
    C_Lexique_goil_5F_lexique * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, sourceString, "" COMMA_HERE)) ;
    const bool ok = scanner->performTopDownParsing (gProductions_goil_file_level_include, gProductionNames_goil_file_level_include, gProductionIndexes_goil_file_level_include,
                                                    gFirstProductionIndexes_goil_file_level_include, gDecision_goil_file_level_include, gDecisionIndexes_goil_file_level_include, 388) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_goil_5F_file_5F_level_5F_include grammar ;
      grammar.nt_file_ (parameter_1, parameter_2, scanner) ;
    }
    macroDetachSharedObject (scanner) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         'sign' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_sign_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_sign_i2_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_sign_ (GALGAS_bool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_sign_i2_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'description' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_description_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_description_i3_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_description_ (GALGAS_lstring & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_description_i3_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'OIL_version' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_OIL_5F_version_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_OIL_5F_version_i4_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_OIL_5F_version_ (GALGAS_lstring & parameter_1,
                                GALGAS_lstring & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_OIL_5F_version_i4_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'application_definition' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_application_5F_definition_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_application_5F_definition_i5_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_application_5F_definition_ (const GALGAS_implementation parameter_1,
                                GALGAS_applicationDefinition & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_application_5F_definition_i5_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'object_definition_list' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_object_5F_definition_5F_list_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_object_5F_definition_5F_list_i6_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_object_5F_definition_5F_list_ (const GALGAS_implementation parameter_1,
                                GALGAS_objectsMap & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_object_5F_definition_5F_list_i6_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'boolean' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_boolean_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_boolean_i7_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_boolean_ (GALGAS_lbool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_boolean_i7_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'oil_declaration_list' non terminal implementation                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_oil_5F_declaration_5F_list_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_5F_list_i8_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_oil_5F_declaration_5F_list_ (const GALGAS_implementationObjectMap parameter_1,
                                GALGAS_objectAttributes & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_5F_list_i8_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'oil_declaration' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_oil_5F_declaration_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_i9_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_oil_5F_declaration_ (const GALGAS_implementationObjectMap parameter_1,
                                GALGAS_objectAttributes & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_i9_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'include_file_level' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_include_5F_file_5F_level_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_file_5F_level_i10_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_include_5F_file_5F_level_ (GALGAS_implementation & parameter_1,
                                GALGAS_applicationDefinition & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_file_5F_level_i10_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'include_cpu_level' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_include_5F_cpu_5F_level_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_cpu_5F_level_i11_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_include_5F_cpu_5F_level_ (const GALGAS_implementation parameter_1,
                                GALGAS_objectsMap & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_cpu_5F_level_i11_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'implementation_objects' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_objects_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_objects_i1_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_objects_ (GALGAS_implementation & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_objects_i1_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'implementation_list' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_list_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_list_i2_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_list_ (GALGAS_implementationObjectMap & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_list_i2_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'implementation_type' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_type_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_type_i3_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_implementation_5F_type_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_type_i3_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'struct_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_struct_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_struct_5F_options_i4_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_struct_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_struct_5F_options_i4_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'objref_option' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_objref_5F_option_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_objref_5F_option_i5_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_objref_5F_option_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                GALGAS_lstring parameter_3,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_objref_5F_option_i5_(parameter_1, parameter_2, parameter_3, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'string_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_string_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_string_5F_options_i6_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_string_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_string_5F_options_i6_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'boolean_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_boolean_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_boolean_5F_options_i7_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_boolean_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_boolean_5F_options_i7_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'enum_item' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_enum_5F_item_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_item_i8_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_enum_5F_item_ (GALGAS_enumValues & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_item_i8_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'enum_options' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_enum_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_options_i9_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_enum_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_options_i9_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'number_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_number_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_number_5F_options_i10_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_number_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                const GALGAS_dataType parameter_3,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_number_5F_options_i10_(parameter_1, parameter_2, parameter_3, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'type_options' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_type_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_type_5F_options_i11_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_type_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                const GALGAS_dataType parameter_3,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_type_5F_options_i11_(parameter_1, parameter_2, parameter_3, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'with_auto' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_with_5F_auto_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_with_5F_auto_i12_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_with_5F_auto_ (GALGAS_bool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_with_5F_auto_i12_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'int_or_float' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_int_5F_or_5F_float_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_int_5F_or_5F_float_i13_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_int_5F_or_5F_float_ (GALGAS_object_5F_t & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_int_5F_or_5F_float_i13_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'set_followup' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_set_5F_followup_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_set_5F_followup_i14_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_set_5F_followup_ (GALGAS_numberList & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_set_5F_followup_i14_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'range_content' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_range_5F_content_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_5F_content_i15_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_range_5F_content_ (GALGAS_attributeRange & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_5F_content_i15_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        'range' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_range_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_i16_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_range_ (GALGAS_attributeRange & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_i16_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'multiple' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_multiple_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_multiple_i17_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_multiple_ (GALGAS_bool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_multiple_i17_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'identifier_or_attribute' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_identifier_5F_or_5F_attribute_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_attribute_i18_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_identifier_5F_or_5F_attribute_ (GALGAS_lstring & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_attribute_i18_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'identifier_or_enum_value' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_file_5F_level_5F_include::nt_identifier_5F_or_5F_enum_5F_value_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_enum_5F_value_i19_parse(inLexique) ;
}

void cGrammar_goil_5F_file_5F_level_5F_include::nt_identifier_5F_or_5F_enum_5F_value_ (GALGAS_lstring & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_enum_5F_value_i19_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_0' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_0 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_1' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_1 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_2' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_2 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_3' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_3 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_4' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_4 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_5' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_5 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_6' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_6 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_7' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_7 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_8' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_8 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_9' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_9 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_10' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_10 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_11' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_11 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_12' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_12 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_13' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_goil_5F_syntax_13 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_0' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_0 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_1' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_1 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_2' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_2 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_3' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_3 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_4' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_4 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_5' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_5 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_6' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_6 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_7' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_7 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_8' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_8 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_9' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_9 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_10' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_10 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_11' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_11 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_12' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_12 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_13' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_13 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_14' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_14 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_15' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_15 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_16' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_16 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_17' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_17 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_18' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_18 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_19' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_19 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_20' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_20 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_21' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_21 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_22' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_22 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_23' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_23 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_24' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_24 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_25' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_25 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_26' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_file_5F_level_5F_include::select_implementation_5F_parser_26 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   L L ( 1 )    P R O D U C T I O N    R U L E S                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const int16_t gProductions_goil_grammar [] = {
// At index 0 : <implementation_definition>, in file 'implementation_parser.ggs', line 54
  TERMINAL (C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION) // $IMPLEMENTATION$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (46) // <select_implementation_5F_parser_0>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 7 : <start>, in file 'goil_syntax.ggs', line 28
, NONTERMINAL (5) // <OIL_version>
, NONTERMINAL (2) // <file>
, END_PRODUCTION
// At index 10 : <file>, in file 'goil_syntax.ggs', line 94
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 12 : <sign>, in file 'goil_syntax.ggs', line 102
, NONTERMINAL (33) // <select_goil_5F_syntax_1>
, END_PRODUCTION
// At index 14 : <description>, in file 'goil_syntax.ggs', line 115
, NONTERMINAL (34) // <select_goil_5F_syntax_2>
, END_PRODUCTION
// At index 16 : <OIL_version>, in file 'goil_syntax.ggs', line 139
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_OIL_5F_VERSION) // $OIL_VERSION$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (4) // <description>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 22 : <application_definition>, in file 'goil_syntax.ggs', line 146
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_CPU) // $CPU$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (7) // <object_definition_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, NONTERMINAL (4) // <description>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 30 : <object_definition_list>, in file 'goil_syntax.ggs', line 155
, NONTERMINAL (36) // <select_goil_5F_syntax_4>
, END_PRODUCTION
// At index 32 : <boolean>, in file 'goil_syntax.ggs', line 198
, NONTERMINAL (37) // <select_goil_5F_syntax_5>
, END_PRODUCTION
// At index 34 : <oil_declaration_list>, in file 'goil_syntax.ggs', line 208
, NONTERMINAL (38) // <select_goil_5F_syntax_6>
, END_PRODUCTION
// At index 36 : <oil_declaration>, in file 'goil_syntax.ggs', line 217
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (39) // <select_goil_5F_syntax_7>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, END_PRODUCTION
// At index 40 : <include_file_level>, in file 'goil_syntax.ggs', line 390
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) // $include$
, NONTERMINAL (44) // <select_goil_5F_syntax_12>
, END_PRODUCTION
// At index 43 : <include_cpu_level>, in file 'goil_syntax.ggs', line 402
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_include) // $include$
, NONTERMINAL (45) // <select_goil_5F_syntax_13>
, END_PRODUCTION
// At index 46 : <implementation_objects>, in file 'implementation_parser.ggs', line 85
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (47) // <select_implementation_5F_parser_1>
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 50 : <implementation_list>, in file 'implementation_parser.ggs', line 130
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (48) // <select_implementation_5F_parser_2>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, END_PRODUCTION
// At index 54 : <implementation_type>, in file 'implementation_parser.ggs', line 158
, NONTERMINAL (49) // <select_implementation_5F_parser_3>
, END_PRODUCTION
// At index 56 : <struct_options>, in file 'implementation_parser.ggs', line 186
, NONTERMINAL (50) // <select_implementation_5F_parser_4>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 61 : <objref_option>, in file 'implementation_parser.ggs', line 201
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 65 : <string_options>, in file 'implementation_parser.ggs', line 219
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (51) // <select_implementation_5F_parser_5>
, END_PRODUCTION
// At index 70 : <boolean_options>, in file 'implementation_parser.ggs', line 251
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (53) // <select_implementation_5F_parser_7>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (56) // <select_implementation_5F_parser_10>
, END_PRODUCTION
// At index 76 : <enum_item>, in file 'implementation_parser.ggs', line 292
, NONTERMINAL (31) // <identifier_or_enum_value>
, NONTERMINAL (57) // <select_implementation_5F_parser_11>
, END_PRODUCTION
// At index 79 : <enum_options>, in file 'implementation_parser.ggs', line 303
, NONTERMINAL (24) // <with_auto>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, NONTERMINAL (20) // <enum_item>
, NONTERMINAL (58) // <select_implementation_5F_parser_12>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (59) // <select_implementation_5F_parser_13>
, END_PRODUCTION
// At index 88 : <number_options>, in file 'implementation_parser.ggs', line 345
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (28) // <range>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (61) // <select_implementation_5F_parser_15>
, END_PRODUCTION
// At index 94 : <type_options>, in file 'implementation_parser.ggs', line 379
, NONTERMINAL (24) // <with_auto>
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (29) // <multiple>
, NONTERMINAL (63) // <select_implementation_5F_parser_17>
, END_PRODUCTION
// At index 99 : <with_auto>, in file 'implementation_parser.ggs', line 413
, NONTERMINAL (65) // <select_implementation_5F_parser_19>
, END_PRODUCTION
// At index 101 : <int_or_float>, in file 'implementation_parser.ggs', line 422
, NONTERMINAL (3) // <sign>
, NONTERMINAL (66) // <select_implementation_5F_parser_20>
, END_PRODUCTION
// At index 104 : <set_followup>, in file 'implementation_parser.ggs', line 440
, NONTERMINAL (67) // <select_implementation_5F_parser_21>
, END_PRODUCTION
// At index 106 : <range_content>, in file 'implementation_parser.ggs', line 452
, NONTERMINAL (3) // <sign>
, NONTERMINAL (68) // <select_implementation_5F_parser_22>
, END_PRODUCTION
// At index 109 : <range>, in file 'implementation_parser.ggs', line 492
, NONTERMINAL (71) // <select_implementation_5F_parser_25>
, END_PRODUCTION
// At index 111 : <multiple>, in file 'implementation_parser.ggs', line 502
, NONTERMINAL (72) // <select_implementation_5F_parser_26>
, END_PRODUCTION
// At index 113 : <identifier_or_attribute>, in file 'implementation_parser.ggs', line 512
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, END_PRODUCTION
// At index 115 : <identifier_or_enum_value>, in file 'implementation_parser.ggs', line 517
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 117 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, END_PRODUCTION
// At index 118 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, NONTERMINAL (11) // <include_file_level>
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 121 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, NONTERMINAL (0) // <implementation_definition>
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 124 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
, NONTERMINAL (6) // <application_definition>
, NONTERMINAL (32) // <select_goil_5F_syntax_0>
, END_PRODUCTION
// At index 127 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2D_) // $-$
, END_PRODUCTION
// At index 129 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2B_) // $+$
, END_PRODUCTION
// At index 131 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
, END_PRODUCTION
// At index 132 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
, END_PRODUCTION
// At index 133 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3A_) // $:$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (35) // <select_goil_5F_syntax_3>
, END_PRODUCTION
// At index 137 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
, END_PRODUCTION
// At index 138 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (35) // <select_goil_5F_syntax_3>
, END_PRODUCTION
// At index 141 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
, END_PRODUCTION
// At index 142 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, NONTERMINAL (4) // <description>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (36) // <select_goil_5F_syntax_4>
, END_PRODUCTION
// At index 151 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
, NONTERMINAL (12) // <include_cpu_level>
, NONTERMINAL (36) // <select_goil_5F_syntax_4>
, END_PRODUCTION
// At index 154 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) // $TRUE$
, END_PRODUCTION
// At index 156 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) // $FALSE$
, END_PRODUCTION
// At index 158 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
, END_PRODUCTION
// At index 159 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
, NONTERMINAL (10) // <oil_declaration>
, NONTERMINAL (38) // <select_goil_5F_syntax_6>
, END_PRODUCTION
// At index 162 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (40) // <select_goil_5F_syntax_8>
, END_PRODUCTION
// At index 165 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 171 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (41) // <select_goil_5F_syntax_9>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 175 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, NONTERMINAL (3) // <sign>
, NONTERMINAL (42) // <select_goil_5F_syntax_10>
, END_PRODUCTION
// At index 178 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, NONTERMINAL (8) // <boolean>
, NONTERMINAL (43) // <select_goil_5F_syntax_11>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 182 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 185 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 188 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, END_PRODUCTION
// At index 192 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
, END_PRODUCTION
// At index 193 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) // $uint_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 196 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) // $float_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 199 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7B_) // ${$
, NONTERMINAL (9) // <oil_declaration_list>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__7D_) // $}$
, END_PRODUCTION
// At index 203 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
, END_PRODUCTION
// At index 204 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) // $g_string$
, END_PRODUCTION
// At index 206 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, END_PRODUCTION
// At index 208 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_g_5F_string) // $g_string$
, END_PRODUCTION
// At index 210 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, END_PRODUCTION
// At index 212 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
, END_PRODUCTION
// At index 213 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
, NONTERMINAL (13) // <implementation_objects>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (46) // <select_implementation_5F_parser_0>
, END_PRODUCTION
// At index 217 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 220 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
, END_PRODUCTION
// At index 221 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
, END_PRODUCTION
// At index 222 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
, NONTERMINAL (15) // <implementation_type>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3B_) // $;$
, NONTERMINAL (48) // <select_implementation_5F_parser_2>
, END_PRODUCTION
// At index 226 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_33__32_) // $UINT32$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 229 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_33__32_) // $INT32$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 232 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_UINT_36__34_) // $UINT64$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 235 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_INT_36__34_) // $INT64$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 238 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_FLOAT) // $FLOAT$
, NONTERMINAL (22) // <number_options>
, END_PRODUCTION
// At index 241 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_ENUM) // $ENUM$
, NONTERMINAL (21) // <enum_options>
, END_PRODUCTION
// At index 244 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_BOOLEAN) // $BOOLEAN$
, NONTERMINAL (19) // <boolean_options>
, END_PRODUCTION
// At index 247 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRING) // $STRING$
, NONTERMINAL (18) // <string_options>
, END_PRODUCTION
// At index 250 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_IDENTIFIER) // $IDENTIFIER$
, NONTERMINAL (23) // <type_options>
, END_PRODUCTION
// At index 253 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_STRUCT) // $STRUCT$
, NONTERMINAL (16) // <struct_options>
, END_PRODUCTION
// At index 256 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (17) // <objref_option>
, END_PRODUCTION
// At index 259 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 261 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
, END_PRODUCTION
// At index 262 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (52) // <select_implementation_5F_parser_6>
, END_PRODUCTION
// At index 265 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 267 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_string) // $string$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 270 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 273 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 276 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_TRUE) // $TRUE$
, NONTERMINAL (54) // <select_implementation_5F_parser_8>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) // $,$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_FALSE) // $FALSE$
, NONTERMINAL (55) // <select_implementation_5F_parser_9>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 284 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
, END_PRODUCTION
// At index 285 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 287 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
, END_PRODUCTION
// At index 288 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 290 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
, END_PRODUCTION
// At index 291 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (8) // <boolean>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 295 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 297 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
, NONTERMINAL (14) // <implementation_list>
, END_PRODUCTION
// At index 299 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
, END_PRODUCTION
// At index 300 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
, END_PRODUCTION
// At index 301 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) // $,$
, NONTERMINAL (20) // <enum_item>
, NONTERMINAL (58) // <select_implementation_5F_parser_12>
, END_PRODUCTION
// At index 305 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (60) // <select_implementation_5F_parser_14>
, END_PRODUCTION
// At index 308 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 310 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_idf) // $idf$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 313 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 316 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 319 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (62) // <select_implementation_5F_parser_16>
, END_PRODUCTION
// At index 322 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 324 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 326 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 329 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 332 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__3D_) // $=$
, NONTERMINAL (64) // <select_implementation_5F_parser_18>
, END_PRODUCTION
// At index 335 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 337 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
, NONTERMINAL (30) // <identifier_or_attribute>
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 340 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT) // $NO_DEFAULT$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 343 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_AUTO) // $AUTO$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 346 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO) // $WITH_AUTO$
, END_PRODUCTION
// At index 348 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
, END_PRODUCTION
// At index 349 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) // $uint_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 352 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) // $float_number$
, NONTERMINAL (4) // <description>
, END_PRODUCTION
// At index 355 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
, END_PRODUCTION
// At index 356 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2C_) // $,$
, NONTERMINAL (25) // <int_or_float>
, NONTERMINAL (67) // <select_implementation_5F_parser_21>
, END_PRODUCTION
// At index 360 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number) // $set_start_uint_number$
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 363 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_uint_5F_number) // $uint_number$
, NONTERMINAL (69) // <select_implementation_5F_parser_23>
, END_PRODUCTION
// At index 366 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
, TERMINAL (C_Lexique_goil_5F_lexique::kToken_float_5F_number) // $float_number$
, NONTERMINAL (70) // <select_implementation_5F_parser_24>
, END_PRODUCTION
// At index 369 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) // $..$
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 372 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
, NONTERMINAL (26) // <set_followup>
, END_PRODUCTION
// At index 374 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__2E__2E_) // $..$
, NONTERMINAL (25) // <int_or_float>
, END_PRODUCTION
// At index 377 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
, NONTERMINAL (26) // <set_followup>
, END_PRODUCTION
// At index 379 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, NONTERMINAL (27) // <range_content>
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 383 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
, END_PRODUCTION
// At index 384 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5B_) // $[$
, TERMINAL (C_Lexique_goil_5F_lexique::kToken__5D_) // $]$
, END_PRODUCTION
// At index 387 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
, END_PRODUCTION
// At index 388 : <>, in file '.ggs', line 0
, NONTERMINAL (1) // <start>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          P R O D U C T I O N    N A M E S                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames_goil_grammar [136] = {
 {"<implementation_definition>", "implementation_parser", 0}, // at index 0
 {"<start>", "goil_syntax", 7}, // at index 1
 {"<file>", "goil_syntax", 10}, // at index 2
 {"<sign>", "goil_syntax", 12}, // at index 3
 {"<description>", "goil_syntax", 14}, // at index 4
 {"<OIL_version>", "goil_syntax", 16}, // at index 5
 {"<application_definition>", "goil_syntax", 22}, // at index 6
 {"<object_definition_list>", "goil_syntax", 30}, // at index 7
 {"<boolean>", "goil_syntax", 32}, // at index 8
 {"<oil_declaration_list>", "goil_syntax", 34}, // at index 9
 {"<oil_declaration>", "goil_syntax", 36}, // at index 10
 {"<include_file_level>", "goil_syntax", 40}, // at index 11
 {"<include_cpu_level>", "goil_syntax", 43}, // at index 12
 {"<implementation_objects>", "implementation_parser", 46}, // at index 13
 {"<implementation_list>", "implementation_parser", 50}, // at index 14
 {"<implementation_type>", "implementation_parser", 54}, // at index 15
 {"<struct_options>", "implementation_parser", 56}, // at index 16
 {"<objref_option>", "implementation_parser", 61}, // at index 17
 {"<string_options>", "implementation_parser", 65}, // at index 18
 {"<boolean_options>", "implementation_parser", 70}, // at index 19
 {"<enum_item>", "implementation_parser", 76}, // at index 20
 {"<enum_options>", "implementation_parser", 79}, // at index 21
 {"<number_options>", "implementation_parser", 88}, // at index 22
 {"<type_options>", "implementation_parser", 94}, // at index 23
 {"<with_auto>", "implementation_parser", 99}, // at index 24
 {"<int_or_float>", "implementation_parser", 101}, // at index 25
 {"<set_followup>", "implementation_parser", 104}, // at index 26
 {"<range_content>", "implementation_parser", 106}, // at index 27
 {"<range>", "implementation_parser", 109}, // at index 28
 {"<multiple>", "implementation_parser", 111}, // at index 29
 {"<identifier_or_attribute>", "implementation_parser", 113}, // at index 30
 {"<identifier_or_enum_value>", "implementation_parser", 115}, // at index 31
 {"<select_goil_5F_syntax_0>", "goil_syntax", 117}, // at index 32
 {"<select_goil_5F_syntax_0>", "goil_syntax", 118}, // at index 33
 {"<select_goil_5F_syntax_0>", "goil_syntax", 121}, // at index 34
 {"<select_goil_5F_syntax_0>", "goil_syntax", 124}, // at index 35
 {"<select_goil_5F_syntax_1>", "goil_syntax", 127}, // at index 36
 {"<select_goil_5F_syntax_1>", "goil_syntax", 129}, // at index 37
 {"<select_goil_5F_syntax_1>", "goil_syntax", 131}, // at index 38
 {"<select_goil_5F_syntax_2>", "goil_syntax", 132}, // at index 39
 {"<select_goil_5F_syntax_2>", "goil_syntax", 133}, // at index 40
 {"<select_goil_5F_syntax_3>", "goil_syntax", 137}, // at index 41
 {"<select_goil_5F_syntax_3>", "goil_syntax", 138}, // at index 42
 {"<select_goil_5F_syntax_4>", "goil_syntax", 141}, // at index 43
 {"<select_goil_5F_syntax_4>", "goil_syntax", 142}, // at index 44
 {"<select_goil_5F_syntax_4>", "goil_syntax", 151}, // at index 45
 {"<select_goil_5F_syntax_5>", "goil_syntax", 154}, // at index 46
 {"<select_goil_5F_syntax_5>", "goil_syntax", 156}, // at index 47
 {"<select_goil_5F_syntax_6>", "goil_syntax", 158}, // at index 48
 {"<select_goil_5F_syntax_6>", "goil_syntax", 159}, // at index 49
 {"<select_goil_5F_syntax_7>", "goil_syntax", 162}, // at index 50
 {"<select_goil_5F_syntax_7>", "goil_syntax", 165}, // at index 51
 {"<select_goil_5F_syntax_8>", "goil_syntax", 171}, // at index 52
 {"<select_goil_5F_syntax_8>", "goil_syntax", 175}, // at index 53
 {"<select_goil_5F_syntax_8>", "goil_syntax", 178}, // at index 54
 {"<select_goil_5F_syntax_8>", "goil_syntax", 182}, // at index 55
 {"<select_goil_5F_syntax_8>", "goil_syntax", 185}, // at index 56
 {"<select_goil_5F_syntax_9>", "goil_syntax", 188}, // at index 57
 {"<select_goil_5F_syntax_9>", "goil_syntax", 192}, // at index 58
 {"<select_goil_5F_syntax_10>", "goil_syntax", 193}, // at index 59
 {"<select_goil_5F_syntax_10>", "goil_syntax", 196}, // at index 60
 {"<select_goil_5F_syntax_11>", "goil_syntax", 199}, // at index 61
 {"<select_goil_5F_syntax_11>", "goil_syntax", 203}, // at index 62
 {"<select_goil_5F_syntax_12>", "goil_syntax", 204}, // at index 63
 {"<select_goil_5F_syntax_12>", "goil_syntax", 206}, // at index 64
 {"<select_goil_5F_syntax_13>", "goil_syntax", 208}, // at index 65
 {"<select_goil_5F_syntax_13>", "goil_syntax", 210}, // at index 66
 {"<select_implementation_5F_parser_0>", "implementation_parser", 212}, // at index 67
 {"<select_implementation_5F_parser_0>", "implementation_parser", 213}, // at index 68
 {"<select_implementation_5F_parser_1>", "implementation_parser", 217}, // at index 69
 {"<select_implementation_5F_parser_1>", "implementation_parser", 220}, // at index 70
 {"<select_implementation_5F_parser_2>", "implementation_parser", 221}, // at index 71
 {"<select_implementation_5F_parser_2>", "implementation_parser", 222}, // at index 72
 {"<select_implementation_5F_parser_3>", "implementation_parser", 226}, // at index 73
 {"<select_implementation_5F_parser_3>", "implementation_parser", 229}, // at index 74
 {"<select_implementation_5F_parser_3>", "implementation_parser", 232}, // at index 75
 {"<select_implementation_5F_parser_3>", "implementation_parser", 235}, // at index 76
 {"<select_implementation_5F_parser_3>", "implementation_parser", 238}, // at index 77
 {"<select_implementation_5F_parser_3>", "implementation_parser", 241}, // at index 78
 {"<select_implementation_5F_parser_3>", "implementation_parser", 244}, // at index 79
 {"<select_implementation_5F_parser_3>", "implementation_parser", 247}, // at index 80
 {"<select_implementation_5F_parser_3>", "implementation_parser", 250}, // at index 81
 {"<select_implementation_5F_parser_3>", "implementation_parser", 253}, // at index 82
 {"<select_implementation_5F_parser_3>", "implementation_parser", 256}, // at index 83
 {"<select_implementation_5F_parser_4>", "implementation_parser", 259}, // at index 84
 {"<select_implementation_5F_parser_4>", "implementation_parser", 261}, // at index 85
 {"<select_implementation_5F_parser_5>", "implementation_parser", 262}, // at index 86
 {"<select_implementation_5F_parser_5>", "implementation_parser", 265}, // at index 87
 {"<select_implementation_5F_parser_6>", "implementation_parser", 267}, // at index 88
 {"<select_implementation_5F_parser_6>", "implementation_parser", 270}, // at index 89
 {"<select_implementation_5F_parser_6>", "implementation_parser", 273}, // at index 90
 {"<select_implementation_5F_parser_7>", "implementation_parser", 276}, // at index 91
 {"<select_implementation_5F_parser_7>", "implementation_parser", 284}, // at index 92
 {"<select_implementation_5F_parser_8>", "implementation_parser", 285}, // at index 93
 {"<select_implementation_5F_parser_8>", "implementation_parser", 287}, // at index 94
 {"<select_implementation_5F_parser_9>", "implementation_parser", 288}, // at index 95
 {"<select_implementation_5F_parser_9>", "implementation_parser", 290}, // at index 96
 {"<select_implementation_5F_parser_10>", "implementation_parser", 291}, // at index 97
 {"<select_implementation_5F_parser_10>", "implementation_parser", 295}, // at index 98
 {"<select_implementation_5F_parser_11>", "implementation_parser", 297}, // at index 99
 {"<select_implementation_5F_parser_11>", "implementation_parser", 299}, // at index 100
 {"<select_implementation_5F_parser_12>", "implementation_parser", 300}, // at index 101
 {"<select_implementation_5F_parser_12>", "implementation_parser", 301}, // at index 102
 {"<select_implementation_5F_parser_13>", "implementation_parser", 305}, // at index 103
 {"<select_implementation_5F_parser_13>", "implementation_parser", 308}, // at index 104
 {"<select_implementation_5F_parser_14>", "implementation_parser", 310}, // at index 105
 {"<select_implementation_5F_parser_14>", "implementation_parser", 313}, // at index 106
 {"<select_implementation_5F_parser_14>", "implementation_parser", 316}, // at index 107
 {"<select_implementation_5F_parser_15>", "implementation_parser", 319}, // at index 108
 {"<select_implementation_5F_parser_15>", "implementation_parser", 322}, // at index 109
 {"<select_implementation_5F_parser_16>", "implementation_parser", 324}, // at index 110
 {"<select_implementation_5F_parser_16>", "implementation_parser", 326}, // at index 111
 {"<select_implementation_5F_parser_16>", "implementation_parser", 329}, // at index 112
 {"<select_implementation_5F_parser_17>", "implementation_parser", 332}, // at index 113
 {"<select_implementation_5F_parser_17>", "implementation_parser", 335}, // at index 114
 {"<select_implementation_5F_parser_18>", "implementation_parser", 337}, // at index 115
 {"<select_implementation_5F_parser_18>", "implementation_parser", 340}, // at index 116
 {"<select_implementation_5F_parser_18>", "implementation_parser", 343}, // at index 117
 {"<select_implementation_5F_parser_19>", "implementation_parser", 346}, // at index 118
 {"<select_implementation_5F_parser_19>", "implementation_parser", 348}, // at index 119
 {"<select_implementation_5F_parser_20>", "implementation_parser", 349}, // at index 120
 {"<select_implementation_5F_parser_20>", "implementation_parser", 352}, // at index 121
 {"<select_implementation_5F_parser_21>", "implementation_parser", 355}, // at index 122
 {"<select_implementation_5F_parser_21>", "implementation_parser", 356}, // at index 123
 {"<select_implementation_5F_parser_22>", "implementation_parser", 360}, // at index 124
 {"<select_implementation_5F_parser_22>", "implementation_parser", 363}, // at index 125
 {"<select_implementation_5F_parser_22>", "implementation_parser", 366}, // at index 126
 {"<select_implementation_5F_parser_23>", "implementation_parser", 369}, // at index 127
 {"<select_implementation_5F_parser_23>", "implementation_parser", 372}, // at index 128
 {"<select_implementation_5F_parser_24>", "implementation_parser", 374}, // at index 129
 {"<select_implementation_5F_parser_24>", "implementation_parser", 377}, // at index 130
 {"<select_implementation_5F_parser_25>", "implementation_parser", 379}, // at index 131
 {"<select_implementation_5F_parser_25>", "implementation_parser", 383}, // at index 132
 {"<select_implementation_5F_parser_26>", "implementation_parser", 384}, // at index 133
 {"<select_implementation_5F_parser_26>", "implementation_parser", 387}, // at index 134
 {"<>", "", 388} // at index 135
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 L L ( 1 )    P R O D U C T I O N    I N D E X E S                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gProductionIndexes_goil_grammar [136] = {
0, // index 0 : <implementation_definition>, in file 'implementation_parser.ggs', line 54
7, // index 1 : <start>, in file 'goil_syntax.ggs', line 28
10, // index 2 : <file>, in file 'goil_syntax.ggs', line 94
12, // index 3 : <sign>, in file 'goil_syntax.ggs', line 102
14, // index 4 : <description>, in file 'goil_syntax.ggs', line 115
16, // index 5 : <OIL_version>, in file 'goil_syntax.ggs', line 139
22, // index 6 : <application_definition>, in file 'goil_syntax.ggs', line 146
30, // index 7 : <object_definition_list>, in file 'goil_syntax.ggs', line 155
32, // index 8 : <boolean>, in file 'goil_syntax.ggs', line 198
34, // index 9 : <oil_declaration_list>, in file 'goil_syntax.ggs', line 208
36, // index 10 : <oil_declaration>, in file 'goil_syntax.ggs', line 217
40, // index 11 : <include_file_level>, in file 'goil_syntax.ggs', line 390
43, // index 12 : <include_cpu_level>, in file 'goil_syntax.ggs', line 402
46, // index 13 : <implementation_objects>, in file 'implementation_parser.ggs', line 85
50, // index 14 : <implementation_list>, in file 'implementation_parser.ggs', line 130
54, // index 15 : <implementation_type>, in file 'implementation_parser.ggs', line 158
56, // index 16 : <struct_options>, in file 'implementation_parser.ggs', line 186
61, // index 17 : <objref_option>, in file 'implementation_parser.ggs', line 201
65, // index 18 : <string_options>, in file 'implementation_parser.ggs', line 219
70, // index 19 : <boolean_options>, in file 'implementation_parser.ggs', line 251
76, // index 20 : <enum_item>, in file 'implementation_parser.ggs', line 292
79, // index 21 : <enum_options>, in file 'implementation_parser.ggs', line 303
88, // index 22 : <number_options>, in file 'implementation_parser.ggs', line 345
94, // index 23 : <type_options>, in file 'implementation_parser.ggs', line 379
99, // index 24 : <with_auto>, in file 'implementation_parser.ggs', line 413
101, // index 25 : <int_or_float>, in file 'implementation_parser.ggs', line 422
104, // index 26 : <set_followup>, in file 'implementation_parser.ggs', line 440
106, // index 27 : <range_content>, in file 'implementation_parser.ggs', line 452
109, // index 28 : <range>, in file 'implementation_parser.ggs', line 492
111, // index 29 : <multiple>, in file 'implementation_parser.ggs', line 502
113, // index 30 : <identifier_or_attribute>, in file 'implementation_parser.ggs', line 512
115, // index 31 : <identifier_or_enum_value>, in file 'implementation_parser.ggs', line 517
117, // index 32 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
118, // index 33 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
121, // index 34 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
124, // index 35 : <select_goil_5F_syntax_0>, in file 'goil_syntax.ggs', line 95
127, // index 36 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
129, // index 37 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
131, // index 38 : <select_goil_5F_syntax_1>, in file 'goil_syntax.ggs', line 103
132, // index 39 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
133, // index 40 : <select_goil_5F_syntax_2>, in file 'goil_syntax.ggs', line 116
137, // index 41 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
138, // index 42 : <select_goil_5F_syntax_3>, in file 'goil_syntax.ggs', line 123
141, // index 43 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
142, // index 44 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
151, // index 45 : <select_goil_5F_syntax_4>, in file 'goil_syntax.ggs', line 156
154, // index 46 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
156, // index 47 : <select_goil_5F_syntax_5>, in file 'goil_syntax.ggs', line 199
158, // index 48 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
159, // index 49 : <select_goil_5F_syntax_6>, in file 'goil_syntax.ggs', line 211
162, // index 50 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
165, // index 51 : <select_goil_5F_syntax_7>, in file 'goil_syntax.ggs', line 234
171, // index 52 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
175, // index 53 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
178, // index 54 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
182, // index 55 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
185, // index 56 : <select_goil_5F_syntax_8>, in file 'goil_syntax.ggs', line 236
188, // index 57 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
192, // index 58 : <select_goil_5F_syntax_9>, in file 'goil_syntax.ggs', line 257
193, // index 59 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
196, // index 60 : <select_goil_5F_syntax_10>, in file 'goil_syntax.ggs', line 274
199, // index 61 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
203, // index 62 : <select_goil_5F_syntax_11>, in file 'goil_syntax.ggs', line 305
204, // index 63 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
206, // index 64 : <select_goil_5F_syntax_12>, in file 'goil_syntax.ggs', line 393
208, // index 65 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
210, // index 66 : <select_goil_5F_syntax_13>, in file 'goil_syntax.ggs', line 405
212, // index 67 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
213, // index 68 : <select_implementation_5F_parser_0>, in file 'implementation_parser.ggs', line 57
217, // index 69 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
220, // index 70 : <select_implementation_5F_parser_1>, in file 'implementation_parser.ggs', line 92
221, // index 71 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
222, // index 72 : <select_implementation_5F_parser_2>, in file 'implementation_parser.ggs', line 133
226, // index 73 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
229, // index 74 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
232, // index 75 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
235, // index 76 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
238, // index 77 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
241, // index 78 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
244, // index 79 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
247, // index 80 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
250, // index 81 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
253, // index 82 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
256, // index 83 : <select_implementation_5F_parser_3>, in file 'implementation_parser.ggs', line 161
259, // index 84 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
261, // index 85 : <select_implementation_5F_parser_4>, in file 'implementation_parser.ggs', line 190
262, // index 86 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
265, // index 87 : <select_implementation_5F_parser_5>, in file 'implementation_parser.ggs', line 229
267, // index 88 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
270, // index 89 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
273, // index 90 : <select_implementation_5F_parser_6>, in file 'implementation_parser.ggs', line 231
276, // index 91 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
284, // index 92 : <select_implementation_5F_parser_7>, in file 'implementation_parser.ggs', line 258
285, // index 93 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
287, // index 94 : <select_implementation_5F_parser_8>, in file 'implementation_parser.ggs', line 261
288, // index 95 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
290, // index 96 : <select_implementation_5F_parser_9>, in file 'implementation_parser.ggs', line 268
291, // index 97 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
295, // index 98 : <select_implementation_5F_parser_10>, in file 'implementation_parser.ggs', line 280
297, // index 99 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
299, // index 100 : <select_implementation_5F_parser_11>, in file 'implementation_parser.ggs', line 297
300, // index 101 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
301, // index 102 : <select_implementation_5F_parser_12>, in file 'implementation_parser.ggs', line 311
305, // index 103 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
308, // index 104 : <select_implementation_5F_parser_13>, in file 'implementation_parser.ggs', line 321
310, // index 105 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
313, // index 106 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
316, // index 107 : <select_implementation_5F_parser_14>, in file 'implementation_parser.ggs', line 323
319, // index 108 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
322, // index 109 : <select_implementation_5F_parser_15>, in file 'implementation_parser.ggs', line 358
324, // index 110 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
326, // index 111 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
329, // index 112 : <select_implementation_5F_parser_16>, in file 'implementation_parser.ggs', line 360
332, // index 113 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
335, // index 114 : <select_implementation_5F_parser_17>, in file 'implementation_parser.ggs', line 390
337, // index 115 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
340, // index 116 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
343, // index 117 : <select_implementation_5F_parser_18>, in file 'implementation_parser.ggs', line 392
346, // index 118 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
348, // index 119 : <select_implementation_5F_parser_19>, in file 'implementation_parser.ggs', line 415
349, // index 120 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
352, // index 121 : <select_implementation_5F_parser_20>, in file 'implementation_parser.ggs', line 427
355, // index 122 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
356, // index 123 : <select_implementation_5F_parser_21>, in file 'implementation_parser.ggs', line 443
360, // index 124 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
363, // index 125 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
366, // index 126 : <select_implementation_5F_parser_22>, in file 'implementation_parser.ggs', line 459
369, // index 127 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
372, // index 128 : <select_implementation_5F_parser_23>, in file 'implementation_parser.ggs', line 469
374, // index 129 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
377, // index 130 : <select_implementation_5F_parser_24>, in file 'implementation_parser.ggs', line 481
379, // index 131 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
383, // index 132 : <select_implementation_5F_parser_25>, in file 'implementation_parser.ggs', line 495
384, // index 133 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
387, // index 134 : <select_implementation_5F_parser_26>, in file 'implementation_parser.ggs', line 504
388 // index 135 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                           L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gFirstProductionIndexes_goil_grammar [75] = {
0, // at 0 : <implementation_definition>
1, // at 1 : <start>
2, // at 2 : <file>
3, // at 3 : <sign>
4, // at 4 : <description>
5, // at 5 : <OIL_version>
6, // at 6 : <application_definition>
7, // at 7 : <object_definition_list>
8, // at 8 : <boolean>
9, // at 9 : <oil_declaration_list>
10, // at 10 : <oil_declaration>
11, // at 11 : <include_file_level>
12, // at 12 : <include_cpu_level>
13, // at 13 : <implementation_objects>
14, // at 14 : <implementation_list>
15, // at 15 : <implementation_type>
16, // at 16 : <struct_options>
17, // at 17 : <objref_option>
18, // at 18 : <string_options>
19, // at 19 : <boolean_options>
20, // at 20 : <enum_item>
21, // at 21 : <enum_options>
22, // at 22 : <number_options>
23, // at 23 : <type_options>
24, // at 24 : <with_auto>
25, // at 25 : <int_or_float>
26, // at 26 : <set_followup>
27, // at 27 : <range_content>
28, // at 28 : <range>
29, // at 29 : <multiple>
30, // at 30 : <identifier_or_attribute>
31, // at 31 : <identifier_or_enum_value>
32, // at 32 : <select_goil_5F_syntax_0>
36, // at 33 : <select_goil_5F_syntax_1>
39, // at 34 : <select_goil_5F_syntax_2>
41, // at 35 : <select_goil_5F_syntax_3>
43, // at 36 : <select_goil_5F_syntax_4>
46, // at 37 : <select_goil_5F_syntax_5>
48, // at 38 : <select_goil_5F_syntax_6>
50, // at 39 : <select_goil_5F_syntax_7>
52, // at 40 : <select_goil_5F_syntax_8>
57, // at 41 : <select_goil_5F_syntax_9>
59, // at 42 : <select_goil_5F_syntax_10>
61, // at 43 : <select_goil_5F_syntax_11>
63, // at 44 : <select_goil_5F_syntax_12>
65, // at 45 : <select_goil_5F_syntax_13>
67, // at 46 : <select_implementation_5F_parser_0>
69, // at 47 : <select_implementation_5F_parser_1>
71, // at 48 : <select_implementation_5F_parser_2>
73, // at 49 : <select_implementation_5F_parser_3>
84, // at 50 : <select_implementation_5F_parser_4>
86, // at 51 : <select_implementation_5F_parser_5>
88, // at 52 : <select_implementation_5F_parser_6>
91, // at 53 : <select_implementation_5F_parser_7>
93, // at 54 : <select_implementation_5F_parser_8>
95, // at 55 : <select_implementation_5F_parser_9>
97, // at 56 : <select_implementation_5F_parser_10>
99, // at 57 : <select_implementation_5F_parser_11>
101, // at 58 : <select_implementation_5F_parser_12>
103, // at 59 : <select_implementation_5F_parser_13>
105, // at 60 : <select_implementation_5F_parser_14>
108, // at 61 : <select_implementation_5F_parser_15>
110, // at 62 : <select_implementation_5F_parser_16>
113, // at 63 : <select_implementation_5F_parser_17>
115, // at 64 : <select_implementation_5F_parser_18>
118, // at 65 : <select_implementation_5F_parser_19>
120, // at 66 : <select_implementation_5F_parser_20>
122, // at 67 : <select_implementation_5F_parser_21>
124, // at 68 : <select_implementation_5F_parser_22>
127, // at 69 : <select_implementation_5F_parser_23>
129, // at 70 : <select_implementation_5F_parser_24>
131, // at 71 : <select_implementation_5F_parser_25>
133, // at 72 : <select_implementation_5F_parser_26>
135, // at 73 : <>
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    L L ( 1 )    D E C I S I O N    T A B L E S                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gDecision_goil_grammar [] = {
// At index 0 : <implementation_definition> only one production, no choice
  -1,
// At index 1 : <start> only one production, no choice
  -1,
// At index 2 : <file> only one production, no choice
  -1,
// At index 3 : <sign> only one production, no choice
  -1,
// At index 4 : <description> only one production, no choice
  -1,
// At index 5 : <OIL_version> only one production, no choice
  -1,
// At index 6 : <application_definition> only one production, no choice
  -1,
// At index 7 : <object_definition_list> only one production, no choice
  -1,
// At index 8 : <boolean> only one production, no choice
  -1,
// At index 9 : <oil_declaration_list> only one production, no choice
  -1,
// At index 10 : <oil_declaration> only one production, no choice
  -1,
// At index 11 : <include_file_level> only one production, no choice
  -1,
// At index 12 : <include_cpu_level> only one production, no choice
  -1,
// At index 13 : <implementation_objects> only one production, no choice
  -1,
// At index 14 : <implementation_list> only one production, no choice
  -1,
// At index 15 : <implementation_type> only one production, no choice
  -1,
// At index 16 : <struct_options> only one production, no choice
  -1,
// At index 17 : <objref_option> only one production, no choice
  -1,
// At index 18 : <string_options> only one production, no choice
  -1,
// At index 19 : <boolean_options> only one production, no choice
  -1,
// At index 20 : <enum_item> only one production, no choice
  -1,
// At index 21 : <enum_options> only one production, no choice
  -1,
// At index 22 : <number_options> only one production, no choice
  -1,
// At index 23 : <type_options> only one production, no choice
  -1,
// At index 24 : <with_auto> only one production, no choice
  -1,
// At index 25 : <int_or_float> only one production, no choice
  -1,
// At index 26 : <set_followup> only one production, no choice
  -1,
// At index 27 : <range_content> only one production, no choice
  -1,
// At index 28 : <range> only one production, no choice
  -1,
// At index 29 : <multiple> only one production, no choice
  -1,
// At index 30 : <identifier_or_attribute> only one production, no choice
  -1,
// At index 31 : <identifier_or_enum_value> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 32 : <select_goil_5F_syntax_0>
C_Lexique_goil_5F_lexique::kToken_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_include, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_IMPLEMENTATION, -1, // Choice 3
C_Lexique_goil_5F_lexique::kToken_CPU, -1, // Choice 4
  -1,
// At index 41 : <select_goil_5F_syntax_1>
C_Lexique_goil_5F_lexique::kToken__2D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2B_, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, C_Lexique_goil_5F_lexique::kToken_float_5F_number, C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number, -1, // Choice 3
  -1,
// At index 50 : <select_goil_5F_syntax_2>
C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, -1, // Choice 2
  -1,
// At index 57 : <select_goil_5F_syntax_3>
C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 2
  -1,
// At index 64 : <select_goil_5F_syntax_4>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_include, -1, // Choice 3
  -1,
// At index 71 : <select_goil_5F_syntax_5>
C_Lexique_goil_5F_lexique::kToken_TRUE, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_FALSE, -1, // Choice 2
  -1,
// At index 76 : <select_goil_5F_syntax_6>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 81 : <select_goil_5F_syntax_7>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 86 : <select_goil_5F_syntax_8>
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2D_, C_Lexique_goil_5F_lexique::kToken__2B_, C_Lexique_goil_5F_lexique::kToken_uint_5F_number, C_Lexique_goil_5F_lexique::kToken_float_5F_number, C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_TRUE, C_Lexique_goil_5F_lexique::kToken_FALSE, -1, // Choice 3
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 4
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 5
  -1,
// At index 102 : <select_goil_5F_syntax_9>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, -1, // Choice 2
  -1,
// At index 108 : <select_goil_5F_syntax_10>
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 2
  -1,
// At index 113 : <select_goil_5F_syntax_11>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, -1, // Choice 2
  -1,
// At index 119 : <select_goil_5F_syntax_12>
C_Lexique_goil_5F_lexique::kToken_g_5F_string, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 2
  -1,
// At index 124 : <select_goil_5F_syntax_13>
C_Lexique_goil_5F_lexique::kToken_g_5F_string, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 2
  -1,
// At index 129 : <select_implementation_5F_parser_0>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 134 : <select_implementation_5F_parser_1>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 2
  -1,
// At index 139 : <select_implementation_5F_parser_2>
C_Lexique_goil_5F_lexique::kToken__7D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, C_Lexique_goil_5F_lexique::kToken_UINT_33__32_, C_Lexique_goil_5F_lexique::kToken_INT_33__32_, C_Lexique_goil_5F_lexique::kToken_UINT_36__34_, C_Lexique_goil_5F_lexique::kToken_INT_36__34_, C_Lexique_goil_5F_lexique::kToken_FLOAT, C_Lexique_goil_5F_lexique::kToken_ENUM, C_Lexique_goil_5F_lexique::kToken_BOOLEAN, C_Lexique_goil_5F_lexique::kToken_STRING, C_Lexique_goil_5F_lexique::kToken_IDENTIFIER, C_Lexique_goil_5F_lexique::kToken_STRUCT, -1, // Choice 2
  -1,
// At index 154 : <select_implementation_5F_parser_3>
C_Lexique_goil_5F_lexique::kToken_UINT_33__32_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_INT_33__32_, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_UINT_36__34_, -1, // Choice 3
C_Lexique_goil_5F_lexique::kToken_INT_36__34_, -1, // Choice 4
C_Lexique_goil_5F_lexique::kToken_FLOAT, -1, // Choice 5
C_Lexique_goil_5F_lexique::kToken_ENUM, -1, // Choice 6
C_Lexique_goil_5F_lexique::kToken_BOOLEAN, -1, // Choice 7
C_Lexique_goil_5F_lexique::kToken_STRING, -1, // Choice 8
C_Lexique_goil_5F_lexique::kToken_IDENTIFIER, -1, // Choice 9
C_Lexique_goil_5F_lexique::kToken_STRUCT, -1, // Choice 10
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 11
  -1,
// At index 177 : <select_implementation_5F_parser_4>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 182 : <select_implementation_5F_parser_5>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 190 : <select_implementation_5F_parser_6>
C_Lexique_goil_5F_lexique::kToken_string, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 3
  -1,
// At index 197 : <select_implementation_5F_parser_7>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 202 : <select_implementation_5F_parser_8>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 207 : <select_implementation_5F_parser_9>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, -1, // Choice 2
  -1,
// At index 212 : <select_implementation_5F_parser_10>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 220 : <select_implementation_5F_parser_11>
C_Lexique_goil_5F_lexique::kToken__7B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 226 : <select_implementation_5F_parser_12>
C_Lexique_goil_5F_lexique::kToken__5D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 231 : <select_implementation_5F_parser_13>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 239 : <select_implementation_5F_parser_14>
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 3
  -1,
// At index 246 : <select_implementation_5F_parser_15>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 254 : <select_implementation_5F_parser_16>
C_Lexique_goil_5F_lexique::kToken__2D_, C_Lexique_goil_5F_lexique::kToken__2B_, C_Lexique_goil_5F_lexique::kToken_uint_5F_number, C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 3
  -1,
// At index 264 : <select_implementation_5F_parser_17>
C_Lexique_goil_5F_lexique::kToken__3D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3B_, C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 272 : <select_implementation_5F_parser_18>
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_NO_5F_DEFAULT, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_AUTO, -1, // Choice 3
  -1,
// At index 279 : <select_implementation_5F_parser_19>
C_Lexique_goil_5F_lexique::kToken_WITH_5F_AUTO, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 2
  -1,
// At index 285 : <select_implementation_5F_parser_20>
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 2
  -1,
// At index 290 : <select_implementation_5F_parser_21>
C_Lexique_goil_5F_lexique::kToken__5D_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 295 : <select_implementation_5F_parser_22>
C_Lexique_goil_5F_lexique::kToken_set_5F_start_5F_uint_5F_number, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_uint_5F_number, -1, // Choice 2
C_Lexique_goil_5F_lexique::kToken_float_5F_number, -1, // Choice 3
  -1,
// At index 302 : <select_implementation_5F_parser_23>
C_Lexique_goil_5F_lexique::kToken__2E__2E_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 308 : <select_implementation_5F_parser_24>
C_Lexique_goil_5F_lexique::kToken__2E__2E_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__5D_, C_Lexique_goil_5F_lexique::kToken__2C_, -1, // Choice 2
  -1,
// At index 314 : <select_implementation_5F_parser_25>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken_idf, -1, // Choice 2
  -1,
// At index 319 : <select_implementation_5F_parser_26>
C_Lexique_goil_5F_lexique::kToken__5B_, -1, // Choice 1
C_Lexique_goil_5F_lexique::kToken__3A_, C_Lexique_goil_5F_lexique::kToken__3D_, C_Lexique_goil_5F_lexique::kToken__3B_, -1, // Choice 2
  -1,
// At index 326 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static const int16_t gDecisionIndexes_goil_grammar [75] = {
0, // at 0 : <implementation_definition>
1, // at 1 : <start>
2, // at 2 : <file>
3, // at 3 : <sign>
4, // at 4 : <description>
5, // at 5 : <OIL_version>
6, // at 6 : <application_definition>
7, // at 7 : <object_definition_list>
8, // at 8 : <boolean>
9, // at 9 : <oil_declaration_list>
10, // at 10 : <oil_declaration>
11, // at 11 : <include_file_level>
12, // at 12 : <include_cpu_level>
13, // at 13 : <implementation_objects>
14, // at 14 : <implementation_list>
15, // at 15 : <implementation_type>
16, // at 16 : <struct_options>
17, // at 17 : <objref_option>
18, // at 18 : <string_options>
19, // at 19 : <boolean_options>
20, // at 20 : <enum_item>
21, // at 21 : <enum_options>
22, // at 22 : <number_options>
23, // at 23 : <type_options>
24, // at 24 : <with_auto>
25, // at 25 : <int_or_float>
26, // at 26 : <set_followup>
27, // at 27 : <range_content>
28, // at 28 : <range>
29, // at 29 : <multiple>
30, // at 30 : <identifier_or_attribute>
31, // at 31 : <identifier_or_enum_value>
32, // at 32 : <select_goil_5F_syntax_0>
41, // at 33 : <select_goil_5F_syntax_1>
50, // at 34 : <select_goil_5F_syntax_2>
57, // at 35 : <select_goil_5F_syntax_3>
64, // at 36 : <select_goil_5F_syntax_4>
71, // at 37 : <select_goil_5F_syntax_5>
76, // at 38 : <select_goil_5F_syntax_6>
81, // at 39 : <select_goil_5F_syntax_7>
86, // at 40 : <select_goil_5F_syntax_8>
102, // at 41 : <select_goil_5F_syntax_9>
108, // at 42 : <select_goil_5F_syntax_10>
113, // at 43 : <select_goil_5F_syntax_11>
119, // at 44 : <select_goil_5F_syntax_12>
124, // at 45 : <select_goil_5F_syntax_13>
129, // at 46 : <select_implementation_5F_parser_0>
134, // at 47 : <select_implementation_5F_parser_1>
139, // at 48 : <select_implementation_5F_parser_2>
154, // at 49 : <select_implementation_5F_parser_3>
177, // at 50 : <select_implementation_5F_parser_4>
182, // at 51 : <select_implementation_5F_parser_5>
190, // at 52 : <select_implementation_5F_parser_6>
197, // at 53 : <select_implementation_5F_parser_7>
202, // at 54 : <select_implementation_5F_parser_8>
207, // at 55 : <select_implementation_5F_parser_9>
212, // at 56 : <select_implementation_5F_parser_10>
220, // at 57 : <select_implementation_5F_parser_11>
226, // at 58 : <select_implementation_5F_parser_12>
231, // at 59 : <select_implementation_5F_parser_13>
239, // at 60 : <select_implementation_5F_parser_14>
246, // at 61 : <select_implementation_5F_parser_15>
254, // at 62 : <select_implementation_5F_parser_16>
264, // at 63 : <select_implementation_5F_parser_17>
272, // at 64 : <select_implementation_5F_parser_18>
279, // at 65 : <select_implementation_5F_parser_19>
285, // at 66 : <select_implementation_5F_parser_20>
290, // at 67 : <select_implementation_5F_parser_21>
295, // at 68 : <select_implementation_5F_parser_22>
302, // at 69 : <select_implementation_5F_parser_23>
308, // at 70 : <select_implementation_5F_parser_24>
314, // at 71 : <select_implementation_5F_parser_25>
319, // at 72 : <select_implementation_5F_parser_26>
326, // at 73 : <>
0} ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              'implementation_definition' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_implementation_5F_definition_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_definition_i0_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_implementation_5F_definition_ (GALGAS_implementation & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_definition_i0_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        'start' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_start_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_start_i0_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_start_ (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_start_i0_(inLexique) ;
}

void cGrammar_goil_5F_grammar::performIndexing (C_Compiler * /* inCompiler */,
             const C_String & /* inSourceFilePath */) {
}

void cGrammar_goil_5F_grammar::performOnlyLexicalAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_goil_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performLexicalAnalysis () ;
  }
  macroDetachSharedObject (scanner) ;
}

void cGrammar_goil_5F_grammar::performOnlySyntaxAnalysis (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_goil_5F_lexique * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    scanner->performTopDownParsing (gProductions_goil_grammar, gProductionNames_goil_grammar, gProductionIndexes_goil_grammar,
                                    gFirstProductionIndexes_goil_grammar, gDecision_goil_grammar, gDecisionIndexes_goil_grammar, 388) ;
  }
  macroDetachSharedObject (scanner) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Grammar start symbol implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
    C_Lexique_goil_5F_lexique * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, "", "", filePath COMMA_HERE)) ;
    if (scanner->sourceText () != NULL) {
      const bool ok = scanner->performTopDownParsing (gProductions_goil_grammar, gProductionNames_goil_grammar, gProductionIndexes_goil_grammar,
                                                      gFirstProductionIndexes_goil_grammar, gDecision_goil_grammar, gDecisionIndexes_goil_grammar, 388) ;
      if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
        cGrammar_goil_5F_grammar grammar ;
        grammar.nt_start_ (scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
      }
      macroDetachSharedObject (scanner) ;
    }else{
      C_String message ;
      message << "the '" << filePath << "' file does not exist" ;
      const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
      inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (inSourceString.isValid ()) {
    const C_String sourceString = inSourceString.stringValue () ;
    C_Lexique_goil_5F_lexique * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_goil_5F_lexique (inCompiler, sourceString, "" COMMA_HERE)) ;
    const bool ok = scanner->performTopDownParsing (gProductions_goil_grammar, gProductionNames_goil_grammar, gProductionIndexes_goil_grammar,
                                                    gFirstProductionIndexes_goil_grammar, gDecision_goil_grammar, gDecisionIndexes_goil_grammar, 388) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_goil_5F_grammar grammar ;
      grammar.nt_start_ (scanner) ;
    }
    macroDetachSharedObject (scanner) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         'file' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_file_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_file_i1_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_file_ (GALGAS_implementation & parameter_1,
                                GALGAS_applicationDefinition & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_file_i1_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         'sign' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_sign_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_sign_i2_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_sign_ (GALGAS_bool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_sign_i2_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'description' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_description_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_description_i3_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_description_ (GALGAS_lstring & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_description_i3_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'OIL_version' non terminal implementation                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_OIL_5F_version_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_OIL_5F_version_i4_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_OIL_5F_version_ (GALGAS_lstring & parameter_1,
                                GALGAS_lstring & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_OIL_5F_version_i4_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'application_definition' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_application_5F_definition_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_application_5F_definition_i5_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_application_5F_definition_ (const GALGAS_implementation parameter_1,
                                GALGAS_applicationDefinition & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_application_5F_definition_i5_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'object_definition_list' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_object_5F_definition_5F_list_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_object_5F_definition_5F_list_i6_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_object_5F_definition_5F_list_ (const GALGAS_implementation parameter_1,
                                GALGAS_objectsMap & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_object_5F_definition_5F_list_i6_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'boolean' non terminal implementation                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_boolean_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_boolean_i7_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_boolean_ (GALGAS_lbool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_boolean_i7_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'oil_declaration_list' non terminal implementation                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_oil_5F_declaration_5F_list_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_5F_list_i8_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_oil_5F_declaration_5F_list_ (const GALGAS_implementationObjectMap parameter_1,
                                GALGAS_objectAttributes & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_5F_list_i8_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'oil_declaration' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_oil_5F_declaration_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_i9_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_oil_5F_declaration_ (const GALGAS_implementationObjectMap parameter_1,
                                GALGAS_objectAttributes & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_oil_5F_declaration_i9_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'include_file_level' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_include_5F_file_5F_level_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_file_5F_level_i10_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_include_5F_file_5F_level_ (GALGAS_implementation & parameter_1,
                                GALGAS_applicationDefinition & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_file_5F_level_i10_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                  'include_cpu_level' non terminal implementation                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_include_5F_cpu_5F_level_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_cpu_5F_level_i11_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_include_5F_cpu_5F_level_ (const GALGAS_implementation parameter_1,
                                GALGAS_objectsMap & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_goil_5F_syntax_include_5F_cpu_5F_level_i11_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                'implementation_objects' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_implementation_5F_objects_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_objects_i1_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_implementation_5F_objects_ (GALGAS_implementation & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_objects_i1_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'implementation_list' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_implementation_5F_list_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_list_i2_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_implementation_5F_list_ (GALGAS_implementationObjectMap & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_list_i2_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                 'implementation_type' non terminal implementation                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_implementation_5F_type_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_type_i3_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_implementation_5F_type_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_implementation_5F_type_i3_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'struct_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_struct_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_struct_5F_options_i4_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_struct_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_struct_5F_options_i4_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'objref_option' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_objref_5F_option_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_objref_5F_option_i5_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_objref_5F_option_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                GALGAS_lstring parameter_3,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_objref_5F_option_i5_(parameter_1, parameter_2, parameter_3, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'string_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_string_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_string_5F_options_i6_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_string_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_string_5F_options_i6_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   'boolean_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_boolean_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_boolean_5F_options_i7_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_boolean_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_boolean_5F_options_i7_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'enum_item' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_enum_5F_item_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_item_i8_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_enum_5F_item_ (GALGAS_enumValues & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_item_i8_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'enum_options' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_enum_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_options_i9_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_enum_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_enum_5F_options_i9_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'number_options' non terminal implementation                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_number_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_number_5F_options_i10_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_number_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                const GALGAS_dataType parameter_3,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_number_5F_options_i10_(parameter_1, parameter_2, parameter_3, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'type_options' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_type_5F_options_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_type_5F_options_i11_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_type_5F_options_ (GALGAS_lstring & parameter_1,
                                GALGAS_impType & parameter_2,
                                const GALGAS_dataType parameter_3,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_type_5F_options_i11_(parameter_1, parameter_2, parameter_3, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      'with_auto' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_with_5F_auto_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_with_5F_auto_i12_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_with_5F_auto_ (GALGAS_bool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_with_5F_auto_i12_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'int_or_float' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_int_5F_or_5F_float_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_int_5F_or_5F_float_i13_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_int_5F_or_5F_float_ (GALGAS_object_5F_t & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_int_5F_or_5F_float_i13_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     'set_followup' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_set_5F_followup_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_set_5F_followup_i14_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_set_5F_followup_ (GALGAS_numberList & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_set_5F_followup_i14_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    'range_content' non terminal implementation                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_range_5F_content_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_5F_content_i15_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_range_5F_content_ (GALGAS_attributeRange & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_5F_content_i15_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        'range' non terminal implementation                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_range_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_i16_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_range_ (GALGAS_attributeRange & parameter_1,
                                const GALGAS_dataType parameter_2,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_range_i16_(parameter_1, parameter_2, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       'multiple' non terminal implementation                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_multiple_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_multiple_i17_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_multiple_ (GALGAS_bool & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_multiple_i17_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'identifier_or_attribute' non terminal implementation                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_identifier_5F_or_5F_attribute_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_attribute_i18_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_identifier_5F_or_5F_attribute_ (GALGAS_lstring & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_attribute_i18_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               'identifier_or_enum_value' non terminal implementation                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void cGrammar_goil_5F_grammar::nt_identifier_5F_or_5F_enum_5F_value_parse (C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_enum_5F_value_i19_parse(inLexique) ;
}

void cGrammar_goil_5F_grammar::nt_identifier_5F_or_5F_enum_5F_value_ (GALGAS_lstring & parameter_1,
                                C_Lexique_goil_5F_lexique * inLexique) {
  rule_implementation_5F_parser_identifier_5F_or_5F_enum_5F_value_i19_(parameter_1, inLexique) ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_0' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_0 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_1' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_1 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_2' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_2 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_3' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_3 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_4' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_4 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_5' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_5 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_6' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_6 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_7' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_7 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_8' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_8 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_9' added non terminal implementation                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_9 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_10' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_10 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_11' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_11 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_12' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_12 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                            'select_goil_5F_syntax_13' added non terminal implementation                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_goil_5F_syntax_13 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_0' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_0 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_1' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_1 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_2' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_2 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_3' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_3 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_4' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_4 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_5' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_5 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_6' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_6 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_7' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_7 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_8' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_8 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_9' added non terminal implementation                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_9 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_10' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_10 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_11' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_11 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_12' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_12 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_13' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_13 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_14' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_14 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_15' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_15 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_16' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_16 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_17' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_17 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_18' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_18 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_19' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_19 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_20' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_20 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_21' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_21 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_22' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_22 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_23' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_23 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_24' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_24 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_25' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_25 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                       'select_implementation_5F_parser_26' added non terminal implementation                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

int32_t cGrammar_goil_5F_grammar::select_implementation_5F_parser_26 (C_Lexique_goil_5F_lexique * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'dummyFunction'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tfunction function_dummyFunction (C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tfunction result_fct ; // Returned variable
  result_fct = GALGAS_Tfunction::constructor_new (GALGAS_lstring::constructor_new (GALGAS_string::makeEmptyString (), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 78))  COMMA_SOURCE_FILE ("template_semantics.galgas", 78)), GALGAS_lstringlist::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 78)), GALGAS_string::makeEmptyString ()  COMMA_SOURCE_FILE ("template_semantics.galgas", 78)) ;
//---
  return result_fct ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_dummyFunction [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_dummyFunction (C_Compiler * inCompiler,
                                                              const cObjectArray & /* inEffectiveParameterArray */,
                                                              const GALGAS_location & /* inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  return function_dummyFunction (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_dummyFunction ("dummyFunction",
                                                               functionWithGenericHeader_dummyFunction,
                                                               & kTypeDescriptor_GALGAS_Tfunction,
                                                               0,
                                                               functionArgs_dummyFunction) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'valueWithBool'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithBool (const GALGAS_bool & constinArgument_inValue,
                                      const GALGAS_lstring & constinArgument_description,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (constinArgument_inValue.reader_sint_36__34_ (SOURCE_FILE ("template_semantics.galgas", 120)), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 123)), GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 124)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 125)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 119)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithBool [3] = {
  & kTypeDescriptor_GALGAS_bool,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithBool (C_Compiler * inCompiler,
                                                              const cObjectArray & inEffectiveParameterArray,
                                                              const GALGAS_location & /* §§ inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  const GALGAS_bool operand0 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithBool (operand0,
                                 operand1,
                                 inCompiler
                                 COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithBool ("valueWithBool",
                                                               functionWithGenericHeader_valueWithBool,
                                                               & kTypeDescriptor_GALGAS_Tvalue,
                                                               2,
                                                               functionArgs_valueWithBool) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'valueWithUnsigned'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithUnsigned (const GALGAS_uint_36__34_ & constinArgument_inValue,
                                          const GALGAS_lstring & constinArgument_description,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (constinArgument_inValue.reader_sint_36__34_ (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 136)), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 139)), GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 140)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 141)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 135)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithUnsigned [3] = {
  & kTypeDescriptor_GALGAS_uint_36__34_,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithUnsigned (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & /* §§ inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_uint_36__34_ operand0 = GALGAS_uint_36__34_::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                           inCompiler
                                                                           COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithUnsigned (operand0,
                                     operand1,
                                     inCompiler
                                     COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithUnsigned ("valueWithUnsigned",
                                                                   functionWithGenericHeader_valueWithUnsigned,
                                                                   & kTypeDescriptor_GALGAS_Tvalue,
                                                                   2,
                                                                   functionArgs_valueWithUnsigned) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Function 'valueWithSigned'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithSigned (const GALGAS_sint_36__34_ & constinArgument_inValue,
                                        const GALGAS_lstring & constinArgument_description,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (constinArgument_inValue, GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 155)), GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 156)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 157)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 151)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithSigned [3] = {
  & kTypeDescriptor_GALGAS_sint_36__34_,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithSigned (C_Compiler * inCompiler,
                                                                const cObjectArray & inEffectiveParameterArray,
                                                                const GALGAS_location & /* §§ inErrorLocation */
                                                                COMMA_LOCATION_ARGS) {
  const GALGAS_sint_36__34_ operand0 = GALGAS_sint_36__34_::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                           inCompiler
                                                                           COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithSigned (operand0,
                                   operand1,
                                   inCompiler
                                   COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithSigned ("valueWithSigned",
                                                                 functionWithGenericHeader_valueWithSigned,
                                                                 & kTypeDescriptor_GALGAS_Tvalue,
                                                                 2,
                                                                 functionArgs_valueWithSigned) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'valueWithFloat'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithFloat (const GALGAS_double & constinArgument_inValue,
                                       const GALGAS_lstring & constinArgument_description,
                                       C_Compiler * inCompiler
                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), constinArgument_inValue, GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 171)), GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 172)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 173)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 167)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithFloat [3] = {
  & kTypeDescriptor_GALGAS_double,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithFloat (C_Compiler * inCompiler,
                                                               const cObjectArray & inEffectiveParameterArray,
                                                               const GALGAS_location & /* §§ inErrorLocation */
                                                               COMMA_LOCATION_ARGS) {
  const GALGAS_double operand0 = GALGAS_double::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithFloat (operand0,
                                  operand1,
                                  inCompiler
                                  COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithFloat ("valueWithFloat",
                                                                functionWithGenericHeader_valueWithFloat,
                                                                & kTypeDescriptor_GALGAS_Tvalue,
                                                                2,
                                                                functionArgs_valueWithFloat) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Function 'valueWithString'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithString (const GALGAS_string & constinArgument_inValue,
                                        const GALGAS_lstring & constinArgument_description,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), constinArgument_inValue, GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 187)), GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 188)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 189)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 183)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithString [3] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithString (C_Compiler * inCompiler,
                                                                const cObjectArray & inEffectiveParameterArray,
                                                                const GALGAS_location & /* §§ inErrorLocation */
                                                                COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithString (operand0,
                                   operand1,
                                   inCompiler
                                   COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithString ("valueWithString",
                                                                 functionWithGenericHeader_valueWithString,
                                                                 & kTypeDescriptor_GALGAS_Tvalue,
                                                                 2,
                                                                 functionArgs_valueWithString) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Function 'valueWithStruct'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithStruct (const GALGAS_TfieldMap & constinArgument_inValue,
                                        const GALGAS_lstring & constinArgument_description,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 203)), constinArgument_inValue, function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 205)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 199)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithStruct [3] = {
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithStruct (C_Compiler * inCompiler,
                                                                const cObjectArray & inEffectiveParameterArray,
                                                                const GALGAS_location & /* §§ inErrorLocation */
                                                                COMMA_LOCATION_ARGS) {
  const GALGAS_TfieldMap operand0 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithStruct (operand0,
                                   operand1,
                                   inCompiler
                                   COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithStruct ("valueWithStruct",
                                                                 functionWithGenericHeader_valueWithStruct,
                                                                 & kTypeDescriptor_GALGAS_Tvalue,
                                                                 2,
                                                                 functionArgs_valueWithStruct) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'valueWithMap'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithMap (const GALGAS_TfieldMap & constinArgument_inValue,
                                     const GALGAS_lstring & constinArgument_description,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 219)), constinArgument_inValue, function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 221)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 215)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithMap [3] = {
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithMap (C_Compiler * inCompiler,
                                                             const cObjectArray & inEffectiveParameterArray,
                                                             const GALGAS_location & /* §§ inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  const GALGAS_TfieldMap operand0 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithMap (operand0,
                                operand1,
                                inCompiler
                                COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithMap ("valueWithMap",
                                                              functionWithGenericHeader_valueWithMap,
                                                              & kTypeDescriptor_GALGAS_Tvalue,
                                                              2,
                                                              functionArgs_valueWithMap) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'valueWithList'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithList (const GALGAS_TfieldMapList & constinArgument_inValue,
                                      const GALGAS_lstring & constinArgument_description,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), constinArgument_inValue, GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 236)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 237)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 231)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithList [3] = {
  & kTypeDescriptor_GALGAS_TfieldMapList,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithList (C_Compiler * inCompiler,
                                                              const cObjectArray & inEffectiveParameterArray,
                                                              const GALGAS_location & /* §§ inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  const GALGAS_TfieldMapList operand0 = GALGAS_TfieldMapList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                             inCompiler
                                                                             COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_valueWithList (operand0,
                                 operand1,
                                 inCompiler
                                 COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithList ("valueWithList",
                                                               functionWithGenericHeader_valueWithList,
                                                               & kTypeDescriptor_GALGAS_Tvalue,
                                                               2,
                                                               functionArgs_valueWithList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'valueWithVoid'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_Tvalue function_valueWithVoid (C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Tvalue result_outValue ; // Returned variable
  result_outValue = GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 249)), GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 250)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 251)), GALGAS_lstring::constructor_new (GALGAS_string::makeEmptyString (), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 252))  COMMA_SOURCE_FILE ("template_semantics.galgas", 252))  COMMA_SOURCE_FILE ("template_semantics.galgas", 245)) ;
//---
  return result_outValue ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueWithVoid [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueWithVoid (C_Compiler * inCompiler,
                                                              const cObjectArray & /* inEffectiveParameterArray */,
                                                              const GALGAS_location & /* inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  return function_valueWithVoid (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueWithVoid ("valueWithVoid",
                                                               functionWithGenericHeader_valueWithVoid,
                                                               & kTypeDescriptor_GALGAS_Tvalue,
                                                               0,
                                                               functionArgs_valueWithVoid) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Routine 'addBoolValue'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addBoolValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                           const GALGAS_lstring constinArgument_inVariableName,
                           const GALGAS_bool constinArgument_inValue,
                           const GALGAS_lstring constinArgument_description,
                           C_Compiler * inCompiler
                           COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_boolType (SOURCE_FILE ("template_semantics.galgas", 264)), function_valueWithBool (constinArgument_inValue, constinArgument_description, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 265)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 262)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Routine 'addUnsignedValue'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addUnsignedValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                               const GALGAS_lstring constinArgument_inVariableName,
                               const GALGAS_uint_36__34_ constinArgument_inValue,
                               const GALGAS_lstring constinArgument_description,
                               C_Compiler * inCompiler
                               COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_semantics.galgas", 278)), function_valueWithUnsigned (constinArgument_inValue, constinArgument_description, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 279)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 276)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'addSignedValue'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addSignedValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                             const GALGAS_lstring constinArgument_inVariableName,
                             const GALGAS_sint_36__34_ constinArgument_inValue,
                             const GALGAS_lstring constinArgument_description,
                             C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_semantics.galgas", 293)), function_valueWithSigned (constinArgument_inValue, constinArgument_description, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 294)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 291)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Routine 'addFloatValue'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addFloatValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                            const GALGAS_lstring constinArgument_inVariableName,
                            const GALGAS_double constinArgument_inValue,
                            const GALGAS_lstring constinArgument_description,
                            C_Compiler * inCompiler
                            COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_floatType (SOURCE_FILE ("template_semantics.galgas", 308)), function_valueWithFloat (constinArgument_inValue, constinArgument_description, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 309)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 306)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Routine 'addLUnsignedValue'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addLUnsignedValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                                const GALGAS_string constinArgument_inVariableName,
                                const GALGAS_luint_36__34_ constinArgument_inValue,
                                const GALGAS_lstring constinArgument_description,
                                C_Compiler * inCompiler
                                COMMA_UNUSED_LOCATION_ARGS) {
  {
  routine_addUnsignedValue (ioArgument_ioTemplateVariableMap, GALGAS_lstring::constructor_new (constinArgument_inVariableName, constinArgument_inValue.reader_location (SOURCE_FILE ("template_semantics.galgas", 321))  COMMA_SOURCE_FILE ("template_semantics.galgas", 321)), constinArgument_inValue.reader_uint_36__34_ (SOURCE_FILE ("template_semantics.galgas", 321)), constinArgument_description, inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 321)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'addStringValue'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addStringValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                             const GALGAS_lstring constinArgument_inVariableName,
                             const GALGAS_string constinArgument_inValue,
                             const GALGAS_lstring constinArgument_description,
                             C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_semantics.galgas", 333)), function_valueWithString (constinArgument_inValue, constinArgument_description, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 334)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 331)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'addLStringValue'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addLStringValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                              const GALGAS_string constinArgument_inVariableName,
                              const GALGAS_lstring constinArgument_inValue,
                              const GALGAS_lstring constinArgument_description,
                              C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  {
  routine_addStringValue (ioArgument_ioTemplateVariableMap, GALGAS_lstring::constructor_new (constinArgument_inVariableName, constinArgument_inValue.reader_location (SOURCE_FILE ("template_semantics.galgas", 346))  COMMA_SOURCE_FILE ("template_semantics.galgas", 346)), constinArgument_inValue.reader_string (SOURCE_FILE ("template_semantics.galgas", 346)), constinArgument_description, inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 346)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Routine 'addListValue'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addListValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                           const GALGAS_lstring constinArgument_inVariableName,
                           const GALGAS_TfieldMapList constinArgument_inValue,
                           const GALGAS_lstring constinArgument_description,
                           C_Compiler * inCompiler
                           COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_listType (SOURCE_FILE ("template_semantics.galgas", 358)), GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), constinArgument_inValue, GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_semantics.galgas", 359)), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 359)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 359)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 356)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'addStructValue'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addStructValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                             const GALGAS_lstring constinArgument_inVariableName,
                             const GALGAS_TfieldMap constinArgument_inValue,
                             const GALGAS_lstring constinArgument_description,
                             C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_semantics.galgas", 373)), GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_semantics.galgas", 374)), constinArgument_inValue, function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 374)), constinArgument_description  COMMA_SOURCE_FILE ("template_semantics.galgas", 374)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 371)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Routine 'addEnumValue'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addEnumValue (GALGAS_TfieldMap & ioArgument_ioTemplateVariableMap,
                           const GALGAS_lstring constinArgument_inVariableName,
                           const GALGAS_string constinArgument_inValue,
                           const GALGAS_lstring constinArgument_description,
                           C_Compiler * inCompiler
                           COMMA_UNUSED_LOCATION_ARGS) {
  {
  ioArgument_ioTemplateVariableMap.modifier_insertKey (constinArgument_inVariableName, GALGAS_Ttype::constructor_enumType (SOURCE_FILE ("template_semantics.galgas", 387)), function_valueWithString (constinArgument_inValue, constinArgument_description, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 388)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 385)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Routine 'printPath'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_printPath (const GALGAS_TvarPath constinArgument_path,
                        C_Compiler * inCompiler
                        COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_TvarPath enumerator_10959 (constinArgument_path, kEnumeration_up) ;
  while (enumerator_10959.hasCurrentObject ()) {
    inCompiler->printMessage (enumerator_10959.current_item (HERE).reader_string (SOURCE_FILE ("template_semantics.galgas", 406))  COMMA_SOURCE_FILE ("template_semantics.galgas", 406)) ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, enumerator_10959.current_key (HERE).reader_string (SOURCE_FILE ("template_semantics.galgas", 407)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
    if (kBoolTrue == test_0) {
      inCompiler->printMessage (GALGAS_string ("[\"").add_operation (enumerator_10959.current_key (HERE).reader_string (SOURCE_FILE ("template_semantics.galgas", 408)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 408)).add_operation (GALGAS_string ("\"]"), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 408))  COMMA_SOURCE_FILE ("template_semantics.galgas", 408)) ;
    }
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, enumerator_10959.current_idx (HERE).reader_sint (SOURCE_FILE ("template_semantics.galgas", 410)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 410)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->printMessage (GALGAS_string ("[").add_operation (enumerator_10959.current_idx (HERE).mAttribute_sint.reader_string (SOURCE_FILE ("template_semantics.galgas", 411)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 411)).add_operation (GALGAS_string ("]"), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 411))  COMMA_SOURCE_FILE ("template_semantics.galgas", 411)) ;
    }
    if (enumerator_10959.hasNextObject ()) {
      inCompiler->printMessage (GALGAS_string ("::")  COMMA_SOURCE_FILE ("template_semantics.galgas", 413)) ;
    }
    enumerator_10959.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Routine 'searchField'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_searchField (GALGAS_TvarPath inArgument_variable,
                          const GALGAS_TfieldMap constinArgument_inTemplateFieldMap,
                          GALGAS_Ttype & outArgument_variableType,
                          GALGAS_Tvalue & outArgument_variableValue,
                          GALGAS_location & outArgument_variableLocation,
                          C_Compiler * inCompiler
                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_variableType.drop () ; // Release 'out' argument
  outArgument_variableValue.drop () ; // Release 'out' argument
  outArgument_variableLocation.drop () ; // Release 'out' argument
  GALGAS_lstring var_field ;
  GALGAS_lstring var_key ;
  GALGAS_lsint var_idx ;
  outArgument_variableLocation = GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 428)) ;
  {
  inArgument_variable.modifier_popFirst (var_field, var_key, var_idx, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 429)) ;
  }
  constinArgument_inTemplateFieldMap.method_searchKey (var_field, outArgument_variableType, outArgument_variableValue, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 430)) ;
  const enumGalgasBool test_0 = constinArgument_inTemplateFieldMap.reader_hasKey (var_field.reader_string (SOURCE_FILE ("template_semantics.galgas", 431)) COMMA_SOURCE_FILE ("template_semantics.galgas", 431)).boolEnum () ;
  if (kBoolTrue == test_0) {
    outArgument_variableLocation = constinArgument_inTemplateFieldMap.reader_locationForKey (var_field.reader_string (SOURCE_FILE ("template_semantics.galgas", 432)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 432)) ;
  }
  const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_key.reader_string (SOURCE_FILE ("template_semantics.galgas", 434)).objectCompare (GALGAS_string::makeEmptyString ())).operator_and (GALGAS_bool (kIsEqual, outArgument_variableType.objectCompare (GALGAS_Ttype::constructor_mapType (SOURCE_FILE ("template_semantics.galgas", 434)))) COMMA_SOURCE_FILE ("template_semantics.galgas", 434)).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_TfieldMap var_mapMap = outArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_semantics.galgas", 435)) ;
    var_mapMap.method_searchKey (var_key, outArgument_variableType, outArgument_variableValue, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 436)) ;
    const enumGalgasBool test_2 = var_mapMap.reader_hasKey (var_key.reader_string (SOURCE_FILE ("template_semantics.galgas", 437)) COMMA_SOURCE_FILE ("template_semantics.galgas", 437)).boolEnum () ;
    if (kBoolTrue == test_2) {
      outArgument_variableLocation = var_mapMap.reader_locationForKey (var_key.reader_string (SOURCE_FILE ("template_semantics.galgas", 438)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 438)) ;
    }
  }else if (kBoolFalse == test_1) {
    const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, var_idx.reader_sint (SOURCE_FILE ("template_semantics.galgas", 440)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 440)))).operator_and (GALGAS_bool (kIsEqual, outArgument_variableType.objectCompare (GALGAS_Ttype::constructor_listType (SOURCE_FILE ("template_semantics.galgas", 440)))) COMMA_SOURCE_FILE ("template_semantics.galgas", 440)).boolEnum () ;
    if (kBoolTrue == test_3) {
      GALGAS_TfieldMapList var_mapList = outArgument_variableValue.reader_mMapListValue (SOURCE_FILE ("template_semantics.galgas", 441)) ;
      const enumGalgasBool test_4 = GALGAS_bool (kIsStrictInf, var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 442)).objectCompare (var_mapList.reader_length (SOURCE_FILE ("template_semantics.galgas", 442)))).boolEnum () ;
      if (kBoolTrue == test_4) {
        outArgument_variableValue.mAttribute_mStructValue = var_mapList.reader_mMapAtIndex (var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 443)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 443)) ;
        outArgument_variableType = GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_semantics.galgas", 444)) ;
      }else if (kBoolFalse == test_4) {
        inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 446)), GALGAS_string ("index: ").add_operation (var_idx.reader_sint (SOURCE_FILE ("template_semantics.galgas", 446)).reader_string (SOURCE_FILE ("template_semantics.galgas", 446)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 446)).add_operation (GALGAS_string (" >= length:"), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 446)).add_operation (var_mapList.reader_length (SOURCE_FILE ("template_semantics.galgas", 446)).reader_string (SOURCE_FILE ("template_semantics.galgas", 446)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 446))  COMMA_SOURCE_FILE ("template_semantics.galgas", 446)) ;
        outArgument_variableValue.drop () ; // Release error dropped variable
        outArgument_variableType.drop () ; // Release error dropped variable
      }
    }
  }
  const enumGalgasBool test_5 = GALGAS_bool (kIsStrictSup, inArgument_variable.reader_length (SOURCE_FILE ("template_semantics.galgas", 449)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_5) {
    const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, outArgument_variableType.objectCompare (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_semantics.galgas", 450)))).boolEnum () ;
    if (kBoolTrue == test_6) {
      {
      routine_searchField (inArgument_variable, outArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_semantics.galgas", 451)), outArgument_variableType, outArgument_variableValue, outArgument_variableLocation, inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 451)) ;
      }
    }else if (kBoolFalse == test_6) {
      outArgument_variableLocation = GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 453)) ;
      GALGAS_location location_7 (var_field.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_7, GALGAS_string ("struct variable expected")  COMMA_SOURCE_FILE ("template_semantics.galgas", 454)) ;
      outArgument_variableValue.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'searchFieldIfExists'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_searchFieldIfExists (GALGAS_TvarPath inArgument_variable,
                                  const GALGAS_TfieldMap constinArgument_inTemplateFieldMap,
                                  GALGAS_Ttype & outArgument_variableType,
                                  GALGAS_Tvalue & outArgument_variableValue,
                                  GALGAS_bool & outArgument_found,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_variableType.drop () ; // Release 'out' argument
  outArgument_variableValue.drop () ; // Release 'out' argument
  outArgument_found.drop () ; // Release 'out' argument
  GALGAS_lstring var_field ;
  GALGAS_lstring var_key ;
  GALGAS_lsint var_idx ;
  {
  inArgument_variable.modifier_popFirst (var_field, var_key, var_idx, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 470)) ;
  }
  const enumGalgasBool test_0 = constinArgument_inTemplateFieldMap.reader_hasKey (var_field.reader_string (SOURCE_FILE ("template_semantics.galgas", 472)) COMMA_SOURCE_FILE ("template_semantics.galgas", 472)).boolEnum () ;
  if (kBoolTrue == test_0) {
    constinArgument_inTemplateFieldMap.method_searchKey (var_field, outArgument_variableType, outArgument_variableValue, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 473)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_key.reader_string (SOURCE_FILE ("template_semantics.galgas", 474)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
    if (kBoolTrue == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, outArgument_variableType.objectCompare (GALGAS_Ttype::constructor_mapType (SOURCE_FILE ("template_semantics.galgas", 475)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        const enumGalgasBool test_3 = outArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_semantics.galgas", 476)).reader_hasKey (var_key.reader_string (SOURCE_FILE ("template_semantics.galgas", 476)) COMMA_SOURCE_FILE ("template_semantics.galgas", 476)).boolEnum () ;
        if (kBoolTrue == test_3) {
          outArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_semantics.galgas", 477)).method_searchKey (var_key, outArgument_variableType, outArgument_variableValue, inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 477)) ;
          outArgument_found = GALGAS_bool (true) ;
        }else if (kBoolFalse == test_3) {
          outArgument_found = GALGAS_bool (false) ;
        }
      }else if (kBoolFalse == test_2) {
        GALGAS_location location_4 (var_key.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("a key is only used in a map")  COMMA_SOURCE_FILE ("template_semantics.galgas", 483)) ;
        outArgument_found.drop () ; // Release error dropped variable
      }
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_5 = GALGAS_bool (kIsNotEqual, var_idx.reader_sint (SOURCE_FILE ("template_semantics.galgas", 485)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 485)))).boolEnum () ;
      if (kBoolTrue == test_5) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, outArgument_variableType.objectCompare (GALGAS_Ttype::constructor_listType (SOURCE_FILE ("template_semantics.galgas", 486)))).boolEnum () ;
        if (kBoolTrue == test_6) {
          const enumGalgasBool test_7 = GALGAS_bool (kIsStrictInf, var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 487)).objectCompare (outArgument_variableValue.reader_mMapListValue (SOURCE_FILE ("template_semantics.galgas", 487)).reader_length (SOURCE_FILE ("template_semantics.galgas", 487)))).boolEnum () ;
          if (kBoolTrue == test_7) {
            GALGAS_TfieldMapList var_mapList = outArgument_variableValue.reader_mMapListValue (SOURCE_FILE ("template_semantics.galgas", 488)) ;
            outArgument_variableValue.mAttribute_mStructValue = var_mapList.reader_mMapAtIndex (var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 489)), inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 489)) ;
            outArgument_variableType = GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_semantics.galgas", 490)) ;
            outArgument_found = GALGAS_bool (true) ;
          }else if (kBoolFalse == test_7) {
            outArgument_found = GALGAS_bool (false) ;
          }
        }else if (kBoolFalse == test_6) {
          GALGAS_location location_8 (var_idx.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_8, GALGAS_string ("an index is only used in a list")  COMMA_SOURCE_FILE ("template_semantics.galgas", 496)) ;
          outArgument_found.drop () ; // Release error dropped variable
        }
      }else if (kBoolFalse == test_5) {
        outArgument_found = GALGAS_bool (true) ;
      }
    }
  }else if (kBoolFalse == test_0) {
    outArgument_variableType = GALGAS_Ttype::constructor_unconstructedType (SOURCE_FILE ("template_semantics.galgas", 502)) ;
    outArgument_variableValue = function_valueWithVoid (inCompiler COMMA_SOURCE_FILE ("template_semantics.galgas", 503)) ;
    outArgument_found = GALGAS_bool (false) ;
  }
  const enumGalgasBool test_9 = GALGAS_bool (kIsStrictSup, inArgument_variable.reader_length (SOURCE_FILE ("template_semantics.galgas", 506)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (outArgument_found COMMA_SOURCE_FILE ("template_semantics.galgas", 506)).boolEnum () ;
  if (kBoolTrue == test_9) {
    const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, outArgument_variableType.objectCompare (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_semantics.galgas", 507)))).boolEnum () ;
    if (kBoolTrue == test_10) {
      {
      routine_searchFieldIfExists (inArgument_variable, outArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_semantics.galgas", 508)), outArgument_variableType, outArgument_variableValue, outArgument_found, inCompiler  COMMA_SOURCE_FILE ("template_semantics.galgas", 508)) ;
      }
    }else if (kBoolFalse == test_10) {
      outArgument_found = GALGAS_bool (false) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'matchAndOperatorForTemplate'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                          const GALGAS_Ttype constinArgument_inRightExpressionType,
                                          GALGAS_Ttype & outArgument_outResultType,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1231)), GALGAS_string ("operand type error : (").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1231)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1231)).add_operation (GALGAS_string (" & "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1231)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1232)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1232)).add_operation (GALGAS_string (") is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1232))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1231)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'matchOrOperatorForTemplate'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                         const GALGAS_Ttype constinArgument_inRightExpressionType,
                                         GALGAS_Ttype & outArgument_outResultType,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1253)), GALGAS_string ("operand type error : (").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1253)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1253)).add_operation (GALGAS_string (" | "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1253)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1254)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1254)).add_operation (GALGAS_string (") is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1254))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1253)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'matchXorOperatorForTemplate'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                          const GALGAS_Ttype constinArgument_inRightExpressionType,
                                          GALGAS_Ttype & outArgument_outResultType,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1275)), GALGAS_string ("operand type error : (").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1275)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1275)).add_operation (GALGAS_string (" | "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1275)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1276)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1276)).add_operation (GALGAS_string (") is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1276))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1275)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'checkNotOperatorForTemplate'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (const GALGAS_Ttype constinArgument_inOperandType,
                                          GALGAS_Ttype & outArgument_outResultType,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inOperandType.objectCompare (GALGAS_Ttype::constructor_boolType (SOURCE_FILE ("template_expression_parser.galgas", 1290)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1291)), GALGAS_string ("the 'not' operator is not defined for an ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inOperandType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1292)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1291)).add_operation (GALGAS_string (" type"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1292))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1291)) ;
  }
  outArgument_outResultType = constinArgument_inOperandType ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Routine 'checkBitComplementOperatorForTemplate'                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkBitComplementOperatorForTemplate (const GALGAS_Ttype constinArgument_inOperandType,
                                                    GALGAS_Ttype & outArgument_outResultType,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  outArgument_outResultType = constinArgument_inOperandType ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inOperandType.objectCompare (GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1307)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1308)), GALGAS_string ("the ~ operator is not defined for an ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inOperandType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1309)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1308)).add_operation (GALGAS_string (" type"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1309))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1308)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Routine 'comparison_types_checkForTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_comparison_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                      const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType)) {
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_stringType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_stringType)) {
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_enumType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_enumType)) {
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1328)), GALGAS_string ("comparison between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1328)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1328)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1328)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1329)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1329)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1329))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1328)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                Routine 'magnitude_comparison_types_checkForTemplate'                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_magnitude_5F_comparison_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                                   const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_UNUSED_LOCATION_ARGS) {
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_boolType)) {
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_stringType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_stringType)) {
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1347)), GALGAS_string ("comparison between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1347)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1347)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1347)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1348)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1348)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1348))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1347)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                     Routine 'left_shift_types_checkForTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_left_5F_shift_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                         const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                         GALGAS_Ttype & outArgument_outResultType,
                                                         C_Compiler * inCompiler
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1366)), GALGAS_string ("shift between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1366)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1366)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1366)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1367)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1367)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1367))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1366)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Routine 'right_shift_types_checkForTemplate'                                     *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_right_5F_shift_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                          const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                          GALGAS_Ttype & outArgument_outResultType,
                                                          C_Compiler * inCompiler
                                                          COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1382)), GALGAS_string ("shift between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1382)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1382)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1382)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1383)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1383)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1383))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1382)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'addition_types_checkForTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_addition_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                    const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                    GALGAS_Ttype & outArgument_outResultType,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1402)), GALGAS_string ("addition between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1402)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1402)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1402)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1403)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1403)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1403))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1402)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                   Routine 'concatenation_types_checkForTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_concatenation_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                         const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                         GALGAS_Ttype & outArgument_outResultType,
                                                         C_Compiler * inCompiler
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_stringType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_stringType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_listType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_listType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1424)), GALGAS_string ("addition between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1424)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1424)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1424)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1425)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1425)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1425))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1424)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                    Routine 'substraction_types_checkForTemplate'                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_substraction_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                        const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                        GALGAS_Ttype & outArgument_outResultType,
                                                        C_Compiler * inCompiler
                                                        COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1444)), GALGAS_string ("substraction between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1444)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1444)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1444)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1445)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1445)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1445))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1444)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Routine 'multiply_types_checkForTemplate'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_multiply_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                    const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                    GALGAS_Ttype & outArgument_outResultType,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1464)), GALGAS_string ("multiplication between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1464)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1464)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1464)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1465)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1465)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1465))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1464)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'divide_types_checkForTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_divide_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                  const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                  GALGAS_Ttype & outArgument_outResultType,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1484)), GALGAS_string ("division between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1484)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1484)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1484)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1485)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1485)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1485))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1484)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'modulo_types_checkForTemplate'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_modulo_5F_types_5F_checkForTemplate (const GALGAS_Ttype constinArgument_inLeftExpressionType,
                                                  const GALGAS_Ttype constinArgument_inRightExpressionType,
                                                  GALGAS_Ttype & outArgument_outResultType,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  if (constinArgument_inLeftExpressionType.isValid () && constinArgument_inRightExpressionType.isValid ()) {
    if ((constinArgument_inLeftExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType) && (constinArgument_inRightExpressionType.enumValue () == GALGAS_Ttype::kEnum_intType)) {
      outArgument_outResultType = constinArgument_inLeftExpressionType ;
    }else{
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1504)), GALGAS_string ("modulo between ").add_operation (categoryReader_messageGoilTemplateType (constinArgument_inLeftExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1504)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1504)).add_operation (GALGAS_string (" and "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1504)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inRightExpressionType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1505)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1505)).add_operation (GALGAS_string (" is not valid"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1505))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1504)) ;
      outArgument_outResultType.drop () ; // Release error dropped variable
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'argumentListSignature'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_argumentListSignature (const GALGAS_TexpressionList & constinArgument_inParameterTypeList,
                                              C_Compiler * inCompiler
                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  result_outResult = GALGAS_string (" this method call has ") ;
  result_outResult.dotAssign_operation (constinArgument_inParameterTypeList.reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1520)).reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1520)).add_operation (GALGAS_string (" argument"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1520))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1520)) ;
  GALGAS_string temp_0 ;
  const enumGalgasBool test_1 = GALGAS_bool (kIsStrictSup, constinArgument_inParameterTypeList.reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1521)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_1) {
    temp_0 = GALGAS_string ("s") ;
  }else if (kBoolFalse == test_1) {
    temp_0 = GALGAS_string::makeEmptyString () ;
  }
  result_outResult.dotAssign_operation (temp_0  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1521)) ;
  cEnumerator_TexpressionList enumerator_53058 (constinArgument_inParameterTypeList, kEnumeration_up) ;
  const bool bool_2 = true ;
  if (enumerator_53058.hasCurrentObject () && bool_2) {
    result_outResult.dotAssign_operation (GALGAS_string (": ")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1523)) ;
    while (enumerator_53058.hasCurrentObject () && bool_2) {
      result_outResult.dotAssign_operation (categoryReader_messageGoilTemplateType (enumerator_53058.current_mType (HERE), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1524))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1524)) ;
      enumerator_53058.gotoNextObject () ;
      if (enumerator_53058.hasCurrentObject () && bool_2) {
        result_outResult.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1525)) ;
      }
    }
  }
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_argumentListSignature [2] = {
  & kTypeDescriptor_GALGAS_TexpressionList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_argumentListSignature (C_Compiler * inCompiler,
                                                                      const cObjectArray & inEffectiveParameterArray,
                                                                      const GALGAS_location & /* §§ inErrorLocation */
                                                                      COMMA_LOCATION_ARGS) {
  const GALGAS_TexpressionList operand0 = GALGAS_TexpressionList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                 inCompiler
                                                                                 COMMA_THERE) ;
  return function_argumentListSignature (operand0,
                                         inCompiler
                                         COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_argumentListSignature ("argumentListSignature",
                                                                       functionWithGenericHeader_argumentListSignature,
                                                                       & kTypeDescriptor_GALGAS_string,
                                                                       1,
                                                                       functionArgs_argumentListSignature) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Routine 'checkInvocationHasNoArgument'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkInvocationHasNoArgument (const GALGAS_Ttype constinArgument_inType,
                                           const GALGAS_lstring constinArgument_inMethodName,
                                           const GALGAS_TexpressionList constinArgument_inParameterTypeList,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, constinArgument_inParameterTypeList.reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1539)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("calling '").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1540)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1540)).add_operation (GALGAS_string ("' on a "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1540)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1541)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1540)).add_operation (GALGAS_string (" type requires no argument; "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1541)).add_operation (function_argumentListSignature (constinArgument_inParameterTypeList, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1542)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1541))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1540)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'checkInvocationHasArguments'                                        *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkInvocationHasArguments (const GALGAS_Ttype constinArgument_inType,
                                          const GALGAS_lstring constinArgument_inMethodName,
                                          const GALGAS_TexpressionList constinArgument_inParameterTypeList,
                                          const GALGAS_Ttype constinArgument_inExpectedType,
                                          const GALGAS_uint constinArgument_argsNumber,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_Ttype var_parameterType ;
  GALGAS_Tvalue joker_54181 ; // Joker input parameter
  constinArgument_inParameterTypeList.method_first (joker_54181, var_parameterType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1553)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_inParameterTypeList.reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1554)).objectCompare (constinArgument_argsNumber)).operator_or (GALGAS_bool (kIsNotEqual, var_parameterType.objectCompare (constinArgument_inExpectedType)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1554)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("calling '").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1555)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1555)).add_operation (GALGAS_string ("' on a "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1555)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1556)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1555)).add_operation (GALGAS_string (" type requires "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1556)).add_operation (constinArgument_argsNumber.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1556)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1556)).add_operation (GALGAS_string (" unsigned argument(s); "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1556)).add_operation (function_argumentListSignature (constinArgument_inParameterTypeList, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1557)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1556))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1555)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Routine 'templateMethodInvocation'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_templateMethodInvocation (const GALGAS_Ttype constinArgument_inType,
                                       const GALGAS_Tvalue constinArgument_inValue,
                                       const GALGAS_lstring constinArgument_inMethodName,
                                       GALGAS_TexpressionList inArgument_inParameterTypeList,
                                       GALGAS_Ttype & outArgument_outResultType,
                                       GALGAS_Tvalue & outArgument_outResultValue,
                                       C_Compiler * inCompiler
                                       COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outResultType.drop () ; // Release 'out' argument
  outArgument_outResultValue.drop () ; // Release 'out' argument
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1574)).objectCompare (GALGAS_string ("description"))).boolEnum () ;
  if (kBoolTrue == test_0) {
    {
    routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1575)) ;
    }
    outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1576)) ;
    outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mDescription (SOURCE_FILE ("template_expression_parser.galgas", 1577)).reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1577)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1577)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1577)) ;
  }else if (kBoolFalse == test_0) {
    switch (constinArgument_inType.enumValue ()) {
    case GALGAS_Ttype::kNotBuilt:
      break ;
    case GALGAS_Ttype::kEnum_boolType:
      {
        const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1581)).objectCompare (GALGAS_string ("trueOrFalse"))).boolEnum () ;
        if (kBoolTrue == test_1) {
          {
          routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1582)) ;
          }
          outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1583)) ;
          GALGAS_string temp_2 ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1585)).objectCompare (GALGAS_sint_36__34_ ((int64_t) 0LL))).boolEnum () ;
          if (kBoolTrue == test_3) {
            temp_2 = GALGAS_string ("true") ;
          }else if (kBoolFalse == test_3) {
            temp_2 = GALGAS_string ("false") ;
          }
          outArgument_outResultValue = function_valueWithString (temp_2, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1586)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1584)) ;
        }else if (kBoolFalse == test_1) {
          const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1588)).objectCompare (GALGAS_string ("yesOrNo"))).boolEnum () ;
          if (kBoolTrue == test_4) {
            {
            routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1589)) ;
            }
            outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1590)) ;
            GALGAS_string temp_5 ;
            const enumGalgasBool test_6 = GALGAS_bool (kIsStrictSup, constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1592)).objectCompare (GALGAS_sint_36__34_ ((int64_t) 0LL))).boolEnum () ;
            if (kBoolTrue == test_6) {
              temp_5 = GALGAS_string ("yes") ;
            }else if (kBoolFalse == test_6) {
              temp_5 = GALGAS_string ("no") ;
            }
            outArgument_outResultValue = function_valueWithString (temp_5, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1593)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1591)) ;
          }else if (kBoolFalse == test_4) {
            const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1595)).objectCompare (GALGAS_string ("unsigned"))).boolEnum () ;
            if (kBoolTrue == test_7) {
              {
              routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1596)) ;
              }
              outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1597)) ;
              outArgument_outResultValue = constinArgument_inValue ;
            }else if (kBoolFalse == test_7) {
              GALGAS_location location_8 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_8, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1600)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1600)).add_operation (GALGAS_string (" template method is not defined"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1600))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1600)) ;
              outArgument_outResultValue.drop () ; // Release error dropped variable
              outArgument_outResultType.drop () ; // Release error dropped variable
            }
          }
        }
      }
      break ;
    case GALGAS_Ttype::kEnum_intType:
      {
        const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1603)).objectCompare (GALGAS_string ("string"))).boolEnum () ;
        if (kBoolTrue == test_9) {
          {
          routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1604)) ;
          }
          outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1605)) ;
          outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1606)).reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1606)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1606)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1606)) ;
        }else if (kBoolFalse == test_9) {
          const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1607)).objectCompare (GALGAS_string ("hexString"))).boolEnum () ;
          if (kBoolTrue == test_10) {
            {
            routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1608)) ;
            }
            outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1609)) ;
            outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1610)).reader_uint_36__34_ (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1610)).reader_hexString (SOURCE_FILE ("template_expression_parser.galgas", 1610)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1610)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1610)) ;
          }else if (kBoolFalse == test_10) {
            const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1611)).objectCompare (GALGAS_string ("numberOfBytes"))).operator_or (GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1611)).objectCompare (GALGAS_string ("signedNumberOfBytes"))) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1611)).boolEnum () ;
            if (kBoolTrue == test_11) {
              {
              routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1612)) ;
              }
              outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1613)) ;
              GALGAS_sint_36__34_ var_value = constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1614)) ;
              GALGAS_uint var_numberOfBytes = GALGAS_uint ((uint32_t) 1U) ;
              const enumGalgasBool test_12 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1617)).objectCompare (GALGAS_string ("signedNumberOfBytes"))).boolEnum () ;
              if (kBoolTrue == test_12) {
                var_value = var_value.multiply_operation (GALGAS_uint ((uint32_t) 2U).reader_sint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1618)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1618)) ;
              }
              GALGAS_uint var_count = GALGAS_uint ((uint32_t) 0U) ;
              if (GALGAS_uint ((uint32_t) 4U).isValid ()) {
                uint32_t variant_57464 = GALGAS_uint ((uint32_t) 4U).uintValue () ;
                bool loop_57464 = true ;
                while (loop_57464) {
                  loop_57464 = GALGAS_bool (kIsStrictInf, var_count.objectCompare (GALGAS_uint ((uint32_t) 4U))).isValid () ;
                  if (loop_57464) {
                    loop_57464 = GALGAS_bool (kIsStrictInf, var_count.objectCompare (GALGAS_uint ((uint32_t) 4U))).boolValue () ;
                  }
                  if (loop_57464 && (0 == variant_57464)) {
                    loop_57464 = false ;
                    inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_expression_parser.galgas", 1621)) ;
                  }
                  if (loop_57464) {
                    variant_57464 -- ;
                    GALGAS_sint_36__34_ var_maxValue = GALGAS_sint_36__34_ ((int64_t) 1LL).left_shift_operation (var_numberOfBytes.multiply_operation (GALGAS_uint ((uint32_t) 8U), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1623)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1623)).substract_operation (GALGAS_sint_36__34_ ((int64_t) 1LL), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1623)) ;
                    const enumGalgasBool test_13 = GALGAS_bool (kIsStrictInf, var_maxValue.objectCompare (var_value)).boolEnum () ;
                    if (kBoolTrue == test_13) {
                      var_numberOfBytes = var_numberOfBytes.multiply_operation (GALGAS_uint ((uint32_t) 2U), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1625)) ;
                    }
                    var_count.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1627)) ;
                  }
                }
              }
              outArgument_outResultValue = function_valueWithUnsigned (var_numberOfBytes.reader_uint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1629)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1629)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1629)) ;
            }else if (kBoolFalse == test_11) {
              const enumGalgasBool test_14 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1630)).objectCompare (GALGAS_string ("numberOfBits"))).operator_or (GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1630)).objectCompare (GALGAS_string ("signedNumberOfBits"))) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1630)).boolEnum () ;
              if (kBoolTrue == test_14) {
                {
                routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1631)) ;
                }
                outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1632)) ;
                GALGAS_sint_36__34_ var_value = constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1633)) ;
                const enumGalgasBool test_15 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1634)).objectCompare (GALGAS_string ("signedNumberOfBits"))).boolEnum () ;
                if (kBoolTrue == test_15) {
                  var_value = var_value.multiply_operation (GALGAS_uint ((uint32_t) 2U).reader_sint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1635)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1635)) ;
                }
                GALGAS_sint_36__34_ var_numberOfBits = GALGAS_sint_36__34_ ((int64_t) 0LL) ;
                if (GALGAS_uint ((uint32_t) 64U).isValid ()) {
                  uint32_t variant_58237 = GALGAS_uint ((uint32_t) 64U).uintValue () ;
                  bool loop_58237 = true ;
                  while (loop_58237) {
                    loop_58237 = GALGAS_bool (kIsNotEqual, var_value.objectCompare (GALGAS_sint_36__34_ ((int64_t) 0LL))).isValid () ;
                    if (loop_58237) {
                      loop_58237 = GALGAS_bool (kIsNotEqual, var_value.objectCompare (GALGAS_sint_36__34_ ((int64_t) 0LL))).boolValue () ;
                    }
                    if (loop_58237 && (0 == variant_58237)) {
                      loop_58237 = false ;
                      inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_expression_parser.galgas", 1639)) ;
                    }
                    if (loop_58237) {
                      variant_58237 -- ;
                      var_numberOfBits.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1641)) ;
                      var_value = var_value.right_shift_operation (GALGAS_uint ((uint32_t) 1U) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1642)) ;
                    }
                  }
                }
                outArgument_outResultValue = function_valueWithSigned (var_numberOfBits, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1644)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1644)) ;
              }else if (kBoolFalse == test_14) {
                GALGAS_location location_16 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
                inCompiler->emitSemanticError (location_16, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1646)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1646)).add_operation (GALGAS_string (" template method is not defined for "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1646)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1646)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1646))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1646)) ;
                outArgument_outResultValue.drop () ; // Release error dropped variable
                outArgument_outResultType.drop () ; // Release error dropped variable
              }
            }
          }
        }
      }
      break ;
    case GALGAS_Ttype::kEnum_stringType:
      {
        const enumGalgasBool test_17 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1649)).objectCompare (GALGAS_string ("HTMLRepresentation"))).boolEnum () ;
        if (kBoolTrue == test_17) {
          {
          routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1650)) ;
          }
          outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1651)) ;
          outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1652)).reader_HTMLRepresentation (SOURCE_FILE ("template_expression_parser.galgas", 1652)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1652)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1652)) ;
        }else if (kBoolFalse == test_17) {
          const enumGalgasBool test_18 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1653)).objectCompare (GALGAS_string ("identifierRepresentation"))).boolEnum () ;
          if (kBoolTrue == test_18) {
            {
            routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1654)) ;
            }
            outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1655)) ;
            outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1656)).reader_identifierRepresentation (SOURCE_FILE ("template_expression_parser.galgas", 1656)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1656)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1656)) ;
          }else if (kBoolFalse == test_18) {
            const enumGalgasBool test_19 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1657)).objectCompare (GALGAS_string ("fileExists"))).boolEnum () ;
            if (kBoolTrue == test_19) {
              {
              routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1658)) ;
              }
              outArgument_outResultType = GALGAS_Ttype::constructor_boolType (SOURCE_FILE ("template_expression_parser.galgas", 1659)) ;
              outArgument_outResultValue = function_valueWithBool (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1660)).reader_fileExists (SOURCE_FILE ("template_expression_parser.galgas", 1660)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1660)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1660)) ;
            }else if (kBoolFalse == test_19) {
              const enumGalgasBool test_20 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1661)).objectCompare (GALGAS_string ("lowercaseString"))).boolEnum () ;
              if (kBoolTrue == test_20) {
                {
                routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1662)) ;
                }
                outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1663)) ;
                outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1664)).reader_lowercaseString (SOURCE_FILE ("template_expression_parser.galgas", 1664)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1664)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1664)) ;
              }else if (kBoolFalse == test_20) {
                const enumGalgasBool test_21 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1665)).objectCompare (GALGAS_string ("length"))).boolEnum () ;
                if (kBoolTrue == test_21) {
                  {
                  routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1666)) ;
                  }
                  outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1667)) ;
                  outArgument_outResultValue = function_valueWithUnsigned (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1668)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1668)).reader_uint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1668)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1668)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1668)) ;
                }else if (kBoolFalse == test_21) {
                  const enumGalgasBool test_22 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1669)).objectCompare (GALGAS_string ("stringByCapitalizingFirstCharacter"))).boolEnum () ;
                  if (kBoolTrue == test_22) {
                    {
                    routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1670)) ;
                    }
                    outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1671)) ;
                    outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1672)).reader_stringByCapitalizingFirstCharacter (SOURCE_FILE ("template_expression_parser.galgas", 1672)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1672)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1672)) ;
                  }else if (kBoolFalse == test_22) {
                    const enumGalgasBool test_23 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1673)).objectCompare (GALGAS_string ("uppercaseString"))).boolEnum () ;
                    if (kBoolTrue == test_23) {
                      {
                      routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1674)) ;
                      }
                      outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1675)) ;
                      outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1676)).reader_uppercaseString (SOURCE_FILE ("template_expression_parser.galgas", 1676)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1676)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1676)) ;
                    }else if (kBoolFalse == test_23) {
                      const enumGalgasBool test_24 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1677)).objectCompare (GALGAS_string ("unsigned"))).boolEnum () ;
                      if (kBoolTrue == test_24) {
                        {
                        routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1678)) ;
                        }
                        outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1679)) ;
                        outArgument_outResultValue = function_valueWithUnsigned (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1680)).reader_decimalUnsignedNumber (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1680)).reader_uint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1680)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1680)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1680)) ;
                      }else if (kBoolFalse == test_24) {
                        const enumGalgasBool test_25 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1681)).objectCompare (GALGAS_string ("leftSubString"))).boolEnum () ;
                        if (kBoolTrue == test_25) {
                          {
                          routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1682)), GALGAS_uint ((uint32_t) 1U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1682)) ;
                          }
                          GALGAS_Tvalue var_parameter ;
                          GALGAS_Ttype joker_61177 ; // Joker input parameter
                          inArgument_inParameterTypeList.method_first (var_parameter, joker_61177, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1684)) ;
                          outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1685)) ;
                          outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1686)).reader_leftSubString (var_parameter.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1686)).reader_uint (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1686)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1686)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1686)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1686)) ;
                        }else if (kBoolFalse == test_25) {
                          const enumGalgasBool test_26 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1687)).objectCompare (GALGAS_string ("rightSubString"))).boolEnum () ;
                          if (kBoolTrue == test_26) {
                            {
                            routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1688)), GALGAS_uint ((uint32_t) 1U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1688)) ;
                            }
                            GALGAS_Tvalue var_parameter ;
                            GALGAS_Ttype joker_61588 ; // Joker input parameter
                            inArgument_inParameterTypeList.method_first (var_parameter, joker_61588, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1690)) ;
                            outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1691)) ;
                            outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1692)).reader_rightSubString (var_parameter.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1692)).reader_uint (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1692)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1692)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1692)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1692)) ;
                          }else if (kBoolFalse == test_26) {
                            const enumGalgasBool test_27 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1693)).objectCompare (GALGAS_string ("subString"))).boolEnum () ;
                            if (kBoolTrue == test_27) {
                              {
                              routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1694)), GALGAS_uint ((uint32_t) 2U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1694)) ;
                              }
                              GALGAS_Tvalue var_start = inArgument_inParameterTypeList.reader_mValueAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1695)) ;
                              GALGAS_Tvalue var_length = inArgument_inParameterTypeList.reader_mValueAtIndex (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1696)) ;
                              outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1699)) ;
                              outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1700)).reader_subString (var_start.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1700)).reader_uint (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1700)), var_length.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1700)).reader_uint (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1700)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1700)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1700)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1700)) ;
                            }else if (kBoolFalse == test_27) {
                              const enumGalgasBool test_28 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1701)).objectCompare (GALGAS_string ("reversedString"))).boolEnum () ;
                              if (kBoolTrue == test_28) {
                                {
                                routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1702)) ;
                                }
                                outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1703)) ;
                                outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1704)).reader_reversedString (SOURCE_FILE ("template_expression_parser.galgas", 1704)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1704)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1704)) ;
                              }else if (kBoolFalse == test_28) {
                                const enumGalgasBool test_29 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1705)).objectCompare (GALGAS_string ("componentsSeparatedByString"))).boolEnum () ;
                                if (kBoolTrue == test_29) {
                                  {
                                  routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1706)), GALGAS_uint ((uint32_t) 1U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1706)) ;
                                  }
                                  GALGAS_Tvalue var_separator ;
                                  GALGAS_Ttype joker_62820 ; // Joker input parameter
                                  inArgument_inParameterTypeList.method_first (var_separator, joker_62820, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1708)) ;
                                  GALGAS_stringlist var_stringlist = constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1709)).reader_componentsSeparatedByString (var_separator.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1709)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1709)) ;
                                  GALGAS_TfieldMapList var_result = GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_expression_parser.galgas", 1710)) ;
                                  cEnumerator_stringlist enumerator_63011 (var_stringlist, kEnumeration_up) ;
                                  while (enumerator_63011.hasCurrentObject ()) {
                                    GALGAS_TfieldMap var_item = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_expression_parser.galgas", 1712)) ;
                                    {
                                    routine_addStringValue (var_item, function_lstringWith (GALGAS_string ("VALUE"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1713)), enumerator_63011.current_mValue (HERE), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1713)), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1713)) ;
                                    }
                                    var_result.addAssign_operation (var_item  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1714)) ;
                                    enumerator_63011.gotoNextObject () ;
                                  }
                                  outArgument_outResultType = GALGAS_Ttype::constructor_listType (SOURCE_FILE ("template_expression_parser.galgas", 1716)) ;
                                  outArgument_outResultValue = function_valueWithList (var_result, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1717)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1717)) ;
                                }else if (kBoolFalse == test_29) {
                                  const enumGalgasBool test_30 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1718)).objectCompare (GALGAS_string ("interpretEscape"))).boolEnum () ;
                                  if (kBoolTrue == test_30) {
                                    {
                                    routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1719)) ;
                                    }
                                    outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1720)) ;
                                    outArgument_outResultValue = function_valueWithString (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1721)).reader_stringByReplacingStringByString (GALGAS_string ("\\n"), GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1721)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1721)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1721)) ;
                                  }else if (kBoolFalse == test_30) {
                                    const enumGalgasBool test_31 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1722)).objectCompare (GALGAS_string ("columnPrefixedBy"))).boolEnum () ;
                                    if (kBoolTrue == test_31) {
                                      {
                                      routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1723)), GALGAS_uint ((uint32_t) 1U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1723)) ;
                                      }
                                      GALGAS_Tvalue var_separator ;
                                      GALGAS_Ttype joker_63837 ; // Joker input parameter
                                      inArgument_inParameterTypeList.method_first (var_separator, joker_63837, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1725)) ;
                                      outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1726)) ;
                                      outArgument_outResultValue = function_valueWithString (var_separator.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1727)).add_operation (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1727)).reader_stringByReplacingStringByString (GALGAS_string ("\n"), GALGAS_string ("\n").add_operation (var_separator.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1727)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1727)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1727)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1727)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1727)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1727)) ;
                                    }else if (kBoolFalse == test_31) {
                                      const enumGalgasBool test_32 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1728)).objectCompare (GALGAS_string ("wrap"))).boolEnum () ;
                                      if (kBoolTrue == test_32) {
                                        {
                                        routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1729)), GALGAS_uint ((uint32_t) 2U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1729)) ;
                                        }
                                        GALGAS_Tvalue var_width ;
                                        {
                                        GALGAS_Ttype joker_64388 ; // Joker input parameter
                                        inArgument_inParameterTypeList.modifier_popFirst (var_width, joker_64388, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1732)) ;
                                        }
                                        GALGAS_Tvalue var_shift ;
                                        {
                                        GALGAS_Ttype joker_64461 ; // Joker input parameter
                                        inArgument_inParameterTypeList.modifier_popFirst (var_shift, joker_64461, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1734)) ;
                                        }
                                        GALGAS_string var_stringshift = GALGAS_string::constructor_stringWithSequenceOfCharacters (GALGAS_char (TO_UNICODE (32)), var_shift.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1735)).reader_uint (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1735))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1735)) ;
                                        GALGAS_string var_result = constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1736)) ;
                                        GALGAS_stringlist var_paragraph = var_result.reader_componentsSeparatedByString (GALGAS_string ("\n") COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1745)) ;
                                        GALGAS_stringlist var_resultParagraph = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("template_expression_parser.galgas", 1746)) ;
                                        cEnumerator_stringlist enumerator_65126 (var_paragraph, kEnumeration_up) ;
                                        while (enumerator_65126.hasCurrentObject ()) {
                                          GALGAS_stringlist var_parts = enumerator_65126.current_mValue (HERE).reader_componentsSeparatedByString (GALGAS_string (" ") COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1748)) ;
                                          GALGAS_sint_36__34_ var_linewidth = GALGAS_sint_36__34_ ((int64_t) 0LL) ;
                                          GALGAS_bool var_newline = GALGAS_bool (true) ;
                                          var_result = GALGAS_string::makeEmptyString () ;
                                          cEnumerator_stringlist enumerator_65326 (var_parts, kEnumeration_up) ;
                                          while (enumerator_65326.hasCurrentObject ()) {
                                            const enumGalgasBool test_33 = GALGAS_bool (kIsStrictSup, var_linewidth.add_operation (enumerator_65326.current_mValue (HERE).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1753)).reader_sint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1753)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1753)).objectCompare (var_width.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1753)))).boolEnum () ;
                                            if (kBoolTrue == test_33) {
                                              var_result.dotAssign_operation (GALGAS_string ("\n").add_operation (var_stringshift, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1754))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1754)) ;
                                              var_linewidth = var_shift.reader_mInt_36__34_Value (SOURCE_FILE ("template_expression_parser.galgas", 1755)) ;
                                              var_newline = GALGAS_bool (true) ;
                                            }
                                            const enumGalgasBool test_34 = GALGAS_bool (kIsEqual, var_newline.objectCompare (GALGAS_bool (false))).boolEnum () ;
                                            if (kBoolTrue == test_34) {
                                              var_linewidth = var_linewidth.add_operation (GALGAS_sint_36__34_ ((int64_t) 1LL), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1759)) ;
                                              var_result.dotAssign_operation (GALGAS_string (" ")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1760)) ;
                                            }
                                            var_linewidth = var_linewidth.add_operation (enumerator_65326.current_mValue (HERE).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1762)).reader_sint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1762)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1762)) ;
                                            var_result.dotAssign_operation (enumerator_65326.current_mValue (HERE)  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1763)) ;
                                            var_newline = GALGAS_bool (false) ;
                                            enumerator_65326.gotoNextObject () ;
                                          }
                                          var_resultParagraph.addAssign_operation (var_result  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1766)) ;
                                          enumerator_65126.gotoNextObject () ;
                                        }
                                        outArgument_outResultType = GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1768)) ;
                                        outArgument_outResultValue = function_valueWithString (GALGAS_string::constructor_componentsJoinedByString (var_resultParagraph, GALGAS_string ("\n")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1769)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1769)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1769)) ;
                                      }else if (kBoolFalse == test_32) {
                                        const enumGalgasBool test_35 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1770)).objectCompare (GALGAS_string ("substringExists"))).boolEnum () ;
                                        if (kBoolTrue == test_35) {
                                          {
                                          routine_checkInvocationHasArguments (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, GALGAS_Ttype::constructor_stringType (SOURCE_FILE ("template_expression_parser.galgas", 1771)), GALGAS_uint ((uint32_t) 1U), inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1771)) ;
                                          }
                                          GALGAS_Tvalue var_subString ;
                                          {
                                          GALGAS_Ttype joker_66235 ; // Joker input parameter
                                          inArgument_inParameterTypeList.modifier_popFirst (var_subString, joker_66235, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1772)) ;
                                          }
                                          GALGAS_uint var_start = GALGAS_uint ((uint32_t) 0U) ;
                                          GALGAS_uint var_stop = constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1774)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1774)).substract_operation (var_subString.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1774)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1774)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1774)) ;
                                          GALGAS_bool var_exists = GALGAS_bool (false) ;
                                          if (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1776)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1776)).isValid ()) {
                                            uint32_t variant_66393 = constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1776)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1776)).uintValue () ;
                                            bool loop_66393 = true ;
                                            while (loop_66393) {
                                              loop_66393 = GALGAS_bool (kIsInfOrEqual, var_start.objectCompare (var_stop)).isValid () ;
                                              if (loop_66393) {
                                                loop_66393 = GALGAS_bool (kIsInfOrEqual, var_start.objectCompare (var_stop)).boolValue () ;
                                              }
                                              if (loop_66393 && (0 == variant_66393)) {
                                                loop_66393 = false ;
                                                inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_expression_parser.galgas", 1776)) ;
                                              }
                                              if (loop_66393) {
                                                variant_66393 -- ;
                                                const enumGalgasBool test_36 = GALGAS_bool (kIsEqual, constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1778)).reader_subString (var_start, var_subString.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1778)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1778)) COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1778)).objectCompare (var_subString.reader_mStringValue (SOURCE_FILE ("template_expression_parser.galgas", 1778)))).boolEnum () ;
                                                if (kBoolTrue == test_36) {
                                                  var_exists = GALGAS_bool (true) ;
                                                }
                                                var_start.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1781)) ;
                                              }
                                            }
                                          }
                                          outArgument_outResultType = GALGAS_Ttype::constructor_boolType (SOURCE_FILE ("template_expression_parser.galgas", 1783)) ;
                                          outArgument_outResultValue = function_valueWithBool (var_exists, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1784)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1784)) ;
                                        }else if (kBoolFalse == test_35) {
                                          GALGAS_location location_37 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
                                          inCompiler->emitSemanticError (location_37, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1786)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1786)).add_operation (GALGAS_string (" template method is not defined for "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1786)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1786)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1786))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1786)) ;
                                          outArgument_outResultValue.drop () ; // Release error dropped variable
                                          outArgument_outResultType.drop () ; // Release error dropped variable
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      break ;
    case GALGAS_Ttype::kEnum_floatType:
      {
        GALGAS_location location_38 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_38, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1789)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1789)).add_operation (GALGAS_string (" template method is not defined for "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1789)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1789)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1789))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1789)) ;
        outArgument_outResultValue.drop () ; // Release error dropped variable
        outArgument_outResultType.drop () ; // Release error dropped variable
      }
      break ;
    case GALGAS_Ttype::kEnum_listType:
      {
        const enumGalgasBool test_39 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1791)).objectCompare (GALGAS_string ("length"))).boolEnum () ;
        if (kBoolTrue == test_39) {
          {
          routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1792)) ;
          }
          outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1793)) ;
          outArgument_outResultValue = function_valueWithUnsigned (constinArgument_inValue.reader_mMapListValue (SOURCE_FILE ("template_expression_parser.galgas", 1794)).reader_length (SOURCE_FILE ("template_expression_parser.galgas", 1794)).reader_uint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1794)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1794)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1794)) ;
        }else if (kBoolFalse == test_39) {
          const enumGalgasBool test_40 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1795)).objectCompare (GALGAS_string ("first"))).boolEnum () ;
          if (kBoolTrue == test_40) {
            {
            routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1796)) ;
            }
            outArgument_outResultType = GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_expression_parser.galgas", 1797)) ;
            GALGAS_TfieldMap var_firstElement ;
            constinArgument_inValue.reader_mMapListValue (SOURCE_FILE ("template_expression_parser.galgas", 1799)).method_first (var_firstElement, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1799)) ;
            outArgument_outResultValue = function_valueWithStruct (var_firstElement, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1800)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1800)) ;
          }else if (kBoolFalse == test_40) {
            const enumGalgasBool test_41 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1801)).objectCompare (GALGAS_string ("last"))).boolEnum () ;
            if (kBoolTrue == test_41) {
              {
              routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1802)) ;
              }
              outArgument_outResultType = GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_expression_parser.galgas", 1803)) ;
              GALGAS_TfieldMap var_lastElement ;
              constinArgument_inValue.reader_mMapListValue (SOURCE_FILE ("template_expression_parser.galgas", 1805)).method_last (var_lastElement, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1805)) ;
              outArgument_outResultValue = function_valueWithStruct (var_lastElement, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1806)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1806)) ;
            }else if (kBoolFalse == test_41) {
              GALGAS_location location_42 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_42, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1808)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1808)).add_operation (GALGAS_string (" template method is not defined for "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1808)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1808)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1808))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1808)) ;
              outArgument_outResultValue.drop () ; // Release error dropped variable
              outArgument_outResultType.drop () ; // Release error dropped variable
            }
          }
        }
      }
      break ;
    case GALGAS_Ttype::kEnum_mapType:
      {
        const enumGalgasBool test_43 = GALGAS_bool (kIsEqual, constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1811)).objectCompare (GALGAS_string ("length"))).boolEnum () ;
        if (kBoolTrue == test_43) {
          {
          routine_checkInvocationHasNoArgument (constinArgument_inType, constinArgument_inMethodName, inArgument_inParameterTypeList, inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1812)) ;
          }
          outArgument_outResultType = GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_expression_parser.galgas", 1813)) ;
          outArgument_outResultValue = function_valueWithUnsigned (constinArgument_inValue.reader_mStructValue (SOURCE_FILE ("template_expression_parser.galgas", 1814)).reader_count (SOURCE_FILE ("template_expression_parser.galgas", 1814)).reader_uint_36__34_ (SOURCE_FILE ("template_expression_parser.galgas", 1814)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1814)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1814)) ;
        }else if (kBoolFalse == test_43) {
          GALGAS_location location_44 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_44, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1816)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1816)).add_operation (GALGAS_string (" template method is not defined for "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1816)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1816)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1816))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1816)) ;
          outArgument_outResultValue.drop () ; // Release error dropped variable
          outArgument_outResultType.drop () ; // Release error dropped variable
        }
      }
      break ;
    case GALGAS_Ttype::kEnum_enumType:
    case GALGAS_Ttype::kEnum_structType:
      {
        GALGAS_location location_45 (constinArgument_inMethodName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_45, GALGAS_string ("the ").add_operation (constinArgument_inMethodName.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1819)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1819)).add_operation (GALGAS_string (" template method is not defined for "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1819)).add_operation (categoryReader_messageGoilTemplateType (constinArgument_inType, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1819)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1819))  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1819)) ;
        outArgument_outResultValue.drop () ; // Release error dropped variable
        outArgument_outResultType.drop () ; // Release error dropped variable
      }
      break ;
    case GALGAS_Ttype::kEnum_unconstructedType:
    case GALGAS_Ttype::kEnum_functionType:
      {
        inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1821)), GALGAS_string ("internal error, unconstructed type found")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1821)) ;
        outArgument_outResultValue.drop () ; // Release error dropped variable
        outArgument_outResultType.drop () ; // Release error dropped variable
      }
      break ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Routine 'typeError'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_typeError (const GALGAS_lstring constinArgument_inFunctionName,
                        const GALGAS_type constinArgument_inActualType,
                        const GALGAS_string constinArgument_inExpectedTypeName,
                        const GALGAS_uint constinArgument_inParameterIndex,
                        C_Compiler * inCompiler
                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_m = GALGAS_string ("the function requires the parameter ").add_operation (constinArgument_inParameterIndex.reader_string (SOURCE_FILE ("template_expression_parser.galgas", 1839)), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1839)).add_operation (GALGAS_string (" to be "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1839)).add_operation (constinArgument_inExpectedTypeName, inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1840)).add_operation (GALGAS_string ("; its type is "), inCompiler COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1840)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_inActualType.objectCompare (GALGAS_type (& kTypeDescriptor_GALGAS_bool))).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_m.dotAssign_operation (GALGAS_string ("boolean")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1842)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_inActualType.objectCompare (GALGAS_type (& kTypeDescriptor_GALGAS_uint_36__34_))).boolEnum () ;
    if (kBoolTrue == test_1) {
      var_m.dotAssign_operation (GALGAS_string ("unsigned")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1844)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, constinArgument_inActualType.objectCompare (GALGAS_type (& kTypeDescriptor_GALGAS_string))).boolEnum () ;
      if (kBoolTrue == test_2) {
        var_m.dotAssign_operation (GALGAS_string ("string")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1846)) ;
      }else if (kBoolFalse == test_2) {
        var_m.dotAssign_operation (GALGAS_string ("a not allowed type")  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1848)) ;
      }
    }
  }
  GALGAS_location location_3 (constinArgument_inFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
  inCompiler->emitSemanticError (location_3, var_m  COMMA_SOURCE_FILE ("template_expression_parser.galgas", 1850)) ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Routine 'setVariableInPath'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_setVariableInPath (GALGAS_TvarPath inArgument_path,
                                GALGAS_TfieldMap & ioArgument_ioFieldMap,
                                const GALGAS_Ttype constinArgument_expressionType,
                                const GALGAS_Tvalue constinArgument_enumeratedValue,
                                C_Compiler * inCompiler
                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lstring var_varName ;
  GALGAS_lstring var_key ;
  GALGAS_lsint var_idx ;
  {
  inArgument_path.modifier_popFirst (var_varName, var_key, var_idx, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1323)) ;
  }
  const enumGalgasBool test_0 = ioArgument_ioFieldMap.reader_hasKey (var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1325)) COMMA_SOURCE_FILE ("template_parser.galgas", 1325)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_Ttype var_fieldType ;
    GALGAS_Tvalue var_fieldValue ;
    ioArgument_ioFieldMap.method_searchKey (var_varName, var_fieldType, var_fieldValue, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1328)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_fieldType.objectCompare (GALGAS_Ttype::constructor_mapType (SOURCE_FILE ("template_parser.galgas", 1329)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1331)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_TfieldMap var_items = var_fieldValue.reader_mStructValue (SOURCE_FILE ("template_parser.galgas", 1333)) ;
        const enumGalgasBool test_3 = var_items.reader_hasKey (var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1334)) COMMA_SOURCE_FILE ("template_parser.galgas", 1334)).boolEnum () ;
        if (kBoolTrue == test_3) {
          const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1335)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
          if (kBoolTrue == test_4) {
            {
            var_items.modifier_setMTypeForKey (constinArgument_expressionType, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1336)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1336)) ;
            }
            {
            var_items.modifier_setMValueForKey (constinArgument_enumeratedValue, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1337)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1337)) ;
            }
          }else if (kBoolFalse == test_4) {
            GALGAS_Ttype var_itemType ;
            GALGAS_Tvalue var_itemValue ;
            var_items.method_searchKey (var_key, var_itemType, var_itemValue, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1341)) ;
            GALGAS_TfieldMap var_nextFieldMap = var_itemValue.reader_mStructValue (SOURCE_FILE ("template_parser.galgas", 1342)) ;
            {
            routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1343)) ;
            }
            var_itemValue.mAttribute_mStructValue = var_nextFieldMap ;
            var_itemType = GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1345)) ;
            {
            var_items.modifier_setMTypeForKey (var_itemType, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1346)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1346)) ;
            }
            {
            var_items.modifier_setMValueForKey (var_itemValue, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1347)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1347)) ;
            }
          }
        }else if (kBoolFalse == test_3) {
          const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1350)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
          if (kBoolTrue == test_5) {
            {
            var_items.modifier_insertKey (var_key, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1351)) ;
            }
          }else if (kBoolFalse == test_5) {
            GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1353)) ;
            {
            routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1354)) ;
            }
            {
            var_items.modifier_insertKey (var_key, GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1355)), function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1355)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1355)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1355)) ;
            }
          }
        }
        var_fieldValue.mAttribute_mStructValue = var_items ;
        {
        ioArgument_ioFieldMap.modifier_setMTypeForKey (var_fieldType, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1359)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1359)) ;
        }
        {
        ioArgument_ioFieldMap.modifier_setMValueForKey (var_fieldValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1360)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1360)) ;
        }
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1362)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_6) {
          {
          ioArgument_ioFieldMap.modifier_setMTypeForKey (constinArgument_expressionType, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1364)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1364)) ;
          }
          {
          ioArgument_ioFieldMap.modifier_setMValueForKey (constinArgument_enumeratedValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1365)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1365)) ;
          }
        }else if (kBoolFalse == test_6) {
          GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1368)) ;
          {
          routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1369)) ;
          }
          {
          ioArgument_ioFieldMap.modifier_setMTypeForKey (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1370)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1370)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1370)) ;
          }
          {
          ioArgument_ioFieldMap.modifier_setMValueForKey (function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1371)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1371)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1371)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1371)) ;
          }
        }
      }
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, var_fieldType.objectCompare (GALGAS_Ttype::constructor_listType (SOURCE_FILE ("template_parser.galgas", 1374)))).boolEnum () ;
      if (kBoolTrue == test_7) {
        const enumGalgasBool test_8 = GALGAS_bool (kIsNotEqual, var_idx.reader_sint (SOURCE_FILE ("template_parser.galgas", 1376)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1376)))).boolEnum () ;
        if (kBoolTrue == test_8) {
          const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1377)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
          if (kBoolTrue == test_9) {
            const enumGalgasBool test_10 = GALGAS_bool (kIsEqual, constinArgument_expressionType.objectCompare (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1378)))).boolEnum () ;
            if (kBoolTrue == test_10) {
              GALGAS_TfieldMapList var_theList = var_fieldValue.reader_mMapListValue (SOURCE_FILE ("template_parser.galgas", 1380)) ;
              {
              var_theList.modifier_setMMapAtIndex (constinArgument_enumeratedValue.reader_mStructValue (SOURCE_FILE ("template_parser.galgas", 1381)), var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1381)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1381)) ;
              }
              var_fieldValue.mAttribute_mMapListValue = var_theList ;
            }else if (kBoolFalse == test_10) {
              GALGAS_location location_11 (var_varName.reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_11, GALGAS_string ("struct expression expected")  COMMA_SOURCE_FILE ("template_parser.galgas", 1385)) ;
            }
          }else if (kBoolFalse == test_9) {
            GALGAS_TfieldMapList var_theList = var_fieldValue.reader_mMapListValue (SOURCE_FILE ("template_parser.galgas", 1389)) ;
            GALGAS_TfieldMap var_nextFieldMap = var_theList.reader_mMapAtIndex (var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1390)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1390)) ;
            {
            routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1391)) ;
            }
            {
            var_theList.modifier_setMMapAtIndex (var_nextFieldMap, var_idx.mAttribute_sint.reader_uint (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1392)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1392)) ;
            }
            var_fieldValue.mAttribute_mMapListValue = var_theList ;
          }
          {
          ioArgument_ioFieldMap.modifier_setMTypeForKey (var_fieldType, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1395)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1395)) ;
          }
          {
          ioArgument_ioFieldMap.modifier_setMValueForKey (var_fieldValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1396)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1396)) ;
          }
        }else if (kBoolFalse == test_8) {
          const enumGalgasBool test_12 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1399)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
          if (kBoolTrue == test_12) {
            {
            ioArgument_ioFieldMap.modifier_setMTypeForKey (constinArgument_expressionType, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1401)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1401)) ;
            }
            {
            ioArgument_ioFieldMap.modifier_setMValueForKey (constinArgument_enumeratedValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1402)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1402)) ;
            }
          }else if (kBoolFalse == test_12) {
            GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1405)) ;
            {
            routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1406)) ;
            }
            {
            ioArgument_ioFieldMap.modifier_setMTypeForKey (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1407)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1407)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1407)) ;
            }
            {
            ioArgument_ioFieldMap.modifier_setMValueForKey (function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1408)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1408)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1408)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1408)) ;
            }
          }
        }
      }else if (kBoolFalse == test_7) {
        const enumGalgasBool test_13 = GALGAS_bool (kIsEqual, var_fieldType.objectCompare (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1411)))).boolEnum () ;
        if (kBoolTrue == test_13) {
          const enumGalgasBool test_14 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1412)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
          if (kBoolTrue == test_14) {
            {
            ioArgument_ioFieldMap.modifier_setMTypeForKey (constinArgument_expressionType, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1414)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1414)) ;
            }
            {
            ioArgument_ioFieldMap.modifier_setMValueForKey (constinArgument_enumeratedValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1415)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1415)) ;
            }
          }else if (kBoolFalse == test_14) {
            GALGAS_TfieldMap var_nextFieldMap = var_fieldValue.reader_mStructValue (SOURCE_FILE ("template_parser.galgas", 1418)) ;
            {
            routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1419)) ;
            }
            var_fieldValue.mAttribute_mStructValue = var_nextFieldMap ;
            {
            ioArgument_ioFieldMap.modifier_setMValueForKey (var_fieldValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1422)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1422)) ;
            }
          }
        }else if (kBoolFalse == test_13) {
          const enumGalgasBool test_15 = GALGAS_bool (kIsEqual, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1425)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_15) {
            const enumGalgasBool test_16 = GALGAS_bool (kIsEqual, var_idx.reader_sint (SOURCE_FILE ("template_parser.galgas", 1426)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1426)))).boolEnum () ;
            if (kBoolTrue == test_16) {
              const enumGalgasBool test_17 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1427)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
              if (kBoolTrue == test_17) {
                {
                ioArgument_ioFieldMap.modifier_setMTypeForKey (constinArgument_expressionType, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1429)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1429)) ;
                }
                {
                ioArgument_ioFieldMap.modifier_setMValueForKey (constinArgument_enumeratedValue, var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1430)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1430)) ;
                }
              }else if (kBoolFalse == test_17) {
                GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1432)) ;
                {
                routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1433)) ;
                }
                {
                ioArgument_ioFieldMap.modifier_setMTypeForKey (GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1434)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1434)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1434)) ;
                }
                {
                ioArgument_ioFieldMap.modifier_setMValueForKey (function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1435)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1435)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1435)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1435)) ;
                }
              }
            }else if (kBoolFalse == test_16) {
              GALGAS_location location_18 (var_varName.reader_location (HERE)) ; // Implicit use of 'location' reader
              inCompiler->emitSemanticError (location_18, GALGAS_string ("A list must exist before setting one of its item")  COMMA_SOURCE_FILE ("template_parser.galgas", 1439)) ;
            }
          }else if (kBoolFalse == test_15) {
            GALGAS_TfieldMap var_newMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1443)) ;
            const enumGalgasBool test_19 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1444)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
            if (kBoolTrue == test_19) {
              {
              var_newMap.modifier_insertKey (var_key, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1445)) ;
              }
            }else if (kBoolFalse == test_19) {
              GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1447)) ;
              {
              routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1448)) ;
              }
              {
              var_newMap.modifier_insertKey (var_key, GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1449)), function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1449)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1449)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1449)) ;
              }
            }
            {
            ioArgument_ioFieldMap.modifier_setMTypeForKey (GALGAS_Ttype::constructor_mapType (SOURCE_FILE ("template_parser.galgas", 1451)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1451)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1451)) ;
            }
            {
            ioArgument_ioFieldMap.modifier_setMValueForKey (function_valueWithMap (var_newMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1452)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1452)), var_varName.reader_string (SOURCE_FILE ("template_parser.galgas", 1452)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1452)) ;
            }
          }
        }
      }
    }
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_20 = GALGAS_bool (kIsEqual, inArgument_path.reader_length (SOURCE_FILE ("template_parser.galgas", 1457)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_20) {
      const enumGalgasBool test_21 = GALGAS_bool (kIsEqual, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1458)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_21) {
        const enumGalgasBool test_22 = GALGAS_bool (kIsEqual, var_idx.reader_sint (SOURCE_FILE ("template_parser.galgas", 1459)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1459)))).boolEnum () ;
        if (kBoolTrue == test_22) {
          {
          ioArgument_ioFieldMap.modifier_insertKey (var_varName, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1460)) ;
          }
        }else if (kBoolFalse == test_22) {
          GALGAS_location location_23 (var_varName.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_23, GALGAS_string ("A list must exist before setting one of its item")  COMMA_SOURCE_FILE ("template_parser.galgas", 1463)) ;
        }
      }else if (kBoolFalse == test_21) {
        GALGAS_TfieldMap var_newMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1466)) ;
        {
        var_newMap.modifier_insertKey (var_key, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1467)) ;
        }
        {
        ioArgument_ioFieldMap.modifier_insertKey (var_varName, GALGAS_Ttype::constructor_mapType (SOURCE_FILE ("template_parser.galgas", 1468)), function_valueWithMap (var_newMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1468)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1468)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1468)) ;
        }
      }
    }else if (kBoolFalse == test_20) {
      const enumGalgasBool test_24 = GALGAS_bool (kIsEqual, var_key.reader_string (SOURCE_FILE ("template_parser.galgas", 1471)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
      if (kBoolTrue == test_24) {
        const enumGalgasBool test_25 = GALGAS_bool (kIsEqual, var_idx.reader_sint (SOURCE_FILE ("template_parser.galgas", 1472)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1472)))).boolEnum () ;
        if (kBoolTrue == test_25) {
          GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1473)) ;
          {
          routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1474)) ;
          }
          {
          ioArgument_ioFieldMap.modifier_insertKey (var_varName, GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1475)), function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1475)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1475)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1475)) ;
          }
        }else if (kBoolFalse == test_25) {
          GALGAS_location location_26 (var_varName.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_26, GALGAS_string ("A list must exist before setting one of its item")  COMMA_SOURCE_FILE ("template_parser.galgas", 1478)) ;
        }
      }else if (kBoolFalse == test_24) {
        GALGAS_TfieldMap var_newMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1481)) ;
        GALGAS_TfieldMap var_nextFieldMap = GALGAS_TfieldMap::constructor_emptyMap (SOURCE_FILE ("template_parser.galgas", 1482)) ;
        {
        routine_setVariableInPath (inArgument_path, var_nextFieldMap, constinArgument_expressionType, constinArgument_enumeratedValue, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1483)) ;
        }
        {
        var_newMap.modifier_insertKey (var_key, GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1484)), function_valueWithStruct (var_nextFieldMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1484)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1484)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1484)) ;
        }
        {
        ioArgument_ioFieldMap.modifier_insertKey (var_varName, GALGAS_Ttype::constructor_mapType (SOURCE_FILE ("template_parser.galgas", 1485)), function_valueWithMap (var_newMap, function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1485)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1485)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1485)) ;
        }
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Routine 'printVariable'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_printVariable (GALGAS_uint inArgument_indent,
                            const GALGAS_Ttype constinArgument_variableType,
                            const GALGAS_Tvalue constinArgument_variableValue,
                            C_Compiler * inCompiler
                            COMMA_UNUSED_LOCATION_ARGS) {
  inArgument_indent = inArgument_indent.add_operation (GALGAS_uint ((uint32_t) 4U), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1496)) ;
  GALGAS_string var_offset = GALGAS_string::constructor_stringWithSequenceOfCharacters (GALGAS_char (TO_UNICODE (32)), inArgument_indent  COMMA_SOURCE_FILE ("template_parser.galgas", 1497)) ;
  switch (constinArgument_variableType.enumValue ()) {
  case GALGAS_Ttype::kNotBuilt:
    break ;
  case GALGAS_Ttype::kEnum_boolType:
    {
      const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_variableValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_parser.galgas", 1500)).objectCompare (GALGAS_sint_36__34_ ((int64_t) 1LL))).boolEnum () ;
      if (kBoolTrue == test_0) {
        inCompiler->printMessage (var_offset.add_operation (GALGAS_string ("true\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1501))  COMMA_SOURCE_FILE ("template_parser.galgas", 1501)) ;
      }else if (kBoolFalse == test_0) {
        inCompiler->printMessage (var_offset.add_operation (GALGAS_string ("false\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1503))  COMMA_SOURCE_FILE ("template_parser.galgas", 1503)) ;
      }
    }
    break ;
  case GALGAS_Ttype::kEnum_intType:
    {
      inCompiler->printMessage (var_offset.add_operation (constinArgument_variableValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_parser.galgas", 1506)).reader_string (SOURCE_FILE ("template_parser.galgas", 1506)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1506)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1506))  COMMA_SOURCE_FILE ("template_parser.galgas", 1506)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_floatType:
    {
      inCompiler->printMessage (var_offset.add_operation (constinArgument_variableValue.reader_mFloatValue (SOURCE_FILE ("template_parser.galgas", 1508)).reader_string (SOURCE_FILE ("template_parser.galgas", 1508)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1508)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1508))  COMMA_SOURCE_FILE ("template_parser.galgas", 1508)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_stringType:
    {
      inCompiler->printMessage (var_offset.add_operation (GALGAS_string ("\""), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1510)).add_operation (constinArgument_variableValue.reader_mStringValue (SOURCE_FILE ("template_parser.galgas", 1510)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1510)).add_operation (GALGAS_string ("\"\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1510))  COMMA_SOURCE_FILE ("template_parser.galgas", 1510)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_enumType:
    {
      inCompiler->printMessage (var_offset.add_operation (constinArgument_variableValue.reader_mStringValue (SOURCE_FILE ("template_parser.galgas", 1512)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1512)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1512))  COMMA_SOURCE_FILE ("template_parser.galgas", 1512)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_listType:
    {
      cEnumerator_TfieldMapList enumerator_45930 (constinArgument_variableValue.reader_mMapListValue (SOURCE_FILE ("template_parser.galgas", 1514)), kEnumeration_up) ;
      GALGAS_uint index_45893 ((uint32_t) 0) ;
      while (enumerator_45930.hasCurrentObject ()) {
        inCompiler->printMessage (var_offset.add_operation (GALGAS_string ("item at "), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1515)).add_operation (index_45893.reader_string (SOURCE_FILE ("template_parser.galgas", 1515)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1515)).add_operation (GALGAS_string (":\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1515))  COMMA_SOURCE_FILE ("template_parser.galgas", 1515)) ;
        {
        routine_printVariable (inArgument_indent, GALGAS_Ttype::constructor_structType (SOURCE_FILE ("template_parser.galgas", 1516)), GALGAS_Tvalue::constructor_new (GALGAS_sint_36__34_ ((int64_t) 0LL), GALGAS_double (0), GALGAS_string::makeEmptyString (), GALGAS_TfieldMapList::constructor_emptyList (SOURCE_FILE ("template_parser.galgas", 1516)), enumerator_45930.current_mMap (HERE), function_dummyFunction (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1516)), function_emptyLString (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1516))  COMMA_SOURCE_FILE ("template_parser.galgas", 1516)), inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1516)) ;
        }
        enumerator_45930.gotoNextObject () ;
        index_45893.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1514)) ;
      }
    }
    break ;
  case GALGAS_Ttype::kEnum_mapType:
    {
      cEnumerator_TfieldMap enumerator_46196 (constinArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_parser.galgas", 1519)), kEnumeration_up) ;
      while (enumerator_46196.hasCurrentObject ()) {
        inCompiler->printMessage (var_offset.add_operation (enumerator_46196.current_lkey (HERE).reader_string (SOURCE_FILE ("template_parser.galgas", 1520)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1520)).add_operation (GALGAS_string (":\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1520))  COMMA_SOURCE_FILE ("template_parser.galgas", 1520)) ;
        {
        routine_printVariable (inArgument_indent, enumerator_46196.current_mType (HERE), enumerator_46196.current_mValue (HERE), inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1521)) ;
        }
        enumerator_46196.gotoNextObject () ;
      }
    }
    break ;
  case GALGAS_Ttype::kEnum_structType:
    {
      cEnumerator_TfieldMap enumerator_46348 (constinArgument_variableValue.reader_mStructValue (SOURCE_FILE ("template_parser.galgas", 1524)), kEnumeration_up) ;
      while (enumerator_46348.hasCurrentObject ()) {
        inCompiler->printMessage (var_offset.add_operation (enumerator_46348.current_lkey (HERE).reader_string (SOURCE_FILE ("template_parser.galgas", 1525)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1525)).add_operation (GALGAS_string (":\n"), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1525))  COMMA_SOURCE_FILE ("template_parser.galgas", 1525)) ;
        {
        routine_printVariable (inArgument_indent, enumerator_46348.current_mType (HERE), enumerator_46348.current_mValue (HERE), inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1526)) ;
        }
        enumerator_46348.gotoNextObject () ;
      }
    }
    break ;
  case GALGAS_Ttype::kEnum_unconstructedType:
  case GALGAS_Ttype::kEnum_functionType:
    {
    }
    break ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'structCompare'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_sint function_structCompare (const GALGAS_TfieldMap & constinArgument_s_31_,
                                    const GALGAS_TfieldMap & constinArgument_s_32_,
                                    GALGAS_sortingKeyList inArgument_fieldList,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_sint result_result ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, inArgument_fieldList.reader_length (SOURCE_FILE ("template_parser.galgas", 1544)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_lstring var_field ;
    GALGAS_lsint var_order ;
    {
    inArgument_fieldList.modifier_popFirst (var_field, var_order, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1547)) ;
    }
    GALGAS_Ttype var_s_31_Type ;
    GALGAS_Tvalue var_s_31_Value ;
    constinArgument_s_31_.method_searchKey (var_field, var_s_31_Type, var_s_31_Value, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1550)) ;
    GALGAS_Ttype var_s_32_Type ;
    GALGAS_Tvalue var_s_32_Value ;
    constinArgument_s_32_.method_searchKey (var_field, var_s_32_Type, var_s_32_Value, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1553)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_s_31_Type.objectCompare (var_s_32_Type)).operator_and (GALGAS_bool (kIsEqual, var_s_31_Type.objectCompare (GALGAS_Ttype::constructor_intType (SOURCE_FILE ("template_parser.galgas", 1554)))) COMMA_SOURCE_FILE ("template_parser.galgas", 1554)).boolEnum () ;
    if (kBoolTrue == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsStrictInf, var_s_31_Value.reader_mInt_36__34_Value (SOURCE_FILE ("template_parser.galgas", 1556)).objectCompare (var_s_32_Value.reader_mInt_36__34_Value (SOURCE_FILE ("template_parser.galgas", 1556)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result_result = GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1558)).multiply_operation (var_order.reader_sint (SOURCE_FILE ("template_parser.galgas", 1558)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1558)) ;
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_s_31_Value.reader_mInt_36__34_Value (SOURCE_FILE ("template_parser.galgas", 1560)).objectCompare (var_s_32_Value.reader_mInt_36__34_Value (SOURCE_FILE ("template_parser.galgas", 1560)))).boolEnum () ;
        if (kBoolTrue == test_3) {
          result_result = GALGAS_sint ((int32_t) 1L).multiply_operation (var_order.reader_sint (SOURCE_FILE ("template_parser.galgas", 1562)), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1562)) ;
        }else if (kBoolFalse == test_3) {
          result_result = function_structCompare (constinArgument_s_31_, constinArgument_s_32_, inArgument_fieldList, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1565)) ;
        }
      }
    }else if (kBoolFalse == test_1) {
      GALGAS_location location_4 (var_field.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, GALGAS_string ("unsigned sort key required")  COMMA_SOURCE_FILE ("template_parser.galgas", 1569)) ;
      result_result.drop () ; // Release error dropped variable
    }
  }else if (kBoolFalse == test_0) {
    result_result = GALGAS_sint ((int32_t) 0L) ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_structCompare [4] = {
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_sortingKeyList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_structCompare (C_Compiler * inCompiler,
                                                              const cObjectArray & inEffectiveParameterArray,
                                                              const GALGAS_location & /* §§ inErrorLocation */
                                                              COMMA_LOCATION_ARGS) {
  const GALGAS_TfieldMap operand0 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_TfieldMap operand1 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_sortingKeyList operand2 = GALGAS_sortingKeyList::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                               inCompiler
                                                                               COMMA_THERE) ;
  return function_structCompare (operand0,
                                 operand1,
                                 operand2,
                                 inCompiler
                                 COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_structCompare ("structCompare",
                                                               functionWithGenericHeader_structCompare,
                                                               & kTypeDescriptor_GALGAS_sint,
                                                               3,
                                                               functionArgs_structCompare) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   Routine 'swap'                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_swap (GALGAS_TfieldMapList & ioArgument_t,
                   const GALGAS_uint constinArgument_index_31_,
                   const GALGAS_uint constinArgument_index_32_,
                   C_Compiler * inCompiler
                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_TfieldMap var_temp = ioArgument_t.reader_mMapAtIndex (constinArgument_index_31_, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1581)) ;
  {
  ioArgument_t.modifier_setMMapAtIndex (ioArgument_t.reader_mMapAtIndex (constinArgument_index_32_, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1582)), constinArgument_index_31_, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1582)) ;
  }
  {
  ioArgument_t.modifier_setMMapAtIndex (var_temp, constinArgument_index_32_, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1583)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Routine 'partition'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_partition (GALGAS_TfieldMapList & ioArgument_t,
                        GALGAS_uint inArgument_min,
                        GALGAS_uint inArgument_max,
                        const GALGAS_sortingKeyList constinArgument_fieldList,
                        GALGAS_uint & ioArgument_pivotIndex,
                        C_Compiler * inCompiler
                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_TfieldMap var_pivot = ioArgument_t.reader_mMapAtIndex (ioArgument_pivotIndex, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1592)) ;
  {
  routine_swap (ioArgument_t, ioArgument_pivotIndex, inArgument_max, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1593)) ;
  }
  GALGAS_uint var_storeIndex = inArgument_min ;
  GALGAS_uint var_i = inArgument_min ;
  if (inArgument_max.substract_operation (inArgument_min, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1596)).isValid ()) {
    uint32_t variant_48097 = inArgument_max.substract_operation (inArgument_min, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1596)).uintValue () ;
    bool loop_48097 = true ;
    while (loop_48097) {
      loop_48097 = GALGAS_bool (kIsStrictInf, var_i.objectCompare (inArgument_max)).isValid () ;
      if (loop_48097) {
        loop_48097 = GALGAS_bool (kIsStrictInf, var_i.objectCompare (inArgument_max)).boolValue () ;
      }
      if (loop_48097 && (0 == variant_48097)) {
        loop_48097 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_parser.galgas", 1596)) ;
      }
      if (loop_48097) {
        variant_48097 -- ;
        const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, function_structCompare (ioArgument_t.reader_mMapAtIndex (var_i, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1598)), var_pivot, constinArgument_fieldList, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1598)).objectCompare (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1598)))).boolEnum () ;
        if (kBoolTrue == test_0) {
          {
          routine_swap (ioArgument_t, var_i, var_storeIndex, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1599)) ;
          }
          var_storeIndex.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1600)) ;
        }
        var_i.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1602)) ;
      }
    }
  }
  {
  routine_swap (ioArgument_t, var_storeIndex, inArgument_max, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1604)) ;
  }
  ioArgument_pivotIndex = var_storeIndex ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Routine 'quickSort'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_quickSort (GALGAS_TfieldMapList & ioArgument_t,
                        const GALGAS_uint constinArgument_min,
                        const GALGAS_uint constinArgument_max,
                        const GALGAS_sortingKeyList constinArgument_fieldList,
                        C_Compiler * inCompiler
                        COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictInf, constinArgument_min.objectCompare (constinArgument_max)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_uint var_pivotIndex = constinArgument_max.add_operation (constinArgument_min, inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1615)).divide_operation (GALGAS_uint ((uint32_t) 2U), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1615)) ;
    {
    routine_partition (ioArgument_t, constinArgument_min, constinArgument_max, constinArgument_fieldList, var_pivotIndex, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1617)) ;
    }
    {
    routine_quickSort (ioArgument_t, constinArgument_min, var_pivotIndex, constinArgument_fieldList, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1618)) ;
    }
    {
    routine_quickSort (ioArgument_t, var_pivotIndex.add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("template_parser.galgas", 1619)), constinArgument_max, constinArgument_fieldList, inCompiler  COMMA_SOURCE_FILE ("template_parser.galgas", 1619)) ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Once function 'allowedFunctions'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_stringset onceFunction_allowedFunctions (C_Compiler * /* inCompiler */
                                                       COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_stringset result_outAllowedFunctionSet ; // Returned variable
  result_outAllowedFunctionSet = GALGAS_stringset::constructor_emptySet (SOURCE_FILE ("template_invocation.galgas", 25)) ;
  result_outAllowedFunctionSet.addAssign_operation (GALGAS_string ("testFunction")  COMMA_SOURCE_FILE ("template_invocation.galgas", 26)) ;
  result_outAllowedFunctionSet.addAssign_operation (GALGAS_string ("tasks")  COMMA_SOURCE_FILE ("template_invocation.galgas", 27)) ;
  result_outAllowedFunctionSet.addAssign_operation (GALGAS_string ("trueFalse")  COMMA_SOURCE_FILE ("template_invocation.galgas", 28)) ;
  result_outAllowedFunctionSet.addAssign_operation (GALGAS_string ("yesNo")  COMMA_SOURCE_FILE ("template_invocation.galgas", 29)) ;
//---
  return result_outAllowedFunctionSet ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_allowedFunctions = false ;
static GALGAS_stringset gOnceFunctionResult_allowedFunctions ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_stringset function_allowedFunctions (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_allowedFunctions) {
    gOnceFunctionResult_allowedFunctions = onceFunction_allowedFunctions (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_allowedFunctions = true ;
  }
  return gOnceFunctionResult_allowedFunctions ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_allowedFunctions (void) {
  gOnceFunctionResult_allowedFunctions.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_allowedFunctions (NULL,
                                                              releaseOnceFunctionResult_allowedFunctions) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_allowedFunctions [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_allowedFunctions (C_Compiler * inCompiler,
                                                                 const cObjectArray & /* inEffectiveParameterArray */,
                                                                 const GALGAS_location & /* inErrorLocation */
                                                                 COMMA_LOCATION_ARGS) {
  return function_allowedFunctions (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_allowedFunctions ("allowedFunctions",
                                                                  functionWithGenericHeader_allowedFunctions,
                                                                  & kTypeDescriptor_GALGAS_stringset,
                                                                  0,
                                                                  functionArgs_allowedFunctions) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Function 'fullPrefix'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_fullPrefix (const GALGAS_TfieldMap & constinArgument_vars,
                                   const GALGAS_lstring & constinArgument_prefix,
                                   C_Compiler * inCompiler
                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_full ; // Returned variable
  GALGAS_string var_stringPrefix = constinArgument_prefix.reader_string (SOURCE_FILE ("template_invocation.galgas", 37)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_stringPrefix.objectCompare (GALGAS_string ("compiler"))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_Ttype var_type ;
    GALGAS_Tvalue var_value ;
    constinArgument_vars.method_searchKey (function_lstringWith (GALGAS_string ("COMPILER"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 41)), var_type, var_value, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 41)) ;
    var_stringPrefix.dotAssign_operation (GALGAS_string ("/").add_operation (var_value.reader_mStringValue (SOURCE_FILE ("template_invocation.galgas", 42)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 42))  COMMA_SOURCE_FILE ("template_invocation.galgas", 42)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_stringPrefix.objectCompare (GALGAS_string ("linker"))).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_Ttype var_type ;
      GALGAS_Tvalue var_value ;
      constinArgument_vars.method_searchKey (function_lstringWith (GALGAS_string ("LINKER"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 46)), var_type, var_value, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 46)) ;
      var_stringPrefix.dotAssign_operation (GALGAS_string ("/").add_operation (var_value.reader_mStringValue (SOURCE_FILE ("template_invocation.galgas", 47)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 47))  COMMA_SOURCE_FILE ("template_invocation.galgas", 47)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_stringPrefix.objectCompare (GALGAS_string ("assembler"))).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_Ttype var_type ;
        GALGAS_Tvalue var_value ;
        constinArgument_vars.method_searchKey (function_lstringWith (GALGAS_string ("ASSEMBLER"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 51)), var_type, var_value, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 51)) ;
        var_stringPrefix.dotAssign_operation (GALGAS_string ("/").add_operation (var_value.reader_mStringValue (SOURCE_FILE ("template_invocation.galgas", 52)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 52))  COMMA_SOURCE_FILE ("template_invocation.galgas", 52)) ;
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, var_stringPrefix.objectCompare (GALGAS_string ("ROOT"))).boolEnum () ;
        if (kBoolTrue == test_3) {
          var_stringPrefix = GALGAS_string::makeEmptyString () ;
        }
      }
    }
  }
  result_full = var_stringPrefix ;
//---
  return result_full ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_fullPrefix [3] = {
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_lstring,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_fullPrefix (C_Compiler * inCompiler,
                                                           const cObjectArray & inEffectiveParameterArray,
                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_TfieldMap operand0 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_lstring operand1 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_fullPrefix (operand0,
                              operand1,
                              inCompiler
                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_fullPrefix ("fullPrefix",
                                                            functionWithGenericHeader_fullPrefix,
                                                            & kTypeDescriptor_GALGAS_string,
                                                            2,
                                                            functionArgs_fullPrefix) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'displayTypeAndValue'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_displayTypeAndValue (const GALGAS_Ttype & constinArgument_inType,
                                            const GALGAS_Tvalue & constinArgument_inValue,
                                            C_Compiler * inCompiler
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  switch (constinArgument_inType.enumValue ()) {
  case GALGAS_Ttype::kNotBuilt:
    break ;
  case GALGAS_Ttype::kEnum_boolType:
    {
      GALGAS_string temp_0 ;
      const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_invocation.galgas", 72)).objectCompare (GALGAS_sint_36__34_ ((int64_t) 1LL))).boolEnum () ;
      if (kBoolTrue == test_1) {
        temp_0 = GALGAS_string ("yes") ;
      }else if (kBoolFalse == test_1) {
        temp_0 = GALGAS_string ("no") ;
      }
      result_outResult = GALGAS_string ("bool: ").add_operation (temp_0, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 72)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_intType:
    {
      result_outResult = GALGAS_string ("unsigned: ").add_operation (constinArgument_inValue.reader_mInt_36__34_Value (SOURCE_FILE ("template_invocation.galgas", 74)).reader_string (SOURCE_FILE ("template_invocation.galgas", 74)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 74)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_floatType:
    {
      result_outResult = GALGAS_string ("float: ").add_operation (constinArgument_inValue.reader_mFloatValue (SOURCE_FILE ("template_invocation.galgas", 76)).reader_string (SOURCE_FILE ("template_invocation.galgas", 76)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 76)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_stringType:
    {
      result_outResult = GALGAS_string ("string: '").add_operation (constinArgument_inValue.reader_mStringValue (SOURCE_FILE ("template_invocation.galgas", 78)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 78)).add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 78)) ;
    }
    break ;
  case GALGAS_Ttype::kEnum_listType:
    {
      GALGAS_string temp_2 ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, constinArgument_inValue.reader_mMapListValue (SOURCE_FILE ("template_invocation.galgas", 80)).reader_length (SOURCE_FILE ("template_invocation.galgas", 80)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        temp_2 = GALGAS_string ("s") ;
      }else if (kBoolFalse == test_3) {
        temp_2 = GALGAS_string::makeEmptyString () ;
      }
      result_outResult = GALGAS_string ("list, ").add_operation (constinArgument_inValue.reader_mMapListValue (SOURCE_FILE ("template_invocation.galgas", 80)).reader_length (SOURCE_FILE ("template_invocation.galgas", 80)).reader_string (SOURCE_FILE ("template_invocation.galgas", 80)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 80)).add_operation (GALGAS_string (" element"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 80)).add_operation (temp_2, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 80)).add_operation (GALGAS_string (":"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 80)) ;
      cEnumerator_TfieldMapList enumerator_3571 (constinArgument_inValue.reader_mMapListValue (SOURCE_FILE ("template_invocation.galgas", 81)), kEnumeration_up) ;
      GALGAS_uint index_3540 ((uint32_t) 0) ;
      while (enumerator_3571.hasCurrentObject ()) {
        result_outResult.dotAssign_operation (GALGAS_string ("\n"
          "  #").add_operation (index_3540.reader_string (SOURCE_FILE ("template_invocation.galgas", 82)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 82)).add_operation (GALGAS_string (":"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 82))  COMMA_SOURCE_FILE ("template_invocation.galgas", 82)) ;
        cEnumerator_TfieldMap enumerator_3649 (enumerator_3571.current_mMap (HERE), kEnumeration_up) ;
        while (enumerator_3649.hasCurrentObject ()) {
          result_outResult.dotAssign_operation (GALGAS_string ("'").add_operation (enumerator_3649.current_lkey (HERE).reader_string (SOURCE_FILE ("template_invocation.galgas", 84)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 84)).add_operation (GALGAS_string ("' "), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 84))  COMMA_SOURCE_FILE ("template_invocation.galgas", 84)) ;
          switch (enumerator_3649.current_mType (HERE).enumValue ()) {
          case GALGAS_Ttype::kNotBuilt:
            break ;
          case GALGAS_Ttype::kEnum_boolType:
            {
              GALGAS_string temp_4 ;
              const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, enumerator_3649.current_mValue (HERE).reader_mInt_36__34_Value (SOURCE_FILE ("template_invocation.galgas", 87)).objectCompare (GALGAS_sint_36__34_ ((int64_t) 1LL))).boolEnum () ;
              if (kBoolTrue == test_5) {
                temp_4 = GALGAS_string ("yes") ;
              }else if (kBoolFalse == test_5) {
                temp_4 = GALGAS_string ("no") ;
              }
              result_outResult.dotAssign_operation (GALGAS_string ("bool: ").add_operation (temp_4, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 87))  COMMA_SOURCE_FILE ("template_invocation.galgas", 87)) ;
            }
            break ;
          case GALGAS_Ttype::kEnum_intType:
            {
              result_outResult.dotAssign_operation (GALGAS_string ("unsigned: ").add_operation (enumerator_3649.current_mValue (HERE).reader_mInt_36__34_Value (SOURCE_FILE ("template_invocation.galgas", 89)).reader_string (SOURCE_FILE ("template_invocation.galgas", 89)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 89))  COMMA_SOURCE_FILE ("template_invocation.galgas", 89)) ;
            }
            break ;
          case GALGAS_Ttype::kEnum_floatType:
            {
              result_outResult.dotAssign_operation (GALGAS_string ("float: ").add_operation (enumerator_3649.current_mValue (HERE).reader_mFloatValue (SOURCE_FILE ("template_invocation.galgas", 91)).reader_string (SOURCE_FILE ("template_invocation.galgas", 91)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 91))  COMMA_SOURCE_FILE ("template_invocation.galgas", 91)) ;
            }
            break ;
          case GALGAS_Ttype::kEnum_stringType:
            {
              result_outResult.dotAssign_operation (GALGAS_string ("string: '").add_operation (enumerator_3649.current_mValue (HERE).reader_mStringValue (SOURCE_FILE ("template_invocation.galgas", 93)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 93)).add_operation (GALGAS_string ("'"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 93))  COMMA_SOURCE_FILE ("template_invocation.galgas", 93)) ;
            }
            break ;
          case GALGAS_Ttype::kEnum_listType:
          case GALGAS_Ttype::kEnum_structType:
          case GALGAS_Ttype::kEnum_mapType:
            {
            }
            break ;
          case GALGAS_Ttype::kEnum_enumType:
            {
            }
            break ;
          case GALGAS_Ttype::kEnum_unconstructedType:
          case GALGAS_Ttype::kEnum_functionType:
            {
              inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 97)), GALGAS_string ("internal error, unconstructed type found")  COMMA_SOURCE_FILE ("template_invocation.galgas", 97)) ;
            }
            break ;
          }
          if (enumerator_3649.hasNextObject ()) {
            result_outResult.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("template_invocation.galgas", 99)) ;
          }
          enumerator_3649.gotoNextObject () ;
        }
        enumerator_3571.gotoNextObject () ;
        index_3540.increment_operation (inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 81)) ;
      }
    }
    break ;
  case GALGAS_Ttype::kEnum_structType:
  case GALGAS_Ttype::kEnum_mapType:
    {
      result_outResult = GALGAS_string::makeEmptyString () ;
    }
    break ;
  case GALGAS_Ttype::kEnum_enumType:
    {
      result_outResult = GALGAS_string::makeEmptyString () ;
    }
    break ;
  case GALGAS_Ttype::kEnum_unconstructedType:
  case GALGAS_Ttype::kEnum_functionType:
    {
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 107)), GALGAS_string ("internal error, unconstructed type found")  COMMA_SOURCE_FILE ("template_invocation.galgas", 107)) ;
      result_outResult.drop () ; // Release error dropped variable
    }
    break ;
  }
//---
  return result_outResult ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_displayTypeAndValue [3] = {
  & kTypeDescriptor_GALGAS_Ttype,
  & kTypeDescriptor_GALGAS_Tvalue,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_displayTypeAndValue (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_Ttype operand0 = GALGAS_Ttype::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                             inCompiler
                                                             COMMA_THERE) ;
  const GALGAS_Tvalue operand1 = GALGAS_Tvalue::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_displayTypeAndValue (operand0,
                                       operand1,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_displayTypeAndValue ("displayTypeAndValue",
                                                                     functionWithGenericHeader_displayTypeAndValue,
                                                                     & kTypeDescriptor_GALGAS_string,
                                                                     2,
                                                                     functionArgs_displayTypeAndValue) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                        Routine 'displayTemplateVariableMap'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_displayTemplateVariableMap (const GALGAS_TfieldMap constinArgument_inTemplateVariableMap,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_TfieldMap enumerator_4754 (constinArgument_inTemplateVariableMap, kEnumeration_up) ;
  while (enumerator_4754.hasCurrentObject ()) {
    inCompiler->printMessage (GALGAS_string ("'").add_operation (enumerator_4754.current_lkey (HERE).reader_string (SOURCE_FILE ("template_invocation.galgas", 116)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 116)).add_operation (GALGAS_string ("' "), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 116)).add_operation (function_displayTypeAndValue (enumerator_4754.current_mType (HERE), enumerator_4754.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 116)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 116)).add_operation (GALGAS_string ("\n"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 116))  COMMA_SOURCE_FILE ("template_invocation.galgas", 116)) ;
    enumerator_4754.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Routine 'displayPathList'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_displayPathList (const GALGAS_stringlist constinArgument_pathList,
                              C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  inCompiler->printMessage (GALGAS_string (" -----------------------------------------\n")  COMMA_SOURCE_FILE ("template_invocation.galgas", 122)) ;
  cEnumerator_stringlist enumerator_4972 (constinArgument_pathList, kEnumeration_up) ;
  while (enumerator_4972.hasCurrentObject ()) {
    inCompiler->printMessage (GALGAS_string (" - '").add_operation (enumerator_4972.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 124)).add_operation (GALGAS_string ("'\n"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 124))  COMMA_SOURCE_FILE ("template_invocation.galgas", 124)) ;
    enumerator_4972.gotoNextObject () ;
  }
  inCompiler->printMessage (GALGAS_string (" -----------------------------------------\n")  COMMA_SOURCE_FILE ("template_invocation.galgas", 126)) ;
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'findFileInHierarchy'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_findFileInHierarchy (const GALGAS_string constinArgument_file,
                                  const GALGAS_string constinArgument_rootPath,
                                  const GALGAS_string constinArgument_searchPath,
                                  GALGAS_stringlist & ioArgument_searchedPathList,
                                  GALGAS_bool & ioArgument_found,
                                  GALGAS_string & ioArgument_fullPath,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_partialPath = constinArgument_searchPath ;
  if (constinArgument_searchPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 139)).isValid ()) {
    uint32_t variant_5368 = constinArgument_searchPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 139)).uintValue () ;
    bool loop_5368 = true ;
    while (loop_5368) {
      loop_5368 = GALGAS_bool (kIsStrictSup, var_partialPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 140)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (ioArgument_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 140)) COMMA_SOURCE_FILE ("template_invocation.galgas", 140)).isValid () ;
      if (loop_5368) {
        loop_5368 = GALGAS_bool (kIsStrictSup, var_partialPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 140)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (ioArgument_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 140)) COMMA_SOURCE_FILE ("template_invocation.galgas", 140)).boolValue () ;
      }
      if (loop_5368 && (0 == variant_5368)) {
        loop_5368 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_invocation.galgas", 139)) ;
      }
      if (loop_5368) {
        variant_5368 -- ;
        GALGAS_string var_fullFilePath = constinArgument_rootPath.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 141)).add_operation (var_partialPath, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 141)).add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 141)).add_operation (constinArgument_file, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 141)) ;
        ioArgument_searchedPathList.addAssign_operation (var_fullFilePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 142)) ;
        ioArgument_found = var_fullFilePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 143)) ;
        const enumGalgasBool test_0 = ioArgument_found.boolEnum () ;
        if (kBoolTrue == test_0) {
          ioArgument_fullPath = var_fullFilePath ;
        }else if (kBoolFalse == test_0) {
          var_partialPath = var_partialPath.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("template_invocation.galgas", 147)) ;
        }
      }
    }
  }
  const enumGalgasBool test_1 = ioArgument_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 150)).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_string var_fullFilePath = constinArgument_rootPath.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 151)).add_operation (constinArgument_file, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 151)) ;
    ioArgument_searchedPathList.addAssign_operation (var_fullFilePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 152)) ;
    ioArgument_found = var_fullFilePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 153)) ;
    const enumGalgasBool test_2 = ioArgument_found.boolEnum () ;
    if (kBoolTrue == test_2) {
      ioArgument_fullPath = var_fullFilePath ;
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Routine 'findAllFilesInHierarchy'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_findAllFilesInHierarchy (const GALGAS_string constinArgument_file,
                                      const GALGAS_string constinArgument_rootPath,
                                      const GALGAS_string constinArgument_searchPath,
                                      GALGAS_stringlist & ioArgument_searchedPathList,
                                      GALGAS_stringlist & ioArgument_fullPaths,
                                      C_Compiler * inCompiler
                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string var_partialPath = constinArgument_searchPath ;
  if (constinArgument_searchPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 169)).isValid ()) {
    uint32_t variant_6226 = constinArgument_searchPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 169)).uintValue () ;
    bool loop_6226 = true ;
    while (loop_6226) {
      loop_6226 = GALGAS_bool (kIsStrictSup, var_partialPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 170)).objectCompare (GALGAS_uint ((uint32_t) 0U))).isValid () ;
      if (loop_6226) {
        loop_6226 = GALGAS_bool (kIsStrictSup, var_partialPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 170)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolValue () ;
      }
      if (loop_6226 && (0 == variant_6226)) {
        loop_6226 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_invocation.galgas", 169)) ;
      }
      if (loop_6226) {
        variant_6226 -- ;
        GALGAS_string var_fullFilePath = constinArgument_rootPath.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 171)).add_operation (var_partialPath, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 171)).add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 171)).add_operation (constinArgument_file, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 171)) ;
        ioArgument_searchedPathList.addAssign_operation (var_fullFilePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 172)) ;
        const enumGalgasBool test_0 = var_fullFilePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 173)).boolEnum () ;
        if (kBoolTrue == test_0) {
          ioArgument_fullPaths.addAssign_operation (var_fullFilePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 174)) ;
        }
        GALGAS_string var_newPartialPath = var_partialPath.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("template_invocation.galgas", 176)) ;
        const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_newPartialPath.objectCompare (var_partialPath)).boolEnum () ;
        if (kBoolTrue == test_1) {
          var_partialPath = GALGAS_string::makeEmptyString () ;
        }else if (kBoolFalse == test_1) {
          var_partialPath = var_newPartialPath ;
        }
      }
    }
  }
  GALGAS_string var_fullFilePath = constinArgument_rootPath.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 183)).add_operation (constinArgument_file, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 183)) ;
  ioArgument_searchedPathList.addAssign_operation (var_fullFilePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 184)) ;
  const enumGalgasBool test_2 = var_fullFilePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 185)).boolEnum () ;
  if (kBoolTrue == test_2) {
    ioArgument_fullPaths.addAssign_operation (var_fullFilePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 186)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'findFileInPathList'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_findFileInPathList (const GALGAS_string constinArgument_file,
                                 const GALGAS_stringlist constinArgument_rootPathList,
                                 const GALGAS_string constinArgument_searchPath,
                                 GALGAS_stringlist & outArgument_searchedPathList,
                                 GALGAS_bool & outArgument_found,
                                 GALGAS_string & outArgument_fullPath,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_searchedPathList.drop () ; // Release 'out' argument
  outArgument_found.drop () ; // Release 'out' argument
  outArgument_fullPath.drop () ; // Release 'out' argument
  outArgument_searchedPathList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("template_invocation.galgas", 199)) ;
  outArgument_found = GALGAS_bool (false) ;
  outArgument_fullPath = GALGAS_string::makeEmptyString () ;
  cEnumerator_stringlist enumerator_7214 (constinArgument_rootPathList, kEnumeration_up) ;
  while (enumerator_7214.hasCurrentObject ()) {
    {
    routine_findFileInHierarchy (constinArgument_file, enumerator_7214.current_mValue (HERE), constinArgument_searchPath, outArgument_searchedPathList, outArgument_found, outArgument_fullPath, inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 204)) ;
    }
    enumerator_7214.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Routine 'findAllFilesInPathList'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_findAllFilesInPathList (const GALGAS_string constinArgument_file,
                                     const GALGAS_stringlist constinArgument_rootPathList,
                                     const GALGAS_string constinArgument_searchPath,
                                     GALGAS_stringlist & outArgument_searchedPathList,
                                     GALGAS_stringlist & outArgument_fullPaths,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_searchedPathList.drop () ; // Release 'out' argument
  outArgument_fullPaths.drop () ; // Release 'out' argument
  outArgument_searchedPathList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("template_invocation.galgas", 223)) ;
  outArgument_fullPaths = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("template_invocation.galgas", 224)) ;
  cEnumerator_stringlist enumerator_7735 (constinArgument_rootPathList, kEnumeration_up) ;
  while (enumerator_7735.hasCurrentObject ()) {
    {
    routine_findAllFilesInHierarchy (constinArgument_file, enumerator_7735.current_mValue (HERE), constinArgument_searchPath, outArgument_searchedPathList, outArgument_fullPaths, inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 227)) ;
    }
    enumerator_7735.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'templateInvocation'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_templateInvocation (const GALGAS_lstring constinArgument_inTemplateName,
                                 const GALGAS_string constinArgument_inPrefix,
                                 const GALGAS_string constinArgument_inPath,
                                 const GALGAS_string constinArgument_inTemplateDirectory,
                                 const GALGAS_bool constinArgument_inErrorIfNotFound,
                                 const GALGAS_TfieldMap constinArgument_inTemplateVariableMap,
                                 GALGAS_string & ioArgument_ioResultingString,
                                 GALGAS_bool & outArgument_outNoErrorOccured,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outNoErrorOccured.drop () ; // Release 'out' argument
  outArgument_outNoErrorOccured = GALGAS_bool (true) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, GALGAS_uint::constructor_errorCount (SOURCE_FILE ("template_invocation.galgas", 249)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_string var_templateDir = constinArgument_inTemplateDirectory ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_templateDir.reader_length (SOURCE_FILE ("template_invocation.galgas", 251)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_location location_2 (constinArgument_inTemplateName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("the '--goil-templates' option or the environment variable GOIL_TEMPLATES is required for generating code")  COMMA_SOURCE_FILE ("template_invocation.galgas", 252)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_3 = var_templateDir.reader_directoryExists (SOURCE_FILE ("template_invocation.galgas", 253)).operator_not (SOURCE_FILE ("template_invocation.galgas", 253)).boolEnum () ;
      if (kBoolTrue == test_3) {
        GALGAS_location location_4 (constinArgument_inTemplateName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_4, GALGAS_string ("the template path '").add_operation (var_templateDir, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 254)).add_operation (GALGAS_string ("' exists but is not a valid directory path"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 254))  COMMA_SOURCE_FILE ("template_invocation.galgas", 254)) ;
      }else if (kBoolFalse == test_3) {
        GALGAS_string var_targetDir = GALGAS_string (gOption_goil_5F_options_target_5F_platform.reader_value ()) ;
        GALGAS_string var_fullTemplateDir ;
        const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, constinArgument_inPrefix.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
        if (kBoolTrue == test_5) {
          var_fullTemplateDir = var_templateDir ;
        }else if (kBoolFalse == test_5) {
          var_fullTemplateDir = var_templateDir.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 261)).add_operation (constinArgument_inPrefix, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 261)) ;
        }
        const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, var_targetDir.reader_length (SOURCE_FILE ("template_invocation.galgas", 263)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
        if (kBoolTrue == test_6) {
          GALGAS_location location_7 (constinArgument_inTemplateName.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_7, GALGAS_string ("the '--target' (or '-t') option is required for generating code")  COMMA_SOURCE_FILE ("template_invocation.galgas", 264)) ;
        }else if (kBoolFalse == test_6) {
          const enumGalgasBool test_8 = var_fullTemplateDir.reader_directoryExists (SOURCE_FILE ("template_invocation.galgas", 265)).operator_not (SOURCE_FILE ("template_invocation.galgas", 265)).boolEnum () ;
          if (kBoolTrue == test_8) {
            GALGAS_location location_9 (constinArgument_inTemplateName.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_9, GALGAS_string ("internal. no '").add_operation (var_fullTemplateDir, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 266)).add_operation (GALGAS_string ("' template found"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 266))  COMMA_SOURCE_FILE ("template_invocation.galgas", 266)) ;
          }else if (kBoolFalse == test_8) {
            GALGAS_stringlist var_pathList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("template_invocation.galgas", 273)) ;
            GALGAS_bool var_found = GALGAS_bool (false) ;
            const enumGalgasBool test_10 = GALGAS_bool (kIsNotEqual, constinArgument_inPath.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
            if (kBoolTrue == test_10) {
              GALGAS_string var_userTemplateDir ;
              const enumGalgasBool test_11 = GALGAS_bool (kIsEqual, constinArgument_inPrefix.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
              if (kBoolTrue == test_11) {
                var_userTemplateDir = constinArgument_inPath ;
              }else if (kBoolFalse == test_11) {
                var_userTemplateDir = constinArgument_inPath.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 280)).add_operation (constinArgument_inPrefix, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 280)) ;
              }
              GALGAS_string var_fullTemplatePath = GALGAS_string::constructor_stringWithCurrentDirectory (SOURCE_FILE ("template_invocation.galgas", 282)).add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 282)).add_operation (var_userTemplateDir, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 282)).add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 282)).add_operation (constinArgument_inTemplateName.reader_string (SOURCE_FILE ("template_invocation.galgas", 282)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 282)).add_operation (GALGAS_string (".goilTemplate"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 282)) ;
              var_pathList.addAssign_operation (var_fullTemplatePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 283)) ;
              var_found = var_fullTemplatePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 284)) ;
              const enumGalgasBool test_12 = var_found.boolEnum () ;
              if (kBoolTrue == test_12) {
                GALGAS_Tvalue joker_10271 ; // Joker input parameter
                GALGAS_Ttype joker_10274 ; // Joker input parameter
                cGrammar_template_5F_grammar::_performSourceFileParsing_ (inCompiler, GALGAS_lstring::constructor_new (var_fullTemplatePath, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 286))  COMMA_SOURCE_FILE ("template_invocation.galgas", 286)), constinArgument_inPrefix, constinArgument_inPath, constinArgument_inTemplateDirectory, constinArgument_inTemplateVariableMap, ioArgument_ioResultingString, joker_10271, joker_10274  COMMA_SOURCE_FILE ("template_invocation.galgas", 286)) ;
              }
            }
            GALGAS_string var_targetTemplatePartialPath = var_targetDir ;
            if (var_targetDir.reader_length (SOURCE_FILE ("template_invocation.galgas", 290)).isValid ()) {
              uint32_t variant_10368 = var_targetDir.reader_length (SOURCE_FILE ("template_invocation.galgas", 290)).uintValue () ;
              bool loop_10368 = true ;
              while (loop_10368) {
                loop_10368 = GALGAS_bool (kIsStrictSup, var_targetTemplatePartialPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 291)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (var_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 291)) COMMA_SOURCE_FILE ("template_invocation.galgas", 291)).isValid () ;
                if (loop_10368) {
                  loop_10368 = GALGAS_bool (kIsStrictSup, var_targetTemplatePartialPath.reader_length (SOURCE_FILE ("template_invocation.galgas", 291)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (var_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 291)) COMMA_SOURCE_FILE ("template_invocation.galgas", 291)).boolValue () ;
                }
                if (loop_10368 && (0 == variant_10368)) {
                  loop_10368 = false ;
                  inCompiler->loopRunTimeVariantError (SOURCE_FILE ("template_invocation.galgas", 290)) ;
                }
                if (loop_10368) {
                  variant_10368 -- ;
                  GALGAS_string var_fullTemplatePath = var_fullTemplateDir.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 293)).add_operation (var_targetTemplatePartialPath, inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 293)).add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 293)).add_operation (constinArgument_inTemplateName.reader_string (SOURCE_FILE ("template_invocation.galgas", 293)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 293)).add_operation (GALGAS_string (".goilTemplate"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 293)) ;
                  var_pathList.addAssign_operation (var_fullTemplatePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 294)) ;
                  var_found = var_fullTemplatePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 295)) ;
                  const enumGalgasBool test_13 = var_found.boolEnum () ;
                  if (kBoolTrue == test_13) {
                    GALGAS_Tvalue joker_10926 ; // Joker input parameter
                    GALGAS_Ttype joker_10929 ; // Joker input parameter
                    cGrammar_template_5F_grammar::_performSourceFileParsing_ (inCompiler, GALGAS_lstring::constructor_new (var_fullTemplatePath, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 298))  COMMA_SOURCE_FILE ("template_invocation.galgas", 298)), constinArgument_inPrefix, constinArgument_inPath, constinArgument_inTemplateDirectory, constinArgument_inTemplateVariableMap, ioArgument_ioResultingString, joker_10926, joker_10929  COMMA_SOURCE_FILE ("template_invocation.galgas", 298)) ;
                  }else if (kBoolFalse == test_13) {
                    var_targetTemplatePartialPath = var_targetTemplatePartialPath.reader_stringByDeletingLastPathComponent (SOURCE_FILE ("template_invocation.galgas", 300)) ;
                  }
                }
              }
            }
            const enumGalgasBool test_14 = var_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 303)).boolEnum () ;
            if (kBoolTrue == test_14) {
              GALGAS_string var_fullTemplatePath = var_fullTemplateDir.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 304)).add_operation (constinArgument_inTemplateName.reader_string (SOURCE_FILE ("template_invocation.galgas", 304)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 304)).add_operation (GALGAS_string (".goilTemplate"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 304)) ;
              var_pathList.addAssign_operation (var_fullTemplatePath  COMMA_SOURCE_FILE ("template_invocation.galgas", 305)) ;
              var_found = var_fullTemplatePath.reader_fileExists (SOURCE_FILE ("template_invocation.galgas", 306)) ;
              const enumGalgasBool test_15 = var_found.boolEnum () ;
              if (kBoolTrue == test_15) {
                GALGAS_Tvalue joker_11524 ; // Joker input parameter
                GALGAS_Ttype joker_11527 ; // Joker input parameter
                cGrammar_template_5F_grammar::_performSourceFileParsing_ (inCompiler, GALGAS_lstring::constructor_new (var_fullTemplatePath, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_invocation.galgas", 309))  COMMA_SOURCE_FILE ("template_invocation.galgas", 309)), constinArgument_inPrefix, constinArgument_inPath, constinArgument_inTemplateDirectory, constinArgument_inTemplateVariableMap, ioArgument_ioResultingString, joker_11524, joker_11527  COMMA_SOURCE_FILE ("template_invocation.galgas", 309)) ;
              }
            }
            const enumGalgasBool test_16 = var_found.operator_not (SOURCE_FILE ("template_invocation.galgas", 312)).boolEnum () ;
            if (kBoolTrue == test_16) {
              outArgument_outNoErrorOccured = GALGAS_bool (false) ;
              const enumGalgasBool test_17 = constinArgument_inErrorIfNotFound.boolEnum () ;
              if (kBoolTrue == test_17) {
                GALGAS_string var_m = GALGAS_string ("cannot find a valid path for the '").add_operation (constinArgument_inTemplateName.reader_string (SOURCE_FILE ("template_invocation.galgas", 315)), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 315)).add_operation (GALGAS_string ("' template; I have tried:"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 315)) ;
                cEnumerator_stringlist enumerator_11792 (var_pathList, kEnumeration_up) ;
                while (enumerator_11792.hasCurrentObject ()) {
                  var_m.dotAssign_operation (GALGAS_string ("\n"
                    "  - '").add_operation (enumerator_11792.current_mValue (HERE), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 317)).add_operation (GALGAS_string ("';"), inCompiler COMMA_SOURCE_FILE ("template_invocation.galgas", 317))  COMMA_SOURCE_FILE ("template_invocation.galgas", 317)) ;
                  enumerator_11792.gotoNextObject () ;
                }
                GALGAS_location location_18 (constinArgument_inTemplateName.reader_location (HERE)) ; // Implicit use of 'location' reader
                inCompiler->emitSemanticError (location_18, var_m  COMMA_SOURCE_FILE ("template_invocation.galgas", 319)) ;
              }
            }
          }
        }
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'goil_template'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_goil_5F_template (const GALGAS_string & constinArgument_prefix,
                                         const GALGAS_TfieldMap & constinArgument_cfg,
                                         const GALGAS_string & constinArgument_name,
                                         C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  {
  GALGAS_bool joker_282 ; // Joker input parameter
  routine_templateInvocation (GALGAS_lstring::constructor_new (constinArgument_name, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_routines.galgas", 10))  COMMA_SOURCE_FILE ("template_routines.galgas", 10)), constinArgument_prefix, GALGAS_string ("templates"), function_rootTemplatesDirectory (inCompiler COMMA_SOURCE_FILE ("template_routines.galgas", 13)), GALGAS_bool (true), constinArgument_cfg, result_result, joker_282, inCompiler  COMMA_SOURCE_FILE ("template_routines.galgas", 9)) ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_goil_5F_template [4] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_goil_5F_template (C_Compiler * inCompiler,
                                                                 const cObjectArray & inEffectiveParameterArray,
                                                                 const GALGAS_location & /* §§ inErrorLocation */
                                                                 COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_TfieldMap operand1 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_string operand2 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_goil_5F_template (operand0,
                                    operand1,
                                    operand2,
                                    inCompiler
                                    COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_goil_5F_template ("goil_template",
                                                                  functionWithGenericHeader_goil_5F_template,
                                                                  & kTypeDescriptor_GALGAS_string,
                                                                  3,
                                                                  functionArgs_goil_5F_template) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Function 'computeTemplate'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_computeTemplate (const GALGAS_string & constinArgument_prefix,
                                        const GALGAS_TfieldMap & constinArgument_cfg,
                                        const GALGAS_string & constinArgument_name,
                                        C_Compiler * inCompiler
                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  {
  GALGAS_bool joker_571 ; // Joker input parameter
  routine_templateInvocation (GALGAS_lstring::constructor_new (constinArgument_name, GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("template_routines.galgas", 27))  COMMA_SOURCE_FILE ("template_routines.galgas", 27)), constinArgument_prefix, GALGAS_string ("templates"), function_rootTemplatesDirectory (inCompiler COMMA_SOURCE_FILE ("template_routines.galgas", 30)), GALGAS_bool (true), constinArgument_cfg, result_result, joker_571, inCompiler  COMMA_SOURCE_FILE ("template_routines.galgas", 26)) ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_computeTemplate [4] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_TfieldMap,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_computeTemplate (C_Compiler * inCompiler,
                                                                const cObjectArray & inEffectiveParameterArray,
                                                                const GALGAS_location & /* §§ inErrorLocation */
                                                                COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_TfieldMap operand1 = GALGAS_TfieldMap::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  const GALGAS_string operand2 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_computeTemplate (operand0,
                                   operand1,
                                   operand2,
                                   inCompiler
                                   COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_computeTemplate ("computeTemplate",
                                                                 functionWithGenericHeader_computeTemplate,
                                                                 & kTypeDescriptor_GALGAS_string,
                                                                 3,
                                                                 functionArgs_computeTemplate) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Function 'trueFalse'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_trueFalse (const GALGAS_bool & constinArgument_inBool,
                                  C_Compiler * /* inCompiler */
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  const enumGalgasBool test_0 = constinArgument_inBool.boolEnum () ;
  if (kBoolTrue == test_0) {
    result_result = GALGAS_string ("true") ;
  }else if (kBoolFalse == test_0) {
    result_result = GALGAS_string ("false") ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_trueFalse [2] = {
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_trueFalse (C_Compiler * inCompiler,
                                                          const cObjectArray & inEffectiveParameterArray,
                                                          const GALGAS_location & /* §§ inErrorLocation */
                                                          COMMA_LOCATION_ARGS) {
  const GALGAS_bool operand0 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_trueFalse (operand0,
                             inCompiler
                             COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_trueFalse ("trueFalse",
                                                           functionWithGenericHeader_trueFalse,
                                                           & kTypeDescriptor_GALGAS_string,
                                                           1,
                                                           functionArgs_trueFalse) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                  Function 'yesNo'                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_yesNo (const GALGAS_bool & constinArgument_inBool,
                              C_Compiler * /* inCompiler */
                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  const enumGalgasBool test_0 = constinArgument_inBool.boolEnum () ;
  if (kBoolTrue == test_0) {
    result_result = GALGAS_string ("YES") ;
  }else if (kBoolFalse == test_0) {
    result_result = GALGAS_string ("NO") ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_yesNo [2] = {
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_yesNo (C_Compiler * inCompiler,
                                                      const cObjectArray & inEffectiveParameterArray,
                                                      const GALGAS_location & /* §§ inErrorLocation */
                                                      COMMA_LOCATION_ARGS) {
  const GALGAS_bool operand0 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_yesNo (operand0,
                         inCompiler
                         COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_yesNo ("yesNo",
                                                       functionWithGenericHeader_yesNo,
                                                       & kTypeDescriptor_GALGAS_string,
                                                       1,
                                                       functionArgs_yesNo) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Function 'TRUEFALSE'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_TRUEFALSE (const GALGAS_bool & constinArgument_inBool,
                                  C_Compiler * /* inCompiler */
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  const enumGalgasBool test_0 = constinArgument_inBool.boolEnum () ;
  if (kBoolTrue == test_0) {
    result_result = GALGAS_string ("TRUE") ;
  }else if (kBoolFalse == test_0) {
    result_result = GALGAS_string ("FALSE") ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_TRUEFALSE [2] = {
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_TRUEFALSE (C_Compiler * inCompiler,
                                                          const cObjectArray & inEffectiveParameterArray,
                                                          const GALGAS_location & /* §§ inErrorLocation */
                                                          COMMA_LOCATION_ARGS) {
  const GALGAS_bool operand0 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_TRUEFALSE (operand0,
                             inCompiler
                             COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_TRUEFALSE ("TRUEFALSE",
                                                           functionWithGenericHeader_TRUEFALSE,
                                                           & kTypeDescriptor_GALGAS_string,
                                                           1,
                                                           functionArgs_TRUEFALSE) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               Bool options                                                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

C_BoolCommandLineOption gOption_goil_5F_options_generate_5F_log ("goil_options",
                                         "generate_log",
                                         108,
                                         "logfile",
                                         "generate a goil.log file containing the a log of the compilation") ;

C_BoolCommandLineOption gOption_goil_5F_options_warnMultiple ("goil_options",
                                         "warnMultiple",
                                         0,
                                         "warn-multiple",
                                         "Emit a warning if an object not defined for the first time in the implementation does not have the same multiple attribute as in the first definition") ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                               UInt options                                                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              String options                                                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

C_StringCommandLineOption gOption_goil_5F_options_config ("goil_options",
                                         "config",
                                         99,
                                         "config",
                                         "Specifies the OIL config file used by goil",
                                         "config") ;

C_StringCommandLineOption gOption_goil_5F_options_project_5F_dir ("goil_options",
                                         "project_dir",
                                         112,
                                         "project",
                                         "Specifies project directory (by default, the project directory is the name of the oil file, without the .oil extension)",
                                         "") ;

C_StringCommandLineOption gOption_goil_5F_options_target_5F_platform ("goil_options",
                                         "target_platform",
                                         116,
                                         "target",
                                         "Specifies target platform. Available target platform are located in machines/ directory. Targets are specified using a path like avr/arduino.",
                                         "") ;

C_StringCommandLineOption gOption_goil_5F_options_template_5F_dir ("goil_options",
                                         "template_dir",
                                         0,
                                         "templates",
                                         "Specifies template directory (used by goil for code generation)",
                                         "") ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                              String List options                                                                    *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

//---------------------------------------------------------------------------------------------------------------------*


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Function 'checkEnums'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool function_checkEnums (const GALGAS_impEnumType & constinArgument_previousEnum,
                                 const GALGAS_impEnumType & constinArgument_newEnum,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool result_inside ; // Returned variable
  GALGAS_stringset var_newValues = constinArgument_newEnum.reader_valuesMap (SOURCE_FILE ("implementation_parser.galgas", 534)).reader_keySet (SOURCE_FILE ("implementation_parser.galgas", 534)) ;
  GALGAS_stringset var_previousValues = constinArgument_previousEnum.reader_valuesMap (SOURCE_FILE ("implementation_parser.galgas", 535)).reader_keySet (SOURCE_FILE ("implementation_parser.galgas", 535)) ;
  result_inside = GALGAS_bool (kIsEqual, var_newValues.operator_and (var_previousValues COMMA_SOURCE_FILE ("implementation_parser.galgas", 536)).objectCompare (var_newValues)) ;
  const enumGalgasBool test_0 = result_inside.operator_not (SOURCE_FILE ("implementation_parser.galgas", 537)).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_locationList enumerator_14595 (constinArgument_newEnum.reader_locations (SOURCE_FILE ("implementation_parser.galgas", 538)), kEnumeration_up) ;
    while (enumerator_14595.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_14595.current_location (HERE), GALGAS_string ("ENUM is not within previous enum declaration")  COMMA_SOURCE_FILE ("implementation_parser.galgas", 539)) ;
      enumerator_14595.gotoNextObject () ;
    }
    cEnumerator_locationList enumerator_14714 (constinArgument_previousEnum.reader_locations (SOURCE_FILE ("implementation_parser.galgas", 541)), kEnumeration_up) ;
    while (enumerator_14714.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_14714.current_location (HERE), GALGAS_string ("previous ENUM declaration was here")  COMMA_SOURCE_FILE ("implementation_parser.galgas", 542)) ;
      enumerator_14714.gotoNextObject () ;
    }
  }
//---
  return result_inside ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_checkEnums [3] = {
  & kTypeDescriptor_GALGAS_impEnumType,
  & kTypeDescriptor_GALGAS_impEnumType,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_checkEnums (C_Compiler * inCompiler,
                                                           const cObjectArray & inEffectiveParameterArray,
                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_impEnumType operand0 = GALGAS_impEnumType::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_impEnumType operand1 = GALGAS_impEnumType::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  return function_checkEnums (operand0,
                              operand1,
                              inCompiler
                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_checkEnums ("checkEnums",
                                                            functionWithGenericHeader_checkEnums,
                                                            & kTypeDescriptor_GALGAS_bool,
                                                            2,
                                                            functionArgs_checkEnums) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'checkRanged'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool function_checkRanged (const GALGAS_impRangedType & constinArgument_previousRanged,
                                  const GALGAS_impRangedType & constinArgument_newRanged,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool result_inside ; // Returned variable
  callCategoryMethod_enclose ((const cPtr_attributeRange *) constinArgument_previousRanged.reader_setOrRange (SOURCE_FILE ("implementation_parser.galgas", 555)).ptr (), result_inside, constinArgument_newRanged.reader_setOrRange (SOURCE_FILE ("implementation_parser.galgas", 555)), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 555)) ;
  const enumGalgasBool test_0 = result_inside.operator_not (SOURCE_FILE ("implementation_parser.galgas", 556)).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_locationList enumerator_15077 (constinArgument_newRanged.reader_locations (SOURCE_FILE ("implementation_parser.galgas", 557)), kEnumeration_up) ;
    while (enumerator_15077.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_15077.current_location (HERE), GALGAS_string ("new range or set is not within previous range or set declaration")  COMMA_SOURCE_FILE ("implementation_parser.galgas", 558)) ;
      enumerator_15077.gotoNextObject () ;
    }
    cEnumerator_locationList enumerator_15218 (constinArgument_previousRanged.reader_locations (SOURCE_FILE ("implementation_parser.galgas", 560)), kEnumeration_up) ;
    while (enumerator_15218.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_15218.current_location (HERE), GALGAS_string ("previous range or set declaration was here")  COMMA_SOURCE_FILE ("implementation_parser.galgas", 561)) ;
      enumerator_15218.gotoNextObject () ;
    }
  }
//---
  return result_inside ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_checkRanged [3] = {
  & kTypeDescriptor_GALGAS_impRangedType,
  & kTypeDescriptor_GALGAS_impRangedType,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_checkRanged (C_Compiler * inCompiler,
                                                            const cObjectArray & inEffectiveParameterArray,
                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_impRangedType operand0 = GALGAS_impRangedType::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                             inCompiler
                                                                             COMMA_THERE) ;
  const GALGAS_impRangedType operand1 = GALGAS_impRangedType::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                             inCompiler
                                                                             COMMA_THERE) ;
  return function_checkRanged (operand0,
                               operand1,
                               inCompiler
                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_checkRanged ("checkRanged",
                                                             functionWithGenericHeader_checkRanged,
                                                             & kTypeDescriptor_GALGAS_bool,
                                                             2,
                                                             functionArgs_checkRanged) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                      Function 'checkNewTypeWithinPreviousType'                                      *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool function_checkNewTypeWithinPreviousType (const GALGAS_lstring & constinArgument_name,
                                                     const GALGAS_impType & constinArgument_previousType,
                                                     const GALGAS_impType & constinArgument_newType,
                                                     C_Compiler * inCompiler
                                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool result_result ; // Returned variable
  result_result = GALGAS_bool (false) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, constinArgument_newType.reader_type (SOURCE_FILE ("implementation_parser.galgas", 572)).objectCompare (constinArgument_previousType.reader_type (SOURCE_FILE ("implementation_parser.galgas", 572)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    cEnumerator_locationList enumerator_15533 (constinArgument_newType.reader_locations (SOURCE_FILE ("implementation_parser.galgas", 573)), kEnumeration_up) ;
    while (enumerator_15533.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_15533.current_location (HERE), constinArgument_name.reader_string (SOURCE_FILE ("implementation_parser.galgas", 574)).add_operation (GALGAS_string (" should be a "), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 574)).add_operation (categoryReader_oilType (constinArgument_previousType.reader_type (SOURCE_FILE ("implementation_parser.galgas", 574)), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 574)), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 574))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 574)) ;
      enumerator_15533.gotoNextObject () ;
    }
    cEnumerator_locationList enumerator_15665 (constinArgument_previousType.reader_locations (SOURCE_FILE ("implementation_parser.galgas", 576)), kEnumeration_up) ;
    while (enumerator_15665.hasCurrentObject ()) {
      inCompiler->emitSemanticError (enumerator_15665.current_location (HERE), constinArgument_name.reader_string (SOURCE_FILE ("implementation_parser.galgas", 577)).add_operation (GALGAS_string (" was previouly defined here"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 577))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 577)) ;
      enumerator_15665.gotoNextObject () ;
    }
    result_result = GALGAS_bool (false) ;
  }else if (kBoolFalse == test_0) {
    if (constinArgument_previousType.isValid ()) {
      if (constinArgument_previousType.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impEnumType) {
        GALGAS_impEnumType cast_15828_previousEnum ((cPtr_impEnumType *) constinArgument_previousType.ptr ()) ;
        if (constinArgument_newType.isValid ()) {
          if (constinArgument_newType.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impEnumType) {
            GALGAS_impEnumType cast_15884_newEnum ((cPtr_impEnumType *) constinArgument_newType.ptr ()) ;
            result_result = function_checkEnums (cast_15828_previousEnum, cast_15884_newEnum, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 585)) ;
          }
        }
      }else if (constinArgument_previousType.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impRangedType) {
        GALGAS_impRangedType cast_15995_previousRanged ((cPtr_impRangedType *) constinArgument_previousType.ptr ()) ;
        if (constinArgument_newType.isValid ()) {
          if (constinArgument_newType.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impRangedType) {
            GALGAS_impRangedType cast_16055_newRanged ((cPtr_impRangedType *) constinArgument_newType.ptr ()) ;
            result_result = function_checkRanged (cast_15995_previousRanged, cast_16055_newRanged, inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 590)) ;
          }
        }
      }else{
        result_result = GALGAS_bool (true) ;
      }
    }
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_checkNewTypeWithinPreviousType [4] = {
  & kTypeDescriptor_GALGAS_lstring,
  & kTypeDescriptor_GALGAS_impType,
  & kTypeDescriptor_GALGAS_impType,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_checkNewTypeWithinPreviousType (C_Compiler * inCompiler,
                                                                               const cObjectArray & inEffectiveParameterArray,
                                                                               const GALGAS_location & /* §§ inErrorLocation */
                                                                               COMMA_LOCATION_ARGS) {
  const GALGAS_lstring operand0 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  const GALGAS_impType operand1 = GALGAS_impType::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  const GALGAS_impType operand2 = GALGAS_impType::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  return function_checkNewTypeWithinPreviousType (operand0,
                                                  operand1,
                                                  operand2,
                                                  inCompiler
                                                  COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_checkNewTypeWithinPreviousType ("checkNewTypeWithinPreviousType",
                                                                                functionWithGenericHeader_checkNewTypeWithinPreviousType,
                                                                                & kTypeDescriptor_GALGAS_bool,
                                                                                3,
                                                                                functionArgs_checkNewTypeWithinPreviousType) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Function 'buildRange'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_attributeRange function_buildRange (const GALGAS_dataType & constinArgument_type,
                                           const GALGAS_object_5F_t & constinArgument_start,
                                           const GALGAS_object_5F_t & constinArgument_stop,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeRange result_range ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE ("implementation_parser.galgas", 603)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_range = GALGAS_uint_33__32_AttributeMinMax::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 604)), function_uint_33__32_OrError (constinArgument_start, GALGAS_string ("UINT32 Range start"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 604)), function_uint_33__32_OrError (constinArgument_stop, GALGAS_string ("UINT32 Range stop"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 604))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 604)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_33__32_Number (SOURCE_FILE ("implementation_parser.galgas", 605)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      result_range = GALGAS_sint_33__32_AttributeMinMax::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 606)), function_sint_33__32_OrError (constinArgument_start, GALGAS_string ("SINT32 Range start"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 606)), function_sint_33__32_OrError (constinArgument_stop, GALGAS_string ("SINT32 Range stop"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 606))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 606)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_parser.galgas", 607)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result_range = GALGAS_uint_36__34_AttributeMinMax::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 608)), function_uint_36__34_OrError (constinArgument_start, GALGAS_string ("UINT64 Range start"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 608)), function_uint_36__34_OrError (constinArgument_stop, GALGAS_string ("UINT64 Range stop"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 608))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 608)) ;
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_36__34_Number (SOURCE_FILE ("implementation_parser.galgas", 609)))).boolEnum () ;
        if (kBoolTrue == test_3) {
          result_range = GALGAS_sint_36__34_AttributeMinMax::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 610)), function_sint_36__34_OrError (constinArgument_start, GALGAS_string ("SINT64 Range start"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 610)), function_sint_36__34_OrError (constinArgument_stop, GALGAS_string ("SINT64 Range stop"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 610))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 610)) ;
        }else if (kBoolFalse == test_3) {
          const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_floatNumber (SOURCE_FILE ("implementation_parser.galgas", 611)))).boolEnum () ;
          if (kBoolTrue == test_4) {
            result_range = GALGAS_floatAttributeMinMax::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 612)), function_floatOrError (constinArgument_start, GALGAS_string ("FLOAT Range start"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 612)), function_floatOrError (constinArgument_stop, GALGAS_string ("FLOAT Range stop"), inCompiler COMMA_SOURCE_FILE ("implementation_parser.galgas", 612))  COMMA_SOURCE_FILE ("implementation_parser.galgas", 612)) ;
          }else if (kBoolFalse == test_4) {
            inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_parser.galgas", 614)), GALGAS_string ("internal. Unknown number type")  COMMA_SOURCE_FILE ("implementation_parser.galgas", 614)) ;
            result_range.drop () ; // Release error dropped variable
          }
        }
      }
    }
  }
//---
  return result_range ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_buildRange [4] = {
  & kTypeDescriptor_GALGAS_dataType,
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_object_5F_t,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_buildRange (C_Compiler * inCompiler,
                                                           const cObjectArray & inEffectiveParameterArray,
                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_dataType operand0 = GALGAS_dataType::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                   inCompiler
                                                                   COMMA_THERE) ;
  const GALGAS_object_5F_t operand1 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_object_5F_t operand2 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  return function_buildRange (operand0,
                              operand1,
                              operand2,
                              inCompiler
                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_buildRange ("buildRange",
                                                            functionWithGenericHeader_buildRange,
                                                            & kTypeDescriptor_GALGAS_attributeRange,
                                                            3,
                                                            functionArgs_buildRange) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'stringWithUInt32List'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_stringWithUInt_33__32_List (const GALGAS_uint_33__32_List & constinArgument_values,
                                                   C_Compiler * /* inCompiler */
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  cEnumerator_uint_33__32_List enumerator_1704 (constinArgument_values, kEnumeration_up) ;
  while (enumerator_1704.hasCurrentObject ()) {
    result_result.dotAssign_operation (enumerator_1704.current_value (HERE).reader_string (SOURCE_FILE ("implementation_types.galgas", 69))  COMMA_SOURCE_FILE ("implementation_types.galgas", 69)) ;
    if (enumerator_1704.hasNextObject ()) {
      result_result.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("implementation_types.galgas", 69)) ;
    }
    enumerator_1704.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_stringWithUInt_33__32_List [2] = {
  & kTypeDescriptor_GALGAS_uint_33__32_List,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_stringWithUInt_33__32_List (C_Compiler * inCompiler,
                                                                           const cObjectArray & inEffectiveParameterArray,
                                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_uint_33__32_List operand0 = GALGAS_uint_33__32_List::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                   inCompiler
                                                                                   COMMA_THERE) ;
  return function_stringWithUInt_33__32_List (operand0,
                                              inCompiler
                                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_stringWithUInt_33__32_List ("stringWithUInt32List",
                                                                            functionWithGenericHeader_stringWithUInt_33__32_List,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            1,
                                                                            functionArgs_stringWithUInt_33__32_List) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'stringWithUInt64List'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_stringWithUInt_36__34_List (const GALGAS_uint_36__34_List & constinArgument_values,
                                                   C_Compiler * /* inCompiler */
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  cEnumerator_uint_36__34_List enumerator_1866 (constinArgument_values, kEnumeration_up) ;
  while (enumerator_1866.hasCurrentObject ()) {
    result_result.dotAssign_operation (enumerator_1866.current_value (HERE).reader_string (SOURCE_FILE ("implementation_types.galgas", 74))  COMMA_SOURCE_FILE ("implementation_types.galgas", 74)) ;
    if (enumerator_1866.hasNextObject ()) {
      result_result.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("implementation_types.galgas", 74)) ;
    }
    enumerator_1866.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_stringWithUInt_36__34_List [2] = {
  & kTypeDescriptor_GALGAS_uint_36__34_List,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_stringWithUInt_36__34_List (C_Compiler * inCompiler,
                                                                           const cObjectArray & inEffectiveParameterArray,
                                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_uint_36__34_List operand0 = GALGAS_uint_36__34_List::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                   inCompiler
                                                                                   COMMA_THERE) ;
  return function_stringWithUInt_36__34_List (operand0,
                                              inCompiler
                                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_stringWithUInt_36__34_List ("stringWithUInt64List",
                                                                            functionWithGenericHeader_stringWithUInt_36__34_List,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            1,
                                                                            functionArgs_stringWithUInt_36__34_List) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'stringWithSInt32List'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_stringWithSInt_33__32_List (const GALGAS_sint_33__32_List & constinArgument_values,
                                                   C_Compiler * /* inCompiler */
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  cEnumerator_sint_33__32_List enumerator_2028 (constinArgument_values, kEnumeration_up) ;
  while (enumerator_2028.hasCurrentObject ()) {
    result_result.dotAssign_operation (enumerator_2028.current_value (HERE).reader_string (SOURCE_FILE ("implementation_types.galgas", 79))  COMMA_SOURCE_FILE ("implementation_types.galgas", 79)) ;
    if (enumerator_2028.hasNextObject ()) {
      result_result.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("implementation_types.galgas", 79)) ;
    }
    enumerator_2028.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_stringWithSInt_33__32_List [2] = {
  & kTypeDescriptor_GALGAS_sint_33__32_List,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_stringWithSInt_33__32_List (C_Compiler * inCompiler,
                                                                           const cObjectArray & inEffectiveParameterArray,
                                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_sint_33__32_List operand0 = GALGAS_sint_33__32_List::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                   inCompiler
                                                                                   COMMA_THERE) ;
  return function_stringWithSInt_33__32_List (operand0,
                                              inCompiler
                                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_stringWithSInt_33__32_List ("stringWithSInt32List",
                                                                            functionWithGenericHeader_stringWithSInt_33__32_List,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            1,
                                                                            functionArgs_stringWithSInt_33__32_List) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'stringWithSInt64List'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_stringWithSInt_36__34_List (const GALGAS_sint_36__34_List & constinArgument_values,
                                                   C_Compiler * /* inCompiler */
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  cEnumerator_sint_36__34_List enumerator_2190 (constinArgument_values, kEnumeration_up) ;
  while (enumerator_2190.hasCurrentObject ()) {
    result_result.dotAssign_operation (enumerator_2190.current_value (HERE).reader_string (SOURCE_FILE ("implementation_types.galgas", 84))  COMMA_SOURCE_FILE ("implementation_types.galgas", 84)) ;
    if (enumerator_2190.hasNextObject ()) {
      result_result.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("implementation_types.galgas", 84)) ;
    }
    enumerator_2190.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_stringWithSInt_36__34_List [2] = {
  & kTypeDescriptor_GALGAS_sint_36__34_List,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_stringWithSInt_36__34_List (C_Compiler * inCompiler,
                                                                           const cObjectArray & inEffectiveParameterArray,
                                                                           const GALGAS_location & /* §§ inErrorLocation */
                                                                           COMMA_LOCATION_ARGS) {
  const GALGAS_sint_36__34_List operand0 = GALGAS_sint_36__34_List::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                   inCompiler
                                                                                   COMMA_THERE) ;
  return function_stringWithSInt_36__34_List (operand0,
                                              inCompiler
                                              COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_stringWithSInt_36__34_List ("stringWithSInt64List",
                                                                            functionWithGenericHeader_stringWithSInt_36__34_List,
                                                                            & kTypeDescriptor_GALGAS_string,
                                                                            1,
                                                                            functionArgs_stringWithSInt_36__34_List) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'stringWithFloatList'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_stringWithFloatList (const GALGAS_floatList & constinArgument_values,
                                            C_Compiler * /* inCompiler */
                                            COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  cEnumerator_floatList enumerator_2350 (constinArgument_values, kEnumeration_up) ;
  while (enumerator_2350.hasCurrentObject ()) {
    result_result.dotAssign_operation (enumerator_2350.current_value (HERE).reader_string (SOURCE_FILE ("implementation_types.galgas", 89))  COMMA_SOURCE_FILE ("implementation_types.galgas", 89)) ;
    if (enumerator_2350.hasNextObject ()) {
      result_result.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("implementation_types.galgas", 89)) ;
    }
    enumerator_2350.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_stringWithFloatList [2] = {
  & kTypeDescriptor_GALGAS_floatList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_stringWithFloatList (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_floatList operand0 = GALGAS_floatList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                     inCompiler
                                                                     COMMA_THERE) ;
  return function_stringWithFloatList (operand0,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_stringWithFloatList ("stringWithFloatList",
                                                                     functionWithGenericHeader_stringWithFloatList,
                                                                     & kTypeDescriptor_GALGAS_string,
                                                                     1,
                                                                     functionArgs_stringWithFloatList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'uint32ListWithNumberList'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint_33__32_List function_uint_33__32_ListWithNumberList (const GALGAS_numberList & constinArgument_numbers,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint_33__32_List result_result ; // Returned variable
  result_result = GALGAS_uint_33__32_List::constructor_emptyList (SOURCE_FILE ("implementation_types.galgas", 93)) ;
  cEnumerator_numberList enumerator_2542 (constinArgument_numbers, kEnumeration_up) ;
  while (enumerator_2542.hasCurrentObject ()) {
    result_result.addAssign_operation (enumerator_2542.current_location (HERE), function_uint_33__32_OrError (enumerator_2542.current_value (HERE), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 95))  COMMA_SOURCE_FILE ("implementation_types.galgas", 95)) ;
    enumerator_2542.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_uint_33__32_ListWithNumberList [2] = {
  & kTypeDescriptor_GALGAS_numberList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_uint_33__32_ListWithNumberList (C_Compiler * inCompiler,
                                                                               const cObjectArray & inEffectiveParameterArray,
                                                                               const GALGAS_location & /* §§ inErrorLocation */
                                                                               COMMA_LOCATION_ARGS) {
  const GALGAS_numberList operand0 = GALGAS_numberList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  return function_uint_33__32_ListWithNumberList (operand0,
                                                  inCompiler
                                                  COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_uint_33__32_ListWithNumberList ("uint32ListWithNumberList",
                                                                                functionWithGenericHeader_uint_33__32_ListWithNumberList,
                                                                                & kTypeDescriptor_GALGAS_uint_33__32_List,
                                                                                1,
                                                                                functionArgs_uint_33__32_ListWithNumberList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'sint32ListWithNumberList'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_sint_33__32_List function_sint_33__32_ListWithNumberList (const GALGAS_numberList & constinArgument_numbers,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_sint_33__32_List result_result ; // Returned variable
  result_result = GALGAS_sint_33__32_List::constructor_emptyList (SOURCE_FILE ("implementation_types.galgas", 100)) ;
  cEnumerator_numberList enumerator_2740 (constinArgument_numbers, kEnumeration_up) ;
  while (enumerator_2740.hasCurrentObject ()) {
    result_result.addAssign_operation (enumerator_2740.current_location (HERE), function_sint_33__32_OrError (enumerator_2740.current_value (HERE), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 102))  COMMA_SOURCE_FILE ("implementation_types.galgas", 102)) ;
    enumerator_2740.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_sint_33__32_ListWithNumberList [2] = {
  & kTypeDescriptor_GALGAS_numberList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_sint_33__32_ListWithNumberList (C_Compiler * inCompiler,
                                                                               const cObjectArray & inEffectiveParameterArray,
                                                                               const GALGAS_location & /* §§ inErrorLocation */
                                                                               COMMA_LOCATION_ARGS) {
  const GALGAS_numberList operand0 = GALGAS_numberList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  return function_sint_33__32_ListWithNumberList (operand0,
                                                  inCompiler
                                                  COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_sint_33__32_ListWithNumberList ("sint32ListWithNumberList",
                                                                                functionWithGenericHeader_sint_33__32_ListWithNumberList,
                                                                                & kTypeDescriptor_GALGAS_sint_33__32_List,
                                                                                1,
                                                                                functionArgs_sint_33__32_ListWithNumberList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'uint64ListWithNumberList'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint_36__34_List function_uint_36__34_ListWithNumberList (const GALGAS_numberList & constinArgument_numbers,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint_36__34_List result_result ; // Returned variable
  result_result = GALGAS_uint_36__34_List::constructor_emptyList (SOURCE_FILE ("implementation_types.galgas", 107)) ;
  cEnumerator_numberList enumerator_2938 (constinArgument_numbers, kEnumeration_up) ;
  while (enumerator_2938.hasCurrentObject ()) {
    result_result.addAssign_operation (enumerator_2938.current_location (HERE), function_uint_36__34_OrError (enumerator_2938.current_value (HERE), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 109))  COMMA_SOURCE_FILE ("implementation_types.galgas", 109)) ;
    enumerator_2938.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_uint_36__34_ListWithNumberList [2] = {
  & kTypeDescriptor_GALGAS_numberList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_uint_36__34_ListWithNumberList (C_Compiler * inCompiler,
                                                                               const cObjectArray & inEffectiveParameterArray,
                                                                               const GALGAS_location & /* §§ inErrorLocation */
                                                                               COMMA_LOCATION_ARGS) {
  const GALGAS_numberList operand0 = GALGAS_numberList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  return function_uint_36__34_ListWithNumberList (operand0,
                                                  inCompiler
                                                  COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_uint_36__34_ListWithNumberList ("uint64ListWithNumberList",
                                                                                functionWithGenericHeader_uint_36__34_ListWithNumberList,
                                                                                & kTypeDescriptor_GALGAS_uint_36__34_List,
                                                                                1,
                                                                                functionArgs_uint_36__34_ListWithNumberList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'sint64ListWithNumberList'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_sint_36__34_List function_sint_36__34_ListWithNumberList (const GALGAS_numberList & constinArgument_numbers,
                                                                 C_Compiler * inCompiler
                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_sint_36__34_List result_result ; // Returned variable
  result_result = GALGAS_sint_36__34_List::constructor_emptyList (SOURCE_FILE ("implementation_types.galgas", 114)) ;
  cEnumerator_numberList enumerator_3136 (constinArgument_numbers, kEnumeration_up) ;
  while (enumerator_3136.hasCurrentObject ()) {
    result_result.addAssign_operation (enumerator_3136.current_location (HERE), function_sint_36__34_OrError (enumerator_3136.current_value (HERE), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 116))  COMMA_SOURCE_FILE ("implementation_types.galgas", 116)) ;
    enumerator_3136.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_sint_36__34_ListWithNumberList [2] = {
  & kTypeDescriptor_GALGAS_numberList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_sint_36__34_ListWithNumberList (C_Compiler * inCompiler,
                                                                               const cObjectArray & inEffectiveParameterArray,
                                                                               const GALGAS_location & /* §§ inErrorLocation */
                                                                               COMMA_LOCATION_ARGS) {
  const GALGAS_numberList operand0 = GALGAS_numberList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  return function_sint_36__34_ListWithNumberList (operand0,
                                                  inCompiler
                                                  COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_sint_36__34_ListWithNumberList ("sint64ListWithNumberList",
                                                                                functionWithGenericHeader_sint_36__34_ListWithNumberList,
                                                                                & kTypeDescriptor_GALGAS_sint_36__34_List,
                                                                                1,
                                                                                functionArgs_sint_36__34_ListWithNumberList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'floatListWithNumberList'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_floatList function_floatListWithNumberList (const GALGAS_numberList & constinArgument_numbers,
                                                   C_Compiler * inCompiler
                                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_floatList result_result ; // Returned variable
  result_result = GALGAS_floatList::constructor_emptyList (SOURCE_FILE ("implementation_types.galgas", 121)) ;
  cEnumerator_numberList enumerator_3331 (constinArgument_numbers, kEnumeration_up) ;
  while (enumerator_3331.hasCurrentObject ()) {
    result_result.addAssign_operation (enumerator_3331.current_location (HERE), function_floatOrError (enumerator_3331.current_value (HERE), GALGAS_string::makeEmptyString (), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 123))  COMMA_SOURCE_FILE ("implementation_types.galgas", 123)) ;
    enumerator_3331.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_floatListWithNumberList [2] = {
  & kTypeDescriptor_GALGAS_numberList,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_floatListWithNumberList (C_Compiler * inCompiler,
                                                                        const cObjectArray & inEffectiveParameterArray,
                                                                        const GALGAS_location & /* §§ inErrorLocation */
                                                                        COMMA_LOCATION_ARGS) {
  const GALGAS_numberList operand0 = GALGAS_numberList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  return function_floatListWithNumberList (operand0,
                                           inCompiler
                                           COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_floatListWithNumberList ("floatListWithNumberList",
                                                                         functionWithGenericHeader_floatListWithNumberList,
                                                                         & kTypeDescriptor_GALGAS_floatList,
                                                                         1,
                                                                         functionArgs_floatListWithNumberList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                       Function 'attributeRangeWithNumberList'                                       *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_attributeRange function_attributeRangeWithNumberList (const GALGAS_numberList & constinArgument_numbers,
                                                             const GALGAS_dataType & constinArgument_type,
                                                             C_Compiler * inCompiler
                                                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_attributeRange result_range ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 398)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_range = GALGAS_uint_33__32_AttributeSet::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 399)), function_uint_33__32_ListWithNumberList (constinArgument_numbers, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 399))  COMMA_SOURCE_FILE ("implementation_types.galgas", 399)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 400)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      result_range = GALGAS_sint_33__32_AttributeSet::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 401)), function_sint_33__32_ListWithNumberList (constinArgument_numbers, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 401))  COMMA_SOURCE_FILE ("implementation_types.galgas", 401)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 402)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result_range = GALGAS_uint_36__34_AttributeSet::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 403)), function_uint_36__34_ListWithNumberList (constinArgument_numbers, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 403))  COMMA_SOURCE_FILE ("implementation_types.galgas", 403)) ;
      }else if (kBoolFalse == test_2) {
        const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 404)))).boolEnum () ;
        if (kBoolTrue == test_3) {
          result_range = GALGAS_sint_36__34_AttributeSet::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 405)), function_sint_36__34_ListWithNumberList (constinArgument_numbers, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 405))  COMMA_SOURCE_FILE ("implementation_types.galgas", 405)) ;
        }else if (kBoolFalse == test_3) {
          const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_floatNumber (SOURCE_FILE ("implementation_types.galgas", 406)))).boolEnum () ;
          if (kBoolTrue == test_4) {
            result_range = GALGAS_floatAttributeSet::constructor_new (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 407)), function_floatListWithNumberList (constinArgument_numbers, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 407))  COMMA_SOURCE_FILE ("implementation_types.galgas", 407)) ;
          }else if (kBoolFalse == test_4) {
            inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 409)), GALGAS_string ("internal. Unknown number type")  COMMA_SOURCE_FILE ("implementation_types.galgas", 409)) ;
            result_range.drop () ; // Release error dropped variable
          }
        }
      }
    }
  }
//---
  return result_range ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_attributeRangeWithNumberList [3] = {
  & kTypeDescriptor_GALGAS_numberList,
  & kTypeDescriptor_GALGAS_dataType,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_attributeRangeWithNumberList (C_Compiler * inCompiler,
                                                                             const cObjectArray & inEffectiveParameterArray,
                                                                             const GALGAS_location & /* §§ inErrorLocation */
                                                                             COMMA_LOCATION_ARGS) {
  const GALGAS_numberList operand0 = GALGAS_numberList::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  const GALGAS_dataType operand1 = GALGAS_dataType::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                   inCompiler
                                                                   COMMA_THERE) ;
  return function_attributeRangeWithNumberList (operand0,
                                                operand1,
                                                inCompiler
                                                COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_attributeRangeWithNumberList ("attributeRangeWithNumberList",
                                                                              functionWithGenericHeader_attributeRangeWithNumberList,
                                                                              & kTypeDescriptor_GALGAS_attributeRange,
                                                                              2,
                                                                              functionArgs_attributeRangeWithNumberList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Routine 'multiError'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_multiError (GALGAS_locationList inArgument_locations,
                         GALGAS_string inArgument_errorMessage,
                         C_Compiler * inCompiler
                         COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_locationList enumerator_13566 (inArgument_locations, kEnumeration_up) ;
  while (enumerator_13566.hasCurrentObject ()) {
    inCompiler->emitSemanticError (enumerator_13566.current_location (HERE), inArgument_errorMessage  COMMA_SOURCE_FILE ("implementation_types.galgas", 509)) ;
    enumerator_13566.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Function 'valueList'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_valueList (const GALGAS_enumValues & constinArgument_values,
                                  C_Compiler * /* inCompiler */
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_result ; // Returned variable
  result_result = GALGAS_string::makeEmptyString () ;
  cEnumerator_enumValues enumerator_14891 (constinArgument_values, kEnumeration_up) ;
  while (enumerator_14891.hasCurrentObject ()) {
    result_result.dotAssign_operation (enumerator_14891.current_lkey (HERE).reader_string (SOURCE_FILE ("implementation_types.galgas", 563))  COMMA_SOURCE_FILE ("implementation_types.galgas", 563)) ;
    if (enumerator_14891.hasNextObject ()) {
      result_result.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("implementation_types.galgas", 565)) ;
    }
    enumerator_14891.gotoNextObject () ;
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_valueList [2] = {
  & kTypeDescriptor_GALGAS_enumValues,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_valueList (C_Compiler * inCompiler,
                                                          const cObjectArray & inEffectiveParameterArray,
                                                          const GALGAS_location & /* §§ inErrorLocation */
                                                          COMMA_LOCATION_ARGS) {
  const GALGAS_enumValues operand0 = GALGAS_enumValues::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                       inCompiler
                                                                       COMMA_THERE) ;
  return function_valueList (operand0,
                             inCompiler
                             COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_valueList ("valueList",
                                                           functionWithGenericHeader_valueList,
                                                           & kTypeDescriptor_GALGAS_string,
                                                           1,
                                                           functionArgs_valueList) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                Routine 'verifyEnum'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_verifyEnum (const GALGAS_impType constinArgument_anEnum,
                         C_Compiler * inCompiler
                         COMMA_UNUSED_LOCATION_ARGS) {
  if (constinArgument_anEnum.isValid ()) {
    if (constinArgument_anEnum.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impEnumType) {
      GALGAS_impEnumType cast_20187_realEnum ((cPtr_impEnumType *) constinArgument_anEnum.ptr ()) ;
      if (cast_20187_realEnum.reader_defaultValue (SOURCE_FILE ("implementation_types.galgas", 738)).isValid ()) {
        if (cast_20187_realEnum.reader_defaultValue (SOURCE_FILE ("implementation_types.galgas", 738)).dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_string_5F_class) {
          GALGAS_string_5F_class cast_20261_defaultValue ((cPtr_string_5F_class *) cast_20187_realEnum.reader_defaultValue (SOURCE_FILE ("implementation_types.galgas", 738)).ptr ()) ;
          const enumGalgasBool test_0 = cast_20187_realEnum.reader_valuesMap (SOURCE_FILE ("implementation_types.galgas", 740)).reader_hasKey (cast_20261_defaultValue.reader_value (SOURCE_FILE ("implementation_types.galgas", 740)) COMMA_SOURCE_FILE ("implementation_types.galgas", 740)).operator_not (SOURCE_FILE ("implementation_types.galgas", 740)).boolEnum () ;
          if (kBoolTrue == test_0) {
            inCompiler->emitSemanticError (cast_20261_defaultValue.reader_location (SOURCE_FILE ("implementation_types.galgas", 741)), GALGAS_string ("Default enum value does not match any enum value")  COMMA_SOURCE_FILE ("implementation_types.galgas", 741)) ;
          }
        }
      }
    }else{
      cEnumerator_locationList enumerator_20486 (constinArgument_anEnum.reader_locations (SOURCE_FILE ("implementation_types.galgas", 745)), kEnumeration_up) ;
      while (enumerator_20486.hasCurrentObject ()) {
        inCompiler->emitSemanticError (enumerator_20486.current_location (HERE), GALGAS_string ("Internal, not an @impEnumType")  COMMA_SOURCE_FILE ("implementation_types.galgas", 746)) ;
        enumerator_20486.gotoNextObject () ;
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'checkAndGetIntegerNumber'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_object_5F_t function_checkAndGetIntegerNumber (const GALGAS_lstring & constinArgument_oil_5F_desc,
                                                      const GALGAS_dataType & constinArgument_type,
                                                      const GALGAS_luint_36__34_ & constinArgument_number,
                                                      const GALGAS_bool & constinArgument_signed,
                                                      C_Compiler * inCompiler
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_object_5F_t result_value ; // Returned variable
  const enumGalgasBool test_0 = constinArgument_signed.boolEnum () ;
  if (kBoolTrue == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 807)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      result_value = GALGAS_sint_33__32__5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 808)), constinArgument_number.reader_uint_36__34_ (SOURCE_FILE ("implementation_types.galgas", 808)).reader_sint (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 808)).multiply_operation (GALGAS_sint ((int32_t) 1L).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 808)), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 808))  COMMA_SOURCE_FILE ("implementation_types.galgas", 808)) ;
    }else if (kBoolFalse == test_1) {
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 809)))).boolEnum () ;
      if (kBoolTrue == test_2) {
        result_value = GALGAS_sint_36__34__5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 810)), constinArgument_number.reader_uint_36__34_ (SOURCE_FILE ("implementation_types.galgas", 810)).reader_sint_36__34_ (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 810)).multiply_operation (GALGAS_sint_36__34_ ((int64_t) 1LL).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 810)), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 810))  COMMA_SOURCE_FILE ("implementation_types.galgas", 810)) ;
      }else if (kBoolFalse == test_2) {
        result_value = GALGAS_void::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 812))  COMMA_SOURCE_FILE ("implementation_types.galgas", 812)) ;
        GALGAS_location location_3 (constinArgument_number.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_3, categoryReader_oilType (constinArgument_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 813)).add_operation (GALGAS_string (" expected, got a SINT"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 813))  COMMA_SOURCE_FILE ("implementation_types.galgas", 813)) ;
      }
    }
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 816)))).boolEnum () ;
    if (kBoolTrue == test_4) {
      result_value = GALGAS_sint_33__32__5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 817)), constinArgument_number.reader_uint_36__34_ (SOURCE_FILE ("implementation_types.galgas", 817)).reader_sint (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 817))  COMMA_SOURCE_FILE ("implementation_types.galgas", 817)) ;
    }else if (kBoolFalse == test_4) {
      const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_sint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 818)))).boolEnum () ;
      if (kBoolTrue == test_5) {
        result_value = GALGAS_sint_36__34__5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 819)), constinArgument_number.reader_uint_36__34_ (SOURCE_FILE ("implementation_types.galgas", 819)).reader_sint_36__34_ (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 819))  COMMA_SOURCE_FILE ("implementation_types.galgas", 819)) ;
      }else if (kBoolFalse == test_5) {
        const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 820)))).boolEnum () ;
        if (kBoolTrue == test_6) {
          result_value = GALGAS_uint_33__32__5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 821)), constinArgument_number.reader_uint_36__34_ (SOURCE_FILE ("implementation_types.galgas", 821)).reader_uint (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 821))  COMMA_SOURCE_FILE ("implementation_types.galgas", 821)) ;
        }else if (kBoolFalse == test_6) {
          const enumGalgasBool test_7 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 822)))).boolEnum () ;
          if (kBoolTrue == test_7) {
            result_value = GALGAS_uint_36__34__5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 823)), constinArgument_number.reader_uint_36__34_ (SOURCE_FILE ("implementation_types.galgas", 823))  COMMA_SOURCE_FILE ("implementation_types.galgas", 823)) ;
          }else if (kBoolFalse == test_7) {
            result_value = GALGAS_void::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 825))  COMMA_SOURCE_FILE ("implementation_types.galgas", 825)) ;
            GALGAS_location location_8 (constinArgument_number.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_8, categoryReader_oilType (constinArgument_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 826)).add_operation (GALGAS_string (" expected, got a UINT"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 826))  COMMA_SOURCE_FILE ("implementation_types.galgas", 826)) ;
          }
        }
      }
    }
  }
//---
  return result_value ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_checkAndGetIntegerNumber [5] = {
  & kTypeDescriptor_GALGAS_lstring,
  & kTypeDescriptor_GALGAS_dataType,
  & kTypeDescriptor_GALGAS_luint_36__34_,
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_checkAndGetIntegerNumber (C_Compiler * inCompiler,
                                                                         const cObjectArray & inEffectiveParameterArray,
                                                                         const GALGAS_location & /* §§ inErrorLocation */
                                                                         COMMA_LOCATION_ARGS) {
  const GALGAS_lstring operand0 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  const GALGAS_dataType operand1 = GALGAS_dataType::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                   inCompiler
                                                                   COMMA_THERE) ;
  const GALGAS_luint_36__34_ operand2 = GALGAS_luint_36__34_::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                             inCompiler
                                                                             COMMA_THERE) ;
  const GALGAS_bool operand3 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (3 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_checkAndGetIntegerNumber (operand0,
                                            operand1,
                                            operand2,
                                            operand3,
                                            inCompiler
                                            COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_checkAndGetIntegerNumber ("checkAndGetIntegerNumber",
                                                                          functionWithGenericHeader_checkAndGetIntegerNumber,
                                                                          & kTypeDescriptor_GALGAS_object_5F_t,
                                                                          4,
                                                                          functionArgs_checkAndGetIntegerNumber) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'checkAndGetFloatNumber'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_object_5F_t function_checkAndGetFloatNumber (const GALGAS_lstring & constinArgument_oil_5F_desc,
                                                    const GALGAS_dataType & constinArgument_type,
                                                    const GALGAS_ldouble & constinArgument_number,
                                                    const GALGAS_bool & constinArgument_signed,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_object_5F_t result_value ; // Returned variable
  const enumGalgasBool test_0 = constinArgument_signed.boolEnum () ;
  if (kBoolTrue == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_floatNumber (SOURCE_FILE ("implementation_types.galgas", 838)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      result_value = GALGAS_float_5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 839)), constinArgument_number.reader_double (SOURCE_FILE ("implementation_types.galgas", 839)).multiply_operation (GALGAS_double (1).operator_unary_minus (inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 839)), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 839))  COMMA_SOURCE_FILE ("implementation_types.galgas", 839)) ;
    }else if (kBoolFalse == test_1) {
      result_value = GALGAS_void::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 841))  COMMA_SOURCE_FILE ("implementation_types.galgas", 841)) ;
      GALGAS_location location_2 (constinArgument_number.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, categoryReader_oilType (constinArgument_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 842)).add_operation (GALGAS_string (" expected, got a FLOAT"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 842))  COMMA_SOURCE_FILE ("implementation_types.galgas", 842)) ;
    }
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, constinArgument_type.objectCompare (GALGAS_dataType::constructor_floatNumber (SOURCE_FILE ("implementation_types.galgas", 845)))).boolEnum () ;
    if (kBoolTrue == test_3) {
      result_value = GALGAS_float_5F_class::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 846)), constinArgument_number.reader_double (SOURCE_FILE ("implementation_types.galgas", 846))  COMMA_SOURCE_FILE ("implementation_types.galgas", 846)) ;
    }else if (kBoolFalse == test_3) {
      result_value = GALGAS_void::constructor_new (constinArgument_oil_5F_desc, constinArgument_number.reader_location (SOURCE_FILE ("implementation_types.galgas", 848))  COMMA_SOURCE_FILE ("implementation_types.galgas", 848)) ;
      GALGAS_location location_4 (constinArgument_number.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, categoryReader_oilType (constinArgument_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 849)).add_operation (GALGAS_string (" expected, got a FLOAT"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 849))  COMMA_SOURCE_FILE ("implementation_types.galgas", 849)) ;
    }
  }
//---
  return result_value ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_checkAndGetFloatNumber [5] = {
  & kTypeDescriptor_GALGAS_lstring,
  & kTypeDescriptor_GALGAS_dataType,
  & kTypeDescriptor_GALGAS_ldouble,
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_checkAndGetFloatNumber (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_lstring operand0 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  const GALGAS_dataType operand1 = GALGAS_dataType::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                   inCompiler
                                                                   COMMA_THERE) ;
  const GALGAS_ldouble operand2 = GALGAS_ldouble::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  const GALGAS_bool operand3 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (3 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_checkAndGetFloatNumber (operand0,
                                          operand1,
                                          operand2,
                                          operand3,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_checkAndGetFloatNumber ("checkAndGetFloatNumber",
                                                                        functionWithGenericHeader_checkAndGetFloatNumber,
                                                                        & kTypeDescriptor_GALGAS_object_5F_t,
                                                                        4,
                                                                        functionArgs_checkAndGetFloatNumber) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Routine 'checkTypeForAttribute'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkTypeForAttribute (const GALGAS_implementationObjectMap constinArgument_obj,
                                    const GALGAS_string constinArgument_attributeName,
                                    const GALGAS_dataType constinArgument_expectedType,
                                    C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = constinArgument_obj.reader_hasKey (constinArgument_attributeName COMMA_SOURCE_FILE ("implementation_types.galgas", 858)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_impType var_type ;
    constinArgument_obj.method_get (function_lstringWith (constinArgument_attributeName, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 860)), var_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 860)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_type.reader_type (SOURCE_FILE ("implementation_types.galgas", 861)).objectCompare (constinArgument_expectedType)).boolEnum () ;
    if (kBoolTrue == test_1) {
      cEnumerator_locationList enumerator_24001 (var_type.reader_locations (SOURCE_FILE ("implementation_types.galgas", 862)), kEnumeration_up) ;
      while (enumerator_24001.hasCurrentObject ()) {
        inCompiler->emitSemanticError (enumerator_24001.current_location (HERE), constinArgument_attributeName.add_operation (GALGAS_string (" is a "), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 863)).add_operation (categoryReader_oilType (var_type.reader_type (SOURCE_FILE ("implementation_types.galgas", 863)), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 863)), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 863))  COMMA_SOURCE_FILE ("implementation_types.galgas", 863)) ;
        inCompiler->emitSemanticError (enumerator_24001.current_location (HERE), constinArgument_attributeName.add_operation (GALGAS_string (" should be a "), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 864)).add_operation (categoryReader_oilType (constinArgument_expectedType, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 864)), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 864))  COMMA_SOURCE_FILE ("implementation_types.galgas", 864)) ;
        enumerator_24001.gotoNextObject () ;
      }
    }
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'boolSubAttributes'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_implementationObjectMap function_boolSubAttributes (const GALGAS_implementationObject & constinArgument_obj,
                                                           const GALGAS_string & constinArgument_attributeName,
                                                           const GALGAS_bool & constinArgument_boolValue,
                                                           C_Compiler * inCompiler
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_implementationObjectMap result_subImplementation ; // Returned variable
  result_subImplementation = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_types.galgas", 875)) ;
  const enumGalgasBool test_0 = constinArgument_obj.reader_attributes (SOURCE_FILE ("implementation_types.galgas", 876)).reader_hasKey (constinArgument_attributeName COMMA_SOURCE_FILE ("implementation_types.galgas", 876)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_impType var_type ;
    constinArgument_obj.reader_attributes (SOURCE_FILE ("implementation_types.galgas", 878)).method_get (function_lstringWith (constinArgument_attributeName, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 878)), var_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 878)) ;
    if (var_type.isValid ()) {
      if (var_type.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impBoolType) {
        GALGAS_impBoolType cast_24570_boolType ((cPtr_impBoolType *) var_type.ptr ()) ;
        const enumGalgasBool test_1 = constinArgument_boolValue.boolEnum () ;
        if (kBoolTrue == test_1) {
          result_subImplementation = cast_24570_boolType.reader_trueSubAttributes (SOURCE_FILE ("implementation_types.galgas", 882)) ;
        }else if (kBoolFalse == test_1) {
          result_subImplementation = cast_24570_boolType.reader_falseSubAttributes (SOURCE_FILE ("implementation_types.galgas", 884)) ;
        }
      }
    }
  }
//---
  return result_subImplementation ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_boolSubAttributes [4] = {
  & kTypeDescriptor_GALGAS_implementationObject,
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_bool,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_boolSubAttributes (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & /* §§ inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_implementationObject operand0 = GALGAS_implementationObject::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                           inCompiler
                                                                                           COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_bool operand2 = GALGAS_bool::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                           inCompiler
                                                           COMMA_THERE) ;
  return function_boolSubAttributes (operand0,
                                     operand1,
                                     operand2,
                                     inCompiler
                                     COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_boolSubAttributes ("boolSubAttributes",
                                                                   functionWithGenericHeader_boolSubAttributes,
                                                                   & kTypeDescriptor_GALGAS_implementationObjectMap,
                                                                   3,
                                                                   functionArgs_boolSubAttributes) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'enumSubAttributes'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_implementationObjectMap function_enumSubAttributes (const GALGAS_implementationObject & constinArgument_obj,
                                                           const GALGAS_string & constinArgument_attributeName,
                                                           const GALGAS_string & constinArgument_enumValue,
                                                           C_Compiler * inCompiler
                                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_implementationObjectMap result_subImplementation ; // Returned variable
  result_subImplementation = GALGAS_implementationObjectMap::constructor_emptyMap (SOURCE_FILE ("implementation_types.galgas", 895)) ;
  const enumGalgasBool test_0 = constinArgument_obj.reader_attributes (SOURCE_FILE ("implementation_types.galgas", 896)).reader_hasKey (constinArgument_attributeName COMMA_SOURCE_FILE ("implementation_types.galgas", 896)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_impType var_type ;
    constinArgument_obj.reader_attributes (SOURCE_FILE ("implementation_types.galgas", 898)).method_get (function_lstringWith (constinArgument_attributeName, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 898)), var_type, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 898)) ;
    if (var_type.isValid ()) {
      if (var_type.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_impEnumType) {
        GALGAS_impEnumType cast_25149_enumType ((cPtr_impEnumType *) var_type.ptr ()) ;
        const enumGalgasBool test_1 = cast_25149_enumType.reader_valuesMap (SOURCE_FILE ("implementation_types.galgas", 901)).reader_hasKey (constinArgument_enumValue COMMA_SOURCE_FILE ("implementation_types.galgas", 901)).boolEnum () ;
        if (kBoolTrue == test_1) {
          cast_25149_enumType.reader_valuesMap (SOURCE_FILE ("implementation_types.galgas", 902)).method_get (function_lstringWith (constinArgument_enumValue, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 902)), result_subImplementation, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 902)) ;
        }
      }
    }
  }
//---
  return result_subImplementation ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_enumSubAttributes [4] = {
  & kTypeDescriptor_GALGAS_implementationObject,
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_enumSubAttributes (C_Compiler * inCompiler,
                                                                  const cObjectArray & inEffectiveParameterArray,
                                                                  const GALGAS_location & /* §§ inErrorLocation */
                                                                  COMMA_LOCATION_ARGS) {
  const GALGAS_implementationObject operand0 = GALGAS_implementationObject::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                           inCompiler
                                                                                           COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_string operand2 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (2 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_enumSubAttributes (operand0,
                                     operand1,
                                     operand2,
                                     inCompiler
                                     COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_enumSubAttributes ("enumSubAttributes",
                                                                   functionWithGenericHeader_enumSubAttributes,
                                                                   & kTypeDescriptor_GALGAS_implementationObjectMap,
                                                                   3,
                                                                   functionArgs_enumSubAttributes) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Routine 'checkFilters'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_checkFilters (const GALGAS_implementationObject constinArgument_messageProperty,
                           C_Compiler * inCompiler
                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_implementationObjectMap var_filter = function_enumSubAttributes (constinArgument_messageProperty, GALGAS_string ("FILTER"), GALGAS_string ("MASKEDNEWEQUALSX"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 913)) ;
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MASK"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 914)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 914)) ;
  }
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("X"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 915)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 915)) ;
  }
  var_filter = function_enumSubAttributes (constinArgument_messageProperty, GALGAS_string ("FILTER"), GALGAS_string ("MASKEDNEWDIFFERSX"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 916)) ;
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MASK"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 917)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 917)) ;
  }
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("X"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 918)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 918)) ;
  }
  var_filter = function_enumSubAttributes (constinArgument_messageProperty, GALGAS_string ("FILTER"), GALGAS_string ("MASKEDNEWEQUALSMASKEDOLD"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 919)) ;
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MASK"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 920)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 920)) ;
  }
  var_filter = function_enumSubAttributes (constinArgument_messageProperty, GALGAS_string ("FILTER"), GALGAS_string ("NEWISWITHIN"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 921)) ;
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MIN"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 922)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 922)) ;
  }
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MAX"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 923)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 923)) ;
  }
  var_filter = function_enumSubAttributes (constinArgument_messageProperty, GALGAS_string ("FILTER"), GALGAS_string ("NEWISOUTSIDE"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 924)) ;
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MIN"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 925)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 925)) ;
  }
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("MAX"), GALGAS_dataType::constructor_uint_36__34_Number (SOURCE_FILE ("implementation_types.galgas", 926)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 926)) ;
  }
  var_filter = function_enumSubAttributes (constinArgument_messageProperty, GALGAS_string ("FILTER"), GALGAS_string ("ONEEVERYN"), inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 927)) ;
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("PERIOD"), GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 928)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 928)) ;
  }
  {
  routine_checkTypeForAttribute (var_filter, GALGAS_string ("OFFSET"), GALGAS_dataType::constructor_uint_33__32_Number (SOURCE_FILE ("implementation_types.galgas", 929)), inCompiler  COMMA_SOURCE_FILE ("implementation_types.galgas", 929)) ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Routine 'setDefaultsForType'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

void routine_setDefaultsForType (const GALGAS_implementationObjectMap constinArgument_impObject,
                                 GALGAS_objectAttributes & ioArgument_objectParams,
                                 C_Compiler * inCompiler
                                 COMMA_UNUSED_LOCATION_ARGS) {
  cEnumerator_implementationObjectMap enumerator_27792 (constinArgument_impObject, kEnumeration_up) ;
  while (enumerator_27792.hasCurrentObject ()) {
    if (enumerator_27792.current_type (HERE).isValid ()) {
      if (NULL != dynamic_cast <const cPtr_impAutoDefaultType *> (enumerator_27792.current_type (HERE).ptr ())) {
        GALGAS_impAutoDefaultType cast_27853_defaultType ((cPtr_impAutoDefaultType *) enumerator_27792.current_type (HERE).ptr ()) ;
        callCategoryMethod_setDefault ((const cPtr_impAutoDefaultType *) cast_27853_defaultType.ptr (), ioArgument_objectParams, inCompiler COMMA_SOURCE_FILE ("implementation_types.galgas", 977)) ;
      }
    }
    enumerator_27792.gotoNextObject () ;
  }
}


//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Once function 'emptyLString'                                             *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_lstring onceFunction_emptyLString (C_Compiler * inCompiler
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lstring result_ls ; // Returned variable
  result_ls = GALGAS_lstring::constructor_new (GALGAS_string::makeEmptyString (), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 29))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 29)) ;
//---
  return result_ls ;
}



//---------------------------------------------------------------------------------------------------------------------*
//  Function implementation                                                                                            *
//---------------------------------------------------------------------------------------------------------------------*

static bool gOnceFunctionResultAvailable_emptyLString = false ;
static GALGAS_lstring gOnceFunctionResult_emptyLString ;

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring function_emptyLString (class C_Compiler * inCompiler
              COMMA_LOCATION_ARGS) {
  if (! gOnceFunctionResultAvailable_emptyLString) {
    gOnceFunctionResult_emptyLString = onceFunction_emptyLString (inCompiler COMMA_THERE) ;
    gOnceFunctionResultAvailable_emptyLString = true ;
  }
  return gOnceFunctionResult_emptyLString ;
}

//---------------------------------------------------------------------------------------------------------------------*

static void releaseOnceFunctionResult_emptyLString (void) {
  gOnceFunctionResult_emptyLString.drop () ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_PrologueEpilogue gEpilogueForOnceFunction_emptyLString (NULL,
                                                          releaseOnceFunctionResult_emptyLString) ;

//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_emptyLString [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_emptyLString (C_Compiler * inCompiler,
                                                             const cObjectArray & /* inEffectiveParameterArray */,
                                                             const GALGAS_location & /* inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  return function_emptyLString (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_emptyLString ("emptyLString",
                                                              functionWithGenericHeader_emptyLString,
                                                              & kTypeDescriptor_GALGAS_lstring,
                                                              0,
                                                              functionArgs_emptyLString) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'emptyObject'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_objectAttributes function_emptyObject (C_Compiler * /* inCompiler */
                                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_objectAttributes result_result ; // Returned variable
  result_result = GALGAS_objectAttributes::constructor_new (GALGAS_identifierMap::constructor_emptyMap (SOURCE_FILE ("goil_basic_types.galgas", 52))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 52)) ;
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_emptyObject [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_emptyObject (C_Compiler * inCompiler,
                                                            const cObjectArray & /* inEffectiveParameterArray */,
                                                            const GALGAS_location & /* inErrorLocation */
                                                            COMMA_LOCATION_ARGS) {
  return function_emptyObject (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_emptyObject ("emptyObject",
                                                             functionWithGenericHeader_emptyObject,
                                                             & kTypeDescriptor_GALGAS_objectAttributes,
                                                             0,
                                                             functionArgs_emptyObject) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                         Function 'multipleAttributeOrError'                                         *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_identifierList function_multipleAttributeOrError (const GALGAS_object_5F_t & constinArgument_t,
                                                         const GALGAS_string & constinArgument_att,
                                                         C_Compiler * inCompiler
                                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_identifierList result_v ; // Returned variable
  result_v = GALGAS_identifierList::constructor_emptyList (SOURCE_FILE ("goil_basic_types.galgas", 71)) ;
  if (constinArgument_t.isValid ()) {
    if (constinArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_multipleAttribute) {
      GALGAS_multipleAttribute cast_1426_l ((cPtr_multipleAttribute *) constinArgument_t.ptr ()) ;
      result_v = cast_1426_l.reader_items (SOURCE_FILE ("goil_basic_types.galgas", 74)) ;
    }else{
      inCompiler->emitSemanticError (constinArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 76)), GALGAS_string ("Internal error, ").add_operation (constinArgument_att, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 76)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 76))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 76)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_multipleAttributeOrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_multipleAttributeOrError (C_Compiler * inCompiler,
                                                                         const cObjectArray & inEffectiveParameterArray,
                                                                         const GALGAS_location & /* §§ inErrorLocation */
                                                                         COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_multipleAttributeOrError (operand0,
                                            operand1,
                                            inCompiler
                                            COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_multipleAttributeOrError ("multipleAttributeOrError",
                                                                          functionWithGenericHeader_multipleAttributeOrError,
                                                                          & kTypeDescriptor_GALGAS_identifierList,
                                                                          2,
                                                                          functionArgs_multipleAttributeOrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'boolAttributeOrError'                                           *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_bool function_boolAttributeOrError (GALGAS_object_5F_t inArgument_t,
                                           GALGAS_string inArgument_att,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_bool result_v ; // Returned variable
  result_v = GALGAS_bool (false) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_boolAttribute) {
      GALGAS_boolAttribute cast_1762_attribute ((cPtr_boolAttribute *) inArgument_t.ptr ()) ;
      result_v = cast_1762_attribute.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 92)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 94)), GALGAS_string ("Internal error, ").add_operation (inArgument_att, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 94)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 94))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 94)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_boolAttributeOrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_boolAttributeOrError (C_Compiler * inCompiler,
                                                                     const cObjectArray & inEffectiveParameterArray,
                                                                     const GALGAS_location & /* §§ inErrorLocation */
                                                                     COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_boolAttributeOrError (operand0,
                                        operand1,
                                        inCompiler
                                        COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_boolAttributeOrError ("boolAttributeOrError",
                                                                      functionWithGenericHeader_boolAttributeOrError,
                                                                      & kTypeDescriptor_GALGAS_bool,
                                                                      2,
                                                                      functionArgs_boolAttributeOrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                             Function 'uint32_or_error'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint function_uint_33__32__5F_or_5F_error (GALGAS_object_5F_t inArgument_t,
                                                  GALGAS_string inArgument_att,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint result_v ; // Returned variable
  result_v = GALGAS_uint ((uint32_t) 0U) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_uint_33__32__5F_class) {
      GALGAS_uint_33__32__5F_class cast_2283_ui ((cPtr_uint_33__32__5F_class *) inArgument_t.ptr ()) ;
      result_v = cast_2283_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 123)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 125)), inArgument_att.add_operation (GALGAS_string (" is not defined"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 125))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 125)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_uint_33__32__5F_or_5F_error [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_uint_33__32__5F_or_5F_error (C_Compiler * inCompiler,
                                                                            const cObjectArray & inEffectiveParameterArray,
                                                                            const GALGAS_location & /* §§ inErrorLocation */
                                                                            COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_uint_33__32__5F_or_5F_error (operand0,
                                               operand1,
                                               inCompiler
                                               COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_uint_33__32__5F_or_5F_error ("uint32_or_error",
                                                                             functionWithGenericHeader_uint_33__32__5F_or_5F_error,
                                                                             & kTypeDescriptor_GALGAS_uint,
                                                                             2,
                                                                             functionArgs_uint_33__32__5F_or_5F_error) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'uint32OrError'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint function_uint_33__32_OrError (GALGAS_object_5F_t inArgument_t,
                                          GALGAS_string inArgument_att,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint result_v ; // Returned variable
  result_v = GALGAS_uint ((uint32_t) 0U) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_uint_33__32__5F_class) {
      GALGAS_uint_33__32__5F_class cast_2482_ui ((cPtr_uint_33__32__5F_class *) inArgument_t.ptr ()) ;
      result_v = cast_2482_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 136)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 138)), inArgument_att.add_operation (GALGAS_string (" is not defined"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 138))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 138)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_uint_33__32_OrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_uint_33__32_OrError (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_uint_33__32_OrError (operand0,
                                       operand1,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_uint_33__32_OrError ("uint32OrError",
                                                                     functionWithGenericHeader_uint_33__32_OrError,
                                                                     & kTypeDescriptor_GALGAS_uint,
                                                                     2,
                                                                     functionArgs_uint_33__32_OrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'sint32OrError'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_sint function_sint_33__32_OrError (GALGAS_object_5F_t inArgument_t,
                                          GALGAS_string inArgument_att,
                                          C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_sint result_v ; // Returned variable
  result_v = GALGAS_sint ((int32_t) 0L) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_sint_33__32__5F_class) {
      GALGAS_sint_33__32__5F_class cast_2820_ui ((cPtr_sint_33__32__5F_class *) inArgument_t.ptr ()) ;
      result_v = cast_2820_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 156)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 158)), inArgument_att.add_operation (GALGAS_string (" is not defined"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 158))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 158)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_sint_33__32_OrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_sint_33__32_OrError (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_sint_33__32_OrError (operand0,
                                       operand1,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_sint_33__32_OrError ("sint32OrError",
                                                                     functionWithGenericHeader_sint_33__32_OrError,
                                                                     & kTypeDescriptor_GALGAS_sint,
                                                                     2,
                                                                     functionArgs_sint_33__32_OrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'uint64OrError'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint_36__34_ function_uint_36__34_OrError (GALGAS_object_5F_t inArgument_t,
                                                  GALGAS_string inArgument_att,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_uint_36__34_ result_v ; // Returned variable
  result_v = GALGAS_uint_36__34_ ((uint64_t) 0ULL) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_uint_36__34__5F_class) {
      GALGAS_uint_36__34__5F_class cast_3158_ui ((cPtr_uint_36__34__5F_class *) inArgument_t.ptr ()) ;
      result_v = cast_3158_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 176)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 178)), GALGAS_string ("Internal error, ").add_operation (inArgument_att, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 178)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 178))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 178)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_uint_36__34_OrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_uint_36__34_OrError (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_uint_36__34_OrError (operand0,
                                       operand1,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_uint_36__34_OrError ("uint64OrError",
                                                                     functionWithGenericHeader_uint_36__34_OrError,
                                                                     & kTypeDescriptor_GALGAS_uint_36__34_,
                                                                     2,
                                                                     functionArgs_uint_36__34_OrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'luint64OrError'                                              *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint_36__34_ function_luint_36__34_OrError (GALGAS_object_5F_t inArgument_t,
                                                    GALGAS_string inArgument_att,
                                                    C_Compiler * inCompiler
                                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_luint_36__34_ result_v ; // Returned variable
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_uint_36__34__5F_class) {
      GALGAS_uint_36__34__5F_class cast_3376_ui ((cPtr_uint_36__34__5F_class *) inArgument_t.ptr ()) ;
      result_v = GALGAS_luint_36__34_::constructor_new (cast_3376_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 188)), cast_3376_ui.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 188))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 188)) ;
    }else{
      result_v = GALGAS_luint_36__34_::constructor_new (GALGAS_uint_36__34_ ((uint64_t) 0ULL), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 190))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 190)) ;
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 191)), GALGAS_string ("Internal error, ").add_operation (inArgument_att, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 191)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 191))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 191)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_luint_36__34_OrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_luint_36__34_OrError (C_Compiler * inCompiler,
                                                                     const cObjectArray & inEffectiveParameterArray,
                                                                     const GALGAS_location & /* §§ inErrorLocation */
                                                                     COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_luint_36__34_OrError (operand0,
                                        operand1,
                                        inCompiler
                                        COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_luint_36__34_OrError ("luint64OrError",
                                                                      functionWithGenericHeader_luint_36__34_OrError,
                                                                      & kTypeDescriptor_GALGAS_luint_36__34_,
                                                                      2,
                                                                      functionArgs_luint_36__34_OrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'sint64OrError'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_sint_36__34_ function_sint_36__34_OrError (GALGAS_object_5F_t inArgument_t,
                                                  GALGAS_string inArgument_att,
                                                  C_Compiler * inCompiler
                                                  COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_sint_36__34_ result_v ; // Returned variable
  result_v = GALGAS_sint_36__34_ ((int64_t) 0LL) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_sint_36__34__5F_class) {
      GALGAS_sint_36__34__5F_class cast_3818_ui ((cPtr_sint_36__34__5F_class *) inArgument_t.ptr ()) ;
      result_v = cast_3818_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 209)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 211)), GALGAS_string ("Internal error, ").add_operation (inArgument_att, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 211)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 211))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 211)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_sint_36__34_OrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_sint_36__34_OrError (C_Compiler * inCompiler,
                                                                    const cObjectArray & inEffectiveParameterArray,
                                                                    const GALGAS_location & /* §§ inErrorLocation */
                                                                    COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_sint_36__34_OrError (operand0,
                                       operand1,
                                       inCompiler
                                       COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_sint_36__34_OrError ("sint64OrError",
                                                                     functionWithGenericHeader_sint_36__34_OrError,
                                                                     & kTypeDescriptor_GALGAS_sint_36__34_,
                                                                     2,
                                                                     functionArgs_sint_36__34_OrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'floatOrError'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_double function_floatOrError (GALGAS_object_5F_t inArgument_t,
                                     GALGAS_string inArgument_att,
                                     C_Compiler * inCompiler
                                     COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_double result_v ; // Returned variable
  result_v = GALGAS_double (0) ;
  if (inArgument_t.isValid ()) {
    if (inArgument_t.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_float_5F_class) {
      GALGAS_float_5F_class cast_4168_ui ((cPtr_float_5F_class *) inArgument_t.ptr ()) ;
      result_v = cast_4168_ui.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 229)) ;
    }else{
      inCompiler->emitSemanticError (inArgument_t.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 231)), GALGAS_string ("Internal error, ").add_operation (inArgument_att, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 231)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 231))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 231)) ;
    }
  }
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_floatOrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_floatOrError (C_Compiler * inCompiler,
                                                             const cObjectArray & inEffectiveParameterArray,
                                                             const GALGAS_location & /* §§ inErrorLocation */
                                                             COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_floatOrError (operand0,
                                operand1,
                                inCompiler
                                COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_floatOrError ("floatOrError",
                                                              functionWithGenericHeader_floatOrError,
                                                              & kTypeDescriptor_GALGAS_double,
                                                              2,
                                                              functionArgs_floatOrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'stringAttributeOrError'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring function_stringAttributeOrError (const GALGAS_object_5F_t & constinArgument_attribute,
                                                const GALGAS_string & constinArgument_attributeName,
                                                C_Compiler * inCompiler
                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lstring result_result ; // Returned variable
  result_result = function_emptyLString (inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 253)) ;
  if (constinArgument_attribute.isValid ()) {
    if (constinArgument_attribute.dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_stringAttribute) {
      GALGAS_stringAttribute cast_4720_attribute ((cPtr_stringAttribute *) constinArgument_attribute.ptr ()) ;
      result_result = GALGAS_lstring::constructor_new (cast_4720_attribute.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 256)), cast_4720_attribute.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 256))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 256)) ;
    }else{
      inCompiler->emitSemanticError (constinArgument_attribute.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 258)), GALGAS_string ("Internal error ").add_operation (constinArgument_attributeName, inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 258)).add_operation (GALGAS_string (" has a wrong datatype"), inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 258))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 258)) ;
    }
  }
//---
  return result_result ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_stringAttributeOrError [3] = {
  & kTypeDescriptor_GALGAS_object_5F_t,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_stringAttributeOrError (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_object_5F_t operand0 = GALGAS_object_5F_t::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                         inCompiler
                                                                         COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_stringAttributeOrError (operand0,
                                          operand1,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_stringAttributeOrError ("stringAttributeOrError",
                                                                        functionWithGenericHeader_stringAttributeOrError,
                                                                        & kTypeDescriptor_GALGAS_lstring,
                                                                        2,
                                                                        functionArgs_stringAttributeOrError) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'empty_lstring'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring function_empty_5F_lstring (C_Compiler * inCompiler
                                          COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_lstring result_ls ; // Returned variable
  result_ls = GALGAS_lstring::constructor_new (GALGAS_string::makeEmptyString (), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 428))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 428)) ;
//---
  return result_ls ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_empty_5F_lstring [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_empty_5F_lstring (C_Compiler * inCompiler,
                                                                 const cObjectArray & /* inEffectiveParameterArray */,
                                                                 const GALGAS_location & /* inErrorLocation */
                                                                 COMMA_LOCATION_ARGS) {
  return function_empty_5F_lstring (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_empty_5F_lstring ("empty_lstring",
                                                                  functionWithGenericHeader_empty_5F_lstring,
                                                                  & kTypeDescriptor_GALGAS_lstring,
                                                                  0,
                                                                  functionArgs_empty_5F_lstring) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Function 'void_obj'                                                 *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_object_5F_t function_void_5F_obj (C_Compiler * inCompiler
                                         COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_object_5F_t result_v ; // Returned variable
  result_v = GALGAS_void::constructor_new (function_emptyLString (inCompiler COMMA_SOURCE_FILE ("goil_basic_types.galgas", 433)), GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 433))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 433)) ;
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_void_5F_obj [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_void_5F_obj (C_Compiler * inCompiler,
                                                            const cObjectArray & /* inEffectiveParameterArray */,
                                                            const GALGAS_location & /* inErrorLocation */
                                                            COMMA_LOCATION_ARGS) {
  return function_void_5F_obj (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_void_5F_obj ("void_obj",
                                                             functionWithGenericHeader_void_5F_obj,
                                                             & kTypeDescriptor_GALGAS_object_5F_t,
                                                             0,
                                                             functionArgs_void_5F_obj) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                              Function 'luint64_value'                                               *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_luint_36__34_ function_luint_36__34__5F_value (const GALGAS_uint_36__34__5F_class & constinArgument_c,
                                                      C_Compiler * /* inCompiler */
                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_luint_36__34_ result_v ; // Returned variable
  result_v = GALGAS_luint_36__34_::constructor_new (constinArgument_c.reader_value (SOURCE_FILE ("goil_basic_types.galgas", 627)), constinArgument_c.reader_location (SOURCE_FILE ("goil_basic_types.galgas", 627))  COMMA_SOURCE_FILE ("goil_basic_types.galgas", 627)) ;
//---
  return result_v ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_luint_36__34__5F_value [2] = {
  & kTypeDescriptor_GALGAS_uint_36__34__5F_class,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_luint_36__34__5F_value (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_uint_36__34__5F_class operand0 = GALGAS_uint_36__34__5F_class::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                                             inCompiler
                                                                                             COMMA_THERE) ;
  return function_luint_36__34__5F_value (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_luint_36__34__5F_value ("luint64_value",
                                                                        functionWithGenericHeader_luint_36__34__5F_value,
                                                                        & kTypeDescriptor_GALGAS_luint_36__34_,
                                                                        1,
                                                                        functionArgs_luint_36__34__5F_value) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                               Function 'projectName'                                                *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_projectName (C_Compiler * inCompiler
                                    COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_directory ; // Returned variable
  result_directory = GALGAS_string::constructor_stringWithSourceFilePath (inCompiler  COMMA_SOURCE_FILE ("goil_routines.galgas", 4)).reader_stringByDeletingPathExtension (SOURCE_FILE ("goil_routines.galgas", 4)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_string (gOption_goil_5F_options_project_5F_dir.reader_value ()).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_directory = GALGAS_string (gOption_goil_5F_options_project_5F_dir.reader_value ()) ;
  }
//---
  return result_directory ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_projectName [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_projectName (C_Compiler * inCompiler,
                                                            const cObjectArray & /* inEffectiveParameterArray */,
                                                            const GALGAS_location & /* inErrorLocation */
                                                            COMMA_LOCATION_ARGS) {
  return function_projectName (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_projectName ("projectName",
                                                             functionWithGenericHeader_projectName,
                                                             & kTypeDescriptor_GALGAS_string,
                                                             0,
                                                             functionArgs_projectName) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                 Function 'oil_dir'                                                  *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_oil_5F_dir (C_Compiler * inCompiler
                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_dir ; // Returned variable
  result_dir = GALGAS_string::constructor_stringWithSourceFilePath (inCompiler  COMMA_SOURCE_FILE ("goil_routines.galgas", 11)).reader_stringByDeletingLastPathComponent (SOURCE_FILE ("goil_routines.galgas", 11)) ;
//---
  return result_dir ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_oil_5F_dir [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_oil_5F_dir (C_Compiler * inCompiler,
                                                           const cObjectArray & /* inEffectiveParameterArray */,
                                                           const GALGAS_location & /* inErrorLocation */
                                                           COMMA_LOCATION_ARGS) {
  return function_oil_5F_dir (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_oil_5F_dir ("oil_dir",
                                                            functionWithGenericHeader_oil_5F_dir,
                                                            & kTypeDescriptor_GALGAS_string,
                                                            0,
                                                            functionArgs_oil_5F_dir) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   Function 'arch'                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_arch (C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_arch_5F_name ; // Returned variable
  GALGAS_stringlist var_components = GALGAS_string (gOption_goil_5F_options_target_5F_platform.reader_value ()).reader_componentsSeparatedByString (GALGAS_string ("/") COMMA_SOURCE_FILE ("goil_routines.galgas", 19)) ;
  var_components.method_first (result_arch_5F_name, inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 20)) ;
//---
  return result_arch_5F_name ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_arch [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_arch (C_Compiler * inCompiler,
                                                     const cObjectArray & /* inEffectiveParameterArray */,
                                                     const GALGAS_location & /* inErrorLocation */
                                                     COMMA_LOCATION_ARGS) {
  return function_arch (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_arch ("arch",
                                                      functionWithGenericHeader_arch,
                                                      & kTypeDescriptor_GALGAS_string,
                                                      0,
                                                      functionArgs_arch) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                   Function 'chip'                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_chip (C_Compiler * inCompiler
                             COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_chip_5F_name ; // Returned variable
  GALGAS_stringlist var_components = GALGAS_string (gOption_goil_5F_options_target_5F_platform.reader_value ()).reader_componentsSeparatedByString (GALGAS_string ("/") COMMA_SOURCE_FILE ("goil_routines.galgas", 28)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, var_components.reader_length (SOURCE_FILE ("goil_routines.galgas", 29)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_chip_5F_name = var_components.reader_mValueAtIndex (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 30)) ;
  }else if (kBoolFalse == test_0) {
    result_chip_5F_name = GALGAS_string::makeEmptyString () ;
  }
//---
  return result_chip_5F_name ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_chip [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_chip (C_Compiler * inCompiler,
                                                     const cObjectArray & /* inEffectiveParameterArray */,
                                                     const GALGAS_location & /* inErrorLocation */
                                                     COMMA_LOCATION_ARGS) {
  return function_chip (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_chip ("chip",
                                                      functionWithGenericHeader_chip,
                                                      & kTypeDescriptor_GALGAS_string,
                                                      0,
                                                      functionArgs_chip) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                                  Function 'board'                                                   *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_board (C_Compiler * inCompiler
                              COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_board_5F_name ; // Returned variable
  GALGAS_stringlist var_components = GALGAS_string (gOption_goil_5F_options_target_5F_platform.reader_value ()).reader_componentsSeparatedByString (GALGAS_string ("/") COMMA_SOURCE_FILE ("goil_routines.galgas", 40)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsStrictSup, var_components.reader_length (SOURCE_FILE ("goil_routines.galgas", 41)).objectCompare (GALGAS_uint ((uint32_t) 2U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_board_5F_name = var_components.reader_mValueAtIndex (GALGAS_uint ((uint32_t) 2U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 42)) ;
  }else if (kBoolFalse == test_0) {
    result_board_5F_name = GALGAS_string::makeEmptyString () ;
  }
//---
  return result_board_5F_name ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_board [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_board (C_Compiler * inCompiler,
                                                      const cObjectArray & /* inEffectiveParameterArray */,
                                                      const GALGAS_location & /* inErrorLocation */
                                                      COMMA_LOCATION_ARGS) {
  return function_board (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_board ("board",
                                                       functionWithGenericHeader_board,
                                                       & kTypeDescriptor_GALGAS_string,
                                                       0,
                                                       functionArgs_board) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                            Function 'add_path_component'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_add_5F_path_5F_component (GALGAS_string inArgument_path,
                                                 GALGAS_string inArgument_component,
                                                 C_Compiler * inCompiler
                                                 COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_new_5F_path ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, inArgument_path.reader_characterAtIndex (inArgument_path.reader_length (SOURCE_FILE ("goil_routines.galgas", 55)).substract_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 55)), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 55)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_new_5F_path = inArgument_path.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 56)).add_operation (inArgument_component, inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 56)) ;
  }else if (kBoolFalse == test_0) {
    result_new_5F_path = inArgument_path.add_operation (inArgument_component, inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 58)) ;
  }
//---
  return result_new_5F_path ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_add_5F_path_5F_component [3] = {
  & kTypeDescriptor_GALGAS_string,
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_add_5F_path_5F_component (C_Compiler * inCompiler,
                                                                         const cObjectArray & inEffectiveParameterArray,
                                                                         const GALGAS_location & /* §§ inErrorLocation */
                                                                         COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  const GALGAS_string operand1 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_add_5F_path_5F_component (operand0,
                                            operand1,
                                            inCompiler
                                            COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_add_5F_path_5F_component ("add_path_component",
                                                                          functionWithGenericHeader_add_5F_path_5F_component,
                                                                          & kTypeDescriptor_GALGAS_string,
                                                                          2,
                                                                          functionArgs_add_5F_path_5F_component) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                          Function 'rootTemplatesDirectory'                                          *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_rootTemplatesDirectory (C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_templateDirectory ; // Returned variable
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, GALGAS_string (gOption_goil_5F_options_template_5F_dir.reader_value ()).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_templateDirectory = GALGAS_string (gOption_goil_5F_options_template_5F_dir.reader_value ()) ;
  }else if (kBoolFalse == test_0) {
    GALGAS_string var_env = GALGAS_string::constructor_stringWithEnvironmentVariableOrEmpty (GALGAS_string ("GOIL_TEMPLATES")  COMMA_SOURCE_FILE ("goil_routines.galgas", 67)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_env.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
    if (kBoolTrue == test_1) {
      result_templateDirectory = var_env ;
    }else if (kBoolFalse == test_1) {
      inCompiler->emitSemanticError (GALGAS_location::constructor_here (inCompiler  COMMA_SOURCE_FILE ("goil_routines.galgas", 71)), GALGAS_string ("The templates path is not set. Use --templates option or set the GOIL_TEMPLATES environment variable")  COMMA_SOURCE_FILE ("goil_routines.galgas", 71)) ;
      result_templateDirectory.drop () ; // Release error dropped variable
    }
  }
  result_templateDirectory = result_templateDirectory.reader_unixPathWithNativePath (SOURCE_FILE ("goil_routines.galgas", 74)) ;
  result_templateDirectory = result_templateDirectory.reader_stringByStandardizingPath (SOURCE_FILE ("goil_routines.galgas", 75)) ;
  const enumGalgasBool test_2 = GALGAS_bool (kIsNotEqual, result_templateDirectory.reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 76)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
  if (kBoolTrue == test_2) {
    GALGAS_string var_currentDirectory = GALGAS_string::constructor_stringWithCurrentDirectory (SOURCE_FILE ("goil_routines.galgas", 77)) ;
    result_templateDirectory = var_currentDirectory.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 78)).add_operation (result_templateDirectory, inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 78)) ;
    result_templateDirectory = result_templateDirectory.reader_stringByStandardizingPath (SOURCE_FILE ("goil_routines.galgas", 79)) ;
  }
//---
  return result_templateDirectory ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_rootTemplatesDirectory [1] = {
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_rootTemplatesDirectory (C_Compiler * inCompiler,
                                                                       const cObjectArray & /* inEffectiveParameterArray */,
                                                                       const GALGAS_location & /* inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  return function_rootTemplatesDirectory (inCompiler COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_rootTemplatesDirectory ("rootTemplatesDirectory",
                                                                        functionWithGenericHeader_rootTemplatesDirectory,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        0,
                                                                        functionArgs_rootTemplatesDirectory) ;

//---------------------------------------------------------------------------------------------------------------------*
//                                                                                                                     *
//                                           Function 'templates_directory'                                            *
//                                                                                                                     *
//---------------------------------------------------------------------------------------------------------------------*

GALGAS_string function_templates_5F_directory (GALGAS_string inArgument_prefix,
                                               C_Compiler * inCompiler
                                               COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_temp_5F_dir ; // Returned variable
  result_temp_5F_dir = function_rootTemplatesDirectory (inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 84)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, result_temp_5F_dir.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_temp_5F_dir = function_add_5F_path_5F_component (result_temp_5F_dir, inArgument_prefix, inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 86)) ;
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, result_temp_5F_dir.reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 88)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_string var_curdir = GALGAS_string::constructor_stringWithCurrentDirectory (SOURCE_FILE ("goil_routines.galgas", 89)) ;
      const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, result_temp_5F_dir.reader_characterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 90)).objectCompare (GALGAS_char (TO_UNICODE (46)))).operator_and (GALGAS_bool (kIsEqual, result_temp_5F_dir.reader_characterAtIndex (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 90)).objectCompare (GALGAS_char (TO_UNICODE (47)))) COMMA_SOURCE_FILE ("goil_routines.galgas", 90)).boolEnum () ;
      if (kBoolTrue == test_2) {
        result_temp_5F_dir = result_temp_5F_dir.reader_stringByRemovingCharacterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 91)).reader_stringByRemovingCharacterAtIndex (GALGAS_uint ((uint32_t) 0U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 91)) ;
      }
      result_temp_5F_dir = var_curdir.add_operation (GALGAS_string ("/"), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 93)).add_operation (result_temp_5F_dir, inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 93)) ;
    }
    const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, result_temp_5F_dir.reader_characterAtIndex (result_temp_5F_dir.reader_length (SOURCE_FILE ("goil_routines.galgas", 95)).substract_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 95)), inCompiler COMMA_SOURCE_FILE ("goil_routines.galgas", 95)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
    if (kBoolTrue == test_3) {
      result_temp_5F_dir.dotAssign_operation (GALGAS_string ("/")  COMMA_SOURCE_FILE ("goil_routines.galgas", 96)) ;
    }
  }
//---
  return result_temp_5F_dir ;
}


//---------------------------------------------------------------------------------------------------------------------*
//  Function introspection                                                                                             *
//---------------------------------------------------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_templates_5F_directory [2] = {
  & kTypeDescriptor_GALGAS_string,
  NULL
} ;

//---------------------------------------------------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_templates_5F_directory (C_Compiler * inCompiler,
                                                                       const cObjectArray & inEffectiveParameterArray,
                                                                       const GALGAS_location & /* §§ inErrorLocation */
                                                                       COMMA_LOCATION_ARGS) {
  const GALGAS_string operand0 = GALGAS_string::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                               inCompiler
                                                               COMMA_THERE) ;
  return function_templates_5F_directory (operand0,
                                          inCompiler
                                          COMMA_THERE).reader_object (THERE) ;
}

//---------------------------------------------------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_templates_5F_directory ("templates_directory",
                                                                        functionWithGenericHeader_templates_5F_directory,
                                                                        & kTypeDescriptor_GALGAS_string,
                                                                        1,
                                                                        functionArgs_templates_5F_directory) ;

