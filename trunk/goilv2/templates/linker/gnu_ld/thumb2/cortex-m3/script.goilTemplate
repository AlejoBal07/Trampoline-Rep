ENTRY (Startup)
/* SEARCH_DIR(.) */

MEMORY
{
  rom (rx)  : org = 0x40000000, len = 32K
  ram (rw)  : org = 0x81000000, len = 200K
}


EXTERN(__cs3_reset_cortex_m)
EXTERN(__cs3_interrupt_vector_cortex_m)
EXTERN(__cs3_start_c main __cs3_stack __cs3_stack_size __cs3_heap_end)

PROVIDE(__cs3_stack = __cs3_region_start_ram + __cs3_region_size_ram);
PROVIDE(__cs3_stack_size = __cs3_region_start_ram + __cs3_region_size_ram - _end);
PROVIDE(__cs3_heap_start = _end);
PROVIDE(__cs3_heap_end = __cs3_region_start_ram + __cs3_region_size_ram);



SECTIONS {
  .vectbl : {
    *(.vectbl);
    . = ALIGN(4);
  } > rom
}

SECTIONS
{
  /*
   * code and consts of the operating system (Trampoline).
   * this section is not accessible from an untrusted process
   */
  . = ALIGN(4);
  ostext : {
    *(.osCode)
  } > rom

  . = ALIGN(4);
  osconst : {
    *(.osConst)
  } > rom
  
  /*
   * remaining .text (ie no section given)
   */
  . = ALIGN(4);
  text_garbage : {
    *(.text)
    *(.glue_7)
    *(.glue_7t)
  } > rom

  /*
   * vars of the operating system (Trampoline)
   */
  . = ALIGN(4);
  osvars : {
    *(.osVar)
    *(.stacks) /* TODO : is it the best place ? */
  } > ram

  /*
   * code and consts of the processes of the applications
   */
  . = ALIGN(16);
  apptext : { 
    __SEG_START_APP_CODE_CONST_RGN = .;
    /* Sections for code of tasks and ISR */%
foreach PROCESSES do
%
    *(.% !PROCESSKIND %_% !NAME %Code)
%
end foreach
%
    *(.osApiCode)   /* API functions    */
    *(.osApiConst)  /* API constants    */
    *(.rodata)      /* litteral strings */
  } > rom
  
  .=ALIGN(16);
  appconst  : {
/* Sections for const of tasks and ISR */
%
foreach PROCESSES do
 for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
  for SECTION_KIND in "_CONST_","_CALIB_","_CARTO_","_CONFIG_DATA_" do
%      *(.% !PROCESSKIND %_% !NAME %_SEC% !SECTION_KIND !DATA_SIZE %)
%
  end for
 end for
end foreach
%    
    . = ALIGN(16);
    __SEG_STOP_APP_CODE_CONST_RGN = . - 1;
  } > rom
  
  /*
   * bss data
   */
   /*
   .=ALIGN(16);
  .bss  : {
    *(.bss)
    *(COMMON)
  } > ram
  */

  /*
   * private data of processes
   */
  procvars : {
%
foreach PROCESSES do
%    __SEG_START_% !PROCESSKIND %_% !NAME %_VAR_RGN = .;
/* Initialized variables section of % !PROCESSKIND % % !NAME % */
%
  for DATA_SIZE in "32BIT","16BIT","8BIT","BOOLEAN","UNSPECIFIED" do
    for SECTION_KIND in "_NOINIT_","_POWER_ON_INIT_","_FAST_","_" do
%    *(.% !PROCESSKIND %_% !NAME %_SEC_VAR% !SECTION_KIND !DATA_SIZE %)
%
    end for
  end for
%    __SEG_END_% !PROCESSKIND %_% !NAME %_VAR_RGN = ALIGN(16) - 1;
%
end foreach
%  
  } > ram

  /*
   * stack of processes
   */
  procstack : {
%
foreach PROCESSES do %
  /* Section of stack of % !PROCESSKIND % % !NAME %  */
    __SEG_START_% !PROCESSKIND %_% !NAME %_STACK_RGN = .;
    *(.% !PROCESSKIND %_% !NAME %Stack)
    __SEG_END_% !PROCESSKIND %_% !NAME %_STACK_RGN = ALIGN(16) - 1;
%
end foreach
%
  } >ram

  /*
   * os application data
   */
  appvars : {
/* $APP_VAR$ */
  } > ram
  
  /*
   * garbage
   */
  data_garbage : {
    *(.data)
  } > ram
  
  .comment : {
    *(.comment) 
  } > ram
  
  . = ALIGN(4);
  debug : {
    *(.debug);
    . = ALIGN(4);
    *(.debug_srcinfo);
    . = ALIGN(4);
    *(.debug_sfnames);
    . = ALIGN(4);
    *(.debug_aranges*);
    . = ALIGN(4);
    *(.debug_pubnames*);
    . = ALIGN(4);
    *(.debug_info*);
    . = ALIGN(4);
    *(.debug_abbrev*);
    . = ALIGN(4);
    *(.debug_line*);
    . = ALIGN(4);
    *(.debug_frame*);
    . = ALIGN(4);
    *(.debug_str*);
    . = ALIGN(4);
    *(.debug_loc*);
    . = ALIGN(4);
    *(.debug_macinfo);
    . = ALIGN(4);
    *(.debug_weaknames);
    . = ALIGN(4);
    *(.debug_funcnames);
    . = ALIGN(4);
    *(.debug_typenames);
    . = ALIGN(4);
    *(.debug_varnames);
    . = ALIGN(4);  
  } > ram

/*}*/

/* Allocation des sections */
/*SECTIONS*/
/*{*/
 /* Text = code executable */
  .text :
  {
    CREATE_OBJECT_SYMBOLS
    __cs3_region_start_rom = .;
    *(.cs3.region-head.rom)
    __cs3_interrupt_vector = __cs3_interrupt_vector_cortex_m;
    *(.cs3.interrupt_vector)
    /* Make sure we pulled in an interrupt vector.  */
    ASSERT (. != __cs3_interrupt_vector_cortex_m, "No interrupt vector");
    *(.rom)
    *(.rom.b)

    __cs3_reset = __cs3_reset_cortex_m;
    *(.cs3.reset)
    /* Make sure we pulled in some reset code.  */
    ASSERT (. != __cs3_reset, "No reset code");

    *(.text .text.* .gnu.linkonce.t.*)
    /* *(.plt)
    *(.gnu.warning)
    *(.glue_7t) *(.glue_7) *(.vfp11_veneer) */

    *(.rodata .rodata.* .gnu.linkonce.r.*)

    /* *(.ARM.extab* .gnu.linkonce.armextab.*)
    *(.gcc_except_table)
    *(.eh_frame_hdr)
    *(.eh_frame) */

    . = ALIGN(4);
    KEEP(*(.init))

    . = ALIGN(4);
    __preinit_array_start = .;
    KEEP (*(.preinit_array))
    __preinit_array_end = .;

    . = ALIGN(4);
    __init_array_start = .;
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array))
    __init_array_end = .;

    . = ALIGN(0x4);
    KEEP (*crtbegin.o(.ctors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*crtend.o(.ctors))

    . = ALIGN(4);
    KEEP(*(.fini))

    . = ALIGN(4);
    __fini_array_start = .;
    KEEP (*(.fini_array))
    KEEP (*(SORT(.fini_array.*)))
    __fini_array_end = .;

    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*crtend.o(.dtors))

    . = ALIGN(4);
    __cs3_regions = .;
    LONG (0)
    LONG (__cs3_region_init_ram)
    LONG (__cs3_region_start_ram)
    LONG (__cs3_region_init_size_ram)
    LONG (__cs3_region_zero_size_ram)
  } >rom

  /* .ARM.exidx is sorted, so has to go in its own output section.  */
  __exidx_start = .;
  .ARM.exidx :
  {
    *(.ARM.exidx* .gnu.linkonce.armexidx.*)
  } >rom
  __exidx_end = .;
   .text.align :
  {
    . = ALIGN(8);
    _etext = .;
  } >rom 
  __cs3_region_size_rom = LENGTH(rom);
  __cs3_region_num = 1;

  .data :
  {
    __cs3_region_start_ram = .;
 __cs3_region_start_data = .;
    *(.cs3.region-head.ram)
    /*KEEP(*(.jcr))
    *(.got.plt) *(.got)
    *(.shdata)*/
    *(.data .data.* .gnu.linkonce.d.*)
    *(.ram)
    . = ALIGN (8);
    _edata = .;
  } >ram /*AT>rom*/

 
  .bss :
  {
   __cs3_region_start_bss = .;
     *(.shbss)  
    *(.bss .bss.* .gnu.linkonce.b.*)
    *(COMMON)
    *(.ram.b)
    . = ALIGN (8);
    _end = .;
    __end = .;
  } >ram /*AT>rom*/

  .heap :
  {
    *(.heap)
  } >ram

  /*. = ALIGN (8);*/
/*  .stack (__cs3_stack - __cs3_stack_size) :*/
  .stack :
  {
    *(.stack)
  } >ram
  
  __cs3_region_init_ram_loadaddr = LOADADDR (.data);
  __cs3_region_init_ram = __cs3_region_init_ram_loadaddr;
  __cs3_region_init_ram_size = (_edata - __cs3_region_start_ram);
  __cs3_region_init_size_ram = __cs3_region_init_ram_size;
  __cs3_region_zero_ram_size = (_end - _edata);
  __cs3_region_zero_size_ram = __cs3_region_zero_ram_size;
  __cs3_region_size_ram = LENGTH(ram);
  __cs3_region_zero_ram_loadaddr = LOADADDR (.bss);
  __cs3_region_num = 1;

  .stab 0 (NOLOAD) : { *(.stab) }

  .stabstr 0 (NOLOAD) : { *(.stabstr) }


  .note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }
  .ARM.attributes 0 : { KEEP (*(.ARM.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) }
}
