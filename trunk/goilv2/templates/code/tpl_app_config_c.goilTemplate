/**
 * @file % !FILENAME %
 *
 * @section desc File description
 *
 * OS data structure generated from application % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c) IRCCyN 2005-2007
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the Lesser GNU Public Licence
 *
 * @section infos File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

#include "tpl_app_config.h"

#include "tpl_os_internal_types.h"
#include "tpl_machine.h"
#include "tpl_os_it.h"
#include "tpl_os_it_kernel.h"
#include "tpl_os_alarm_kernel.h"
#include "tpl_os_alarm.h"
#include "tpl_os_rez_kernel.h"
#include "tpl_os_rez.h"
#include "tpl_os_event_kernel.h"
#include "tpl_os_event.h"
#include "tpl_os_action.h"
#include "tpl_os_kernel.h"
#include "tpl_os_definitions.h"

%
if USECOM then
%
#include "tpl_com_notification.h"
#include "tpl_com_mo.h"
#include "tpl_com_internal.h"
#include "tpl_com_internal_com.h"
#include "tpl_com_external_com.h"
#include "tpl_com_app_copy.h"
#include "tpl_com_filters.h"
%
end if

if AUTOSAR then
%
#include "tpl_as_schedtable.h"
#include "tpl_as_st_kernel.h"
#include "tpl_as_action.h"
#include "tpl_as_isr_kernel.h"
#include "tpl_as_isr.h"
#include "tpl_as_counter.h"
#include "tpl_as_app_kernel.h"
#include "tpl_as_trusted_fct.h"
#include "tpl_as_trusted_fct_kernel.h"
#include "tpl_as_application.h"
%
end if

if USEMEMORYPROTECTION then
%
#include "tpl_os_mem_prot.h"
%
end if

# include a user defined types file for messages
if ["tpl_message_cdatatype.h" fileExists] then
  let available_receive_message := false
  foreach mess in MESSAGES do
    if mess::MESSAGEPROPERTY == "RECEIVE_UNQUEUED_INTERNAL" | mess::MESSAGEPROPERTY == "RECEIVE_QUEUED_INTERNAL" then
      let available_receive_message := true
    end if
  end foreach

  if available_receive_message then
%
#include "tpl_message_cdatatype.h"
%
  end if
end if

# application mode inclusion
template if exists appmode

%
#define API_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
foreach event in EVENTS
  before
%
/*=============================================================================
 * Declaration of event masks
 */
%
  do
%
/* Event % !event::NAME % */
#define % !event::NAME %_mask % !event::MASK %
CONST(EventMaskType, AUTOMATIC) % !event::NAME % = % !event::NAME %_mask;
%
end foreach

foreach resource in REGULARRESOURCES
  before
%
/*=============================================================================
 * Declaration of resources IDs
 */
%
  do
%
/* Resource % !resource::NAME % */
#define % !resource::NAME %_id % !INDEX %
CONST(ResourceType, AUTOMATIC) % !resource::NAME % = % !resource::NAME %_id;
%
end foreach
%
/*=============================================================================
 * Declaration of processes IDs
 */
%
foreach proc in PROCESSES do
  if proc::KIND == "Task" then
%
/* Task % !proc::NAME % identifier */
#define % !proc::NAME %_id % !INDEX %
CONST(TaskType, AUTOMATIC) % !proc::NAME % = % !proc::NAME %_id;
%
  else
%
/* ISR % !proc::NAME % identifier */
#define % !proc::NAME %_id % !INDEX 
    if AUTOSAR then
    #
    # ISR ids constants are only available for AUTOSAR
    #
%
CONST(ISRType, AUTOMATIC) % !proc::NAME % = % !proc::NAME %_id;
%
    end if
  end if
end foreach

foreach alarm in ALARM
  before
%
/*=============================================================================
 * Declaration of Alarm IDs
 */
%
  do
%
/* Alarm % !alarm::NAME % identifier */
#define % !alarm::NAME %_id % !INDEX %
CONST(AlarmType, AUTOMATIC) % !alarm::NAME % = % !alarm::NAME %_id;
%
end foreach

if AUTOSAR then
  foreach counter in COUNTERS
    before
%
/*=============================================================================
 * Declaration of Counter IDs
 */
%
    do
%
/* Counter % !counter::NAME % identifier */
#define % !counter::NAME %_id % !INDEX %
CONST(CounterType, AUTOMATIC) % !counter::NAME % = % !counter::NAME %_id;
%
  end foreach
end if

if USECOM then
  foreach message in RECEIVEMESSAGES
    before
%
/*=============================================================================
 * Declaration of receive messages IDs
 */
%
    do
%
/* Message % !message::NAME % identifier */
#define % !message::NAME %_id % !INDEX %
CONST(MessageIdentifier, AUTOMATIC) % !message::NAME % = % !message::NAME %_id;
%
  end foreach
  foreach message in SENDMESSAGES
    before
%
/*=============================================================================
 * Declaration of send messages IDs
 */
%
    do
%
/* Message % !message::NAME % identifier */
#define % !message::NAME %_id % !INDEX %
CONST(MessageIdentifier, AUTOMATIC) % !message::NAME % = % !message::NAME %_id;
%
  end foreach
end if

if AUTOSAR then
  foreach st in SCHEDULETABLES
    before
%
/*=============================================================================
 * Declaration of Scheduletables IDs
 */
%
    do
%
/* Schedule table % !st::NAME % identifier */
#define % !st::NAME %_id % !INDEX %
CONST(ScheduleTableType, AUTOMATIC) % !st::NAME % = % !st::NAME %_id;
%
  end foreach

  foreach app in APPLICATIONS
    before
%
/*=============================================================================
 * Declaration of OS Application IDs
 */
%
    do
%
/* OS Application % !app::NAME % identifier */
#define % !app::NAME %_id % !INDEX %
CONST(ApplicationType, OS_APPL_CONST) % !app::NAME % = % !app::NAME %_id;
%
  end foreach

  foreach tf in TRUSTEDFUNCTIONS
    before
%
/*=============================================================================
 * Declaration of Trusted functions IDs
 */
%
    do
%
/* Trusted function % !NAME % identifier */
#define % !NAME %_id % !INDEX %
CONST(TrustedFunctionIndexType, AUTOMATIC) % !NAME % = % !NAME %_id;
%
  end foreach
end if
%
#define API_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
foreach resource in REGULARRESOURCES
  before
%
/*=============================================================================
 * Definition and initialization of regular Resource related structures
 */
%
  do
    template resource_descriptor
end foreach
%
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
CONSTP2VAR(tpl_resource, AUTOMATIC, OS_APPL_DATA)
tpl_resource_table[RESOURCE_COUNT] = {%
foreach resource in REGULARRESOURCES
  before %
  %
  do
    %&% !resource::NAME %_rez_desc%
  between
    %,
  % 
  after %,%
end foreach
%
  &res_sched_rez_desc  
};
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

%
foreach resource in INTERNALRESOURCES
  before
%
/*=============================================================================
 * Definition and initialization of internal Resource related structures
 */
%
  do
    template internal_resource_descriptor
end foreach

foreach counter in COUNTERS
  before
%
/*=============================================================================
 * Definition and initialization of Counters related defines and structures
 */
%
  do
    template counter_descriptor
end foreach

template counter_call

if AUTOSAR then
  foreach counter in COUNTERS
    before
%
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
CONSTP2VAR(tpl_counter, OS_VAR, OS_APPL_DATA)
tpl_counter_table[COUNTER_COUNT] = {
%
    do
      %  &% !counter::NAME %_counter_desc%
    between
      %,
%
    after
%
};
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
  end foreach
end if

foreach task in TASKS
  before
%
/*=============================================================================
 * Definition and initialization of Task related defines and structures
 */
%
  do
    template task_descriptor
end foreach

foreach isr in ISRS2
  before
%
/*=============================================================================
 * Definition and initialization of ISR2 related defines and structures
 */
%
  do
    template isr_descriptor
end foreach

template if exists interrupt_table

%
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
/*=============================================================================
 * Definition and initialization of process tables (tasks and isrs)
 */
CONSTP2CONST(tpl_proc_static, AUTOMATIC, OS_APPL_DATA)
tpl_stat_proc_table[TASK_COUNT+ISR_COUNT+1] = {
%
foreach proc in PROCESSES do
    %  &% !proc::NAME %_% ![proc::KIND lowercaseString] %_stat_desc,
%
end foreach
%  &idle_task_static
};

CONSTP2VAR(tpl_proc, AUTOMATIC, OS_APPL_DATA)
tpl_dyn_proc_table[TASK_COUNT+ISR_COUNT+1] = {
%
foreach proc in PROCESSES do
    %  &% !proc::NAME %_% ![proc::KIND lowercaseString] %_desc,
%
end foreach
%  &idle_task
};
%
foreach task in EXTENDEDTASKS
  before %
CONSTP2VAR(tpl_task_events, AUTOMATIC, OS_APPL_DATA)
tpl_task_events_table[EXTENDED_TASK_COUNT] = {
%
  do %  &% !task::NAME %_task_evts%
  between %,
%
  after
%
};
%
end foreach
foreach isr in ISRS2
  before
%
CONSTP2CONST(tpl_isr_static, AUTOMATIC, OS_APPL_DATA)
tpl_isr_stat_table[ISR_COUNT] = {
%
  do
    %  &% !isr::NAME %_isr_helper%
  between
    %,
%
  after
    %
};
%
end foreach
template if exists isr_list_specific

%
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

%
if AUTOSAR then
  foreach isr in ISRS2
    before
%
VAR(tpl_isr2_enable_state, OS_VAR)
tpl_isr2_enable_table[ISR_COUNT] = {
%
    do
      %  ENABLED%
    between
      %,
%
    after
      %
};
%
  end foreach
end if
foreach alarm in ALARMS
  before
%
/*=============================================================================
 * Definition and initialization of Alarm related structures
 */
%
  do
    template alarm_descriptor
end foreach
foreach alarm in ALARMS
  before
    %
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
CONSTP2VAR(tpl_time_obj, AUTOMATIC, OS_APPL_DATA)
  tpl_alarm_table[ALARM_COUNT] = {
%
  do
    %  &% !alarm::NAME %_alarm_desc%
  between
    %,
%
  after
    %
};
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
end foreach
%
/*=============================================================================
 * Declaration of flags functions
 */
/* $FLAGSFUNCTIONS$ */

%
foreach filter in FILTERSTRUCTS
  before
%
/*=============================================================================
 * Declaration of the custom filter descriptors
 * filter descriptors are generated according to the type
 * used for the corresponding message object
 */
%
  do
    template filter_desc_struct
end foreach

foreach filter in FILTERS
  before
%
/*=============================================================================
 * Definitions of the custom filter functions
 * filter functions are generated according to the type
 * used for the corresponding message object
 */
%
  do
    template filter_function
end foreach

foreach message in RECEIVEMESSAGES
  before
%
/*=============================================================================
 * Definition and initialization of Receive Messages related structures
 */
%
  do
    template receive_message_descriptor
end foreach

foreach message in RECEIVEMESSAGES
  before
%
/*=============================================================================
 * Definition and initialization of the receive messages table
 */
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONSTP2CONST(tpl_base_receiving_mo, AUTOMATIC, OS_CONST)
tpl_receive_message_table[RECEIVE_MESSAGE_COUNT] = {
%
  do %  (tpl_base_receiving_mo*)&% !message::NAME %_message%
  between %,    
%
  after %
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
end foreach

foreach message in SENDMESSAGES
  before
%
/*=============================================================================
 * Definition and initialization of Send Messages related structures
 */
%
  do
    template send_message_descriptor
end foreach

foreach message in SENDMESSAGES
  before
%
/*=============================================================================
 * Definition and initialization of the send messages table
 */
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONSTP2CONST(tpl_base_sending_mo, AUTOMATIC, OS_CONST)
tpl_send_message_table[SEND_MESSAGE_COUNT] = {
%
  do %  (tpl_base_sending_mo*)&% !message::NAME %_message%
  between %,    
%
  after %
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
end foreach

if AUTOSAR then
  foreach st in SCHEDULETABLES
    before
%
/*=============================================================================
 * Declaration of schedule tables related defines and structures
 */

%
    do
      template scheduletable_descriptor
  end foreach
  foreach st in SCHEDULETABLES
    before %
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONSTP2VAR(tpl_schedule_table, AUTOMATIC, OS_APPL_DATA)
tpl_schedtable_table[% ![SCHEDULETABLES length] %] = {
%
    do %  &% !st::NAME %_st_dyn%
    between %,
%
    after %
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
  end foreach
  foreach app in APPLICATIONS
    before
%
/*=============================================================================
 * Declaration of OS applications related defines and structures
 */
%
    do
    template application_descriptor
  end foreach
  
  foreach app in APPLICATIONS
    before %
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONSTP2CONST(tpl_app_access, OS_APPL_CONST, OS_APPL_CONST) tpl_app_table[APP_COUNT] = {
%
    do %  &% !app::NAME %_app_access%
    between %,
%
    after %
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
  end foreach
  
  foreach tf in TRUSTEDFUNCTIONS
    before
%
/*=============================================================================
 * Declaration of Trusted Functions table
 */
#define OS_START_SEC_CODE
#include "tpl_memmap.h"
%
    do %

FUNC(void, OS_APPL_CODE) TRUSTED_% !tf::NAME %(
  CONST(TrustedFunctionIndexType, AUTOMATIC) idx,
  CONST(TrustedFunctionParameterRefType, AUTOMATIC) params);
%
  after
%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"
%
  end foreach
  foreach tf in TRUSTEDFUNCTIONS
    before %
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONST(tpl_trusted_fct, OS_APPL_CODE)
  tpl_trusted_fct_table[TRUSTED_FCT_COUNT] = {
%
    do %  TRUSTED_% !tf::NAME
    between %,
%
    after %
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
  end foreach
end if

if USEMEMORYPROTECTION then
  foreach task in TASKS do
    template memory_region_descriptor
  end foreach
  foreach isr in ISRS2 do
    template memory_region_descriptor
  end foreach
  
%
#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONSTP2CONST(tpl_mem_prot_desc, AUTOMATIC, OS_CONST) tpl_mp_table[TASK_COUNT+ISR_COUNT+1] = {
%
  foreach proc in PROCESSES
    do %  &% !NAME %_mp_desc,
%
  end foreach
%  NULL /* for idle task */
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
% 
end if
%
/*=============================================================================
 * Definition and initialization of Ready List structures
 */
#define OS_START_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"

%
foreach slot in READYLIST do
  %VAR(tpl_proc_id, OS_VAR) tpl_priority_% !INDEX %_fifo[% !slot::SIZE %];
%
end foreach
%
VAR(tpl_fifo_state, OS_VAR) tpl_fifo_rw[% ![READYLIST length] %] = {
%
foreach slot in READYLIST do
%  { 0 , 0 }%
  between %,
%
end foreach
%
};

#define OS_STOP_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"

#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

CONST(tpl_priority_level, OS_CONST) tpl_ready_list[% ![READYLIST length] %] = {
%
foreach slot in READYLIST do
%  { tpl_priority_% !INDEX %_fifo, % !slot::SIZE % }%
  between %,
%
end foreach
%
};

#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

%
foreach proc in PROCESSES
  before
%
#define API_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
CONSTP2CONST(char, AUTOMATIC, OS_APPL_DATA) proc_name_table[TASK_COUNT + ISR_COUNT] = {
%
  do
    %  "% !proc::NAME %"%
  between %,
%
  after
%
};
#define API_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
%
end foreach
%
/* End of file tpl_app_config.c */
