#include "tpl_os_kernel.h"          /* tpl_schedule */
#include "tpl_os_timeobj_kernel.h"  /* tpl_counter_tick */
#include "tpl_machine_interface.h"  /* tpl_switch_context_from_it */

%
let COUNTER_FOR_TRAP := emptymap
foreach counter in HARDWARECOUNTERS do
  let COUNTER_FOR_TRAP[[counter::TRAP string]] += counter::NAME
end foreach

foreach trap in COUNTER_FOR_TRAP do
%
/* 
 * Counter handler for trap % !KEY % that calls the tpl_counter_tick
 */
#include <C167CS.H> /*TODO: C166 */

extern unsigned int registers_it[16]; 

#pragma NOFRAME
#pragma warning disable = 138 /* disables the "expression with possibly no effect" warning */
void cnt_it_% !KEY %(void) interrupt % !KEY %
{
	tpl_status need_rescheduling;
	__asm {
		BCLR IEN /*disable interrupt */
		SCXT DPP3, #3
		NOP
		SCXT CP,#registers_it
		NOP
		MOV R0,0xfe12 
		MOV R0,[R0] //get R0<-CP
		MOV R0,[R0] //get the previous user stack.
		NOP
		PUSH DPP0
	}
	need_rescheduling = NO_SPECIAL_CODE;
   %foreach cnt in trap do
   %need_rescheduling |= tpl_counter_tick(&%!cnt::VALUE%_counter_desc);
	%end foreach%
	if (need_rescheduling == NEED_RESCHEDULING)
	{
		tpl_schedule_from_running();
		if(tpl_kern.need_switch != NO_NEED_SWITCH) {
			tpl_switch_context_from_it(
				&(tpl_kern.s_old->context),
				&(tpl_kern.s_running->context)
			);
		}
	}

	/* dummy code to allow the use of registers_it in
	 * the assembly code
	 */
	if(registers_it[0]);
	__asm {
		POP DPP0
		POP CP
		POP DPP3
	}
}
%
end foreach