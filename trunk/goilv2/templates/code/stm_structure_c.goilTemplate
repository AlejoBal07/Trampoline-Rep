#include "tpl_os_stm_internal_types.h"
%
foreach obj in OBJECT
  before %
VAR(tpl_stm_object, OS_APPL_DATA) object_table[NUMBER_OF_OBJECTS] = {
%
  do   % {%
    % "%!obj::NAME%",   		/* object name 		*/
    %
    !INDEX%, 	  			/* object id 		*/
    0, 		  		/* current_pos   	*/%
    loop core from 1 to OS::NUMBER_OF_CORES
	before % 
    {%
    	do %NULL, % 
       	after % NULL, NULL}, 	/* copy_table 		*/%
    end loop
    %
    0  				/* concurrency_vector 	*/
 }
%
  between % ,
%
  after %};
%
end foreach
%
%

if OS::NUMBER_OF_CORES > 1	then #multicore
%
	VAR(tpl_stm_tx_descriptor, OS_APPL_DATA) trans_table[NUMBER_OF_CORES] = {%
foreach tx in TRANSACTION 
before %{
%
  do
  if tx::CORE_ID == INDEX then 
    !tx::CORE_ID %, 				/* core id 		*/
    0, 				/* status 		*/%
    % 
    {%
    	if exists tx::READ_SET then 
 		foreach o in tx::READ_SET 
		do
		    foreach obj in OBJECT  
			do
				if o::VALUE == obj::NAME then 
					%&object_table[% !INDEX %]%
				end if 
		     end foreach 
		between %, %
 		end foreach 
	  else %NULL%
	  end if 
     %}, 	/* read_set 	*/%
  
    % 
    {%
    	  if exists tx::WRITE_SET then 
 		foreach o in tx::WRITE_SET 
		do
		    foreach obj in OBJECT  
			do
				if o::VALUE == obj::NAME then 
					%&object_table[% !INDEX %]%
				end if 
		     end foreach 
		between %, %
 		end foreach 
	  else %NULL%
	  end if 
    %}, 	/* write_set 	*/ 
    %
    %0 				/* access_vector 	*/
 }%
  end if
end foreach
%};%

else #NUMBER_OF_CORES=1
% 
VAR(tpl_stm_tx_descriptor, OS_APPL_DATA) trans_table[NUMBER_OF_CORES] = {
    0, 				/* core id 		*/
    0, 				/* status 		*/%
    % 
    {%
     let read_set_empty := 1
     foreach tx in TRANSACTION do
	let E_INDEX:=INDEX
    	if exists tx::READ_SET then 
		let read_set_empty := 0
 		foreach o in tx::READ_SET 
		do
			let egalite_objet := 0
			foreach t in TRANSACTION do
			   let I_INDEX:=INDEX
			   if exists t::READ_SET then  
			    foreach ot in t::READ_SET 
			    do
				if I_INDEX < E_INDEX & tx::NAME != t::NAME & o::VALUE == ot::VALUE then
					let egalite_objet := 1
				end if
			    end foreach
			   end if
			end foreach	
		    	if egalite_objet == 0 then
			foreach obj in OBJECT  
				do				
			        	if o::VALUE == obj::NAME then 
						%&object_table[% !INDEX %]%
					end if 
		     		end foreach 
		        end if
		between %, %
 		end foreach 
	 end if 
    after
	if read_set_empty==1 then
	%NULL%
	end if
    %}, 	/* read_set 	*/%
    end foreach
    % 
    {%
     let write_set_empty := 1
     foreach tx in TRANSACTION do
	let E_INDEX:=INDEX
    	if exists tx::WRITE_SET then 
		let write_set_empty := 0
 		foreach o in tx::WRITE_SET 
		do
			let egalite_objet := 0
			foreach t in TRANSACTION do
			   let I_INDEX:=INDEX
			   if exists t::WRITE_SET then  
			    foreach ot in t::WRITE_SET 
			    do
				if I_INDEX < E_INDEX & tx::NAME != t::NAME & o::VALUE == ot::VALUE then
					let egalite_objet := 1
				end if
			    end foreach
			   end if
			end foreach	
		    	if egalite_objet == 0 then
			foreach obj in OBJECT  
				do				
			        	if o::VALUE == obj::NAME then 
						%&object_table[% !INDEX %]%
					end if 
		     		end foreach 
		        end if
		between %, %
 		end foreach 
	 end if 
    after
	if write_set_empty==1 then
	%NULL%
	end if
    %}, 	/* write_set 	*/%
    end foreach    % 
    0 				/* access_vector 	*/
};
%
end if


