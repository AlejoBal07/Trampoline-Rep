/**
 * @file % !FILENAME %
 *
 * @section File description
 *
 * This file gathers all data types which are generated from the application.
 * Please refer to comment of each type for more details.
 * Generated from application % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section File informations
 *
 * $Date$
 * $Rev$
 * $Author$
 * $URL$
 */

#ifndef TPL_APP_CUSTOM_TYPES_H
#define TPL_APP_CUSTOM_TYPES_H

#include "tpl_compiler.h"
#include "tpl_os_std_types.h"

/**
 * tpl_proc_id is used for task and isrs identifiers.
 *
 * @warning This data type must be signed
 * because -1 is used for INVALID_TASK and INVALID_ISR
 */
typedef s% ![[PROCESSES length] + 1 signedNumberOfBytes] * 8 % tpl_proc_id;

/**
 * tpl_priority represents a task's or a resource's priority.
 *
 * @warning This type must be signed.
 */
typedef s% ![MAXPRIORITY signedNumberOfBytes] * 8% tpl_priority;

/**
 * tpl_activate_counter is used to count
 * how many time a task has been activated while
 * it was not suspended.
 */%
let max_activation := 0
foreach task in BASICTASKS do
  if task::ACTIVATION > max_activation then
    let max_activation := task::ACTIVATION
  end if
end foreach
%
typedef u% ![max_activation numberOfBytes] * 8% tpl_activate_counter;

/**
 * tpl_event_mask is used for event.
 * An event is a bit vector. According to the maximum number of events
 * defined in the application, it can be u8 (8 events), u16 (16 events) or
 * u32 (32 events).
 */%

%
typedef u% ![ALLEVENTSMASK numberOfBytes] * 8 % tpl_event_mask;

/**
 * tpl_alarm_type is used for alarm identifiers.
 */
typedef u% ![[ALARMS length] numberOfBytes] * 8 % tpl_alarm_id;

/**
 * tpl_resource_id is used for resource identifiers.
 *
 * @warning RES_SCHEDULER is set to the higher resource id + 1
 */
typedef u% ![[REGULARRESOURCES length]  numberOfBytes] * 8 % tpl_resource_id;

#if (WITH_TRACE == YES)
/**
 * @internal
 *
 * Type used to store the id of an alarm or a schedule table
 * This is used only for tracing
 */
typedef u% ![[ALARMS length] + [SCHEDULETABLES length] numberOfBytes] * 8 % tpl_timeobj_id;
#endif

#ifdef WITH_AUTOSAR
/**
 * @internal
 *
 * @todo: document this
 */
typedef u% ![[SOFTWARECOUNTERS length] numberOfBytes] * 8 % tpl_counter_id;

/**
 * @internal
 *
 * @todo: document this
 */
typedef u% ![[SCHEDULETABLES length] numberOfBytes] * 8 % tpl_schedtable_id;

/**
 * @internal
 *
 * Type used to store the id of an OS Application
 * Its size is computed according to the number of OS Applications
 */
typedef u% ![[APPLICATIONS length] numberOfBytes] * 8 % tpl_app_id;

/**
 * @internal
 *
 * Generic type used in OS Application API
 * Its size is computed by doing the max of all object kind
 */%
let max_id := 0
if [PROCESSES length] + 1 > max_id then let max_id := [PROCESSES length] + 1 end if
if [ALARMS length] > max_id then let max_id := [ALARMS length] end if
if [RESOURCES length] > max_id then let max_id := [RESOURCES length] end if
if [SOFTWARECOUNTERS length] > max_id then let max_id := [SOFTWARECOUNTERS length] end if
if [SCHEDULETABLES length] > max_id then let max_id := [SCHEDULETABLES length] end if
%
typedef u% ![max_id numberOfBytes] * 8 % tpl_generic_id;

#endif /* WITH_AUTOSAR */

#endif /* TPL_APP_CUSTOM_TYPES_H */

/* End of file % !FILENAME % */

