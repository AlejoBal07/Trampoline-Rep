#include "tpl_machine.h"
%
  #check that source is found in target for ISR2
  foreach ISRS2 prefixedby isr2_ do
    let source_ok := false
    foreach INTERRUPTSOURCES prefixedby interrupt_ do
      if isr2_SOURCE == interrupt_NAME then
        let source_ok := true
      end if
    end foreach
    if source_ok == false then
      error isr2_SOURCE "This interrupt source ".isr2_SOURCE." is not present in target.cfg file"
    end if
  end foreach
  #check that source is found in target for ISR2
  foreach HARDWARECOUNTERS prefixedby counter_ do
    let source_ok := false
    foreach INTERRUPTSOURCES prefixedby interrupt_ do
      if counter_SOURCE == interrupt_NAME then
        let source_ok := true
      end if
    end foreach
    if source_ok == false & counter_SOURCE != "" then
      error counter_SOURCE "This interrupt source ".counter_SOURCE." is not present in target.cfg file"
    end if
  end foreach

let current_entry := 0
%
/* Interrupt functions */
%
  loop ENTRY from 0 to ITSOURCESLENGTH - 1
    before 
%
#define OS_START_SEC_CODE
#include "stm_regs.h"
%
    do
      let current_entry := ENTRY
      let function_generated := false # don't produce function entry twice for one source id
      let source_user_found := false # don't produce function while source is not used
      foreach INTERRUPTSOURCES prefixedby interrupt_ do
        if ENTRY == interrupt_NUMBER then
          if not function_generated then
            foreach ISRS1 prefixedby isr1_ do
              if isr1_SOURCE == interrupt_NAME then
                let source_user_found := true
              end if
            end foreach
            foreach ISRS2 prefixedby isr2_ do
              if isr2_SOURCE == interrupt_NAME then
                let source_user_found := true
              end if
            end foreach
          end if

          if (not function_generated) & source_user_found then
%
void % !interrupt_NAME %_IRQHandler (void)
{
%
          template if exists tpl_interrupt_ack in code
            let function_generated := true
          end if              
          # then check for ISR category 2
          foreach ISRS2 prefixedby isr2_ do
            if isr2_SOURCE == interrupt_NAME then
%
  tpl_central_interrupt_handler(% !([TASKS length] + INDEX) %); 
%    
            end if
          end foreach
          # finally check for ISR category 1
          foreach ISRS1 prefixedby isr1_ do
            if isr1_SOURCE == interrupt_NAME then
%
  % !isr1_NAME %_function(); 
%
            end if
         end foreach
        end if

   # Close the function bracket if it has been produced
      after
        if function_generated then
%}
%     
        end if
      end foreach
    after
%
#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"
%
  end loop