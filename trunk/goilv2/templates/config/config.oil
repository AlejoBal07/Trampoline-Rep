IMPLEMENTATION trampoline_common {
  
  APICONFIG [] {
    STRUCT {
      BOOLEAN HIDDEN = FALSE;
      IDENTIFIER WITH_AUTO ACTUAL;
      IDENTIFIER KERNEL;
      IDENTIFIER RETURN_TYPE;
      STRUCT {
        IDENTIFIER TYPE;
        ENUM [ CONST, VAR ] KIND;
      } ARGUMENT[];
    } SYSCALL[];
    STRING FILE;
    IDENTIFIER ID_PREFIX;
  };
  
  OS {
    /* Standard OIL attributes */
    ENUM [STANDARD, EXTENDED] STATUS;
    BOOLEAN STARTUPHOOK = FALSE;
    BOOLEAN ERRORHOOK = FALSE;
    BOOLEAN SHUTDOWNHOOK = FALSE;
    BOOLEAN PRETASKHOOK = FALSE;
    BOOLEAN POSTTASKHOOK = FALSE;
    BOOLEAN USEGETSERVICEID = FALSE;
    BOOLEAN USEPARAMETERACCESS = FALSE;
    BOOLEAN USERESSCHEDULER = TRUE;
    /* Extra Trampoline attributes */
    BOOLEAN SYSTEM_CALL = FALSE;
    BOOLEAN DEBUG = FALSE;
    BOOLEAN INTERRUPTTABLE = FALSE;
    BOOLEAN PACKED_DATA = FALSE;
    IDENTIFIER SCHEDULER = osek;
    BOOLEAN [
      TRUE {
        ENUM [
          elxr   { STRING SCRIPT = "script.ld"; },
          gnu_ld { STRING SCRIPT = "script.ld"; },
          mwld   { STRING SCRIPT = "script.mcf"; }
        ] LINKER;
        ENUM [gcc, ghs, mwc] COMPILER;
        ENUM [gnu_as] ASSEMBLER;
        BOOLEAN MEMORY_PROTECTION = FALSE;
      },
      FALSE
    ] MEMMAP = FALSE;
    BOOLEAN [
      TRUE {
        STRING APP_SRC[];
        STRING CFLAGS[];
        STRING CPPFLAGS[];
        STRING ASFLAGS[];
        STRING LDFLAGS[];
        STRING APP_NAME = "trampoline";
        STRING TRAMPOLINE_BASE_PATH = "..";
        STRING COMPILER = "gcc";
        STRING ASSEMBLER = "gcc";
        STRING LINKER = "ld";
      },
      FALSE
    ] BUILD = FALSE;
    BOOLEAN [
      TRUE {
        ENUM [ FILE { STRING NAME; } ] METHOD;
        ENUM [xml, txt, bin] FORMAT;
        BOOLEAN TRACE_TASK = TRUE;
        BOOLEAN TRACE_ISR = TRUE;
        BOOLEAN TRACE_RESOURCE = TRUE;
        BOOLEAN TRACE_ALARM = TRUE;
        BOOLEAN TRACE_USER = TRUE;
        BOOLEAN DESCRIPTION = TRUE;
      },
      FALSE
    ] TRACE = FALSE;
  };
  
  APPMODE [] {
    BOOLEAN DEFAULT = FALSE;
  };

  TASK [] {
    BOOLEAN [
      TRUE { APPMODE_TYPE APPMODE[]; },
      FALSE
    ] AUTOSTART;
    UINT32 PRIORITY;
    UINT32 ACTIVATION;
    ENUM [NON, FULL] SCHEDULE;
    EVENT_TYPE EVENT[];
    RESOURCE_TYPE RESOURCE[];
    MESSAGE_TYPE MESSAGE[];
  };
  
  ISR [] {
    UINT32 [1, 2] CATEGORY;
    UINT32 PRIORITY; /* Trampoline extra */
    RESOURCE_TYPE RESOURCE[];
    MESSAGE_TYPE MESSAGE[];
  };

  COUNTER [] {
    UINT32 MINCYCLE = 1;
    UINT32 MAXALLOWEDVALUE = 32767;
    UINT32 TICKSPERBASE = 1;
  };

  ALARM [] {
    COUNTER_TYPE COUNTER;
    ENUM [
      ACTIVATETASK { TASK_TYPE TASK; },
      SETEVENT { TASK_TYPE TASK; EVENT_TYPE EVENT; },
      ALARMCALLBACK { STRING ALARMCALLBACKNAME; },
      INCREMENTCOUNTER { COUNTER_TYPE COUNTER; }
   ] ACTION;
    BOOLEAN [
      TRUE { UINT32 ALARMTIME; UINT32 CYCLETIME; APPMODE_TYPE APPMODE[]; },
      FALSE
    ] AUTOSTART;
  };
  
  EVENT [] {
    UINT64 WITH_AUTO MASK;
  };

  RESOURCE [] {
    ENUM [
      STANDARD,
      LINKED { RESOURCE_TYPE LINKEDRESOURCE; },
      INTERNAL
    ] RESOURCEPROPERTY;
  };

  MESSAGE [] {
    ENUM [
      SEND_STATIC_INTERNAL {
        STRING CDATATYPE;
      },
      SEND_STATIC_EXTERNAL {
        STRING CDATATYPE;
        ENUM WITH_AUTO [ TRIGGERED, PENDING ] TRANSFERPROPERTY = AUTO;
        ENUM [
          ALWAYS,
          NEVER,
          MASKEDNEWEQUALSX { UINT64 MASK; UINT64 X; },
          MASKEDNEWDIFFERSX { UINT64 MASK; UINT64 X; },
          NEWISEQUAL,
          NEWISDIFFERENT,
          MASKEDNEWEQUALSMASKEDOLD { UINT64 MASK; },
          MASKEDNEWDIFFERSMASKEDOLD { UINT64 MASK; },
          NEWISWITHIN { UINT64 MIN; UINT64 MAX; },
          NEWISOUTSIDE { UINT64 MIN; UINT64 MAX; },
          NEWISGREATER,
          NEWISLESSOREQUAL,
          NEWISLESS,
          NEWISGREATEROREQUAL,
          ONEEVERYN { UINT64 PERIOD; UINT64 OFFSET; }
        ] FILTER = ALWAYS;
        STRING NETWORKORDERCALLOUT = "";
        STRING CPUORDERCALLOUT = "";
        UINT64 WITH_AUTO INITIALVALUE = AUTO;
        NETWORKMESSAGE_TYPE NETWORKMESSAGE;
      },
      SEND_DYNAMIC_EXTERNAL {
        ENUM WITH_AUTO [ TRIGGERED, PENDING ] TRANSFERPROPERTY = AUTO;
        STRING NETWORKORDERCALLOUT = "";
        STRING CPUORDERCALLOUT = "";
        UINT64 WITH_AUTO INITIALVALUE = AUTO;
        NETWORKMESSAGE_TYPE NETWORKMESSAGE;
      },
      SEND_ZERO_INTERNAL,
      SEND_ZERO_EXTERNAL {
        STRING NETWORKORDERCALLOUT = "";
        STRING CPUORDERCALLOUT = "";
        NETWORKMESSAGE_TYPE NETWORKMESSAGE;
      },
      RECEIVE_ZERO_INTERNAL { MESSAGE_TYPE SENDINGMESSAGE; },
      RECEIVE_ZERO_EXTERNAL {
        STRING NETWORKORDERCALLOUT = "";
        STRING CPUORDERCALLOUT = "";
        NETWORKMESSAGE_TYPE NETWORKMESSAGE;
      },
      RECEIVE_UNQUEUED_INTERNAL {
        MESSAGE_TYPE SENDINGMESSAGE;
        ENUM [
          ALWAYS,
          NEVER,
          MASKEDNEWEQUALSX { UINT64 MASK; UINT64 X; },
          MASKEDNEWDIFFERSX { UINT64 MASK; UINT64 X; },
          NEWISEQUAL,
          NEWISDIFFERENT,
          MASKEDNEWEQUALSMASKEDOLD { UINT64 MASK; },
          MASKEDNEWDIFFERSMASKEDOLD { UINT64 MASK; },
          NEWISWITHIN { UINT64 MIN; UINT64 MAX; },
          NEWISOUTSIDE { UINT64 MIN; UINT64 MAX; },
          NEWISGREATER,
          NEWISLESSOREQUAL,
          NEWISLESS,
          NEWISGREATEROREQUAL,
          ONEEVERYN { UINT64 PERIOD; UINT64 OFFSET; }
        ] FILTER = ALWAYS;
        UINT64 INITIALVALUE = 0;
      },
      RECEIVE_QUEUED_INTERNAL {
        MESSAGE_TYPE SENDINGMESSAGE;
        ENUM [
          ALWAYS,
          NEVER,
          MASKEDNEWEQUALSX { UINT64 MASK; UINT64 X; },
          MASKEDNEWDIFFERSX { UINT64 MASK; UINT64 X; },
          NEWISEQUAL,
          NEWISDIFFERENT,
          MASKEDNEWEQUALSMASKEDOLD { UINT64 MASK; },
          MASKEDNEWDIFFERSMASKEDOLD { UINT64 MASK; },
          NEWISWITHIN { UINT64 MIN; UINT64 MAX; },
          NEWISOUTSIDE { UINT64 MIN; UINT64 MAX; },
          NEWISGREATER,
          NEWISLESSOREQUAL,
          NEWISLESS,
          NEWISGREATEROREQUAL,
          ONEEVERYN { UINT64 PERIOD; UINT64 OFFSET; }
        ] FILTER = ALWAYS;
        UINT64 INITIALVALUE = 0;
        UINT32 QUEUESIZE;
      },
      RECEIVE_UNQUEUED_EXTERNAL {
        STRING CDATATYPE;
        ENUM [
          ALWAYS,
          NEVER,
          MASKEDNEWEQUALSX { UINT64 MASK; UINT64 X; },
          MASKEDNEWDIFFERSX { UINT64 MASK; UINT64 X; },
          NEWISEQUAL,
          NEWISDIFFERENT,
          MASKEDNEWEQUALSMASKEDOLD { UINT64 MASK; },
          MASKEDNEWDIFFERSMASKEDOLD { UINT64 MASK; },
          NEWISWITHIN { UINT64 MIN; UINT64 MAX; },
          NEWISOUTSIDE { UINT64 MIN; UINT64 MAX; },
          NEWISGREATER,
          NEWISLESSOREQUAL,
          NEWISLESS,
          NEWISGREATEROREQUAL,
          ONEEVERYN { UINT64 PERIOD; UINT64 OFFSET; }
        ] FILTER = ALWAYS;
        BOOLEAN [
          TRUE { MESSAGE_TYPE RECEIVEMESSAGE; },
          FALSE {
            STRING NETWORKORDERCALLOUT = "";
            STRING CPUORDERCALLOUT = "";
            NETWORKMESSAGE_TYPE NETWORKMESSAGE;
          }
        ] LINK;
        UINT64 WITH_AUTO INITIALVALUE = AUTO;
      },
      RECEIVE_QUEUED_EXTERNAL {
        STRING CDATATYPE;
        UINT32 QUEUESIZE;
        ENUM [
          ALWAYS,
          NEVER,
          MASKEDNEWEQUALSX { UINT64 MASK; UINT64 X; },
          MASKEDNEWDIFFERSX { UINT64 MASK; UINT64 X; },
          NEWISEQUAL,
          NEWISDIFFERENT,
          MASKEDNEWEQUALSMASKEDOLD { UINT64 MASK; },
          MASKEDNEWDIFFERSMASKEDOLD { UINT64 MASK; },
          NEWISWITHIN { UINT64 MIN; UINT64 MAX; },
          NEWISOUTSIDE { UINT64 MIN; UINT64 MAX; },
          NEWISGREATER,
          NEWISLESSOREQUAL,
          NEWISLESS,
          NEWISGREATEROREQUAL,
          ONEEVERYN { UINT64 PERIOD; UINT64 OFFSET; }
        ] FILTER = ALWAYS;
        BOOLEAN [
          TRUE { MESSAGE_TYPE RECEIVEMESSAGE; },
          FALSE {
            STRING NETWORKORDERCALLOUT = "";
            STRING CPUORDERCALLOUT = "";
            NETWORKMESSAGE_TYPE NETWORKMESSAGE;
          }
        ] LINK;
        UINT64 WITH_AUTO INITIALVALUE = AUTO;
      },
      RECEIVE_DYNAMIC_EXTERNAL {
        BOOLEAN [
          TRUE { MESSAGE_TYPE RECEIVEMESSAGE; },
          FALSE {
            STRING NETWORKORDERCALLOUT = "";
            STRING CPUORDERCALLOUT = "";
            NETWORKMESSAGE_TYPE NETWORKMESSAGE;
          }
        ] LINK;
        UINT64 WITH_AUTO INITIALVALUE = AUTO;
      },
      RECEIVE_ZERO_SENDERS {
        STRING CDATATYPE;
        UINT64 INITIALVALUE = 0;
      }
    ] MESSAGEPROPERTY;
    ENUM [
      NONE,
      ACTIVATETASK { TASK_TYPE TASK; },
      SETEVENT { TASK_TYPE TASK; EVENT_TYPE EVENT; },
      COMCALLBACK { STRING CALLBACKROUTINENAME; MESSAGE_TYPE MESSAGE[]; },
      FLAG { STRING FLAGNAME; },
      INMCALLBACK {
        STRING WITH_AUTO CALLBACKROUTINENAME;
        UINT32 WITH_AUTO MONITOREDIPDU;
      }
    ] NOTIFICATION = NONE;
    ENUM [
      NONE,
      ACTIVATETASK { TASK_TYPE TASK; },
      SETEVENT { TASK_TYPE TASK; EVENT_TYPE EVENT; },
      COMCALLBACK { STRING CALLBACKROUTINENAME; MESSAGE_TYPE MESSAGE[]; },
      FLAG { STRING FLAGNAME; },
      INMCALLBACK {
        STRING WITH_AUTO CALLBACKROUTINENAME;
        UINT32 WITH_AUTO MONITOREDIPDU;
      }
    ] NOTIFICATIONERROR = NONE;
  };
  
  NETWORKMESSAGE [] {
    IPDU_TYPE IPDU;
    ENUM [
      STATIC {  
        UINT32 SIZEINBITS;
        ENUM [ LITTLEENDIAN, BIGENDIAN ] BITORDERING;
        UINT32 BITPOSITION;
        ENUM [ UNSIGNEDINTEGER, BYTEARRAY ] DATAINTERPRETATION;
        UINT64 INITIALVALUE = 0;
        ENUM [
          SENT {
            ENUM WITH_AUTO [ TRIGGERED, PENDING ] TRANSFERPROPERTY = AUTO;
          },
          RECEIVE
        ] DIRECTION;
      },
      DYNAMIC {        
        UINT32 MAXIMUMSIZEINBITS;
        ENUM [ LITTLEENDIAN, BIGENDIAN ] BITORDERING;
        UINT32 BITPOSITION;
        UINT64 INITIALVALUE = 0;
        ENUM [
          SENT {
            ENUM WITH_AUTO [ TRIGGERED, PENDING ] TRANSFERPROPERTY = AUTO;
          },
          RECEIVE
        ] DIRECTION;
      },
      ZERO
    ] MESSAGEPROPERTY;
  };

  COM {
    FLOAT COMTIMEBASE = 0.001;
    BOOLEAN COMERRORHOOK = FALSE;
    BOOLEAN COMUSEGETSERVICEID = FALSE;
    BOOLEAN COMUSEPARAMETERACCESS = FALSE;
    BOOLEAN COMSTARTCOMEXTENSION = FALSE;
    STRING COMAPPMODE[];
    ENUM [ COMSTANDARD, COMEXTENDED ] COMSTATUS = COMSTANDARD;
    STRING USE [];
  };
  
  IPDU [] {
    UINT32 SIZEINBITS;
    ENUM [
      SENT {
        ENUM [
          DIRECT { UINT64 MINIMUMDELAYTIME = 0; },
          PERIODIC { UINT64 TIMEPERIOD; UINT64 WITH_AUTO TIMEOFFSET = AUTO; },
          MIXED {
            UINT64 TIMEPERIOD;
            UINT64 WITH_AUTO TIMEOFFSET = AUTO;
            UINT64 MINIMUMDELAYTIME = 0;
          }
        ] TRANSMISSIONMODE;
        UINT64 TIMEOUT = 0;
      },
      RECEIVED {
        UINT64 TIMEOUT = 0;
        UINT64 WITH_AUTO FIRSTTIMEOUT = AUTO;
      }
    ] IPDUPROPERTY;
    STRING IPDUCALLOUT = "";
    STRING LAYERUSED = "";
  };
  NM { };
};

CPU defaultObjects {
  COUNTER SystemCounter {
  } : "Predefined System Counter";
};

#include "api.oil"
