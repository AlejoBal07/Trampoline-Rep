%
#
# Generate the system calls according to the configuration
#
let APIMAP := mapof APICONFIG by NAME
let APIUSED := emptylist

let APIUSED += APIMAP["os"]
let APIUSED += APIMAP["interrupt"]

#
# Check and generate system calls
#
if [TASKS length] > 0 then
  let APIUSED += APIMAP["task"]
end if
if [RESOURCES length] > 0 | OS::USERESSCHEDULER then
  let APIUSED += APIMAP["resource"]
end if
if [TASKS length] > 0  & [EVENTS length] > 0 then
  let APIUSED += APIMAP["event"]
end if
if [ALARMS length] > 0 then
  let APIUSED += APIMAP["alarm"]
end if
if [MESSAGES length] > 0 then
  let APIUSED += APIMAP["message"]
end if

# AUTOSAR
if OS::SCALABILITYCLASS > 0 then
  let APIUSED += APIMAP["counter"]
  let APIUSED += APIMAP["scheduletables"]
  let APIUSED += APIMAP["isrs"]
end if
if OS::SCALABILITYCLASS > 2 then
  let APIUSED += APIMAP["applications"]
end if
if OS::SCALABILITYCLASS == 2 | OS::SCALABILITYCLASS == 4 then
  let APIUSED += APIMAP["globaltime"]
end if

# Multicore
if OS::NUMBER_OF_CORES > 1 then
  let APIUSED += APIMAP["multicore"]
  warning here : "Adding multicore"
end if

if OS::SYSTEM_CALL then
  !PROJECT %/tpl_dispatch_table.c
%
  write to PROJECT."/tpl_dispatch_table.c":
    template tpl_dispatch_table_c in code
  end write
  template tpl_invoque_s in code
else
  !PROJECT %/tpl_os.c
%
  write to PROJECT."/tpl_os.c":
    template tpl_os_c in code
  end write
end if

!PROJECT %/tpl_os.h
%
write to PROJECT."/tpl_os.h":
  template tpl_os_h in code
end write

if OS::SYSTEM_CALL | OS::USEGETSERVICEID | exists COM::COMUSEGETSERVICEID default (false) then
!PROJECT %/tpl_service_ids.h
%
write to PROJECT."/tpl_service_ids.h":
  template tpl_service_ids_h in code
end write
end if

if OS::BUILD then
%Makefile
%
  write to "Makefile":
    template Makefile in build
  end write
end if

