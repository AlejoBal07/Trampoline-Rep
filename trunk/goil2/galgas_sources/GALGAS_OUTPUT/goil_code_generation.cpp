//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'goil_code_generation.cpp'                       *
//                       Generated by version 1.9.10                         *
//                       march 18th, 2010, at 9h57'4"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != 688
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "goil_code_generation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "goil_code_generation.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cfg_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_signed_type"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_signed_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_signed_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_s8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (7U) COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_uint64  var_cas_max_s16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (15U) COMMA_SOURCE_FILE_AT_LINE (56)) ;
  GGS_uint64  var_cas_max_s32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (31U) COMMA_SOURCE_FILE_AT_LINE (57)) ;
  const GGS_bool cond_1709 = (var_cas_count).operator_strictInf (var_cas_max_s8) ;
  if (cond_1709.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("s8") ;
  }else if (cond_1709.isBuiltAndFalse ()) {
    const GGS_bool cond_1767 = (var_cas_count).operator_strictInf (var_cas_max_s16) ;
    if (cond_1767.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("s16") ;
    }else if (cond_1767.isBuiltAndFalse ()) {
      const GGS_bool cond_1831 = (var_cas_count).operator_strictInf (var_cas_max_s32) ;
      if (cond_1831.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("s32") ;
      }else if (cond_1831.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_signed_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "generate_unsigned_type"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_unsigned_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_unsigned_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (8U) COMMA_SOURCE_FILE_AT_LINE (81)) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (16U) COMMA_SOURCE_FILE_AT_LINE (82)) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (1ULL).left_shift_operation (inLexique, GGS_uint (32U) COMMA_SOURCE_FILE_AT_LINE (83)) ;
  const GGS_bool cond_2185 = (var_cas_count).operator_strictInf (var_cas_max_u8) ;
  if (cond_2185.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_2185.isBuiltAndFalse ()) {
    const GGS_bool cond_2243 = (var_cas_count).operator_strictInf (var_cas_max_u16) ;
    if (cond_2243.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_2243.isBuiltAndFalse ()) {
      const GGS_bool cond_2307 = (var_cas_count).operator_strictInf (var_cas_max_u32) ;
      if (cond_2307.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_2307.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (96)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_unsigned_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "generate_mask_type"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_mask_type (C_Compiler & inLexique,
                                GGS_uint64   var_cas_count,
                                GGS_string  var_cas_err,
                                GGS_string & var_cas_type COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_mask_type at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint64  var_cas_max_u8 = GGS_uint64 (8ULL) ;
  GGS_uint64  var_cas_max_u16 = GGS_uint64 (16ULL) ;
  GGS_uint64  var_cas_max_u32 = GGS_uint64 (32ULL) ;
  const GGS_bool cond_2643 = (var_cas_count).operator_infOrEqual (var_cas_max_u8) ;
  if (cond_2643.isBuiltAndTrue ()) {
    var_cas_type = GGS_string ("u8") ;
  }else if (cond_2643.isBuiltAndFalse ()) {
    const GGS_bool cond_2702 = (var_cas_count).operator_infOrEqual (var_cas_max_u16) ;
    if (cond_2702.isBuiltAndTrue ()) {
      var_cas_type = GGS_string ("u16") ;
    }else if (cond_2702.isBuiltAndFalse ()) {
      const GGS_bool cond_2767 = (var_cas_count).operator_infOrEqual (var_cas_max_u32) ;
      if (cond_2767.isBuiltAndTrue ()) {
        var_cas_type = GGS_string ("u32") ;
      }else if (cond_2767.isBuiltAndFalse ()) {
        var_cas_type = GGS_string ("") ;
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_err COMMA_SOURCE_FILE_AT_LINE (122)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_mask_type\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "generate_types"                 *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_types (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_alarm_map   var_cas_alarms,
                                GGS_counter_map   var_cas_counters,
                                GGS_resource_map   var_cas_resources,
                                GGS_scheduletable_map   var_cas_schedtables,
                                GGS_app_map   var_cas_apps,
                                GGS_uint   var_cas_max_priority,
                                GGS_string & var_cas_types COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_types at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_type ;
  GGS_uint64  var_cas_max = GGS_uint64 (0ULL) ;
  GGS_uint64  var_cas_c ;
  var_cas_c = var_cas_tasks.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (143)).add_operation (inLexique, var_cas_isrs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (143)) COMMA_SOURCE_FILE_AT_LINE (143)) ;
  const GGS_bool cond_3332 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_3332.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_signed_type (inLexique,  var_cas_c,  GGS_string ("Too many processes (tasks and ISRs)"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (145)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PROC_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (146)) ;
  ::routine_generate_signed_type (inLexique,  var_cas_max_priority.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (149)),  GGS_string ("Maximum priority too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (149)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$PRIORITY_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (151)) ;
  GGS_uint  var_cas_max_act = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_3853 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_3853 = NULL ;
    while (((operand_3853 = enumerator_3853.nextObject ()))) {
      macroValidPointer (operand_3853) ;
      { const GGS_basic_type _var_4121 = operand_3853->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ; // CAST instruction
        if (_var_4121.getPtr () != NULL) {
          macroValidPointer (_var_4121.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_4121.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_4121.getPtr ()) ;
            const GGS_bool cond_4003 = (var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (158))).operator_strictSup (var_cas_max_act) ;
            if (cond_4003.isBuiltAndTrue ()) {
              var_cas_max_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
            }
          }else{
            operand_3853->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("Internal error, task ")).operator_concat (operand_3853->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (159)))).operator_concat (GGS_string (" has wrong type for the ACTIVATION attribute")) COMMA_SOURCE_FILE_AT_LINE (160)) ;
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_max_act.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (162)),  GGS_string ("Maximum ACTIVATION too high"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (162)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ACTIVATION_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (164)) ;
  GGS_uint  var_cas_max_ev = GGS_uint (0U) ;
  {
    GGS_task_map::cEnumerator enumerator_4490 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_4490 = NULL ;
    while (((operand_4490 = enumerator_4490.nextObject ()))) {
      macroValidPointer (operand_4490) ;
      GGS_lstringlist  var_cas_evts = operand_4490->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (170)) ;
      const GGS_bool cond_4627 = (var_cas_evts.reader_length ()).operator_strictSup (var_cas_max_ev) ;
      if (cond_4627.isBuiltAndTrue ()) {
        var_cas_max_ev = var_cas_evts.reader_length () ;
      }
    }
  }
  ::routine_generate_mask_type (inLexique,  var_cas_max_ev.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (173)),  GGS_string ("Too much events"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (173)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$EVENTMASK_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (174)) ;
  var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (177)) ;
  const GGS_bool cond_4888 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_4888.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many alarms"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (179)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$ALARM_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (181)) ;
  var_cas_c = var_cas_resources.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (184)) ;
  const GGS_bool cond_5176 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5176.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many resources"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (186)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$RESOURCE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (188)) ;
  var_cas_c = var_cas_counters.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (191)) ;
  const GGS_bool cond_5468 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5468.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many counters"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (193)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$COUNTER_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (195)) ;
  var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ;
  const GGS_bool cond_5764 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_5764.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many schedule tables"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (200)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$SCHEDTABLE_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (202)) ;
  const GGS_bool cond_6152 = (var_cas_alarms.reader_count ()).operator_strictSup (var_cas_schedtables.reader_count ()) ;
  if (cond_6152.isBuiltAndTrue ()) {
    var_cas_c = var_cas_alarms.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (207)) ;
  }else if (cond_6152.isBuiltAndFalse ()) {
    var_cas_c = var_cas_schedtables.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (209)) ;
  }
  const GGS_bool cond_6233 = (var_cas_c).operator_strictSup (var_cas_max) ;
  if (cond_6233.isBuiltAndTrue ()) {
    var_cas_max = var_cas_c ;
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_c,  GGS_string ("too many time objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (212)) ;
  var_cas_types = var_cas_types.reader_stringByReplacingStringByString (inLexique, GGS_string ("$TIMEOBJ_ID_T$"), var_cas_type COMMA_SOURCE_FILE_AT_LINE (213)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_apps.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (216)).add_operation (inLexique, GGS_uint64 (1ULL) COMMA_SOURCE_FILE_AT_LINE (216)),  GGS_string ("too many OS applications"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (216)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$OSAPPLICATION_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (218)) ;
  GGS_stringset  var_cas_tfs = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_app_map::cEnumerator enumerator_6700 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_6700 = NULL ;
    while (((operand_6700 = enumerator_6700.nextObject ()))) {
      macroValidPointer (operand_6700) ;
      { const GGS_app_trusted_obj _var_6860 = operand_6700->mInfo.app.reader_trusted (inLexique COMMA_SOURCE_FILE_AT_LINE (224)) ; // CAST instruction
        if (_var_6860.getPtr () != NULL) {
          macroValidPointer (_var_6860.getPtr ()) ;
          if (typeid (cPtr_app_trusted_true) == typeid (* (_var_6860.getPtr ()))) {
            const GGS_app_trusted_true var_cas_t (_var_6860.getPtr ()) ;
            {
              GGS_stringset::cEnumerator enumerator_6779 (var_cas_t.reader_trusted_fcts (inLexique COMMA_SOURCE_FILE_AT_LINE (226)), true) ;
              while (enumerator_6779.hasCurrentObject ()) {
                var_cas_tfs.addAssign_operation (enumerator_6779._key (HERE)) ;
                enumerator_6779.next () ;
              }
            }
          }else{
          }
        }
      }
    }
  }
  ::routine_generate_unsigned_type (inLexique,  var_cas_tfs.reader_count ().reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (232)),  GGS_string ("Too many Trusted Functions"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (232)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$TRUSTED_FCT_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (233)) ;
  ::routine_generate_unsigned_type (inLexique,  var_cas_max,  GGS_string ("too many objects"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (236)) ;
  ::routine_doReplace (inLexique,  var_cas_types,  GGS_string ("$GENERIC_ID_T$"),  var_cas_type COMMA_SOURCE_FILE_AT_LINE (238)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_types\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "generate_timing_prot"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_timing_prot (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_resource_map   var_cas_rez,
                                GGS_string & var_cas_obj_header COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_timing_prot at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_max_sched_wd = var_cas_rez.reader_count ().add_operation (inLexique, GGS_uint (4U).multiply_operation (inLexique, var_cas_tasks.reader_count () COMMA_SOURCE_FILE_AT_LINE (248)) COMMA_SOURCE_FILE_AT_LINE (248)) ;
  var_cas_obj_header = var_cas_obj_header.reader_stringByReplacingStringByString (inLexique, GGS_string ("$MAX_WATCH_DOG$"), var_cas_max_sched_wd.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (250)) COMMA_SOURCE_FILE_AT_LINE (250)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_timing_prot\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_task_priority"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_task_priority (C_Compiler & inLexique,
                                GGS_task_map   var_cas_tasks,
                                GGS_prio_map  & var_cas_prio_for_task,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_task_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_tl = GGS_objs_by_prio ::constructor_emptySortedList () ;
  {
    GGS_task_map::cEnumerator enumerator_8057 (var_cas_tasks, true) ;
    const GGS_task_map::cElement * operand_8057 = NULL ;
    while (((operand_8057 = enumerator_8057.nextObject ()))) {
      macroValidPointer (operand_8057) ;
      GGS_basic_type  var_cas_prio_as_basic ;
      GGS_basic_type  var_cas_act_as_basic ;
      GGS_uint  var_cas_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_act = GGS_uint (0U) ;
      var_cas_prio_as_basic = operand_8057->mInfo.task.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ;
      var_cas_act_as_basic = operand_8057->mInfo.task.reader_activation (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
      { const GGS_basic_type _var_8480 = var_cas_prio_as_basic ; // CAST instruction
        if (_var_8480.getPtr () != NULL) {
          macroValidPointer (_var_8480.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_8480.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_8480.getPtr ()) ;
            var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (277)) ;
          }else{
            var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (278)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (279)) ;
          }
        }
      }
      { const GGS_basic_type _var_8666 = var_cas_act_as_basic ; // CAST instruction
        if (_var_8666.getPtr () != NULL) {
          macroValidPointer (_var_8666.getPtr ()) ;
          if (typeid (cPtr_uint32_class) == typeid (* (_var_8666.getPtr ()))) {
            const GGS_uint32_class var_cas_ui (_var_8666.getPtr ()) ;
            var_cas_act = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (282)) ;
          }else{
            var_cas_act_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (283)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("TASK ACTIVATION attribute undefined") COMMA_SOURCE_FILE_AT_LINE (284)) ;
          }
        }
      }
      var_cas_tl.addAssign_operation (var_cas_prio, var_cas_act, operand_8057->mKey) ;
    }
  }
  GGS_uint  var_cas_actual_prio = GGS_uint (1U) ;
  GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
  const GGS_bool cond_8907 = (var_cas_tl.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_8907.isBuiltAndTrue ()) {
    GGS_uint  automatic_var_8898_0 ;
    GGS_lstring  automatic_var_8898_1 ;
    const GGS_objs_by_prio  temp_8877 = var_cas_tl ;
    if (temp_8877.isBuilt ()) {
      temp_8877 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_8898_0, automatic_var_8898_1 COMMA_SOURCE_FILE_AT_LINE (295)) ;
    }
  }
  {
    GGS_objs_by_prio::cEnumerator enumerator_9002 (var_cas_tl, true) ;
    const GGS_objs_by_prio::cElement * operand_9002 = NULL ;
    while (((operand_9002 = enumerator_9002.nextObject ()))) {
      macroValidPointer (operand_9002) ;
      const GGS_bool cond_9258 = (operand_9002->prio).operator_strictSup (var_cas_cur_rel_prio) ;
      if (cond_9258.isBuiltAndTrue ()) {
        var_cas_cur_rel_prio = operand_9002->prio ;
        var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (305)) ;
      }
      var_cas_prio_for_task.modifier_put (inLexique, operand_9002->name, var_cas_actual_prio, operand_9002->act COMMA_SOURCE_FILE_AT_LINE (308)) ;
    }
  }
  var_cas_max_prio = var_cas_actual_prio ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_task_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "compute_actual_isr_priority"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_actual_isr_priority (C_Compiler & inLexique,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map  & var_cas_prio_for_isr,
                                GGS_uint   var_cas_floor,
                                GGS_uint  & var_cas_max_prio COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_actual_isr_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_objs_by_prio  var_cas_il = GGS_objs_by_prio ::constructor_emptySortedList () ;
  const GGS_bool cond_11560 = (var_cas_isrs.reader_count ()).operator_isNotEqual (GGS_uint (0U)) ;
  if (cond_11560.isBuiltAndTrue ()) {
    {
      GGS_isr_map::cEnumerator enumerator_10010 (var_cas_isrs, true) ;
      const GGS_isr_map::cElement * operand_10010 = NULL ;
      while (((operand_10010 = enumerator_10010.nextObject ()))) {
        macroValidPointer (operand_10010) ;
        GGS_basic_type  var_cas_prio_as_basic ;
        GGS_basic_type  var_cas_act_as_basic ;
        GGS_uint  var_cas_prio = GGS_uint (0U) ;
        var_cas_prio_as_basic = operand_10010->mInfo.isr.reader_priority (inLexique COMMA_SOURCE_FILE_AT_LINE (338)) ;
        { const GGS_basic_type _var_10463 = var_cas_prio_as_basic ; // CAST instruction
          if (_var_10463.getPtr () != NULL) {
            macroValidPointer (_var_10463.getPtr ()) ;
            if (typeid (cPtr_uint32_class) == typeid (* (_var_10463.getPtr ()))) {
              const GGS_uint32_class var_cas_ui (_var_10463.getPtr ()) ;
              var_cas_prio = var_cas_ui.reader_value (inLexique COMMA_SOURCE_FILE_AT_LINE (342)) ;
            }else{
              var_cas_prio_as_basic.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (343)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("ISR PRIORITY attribute undefined") COMMA_SOURCE_FILE_AT_LINE (344)) ;
            }
          }
        }
        var_cas_il.addAssign_operation (var_cas_prio, GGS_uint (1U), operand_10010->mKey) ;
      }
    }
    GGS_uint  var_cas_actual_prio = var_cas_floor.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (357)) ;
    GGS_uint  var_cas_cur_rel_prio = GGS_uint (0U) ;
    const GGS_bool cond_10954 = (var_cas_il.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
    if (cond_10954.isBuiltAndTrue ()) {
      GGS_uint  automatic_var_10941_0 ;
      GGS_lstring  automatic_var_10941_1 ;
      const GGS_objs_by_prio  temp_10920 = var_cas_il ;
      if (temp_10920.isBuilt ()) {
        temp_10920 (HERE)->method_smallest (inLexique, var_cas_cur_rel_prio, automatic_var_10941_0, automatic_var_10941_1 COMMA_SOURCE_FILE_AT_LINE (360)) ;
      }
    }
    {
      GGS_objs_by_prio::cEnumerator enumerator_11072 (var_cas_il, true) ;
      const GGS_objs_by_prio::cElement * operand_11072 = NULL ;
      while (((operand_11072 = enumerator_11072.nextObject ()))) {
        macroValidPointer (operand_11072) ;
        const GGS_bool cond_11348 = (operand_11072->prio).operator_strictSup (var_cas_cur_rel_prio) ;
        if (cond_11348.isBuiltAndTrue ()) {
          var_cas_cur_rel_prio = operand_11072->prio ;
          var_cas_actual_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (370)) ;
        }
        var_cas_prio_for_isr.modifier_put (inLexique, operand_11072->name, var_cas_actual_prio, operand_11072->act COMMA_SOURCE_FILE_AT_LINE (373)) ;
      }
    }
    var_cas_max_prio = var_cas_actual_prio ;
  }else if (cond_11560.isBuiltAndFalse ()) {
    var_cas_max_prio = var_cas_floor ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_actual_isr_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_rez_priority"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_rez_priority (C_Compiler & inLexique,
                                GGS_resource_map   var_cas_rez,
                                GGS_task_map   var_cas_tasks,
                                GGS_isr_map   var_cas_isrs,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map  & var_cas_prio_for_rez,
                                GGS_stringMap  & var_cas_comments COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_rez_priority at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_prio_for_rez = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_comments = GGS_stringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_resource_map::cEnumerator enumerator_12425 (var_cas_rez, true) ;
    const GGS_resource_map::cElement * operand_12425 = NULL ;
    while (((operand_12425 = enumerator_12425.nextObject ()))) {
      macroValidPointer (operand_12425) ;
      GGS_uint  var_cas_rez_prio = GGS_uint (0U) ;
      GGS_uint  var_cas_rez_act = GGS_uint (0U) ;
      GGS_string var_cas_rez_comment = GGS_string ("") ;
      {
        GGS_task_map::cEnumerator enumerator_12566 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_12566 = NULL ;
        while (((operand_12566 = enumerator_12566.nextObject ()))) {
          macroValidPointer (operand_12566) ;
          GGS_lstringlist  var_cas_owned_rez = operand_12566->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (411)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_12735_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12425->mKey,  automatic_var_12735_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (413)) ;
          const GGS_bool cond_13117 = var_cas_owned ;
          if (cond_13117.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_12854 = var_cas_prio_for_process ;
            if (temp_12854.isBuilt ()) {
              temp_12854 (HERE)->method_get (inLexique, operand_12566->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (417)) ;
            }
            const GGS_bool cond_12969 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_12969.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (421)) ;
            var_cas_rez_comment.appendCString (" used by task ") ;
            var_cas_rez_comment.dotAssign_operation (operand_12566->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (422))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (422))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_13163 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_13163 = NULL ;
        while (((operand_13163 = enumerator_13163.nextObject ()))) {
          macroValidPointer (operand_13163) ;
          GGS_lstringlist  var_cas_owned_rez = operand_13163->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (426)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_13332_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12425->mKey,  automatic_var_13332_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (428)) ;
          const GGS_bool cond_13715 = var_cas_owned ;
          if (cond_13715.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_13451 = var_cas_prio_for_process ;
            if (temp_13451.isBuilt ()) {
              temp_13451 (HERE)->method_get (inLexique, operand_13163->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (432)) ;
            }
            const GGS_bool cond_13567 = (var_cas_prio).operator_strictSup (var_cas_rez_prio) ;
            if (cond_13567.isBuiltAndTrue ()) {
              var_cas_rez_prio = var_cas_prio ;
            }
            var_cas_rez_act = var_cas_rez_act.add_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (436)) ;
            var_cas_rez_comment.appendCString (" used by isr ") ;
            var_cas_rez_comment.dotAssign_operation (operand_13163->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (437))) ;
            var_cas_rez_comment.appendCString (" (") ;
            var_cas_rez_comment.dotAssign_operation (var_cas_prio.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (437))) ;
            var_cas_rez_comment.appendCString (")\n") ;
          }
        }
      }
      const GGS_bool cond_13825 = (var_cas_rez_comment).operator_isEqual (GGS_string ("")) ;
      if (cond_13825.isBuiltAndTrue ()) {
        var_cas_rez_comment = GGS_string (" none\n") ;
      }
      {
        GGS_task_map::cEnumerator enumerator_14014 (var_cas_tasks, true) ;
        const GGS_task_map::cElement * operand_14014 = NULL ;
        while (((operand_14014 = enumerator_14014.nextObject ()))) {
          macroValidPointer (operand_14014) ;
          GGS_lstringlist  var_cas_owned_rez = operand_14014->mInfo.task.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (450)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_14183_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12425->mKey,  automatic_var_14183_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (452)) ;
          const GGS_bool cond_14446 = var_cas_owned ;
          if (cond_14446.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_14302 = var_cas_prio_for_process ;
            if (temp_14302.isBuilt ()) {
              temp_14302 (HERE)->method_get (inLexique, operand_14014->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (456)) ;
            }
            const GGS_bool cond_14426 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_14426.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (458)) ;
            }
          }
        }
      }
      {
        GGS_isr_map::cEnumerator enumerator_14492 (var_cas_isrs, true) ;
        const GGS_isr_map::cElement * operand_14492 = NULL ;
        while (((operand_14492 = enumerator_14492.nextObject ()))) {
          macroValidPointer (operand_14492) ;
          GGS_lstringlist  var_cas_owned_rez = operand_14492->mInfo.isr.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (463)) ;
          GGS_bool var_cas_owned ;
          GGS_lstring  automatic_var_14661_0 ;
          ::routine_is_in_lstringlist (inLexique,  var_cas_owned_rez,  operand_12425->mKey,  automatic_var_14661_0,  var_cas_owned COMMA_SOURCE_FILE_AT_LINE (465)) ;
          const GGS_bool cond_14925 = var_cas_owned ;
          if (cond_14925.isBuiltAndTrue ()) {
            GGS_uint  var_cas_prio ;
            GGS_uint  var_cas_act ;
            const GGS_prio_map  temp_14780 = var_cas_prio_for_process ;
            if (temp_14780.isBuilt ()) {
              temp_14780 (HERE)->method_get (inLexique, operand_14492->mKey, var_cas_prio, var_cas_act COMMA_SOURCE_FILE_AT_LINE (469)) ;
            }
            const GGS_bool cond_14905 = (var_cas_prio).operator_isEqual (var_cas_rez_prio) ;
            if (cond_14905.isBuiltAndTrue ()) {
              var_cas_rez_act = var_cas_rez_act.substract_operation (inLexique, var_cas_act COMMA_SOURCE_FILE_AT_LINE (471)) ;
            }
          }
        }
      }
      var_cas_prio_for_rez.modifier_put (inLexique, operand_12425->mKey, var_cas_rez_prio, var_cas_rez_act COMMA_SOURCE_FILE_AT_LINE (476)) ;
      var_cas_comments.modifier_put (inLexique, operand_12425->mKey, var_cas_rez_comment COMMA_SOURCE_FILE_AT_LINE (477)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_rez_priority\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of routine "compute_ready_list"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_ready_list (C_Compiler & inLexique,
                                GGS_prio_map   var_cas_prio_for_process,
                                GGS_prio_map   var_cas_prio_for_rez,
                                GGS_uint   var_cas_max_task_prio,
                                GGS_uint   var_cas_max_prio,
                                GGS_prio_list  & var_cas_ready_list COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_ready_list at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_ready_list = GGS_prio_list ::constructor_emptyList () ;
  var_cas_ready_list.addAssign_operation (GGS_uint (1U)) ;
  GGS_uint  var_cas_prio = GGS_uint (1U) ;
  GGS_uint _variant_16400 = var_cas_max_prio ;
  GGS_bool _condition_16400 (_variant_16400.isBuilt (), true) ;
  while (_condition_16400.isBuiltAndTrue ()) {
    _condition_16400 = (var_cas_prio).operator_infOrEqual (var_cas_max_prio) ;
    if (_condition_16400.isBuiltAndTrue ()) {
      if (_variant_16400.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (518)) ;
        _condition_16400 = GGS_bool (false) ;
      }else{
        _variant_16400.decrement_operation (inLexique COMMA_HERE) ;
        GGS_uint  var_cas_fifosize = GGS_uint (0U) ;
        {
          GGS_prio_map::cEnumerator enumerator_15903 (var_cas_prio_for_process, true) ;
          const GGS_prio_map::cElement * operand_15903 = NULL ;
          while (((operand_15903 = enumerator_15903.nextObject ()))) {
            macroValidPointer (operand_15903) ;
            const GGS_bool cond_15995 = (operand_15903->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_15995.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_15903->mInfo.act COMMA_SOURCE_FILE_AT_LINE (506)) ;
            }
          }
        }
        {
          GGS_prio_map::cEnumerator enumerator_16049 (var_cas_prio_for_rez, true) ;
          const GGS_prio_map::cElement * operand_16049 = NULL ;
          while (((operand_16049 = enumerator_16049.nextObject ()))) {
            macroValidPointer (operand_16049) ;
            const GGS_bool cond_16141 = (operand_16049->mInfo.prio).operator_isEqual (var_cas_prio) ;
            if (cond_16141.isBuiltAndTrue ()) {
              var_cas_fifosize = var_cas_fifosize.add_operation (inLexique, operand_16049->mInfo.act COMMA_SOURCE_FILE_AT_LINE (509)) ;
            }
          }
        }
        const GGS_bool cond_16338 = (var_cas_prio).operator_isEqual (var_cas_max_task_prio) ;
        if (cond_16338.isBuiltAndTrue ()) {
          var_cas_fifosize.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (514)) ;
        }
        var_cas_ready_list.addAssign_operation (var_cas_fifosize) ;
        var_cas_prio.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (517)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_ready_list\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "compute_app_for_obj"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compute_app_for_obj (C_Compiler & inLexique,
                                GGS_app_map   var_cas_apps,
                                GGS_stringMap  & var_cas_app_for_obj COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compute_app_for_obj at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_app_for_obj = GGS_stringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_app_map::cEnumerator enumerator_16574 (var_cas_apps, true) ;
    const GGS_app_map::cElement * operand_16574 = NULL ;
    while (((operand_16574 = enumerator_16574.nextObject ()))) {
      macroValidPointer (operand_16574) ;
      GGS_string var_cas_app_name = operand_16574->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (530)) ;
      {
        GGS_ident_map::cEnumerator enumerator_16629 (operand_16574->mInfo.app.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (531)), true) ;
        const GGS_ident_map::cElement * operand_16629 = NULL ;
        while (((operand_16629 = enumerator_16629.nextObject ()))) {
          macroValidPointer (operand_16629) ;
          const GGS_bool cond_16749 = (var_cas_app_for_obj.reader_hasKey (operand_16629->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (532)))).operator_not () ;
          if (cond_16749.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_16629->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (533)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_16784 (operand_16574->mInfo.app.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (536)), true) ;
        const GGS_ident_map::cElement * operand_16784 = NULL ;
        while (((operand_16784 = enumerator_16784.nextObject ()))) {
          macroValidPointer (operand_16784) ;
          const GGS_bool cond_16903 = (var_cas_app_for_obj.reader_hasKey (operand_16784->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (537)))).operator_not () ;
          if (cond_16903.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_16784->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (538)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_16938 (operand_16574->mInfo.app.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (541)), true) ;
        const GGS_ident_map::cElement * operand_16938 = NULL ;
        while (((operand_16938 = enumerator_16938.nextObject ()))) {
          macroValidPointer (operand_16938) ;
          const GGS_bool cond_17059 = (var_cas_app_for_obj.reader_hasKey (operand_16938->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (542)))).operator_not () ;
          if (cond_17059.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_16938->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (543)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17094 (operand_16574->mInfo.app.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (546)), true) ;
        const GGS_ident_map::cElement * operand_17094 = NULL ;
        while (((operand_17094 = enumerator_17094.nextObject ()))) {
          macroValidPointer (operand_17094) ;
          const GGS_bool cond_17223 = (var_cas_app_for_obj.reader_hasKey (operand_17094->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (547)))).operator_not () ;
          if (cond_17223.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17094->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (548)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17258 (operand_16574->mInfo.app.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (551)), true) ;
        const GGS_ident_map::cElement * operand_17258 = NULL ;
        while (((operand_17258 = enumerator_17258.nextObject ()))) {
          macroValidPointer (operand_17258) ;
          const GGS_bool cond_17381 = (var_cas_app_for_obj.reader_hasKey (operand_17258->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (552)))).operator_not () ;
          if (cond_17381.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17258->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (553)) ;
          }
        }
      }
      {
        GGS_ident_map::cEnumerator enumerator_17416 (operand_16574->mInfo.app.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (556)), true) ;
        const GGS_ident_map::cElement * operand_17416 = NULL ;
        while (((operand_17416 = enumerator_17416.nextObject ()))) {
          macroValidPointer (operand_17416) ;
          const GGS_bool cond_17540 = (var_cas_app_for_obj.reader_hasKey (operand_17416->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (557)))).operator_not () ;
          if (cond_17540.isBuiltAndTrue ()) {
            var_cas_app_for_obj.modifier_put (inLexique, operand_17416->mKey, var_cas_app_name COMMA_SOURCE_FILE_AT_LINE (558)) ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compute_app_for_obj\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "computeEvents"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_computeEvents (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu,
                                GGS_eventMaskMap  & var_cas_eventMasks COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_computeEvents at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_eventMasks = GGS_eventMaskMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_task_mask  var_cas_maskForTask = GGS_task_mask ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_event_usage_map  var_cas_evt_usage = GGS_event_usage_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset_map  var_cas_tasksForEvent = GGS_stringset_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_task_map::cEnumerator enumerator_18441 (var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (588)), true) ;
    const GGS_task_map::cElement * operand_18441 = NULL ;
    while (((operand_18441 = enumerator_18441.nextObject ()))) {
      macroValidPointer (operand_18441) ;
      GGS_lstringlist  var_cas_events_used ;
      var_cas_events_used = operand_18441->mInfo.task.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (590)) ;
      GGS_uint64  var_cas_event_mask = GGS_uint64 (0ULL) ;
      {
        GGS_lstringlist::cEnumerator enumerator_18607 (var_cas_events_used, true) ;
        const GGS_lstringlist::cElement * operand_18607 = NULL ;
        while (((operand_18607 = enumerator_18607.nextObject ()))) {
          macroValidPointer (operand_18607) ;
          GGS_event_obj  var_cas_event ;
          const GGS_event_map  temp_18678 = var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
          if (temp_18678.isBuilt ()) {
            temp_18678 (HERE)->method_get (inLexique, operand_18607->mValue, var_cas_event COMMA_SOURCE_FILE_AT_LINE (594)) ;
          }
          GGS_event_mask_obj  var_cas_mask_obj ;
          var_cas_mask_obj = var_cas_event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (596)) ;
          { const GGS_event_mask_obj _var_19380 = var_cas_mask_obj ; // CAST instruction
            if (_var_19380.getPtr () != NULL) {
              macroValidPointer (_var_19380.getPtr ()) ;
              if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_19380.getPtr ()))) {
                const GGS_event_mask_user_obj var_cas_emu (_var_19380.getPtr ()) ;
                const GGS_bool cond_18953 = ((var_cas_event_mask).operator_and (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (599)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (599)))).operator_isEqual (GGS_uint64 (0ULL)) ;
                if (cond_18953.isBuiltAndTrue ()) {
                  var_cas_event_mask = (var_cas_event_mask).operator_or (var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (600)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (600))) ;
                }else if (cond_18953.isBuiltAndFalse ()) {
                  var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (602)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("MASK of event ")).operator_concat (operand_18607->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (602)))).operator_concat (GGS_string (" conflicts with previous declarations")) COMMA_SOURCE_FILE_AT_LINE (603)) ;
                }
              }else if (typeid (cPtr_event_mask_auto_obj) == typeid (* (_var_19380.getPtr ()))) {
                GGS_uint  var_cas_count ;
                const GGS_bool cond_19268 = var_cas_evt_usage.reader_hasKey (operand_18607->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606))) ;
                if (cond_19268.isBuiltAndTrue ()) {
                  var_cas_evt_usage.modifier_delete (inLexique, operand_18607->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (607)) ;
                  var_cas_count.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (608)) ;
                }else if (cond_19268.isBuiltAndFalse ()) {
                  var_cas_count = GGS_uint (1U) ;
                }
                var_cas_evt_usage.modifier_insert_count (inLexique, operand_18607->mValue, var_cas_count COMMA_SOURCE_FILE_AT_LINE (612)) ;
              }else{
              }
            }
          }
          GGS_stringset  var_cas_refTasks = GGS_stringset ::constructor_emptySet () ;
          const GGS_bool cond_19544 = var_cas_tasksForEvent.reader_hasKey (operand_18607->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (616))) ;
          if (cond_19544.isBuiltAndTrue ()) {
            var_cas_tasksForEvent.modifier_delete (inLexique, operand_18607->mValue, var_cas_refTasks COMMA_SOURCE_FILE_AT_LINE (617)) ;
          }
          var_cas_refTasks.addAssign_operation (operand_18441->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (619))) ;
          var_cas_tasksForEvent.modifier_add (inLexique, operand_18607->mValue, var_cas_refTasks COMMA_SOURCE_FILE_AT_LINE (620)) ;
        }
      }
      var_cas_maskForTask.modifier_insert_mask (inLexique, operand_18441->mKey, var_cas_event_mask COMMA_SOURCE_FILE_AT_LINE (622)) ;
    }
  }
  {
    GGS_event_map::cEnumerator enumerator_19770 (var_cas_cpu.reader_events (inLexique COMMA_SOURCE_FILE_AT_LINE (628)), true) ;
    const GGS_event_map::cElement * operand_19770 = NULL ;
    while (((operand_19770 = enumerator_19770.nextObject ()))) {
      macroValidPointer (operand_19770) ;
      GGS_event_mask_obj  var_cas_eventMask = operand_19770->mInfo.event.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (629)) ;
      { const GGS_event_mask_obj _var_20001 = var_cas_eventMask ; // CAST instruction
        if (_var_20001.getPtr () != NULL) {
          macroValidPointer (_var_20001.getPtr ()) ;
          if (typeid (cPtr_event_mask_user_obj) == typeid (* (_var_20001.getPtr ()))) {
            const GGS_event_mask_user_obj var_cas_emu (_var_20001.getPtr ()) ;
            var_cas_eventMasks.modifier_put (inLexique, operand_19770->mKey, var_cas_emu.reader_mask (inLexique COMMA_SOURCE_FILE_AT_LINE (632)).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (632)) COMMA_SOURCE_FILE_AT_LINE (632)) ;
          }else{
          }
        }
      }
    }
  }
  GGS_sorted_events  var_cas_sortedEvents = GGS_sorted_events ::constructor_emptySortedList () ;
  {
    GGS_event_usage_map::cEnumerator enumerator_20165 (var_cas_evt_usage, true) ;
    const GGS_event_usage_map::cElement * operand_20165 = NULL ;
    while (((operand_20165 = enumerator_20165.nextObject ()))) {
      macroValidPointer (operand_20165) ;
      var_cas_sortedEvents.addAssign_operation (operand_20165->mKey, operand_20165->mInfo.count) ;
    }
  }
  {
    GGS_sorted_events::cEnumerator enumerator_20341 (var_cas_sortedEvents, true) ;
    const GGS_sorted_events::cElement * operand_20341 = NULL ;
    while (((operand_20341 = enumerator_20341.nextObject ()))) {
      macroValidPointer (operand_20341) ;
      const GGS_bool cond_21726 = var_cas_tasksForEvent.reader_hasKey (operand_20341->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (652))) ;
      if (cond_21726.isBuiltAndTrue ()) {
        GGS_stringset  var_cas_tasks ;
        const GGS_stringset_map  temp_20449 = var_cas_tasksForEvent ;
        if (temp_20449.isBuilt ()) {
          temp_20449 (HERE)->method_get (inLexique, operand_20341->event_name, var_cas_tasks COMMA_SOURCE_FILE_AT_LINE (654)) ;
        }
        GGS_uint64  var_cas_mask = GGS_uint64 (0ULL) ;
        {
          GGS_stringset::cEnumerator enumerator_20516 (var_cas_tasks, true) ;
          while (enumerator_20516.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            const GGS_task_mask  temp_20581 = var_cas_maskForTask ;
            if (temp_20581.isBuilt ()) {
              temp_20581 (HERE)->method_get_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_20516._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (658)) ;
            }
            var_cas_mask = (var_cas_mask).operator_or (var_cas_tm) ;
            enumerator_20516.next () ;
          }
        }
        GGS_uint64  var_cas_bit = GGS_uint64 (1ULL) ;
        GGS_uint _variant_20908 = GGS_uint (32U) ;
        GGS_bool _condition_20908 (_variant_20908.isBuilt (), true) ;
        while (_condition_20908.isBuiltAndTrue ()) {
          _condition_20908 = ((var_cas_bit).operator_strictInf (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (665)))).operator_and (((var_cas_bit).operator_and ((var_cas_mask).operator_tilde ())).operator_isEqual (GGS_uint64 (0ULL))) ;
          if (_condition_20908.isBuiltAndTrue ()) {
            if (_variant_20908.uintValue () == 0) {
              inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (667)) ;
              _condition_20908 = GGS_bool (false) ;
            }else{
              _variant_20908.decrement_operation (inLexique COMMA_HERE) ;
              var_cas_bit = var_cas_bit.left_shift_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (666)) ;
            }
          }
        }
        const GGS_bool cond_21079 = (var_cas_bit).operator_strictSup (GGS_uint ::constructor_max (inLexique COMMA_HERE).reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (668))) ;
        if (cond_21079.isBuiltAndTrue ()) {
          operand_20341->event_name.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("All event mask bits are already use, event ")).operator_concat (operand_20341->event_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (669)))).operator_concat (GGS_string (" can't be created")) COMMA_SOURCE_FILE_AT_LINE (670)) ;
        }
        {
          GGS_stringset::cEnumerator enumerator_21203 (var_cas_tasks, true) ;
          while (enumerator_21203.hasCurrentObject ()) {
            GGS_uint64  var_cas_tm ;
            var_cas_maskForTask.modifier_del_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21203._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (675)) ;
            var_cas_tm = (var_cas_bit).operator_or (var_cas_tm) ;
            var_cas_maskForTask.modifier_insert_mask (inLexique, GGS_lstring ::constructor_new (inLexique, enumerator_21203._key (HERE), GGS_location (inLexique) COMMA_HERE), var_cas_tm COMMA_SOURCE_FILE_AT_LINE (677)) ;
            enumerator_21203.next () ;
          }
        }
        var_cas_eventMasks.modifier_put (inLexique, operand_20341->event_name, var_cas_bit COMMA_SOURCE_FILE_AT_LINE (680)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_computeEvents\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of routine "generate_all"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generate_all (C_Compiler & inLexique,
                                const GGS_root_obj   var_cas_cpu COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generate_all at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_temp_dir = function_templates_directory (inLexique, GGS_string ("code") COMMA_SOURCE_FILE_AT_LINE (704)) ;
  const GGS_bool cond_26221 = (var_cas_temp_dir).operator_isNotEqual (GGS_string ("")) ;
  if (cond_26221.isBuiltAndTrue ()) {
    GGS_string var_cas_target = gOption_goil_5F_options_target_5F_platform.reader_value () ;
    const GGS_bool cond_26133 = (var_cas_target).operator_isNotEqual (GGS_string ("")) ;
    if (cond_26133.isBuiltAndTrue ()) {
      GGS_string var_cas_types = function_template_string (inLexique, GGS_string ("code"), GGS_string ("types") COMMA_SOURCE_FILE_AT_LINE (710)) ;
      GGS_config  var_cas_cfg = GGS_config ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_lstring  var_cas_cfg_file = function_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) ;
      const GGS_bool cond_22450 = (var_cas_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (714))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_22450.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (715)) ;
        }
      }
      GGS_lstring  var_cas_extra_cfg_file = function_extra_config_file (inLexique COMMA_SOURCE_FILE_AT_LINE (718)) ;
      const GGS_bool cond_22633 = (var_cas_extra_cfg_file.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (719))).operator_isNotEqual (GGS_string ("")) ;
      if (cond_22633.isBuiltAndTrue ()) {
        const GGS_string _depExtension = GGS_string ("") ;
        const GGS_string _depPath = GGS_string ("") ;
        if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
          C_Grammar_cfg_5F_grammar::_performSourceFileParsing_ (inLexique,
                                        _depExtension.string (),
                                        _depPath.string (),
                                        NULL,
                                        var_cas_extra_cfg_file,
                                        var_cas_cfg
                                        COMMA_SOURCE_FILE_AT_LINE (720)) ;
        }
      }
      GGS_os_config  var_cas_generated_conf = function_os_cfg (inLexique, var_cas_cpu COMMA_SOURCE_FILE_AT_LINE (723)) ;
      GGS_uint  var_cas_max_task_prio ;
      GGS_uint  var_cas_max_prio ;
      GGS_prio_map  var_cas_actual_prio = GGS_prio_map ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_compute_actual_task_priority (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (729)),  var_cas_actual_prio,  var_cas_max_task_prio COMMA_SOURCE_FILE_AT_LINE (728)) ;
      ::routine_compute_actual_isr_priority (inLexique,  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (734)),  var_cas_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio COMMA_SOURCE_FILE_AT_LINE (733)) ;
      GGS_prio_map  var_cas_rez_actual_prio ;
      GGS_stringMap  var_cas_rez_comments ;
      ::routine_compute_rez_priority (inLexique,  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (742)),  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (743)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (744)),  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_rez_comments COMMA_SOURCE_FILE_AT_LINE (741)) ;
      GGS_prio_list  var_cas_ready_list ;
      ::routine_compute_ready_list (inLexique,  var_cas_actual_prio,  var_cas_rez_actual_prio,  var_cas_max_task_prio,  var_cas_max_prio,  var_cas_ready_list COMMA_SOURCE_FILE_AT_LINE (750)) ;
      GGS_stringMap  var_cas_app_for_obj ;
      ::routine_compute_app_for_obj (inLexique,  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (759)),  var_cas_app_for_obj COMMA_SOURCE_FILE_AT_LINE (758)) ;
      ::routine_generate_types (inLexique,  var_cas_cpu.reader_tasks (inLexique COMMA_SOURCE_FILE_AT_LINE (764)),  var_cas_cpu.reader_isrs (inLexique COMMA_SOURCE_FILE_AT_LINE (765)),  var_cas_cpu.reader_alarms (inLexique COMMA_SOURCE_FILE_AT_LINE (766)),  var_cas_cpu.reader_counters (inLexique COMMA_SOURCE_FILE_AT_LINE (767)),  var_cas_cpu.reader_resources (inLexique COMMA_SOURCE_FILE_AT_LINE (768)),  var_cas_cpu.reader_scheduletables (inLexique COMMA_SOURCE_FILE_AT_LINE (769)),  var_cas_cpu.reader_applis (inLexique COMMA_SOURCE_FILE_AT_LINE (770)),  var_cas_max_prio,  var_cas_types COMMA_SOURCE_FILE_AT_LINE (763)) ;
      GGS_eventMaskMap  var_cas_eventMasks ;
      ::routine_computeEvents (inLexique,  var_cas_cpu,  var_cas_eventMasks COMMA_SOURCE_FILE_AT_LINE (775)) ;
      GGS_goilTemplateVariableMap  var_cas_sysCfg = GGS_goilTemplateVariableMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      ::routine_setEnvData (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (779)) ;
      ::routine_setProcessesList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (780)) ;
      ::routine_setBasicTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (781)) ;
      ::routine_setExtendedTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (782)) ;
      ::routine_setTasksList (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (783)) ;
      ::routine_setISRs1List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (784)) ;
      ::routine_setISRs2List (inLexique,  var_cas_cpu,  var_cas_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (785)) ;
      ::routine_setCountersList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (786)) ;
      ::routine_setEventsList (inLexique,  var_cas_cpu,  var_cas_eventMasks,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (787)) ;
      ::routine_setAlarmsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (788)) ;
      ::routine_setResourcesList (inLexique,  var_cas_cpu,  var_cas_rez_actual_prio,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (789)) ;
      ::routine_setMessagesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (790)) ;
      ::routine_setScheduletablesList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (791)) ;
      ::routine_setOsapplicationsList (inLexique,  var_cas_cpu,  var_cas_app_for_obj,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (792)) ;
      ::routine_setProcessCount (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (793)) ;
      ::routine_setBuildConfig (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (794)) ;
      ::routine_setReadyList (inLexique,  var_cas_cpu,  var_cas_ready_list,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (795)) ;
      ::routine_addBoolValue (inLexique,  var_cas_sysCfg,  GGS_lstring ::constructor_new (inLexique, GGS_string ("AUTOSAR"), GGS_location (inLexique) COMMA_HERE),  gOption_goil_5F_options_autosar_5F_on.reader_value () COMMA_SOURCE_FILE_AT_LINE (796)) ;
      ::routine_addUnsignedValue (inLexique,  var_cas_sysCfg,  function_lstringWith (inLexique, GGS_string ("MAXTASKPRIORITY") COMMA_SOURCE_FILE_AT_LINE (797)),  var_cas_max_task_prio.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (797)) COMMA_SOURCE_FILE_AT_LINE (797)) ;
      ::routine_setOsConfig (inLexique,  var_cas_cpu,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (798)) ;
      ::routine_setInterruptSources (inLexique,  var_cas_cfg,  var_cas_sysCfg COMMA_SOURCE_FILE_AT_LINE (799)) ;
      GGS_string var_cas_goilLog = function_computeTemplate (inLexique, GGS_string (""), var_cas_sysCfg, GGS_string ("root") COMMA_SOURCE_FILE_AT_LINE (803)) ;
      const GGS_bool cond_25595 = gOption_goil_5F_options_generate_5F_log.reader_value () ;
      if (cond_25595.isBuiltAndTrue ()) {
        const GGS_string temp_25567 = var_cas_goilLog ;
        if (temp_25567.isBuilt ()) {
          temp_25567 (HERE)->method_writeToFile (inLexique, GGS_string ("goil.log") COMMA_SOURCE_FILE_AT_LINE (805)) ;
        }
      }
      GGS_string var_cas_directory = function_projectName (inLexique COMMA_SOURCE_FILE_AT_LINE (809)) ;
      GGS_string var_cas_types_file = GGS_string ("tpl_app_custom_types.h") ;
      GGS_uint  var_cas_error_count = GGS_uint ::constructor_errorCount (inLexique COMMA_HERE) ;
      var_cas_types_file = ((var_cas_directory).operator_concat (GGS_string ("/"))).operator_concat (var_cas_types_file) ;
      const GGS_bool cond_26118 = (var_cas_error_count).operator_isEqual (GGS_uint (0U)) ;
      if (cond_26118.isBuiltAndTrue ()) {
        const GGS_bool cond_26036 = gOption_galgas_5F_cli_5F_options_verbose_5F_output.reader_value () ;
        if (cond_26036.isBuiltAndTrue ()) {
          inLexique.printMessage (((GGS_string ("creating ")).operator_concat (var_cas_types_file)).operator_concat (GGS_string ("\n")) COMMA_SOURCE_FILE_AT_LINE (819)) ;
        }
        const GGS_string temp_26089 = var_cas_types ;
        if (temp_26089.isBuilt ()) {
          temp_26089 (HERE)->method_makeDirectoryAndWriteToFile (inLexique, var_cas_types_file COMMA_SOURCE_FILE_AT_LINE (821)) ;
        }
      }
    }else if (cond_26133.isBuiltAndFalse ()) {
      inLexique.printMessage (GGS_string ("No target platform given, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (825)) ;
    }
  }else if (cond_26221.isBuiltAndFalse ()) {
    inLexique.printMessage (GGS_string ("No template directory defined, compiling aborted\n") COMMA_SOURCE_FILE_AT_LINE (828)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generate_all\n") ;
  #endif
}

//---------------------------------------------------------------------------*

