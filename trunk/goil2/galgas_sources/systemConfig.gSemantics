semantics systemConfig :

import "implementation_types.gSemantics";

import "goil_types_root.gSemantics";
import "template_invocation.gSemantics";
import "goil_options.gOption";


reader @applicationDefinition templateData
  ??@implementation imp
  ->@goilTemplateVariableMap cfg
:
  cfg := [@goilTemplateVariableMap emptyMap];

  #
  # First setup the general configuration data
  #
  addStringValue !?cfg !lstringWith[!"OILFILENAME"] ![[@string stringWithSourceFilePath] lastPathComponent];
  addStringValue !?cfg ![@lstring new !"CPUNAME" ![name location]] ![name string];
  addStringValue !?cfg ![@lstring new !"TIMESTAMP" !here] ![@string stringWithCurrentDateTime];

  foreach objects do
    message [lkey string]."\n";
    # Check if the object is multiple or not. If multiple, attributes
    # are stored in a struct otherwise instances are stored in a map.
    @implementationObject implementationObject;
    [[imp imp] get !lkey ?implementationObject];
    if [implementationObject multiple] then
      message "*** multiple\n";
    else
      @goilTemplateFieldMap attributes [emptyMap];
      message "*** single\n";
    end if;
    foreach [objectsOfKind objects] do
      
    end foreach;
  end foreach;
end reader;

end semantics;