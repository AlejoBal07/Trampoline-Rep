OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {
    /* This fix the default STACKSIZE of tasks */
    TASK {
        UINT32 STACKSIZE = 300 ;
    } ;

    /* This fix the default STACKSIZE of ISRs */
    ISR {
        UINT32 STACKSIZE = 200 ;
    } ;
};

CPU serial {
  OS config {
    STATUS = EXTENDED;
    PAINT_STACK = TRUE;
    PAINT_REGISTERS = TRUE;
    
    BUILD = TRUE {
      TRAMPOLINE_BASE_PATH = "../../../../../..";
      APP_SRC = "semaphore.c";
      APP_NAME = "serial_exe";
      LIBRARY = serial {
        TXBUFFER = 4;
      };
      CFLAGS  = "-O0";
      LDFLAGS = "-Map=serial.map";
      COMPILER = "arm-none-eabi-gcc";
      ASSEMBLER = "arm-none-eabi-as";
      LINKER = "arm-none-eabi-ld";
      COPIER = "arm-none-eabi-objcopy";
      SYSTEM = CMAKE {VSCODE = TRUE;};
    };
    SYSTEM_CALL = TRUE;
    MEMMAP = TRUE {
      COMPILER = gcc;
      LINKER = gnu_ld { SCRIPT = "script.ld"; };
      ASSEMBLER = gnu_as;
      MEMORY_PROTECTION = FALSE;
    };
  };
  
  APPMODE appStd {};

  //mutex for Serial line access
  SEMAPHORE semSerial { TOKEN = 1; };
  
  TASK serial_TX_long {
    PRIORITY = 2;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  ALARM ALSerial_TX_long {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = serial_TX_long;
    };
    AUTOSTART = TRUE {
      APPMODE = appStd;
      ALARMTIME = 250;
      CYCLETIME = 250;
    };
  };

  TASK serial_TX_short {
    PRIORITY = 3; //higher priority
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  ALARM ALSerial_TX_short {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = serial_TX_short;
    };
    AUTOSTART = TRUE {
      APPMODE = appStd;
      // offset is 1ms after serial_TX_long => it will preempt it
      ALARMTIME = 251;
      CYCLETIME = 250;
    };
  };

  //ISR required by the serial TX
  ISR usart {
    CATEGORY = 1;
    PRIORITY = 10;
    SOURCE = USART2_IRQ; //TX on PA2/A7
  };
};

