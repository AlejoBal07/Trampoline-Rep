OIL_VERSION = "2.5";

IMPLEMENTATION trampoline {
  /* This fix the default STACKSIZE of tasks */
  TASK {
    UINT32 STACKSIZE = 200 ;
  } ;

  /* This fix the default STACKSIZE of ISRs */
  ISR {
    UINT32 STACKSIZE = 200 ;
  } ;
};

CPU blink {
  OS config {
    // CHECKPOINTING = TRUE { MODE = PERIODIC 
    //                           {CYCLETIME = 5000;
    //                           HIBERNATE_THRESHOLD = 2500;
    //                           RESUME_FROM_HIBERNATE_THRESHOLD = 2800;
    //                           };
    // };
    STATUS = EXTENDED;
    PAINT_STACK = TRUE;
    PAINT_REGISTERS = TRUE;
    BUILD = TRUE {
      TRAMPOLINE_BASE_PATH = "../../../../../..";
      APP_SRC = "free_running.c";
      APP_SRC = "leds.c";
      APP_NAME = "free_running_exe";
      LIBRARY = serial {
        TXBUFFER = 32;
        RXBUFFER = 16;
      };
      CFLAGS  = "-O0 -g3 -gdwarf-2 -ggdb"; //gdb usage
      LDFLAGS = "-Map=blink.map";
      //use either msp-gcc (provided with Energia)..
//      COMPILER  = "msp430-gcc";
//      ASSEMBLER = "msp430-gcc";
//      LINKER    = "msp430-ld";
//      COPIER    = "msp430-objcopy";
      //or GCC for MSP (provided by TI)
      COMPILER  = "msp430-elf-gcc";
      ASSEMBLER = "msp430-elf-gcc";
      LINKER    = "msp430-elf-ld";
      COPIER    = "msp430-elf-objcopy";
      CFLAGS    = "-I/opt/msp430-gcc-support-files/include";
      SYSTEM = PYTHON;
      // LIBRARY = serial {
      //   TXBUFFER = 100;
      //   RXBUFFER=100;
      // };
      // LIBRARY = checkpointing;
    };
    SYSTEM_CALL = TRUE;
    MEMMAP = TRUE {
      COMPILER = gcc;
      LINKER = gnu_ld { SCRIPT = "script.ld"; };
      ASSEMBLER = gnu_as;
      MEMORY_PROTECTION = FALSE;
    };
  };

  APPMODE std {};

  TASK free_running {
    PRIORITY = 3;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
  };

  ALARM free_running_alarm {
    COUNTER = SystemCounter;
    ACTION = ACTIVATETASK {
      TASK = free_running;
    };
    AUTOSTART = TRUE {
      APPMODE = std;
      ALARMTIME = 1000;
      CYCLETIME = 1000;
    };
  };

  ISR timerA {
    CATEGORY = 2;
    PRIORITY = 1;
    SOURCE = TIMER0_A0_VECTOR {
      BIT = 6;
    };
  };
};
