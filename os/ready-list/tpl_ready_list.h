/**
 * @file tpl_ready_list.h
 *
 * @section desc File description
 *
 * Header file specifying the API of the ready list. 
 *
 * @section copyright Copyright
 *
 * Trampoline RTOS
 *
 * Trampoline is copyright (c) CNRS, University of Nantes, Ecole Centrale de Nantes
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the GNU Public Licence V2.
 * Check the LICENSE file in the root directory of Trampoline
 *
 * @section infos File informations
 *
 */

#ifndef TPL_READY_LIST_H
#define TPL_READY_LIST_H

#include "tpl_compiler.h"
#include "tpl_os_internal_types.h"
#include "tpl_os_multicore_macros.h"

#if NUMBER_OF_CORES > 1
#include "tpl_os_multicore.h"
#endif

#include "tpl_heap_ready_list.h"

/**
 * @internal
 *
 * In monocore implementation tpl_ready_list is a heap with a size
 * automatically generated by goil from the application description. Each
 * entry is a key and a proc id. The key is used to sort the heap and is
 * the concatenation of the priority of the proc and its job rank of
 * activation.
 *
 * In multicore implementation, tpl_ready_list is an array of pointers to
 * a heap per core. tpl_ready_list is indexed by the core identifier.
 */

/*
 * MISRA RULE 27 VIOLATION: These 2 variables are used only in this file
 * but declared in the configuration file, this is why they do not need
 * to be declared as external in a header file
 */

#if NUMBER_OF_CORES > 1

#define OS_START_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"
extern CONSTP2VAR(tpl_heap_entry, OS_CONST, OS_VAR) tpl_ready_list[];
#define OS_STOP_SEC_CONST_UNSPECIFIED
#include "tpl_memmap.h"

#else

#define OS_START_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"
extern VAR(tpl_heap_entry, OS_VAR) tpl_ready_list[];
#define OS_STOP_SEC_VAR_UNSPECIFIED
#include "tpl_memmap.h"

#endif

#define OS_START_SEC_CODE
#include "tpl_memmap.h"

extern FUNC(tpl_priority, OS_CODE) tpl_highest_ready_prio(CORE_ID_OR_VOID(core_id));
/**
 * @internal
 *
 * Get the highest priority READY process from the queue
 */
extern FUNC(tpl_heap_entry, OS_CODE) tpl_front_proc(CORE_ID_OR_VOID(core_id));

extern FUNC(void, OS_CODE) tpl_put_preempted_proc(CONST(tpl_proc_id, AUTOMATIC) proc_id);

extern FUNC(void, OS_CODE) tpl_put_new_proc(CONST(tpl_proc_id, AUTOMATIC) proc_id);

extern FUNC(tpl_heap_entry, OS_CODE) tpl_remove_front_proc(CORE_ID_OR_VOID(core_id));

#if WITH_OSAPPLICATION == YES
extern FUNC(void, OS_CODE) tpl_remove_proc(CONST(tpl_proc_id, AUTOMATIC) proc_id);
#endif

#define OS_STOP_SEC_CODE
#include "tpl_memmap.h"

#endif /* TPL_READY_LIST_H */

/* End of file tpl_ready_list.h */
