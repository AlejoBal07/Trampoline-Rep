/**
 * @file % ! FILENAME %
 *
 * @section desc File description
 *
 * Time enforcement data structure generated from application % !CPUNAME %
 * Automatically generated by goil on % !TIMESTAMP %
 * from root OIL file % !OILFILENAME %
 *
 * @section copyright Copyright
 *
 * Trampoline OS
 *
 * Trampoline is copyright (c)
 * CNRS, University of Nantes, Ecole Centrale de Nantes
 * Trampoline is protected by the French intellectual property law.
 *
 * This software is distributed under the GNU Public Licence V2.
 * Check the LICENSE file in the root directory of Trampoline
 *
 */

%

let timerMap := [TIMER mapBy: "NAME"]

# Check the states of the TIMER that appear in the strategy exist
foreach action in OS::STRATEGY::ACTION do
  foreach when in action::VALUE_S::WHEN do
    foreach mark in when::MARKING do
      if mark::VALUE == "TIMER" then
        let timer := timerMap[mark::VALUE_S::TIMER]
        let found := false
        foreach state in timer::STATE do
          if state::NAME == mark::VALUE_S::STATE then
            let found := true
          end if
        end foreach
        if not found then
          error mark::VALUE_S::STATE : "TIMER state does not exist"
        end if
      end if
    end foreach 
  end foreach
end foreach

# Output variables
# first gather all used variables
let varSet := @! !

if exists OS::STRATEGY::ACTION then
  foreach action in OS::STRATEGY::ACTION do
    if exists action::VALUE_S::BEFORE::VAR then
      foreach var in action::VALUE_S::BEFORE::VAR do
        [!varSet add: var::NAME]
      end foreach
    end if
    if exists action::VALUE_S::AFTER::VAR then
      foreach var in action::VALUE_S::BEFORE::VAR do
        [!varSet add: var::NAME]
      end foreach
    end if
    if exists action::VALUE_S::WHEN then
      foreach when in action::VALUE_S::WHEN do
        if exists when::MARKING then
          foreach mark in when::MARKING do
            if exists mark::VALUE_S::VAR then
              [!varSet add: mark::VALUE_S::VAR]
            end if
          end foreach
        end if
      end foreach
    end if
  end foreach
end if

foreach var in varSet do
%
STATIC VAR(uint32, OS_VAR) % !OS::STRATEGY::NAME %_% !var % = 0;%
end foreach

# Output the TIMERs

if exists TIMER then
  # first check states are all listed
  foreach tim in TIMER do
    let stateSet := @! !
    foreach state in tim::STATE do
      [!stateSet add: state::NAME]
    end foreach
    foreach state in tim::STATE do
      if exists state::STATE then
        if not [stateSet contains: state::STATE] then
          error state : "State " + state::STATE + " does not exist"
        end if 
      end if
    end foreach
  end foreach

  foreach tim in TIMER do
    let stateList := @( )
    foreach state in tim::STATE do
      if exists state::DATE then
        let stateList += state
      end if
    end foreach

    sort stateList by DATE <

%
/*
 * Callback for timer % !tim::NAME %
 * Each time the timer reaches a new listed date, it is relaunched
 * with the next date
 */
FUNC(void, OS_CODE) % !tim::NAME %_callback()
{
  typedef enum { %
    foreach state in tim::STATE do
      %state_%!state::NAME
      between %, %
    end foreach
  % } states;
  STATIC CONST(tpl_tick, AUTOMATIC) dates[] = { % 
    foreach state in stateList do
      !state::DATE
      between %, %
    end foreach
  % };
  STATIC CONST(uint32, AUTOMATIC) datesCount = % ![stateList length]%;
  STATIC VAR(states, AUTOMATIC) state = %
    foreach state in stateList do
      if exists state::INITIAL default (false) then
        %state_%!state::NAME
      end if
    end foreach
  %;
  
  switch (state) {%
    foreach state in stateList do
%
    case state_% !state::NAME % : 
    %
    end foreach
%
  }
}
%
  end foreach
end if
