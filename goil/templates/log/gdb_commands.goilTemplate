#
# Set of GDB user defined commands for debugging application % !CPUNAME %
# Automatically generated by goil on % !TIMESTAMP %
# from root OIL file % !OILFILENAME %
# 
# Trampoline RTOS
#
%

if exists OS::GDBCOMMANDS_S::PORT then
%
#
# Connect to target, load the program, put a pb on main
#
tar extended-remote : % !OS::GDBCOMMANDS_S::PORT %
load
break main
%
end if

let internal_rez := @()
let standard_rez := @()
foreach rez in RESOURCES do
  if rez::RESOURCEPROPERTY == "INTERNAL" then 
    let internal_rez += rez
  elsif rez::RESOURCEPROPERTY == "STANDARD" then
    let standard_rez += rez
  end if
end foreach
if OS::USERESSCHEDULER then
  let standard_rez += @{ NAME: "res_sched" }
end if

%
define _print_internal_rez_name%
foreach rez in internal_rez do
  if rez::NAME == "INTERNAL_RES_SCHEDULER" then
%
  if $arg0 == &% !rez::NAME
  else
%
  if $arg0 == &% !rez::NAME %_rez_desc%
  end if%
    printf "% !rez::NAME %"
  end%
end foreach
%
  if $arg0 == 0
    printf "NONE"
  end
end

define _print_rez_name%
foreach rez in standard_rez do%
  if $arg0 == &% !rez::NAME %_rez_desc%
  if rez::NAME == "res_sched" then %
    printf "RES_SCHEDULER"%
  else%
    printf "% !rez::NAME % "%
  end if%
  end%
end foreach
%
end

define _print_held_rez
  _print_rez_name $arg0
  if $arg0 != 0
    _print_held_rez $arg0->next_res
  end
end

define _print_task_state
  set $_state = $arg0 & 0x3
  if $_state == 0
    printf "SUSPENDED"
  else
    if $_state == 1
      printf "READY"
    else
      if $_state == 2
        printf "RUNNING"
      else
        if $_state == 3
          printf "WAITING"
        end
      end
    end
  end
end
%

foreach task in TASKS do
%
define _% !task::NAME %
  printf "Task % !task::NAME % (id = \%d, %if exists task::EVENT then %EXTENDED% else %BASIC% end if%):\\n", % !task::NAME %_task_stat_desc.id
  printf "\tstate             = "
  _print_task_state % !task::NAME %_task_desc.state
  printf "\\n\tpriority          = \%d/\%d\\n",% !task::NAME %_task_desc.priority >> % ! PRIORITY_SHIFT %,% !task::NAME %_task_stat_desc.base_priority
  printf "\tactivate_count    = \%d/\%d\\n",% !task::NAME %_task_desc.activate_count,% !task::NAME %_task_stat_desc.max_activate_count
  printf "\tinternal_resource = "
  _print_internal_rez_name % !task::NAME %_task_stat_desc.internal_resource
  printf "\\n"
  printf "\tresources         = [ "
  _print_held_rez % !task::NAME %_task_desc.resources
  printf "]\\n"
end

define b_% !task::NAME %
  b % !task::NAME %_function
end
%
end foreach

%
define _print_rez_id%
foreach rez in standard_rez do%
  if $arg0 == &% !rez::NAME %_rez_desc
    printf "% !INDEX %"
  end%
end foreach
%
end

define _print_task_name_from_id
  set $_found = 0%
foreach proc in PROCESSES do%
  if $arg0 == % !INDEX %
    printf "% !proc::NAME %"
    set $_found = 1
  end%
end foreach
%
  if $_found == 0
    printf "NONE"
  end
end

%
foreach rez in standard_rez do
%
define _% !rez::NAME %
  printf "Resource % !rez::NAME % (id = \%d, STANDARD):\\n",% !rez::NAME %
  printf "\tceiling priority    = \%d\\n",% !rez::NAME %_rez_desc.ceiling_priority
  printf "\towner               = "
  _print_task_name_from_id % !rez::NAME %_rez_desc.owner
  printf "\\n"
  if % !rez::NAME %_rez_desc.owner != -1
  printf "\towner prev priority = \%d\\n",% !rez::NAME %_rez_desc.owner_prev_priority >> % ! PRIORITY_SHIFT %
  end
end
%
end foreach

foreach rez in internal_rez do
%
define _% !rez::NAME 
  let rezDescName := rez::NAME
  if rez::NAME != "INTERNAL_RES_SCHEDULER" then
    let rezDescName := rezDescName + "_rez_desc"
  end if  
%
  printf "Resource % !rez::NAME % (INTERNAL):\\n"
  printf "\tceiling priority    = \%d\\n",% !rezDescName %.ceiling_priority
  printf "\ttaken               = \%d\\n",% !rezDescName %.taken
  if % !rez::NAME %_rez_desc.taken == 1
    printf "\towner prev priority = \%d\\n",% !rezDescName %.owner_prev_priority >> % ! PRIORITY_SHIFT %
  end
end
%
end foreach

%
define _print_counter_name%
foreach cnt in COUNTERS do
%
  if $arg0 == &% !cnt::NAME %_counter_desc
    printf "% !cnt::NAME %"
  end%
end foreach%
end

define _print_alarm_state
  if $arg0 == 0
    printf "SLEEP"
  else
    if $arg0 == 1
      printf "ACTIVE"
    else
      if $arg0 == 2
        printf "AUTOSTART"
      else
        printf "?"
      end
    end
  end
end

%

let use_activate_task_action := false
let use_set_event_action := false
foreach alarm in ALARMS do
  if alarm::ACTION == "ACTIVATETASK" then
    let use_activate_task_action := true
  elsif alarm::ACTION == "SETEVENT" then 
    let use_set_event_action := true
  end if
end foreach

%

define _print_alarm_action%
if use_activate_task_action then%
  if ((int)$arg0 & ~1) == tpl_action_activate_task
    printf "ACTIVATETASK"
  end%
end if
if use_set_event_action then%
  if ((int)$arg0 & ~1) == tpl_action_set_event
    printf "SETEVENT"
  end%
end if%
  if ((int)$arg0 & ~1) == tpl_action_callback
    printf "CALLBACK"
  end
end
%
foreach alarm in ALARMS do
%
define _% !alarm::NAME%
  printf "Alarm % !alarm::NAME% (id = \%d):\\n",% !alarm::NAME %
  printf "\tcounter = "
  _print_counter_name % !alarm::NAME %_alarm_desc.stat_part->counter
  printf " (\%d)\\n",% !alarm::NAME %_alarm_desc.stat_part->counter->current_date
  printf "\tstate   = "
  _print_alarm_state % !alarm::NAME %_alarm_desc.state
  printf "\\n"
  if % !alarm::NAME %_alarm_desc.state == 1
    printf "\tdate    = \%d\\n",% !alarm::NAME %_alarm_desc.date
    if % !alarm::NAME %_alarm_desc.cycle != 0
      printf "\tcycle   = \%d\\n",% !alarm::NAME %_alarm_desc.cycle
    end
  end
  printf "\taction  = "
  _print_alarm_action ((tpl_action*)((tpl_alarm_static*)% !alarm::NAME %_alarm_desc.stat_part)->action)->action
  printf "\\n"
end
%
end foreach

