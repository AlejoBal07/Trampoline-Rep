#! /usr/bin/env python3
# -*- coding: UTF-8 -*-
import json
import sys

#---------------------------------
#read static information JSON file
#---------------------------------
staticInfo = []
try:
    with open('%!PROJECT%/tpl_static_info.json') as staticInfoFile:
        staticInfo = json.load(staticInfoFile)
except OSError as e:
    print('static information file not found (events.json). '
          'You should enable the trace in the .oil file and '
          'recompile your application.')
    sys.exit(1)

#---------------------------------
#Ok, now trace JSON file
#---------------------------------
trace = []
try:
    with open('./trace.json')  as traceFile:
        trace = json.load(traceFile)
except OSError as e:
    print('trace file not found (trace.json). '
          'You should run your application.')
    sys.exit(1)

#---------------------------------
#Now, we add some specific stuff for Trampoline
#---------------------------------
# proc (task+isr) names
procNames = []
for proc in staticInfo['task']:
    procNames.append(proc['NAME'])
procNames.append('idle') #idle task is the last one.
# OS constant names (task states, alarm states)
taskStates = ['SUSPENDED','READY','RUNNING','WAITING','AUTOSTART','READY_AND_NEW']
timeObjStates = ['SUSPENDED','READY','RUNNING','WAITING','AUTOSTART','READY_AND_NEW']
# track the running task (init to idle)
runningTask = len(procNames)-1


#---------------------------------
#Exploit the trace, chronologically
#---------------------------------
for elt in trace:
    print('[{0: >10}] '.format(elt['ts']), end='')
    if elt['type'] == 'proc':        #proc state udpdate
        i = int(elt['proc_id'])
        st=int(elt['target_state'])
        print('proc {0: <20} change to state {1}'.format(procNames[i],taskStates[st]))
        if taskStates[st]=='RUNNING': #//change to running
            runningTask = i
    elif elt['type'] == 'timeobj_expire': #alarm expire
        i = int(elt['timeobj_id'])
        to = staticInfo['alarm'][i]
        print('time object expired: {0}'.format(to['NAME']))
    elif elt['type'] == 'timeobj':   #alarm state update
        i = int(elt['timeobj_id'])
        print('time object "{0:>11}" change to state {1}'.format(
            to['NAME'],
            timeObjStates[int(elt['target_state'])]))
    elif elt['type'] == 'set_event': #send event
        target  = int(elt['target_task_id'])
        evtId   = int(elt['event'])-1
        evtName = staticInfo['task'][target]['EVENT'][evtId]['VALUE']
        print('Event {0:>12} (id {1}) sent to task {2}'.format(
            evtName,
            int(elt['event']),
            procNames[target]))
    elif elt['type'] == 'reset_event': #reset event
        target  = runningTask
        evtId   = int(elt['event'])-1
        evtName = staticInfo['task'][target]['EVENT'][evtId]['VALUE']
        print('task {0:>20} resets event {1:>10} (id {2})'.format(
            procNames[i],
            evtName,
            int(elt['event'])))
    else:
        print('unhandled type: {0}'.format(elt['type']))
