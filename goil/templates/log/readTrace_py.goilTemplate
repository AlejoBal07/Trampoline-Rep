#! /usr/bin/env python3
# -*- coding: UTF-8 -*-
import json
import sys
import argparse

if __name__ == '__main__':
    defaultTraceFile = 'trace.json'
    #arguments (no default arg for -i and -o to get None if not defined)
    parser = argparse.ArgumentParser(description='Use the trace tookit to get information on Trampoline behavior')
    #options -i (or -o,-s), with nargs
    #  * nothing => None
    #  * -i      => default (trace.json, ...)
    #  * -i file => file
    parser.add_argument("-i", "--input", type=str, nargs='?', const=defaultTraceFile, metavar='inputFile', help='use JSON input file.')
    parser.add_argument("-o", "--output", type=str, nargs='?', const=defaultTraceFile, metavar='outputFile', help='Store the event list into a JSON format for later use.')
    parser.add_argument("-s", "--serial", type=str, nargs='?', const='/dev/ttyACM1',metavar='serial', help='Use the serial line to get events.')
    parser.add_argument("-l", "--length", type=int, default=0,metavar='length', help='Number of events before end. 0 means endless.') #useful?
    args = parser.parse_args()
    #first, get access to files.
    traceToolFolder = "% !OS::BUILD_S::TRAMPOLINE_BASE_PATH %/extra/trace-tools"
    sys.path.append(traceToolFolder)
    try:
        import StaticInfo
        import TraceReader
        import TraceEvaluate
        import TraceExport
    except ImportError:
        print("I can't find trace tools scripts")
        print("=> searched in '"+traceToolFolder+"'")
        print("Maybe the TRAMPOLINE_BASE_PATH is not correctly set in your .oil file")
        print("Correct it and run goil again.")
        sys.exit(1)
    #read static information
    si = StaticInfo.StaticInfo('%!PROJECT%/tpl_static_info.json')
    #reader    => getting raw events
    if not args.input and not args.serial:
        args.input = defaultTraceFile
    reader   = TraceReader.TraceReader(args.input)
    #evaluator => from raw events and Static info. Get events
    evaluate = TraceEvaluate.TraceEvaluate(si)
    #export    => font end (txt, gui)
    export   = TraceExport.TraceExport()
    evaluate.setExport(export)

    for rawEvent in reader.getEvent():
        evaluate.evaluate(rawEvent)



