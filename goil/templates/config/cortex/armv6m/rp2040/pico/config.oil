IMPLEMENTATION pico {
  // define libs
  OS {
    BOOLEAN [
      TRUE {
        ENUM [
          pico_base,pico_stdlib,pico_stdio
        ] LIBRARY[];
      },
      FALSE
    ] BUILD = FALSE;
  };
};

CPU pico {
  PLATFORM_FILES pico {
    PATH = "cortex/armv6m/rp2040/pico";
    CFILE = "boot2_w25q080_2_padded_checksum.s"; //should use C compiler, not ASM
    CFILE = "crt0.S";                            //should use C compiler, not ASM
  };

  LIBRARY pico_base {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_config;
	NEEDS = pico_rp2040_config;
	NEEDS = pico_platform;
	NEEDS = pico_generated;
    PATH = "src/common/pico_base/include";
	CHEADER = "pico.h";
  };

  //automatically included in SDK through 'config_autogen.h'
  LIBRARY pico_config { //PICO_CONFIG_HEADER_FILES
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
    PATH = "src/boards/include";
  };

  //automatically included in SDK through 'config_autogen.h'
  LIBRARY pico_generated {  //pico/version.h
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
    PATH = "build/generated/pico_base";
  };

  //automatically included in SDK through 'config_autogen.h'
  LIBRARY pico_rp2040_config { //PICO_RP2040_CONFIG_HEADER_FILES
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
    PATH = "src/rp2_common/cmsis/include/cmsis";
  };

  LIBRARY pico_platform {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
    PATH = "src/rp2_common/pico_platform/include";
  };
  
  LIBRARY pico_stdio {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_base;
	NEEDS = pico_sync;
	NEEDS = pico_time;
    PATH = "src/rp2_common/pico_stdio/include";
	CHEADER = "pico/stdio.h";
	CFILE = "../stdio.c";
  };
  LIBRARY pico_util {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_base;
    PATH = "src/common/pico_util/include";
	CFILE = "../datetime.c";
	CFILE = "../pheap.c";
	CFILE = "../queue.c";
  };

  LIBRARY pico_hw_claim {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_base;
    PATH = "src/rp2_common/hardware_claim/include";
	CFILE = "../claim.c";
  };

  LIBRARY pico_hw_sync {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_base;
	NEEDS = pico_hw_claim;
    PATH = "src/rp2_common/hardware_sync/include";
	CFILE = "../sync.c";
  };

  LIBRARY pico_sync {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_base;
	NEEDS = pico_hw_sync;
    PATH = "src/common/pico_sync/include/";
	CFILE = "../critical_section.c";
	CFILE = "../lock_core.c";
	CFILE = "../mutex.c";
	CFILE = "../sem.c";
  };

  LIBRARY pico_hw_irq {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_base;
    PATH = "src/rp2_common/hardware_irq/include";
	CFILE = "../irq_handler_chain.S";
	CFILE = "../irq.c";
  };

  LIBRARY pico_hw_timer {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_hw_irq;
    PATH = "src/rp2_common/hardware_timer/include";
	CFILE = "../timer.c";
  };

  LIBRARY pico_time {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_hw_timer;
	NEEDS = pico_util;
    PATH = "src/common/pico_time/include";
	CFILE = "../time.c";
	CFILE = "../timeout_helper.c";
  };

  LIBRARY pico_stdlib {
	USE_PREFIX = TRUE { VARIABLE = "PICO_SDK_PATH";};
	NEEDS = pico_stdio;
    PATH = "src/common/pico_stdlib/include/pico";
	CHEADER = "stdlib.h";
  };
};
    
